
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a60  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08013c20  08013c20  00023c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801487c  0801487c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801487c  0801487c  0002487c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014884  08014884  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014884  08014884  00024884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014888  08014888  00024888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801488c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000615c  200001f0  08014a7c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000634c  08014a7c  0003634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e55  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053f9  00000000  00000000  00058075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  0005d470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef0  00000000  00000000  0005f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003080c  00000000  00000000  00061478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e92  00000000  00000000  00091c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d45c  00000000  00000000  000b9b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d6f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1ac  00000000  00000000  001d6fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013c08 	.word	0x08013c08

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	08013c08 	.word	0x08013c08

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f00 <FusionRadiansToDegrees+0x24>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	42652ee0 	.word	0x42652ee0

08000f04 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d802      	bhi.n	8000f26 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000f20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f54 <FusionAsin+0x50>
 8000f24:	e011      	b.n	8000f4a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	db02      	blt.n	8000f3e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000f38:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f58 <FusionAsin+0x54>
 8000f3c:	e005      	b.n	8000f4a <FusionAsin+0x46>
    }
    return asinf(value);
 8000f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f42:	f011 fb65 	bl	8012610 <asinf>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	bfc90fdb 	.word	0xbfc90fdb
 8000f58:	3fc90fdb 	.word	0x3fc90fdb

08000f5c <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b091      	sub	sp, #68	; 0x44
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	eeb0 5a40 	vmov.f32	s10, s0
 8000f66:	eef0 5a60 	vmov.f32	s11, s1
 8000f6a:	eeb0 6a41 	vmov.f32	s12, s2
 8000f6e:	eef0 6a61 	vmov.f32	s13, s3
 8000f72:	eeb0 7a42 	vmov.f32	s14, s4
 8000f76:	eef0 7a62 	vmov.f32	s15, s5
 8000f7a:	ed87 5a07 	vstr	s10, [r7, #28]
 8000f7e:	edc7 5a08 	vstr	s11, [r7, #32]
 8000f82:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8000f86:	edc7 6a04 	vstr	s13, [r7, #16]
 8000f8a:	ed87 7a05 	vstr	s14, [r7, #20]
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8000f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8000fa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8000fb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd6:	ee06 1a90 	vmov	s13, r1
 8000fda:	ee07 2a10 	vmov	s14, r2
 8000fde:	ee07 3a90 	vmov	s15, r3
}
 8000fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fe6:	eef0 0a47 	vmov.f32	s1, s14
 8000fea:	eeb0 1a67 	vmov.f32	s2, s15
 8000fee:	3744      	adds	r7, #68	; 0x44
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b091      	sub	sp, #68	; 0x44
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	eeb0 5a40 	vmov.f32	s10, s0
 8001002:	eef0 5a60 	vmov.f32	s11, s1
 8001006:	eeb0 6a41 	vmov.f32	s12, s2
 800100a:	eef0 6a61 	vmov.f32	s13, s3
 800100e:	eeb0 7a42 	vmov.f32	s14, s4
 8001012:	eef0 7a62 	vmov.f32	s15, s5
 8001016:	ed87 5a07 	vstr	s10, [r7, #28]
 800101a:	edc7 5a08 	vstr	s11, [r7, #32]
 800101e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001022:	edc7 6a04 	vstr	s13, [r7, #16]
 8001026:	ed87 7a05 	vstr	s14, [r7, #20]
 800102a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800102e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800103a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800103e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800104a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800104e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001052:	edd7 7a06 	vldr	s15, [r7, #24]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800105a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800106c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	ee06 1a90 	vmov	s13, r1
 8001076:	ee07 2a10 	vmov	s14, r2
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a66 	vmov.f32	s0, s13
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 1a67 	vmov.f32	s2, s15
 800108a:	3744      	adds	r7, #68	; 0x44
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001094:	b084      	sub	sp, #16
 8001096:	b480      	push	{r7}
 8001098:	b08f      	sub	sp, #60	; 0x3c
 800109a:	af00      	add	r7, sp, #0
 800109c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 80010a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a4:	eef0 6a40 	vmov.f32	s13, s0
 80010a8:	eeb0 7a60 	vmov.f32	s14, s1
 80010ac:	eef0 7a41 	vmov.f32	s15, s2
 80010b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80010b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80010bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80010dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010e8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80010ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80010fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001108:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800110c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 800111c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001138:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001148:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800115a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	ee06 1a90 	vmov	s13, r1
 8001164:	ee07 2a10 	vmov	s14, r2
 8001168:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800116c:	eeb0 0a66 	vmov.f32	s0, s13
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	373c      	adds	r7, #60	; 0x3c
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
 800118a:	eeb0 6a40 	vmov.f32	s12, s0
 800118e:	eef0 6a60 	vmov.f32	s13, s1
 8001192:	eeb0 7a41 	vmov.f32	s14, s2
 8001196:	eef0 7a61 	vmov.f32	s15, s3
 800119a:	ed87 6a04 	vstr	s12, [r7, #16]
 800119e:	edc7 6a05 	vstr	s13, [r7, #20]
 80011a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80011a6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80011aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80011ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80011c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011de:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	eeb0 0a66 	vmov.f32	s0, s13
 80011fa:	f011 fa35 	bl	8012668 <atan2f>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f7ff fe69 	bl	8000edc <FusionRadiansToDegrees>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800120e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8001212:	ed97 7a04 	vldr	s14, [r7, #16]
 8001216:	edd7 7a06 	vldr	s15, [r7, #24]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f7ff fe65 	bl	8000f04 <FusionAsin>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff fe4b 	bl	8000edc <FusionRadiansToDegrees>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800124a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800124e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001252:	edd7 7a07 	vldr	s15, [r7, #28]
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	edd7 6a05 	vldr	s13, [r7, #20]
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 6a27 	vadd.f32	s13, s14, s15
 800126a:	ed97 7a07 	vldr	s14, [r7, #28]
 800126e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	eeb0 0a66 	vmov.f32	s0, s13
 8001286:	f011 f9ef 	bl	8012668 <atan2f>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f7ff fe23 	bl	8000edc <FusionRadiansToDegrees>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800129a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	ee06 1a90 	vmov	s13, r1
 80012b6:	ee07 2a10 	vmov	s14, r2
 80012ba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80012be:	eeb0 0a66 	vmov.f32	s0, s13
 80012c2:	eef0 0a47 	vmov.f32	s1, s14
 80012c6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ca:	3740      	adds	r7, #64	; 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 80012d0:	b084      	sub	sp, #16
 80012d2:	b5b0      	push	{r4, r5, r7, lr}
 80012d4:	b09e      	sub	sp, #120	; 0x78
 80012d6:	af06      	add	r7, sp, #24
 80012d8:	eef0 4a41 	vmov.f32	s9, s2
 80012dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012e4:	eeb0 5a61 	vmov.f32	s10, s3
 80012e8:	eef0 5a42 	vmov.f32	s11, s4
 80012ec:	eeb0 6a62 	vmov.f32	s12, s5
 80012f0:	eef0 6a43 	vmov.f32	s13, s6
 80012f4:	eeb0 7a63 	vmov.f32	s14, s7
 80012f8:	eef0 7a44 	vmov.f32	s15, s8
 80012fc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001300:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001304:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8001308:	ed87 5a08 	vstr	s10, [r7, #32]
 800130c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8001310:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8001314:	edc7 6a05 	vstr	s13, [r7, #20]
 8001318:	ed87 7a06 	vstr	s14, [r7, #24]
 800131c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8001320:	ed97 5a05 	vldr	s10, [r7, #20]
 8001324:	edd7 5a06 	vldr	s11, [r7, #24]
 8001328:	ed97 6a07 	vldr	s12, [r7, #28]
 800132c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001330:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001338:	eef0 1a45 	vmov.f32	s3, s10
 800133c:	eeb0 2a65 	vmov.f32	s4, s11
 8001340:	eef0 2a46 	vmov.f32	s5, s12
 8001344:	eeb0 0a66 	vmov.f32	s0, s13
 8001348:	eef0 0a47 	vmov.f32	s1, s14
 800134c:	eeb0 1a67 	vmov.f32	s2, s15
 8001350:	f7ff fe04 	bl	8000f5c <FusionVectorSubtract>
 8001354:	eef0 6a40 	vmov.f32	s13, s0
 8001358:	eeb0 7a60 	vmov.f32	s14, s1
 800135c:	eef0 7a41 	vmov.f32	s15, s2
 8001360:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8001364:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8001368:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800136c:	ed97 5a08 	vldr	s10, [r7, #32]
 8001370:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001378:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800137c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001380:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001384:	eef0 1a45 	vmov.f32	s3, s10
 8001388:	eeb0 2a65 	vmov.f32	s4, s11
 800138c:	eef0 2a46 	vmov.f32	s5, s12
 8001390:	eeb0 0a66 	vmov.f32	s0, s13
 8001394:	eef0 0a47 	vmov.f32	s1, s14
 8001398:	eeb0 1a67 	vmov.f32	s2, s15
 800139c:	f7ff fe2c 	bl	8000ff8 <FusionVectorHadamardProduct>
 80013a0:	eef0 6a40 	vmov.f32	s13, s0
 80013a4:	eeb0 7a60 	vmov.f32	s14, s1
 80013a8:	eef0 7a41 	vmov.f32	s15, s2
 80013ac:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 80013b0:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 80013b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80013b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80013bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013c4:	466d      	mov	r5, sp
 80013c6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	eeb0 0a66 	vmov.f32	s0, s13
 80013dc:	eef0 0a47 	vmov.f32	s1, s14
 80013e0:	eeb0 1a67 	vmov.f32	s2, s15
 80013e4:	f7ff fe56 	bl	8001094 <FusionMatrixMultiplyVector>
 80013e8:	eef0 6a40 	vmov.f32	s13, s0
 80013ec:	eeb0 7a60 	vmov.f32	s14, s1
 80013f0:	eef0 7a41 	vmov.f32	s15, s2
 80013f4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 80013f8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80013fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001406:	ee06 1a90 	vmov	s13, r1
 800140a:	ee07 2a10 	vmov	s14, r2
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a66 	vmov.f32	s0, s13
 8001416:	eef0 0a47 	vmov.f32	s1, s14
 800141a:	eeb0 1a67 	vmov.f32	s2, s15
 800141e:	3760      	adds	r7, #96	; 0x60
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr

0800142a <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 800142a:	b084      	sub	sp, #16
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	af06      	add	r7, sp, #24
 8001432:	eeb0 5a40 	vmov.f32	s10, s0
 8001436:	eef0 5a60 	vmov.f32	s11, s1
 800143a:	eeb0 6a41 	vmov.f32	s12, s2
 800143e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001446:	eef0 6a61 	vmov.f32	s13, s3
 800144a:	eeb0 7a42 	vmov.f32	s14, s4
 800144e:	eef0 7a62 	vmov.f32	s15, s5
 8001452:	ed87 5a07 	vstr	s10, [r7, #28]
 8001456:	edc7 5a08 	vstr	s11, [r7, #32]
 800145a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800145e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001462:	ed87 7a05 	vstr	s14, [r7, #20]
 8001466:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronOffset);
 800146a:	edd7 6a07 	vldr	s13, [r7, #28]
 800146e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001472:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001476:	466d      	mov	r5, sp
 8001478:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	602b      	str	r3, [r5, #0]
 8001484:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	eeb0 0a66 	vmov.f32	s0, s13
 800148e:	eef0 0a47 	vmov.f32	s1, s14
 8001492:	eeb0 1a67 	vmov.f32	s2, s15
 8001496:	f7ff fdfd 	bl	8001094 <FusionMatrixMultiplyVector>
 800149a:	eef0 6a40 	vmov.f32	s13, s0
 800149e:	eeb0 7a60 	vmov.f32	s14, s1
 80014a2:	eef0 7a41 	vmov.f32	s15, s2
 80014a6:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80014aa:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80014ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80014b2:	ed97 5a04 	vldr	s10, [r7, #16]
 80014b6:	edd7 5a05 	vldr	s11, [r7, #20]
 80014ba:	ed97 6a06 	vldr	s12, [r7, #24]
 80014be:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80014c2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80014c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014ca:	eef0 1a45 	vmov.f32	s3, s10
 80014ce:	eeb0 2a65 	vmov.f32	s4, s11
 80014d2:	eef0 2a46 	vmov.f32	s5, s12
 80014d6:	eeb0 0a66 	vmov.f32	s0, s13
 80014da:	eef0 0a47 	vmov.f32	s1, s14
 80014de:	eeb0 1a67 	vmov.f32	s2, s15
 80014e2:	f7ff fd3b 	bl	8000f5c <FusionVectorSubtract>
 80014e6:	eef0 6a40 	vmov.f32	s13, s0
 80014ea:	eeb0 7a60 	vmov.f32	s14, s1
 80014ee:	eef0 7a41 	vmov.f32	s15, s2
 80014f2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80014f6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80014fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80014fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001504:	ee06 1a90 	vmov	s13, r1
 8001508:	ee07 2a10 	vmov	s14, r2
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a66 	vmov.f32	s0, s13
 8001514:	eef0 0a47 	vmov.f32	s1, s14
 8001518:	eeb0 1a67 	vmov.f32	s2, s15
 800151c:	3740      	adds	r7, #64	; 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001524:	b004      	add	sp, #16
 8001526:	4770      	bx	lr

08001528 <FusionInit>:

FusionAhrs ahrs;
FusionOffset offset;

/* Initialize Fusion algorithm. */
void FusionInit(void){
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 800152e:	2146      	movs	r1, #70	; 0x46
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <FusionInit+0x34>)
 8001532:	f002 fa57 	bl	80039e4 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <FusionInit+0x38>)
 8001538:	f000 fe6c 	bl	8002214 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <FusionInit+0x3c>)
 800153e:	1d3c      	adds	r4, r7, #4
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 10.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <FusionInit+0x38>)
 8001550:	f000 feda 	bl	8002308 <FusionAhrsSetSettings>

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	20000274 	.word	0x20000274
 8001560:	2000020c 	.word	0x2000020c
 8001564:	08013c20 	.word	0x08013c20

08001568 <FusionCalcHeading>:
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}

/* Calculate heading based on all three sensors.*/
void FusionCalcHeading(mems_data_t *memsData, FusionEuler *output_angles){
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b099      	sub	sp, #100	; 0x64
 800156c:	af06      	add	r7, sp, #24
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	const clock_t timestamp = memsData->timestamp; // timestamp taken from LSM6DRX gyroscope.
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
	FusionVector gyroscope = {memsData->gyro_x, memsData->gyro_y, memsData->gyro_z};
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
	FusionVector accelerometer = {memsData->acc_x, memsData->acc_y, memsData->acc_z};
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	623b      	str	r3, [r7, #32]
	FusionVector magnetometer = {memsData->magn_x, memsData->magn_y, memsData->magn_z}; // replace this with actual magnetometer data in arbitrary units
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	617b      	str	r3, [r7, #20]

	// Apply calibration
	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80015ae:	4bb4      	ldr	r3, [pc, #720]	; (8001880 <FusionCalcHeading+0x318>)
 80015b0:	edd3 3a00 	vldr	s7, [r3]
 80015b4:	ed93 4a01 	vldr	s8, [r3, #4]
 80015b8:	edd3 4a02 	vldr	s9, [r3, #8]
 80015bc:	4bb1      	ldr	r3, [pc, #708]	; (8001884 <FusionCalcHeading+0x31c>)
 80015be:	ed93 5a00 	vldr	s10, [r3]
 80015c2:	edd3 5a01 	vldr	s11, [r3, #4]
 80015c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80015ca:	4eaf      	ldr	r6, [pc, #700]	; (8001888 <FusionCalcHeading+0x320>)
 80015cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015d8:	466d      	mov	r5, sp
 80015da:	f106 0410 	add.w	r4, r6, #16
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	602b      	str	r3, [r5, #0]
 80015e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015ea:	eeb0 3a63 	vmov.f32	s6, s7
 80015ee:	eef0 3a44 	vmov.f32	s7, s8
 80015f2:	eeb0 4a64 	vmov.f32	s8, s9
 80015f6:	eef0 1a45 	vmov.f32	s3, s10
 80015fa:	eeb0 2a65 	vmov.f32	s4, s11
 80015fe:	eef0 2a46 	vmov.f32	s5, s12
 8001602:	eeb0 0a66 	vmov.f32	s0, s13
 8001606:	eef0 0a47 	vmov.f32	s1, s14
 800160a:	eeb0 1a67 	vmov.f32	s2, s15
 800160e:	f7ff fe5f 	bl	80012d0 <FusionCalibrationInertial>
 8001612:	eef0 6a40 	vmov.f32	s13, s0
 8001616:	eeb0 7a60 	vmov.f32	s14, s1
 800161a:	eef0 7a41 	vmov.f32	s15, s2
 800161e:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001622:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001626:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 800162a:	4b98      	ldr	r3, [pc, #608]	; (800188c <FusionCalcHeading+0x324>)
 800162c:	edd3 3a00 	vldr	s7, [r3]
 8001630:	ed93 4a01 	vldr	s8, [r3, #4]
 8001634:	edd3 4a02 	vldr	s9, [r3, #8]
 8001638:	4b95      	ldr	r3, [pc, #596]	; (8001890 <FusionCalcHeading+0x328>)
 800163a:	ed93 5a00 	vldr	s10, [r3]
 800163e:	edd3 5a01 	vldr	s11, [r3, #4]
 8001642:	ed93 6a02 	vldr	s12, [r3, #8]
 8001646:	4e93      	ldr	r6, [pc, #588]	; (8001894 <FusionCalcHeading+0x32c>)
 8001648:	edd7 6a06 	vldr	s13, [r7, #24]
 800164c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001650:	edd7 7a08 	vldr	s15, [r7, #32]
 8001654:	466d      	mov	r5, sp
 8001656:	f106 0410 	add.w	r4, r6, #16
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	602b      	str	r3, [r5, #0]
 8001662:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001666:	eeb0 3a63 	vmov.f32	s6, s7
 800166a:	eef0 3a44 	vmov.f32	s7, s8
 800166e:	eeb0 4a64 	vmov.f32	s8, s9
 8001672:	eef0 1a45 	vmov.f32	s3, s10
 8001676:	eeb0 2a65 	vmov.f32	s4, s11
 800167a:	eef0 2a46 	vmov.f32	s5, s12
 800167e:	eeb0 0a66 	vmov.f32	s0, s13
 8001682:	eef0 0a47 	vmov.f32	s1, s14
 8001686:	eeb0 1a67 	vmov.f32	s2, s15
 800168a:	f7ff fe21 	bl	80012d0 <FusionCalibrationInertial>
 800168e:	eef0 6a40 	vmov.f32	s13, s0
 8001692:	eeb0 7a60 	vmov.f32	s14, s1
 8001696:	eef0 7a41 	vmov.f32	s15, s2
 800169a:	edc7 6a06 	vstr	s13, [r7, #24]
 800169e:	ed87 7a07 	vstr	s14, [r7, #28]
 80016a2:	edc7 7a08 	vstr	s15, [r7, #32]
	magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 80016a6:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <FusionCalcHeading+0x330>)
 80016a8:	ed93 5a00 	vldr	s10, [r3]
 80016ac:	edd3 5a01 	vldr	s11, [r3, #4]
 80016b0:	ed93 6a02 	vldr	s12, [r3, #8]
 80016b4:	4e79      	ldr	r6, [pc, #484]	; (800189c <FusionCalcHeading+0x334>)
 80016b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80016be:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c2:	466d      	mov	r5, sp
 80016c4:	f106 0410 	add.w	r4, r6, #16
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016d4:	eef0 1a45 	vmov.f32	s3, s10
 80016d8:	eeb0 2a65 	vmov.f32	s4, s11
 80016dc:	eef0 2a46 	vmov.f32	s5, s12
 80016e0:	eeb0 0a66 	vmov.f32	s0, s13
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 1a67 	vmov.f32	s2, s15
 80016ec:	f7ff fe9d 	bl	800142a <FusionCalibrationMagnetic>
 80016f0:	eef0 6a40 	vmov.f32	s13, s0
 80016f4:	eeb0 7a60 	vmov.f32	s14, s1
 80016f8:	eef0 7a41 	vmov.f32	s15, s2
 80016fc:	edc7 6a03 	vstr	s13, [r7, #12]
 8001700:	ed87 7a04 	vstr	s14, [r7, #16]
 8001704:	edc7 7a05 	vstr	s15, [r7, #20]

	// Update gyroscope offset correction algorithm
	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 8001708:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800170c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001714:	eeb0 0a66 	vmov.f32	s0, s13
 8001718:	eef0 0a47 	vmov.f32	s1, s14
 800171c:	eeb0 1a67 	vmov.f32	s2, s15
 8001720:	485f      	ldr	r0, [pc, #380]	; (80018a0 <FusionCalcHeading+0x338>)
 8001722:	f002 f991 	bl	8003a48 <FusionOffsetUpdate>
 8001726:	eef0 6a40 	vmov.f32	s13, s0
 800172a:	eeb0 7a60 	vmov.f32	s14, s1
 800172e:	eef0 7a41 	vmov.f32	s15, s2
 8001732:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001736:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800173a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Calculate delta time (in seconds) to account for gyroscope sample clock error
	static clock_t previousTimestamp;
	const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <FusionCalcHeading+0x33c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174e:	eddf 6a56 	vldr	s13, [pc, #344]	; 80018a8 <FusionCalcHeading+0x340>
 8001752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001756:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	previousTimestamp = timestamp;
 800175a:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <FusionCalcHeading+0x33c>)
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	6013      	str	r3, [r2, #0]


	// Update gyroscope AHRS algorithm
	FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 8001760:	ed97 3a03 	vldr	s6, [r7, #12]
 8001764:	edd7 3a04 	vldr	s7, [r7, #16]
 8001768:	ed97 4a05 	vldr	s8, [r7, #20]
 800176c:	ed97 5a06 	vldr	s10, [r7, #24]
 8001770:	edd7 5a07 	vldr	s11, [r7, #28]
 8001774:	ed97 6a08 	vldr	s12, [r7, #32]
 8001778:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800177c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001784:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8001788:	eef0 1a45 	vmov.f32	s3, s10
 800178c:	eeb0 2a65 	vmov.f32	s4, s11
 8001790:	eef0 2a46 	vmov.f32	s5, s12
 8001794:	eeb0 0a66 	vmov.f32	s0, s13
 8001798:	eef0 0a47 	vmov.f32	s1, s14
 800179c:	eeb0 1a67 	vmov.f32	s2, s15
 80017a0:	4842      	ldr	r0, [pc, #264]	; (80018ac <FusionCalcHeading+0x344>)
 80017a2:	f000 fe3f 	bl	8002424 <FusionAhrsUpdate>

	// Print algorithm outputs
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 80017a6:	4841      	ldr	r0, [pc, #260]	; (80018ac <FusionCalcHeading+0x344>)
 80017a8:	f001 fb64 	bl	8002e74 <FusionAhrsGetQuaternion>
 80017ac:	eeb0 6a40 	vmov.f32	s12, s0
 80017b0:	eef0 6a60 	vmov.f32	s13, s1
 80017b4:	eeb0 7a41 	vmov.f32	s14, s2
 80017b8:	eef0 7a61 	vmov.f32	s15, s3
 80017bc:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 80017c0:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80017c4:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80017c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80017cc:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80017d0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80017d4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80017d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017dc:	eeb0 0a46 	vmov.f32	s0, s12
 80017e0:	eef0 0a66 	vmov.f32	s1, s13
 80017e4:	eeb0 1a47 	vmov.f32	s2, s14
 80017e8:	eef0 1a67 	vmov.f32	s3, s15
 80017ec:	f7ff fcca 	bl	8001184 <FusionQuaternionToEuler>
 80017f0:	eef0 6a40 	vmov.f32	s13, s0
 80017f4:	eeb0 7a60 	vmov.f32	s14, s1
 80017f8:	eef0 7a41 	vmov.f32	s15, s2
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 6a00 	vstr	s13, [r3]
 8001802:	ed83 7a01 	vstr	s14, [r3, #4]
 8001806:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d509      	bpl.n	800182e <FusionCalcHeading+0x2c6>
		output_angles->angle.yaw += 360;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001820:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80018b0 <FusionCalcHeading+0x348>
 8001824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d509      	bpl.n	8001852 <FusionCalcHeading+0x2ea>
		output_angles->angle.roll += 360;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018b0 <FusionCalcHeading+0x348>
 8001848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	edd3 7a01 	vldr	s15, [r3, #4]
 8001858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	d400      	bmi.n	8001864 <FusionCalcHeading+0x2fc>
		output_angles->angle.pitch += 360;
	}
//	const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
}
 8001862:	e009      	b.n	8001878 <FusionCalcHeading+0x310>
		output_angles->angle.pitch += 360;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	edd3 7a01 	vldr	s15, [r3, #4]
 800186a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80018b0 <FusionCalcHeading+0x348>
 800186e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	374c      	adds	r7, #76	; 0x4c
 800187c:	46bd      	mov	sp, r7
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	08013e38 	.word	0x08013e38
 8001884:	08013e2c 	.word	0x08013e2c
 8001888:	08013e08 	.word	0x08013e08
 800188c:	08013e74 	.word	0x08013e74
 8001890:	08013e68 	.word	0x08013e68
 8001894:	08013e44 	.word	0x08013e44
 8001898:	08013ea4 	.word	0x08013ea4
 800189c:	08013e80 	.word	0x08013e80
 80018a0:	20000274 	.word	0x20000274
 80018a4:	2000028c 	.word	0x2000028c
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	2000020c 	.word	0x2000020c
 80018b0:	43b40000 	.word	0x43b40000

080018b4 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80018be:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018d8 <FusionDegreesToRadians+0x24>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	3c8efa35 	.word	0x3c8efa35

080018dc <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	105a      	asrs	r2, r3, #1
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <FusionFastInverseSqrt+0x54>)
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80018f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001934 <FusionFastInverseSqrt+0x58>
 8001900:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001904:	edd7 7a03 	vldr	s15, [r7, #12]
 8001908:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001938 <FusionFastInverseSqrt+0x5c>
 8001918:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	5f1f1412 	.word	0x5f1f1412
 8001934:	3f36d312 	.word	0x3f36d312
 8001938:	3fd851ff 	.word	0x3fd851ff

0800193c <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	eef0 6a40 	vmov.f32	s13, s0
 8001946:	eeb0 7a60 	vmov.f32	s14, s1
 800194a:	eef0 7a41 	vmov.f32	s15, s2
 800194e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001952:	ed87 7a02 	vstr	s14, [r7, #8]
 8001956:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800195a:	edd7 7a01 	vldr	s15, [r7, #4]
 800195e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d10f      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001968:	edd7 7a02 	vldr	s15, [r7, #8]
 800196c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d108      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001976:	edd7 7a03 	vldr	s15, [r7, #12]
 800197a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d101      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <FusionVectorIsZero+0x4e>
 8001988:	2300      	movs	r3, #0
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800199c:	b480      	push	{r7}
 800199e:	b091      	sub	sp, #68	; 0x44
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	eeb0 5a40 	vmov.f32	s10, s0
 80019a6:	eef0 5a60 	vmov.f32	s11, s1
 80019aa:	eeb0 6a41 	vmov.f32	s12, s2
 80019ae:	eef0 6a61 	vmov.f32	s13, s3
 80019b2:	eeb0 7a42 	vmov.f32	s14, s4
 80019b6:	eef0 7a62 	vmov.f32	s15, s5
 80019ba:	ed87 5a07 	vstr	s10, [r7, #28]
 80019be:	edc7 5a08 	vstr	s11, [r7, #32]
 80019c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80019c6:	edc7 6a04 	vstr	s13, [r7, #16]
 80019ca:	ed87 7a05 	vstr	s14, [r7, #20]
 80019ce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80019d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80019e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80019f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	ee06 1a90 	vmov	s13, r1
 8001a1a:	ee07 2a10 	vmov	s14, r2
 8001a1e:	ee07 3a90 	vmov	s15, r3
}
 8001a22:	eeb0 0a66 	vmov.f32	s0, s13
 8001a26:	eef0 0a47 	vmov.f32	s1, s14
 8001a2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a2e:	3744      	adds	r7, #68	; 0x44
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	eef0 6a40 	vmov.f32	s13, s0
 8001a42:	eeb0 7a60 	vmov.f32	s14, s1
 8001a46:	eef0 7a41 	vmov.f32	s15, s2
 8001a4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001a56:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	eef0 6a40 	vmov.f32	s13, s0
 8001a82:	eeb0 7a60 	vmov.f32	s14, s1
 8001a86:	eef0 7a41 	vmov.f32	s15, s2
 8001a8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8001a8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a92:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a96:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8001a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001aa6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8001aaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ab6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8001aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8001abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ac6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8001aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ace:	f107 0220 	add.w	r2, r7, #32
 8001ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	ee06 1a90 	vmov	s13, r1
 8001ae2:	ee07 2a10 	vmov	s14, r2
 8001ae6:	ee07 3a90 	vmov	s15, r3
}
 8001aea:	eeb0 0a66 	vmov.f32	s0, s13
 8001aee:	eef0 0a47 	vmov.f32	s1, s14
 8001af2:	eeb0 1a67 	vmov.f32	s2, s15
 8001af6:	373c      	adds	r7, #60	; 0x3c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b00:	b480      	push	{r7}
 8001b02:	b091      	sub	sp, #68	; 0x44
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	eeb0 5a40 	vmov.f32	s10, s0
 8001b0a:	eef0 5a60 	vmov.f32	s11, s1
 8001b0e:	eeb0 6a41 	vmov.f32	s12, s2
 8001b12:	eef0 6a61 	vmov.f32	s13, s3
 8001b16:	eeb0 7a42 	vmov.f32	s14, s4
 8001b1a:	eef0 7a62 	vmov.f32	s15, s5
 8001b1e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001b22:	edc7 5a08 	vstr	s11, [r7, #32]
 8001b26:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001b2a:	edc7 6a04 	vstr	s13, [r7, #16]
 8001b2e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001b32:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001b36:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001b46:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001b56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7a:	ee06 1a90 	vmov	s13, r1
 8001b7e:	ee07 2a10 	vmov	s14, r2
 8001b82:	ee07 3a90 	vmov	s15, r3
}
 8001b86:	eeb0 0a66 	vmov.f32	s0, s13
 8001b8a:	eef0 0a47 	vmov.f32	s1, s14
 8001b8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001b92:	3744      	adds	r7, #68	; 0x44
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b091      	sub	sp, #68	; 0x44
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	eeb0 5a40 	vmov.f32	s10, s0
 8001ba6:	eef0 5a60 	vmov.f32	s11, s1
 8001baa:	eeb0 6a41 	vmov.f32	s12, s2
 8001bae:	eef0 6a61 	vmov.f32	s13, s3
 8001bb2:	eeb0 7a42 	vmov.f32	s14, s4
 8001bb6:	eef0 7a62 	vmov.f32	s15, s5
 8001bba:	ed87 5a07 	vstr	s10, [r7, #28]
 8001bbe:	edc7 5a08 	vstr	s11, [r7, #32]
 8001bc2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001bc6:	edc7 6a04 	vstr	s13, [r7, #16]
 8001bca:	ed87 7a05 	vstr	s14, [r7, #20]
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8001bd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bde:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001bee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8001bf2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001c12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c2e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	ee06 1a90 	vmov	s13, r1
 8001c4a:	ee07 2a10 	vmov	s14, r2
 8001c4e:	ee07 3a90 	vmov	s15, r3
}
 8001c52:	eeb0 0a66 	vmov.f32	s0, s13
 8001c56:	eef0 0a47 	vmov.f32	s1, s14
 8001c5a:	eeb0 1a67 	vmov.f32	s2, s15
 8001c5e:	3744      	adds	r7, #68	; 0x44
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	eef0 6a40 	vmov.f32	s13, s0
 8001c72:	eeb0 7a60 	vmov.f32	s14, s1
 8001c76:	eef0 7a41 	vmov.f32	s15, s2
 8001c7a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c7e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c82:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001c86:	ed97 5a01 	vldr	s10, [r7, #4]
 8001c8a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001c92:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9e:	eef0 1a45 	vmov.f32	s3, s10
 8001ca2:	eeb0 2a65 	vmov.f32	s4, s11
 8001ca6:	eef0 2a46 	vmov.f32	s5, s12
 8001caa:	eeb0 0a66 	vmov.f32	s0, s13
 8001cae:	eef0 0a47 	vmov.f32	s1, s14
 8001cb2:	eeb0 1a67 	vmov.f32	s2, s15
 8001cb6:	f7ff ff23 	bl	8001b00 <FusionVectorHadamardProduct>
 8001cba:	eef0 6a40 	vmov.f32	s13, s0
 8001cbe:	eeb0 7a60 	vmov.f32	s14, s1
 8001cc2:	eef0 7a41 	vmov.f32	s15, s2
 8001cc6:	edc7 6a05 	vstr	s13, [r7, #20]
 8001cca:	ed87 7a06 	vstr	s14, [r7, #24]
 8001cce:	edc7 7a07 	vstr	s15, [r7, #28]
 8001cd2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cde:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce2:	eef0 0a47 	vmov.f32	s1, s14
 8001ce6:	eeb0 1a67 	vmov.f32	s2, s15
 8001cea:	f7ff fea5 	bl	8001a38 <FusionVectorSum>
 8001cee:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	eef0 6a40 	vmov.f32	s13, s0
 8001d06:	eeb0 7a60 	vmov.f32	s14, s1
 8001d0a:	eef0 7a41 	vmov.f32	s15, s2
 8001d0e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d12:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d16:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001d1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d26:	eeb0 0a66 	vmov.f32	s0, s13
 8001d2a:	eef0 0a47 	vmov.f32	s1, s14
 8001d2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d32:	f7ff ff99 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	f7ff fdcd 	bl	80018dc <FusionFastInverseSqrt>
 8001d42:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001d46:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d52:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001d56:	eeb0 0a66 	vmov.f32	s0, s13
 8001d5a:	eef0 0a47 	vmov.f32	s1, s14
 8001d5e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d62:	f7ff fe89 	bl	8001a78 <FusionVectorMultiplyScalar>
 8001d66:	eef0 6a40 	vmov.f32	s13, s0
 8001d6a:	eeb0 7a60 	vmov.f32	s14, s1
 8001d6e:	eef0 7a41 	vmov.f32	s15, s2
 8001d72:	edc7 6a08 	vstr	s13, [r7, #32]
 8001d76:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001d7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	ee06 1a90 	vmov	s13, r1
 8001d88:	ee07 2a10 	vmov	s14, r2
 8001d8c:	ee07 3a90 	vmov	s15, r3
}
 8001d90:	eeb0 0a66 	vmov.f32	s0, s13
 8001d94:	eef0 0a47 	vmov.f32	s1, s14
 8001d98:	eeb0 1a67 	vmov.f32	s2, s15
 8001d9c:	3730      	adds	r7, #48	; 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001da2:	b490      	push	{r4, r7}
 8001da4:	b094      	sub	sp, #80	; 0x50
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	eeb0 4a40 	vmov.f32	s8, s0
 8001dac:	eef0 4a60 	vmov.f32	s9, s1
 8001db0:	eeb0 5a41 	vmov.f32	s10, s2
 8001db4:	eef0 5a61 	vmov.f32	s11, s3
 8001db8:	eeb0 6a42 	vmov.f32	s12, s4
 8001dbc:	eef0 6a62 	vmov.f32	s13, s5
 8001dc0:	eeb0 7a43 	vmov.f32	s14, s6
 8001dc4:	eef0 7a63 	vmov.f32	s15, s7
 8001dc8:	ed87 4a08 	vstr	s8, [r7, #32]
 8001dcc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001dd0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001dd4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001dd8:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ddc:	edc7 6a05 	vstr	s13, [r7, #20]
 8001de0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001de4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001de8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001df4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001df8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001e08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001e18:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001e28:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	ee06 0a10 	vmov	s12, r0
 8001e42:	ee06 1a90 	vmov	s13, r1
 8001e46:	ee07 2a10 	vmov	s14, r2
 8001e4a:	ee07 3a90 	vmov	s15, r3
}
 8001e4e:	eeb0 0a46 	vmov.f32	s0, s12
 8001e52:	eef0 0a66 	vmov.f32	s1, s13
 8001e56:	eeb0 1a47 	vmov.f32	s2, s14
 8001e5a:	eef0 1a67 	vmov.f32	s3, s15
 8001e5e:	3750      	adds	r7, #80	; 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc90      	pop	{r4, r7}
 8001e64:	4770      	bx	lr

08001e66 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001e66:	b490      	push	{r4, r7}
 8001e68:	b094      	sub	sp, #80	; 0x50
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	eeb0 4a40 	vmov.f32	s8, s0
 8001e70:	eef0 4a60 	vmov.f32	s9, s1
 8001e74:	eeb0 5a41 	vmov.f32	s10, s2
 8001e78:	eef0 5a61 	vmov.f32	s11, s3
 8001e7c:	eeb0 6a42 	vmov.f32	s12, s4
 8001e80:	eef0 6a62 	vmov.f32	s13, s5
 8001e84:	eeb0 7a43 	vmov.f32	s14, s6
 8001e88:	eef0 7a63 	vmov.f32	s15, s7
 8001e8c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001e90:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001e94:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001e98:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001e9c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ea0:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ea4:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ea8:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001eac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ebc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ee8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001eec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f28:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001f2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001fac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc2:	ee06 0a10 	vmov	s12, r0
 8001fc6:	ee06 1a90 	vmov	s13, r1
 8001fca:	ee07 2a10 	vmov	s14, r2
 8001fce:	ee07 3a90 	vmov	s15, r3
}
 8001fd2:	eeb0 0a46 	vmov.f32	s0, s12
 8001fd6:	eef0 0a66 	vmov.f32	s1, s13
 8001fda:	eeb0 1a47 	vmov.f32	s2, s14
 8001fde:	eef0 1a67 	vmov.f32	s3, s15
 8001fe2:	3750      	adds	r7, #80	; 0x50
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc90      	pop	{r4, r7}
 8001fe8:	4770      	bx	lr

08001fea <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001fea:	b490      	push	{r4, r7}
 8001fec:	b094      	sub	sp, #80	; 0x50
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	eef0 4a40 	vmov.f32	s9, s0
 8001ff4:	eeb0 5a60 	vmov.f32	s10, s1
 8001ff8:	eef0 5a41 	vmov.f32	s11, s2
 8001ffc:	eeb0 6a61 	vmov.f32	s12, s3
 8002000:	eef0 6a42 	vmov.f32	s13, s4
 8002004:	eeb0 7a62 	vmov.f32	s14, s5
 8002008:	eef0 7a43 	vmov.f32	s15, s6
 800200c:	edc7 4a08 	vstr	s9, [r7, #32]
 8002010:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8002014:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8002018:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800201c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002020:	ed87 7a06 	vstr	s14, [r7, #24]
 8002024:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8002028:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800202c:	eeb1 7a67 	vneg.f32	s14, s15
 8002030:	edd7 7a05 	vldr	s15, [r7, #20]
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800203c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002048:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800204c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002058:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800205c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002060:	edd7 7a05 	vldr	s15, [r7, #20]
 8002064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002068:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800206c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002078:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800207c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002088:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800208c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002090:	edd7 7a06 	vldr	s15, [r7, #24]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800209c:	edd7 7a07 	vldr	s15, [r7, #28]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80020ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 80020bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80020cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80020dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 80020ec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80020f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002102:	ee06 0a10 	vmov	s12, r0
 8002106:	ee06 1a90 	vmov	s13, r1
 800210a:	ee07 2a10 	vmov	s14, r2
 800210e:	ee07 3a90 	vmov	s15, r3
}
 8002112:	eeb0 0a46 	vmov.f32	s0, s12
 8002116:	eef0 0a66 	vmov.f32	s1, s13
 800211a:	eeb0 1a47 	vmov.f32	s2, s14
 800211e:	eef0 1a67 	vmov.f32	s3, s15
 8002122:	3750      	adds	r7, #80	; 0x50
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr

0800212a <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b093      	sub	sp, #76	; 0x4c
 800212e:	af00      	add	r7, sp, #0
 8002130:	eeb0 6a40 	vmov.f32	s12, s0
 8002134:	eef0 6a60 	vmov.f32	s13, s1
 8002138:	eeb0 7a41 	vmov.f32	s14, s2
 800213c:	eef0 7a61 	vmov.f32	s15, s3
 8002140:	ed87 6a04 	vstr	s12, [r7, #16]
 8002144:	edc7 6a05 	vstr	s13, [r7, #20]
 8002148:	ed87 7a06 	vstr	s14, [r7, #24]
 800214c:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002150:	ed97 7a04 	vldr	s14, [r7, #16]
 8002154:	edd7 7a04 	vldr	s15, [r7, #16]
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002170:	edd7 7a06 	vldr	s15, [r7, #24]
 8002174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002180:	edd7 7a07 	vldr	s15, [r7, #28]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	f7ff fba4 	bl	80018dc <FusionFastInverseSqrt>
 8002194:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8002198:	ed97 7a04 	vldr	s14, [r7, #16]
 800219c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 80021a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 80021b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80021bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 80021c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80021cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80021d8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ee:	ee06 0a10 	vmov	s12, r0
 80021f2:	ee06 1a90 	vmov	s13, r1
 80021f6:	ee07 2a10 	vmov	s14, r2
 80021fa:	ee07 3a90 	vmov	s15, r3
}
 80021fe:	eeb0 0a46 	vmov.f32	s0, s12
 8002202:	eef0 0a66 	vmov.f32	s1, s13
 8002206:	eeb0 1a47 	vmov.f32	s2, s14
 800220a:	eef0 1a67 	vmov.f32	s3, s15
 800220e:	374c      	adds	r7, #76	; 0x4c
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <FusionAhrsInitialise+0x34>)
 800221e:	f107 040c 	add.w	r4, r7, #12
 8002222:	461d      	mov	r5, r3
 8002224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f868 	bl	8002308 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f807 	bl	800224c <FusionAhrsReset>
}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bdb0      	pop	{r4, r5, r7, pc}
 8002246:	bf00      	nop
 8002248:	08013c34 	.word	0x08013c34

0800224c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800224c:	b480      	push	{r7}
 800224e:	b091      	sub	sp, #68	; 0x44
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <FusionAhrsReset+0xb8>)
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	649a      	str	r2, [r3, #72]	; 0x48
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80022f6:	bf00      	nop
 80022f8:	3744      	adds	r7, #68	; 0x44
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	41200000 	.word	0x41200000

08002308 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	edd3 7a02 	vldr	s15, [r3, #8]
 8002328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d003      	beq.n	800233a <FusionAhrsSetSettings+0x32>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e01d      	b.n	800237e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	edd3 7a02 	vldr	s15, [r3, #8]
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	f7ff fab2 	bl	80018b4 <FusionDegreesToRadians>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	f010 f914 	bl	8012584 <sinf>
 800235c:	eef0 7a40 	vmov.f32	s15, s0
 8002360:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	f010 f97c 	bl	801266c <powf>
 8002374:	eef0 7a40 	vmov.f32	s15, s0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	edd3 7a03 	vldr	s15, [r3, #12]
 8002384:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d003      	beq.n	8002396 <FusionAhrsSetSettings+0x8e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e01d      	b.n	80023da <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80023a4:	eeb0 0a67 	vmov.f32	s0, s15
 80023a8:	f7ff fa84 	bl	80018b4 <FusionDegreesToRadians>
 80023ac:	eef0 7a40 	vmov.f32	s15, s0
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f010 f8e6 	bl	8012584 <sinf>
 80023b8:	eef0 7a40 	vmov.f32	s15, s0
 80023bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f010 f94e 	bl	801266c <powf>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002400:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002408:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	7f7fffff 	.word	0x7f7fffff

08002424 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0bf      	sub	sp, #252	; 0xfc
 8002428:	af00      	add	r7, sp, #0
 800242a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800242c:	eeb0 5a61 	vmov.f32	s10, s3
 8002430:	eef0 5a42 	vmov.f32	s11, s4
 8002434:	eeb0 6a62 	vmov.f32	s12, s5
 8002438:	eef0 6a43 	vmov.f32	s13, s6
 800243c:	eeb0 7a63 	vmov.f32	s14, s7
 8002440:	eef0 7a44 	vmov.f32	s15, s8
 8002444:	edc7 4a01 	vstr	s9, [r7, #4]
 8002448:	ed87 0a08 	vstr	s0, [r7, #32]
 800244c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002450:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002454:	ed87 5a05 	vstr	s10, [r7, #20]
 8002458:	edc7 5a06 	vstr	s11, [r7, #24]
 800245c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002460:	edc7 6a02 	vstr	s13, [r7, #8]
 8002464:	ed87 7a03 	vstr	s14, [r7, #12]
 8002468:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	f107 0214 	add.w	r2, r7, #20
 8002474:	ca07      	ldmia	r2, {r0, r1, r2}
 8002476:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d025      	beq.n	80024d0 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002490:	edd7 7a01 	vldr	s15, [r7, #4]
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d50b      	bpl.n	80024d0 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80024d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024d2:	f000 fb08 	bl	8002ae6 <HalfGravity>
 80024d6:	eef0 6a40 	vmov.f32	s13, s0
 80024da:	eeb0 7a60 	vmov.f32	s14, s1
 80024de:	eef0 7a41 	vmov.f32	s15, s2
 80024e2:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 80024e6:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 80024ea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 800250e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002512:	ed97 7a06 	vldr	s14, [r7, #24]
 8002516:	edd7 7a07 	vldr	s15, [r7, #28]
 800251a:	eeb0 0a66 	vmov.f32	s0, s13
 800251e:	eef0 0a47 	vmov.f32	s1, s14
 8002522:	eeb0 1a67 	vmov.f32	s2, s15
 8002526:	f7ff fa09 	bl	800193c <FusionVectorIsZero>
 800252a:	4603      	mov	r3, r0
 800252c:	f083 0301 	eor.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809b 	beq.w	800266e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d918      	bls.n	8002576 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800254a:	3314      	adds	r3, #20
 800254c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8002552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002554:	f7ff fe7a 	bl	800224c <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	f103 0414 	add.w	r4, r3, #20
 800255e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2200      	movs	r2, #0
 800256c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2201      	movs	r2, #1
 8002572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002576:	edd7 6a05 	vldr	s13, [r7, #20]
 800257a:	ed97 7a06 	vldr	s14, [r7, #24]
 800257e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002582:	eeb0 0a66 	vmov.f32	s0, s13
 8002586:	eef0 0a47 	vmov.f32	s1, s14
 800258a:	eeb0 1a67 	vmov.f32	s2, s15
 800258e:	f7ff fbb5 	bl	8001cfc <FusionVectorNormalise>
 8002592:	eef0 6a40 	vmov.f32	s13, s0
 8002596:	eeb0 7a60 	vmov.f32	s14, s1
 800259a:	eef0 7a41 	vmov.f32	s15, s2
 800259e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 80025a2:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80025a6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80025aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80025ac:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80025b0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80025b4:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80025b8:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80025bc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80025c0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025c4:	eef0 1a45 	vmov.f32	s3, s10
 80025c8:	eeb0 2a65 	vmov.f32	s4, s11
 80025cc:	eef0 2a46 	vmov.f32	s5, s12
 80025d0:	eeb0 0a66 	vmov.f32	s0, s13
 80025d4:	eef0 0a47 	vmov.f32	s1, s14
 80025d8:	eeb0 1a67 	vmov.f32	s2, s15
 80025dc:	f7ff fade 	bl	8001b9c <FusionVectorCrossProduct>
 80025e0:	eef0 6a40 	vmov.f32	s13, s0
 80025e4:	eeb0 7a60 	vmov.f32	s14, s1
 80025e8:	eef0 7a41 	vmov.f32	s15, s2
 80025ec:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 80025f0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 80025f4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <FusionAhrsUpdate+0x210>
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002608:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800260c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002610:	eeb0 0a66 	vmov.f32	s0, s13
 8002614:	eef0 0a47 	vmov.f32	s1, s14
 8002618:	eeb0 1a67 	vmov.f32	s2, s15
 800261c:	f7ff fb24 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	edd3 7a02 	vldr	s15, [r3, #8]
 800262a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	d817      	bhi.n	8002664 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002636:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800263a:	323c      	adds	r2, #60	; 0x3c
 800263c:	ca07      	ldmia	r2, {r0, r1, r2}
 800263e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	2b09      	cmp	r3, #9
 8002654:	d901      	bls.n	800265a <FusionAhrsUpdate+0x236>
 8002656:	230a      	movs	r3, #10
 8002658:	e000      	b.n	800265c <FusionAhrsUpdate+0x238>
 800265a:	2300      	movs	r3, #0
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	659a      	str	r2, [r3, #88]	; 0x58
 8002662:	e004      	b.n	800266e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2201      	movs	r2, #1
 8002684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002688:	edd7 6a02 	vldr	s13, [r7, #8]
 800268c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002690:	edd7 7a04 	vldr	s15, [r7, #16]
 8002694:	eeb0 0a66 	vmov.f32	s0, s13
 8002698:	eef0 0a47 	vmov.f32	s1, s14
 800269c:	eeb0 1a67 	vmov.f32	s2, s15
 80026a0:	f7ff f94c 	bl	800193c <FusionVectorIsZero>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80e6 	beq.w	800287e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d92a      	bls.n	800271c <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	ed97 5a02 	vldr	s10, [r7, #8]
 80026ce:	edd7 5a03 	vldr	s11, [r7, #12]
 80026d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80026d6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80026da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80026de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80026e2:	eef0 1a45 	vmov.f32	s3, s10
 80026e6:	eeb0 2a65 	vmov.f32	s4, s11
 80026ea:	eef0 2a46 	vmov.f32	s5, s12
 80026ee:	eeb0 0a66 	vmov.f32	s0, s13
 80026f2:	eef0 0a47 	vmov.f32	s1, s14
 80026f6:	eeb0 1a67 	vmov.f32	s2, s15
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fe6e 	bl	80033dc <FusionCompassCalculateHeading>
 8002700:	eef0 7a40 	vmov.f32	s15, s0
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800270a:	f000 fbd6 	bl	8002eba <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2200      	movs	r2, #0
 8002712:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800271c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800271e:	f000 fa9f 	bl	8002c60 <HalfMagnetic>
 8002722:	eef0 6a40 	vmov.f32	s13, s0
 8002726:	eeb0 7a60 	vmov.f32	s14, s1
 800272a:	eef0 7a41 	vmov.f32	s15, s2
 800272e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8002732:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002736:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800273a:	ed97 5a02 	vldr	s10, [r7, #8]
 800273e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002742:	ed97 6a04 	vldr	s12, [r7, #16]
 8002746:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800274a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800274e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002752:	eef0 1a45 	vmov.f32	s3, s10
 8002756:	eeb0 2a65 	vmov.f32	s4, s11
 800275a:	eef0 2a46 	vmov.f32	s5, s12
 800275e:	eeb0 0a66 	vmov.f32	s0, s13
 8002762:	eef0 0a47 	vmov.f32	s1, s14
 8002766:	eeb0 1a67 	vmov.f32	s2, s15
 800276a:	f7ff fa17 	bl	8001b9c <FusionVectorCrossProduct>
 800276e:	eef0 6a40 	vmov.f32	s13, s0
 8002772:	eeb0 7a60 	vmov.f32	s14, s1
 8002776:	eef0 7a41 	vmov.f32	s15, s2
 800277a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800277e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002782:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002786:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800278a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800278e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002792:	eeb0 0a66 	vmov.f32	s0, s13
 8002796:	eef0 0a47 	vmov.f32	s1, s14
 800279a:	eeb0 1a67 	vmov.f32	s2, s15
 800279e:	f7ff faad 	bl	8001cfc <FusionVectorNormalise>
 80027a2:	eef0 6a40 	vmov.f32	s13, s0
 80027a6:	eeb0 7a60 	vmov.f32	s14, s1
 80027aa:	eef0 7a41 	vmov.f32	s15, s2
 80027ae:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 80027b2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80027b6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80027ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80027bc:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80027c0:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80027c4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80027c8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80027cc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80027d0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80027d4:	eef0 1a45 	vmov.f32	s3, s10
 80027d8:	eeb0 2a65 	vmov.f32	s4, s11
 80027dc:	eef0 2a46 	vmov.f32	s5, s12
 80027e0:	eeb0 0a66 	vmov.f32	s0, s13
 80027e4:	eef0 0a47 	vmov.f32	s1, s14
 80027e8:	eeb0 1a67 	vmov.f32	s2, s15
 80027ec:	f7ff f9d6 	bl	8001b9c <FusionVectorCrossProduct>
 80027f0:	eef0 6a40 	vmov.f32	s13, s0
 80027f4:	eeb0 7a60 	vmov.f32	s14, s1
 80027f8:	eef0 7a41 	vmov.f32	s15, s2
 80027fc:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8002800:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8002804:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <FusionAhrsUpdate+0x420>
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002818:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800281c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002820:	eeb0 0a66 	vmov.f32	s0, s13
 8002824:	eef0 0a47 	vmov.f32	s1, s14
 8002828:	eeb0 1a67 	vmov.f32	s2, s15
 800282c:	f7ff fa1c 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002830:	eeb0 7a40 	vmov.f32	s14, s0
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	edd3 7a03 	vldr	s15, [r3, #12]
 800283a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d817      	bhi.n	8002874 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800284a:	3248      	adds	r2, #72	; 0x48
 800284c:	ca07      	ldmia	r2, {r0, r1, r2}
 800284e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	2b09      	cmp	r3, #9
 8002864:	d901      	bls.n	800286a <FusionAhrsUpdate+0x446>
 8002866:	230a      	movs	r3, #10
 8002868:	e000      	b.n	800286c <FusionAhrsUpdate+0x448>
 800286a:	2300      	movs	r3, #0
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	661a      	str	r2, [r3, #96]	; 0x60
 8002872:	e004      	b.n	800287e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800287e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002882:	f7ff f817 	bl	80018b4 <FusionDegreesToRadians>
 8002886:	eeb0 6a40 	vmov.f32	s12, s0
 800288a:	edd7 6a08 	vldr	s13, [r7, #32]
 800288e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002896:	eef0 1a46 	vmov.f32	s3, s12
 800289a:	eeb0 0a66 	vmov.f32	s0, s13
 800289e:	eef0 0a47 	vmov.f32	s1, s14
 80028a2:	eeb0 1a67 	vmov.f32	s2, s15
 80028a6:	f7ff f8e7 	bl	8001a78 <FusionVectorMultiplyScalar>
 80028aa:	eef0 6a40 	vmov.f32	s13, s0
 80028ae:	eeb0 7a60 	vmov.f32	s14, s1
 80028b2:	eef0 7a41 	vmov.f32	s15, s2
 80028b6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80028ba:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80028be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80028c2:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80028c6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80028ca:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80028ce:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80028d2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80028d6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028da:	eef0 1a45 	vmov.f32	s3, s10
 80028de:	eeb0 2a65 	vmov.f32	s4, s11
 80028e2:	eef0 2a46 	vmov.f32	s5, s12
 80028e6:	eeb0 0a66 	vmov.f32	s0, s13
 80028ea:	eef0 0a47 	vmov.f32	s1, s14
 80028ee:	eeb0 1a67 	vmov.f32	s2, s15
 80028f2:	f7ff f853 	bl	800199c <FusionVectorAdd>
 80028f6:	eef0 6a40 	vmov.f32	s13, s0
 80028fa:	eeb0 7a60 	vmov.f32	s14, s1
 80028fe:	eef0 7a41 	vmov.f32	s15, s2
 8002902:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002906:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800290a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002914:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002918:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800291c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002920:	eef0 1a46 	vmov.f32	s3, s12
 8002924:	eeb0 0a66 	vmov.f32	s0, s13
 8002928:	eef0 0a47 	vmov.f32	s1, s14
 800292c:	eeb0 1a67 	vmov.f32	s2, s15
 8002930:	f7ff f8a2 	bl	8001a78 <FusionVectorMultiplyScalar>
 8002934:	eef0 6a40 	vmov.f32	s13, s0
 8002938:	eeb0 7a60 	vmov.f32	s14, s1
 800293c:	eef0 7a41 	vmov.f32	s15, s2
 8002940:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002944:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002948:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800294c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002950:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002954:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002958:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800295c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002960:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002964:	eef0 1a45 	vmov.f32	s3, s10
 8002968:	eeb0 2a65 	vmov.f32	s4, s11
 800296c:	eef0 2a46 	vmov.f32	s5, s12
 8002970:	eeb0 0a66 	vmov.f32	s0, s13
 8002974:	eef0 0a47 	vmov.f32	s1, s14
 8002978:	eeb0 1a67 	vmov.f32	s2, s15
 800297c:	f7ff f80e 	bl	800199c <FusionVectorAdd>
 8002980:	eef0 6a40 	vmov.f32	s13, s0
 8002984:	eeb0 7a60 	vmov.f32	s14, s1
 8002988:	eef0 7a41 	vmov.f32	s15, s2
 800298c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8002990:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002994:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002998:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800299c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029a4:	edd7 1a01 	vldr	s3, [r7, #4]
 80029a8:	eeb0 0a66 	vmov.f32	s0, s13
 80029ac:	eef0 0a47 	vmov.f32	s1, s14
 80029b0:	eeb0 1a67 	vmov.f32	s2, s15
 80029b4:	f7ff f860 	bl	8001a78 <FusionVectorMultiplyScalar>
 80029b8:	eef0 6a40 	vmov.f32	s13, s0
 80029bc:	eeb0 7a60 	vmov.f32	s14, s1
 80029c0:	eef0 7a41 	vmov.f32	s15, s2
 80029c4:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80029c8:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80029cc:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80029d0:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80029d4:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80029d8:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	ed93 6a05 	vldr	s12, [r3, #20]
 80029e2:	edd3 6a06 	vldr	s13, [r3, #24]
 80029e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80029ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ee:	eeb0 2a64 	vmov.f32	s4, s9
 80029f2:	eef0 2a45 	vmov.f32	s5, s10
 80029f6:	eeb0 3a65 	vmov.f32	s6, s11
 80029fa:	eeb0 0a46 	vmov.f32	s0, s12
 80029fe:	eef0 0a66 	vmov.f32	s1, s13
 8002a02:	eeb0 1a47 	vmov.f32	s2, s14
 8002a06:	eef0 1a67 	vmov.f32	s3, s15
 8002a0a:	f7ff faee 	bl	8001fea <FusionQuaternionMultiplyVector>
 8002a0e:	eeb0 6a40 	vmov.f32	s12, s0
 8002a12:	eef0 6a60 	vmov.f32	s13, s1
 8002a16:	eeb0 7a41 	vmov.f32	s14, s2
 8002a1a:	eef0 7a61 	vmov.f32	s15, s3
 8002a1e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8002a22:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002a26:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002a2a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8002a2e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a30:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002a34:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002a38:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002a3c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a46:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a52:	eeb0 2a44 	vmov.f32	s4, s8
 8002a56:	eef0 2a64 	vmov.f32	s5, s9
 8002a5a:	eeb0 3a45 	vmov.f32	s6, s10
 8002a5e:	eef0 3a65 	vmov.f32	s7, s11
 8002a62:	eeb0 0a46 	vmov.f32	s0, s12
 8002a66:	eef0 0a66 	vmov.f32	s1, s13
 8002a6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002a6e:	eef0 1a67 	vmov.f32	s3, s15
 8002a72:	f7ff f996 	bl	8001da2 <FusionQuaternionAdd>
 8002a76:	eeb0 6a40 	vmov.f32	s12, s0
 8002a7a:	eef0 6a60 	vmov.f32	s13, s1
 8002a7e:	eeb0 7a41 	vmov.f32	s14, s2
 8002a82:	eef0 7a61 	vmov.f32	s15, s3
 8002a86:	ed84 6a05 	vstr	s12, [r4, #20]
 8002a8a:	edc4 6a06 	vstr	s13, [r4, #24]
 8002a8e:	ed84 7a07 	vstr	s14, [r4, #28]
 8002a92:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002a96:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002aa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aa6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002aaa:	eeb0 0a46 	vmov.f32	s0, s12
 8002aae:	eef0 0a66 	vmov.f32	s1, s13
 8002ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ab6:	eef0 1a67 	vmov.f32	s3, s15
 8002aba:	f7ff fb36 	bl	800212a <FusionQuaternionNormalise>
 8002abe:	eeb0 6a40 	vmov.f32	s12, s0
 8002ac2:	eef0 6a60 	vmov.f32	s13, s1
 8002ac6:	eeb0 7a41 	vmov.f32	s14, s2
 8002aca:	eef0 7a61 	vmov.f32	s15, s3
 8002ace:	ed84 6a05 	vstr	s12, [r4, #20]
 8002ad2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002ad6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002ada:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002ade:	bf00      	nop
 8002ae0:	37fc      	adds	r7, #252	; 0xfc
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}

08002ae6 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b093      	sub	sp, #76	; 0x4c
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	dc02      	bgt.n	8002afc <HalfGravity+0x16>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da03      	bge.n	8002b02 <HalfGravity+0x1c>
 8002afa:	e094      	b.n	8002c26 <HalfGravity+0x140>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d048      	beq.n	8002b92 <HalfGravity+0xac>
 8002b00:	e091      	b.n	8002c26 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b7e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002b82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b90:	e052      	b.n	8002c38 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002bb6:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002be2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002c12:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002c16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1a:	f107 0218 	add.w	r2, r7, #24
 8002c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c24:	e008      	b.n	8002c38 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	643b      	str	r3, [r7, #64]	; 0x40
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3e:	ee06 1a90 	vmov	s13, r1
 8002c42:	ee07 2a10 	vmov	s14, r2
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c4e:	eef0 0a47 	vmov.f32	s1, s14
 8002c52:	eeb0 1a67 	vmov.f32	s2, s15
 8002c56:	374c      	adds	r7, #76	; 0x4c
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002c60:	b480      	push	{r7}
 8002c62:	b097      	sub	sp, #92	; 0x5c
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	f000 809a 	beq.w	8002da6 <HalfMagnetic+0x146>
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	f300 80e1 	bgt.w	8002e3a <HalfMagnetic+0x1da>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HalfMagnetic+0x22>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d048      	beq.n	8002d12 <HalfMagnetic+0xb2>
 8002c80:	e0db      	b.n	8002e3a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ca6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	ed93 7a05 	vldr	s14, [r3, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cbe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cd6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cfe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002d02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d10:	e09c      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d66:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002da4:	e052      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	edd3 6a05 	vldr	s13, [r3, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dce:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	edd3 6a07 	vldr	s13, [r3, #28]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dfe:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e2e:	f107 021c 	add.w	r2, r7, #28
 8002e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e38:	e008      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	653b      	str	r3, [r7, #80]	; 0x50
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002e4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	ee06 1a90 	vmov	s13, r1
 8002e56:	ee07 2a10 	vmov	s14, r2
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e62:	eef0 0a47 	vmov.f32	s1, s14
 8002e66:	eeb0 1a67 	vmov.f32	s2, s15
 8002e6a:	375c      	adds	r7, #92	; 0x5c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002e74:	b490      	push	{r4, r7}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f107 0418 	add.w	r4, r7, #24
 8002e82:	3314      	adds	r3, #20
 8002e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e8a:	69b8      	ldr	r0, [r7, #24]
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	ee06 0a10 	vmov	s12, r0
 8002e96:	ee06 1a90 	vmov	s13, r1
 8002e9a:	ee07 2a10 	vmov	s14, r2
 8002e9e:	ee07 3a90 	vmov	s15, r3
}
 8002ea2:	eeb0 0a46 	vmov.f32	s0, s12
 8002ea6:	eef0 0a66 	vmov.f32	s1, s13
 8002eaa:	eeb0 1a47 	vmov.f32	s2, s14
 8002eae:	eef0 1a67 	vmov.f32	s3, s15
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc90      	pop	{r4, r7}
 8002eb8:	4770      	bx	lr

08002eba <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002eba:	b590      	push	{r4, r7, lr}
 8002ebc:	b089      	sub	sp, #36	; 0x24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	eef0 0a67 	vmov.f32	s1, s15
 8002f1a:	eeb0 0a46 	vmov.f32	s0, s12
 8002f1e:	f00f fba3 	bl	8012668 <atan2f>
 8002f22:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002f26:	ed97 0a00 	vldr	s0, [r7]
 8002f2a:	f7fe fcc3 	bl	80018b4 <FusionDegreesToRadians>
 8002f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f42:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002f46:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f4a:	f00f fad7 	bl	80124fc <cosf>
 8002f4e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002f52:	edc7 7a02 	vstr	s15, [r7, #8]
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002f62:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f66:	f00f fb0d 	bl	8012584 <sinf>
 8002f6a:	eef0 7a40 	vmov.f32	s15, s0
 8002f6e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002f72:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002f76:	687c      	ldr	r4, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	ed93 4a05 	vldr	s8, [r3, #20]
 8002f7e:	edd3 4a06 	vldr	s9, [r3, #24]
 8002f82:	ed93 5a07 	vldr	s10, [r3, #28]
 8002f86:	edd3 5a08 	vldr	s11, [r3, #32]
 8002f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002f92:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9a:	eeb0 2a44 	vmov.f32	s4, s8
 8002f9e:	eef0 2a64 	vmov.f32	s5, s9
 8002fa2:	eeb0 3a45 	vmov.f32	s6, s10
 8002fa6:	eef0 3a65 	vmov.f32	s7, s11
 8002faa:	eeb0 0a46 	vmov.f32	s0, s12
 8002fae:	eef0 0a66 	vmov.f32	s1, s13
 8002fb2:	eeb0 1a47 	vmov.f32	s2, s14
 8002fb6:	eef0 1a67 	vmov.f32	s3, s15
 8002fba:	f7fe ff54 	bl	8001e66 <FusionQuaternionMultiply>
 8002fbe:	eeb0 6a40 	vmov.f32	s12, s0
 8002fc2:	eef0 6a60 	vmov.f32	s13, s1
 8002fc6:	eeb0 7a41 	vmov.f32	s14, s2
 8002fca:	eef0 7a61 	vmov.f32	s15, s3
 8002fce:	ed84 6a05 	vstr	s12, [r4, #20]
 8002fd2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002fd6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002fda:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
	...

08002fe8 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800300c <FusionRadiansToDegrees+0x24>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	42652ee0 	.word	0x42652ee0

08003010 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	105a      	asrs	r2, r3, #1
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <FusionFastInverseSqrt+0x54>)
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8003028:	ed97 7a03 	vldr	s14, [r7, #12]
 800302c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003030:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003068 <FusionFastInverseSqrt+0x58>
 8003034:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003038:	edd7 7a03 	vldr	s15, [r7, #12]
 800303c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003048:	eddf 6a08 	vldr	s13, [pc, #32]	; 800306c <FusionFastInverseSqrt+0x5c>
 800304c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003054:	eeb0 0a67 	vmov.f32	s0, s15
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	5f1f1412 	.word	0x5f1f1412
 8003068:	3f36d312 	.word	0x3f36d312
 800306c:	3fd851ff 	.word	0x3fd851ff

08003070 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	eef0 6a40 	vmov.f32	s13, s0
 800307a:	eeb0 7a60 	vmov.f32	s14, s1
 800307e:	eef0 7a41 	vmov.f32	s15, s2
 8003082:	edc7 6a01 	vstr	s13, [r7, #4]
 8003086:	ed87 7a02 	vstr	s14, [r7, #8]
 800308a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800308e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003092:	edd7 7a02 	vldr	s15, [r7, #8]
 8003096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800309a:	edd7 7a03 	vldr	s15, [r7, #12]
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80030b0:	b480      	push	{r7}
 80030b2:	b08f      	sub	sp, #60	; 0x3c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	eef0 6a40 	vmov.f32	s13, s0
 80030ba:	eeb0 7a60 	vmov.f32	s14, s1
 80030be:	eef0 7a41 	vmov.f32	s15, s2
 80030c2:	edc7 1a04 	vstr	s3, [r7, #16]
 80030c6:	edc7 6a05 	vstr	s13, [r7, #20]
 80030ca:	ed87 7a06 	vstr	s14, [r7, #24]
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80030d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80030d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030de:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80030e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80030e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80030f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80030f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8003102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003106:	f107 0220 	add.w	r2, r7, #32
 800310a:	ca07      	ldmia	r2, {r0, r1, r2}
 800310c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	ee06 1a90 	vmov	s13, r1
 800311a:	ee07 2a10 	vmov	s14, r2
 800311e:	ee07 3a90 	vmov	s15, r3
}
 8003122:	eeb0 0a66 	vmov.f32	s0, s13
 8003126:	eef0 0a47 	vmov.f32	s1, s14
 800312a:	eeb0 1a67 	vmov.f32	s2, s15
 800312e:	373c      	adds	r7, #60	; 0x3c
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003138:	b480      	push	{r7}
 800313a:	b091      	sub	sp, #68	; 0x44
 800313c:	af00      	add	r7, sp, #0
 800313e:	eeb0 5a40 	vmov.f32	s10, s0
 8003142:	eef0 5a60 	vmov.f32	s11, s1
 8003146:	eeb0 6a41 	vmov.f32	s12, s2
 800314a:	eef0 6a61 	vmov.f32	s13, s3
 800314e:	eeb0 7a42 	vmov.f32	s14, s4
 8003152:	eef0 7a62 	vmov.f32	s15, s5
 8003156:	ed87 5a07 	vstr	s10, [r7, #28]
 800315a:	edc7 5a08 	vstr	s11, [r7, #32]
 800315e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003162:	edc7 6a04 	vstr	s13, [r7, #16]
 8003166:	ed87 7a05 	vstr	s14, [r7, #20]
 800316a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800316e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003172:	edd7 7a04 	vldr	s15, [r7, #16]
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800317a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800317e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003182:	edd7 7a05 	vldr	s15, [r7, #20]
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800318a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800318e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003192:	edd7 7a06 	vldr	s15, [r7, #24]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800319a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800319e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	ee06 1a90 	vmov	s13, r1
 80031b6:	ee07 2a10 	vmov	s14, r2
 80031ba:	ee07 3a90 	vmov	s15, r3
}
 80031be:	eeb0 0a66 	vmov.f32	s0, s13
 80031c2:	eef0 0a47 	vmov.f32	s1, s14
 80031c6:	eeb0 1a67 	vmov.f32	s2, s15
 80031ca:	3744      	adds	r7, #68	; 0x44
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80031d4:	b480      	push	{r7}
 80031d6:	b091      	sub	sp, #68	; 0x44
 80031d8:	af00      	add	r7, sp, #0
 80031da:	eeb0 5a40 	vmov.f32	s10, s0
 80031de:	eef0 5a60 	vmov.f32	s11, s1
 80031e2:	eeb0 6a41 	vmov.f32	s12, s2
 80031e6:	eef0 6a61 	vmov.f32	s13, s3
 80031ea:	eeb0 7a42 	vmov.f32	s14, s4
 80031ee:	eef0 7a62 	vmov.f32	s15, s5
 80031f2:	ed87 5a07 	vstr	s10, [r7, #28]
 80031f6:	edc7 5a08 	vstr	s11, [r7, #32]
 80031fa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80031fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8003202:	ed87 7a05 	vstr	s14, [r7, #20]
 8003206:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800320a:	ed97 7a08 	vldr	s14, [r7, #32]
 800320e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003216:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800321a:	edd7 7a05 	vldr	s15, [r7, #20]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003226:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800322a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800322e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003236:	edd7 6a07 	vldr	s13, [r7, #28]
 800323a:	edd7 7a06 	vldr	s15, [r7, #24]
 800323e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003242:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003246:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800324a:	ed97 7a07 	vldr	s14, [r7, #28]
 800324e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003256:	edd7 6a08 	vldr	s13, [r7, #32]
 800325a:	edd7 7a04 	vldr	s15, [r7, #16]
 800325e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003266:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800326a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800326e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003272:	ca07      	ldmia	r2, {r0, r1, r2}
 8003274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800327a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	ee06 1a90 	vmov	s13, r1
 8003282:	ee07 2a10 	vmov	s14, r2
 8003286:	ee07 3a90 	vmov	s15, r3
}
 800328a:	eeb0 0a66 	vmov.f32	s0, s13
 800328e:	eef0 0a47 	vmov.f32	s1, s14
 8003292:	eeb0 1a67 	vmov.f32	s2, s15
 8003296:	3744      	adds	r7, #68	; 0x44
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	eef0 6a40 	vmov.f32	s13, s0
 80032aa:	eeb0 7a60 	vmov.f32	s14, s1
 80032ae:	eef0 7a41 	vmov.f32	s15, s2
 80032b2:	edc7 6a01 	vstr	s13, [r7, #4]
 80032b6:	ed87 7a02 	vstr	s14, [r7, #8]
 80032ba:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80032be:	ed97 5a01 	vldr	s10, [r7, #4]
 80032c2:	edd7 5a02 	vldr	s11, [r7, #8]
 80032c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80032ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80032d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d6:	eef0 1a45 	vmov.f32	s3, s10
 80032da:	eeb0 2a65 	vmov.f32	s4, s11
 80032de:	eef0 2a46 	vmov.f32	s5, s12
 80032e2:	eeb0 0a66 	vmov.f32	s0, s13
 80032e6:	eef0 0a47 	vmov.f32	s1, s14
 80032ea:	eeb0 1a67 	vmov.f32	s2, s15
 80032ee:	f7ff ff23 	bl	8003138 <FusionVectorHadamardProduct>
 80032f2:	eef0 6a40 	vmov.f32	s13, s0
 80032f6:	eeb0 7a60 	vmov.f32	s14, s1
 80032fa:	eef0 7a41 	vmov.f32	s15, s2
 80032fe:	edc7 6a05 	vstr	s13, [r7, #20]
 8003302:	ed87 7a06 	vstr	s14, [r7, #24]
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
 800330a:	edd7 6a05 	vldr	s13, [r7, #20]
 800330e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003312:	edd7 7a07 	vldr	s15, [r7, #28]
 8003316:	eeb0 0a66 	vmov.f32	s0, s13
 800331a:	eef0 0a47 	vmov.f32	s1, s14
 800331e:	eeb0 1a67 	vmov.f32	s2, s15
 8003322:	f7ff fea5 	bl	8003070 <FusionVectorSum>
 8003326:	eef0 7a40 	vmov.f32	s15, s0
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	eef0 6a40 	vmov.f32	s13, s0
 800333e:	eeb0 7a60 	vmov.f32	s14, s1
 8003342:	eef0 7a41 	vmov.f32	s15, s2
 8003346:	edc7 6a05 	vstr	s13, [r7, #20]
 800334a:	ed87 7a06 	vstr	s14, [r7, #24]
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8003352:	edd7 6a05 	vldr	s13, [r7, #20]
 8003356:	ed97 7a06 	vldr	s14, [r7, #24]
 800335a:	edd7 7a07 	vldr	s15, [r7, #28]
 800335e:	eeb0 0a66 	vmov.f32	s0, s13
 8003362:	eef0 0a47 	vmov.f32	s1, s14
 8003366:	eeb0 1a67 	vmov.f32	s2, s15
 800336a:	f7ff ff99 	bl	80032a0 <FusionVectorMagnitudeSquared>
 800336e:	eef0 7a40 	vmov.f32	s15, s0
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	f7ff fe4b 	bl	8003010 <FusionFastInverseSqrt>
 800337a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800337e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003382:	ed97 7a06 	vldr	s14, [r7, #24]
 8003386:	edd7 7a07 	vldr	s15, [r7, #28]
 800338a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800338e:	eeb0 0a66 	vmov.f32	s0, s13
 8003392:	eef0 0a47 	vmov.f32	s1, s14
 8003396:	eeb0 1a67 	vmov.f32	s2, s15
 800339a:	f7ff fe89 	bl	80030b0 <FusionVectorMultiplyScalar>
 800339e:	eef0 6a40 	vmov.f32	s13, s0
 80033a2:	eeb0 7a60 	vmov.f32	s14, s1
 80033a6:	eef0 7a41 	vmov.f32	s15, s2
 80033aa:	edc7 6a08 	vstr	s13, [r7, #32]
 80033ae:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80033b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	ee06 1a90 	vmov	s13, r1
 80033c0:	ee07 2a10 	vmov	s14, r2
 80033c4:	ee07 3a90 	vmov	s15, r3
}
 80033c8:	eeb0 0a66 	vmov.f32	s0, s13
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 1a67 	vmov.f32	s2, s15
 80033d4:	3730      	adds	r7, #48	; 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0b2      	sub	sp, #200	; 0xc8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	eeb0 5a40 	vmov.f32	s10, s0
 80033e8:	eef0 5a60 	vmov.f32	s11, s1
 80033ec:	eeb0 6a41 	vmov.f32	s12, s2
 80033f0:	eef0 6a61 	vmov.f32	s13, s3
 80033f4:	eeb0 7a42 	vmov.f32	s14, s4
 80033f8:	eef0 7a62 	vmov.f32	s15, s5
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	ed87 5a04 	vstr	s10, [r7, #16]
 8003402:	edc7 5a05 	vstr	s11, [r7, #20]
 8003406:	ed87 6a06 	vstr	s12, [r7, #24]
 800340a:	edc7 6a01 	vstr	s13, [r7, #4]
 800340e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003412:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 8003416:	7ffb      	ldrb	r3, [r7, #31]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f000 814b 	beq.w	80036b4 <FusionCompassCalculateHeading+0x2d8>
 800341e:	2b02      	cmp	r3, #2
 8003420:	f300 81f7 	bgt.w	8003812 <FusionCompassCalculateHeading+0x436>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <FusionCompassCalculateHeading+0x54>
 8003428:	2b01      	cmp	r3, #1
 800342a:	f000 8094 	beq.w	8003556 <FusionCompassCalculateHeading+0x17a>
 800342e:	e1f0      	b.n	8003812 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003430:	ed97 5a01 	vldr	s10, [r7, #4]
 8003434:	edd7 5a02 	vldr	s11, [r7, #8]
 8003438:	ed97 6a03 	vldr	s12, [r7, #12]
 800343c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003440:	ed97 7a05 	vldr	s14, [r7, #20]
 8003444:	edd7 7a06 	vldr	s15, [r7, #24]
 8003448:	eef0 1a45 	vmov.f32	s3, s10
 800344c:	eeb0 2a65 	vmov.f32	s4, s11
 8003450:	eef0 2a46 	vmov.f32	s5, s12
 8003454:	eeb0 0a66 	vmov.f32	s0, s13
 8003458:	eef0 0a47 	vmov.f32	s1, s14
 800345c:	eeb0 1a67 	vmov.f32	s2, s15
 8003460:	f7ff feb8 	bl	80031d4 <FusionVectorCrossProduct>
 8003464:	eef0 6a40 	vmov.f32	s13, s0
 8003468:	eeb0 7a60 	vmov.f32	s14, s1
 800346c:	eef0 7a41 	vmov.f32	s15, s2
 8003470:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003474:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8003478:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800347c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003480:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003484:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003488:	eeb0 0a66 	vmov.f32	s0, s13
 800348c:	eef0 0a47 	vmov.f32	s1, s14
 8003490:	eeb0 1a67 	vmov.f32	s2, s15
 8003494:	f7ff ff4e 	bl	8003334 <FusionVectorNormalise>
 8003498:	eef0 6a40 	vmov.f32	s13, s0
 800349c:	eeb0 7a60 	vmov.f32	s14, s1
 80034a0:	eef0 7a41 	vmov.f32	s15, s2
 80034a4:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 80034a8:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 80034ac:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80034b0:	ed97 5a04 	vldr	s10, [r7, #16]
 80034b4:	edd7 5a05 	vldr	s11, [r7, #20]
 80034b8:	ed97 6a06 	vldr	s12, [r7, #24]
 80034bc:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80034c0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80034c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80034c8:	eef0 1a45 	vmov.f32	s3, s10
 80034cc:	eeb0 2a65 	vmov.f32	s4, s11
 80034d0:	eef0 2a46 	vmov.f32	s5, s12
 80034d4:	eeb0 0a66 	vmov.f32	s0, s13
 80034d8:	eef0 0a47 	vmov.f32	s1, s14
 80034dc:	eeb0 1a67 	vmov.f32	s2, s15
 80034e0:	f7ff fe78 	bl	80031d4 <FusionVectorCrossProduct>
 80034e4:	eef0 6a40 	vmov.f32	s13, s0
 80034e8:	eeb0 7a60 	vmov.f32	s14, s1
 80034ec:	eef0 7a41 	vmov.f32	s15, s2
 80034f0:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80034f4:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80034f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80034fc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003500:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003504:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003508:	eeb0 0a66 	vmov.f32	s0, s13
 800350c:	eef0 0a47 	vmov.f32	s1, s14
 8003510:	eeb0 1a67 	vmov.f32	s2, s15
 8003514:	f7ff ff0e 	bl	8003334 <FusionVectorNormalise>
 8003518:	eef0 6a40 	vmov.f32	s13, s0
 800351c:	eeb0 7a60 	vmov.f32	s14, s1
 8003520:	eef0 7a41 	vmov.f32	s15, s2
 8003524:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8003528:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 800352c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8003530:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003534:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003538:	eef0 0a47 	vmov.f32	s1, s14
 800353c:	eeb0 0a67 	vmov.f32	s0, s15
 8003540:	f00f f892 	bl	8012668 <atan2f>
 8003544:	eef0 7a40 	vmov.f32	s15, s0
 8003548:	eeb0 0a67 	vmov.f32	s0, s15
 800354c:	f7ff fd4c 	bl	8002fe8 <FusionRadiansToDegrees>
 8003550:	eef0 7a40 	vmov.f32	s15, s0
 8003554:	e15f      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003556:	ed97 5a01 	vldr	s10, [r7, #4]
 800355a:	edd7 5a02 	vldr	s11, [r7, #8]
 800355e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003562:	edd7 6a04 	vldr	s13, [r7, #16]
 8003566:	ed97 7a05 	vldr	s14, [r7, #20]
 800356a:	edd7 7a06 	vldr	s15, [r7, #24]
 800356e:	eef0 1a45 	vmov.f32	s3, s10
 8003572:	eeb0 2a65 	vmov.f32	s4, s11
 8003576:	eef0 2a46 	vmov.f32	s5, s12
 800357a:	eeb0 0a66 	vmov.f32	s0, s13
 800357e:	eef0 0a47 	vmov.f32	s1, s14
 8003582:	eeb0 1a67 	vmov.f32	s2, s15
 8003586:	f7ff fe25 	bl	80031d4 <FusionVectorCrossProduct>
 800358a:	eef0 6a40 	vmov.f32	s13, s0
 800358e:	eeb0 7a60 	vmov.f32	s14, s1
 8003592:	eef0 7a41 	vmov.f32	s15, s2
 8003596:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800359a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800359e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80035a2:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80035a6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80035aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80035ae:	eeb0 0a66 	vmov.f32	s0, s13
 80035b2:	eef0 0a47 	vmov.f32	s1, s14
 80035b6:	eeb0 1a67 	vmov.f32	s2, s15
 80035ba:	f7ff febb 	bl	8003334 <FusionVectorNormalise>
 80035be:	eef0 6a40 	vmov.f32	s13, s0
 80035c2:	eeb0 7a60 	vmov.f32	s14, s1
 80035c6:	eef0 7a41 	vmov.f32	s15, s2
 80035ca:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 80035ce:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80035d2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80035d6:	ed97 5a04 	vldr	s10, [r7, #16]
 80035da:	edd7 5a05 	vldr	s11, [r7, #20]
 80035de:	ed97 6a06 	vldr	s12, [r7, #24]
 80035e2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80035e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80035ea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80035ee:	eef0 1a45 	vmov.f32	s3, s10
 80035f2:	eeb0 2a65 	vmov.f32	s4, s11
 80035f6:	eef0 2a46 	vmov.f32	s5, s12
 80035fa:	eeb0 0a66 	vmov.f32	s0, s13
 80035fe:	eef0 0a47 	vmov.f32	s1, s14
 8003602:	eeb0 1a67 	vmov.f32	s2, s15
 8003606:	f7ff fde5 	bl	80031d4 <FusionVectorCrossProduct>
 800360a:	eef0 6a40 	vmov.f32	s13, s0
 800360e:	eeb0 7a60 	vmov.f32	s14, s1
 8003612:	eef0 7a41 	vmov.f32	s15, s2
 8003616:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 800361a:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 800361e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 8003622:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8003626:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800362a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800362e:	eeb0 0a66 	vmov.f32	s0, s13
 8003632:	eef0 0a47 	vmov.f32	s1, s14
 8003636:	eeb0 1a67 	vmov.f32	s2, s15
 800363a:	f7ff fe7b 	bl	8003334 <FusionVectorNormalise>
 800363e:	eef0 6a40 	vmov.f32	s13, s0
 8003642:	eeb0 7a60 	vmov.f32	s14, s1
 8003646:	eef0 7a41 	vmov.f32	s15, s2
 800364a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800364e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8003652:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 8003656:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800365a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800365e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003662:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003666:	eeb0 0a66 	vmov.f32	s0, s13
 800366a:	eef0 0a47 	vmov.f32	s1, s14
 800366e:	eeb0 1a67 	vmov.f32	s2, s15
 8003672:	f7ff fd1d 	bl	80030b0 <FusionVectorMultiplyScalar>
 8003676:	eef0 6a40 	vmov.f32	s13, s0
 800367a:	eeb0 7a60 	vmov.f32	s14, s1
 800367e:	eef0 7a41 	vmov.f32	s15, s2
 8003682:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8003686:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800368a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800368e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003692:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003696:	eef0 0a47 	vmov.f32	s1, s14
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	f00e ffe3 	bl	8012668 <atan2f>
 80036a2:	eef0 7a40 	vmov.f32	s15, s0
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	f7ff fc9d 	bl	8002fe8 <FusionRadiansToDegrees>
 80036ae:	eef0 7a40 	vmov.f32	s15, s0
 80036b2:	e0b0      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 80036b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80036b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80036bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80036c0:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80036c4:	eeb0 0a66 	vmov.f32	s0, s13
 80036c8:	eef0 0a47 	vmov.f32	s1, s14
 80036cc:	eeb0 1a67 	vmov.f32	s2, s15
 80036d0:	f7ff fcee 	bl	80030b0 <FusionVectorMultiplyScalar>
 80036d4:	eef0 6a40 	vmov.f32	s13, s0
 80036d8:	eeb0 7a60 	vmov.f32	s14, s1
 80036dc:	eef0 7a41 	vmov.f32	s15, s2
 80036e0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80036e4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80036e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 80036ec:	ed97 5a01 	vldr	s10, [r7, #4]
 80036f0:	edd7 5a02 	vldr	s11, [r7, #8]
 80036f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80036fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003700:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003704:	eef0 1a45 	vmov.f32	s3, s10
 8003708:	eeb0 2a65 	vmov.f32	s4, s11
 800370c:	eef0 2a46 	vmov.f32	s5, s12
 8003710:	eeb0 0a66 	vmov.f32	s0, s13
 8003714:	eef0 0a47 	vmov.f32	s1, s14
 8003718:	eeb0 1a67 	vmov.f32	s2, s15
 800371c:	f7ff fd5a 	bl	80031d4 <FusionVectorCrossProduct>
 8003720:	eef0 6a40 	vmov.f32	s13, s0
 8003724:	eeb0 7a60 	vmov.f32	s14, s1
 8003728:	eef0 7a41 	vmov.f32	s15, s2
 800372c:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 8003730:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 8003734:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8003738:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800373c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003740:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003744:	eeb0 0a66 	vmov.f32	s0, s13
 8003748:	eef0 0a47 	vmov.f32	s1, s14
 800374c:	eeb0 1a67 	vmov.f32	s2, s15
 8003750:	f7ff fdf0 	bl	8003334 <FusionVectorNormalise>
 8003754:	eef0 6a40 	vmov.f32	s13, s0
 8003758:	eeb0 7a60 	vmov.f32	s14, s1
 800375c:	eef0 7a41 	vmov.f32	s15, s2
 8003760:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003764:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003768:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 800376c:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003770:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003774:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8003778:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800377c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003780:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003784:	eef0 1a45 	vmov.f32	s3, s10
 8003788:	eeb0 2a65 	vmov.f32	s4, s11
 800378c:	eef0 2a46 	vmov.f32	s5, s12
 8003790:	eeb0 0a66 	vmov.f32	s0, s13
 8003794:	eef0 0a47 	vmov.f32	s1, s14
 8003798:	eeb0 1a67 	vmov.f32	s2, s15
 800379c:	f7ff fd1a 	bl	80031d4 <FusionVectorCrossProduct>
 80037a0:	eef0 6a40 	vmov.f32	s13, s0
 80037a4:	eeb0 7a60 	vmov.f32	s14, s1
 80037a8:	eef0 7a41 	vmov.f32	s15, s2
 80037ac:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 80037b0:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 80037b4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 80037b8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80037bc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80037c0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80037c4:	eeb0 0a66 	vmov.f32	s0, s13
 80037c8:	eef0 0a47 	vmov.f32	s1, s14
 80037cc:	eeb0 1a67 	vmov.f32	s2, s15
 80037d0:	f7ff fdb0 	bl	8003334 <FusionVectorNormalise>
 80037d4:	eef0 6a40 	vmov.f32	s13, s0
 80037d8:	eeb0 7a60 	vmov.f32	s14, s1
 80037dc:	eef0 7a41 	vmov.f32	s15, s2
 80037e0:	edc7 6a08 	vstr	s13, [r7, #32]
 80037e4:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80037e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80037ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80037f4:	eef0 0a47 	vmov.f32	s1, s14
 80037f8:	eeb0 0a67 	vmov.f32	s0, s15
 80037fc:	f00e ff34 	bl	8012668 <atan2f>
 8003800:	eef0 7a40 	vmov.f32	s15, s0
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	f7ff fbee 	bl	8002fe8 <FusionRadiansToDegrees>
 800380c:	eef0 7a40 	vmov.f32	s15, s0
 8003810:	e001      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 8003812:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003820 <FusionCompassCalculateHeading+0x444>
}
 8003816:	eeb0 0a67 	vmov.f32	s0, s15
 800381a:	37c8      	adds	r7, #200	; 0xc8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00000000 	.word	0x00000000

08003824 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8003824:	b480      	push	{r7}
 8003826:	b091      	sub	sp, #68	; 0x44
 8003828:	af00      	add	r7, sp, #0
 800382a:	eeb0 5a40 	vmov.f32	s10, s0
 800382e:	eef0 5a60 	vmov.f32	s11, s1
 8003832:	eeb0 6a41 	vmov.f32	s12, s2
 8003836:	eef0 6a61 	vmov.f32	s13, s3
 800383a:	eeb0 7a42 	vmov.f32	s14, s4
 800383e:	eef0 7a62 	vmov.f32	s15, s5
 8003842:	ed87 5a07 	vstr	s10, [r7, #28]
 8003846:	edc7 5a08 	vstr	s11, [r7, #32]
 800384a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800384e:	edc7 6a04 	vstr	s13, [r7, #16]
 8003852:	ed87 7a05 	vstr	s14, [r7, #20]
 8003856:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 800385a:	ed97 7a07 	vldr	s14, [r7, #28]
 800385e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003866:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800386a:	ed97 7a08 	vldr	s14, [r7, #32]
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003876:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800387a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800387e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003882:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003886:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800388a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800388e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003892:	ca07      	ldmia	r2, {r0, r1, r2}
 8003894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800389a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	ee06 1a90 	vmov	s13, r1
 80038a2:	ee07 2a10 	vmov	s14, r2
 80038a6:	ee07 3a90 	vmov	s15, r3
}
 80038aa:	eeb0 0a66 	vmov.f32	s0, s13
 80038ae:	eef0 0a47 	vmov.f32	s1, s14
 80038b2:	eeb0 1a67 	vmov.f32	s2, s15
 80038b6:	3744      	adds	r7, #68	; 0x44
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80038c0:	b480      	push	{r7}
 80038c2:	b091      	sub	sp, #68	; 0x44
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	eeb0 5a40 	vmov.f32	s10, s0
 80038ca:	eef0 5a60 	vmov.f32	s11, s1
 80038ce:	eeb0 6a41 	vmov.f32	s12, s2
 80038d2:	eef0 6a61 	vmov.f32	s13, s3
 80038d6:	eeb0 7a42 	vmov.f32	s14, s4
 80038da:	eef0 7a62 	vmov.f32	s15, s5
 80038de:	ed87 5a07 	vstr	s10, [r7, #28]
 80038e2:	edc7 5a08 	vstr	s11, [r7, #32]
 80038e6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80038ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80038ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80038f2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 80038f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80038fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80038fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003902:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8003906:	ed97 7a08 	vldr	s14, [r7, #32]
 800390a:	edd7 7a05 	vldr	s15, [r7, #20]
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003912:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8003916:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800391a:	edd7 7a06 	vldr	s15, [r7, #24]
 800391e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003922:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800392a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800392e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	ee06 1a90 	vmov	s13, r1
 800393e:	ee07 2a10 	vmov	s14, r2
 8003942:	ee07 3a90 	vmov	s15, r3
}
 8003946:	eeb0 0a66 	vmov.f32	s0, s13
 800394a:	eef0 0a47 	vmov.f32	s1, s14
 800394e:	eeb0 1a67 	vmov.f32	s2, s15
 8003952:	3744      	adds	r7, #68	; 0x44
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800395c:	b480      	push	{r7}
 800395e:	b08f      	sub	sp, #60	; 0x3c
 8003960:	af00      	add	r7, sp, #0
 8003962:	eef0 6a40 	vmov.f32	s13, s0
 8003966:	eeb0 7a60 	vmov.f32	s14, s1
 800396a:	eef0 7a41 	vmov.f32	s15, s2
 800396e:	edc7 1a04 	vstr	s3, [r7, #16]
 8003972:	edc7 6a05 	vstr	s13, [r7, #20]
 8003976:	ed87 7a06 	vstr	s14, [r7, #24]
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800397e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003982:	edd7 7a04 	vldr	s15, [r7, #16]
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800398a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800398e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003992:	edd7 7a04 	vldr	s15, [r7, #16]
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800399a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800399e:	ed97 7a07 	vldr	s14, [r7, #28]
 80039a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80039aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80039ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b2:	f107 0220 	add.w	r2, r7, #32
 80039b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	ee06 1a90 	vmov	s13, r1
 80039c6:	ee07 2a10 	vmov	s14, r2
 80039ca:	ee07 3a90 	vmov	s15, r3
}
 80039ce:	eeb0 0a66 	vmov.f32	s0, s13
 80039d2:	eef0 0a47 	vmov.f32	s1, s14
 80039d6:	eeb0 1a67 	vmov.f32	s2, s15
 80039da:	373c      	adds	r7, #60	; 0x3c
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a44 <FusionOffsetInitialise+0x60>
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	3e00adfd 	.word	0x3e00adfd

08003a48 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08f      	sub	sp, #60	; 0x3c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	61f8      	str	r0, [r7, #28]
 8003a50:	eef0 6a40 	vmov.f32	s13, s0
 8003a54:	eeb0 7a60 	vmov.f32	s14, s1
 8003a58:	eef0 7a41 	vmov.f32	s15, s2
 8003a5c:	edc7 6a04 	vstr	s13, [r7, #16]
 8003a60:	ed87 7a05 	vstr	s14, [r7, #20]
 8003a64:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	ed93 5a03 	vldr	s10, [r3, #12]
 8003a6e:	edd3 5a04 	vldr	s11, [r3, #16]
 8003a72:	ed93 6a05 	vldr	s12, [r3, #20]
 8003a76:	edd7 6a04 	vldr	s13, [r7, #16]
 8003a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a82:	eef0 1a45 	vmov.f32	s3, s10
 8003a86:	eeb0 2a65 	vmov.f32	s4, s11
 8003a8a:	eef0 2a46 	vmov.f32	s5, s12
 8003a8e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a92:	eef0 0a47 	vmov.f32	s1, s14
 8003a96:	eeb0 1a67 	vmov.f32	s2, s15
 8003a9a:	f7ff ff11 	bl	80038c0 <FusionVectorSubtract>
 8003a9e:	eef0 6a40 	vmov.f32	s13, s0
 8003aa2:	eeb0 7a60 	vmov.f32	s14, s1
 8003aa6:	eef0 7a41 	vmov.f32	s15, s2
 8003aaa:	edc7 6a04 	vstr	s13, [r7, #16]
 8003aae:	ed87 7a05 	vstr	s14, [r7, #20]
 8003ab2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	eef0 7ae7 	vabs.f32	s15, s15
 8003abe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dc15      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ad4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	dc0a      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ae6:	eef0 7ae7 	vabs.f32	s15, s15
 8003aea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	dd0a      	ble.n	8003b0e <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003afe:	f107 0320 	add.w	r3, r7, #32
 8003b02:	f107 0210 	add.w	r2, r7, #16
 8003b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b0c:	e060      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <FusionOffsetUpdate+0xec>
        offset->timer++;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003b24:	f107 0320 	add.w	r3, r7, #32
 8003b28:	f107 0210 	add.w	r2, r7, #16
 8003b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b32:	e04d      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	ed93 6a00 	vldr	s12, [r3]
 8003b3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b46:	eef0 1a46 	vmov.f32	s3, s12
 8003b4a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b4e:	eef0 0a47 	vmov.f32	s1, s14
 8003b52:	eeb0 1a67 	vmov.f32	s2, s15
 8003b56:	f7ff ff01 	bl	800395c <FusionVectorMultiplyScalar>
 8003b5a:	eef0 6a40 	vmov.f32	s13, s0
 8003b5e:	eeb0 7a60 	vmov.f32	s14, s1
 8003b62:	eef0 7a41 	vmov.f32	s15, s2
 8003b66:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003b6a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003b6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003b72:	69fc      	ldr	r4, [r7, #28]
 8003b74:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8003b78:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8003b7c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b8e:	eef0 1a45 	vmov.f32	s3, s10
 8003b92:	eeb0 2a65 	vmov.f32	s4, s11
 8003b96:	eef0 2a46 	vmov.f32	s5, s12
 8003b9a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b9e:	eef0 0a47 	vmov.f32	s1, s14
 8003ba2:	eeb0 1a67 	vmov.f32	s2, s15
 8003ba6:	f7ff fe3d 	bl	8003824 <FusionVectorAdd>
 8003baa:	eef0 6a40 	vmov.f32	s13, s0
 8003bae:	eeb0 7a60 	vmov.f32	s14, s1
 8003bb2:	eef0 7a41 	vmov.f32	s15, s2
 8003bb6:	edc4 6a03 	vstr	s13, [r4, #12]
 8003bba:	ed84 7a04 	vstr	s14, [r4, #16]
 8003bbe:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	f107 0210 	add.w	r2, r7, #16
 8003bca:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	ee06 1a90 	vmov	s13, r1
 8003bda:	ee07 2a10 	vmov	s14, r2
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eeb0 0a66 	vmov.f32	s0, s13
 8003be6:	eef0 0a47 	vmov.f32	s1, s14
 8003bea:	eeb0 1a67 	vmov.f32	s2, s15
 8003bee:	373c      	adds	r7, #60	; 0x3c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <ublox_i2c_bus_init+0x78>)
 8003bfc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B03FDB;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <ublox_i2c_bus_init+0x7c>)
 8003c02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c2e:	480e      	ldr	r0, [pc, #56]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c30:	f003 fa79 	bl	8007126 <HAL_I2C_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e012      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4809      	ldr	r0, [pc, #36]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c42:	f004 f8e1 	bl	8007e08 <HAL_I2CEx_ConfigAnalogFilter>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e009      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	4805      	ldr	r0, [pc, #20]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c54:	f004 f923 	bl	8007e9e <HAL_I2CEx_ConfigDigitalFilter>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e000      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000290 	.word	0x20000290
 8003c6c:	40005400 	.word	0x40005400
 8003c70:	00b03fdb 	.word	0x00b03fdb

08003c74 <ublox_tick>:


void ublox_tick(void){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	71fb      	strb	r3, [r7, #7]
    res = ubloxRead();
 8003c7e:	f000 f8db 	bl	8003e38 <ubloxRead>
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
    if ((res == 8) || (res==10)){
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d005      	beq.n	8003c98 <ublox_tick+0x24>
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d002      	beq.n	8003c98 <ublox_tick+0x24>
        uart_write_debug("Failed to read\r\n",UART_NYX);
#endif
        return;
    }
    else{
        parseNMEA();
 8003c92:	f000 f92f 	bl	8003ef4 <parseNMEA>
 8003c96:	e000      	b.n	8003c9a <ublox_tick+0x26>
        return;
 8003c98:	bf00      	nop
    }
}
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <ublox_transmit_rtc>:

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	460a      	mov	r2, r1
 8003caa:	71fb      	strb	r3, [r7, #7]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 8003cb0:	79fa      	ldrb	r2, [r7, #7]
 8003cb2:	79bb      	ldrb	r3, [r7, #6]
 8003cb4:	2109      	movs	r1, #9
 8003cb6:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <ublox_transmit_rtc+0x24>)
 8003cb8:	f001 fc6c 	bl	8005594 <transmitMessage>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2000032f 	.word	0x2000032f

08003cc8 <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	71fb      	strb	r3, [r7, #7]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 8003ce6:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	0e1b      	lsrs	r3, r3, #24
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	141b      	asrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	121b      	asrs	r3, r3, #8
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 8003d04:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	141b      	asrs	r3, r3, #16
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	121b      	asrs	r3, r3, #8
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d36:	0e1b      	lsrs	r3, r3, #24
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d40:	141b      	asrs	r3, r3, #16
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4a:	121b      	asrs	r3, r3, #8
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 8003d58:	79fa      	ldrb	r2, [r7, #7]
 8003d5a:	79bb      	ldrb	r3, [r7, #6]
 8003d5c:	f107 000c 	add.w	r0, r7, #12
 8003d60:	210c      	movs	r1, #12
 8003d62:	f001 fc17 	bl	8005594 <transmitMessage>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200002e4 	.word	0x200002e4

08003d74 <ubloxInit>:

HAL_StatusTypeDef ubloxInit(void){
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret=0x00;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	71fb      	strb	r3, [r7, #7]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 8003d7e:	2102      	movs	r1, #2
 8003d80:	2000      	movs	r0, #0
 8003d82:	f000 fa95 	bl	80042b0 <setPortOutput>
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <ubloxInit+0x20>
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	e04d      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 8003d94:	2300      	movs	r3, #0
 8003d96:	2200      	movs	r2, #0
 8003d98:	2101      	movs	r1, #1
 8003d9a:	20f0      	movs	r0, #240	; 0xf0
 8003d9c:	f000 fab8 	bl	8004310 <configureNMEA>
 8003da0:	4603      	mov	r3, r0
 8003da2:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <ubloxInit+0x3a>
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	e040      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 8003dae:	2300      	movs	r3, #0
 8003db0:	2200      	movs	r2, #0
 8003db2:	2102      	movs	r1, #2
 8003db4:	20f0      	movs	r0, #240	; 0xf0
 8003db6:	f000 faab 	bl	8004310 <configureNMEA>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <ubloxInit+0x54>
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	e033      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2103      	movs	r1, #3
 8003dce:	20f0      	movs	r0, #240	; 0xf0
 8003dd0:	f000 fa9e 	bl	8004310 <configureNMEA>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <ubloxInit+0x6e>
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	e026      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003de2:	2300      	movs	r3, #0
 8003de4:	2200      	movs	r2, #0
 8003de6:	2104      	movs	r1, #4
 8003de8:	20f0      	movs	r0, #240	; 0xf0
 8003dea:	f000 fa91 	bl	8004310 <configureNMEA>
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <ubloxInit+0x88>
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	e019      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2105      	movs	r1, #5
 8003e02:	20f0      	movs	r0, #240	; 0xf0
 8003e04:	f000 fa84 	bl	8004310 <configureNMEA>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <ubloxInit+0xa2>
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	e00c      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8003e16:	2300      	movs	r3, #0
 8003e18:	2202      	movs	r2, #2
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	20f0      	movs	r0, #240	; 0xf0
 8003e1e:	f000 fa77 	bl	8004310 <configureNMEA>
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <ubloxInit+0xbc>
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	e7ff      	b.n	8003e30 <ubloxInit+0xbc>
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <ubloxRead>:

HAL_StatusTypeDef ubloxNmeaGGA_set_refresh_rate(uint8_t seconds){
    return configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, seconds, COM_PORT_I2C);
}

uint8_t ubloxRead(void){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af04      	add	r7, sp, #16
    uint8_t res = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	717b      	strb	r3, [r7, #5]

    uint16_t num = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	80fb      	strh	r3, [r7, #6]
    uint8_t bytes[2] = {0};
 8003e46:	2300      	movs	r3, #0
 8003e48:	803b      	strh	r3, [r7, #0]

    res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFD, I2C_MEMADD_SIZE_8BIT, bytes, 2, 20);
 8003e4a:	2314      	movs	r3, #20
 8003e4c:	9302      	str	r3, [sp, #8]
 8003e4e:	2302      	movs	r3, #2
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	463b      	mov	r3, r7
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	2301      	movs	r3, #1
 8003e58:	22fd      	movs	r2, #253	; 0xfd
 8003e5a:	2184      	movs	r1, #132	; 0x84
 8003e5c:	4822      	ldr	r0, [pc, #136]	; (8003ee8 <ubloxRead+0xb0>)
 8003e5e:	f003 fbf9 	bl	8007654 <HAL_I2C_Mem_Read>
 8003e62:	4603      	mov	r3, r0
 8003e64:	717b      	strb	r3, [r7, #5]
    if (res!=HAL_OK)return res;
 8003e66:	797b      	ldrb	r3, [r7, #5]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <ubloxRead+0x38>
 8003e6c:	797b      	ldrb	r3, [r7, #5]
 8003e6e:	e037      	b.n	8003ee0 <ubloxRead+0xa8>
    num  = ((bytes[0] << 8) | bytes[1]);
 8003e70:	783b      	ldrb	r3, [r7, #0]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	787b      	ldrb	r3, [r7, #1]
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	80fb      	strh	r3, [r7, #6]
    memset(bytes, 0, 2);
 8003e80:	463b      	mov	r3, r7
 8003e82:	2202      	movs	r2, #2
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00b fc38 	bl	800f6fc <memset>
    if (num > 0){
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d025      	beq.n	8003ede <ubloxRead+0xa6>
    	if (num>140)num=140;
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	2b8c      	cmp	r3, #140	; 0x8c
 8003e96:	d901      	bls.n	8003e9c <ubloxRead+0x64>
 8003e98:	238c      	movs	r3, #140	; 0x8c
 8003e9a:	80fb      	strh	r3, [r7, #6]
        res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFF, I2C_MEMADD_SIZE_8BIT, gps_data.sentence, num, 100);
 8003e9c:	2364      	movs	r3, #100	; 0x64
 8003e9e:	9302      	str	r3, [sp, #8]
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <ubloxRead+0xb4>)
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	22ff      	movs	r2, #255	; 0xff
 8003eac:	2184      	movs	r1, #132	; 0x84
 8003eae:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <ubloxRead+0xb0>)
 8003eb0:	f003 fbd0 	bl	8007654 <HAL_I2C_Mem_Read>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	717b      	strb	r3, [r7, #5]
        if ((res != HAL_OK) || (gps_data.sentence[0] != '$')){
 8003eb8:	797b      	ldrb	r3, [r7, #5]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <ubloxRead+0x8e>
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <ubloxRead+0xb4>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b24      	cmp	r3, #36	; 0x24
 8003ec4:	d001      	beq.n	8003eca <ubloxRead+0x92>
                return 10;
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	e00a      	b.n	8003ee0 <ubloxRead+0xa8>
        }
//#ifdef __DEBUG__
        uart_write_debug(gps_data.sentence, 50);
 8003eca:	2132      	movs	r1, #50	; 0x32
 8003ecc:	4807      	ldr	r0, [pc, #28]	; (8003eec <ubloxRead+0xb4>)
 8003ece:	f002 fc07 	bl	80066e0 <uart_write_debug>
        uart_write_debug("\r\n", 10);
 8003ed2:	210a      	movs	r1, #10
 8003ed4:	4806      	ldr	r0, [pc, #24]	; (8003ef0 <ubloxRead+0xb8>)
 8003ed6:	f002 fc03 	bl	80066e0 <uart_write_debug>
//#endif
        return res;
 8003eda:	797b      	ldrb	r3, [r7, #5]
 8003edc:	e000      	b.n	8003ee0 <ubloxRead+0xa8>
    }
    return 10;
 8003ede:	230a      	movs	r3, #10
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000290 	.word	0x20000290
 8003eec:	200002e4 	.word	0x200002e4
 8003ef0:	08013c48 	.word	0x08013c48

08003ef4 <parseNMEA>:

uint8_t parseNMEA(void){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	; 0x30
 8003ef8:	af00      	add	r7, sp, #0
    char lat[12] = {0};
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	f107 0320 	add.w	r3, r7, #32
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
    char lng[12] = {0};
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
    char alt[7] = {0};
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	2100      	movs	r1, #0
 8003f20:	460a      	mov	r2, r1
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	460a      	mov	r2, r1
 8003f26:	709a      	strb	r2, [r3, #2]
    const char NMEA_delimiter[2] = ",";
 8003f28:	232c      	movs	r3, #44	; 0x2c
 8003f2a:	80bb      	strh	r3, [r7, #4]
    char * token = strtoke(gps_data.sentence, NMEA_delimiter);
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4868      	ldr	r0, [pc, #416]	; (80040d4 <parseNMEA+0x1e0>)
 8003f32:	f000 fa5b 	bl	80043ec <strtoke>
 8003f36:	4603      	mov	r3, r0
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t i = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (i = 0; token != NULL; i++) {
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f46:	e063      	b.n	8004010 <parseNMEA+0x11c>
        switch (i) {
 8003f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f4c:	2b0b      	cmp	r3, #11
 8003f4e:	d853      	bhi.n	8003ff8 <parseNMEA+0x104>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <parseNMEA+0x64>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003ff9 	.word	0x08003ff9
 8003f5c:	08003f89 	.word	0x08003f89
 8003f60:	08003f93 	.word	0x08003f93
 8003f64:	08003fa1 	.word	0x08003fa1
 8003f68:	08003fab 	.word	0x08003fab
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003fc3 	.word	0x08003fc3
 8003f74:	08003fcd 	.word	0x08003fcd
 8003f78:	08003fd7 	.word	0x08003fd7
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003ff9 	.word	0x08003ff9
 8003f84:	08003fef 	.word	0x08003fef
        case 0:
            break;
        case 1:
            strcpy(gps_data.timestamp, token);
 8003f88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f8a:	4853      	ldr	r0, [pc, #332]	; (80040d8 <parseNMEA+0x1e4>)
 8003f8c:	f00c f848 	bl	8010020 <strcpy>
            break;
 8003f90:	e032      	b.n	8003ff8 <parseNMEA+0x104>
        case 2:
            strcpy(lat, token);
 8003f92:	f107 031c 	add.w	r3, r7, #28
 8003f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f00c f841 	bl	8010020 <strcpy>
            break;
 8003f9e:	e02b      	b.n	8003ff8 <parseNMEA+0x104>
        case 3:
            strcpy(gps_data.NS, token);
 8003fa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa2:	484e      	ldr	r0, [pc, #312]	; (80040dc <parseNMEA+0x1e8>)
 8003fa4:	f00c f83c 	bl	8010020 <strcpy>
            break;
 8003fa8:	e026      	b.n	8003ff8 <parseNMEA+0x104>
        case 4:
            strcpy(lng, token);
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f00c f835 	bl	8010020 <strcpy>
            break;
 8003fb6:	e01f      	b.n	8003ff8 <parseNMEA+0x104>
        case 5:
            strcpy(gps_data.EW, token);
 8003fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fba:	4849      	ldr	r0, [pc, #292]	; (80040e0 <parseNMEA+0x1ec>)
 8003fbc:	f00c f830 	bl	8010020 <strcpy>
            break;
 8003fc0:	e01a      	b.n	8003ff8 <parseNMEA+0x104>
        case 6:
            strcpy(gps_data.quality, token);
 8003fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc4:	4847      	ldr	r0, [pc, #284]	; (80040e4 <parseNMEA+0x1f0>)
 8003fc6:	f00c f82b 	bl	8010020 <strcpy>
            break;
 8003fca:	e015      	b.n	8003ff8 <parseNMEA+0x104>
        case 7:
            strcpy(gps_data.satellites, token);
 8003fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fce:	4846      	ldr	r0, [pc, #280]	; (80040e8 <parseNMEA+0x1f4>)
 8003fd0:	f00c f826 	bl	8010020 <strcpy>
            break;
 8003fd4:	e010      	b.n	8003ff8 <parseNMEA+0x104>
        case 8:
            strcpy(gps_data.HDOP, token);
 8003fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd8:	4844      	ldr	r0, [pc, #272]	; (80040ec <parseNMEA+0x1f8>)
 8003fda:	f00c f821 	bl	8010020 <strcpy>
            break;
 8003fde:	e00b      	b.n	8003ff8 <parseNMEA+0x104>
        case 9:
            strcpy(alt, token);
 8003fe0:	f107 0308 	add.w	r3, r7, #8
 8003fe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f00c f81a 	bl	8010020 <strcpy>
            break;
 8003fec:	e004      	b.n	8003ff8 <parseNMEA+0x104>
        case 11:
            strcpy(gps_data.sep, token);
 8003fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff0:	483f      	ldr	r0, [pc, #252]	; (80040f0 <parseNMEA+0x1fc>)
 8003ff2:	f00c f815 	bl	8010020 <strcpy>
            break;
 8003ff6:	bf00      	nop
        }
        token = strtoke(NULL, NMEA_delimiter);
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f000 f9f5 	bl	80043ec <strtoke>
 8004002:	4603      	mov	r3, r0
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = 0; token != NULL; i++) {
 8004006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800400a:	3301      	adds	r3, #1
 800400c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d198      	bne.n	8003f48 <parseNMEA+0x54>
    }
    if (i<11){ //If the number of fields parsed is less than 11. Return error.
 8004016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800401a:	2b0a      	cmp	r3, #10
 800401c:	d80d      	bhi.n	800403a <parseNMEA+0x146>
        gps_loss_count++;
 800401e:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <parseNMEA+0x200>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	3301      	adds	r3, #1
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <parseNMEA+0x200>)
 8004028:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 800402a:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <parseNMEA+0x200>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b14      	cmp	r3, #20
 8004030:	d901      	bls.n	8004036 <parseNMEA+0x142>
            init_gps_data();
 8004032:	f000 f99f 	bl	8004374 <init_gps_data>
        }
        return 1;
 8004036:	2301      	movs	r3, #1
 8004038:	e048      	b.n	80040cc <parseNMEA+0x1d8>
    }
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <parseNMEA+0x1e0>)
 800403c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004040:	2b31      	cmp	r3, #49	; 0x31
 8004042:	d00e      	beq.n	8004062 <parseNMEA+0x16e>
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <parseNMEA+0x1e0>)
 8004046:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800404a:	2b32      	cmp	r3, #50	; 0x32
 800404c:	d009      	beq.n	8004062 <parseNMEA+0x16e>
 800404e:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <parseNMEA+0x1e0>)
 8004050:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004054:	2b34      	cmp	r3, #52	; 0x34
 8004056:	d004      	beq.n	8004062 <parseNMEA+0x16e>
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <parseNMEA+0x1e0>)
 800405a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800405e:	2b35      	cmp	r3, #53	; 0x35
 8004060:	d11d      	bne.n	800409e <parseNMEA+0x1aa>
        gps_data.latitude = coorsAtol(lat, gps_data.NS);
 8004062:	f107 031c 	add.w	r3, r7, #28
 8004066:	491d      	ldr	r1, [pc, #116]	; (80040dc <parseNMEA+0x1e8>)
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fa79 	bl	8004560 <coorsAtol>
 800406e:	4603      	mov	r3, r0
 8004070:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <parseNMEA+0x1e0>)
 8004072:	6553      	str	r3, [r2, #84]	; 0x54
        gps_data.longtitude = coorsAtol(lng, gps_data.EW);
 8004074:	f107 0310 	add.w	r3, r7, #16
 8004078:	4919      	ldr	r1, [pc, #100]	; (80040e0 <parseNMEA+0x1ec>)
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fa70 	bl	8004560 <coorsAtol>
 8004080:	4603      	mov	r3, r0
 8004082:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <parseNMEA+0x1e0>)
 8004084:	65d3      	str	r3, [r2, #92]	; 0x5c
        gps_data.altitude = altAtol(alt);
 8004086:	f107 0308 	add.w	r3, r7, #8
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f9e0 	bl	8004450 <altAtol>
 8004090:	4603      	mov	r3, r0
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <parseNMEA+0x1e0>)
 8004094:	6653      	str	r3, [r2, #100]	; 0x64
        gps_loss_count = 0;
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <parseNMEA+0x200>)
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 800409c:	e010      	b.n	80040c0 <parseNMEA+0x1cc>
    }
    else if (gps_data.quality[0] == '0'){
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <parseNMEA+0x1e0>)
 80040a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d10b      	bne.n	80040c0 <parseNMEA+0x1cc>
        gps_loss_count++;
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <parseNMEA+0x200>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <parseNMEA+0x200>)
 80040b2:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <parseNMEA+0x200>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b14      	cmp	r3, #20
 80040ba:	d901      	bls.n	80040c0 <parseNMEA+0x1cc>
            init_gps_data();
 80040bc:	f000 f95a 	bl	8004374 <init_gps_data>
        }
    }
    memset(gps_data.sentence, 0, 75);
 80040c0:	224b      	movs	r2, #75	; 0x4b
 80040c2:	2100      	movs	r1, #0
 80040c4:	4803      	ldr	r0, [pc, #12]	; (80040d4 <parseNMEA+0x1e0>)
 80040c6:	f00b fb19 	bl	800f6fc <memset>
    return 0;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3730      	adds	r7, #48	; 0x30
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200002e4 	.word	0x200002e4
 80040d8:	2000032f 	.word	0x2000032f
 80040dc:	2000033c 	.word	0x2000033c
 80040e0:	20000344 	.word	0x20000344
 80040e4:	20000345 	.word	0x20000345
 80040e8:	2000034c 	.word	0x2000034c
 80040ec:	2000034e 	.word	0x2000034e
 80040f0:	20000353 	.word	0x20000353
 80040f4:	2000035c 	.word	0x2000035c

080040f8 <calcChecksum>:


static void calcChecksum(messageCFG_t *msg){
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7b1a      	ldrb	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4413      	add	r3, r2
 8004116:	b2da      	uxtb	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7b5a      	ldrb	r2, [r3, #13]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	7b1b      	ldrb	r3, [r3, #12]
 8004124:	4413      	add	r3, r2
 8004126:	b2da      	uxtb	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7b1a      	ldrb	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	4413      	add	r3, r2
 8004136:	b2da      	uxtb	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7b5a      	ldrb	r2, [r3, #13]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7b1b      	ldrb	r3, [r3, #12]
 8004144:	4413      	add	r3, r2
 8004146:	b2da      	uxtb	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7b1a      	ldrb	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	885b      	ldrh	r3, [r3, #2]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	4413      	add	r3, r2
 8004158:	b2da      	uxtb	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7b5a      	ldrb	r2, [r3, #13]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7b1b      	ldrb	r3, [r3, #12]
 8004166:	4413      	add	r3, r2
 8004168:	b2da      	uxtb	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	7b1a      	ldrb	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	885b      	ldrh	r3, [r3, #2]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	b29b      	uxth	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	4413      	add	r3, r2
 800417e:	b2da      	uxtb	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7b5a      	ldrb	r2, [r3, #13]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	7b1b      	ldrb	r3, [r3, #12]
 800418c:	4413      	add	r3, r2
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e015      	b.n	80041c6 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	7b1a      	ldrb	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6899      	ldr	r1, [r3, #8]
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	440b      	add	r3, r1
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	4413      	add	r3, r2
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	7b5a      	ldrb	r2, [r3, #13]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7b1b      	ldrb	r3, [r3, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	3301      	adds	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	885b      	ldrh	r3, [r3, #2]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d3e3      	bcc.n	800419a <calcChecksum+0xa2>
    }
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <sendI2Cmessage>:

HAL_StatusTypeDef sendI2Cmessage(void){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08e      	sub	sp, #56	; 0x38
 80041e4:	af02      	add	r7, sp, #8
    uint8_t message[40] = {0};
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	2224      	movs	r2, #36	; 0x24
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f00b fa82 	bl	800f6fc <memset>
    uint8_t len = config_message.len + 8;
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <sendI2Cmessage+0xc8>)
 80041fa:	885b      	ldrh	r3, [r3, #2]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	3308      	adds	r3, #8
 8004200:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[0] = UBX_SYNCH_1;
 8004204:	23b5      	movs	r3, #181	; 0xb5
 8004206:	713b      	strb	r3, [r7, #4]
    message[1] = UBX_SYNCH_2;
 8004208:	2362      	movs	r3, #98	; 0x62
 800420a:	717b      	strb	r3, [r7, #5]
    message[2] = config_message.cls;
 800420c:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <sendI2Cmessage+0xc8>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	71bb      	strb	r3, [r7, #6]
    message[3] = config_message.id;
 8004212:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <sendI2Cmessage+0xc8>)
 8004214:	785b      	ldrb	r3, [r3, #1]
 8004216:	71fb      	strb	r3, [r7, #7]
    message[4] = (config_message.len & 0xFF);
 8004218:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <sendI2Cmessage+0xc8>)
 800421a:	885b      	ldrh	r3, [r3, #2]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	723b      	strb	r3, [r7, #8]
    message[5] = (config_message.len >> 8);
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <sendI2Cmessage+0xc8>)
 8004222:	885b      	ldrh	r3, [r3, #2]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	b29b      	uxth	r3, r3
 8004228:	b2db      	uxtb	r3, r3
 800422a:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 800422c:	2300      	movs	r3, #0
 800422e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004232:	e011      	b.n	8004258 <sendI2Cmessage+0x78>
        message[6+i] = config_message.payload[i];
 8004234:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <sendI2Cmessage+0xc8>)
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800423c:	441a      	add	r2, r3
 800423e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004242:	3306      	adds	r3, #6
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	3330      	adds	r3, #48	; 0x30
 8004248:	443b      	add	r3, r7
 800424a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for ( i=0 ; i < config_message.len ; i++){
 800424e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004252:	3301      	adds	r3, #1
 8004254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800425c:	b29a      	uxth	r2, r3
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <sendI2Cmessage+0xc8>)
 8004260:	885b      	ldrh	r3, [r3, #2]
 8004262:	429a      	cmp	r2, r3
 8004264:	d3e6      	bcc.n	8004234 <sendI2Cmessage+0x54>
    }
    message[6+i] = config_message.checksumA;
 8004266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800426a:	3306      	adds	r3, #6
 800426c:	4a0e      	ldr	r2, [pc, #56]	; (80042a8 <sendI2Cmessage+0xc8>)
 800426e:	7b12      	ldrb	r2, [r2, #12]
 8004270:	3330      	adds	r3, #48	; 0x30
 8004272:	443b      	add	r3, r7
 8004274:	f803 2c2c 	strb.w	r2, [r3, #-44]
    message[7+i] = config_message.checksumB;
 8004278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800427c:	3307      	adds	r3, #7
 800427e:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <sendI2Cmessage+0xc8>)
 8004280:	7b52      	ldrb	r2, [r2, #13]
 8004282:	3330      	adds	r3, #48	; 0x30
 8004284:	443b      	add	r3, r7
 8004286:	f803 2c2c 	strb.w	r2, [r3, #-44]
    return HAL_I2C_Master_Transmit(&hi2c1, UBLOX_M9N, message, len, 50);
 800428a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800428e:	b29b      	uxth	r3, r3
 8004290:	1d3a      	adds	r2, r7, #4
 8004292:	2132      	movs	r1, #50	; 0x32
 8004294:	9100      	str	r1, [sp, #0]
 8004296:	2184      	movs	r1, #132	; 0x84
 8004298:	4804      	ldr	r0, [pc, #16]	; (80042ac <sendI2Cmessage+0xcc>)
 800429a:	f002 ffd3 	bl	8007244 <HAL_I2C_Master_Transmit>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3730      	adds	r7, #48	; 0x30
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000000 	.word	0x20000000
 80042ac:	20000290 	.word	0x20000290

080042b0 <setPortOutput>:

HAL_StatusTypeDef setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	460a      	mov	r2, r1
 80042ba:	71fb      	strb	r3, [r7, #7]
 80042bc:	4613      	mov	r3, r2
 80042be:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <setPortOutput+0x5c>)
 80042c2:	2206      	movs	r2, #6
 80042c4:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <setPortOutput+0x5c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <setPortOutput+0x5c>)
 80042ce:	2214      	movs	r2, #20
 80042d0:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 80042e4:	2384      	movs	r3, #132	; 0x84
 80042e6:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 80042e8:	2323      	movs	r3, #35	; 0x23
 80042ea:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 80042ec:	79bb      	ldrb	r3, [r7, #6]
 80042ee:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <setPortOutput+0x5c>)
 80042f2:	f107 030c 	add.w	r3, r7, #12
 80042f6:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 80042f8:	4804      	ldr	r0, [pc, #16]	; (800430c <setPortOutput+0x5c>)
 80042fa:	f7ff fefd 	bl	80040f8 <calcChecksum>
    return sendI2Cmessage();
 80042fe:	f7ff ff6f 	bl	80041e0 <sendI2Cmessage>
 8004302:	4603      	mov	r3, r0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000000 	.word	0x20000000

08004310 <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

HAL_StatusTypeDef configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	4604      	mov	r4, r0
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	71fb      	strb	r3, [r7, #7]
 8004322:	4603      	mov	r3, r0
 8004324:	71bb      	strb	r3, [r7, #6]
 8004326:	460b      	mov	r3, r1
 8004328:	717b      	strb	r3, [r7, #5]
 800432a:	4613      	mov	r3, r2
 800432c:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <configureNMEA+0x60>)
 8004330:	2206      	movs	r2, #6
 8004332:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <configureNMEA+0x60>)
 8004336:	2201      	movs	r2, #1
 8004338:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <configureNMEA+0x60>)
 800433c:	2208      	movs	r2, #8
 800433e:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 800434c:	79bb      	ldrb	r3, [r7, #6]
 800434e:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 8004350:	797b      	ldrb	r3, [r7, #5]
 8004352:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8004354:	4a06      	ldr	r2, [pc, #24]	; (8004370 <configureNMEA+0x60>)
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 800435c:	4804      	ldr	r0, [pc, #16]	; (8004370 <configureNMEA+0x60>)
 800435e:	f7ff fecb 	bl	80040f8 <calcChecksum>
    return sendI2Cmessage();
 8004362:	f7ff ff3d 	bl	80041e0 <sendI2Cmessage>
 8004366:	4603      	mov	r3, r0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bd90      	pop	{r4, r7, pc}
 8004370:	20000000 	.word	0x20000000

08004374 <init_gps_data>:
    config_message.payload = payloadCfg;
    calcChecksum(&config_message);
    return sendI2Cmessage();
}

void init_gps_data(void){
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <init_gps_data+0x64>)
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    memset(gps_data.EW, 0, 1);
    memset(gps_data.HDOP, 0, 5);
 8004380:	2205      	movs	r2, #5
 8004382:	2100      	movs	r1, #0
 8004384:	4815      	ldr	r0, [pc, #84]	; (80043dc <init_gps_data+0x68>)
 8004386:	f00b f9b9 	bl	800f6fc <memset>
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <init_gps_data+0x64>)
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    memset(gps_data.NS, 0, 1);
    gps_data.altitude = 0;
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <init_gps_data+0x64>)
 8004394:	2200      	movs	r2, #0
 8004396:	665a      	str	r2, [r3, #100]	; 0x64
    gps_data.latitude = 0;
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <init_gps_data+0x64>)
 800439a:	2200      	movs	r2, #0
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
    gps_data.longtitude = 0;
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <init_gps_data+0x64>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <init_gps_data+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    memset(gps_data.quality, 0, 1);
    memset(gps_data.satellites, 0, 2);
 80043ac:	2202      	movs	r2, #2
 80043ae:	2100      	movs	r1, #0
 80043b0:	480b      	ldr	r0, [pc, #44]	; (80043e0 <init_gps_data+0x6c>)
 80043b2:	f00b f9a3 	bl	800f6fc <memset>
    memset(gps_data.sentence, 0, 75);
 80043b6:	224b      	movs	r2, #75	; 0x4b
 80043b8:	2100      	movs	r1, #0
 80043ba:	4807      	ldr	r0, [pc, #28]	; (80043d8 <init_gps_data+0x64>)
 80043bc:	f00b f99e 	bl	800f6fc <memset>
    memset(gps_data.sep, 0, 6);
 80043c0:	2206      	movs	r2, #6
 80043c2:	2100      	movs	r1, #0
 80043c4:	4807      	ldr	r0, [pc, #28]	; (80043e4 <init_gps_data+0x70>)
 80043c6:	f00b f999 	bl	800f6fc <memset>
    memset(gps_data.timestamp, 0, 9);
 80043ca:	2209      	movs	r2, #9
 80043cc:	2100      	movs	r1, #0
 80043ce:	4806      	ldr	r0, [pc, #24]	; (80043e8 <init_gps_data+0x74>)
 80043d0:	f00b f994 	bl	800f6fc <memset>
}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200002e4 	.word	0x200002e4
 80043dc:	2000034e 	.word	0x2000034e
 80043e0:	2000034c 	.word	0x2000034c
 80043e4:	20000353 	.word	0x20000353
 80043e8:	2000032f 	.word	0x2000032f

080043ec <strtoke>:

    return len;
}

char* strtoke(char *str, const char *delim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <strtoke+0x1a>
 8004400:	4a12      	ldr	r2, [pc, #72]	; (800444c <strtoke+0x60>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <strtoke+0x60>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <strtoke+0x26>
 800440e:	2300      	movs	r3, #0
 8004410:	e017      	b.n	8004442 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <strtoke+0x60>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <strtoke+0x60>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f00b fe06 	bl	8010030 <strpbrk>
 8004424:	4603      	mov	r3, r0
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <strtoke+0x60>)
 8004428:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <strtoke+0x60>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <strtoke+0x54>
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <strtoke+0x60>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	4904      	ldr	r1, [pc, #16]	; (800444c <strtoke+0x60>)
 800443a:	600a      	str	r2, [r1, #0]
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8004440:	68fb      	ldr	r3, [r7, #12]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000360 	.word	0x20000360

08004450 <altAtol>:
  }

  return sign * result;
}

long altAtol(char *str) {
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  float result = 0;
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
  long ret = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
  float divisor = 10;
 8004462:	4b3d      	ldr	r3, [pc, #244]	; (8004558 <altAtol+0x108>)
 8004464:	613b      	str	r3, [r7, #16]
  int sign = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	60bb      	str	r3, [r7, #8]

  // Skip whitespace
  while (*str == ' ') {
 800446a:	e002      	b.n	8004472 <altAtol+0x22>
    str++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3301      	adds	r3, #1
 8004470:	607b      	str	r3, [r7, #4]
  while (*str == ' ') {
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b20      	cmp	r3, #32
 8004478:	d0f8      	beq.n	800446c <altAtol+0x1c>
  }

  // Handle optional sign
  if (*str == '-') {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b2d      	cmp	r3, #45	; 0x2d
 8004480:	d106      	bne.n	8004490 <altAtol+0x40>
    sign = -1;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	60bb      	str	r3, [r7, #8]
    str++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3301      	adds	r3, #1
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e01d      	b.n	80044cc <altAtol+0x7c>
  } else if (*str == '+') {
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b2b      	cmp	r3, #43	; 0x2b
 8004496:	d119      	bne.n	80044cc <altAtol+0x7c>
    sign = 1;
 8004498:	2301      	movs	r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
    str++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
  }

  // Parse integer part
  while (*str >= '0' && *str <= '9') {
 80044a2:	e013      	b.n	80044cc <altAtol+0x7c>
    result = (result * 10) + (*str - '0');
 80044a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	3b30      	subs	r3, #48	; 0x30
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c2:	edc7 7a05 	vstr	s15, [r7, #20]
    str++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3301      	adds	r3, #1
 80044ca:	607b      	str	r3, [r7, #4]
  while (*str >= '0' && *str <= '9') {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b2f      	cmp	r3, #47	; 0x2f
 80044d2:	d903      	bls.n	80044dc <altAtol+0x8c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b39      	cmp	r3, #57	; 0x39
 80044da:	d9e3      	bls.n	80044a4 <altAtol+0x54>
  }

  // Parse decimal part
  if (*str == '.') {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b2e      	cmp	r3, #46	; 0x2e
 80044e2:	d127      	bne.n	8004534 <altAtol+0xe4>
    str++;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3301      	adds	r3, #1
 80044e8:	607b      	str	r3, [r7, #4]

    while (*str >= '0' && *str <= '9') {
 80044ea:	e01b      	b.n	8004524 <altAtol+0xd4>
      result += (*str - '0') / divisor;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	3b30      	subs	r3, #48	; 0x30
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80044fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004502:	ed97 7a05 	vldr	s14, [r7, #20]
 8004506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800450a:	edc7 7a05 	vstr	s15, [r7, #20]
      divisor *= 10;
 800450e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004512:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800451a:	edc7 7a04 	vstr	s15, [r7, #16]
      str++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3301      	adds	r3, #1
 8004522:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b2f      	cmp	r3, #47	; 0x2f
 800452a:	d903      	bls.n	8004534 <altAtol+0xe4>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b39      	cmp	r3, #57	; 0x39
 8004532:	d9db      	bls.n	80044ec <altAtol+0x9c>
    }
  }
  ret = (long)(result * 200000);
 8004534:	edd7 7a05 	vldr	s15, [r7, #20]
 8004538:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800455c <altAtol+0x10c>
 800453c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004544:	ee17 3a90 	vmov	r3, s15
 8004548:	60fb      	str	r3, [r7, #12]

  return ret;
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	41200000 	.word	0x41200000
 800455c:	48435000 	.word	0x48435000

08004560 <coorsAtol>:

long coorsAtol(char *coors, char sign){
 8004560:	b480      	push	{r7}
 8004562:	b08d      	sub	sp, #52	; 0x34
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t dotIndex=0;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char tempBuffer[12]={0};
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	f107 0310 	add.w	r3, r7, #16
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
    int deg = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
    float min = 0;
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
    float divisor = 10;
 8004590:	4b68      	ldr	r3, [pc, #416]	; (8004734 <coorsAtol+0x1d4>)
 8004592:	623b      	str	r3, [r7, #32]
    int s = 1;
 8004594:	2301      	movs	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
    long result =0;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]


    // Skip whitespace
    while (*coors == ' ') {
 800459c:	e002      	b.n	80045a4 <coorsAtol+0x44>
      coors++;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3301      	adds	r3, #1
 80045a2:	607b      	str	r3, [r7, #4]
    while (*coors == ' ') {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d0f8      	beq.n	800459e <coorsAtol+0x3e>
    }
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 80045ac:	e017      	b.n	80045de <coorsAtol+0x7e>
        tempBuffer[i] = *coors;
 80045ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	3330      	adds	r3, #48	; 0x30
 80045b8:	443b      	add	r3, r7
 80045ba:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (*coors == '.'){
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b2e      	cmp	r3, #46	; 0x2e
 80045c4:	d103      	bne.n	80045ce <coorsAtol+0x6e>
            dotIndex = i;
 80045c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        i++;
 80045ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045d2:	3301      	adds	r3, #1
 80045d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        coors++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3301      	adds	r3, #1
 80045dc:	607b      	str	r3, [r7, #4]
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b2f      	cmp	r3, #47	; 0x2f
 80045e4:	d903      	bls.n	80045ee <coorsAtol+0x8e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b39      	cmp	r3, #57	; 0x39
 80045ec:	d9df      	bls.n	80045ae <coorsAtol+0x4e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b2e      	cmp	r3, #46	; 0x2e
 80045f4:	d0db      	beq.n	80045ae <coorsAtol+0x4e>
    }

    for (i=0; i<(dotIndex-2); i++){
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045fc:	e013      	b.n	8004626 <coorsAtol+0xc6>
        deg = (deg * 10) + (tempBuffer[i] - '0');
 80045fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	461a      	mov	r2, r3
 800460a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800460e:	3330      	adds	r3, #48	; 0x30
 8004610:	443b      	add	r3, r7
 8004612:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004616:	3b30      	subs	r3, #48	; 0x30
 8004618:	4413      	add	r3, r2
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (i=0; i<(dotIndex-2); i++){
 800461c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004620:	3301      	adds	r3, #1
 8004622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004626:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800462a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800462e:	3b02      	subs	r3, #2
 8004630:	429a      	cmp	r2, r3
 8004632:	dbe4      	blt.n	80045fe <coorsAtol+0x9e>
    }
//    deg = deg * 60;

    for (i=dotIndex-2; i<dotIndex;i++){
 8004634:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004638:	3b02      	subs	r3, #2
 800463a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800463e:	e019      	b.n	8004674 <coorsAtol+0x114>
            min = (min * 10) + (tempBuffer[i] - '0');
 8004640:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004644:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800464c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004650:	3330      	adds	r3, #48	; 0x30
 8004652:	443b      	add	r3, r7
 8004654:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004658:	3b30      	subs	r3, #48	; 0x30
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004666:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (i=dotIndex-2; i<dotIndex;i++){
 800466a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800466e:	3301      	adds	r3, #1
 8004670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004674:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004678:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800467c:	429a      	cmp	r2, r3
 800467e:	d3df      	bcc.n	8004640 <coorsAtol+0xe0>
    }
    for (i=dotIndex+1;i<12;i++){
 8004680:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004684:	3301      	adds	r3, #1
 8004686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800468a:	e021      	b.n	80046d0 <coorsAtol+0x170>
      min += (tempBuffer[i] - '0') / divisor;
 800468c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004690:	3330      	adds	r3, #48	; 0x30
 8004692:	443b      	add	r3, r7
 8004694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004698:	3b30      	subs	r3, #48	; 0x30
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80046a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80046ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      divisor *= 10;
 80046b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80046ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046c2:	edc7 7a08 	vstr	s15, [r7, #32]
    for (i=dotIndex+1;i<12;i++){
 80046c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ca:	3301      	adds	r3, #1
 80046cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80046d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046d4:	2b0b      	cmp	r3, #11
 80046d6:	d9d9      	bls.n	800468c <coorsAtol+0x12c>
    }
    min = min /60;
 80046d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80046dc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004738 <coorsAtol+0x1d8>
 80046e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    result = (long)((deg+min) * 200000);
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80046f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800473c <coorsAtol+0x1dc>
 80046fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004706:	ee17 3a90 	vmov	r3, s15
 800470a:	61bb      	str	r3, [r7, #24]

    if ((sign == 'W')  || (sign == 'S')){
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	2b57      	cmp	r3, #87	; 0x57
 8004710:	d002      	beq.n	8004718 <coorsAtol+0x1b8>
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	2b53      	cmp	r3, #83	; 0x53
 8004716:	d102      	bne.n	800471e <coorsAtol+0x1be>
        s = -1;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	61fb      	str	r3, [r7, #28]
    }
    return s * result;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	3734      	adds	r7, #52	; 0x34
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	41200000 	.word	0x41200000
 8004738:	42700000 	.word	0x42700000
 800473c:	48435000 	.word	0x48435000

08004740 <tick_gyro>:
I2C_HandleTypeDef hi2c2;

static void debugPrintMEMS(mems_data_t *mems_data);


void tick_gyro(mems_data_t * mems_data){
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
    gyro_read(mems_data);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8f3 	bl	8004934 <gyro_read>
    lsm6_acc_read(mems_data);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f968 	bl	8004a24 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f9c1 	bl	8004adc <lis3_magn_read>
//    osDelay(5);
//    debugPrintMEMS(mems_data);
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <lsm6_bus_init+0x74>)
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <lsm6_bus_init+0x78>)
 800476c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800476e:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <lsm6_bus_init+0x74>)
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <lsm6_bus_init+0x7c>)
 8004772:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <lsm6_bus_init+0x74>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <lsm6_bus_init+0x74>)
 800477c:	2201      	movs	r2, #1
 800477e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <lsm6_bus_init+0x74>)
 8004782:	2200      	movs	r2, #0
 8004784:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <lsm6_bus_init+0x74>)
 8004788:	2200      	movs	r2, #0
 800478a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <lsm6_bus_init+0x74>)
 800478e:	2200      	movs	r2, #0
 8004790:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <lsm6_bus_init+0x74>)
 8004794:	2200      	movs	r2, #0
 8004796:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <lsm6_bus_init+0x74>)
 800479a:	2200      	movs	r2, #0
 800479c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800479e:	480e      	ldr	r0, [pc, #56]	; (80047d8 <lsm6_bus_init+0x74>)
 80047a0:	f002 fcc1 	bl	8007126 <HAL_I2C_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <lsm6_bus_init+0x4a>
  {
    return 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e012      	b.n	80047d4 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80047ae:	2100      	movs	r1, #0
 80047b0:	4809      	ldr	r0, [pc, #36]	; (80047d8 <lsm6_bus_init+0x74>)
 80047b2:	f003 fb29 	bl	8007e08 <HAL_I2CEx_ConfigAnalogFilter>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <lsm6_bus_init+0x5c>
  {
    return 2;
 80047bc:	2302      	movs	r3, #2
 80047be:	e009      	b.n	80047d4 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80047c0:	2100      	movs	r1, #0
 80047c2:	4805      	ldr	r0, [pc, #20]	; (80047d8 <lsm6_bus_init+0x74>)
 80047c4:	f003 fb6b 	bl	8007e9e <HAL_I2CEx_ConfigDigitalFilter>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <lsm6_bus_init+0x6e>
  {
    return 3;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e000      	b.n	80047d4 <lsm6_bus_init+0x70>
  }
  return 0;
 80047d2:	2300      	movs	r3, #0

}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000364 	.word	0x20000364
 80047dc:	40005800 	.word	0x40005800
 80047e0:	00b03fdb 	.word	0x00b03fdb

080047e4 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 80047ea:	2350      	movs	r3, #80	; 0x50
 80047ec:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x44;   // block data update - reg addr auto incr
 80047ee:	2344      	movs	r3, #68	; 0x44
 80047f0:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 80047f2:	2314      	movs	r3, #20
 80047f4:	9302      	str	r3, [sp, #8]
 80047f6:	2301      	movs	r3, #1
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	1dfb      	adds	r3, r7, #7
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2301      	movs	r3, #1
 8004800:	2211      	movs	r2, #17
 8004802:	21d4      	movs	r1, #212	; 0xd4
 8004804:	4809      	ldr	r0, [pc, #36]	; (800482c <gyro_init+0x48>)
 8004806:	f002 fe11 	bl	800742c <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 800480a:	2314      	movs	r3, #20
 800480c:	9302      	str	r3, [sp, #8]
 800480e:	2301      	movs	r3, #1
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	1dbb      	adds	r3, r7, #6
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2301      	movs	r3, #1
 8004818:	2212      	movs	r2, #18
 800481a:	21d4      	movs	r1, #212	; 0xd4
 800481c:	4803      	ldr	r0, [pc, #12]	; (800482c <gyro_init+0x48>)
 800481e:	f002 fe05 	bl	800742c <HAL_I2C_Mem_Write>
 8004822:	4603      	mov	r3, r0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000364 	.word	0x20000364

08004830 <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8004836:	2350      	movs	r3, #80	; 0x50
 8004838:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 800483a:	2320      	movs	r3, #32
 800483c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 800483e:	2314      	movs	r3, #20
 8004840:	9302      	str	r3, [sp, #8]
 8004842:	2301      	movs	r3, #1
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	1dfb      	adds	r3, r7, #7
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2301      	movs	r3, #1
 800484c:	2210      	movs	r2, #16
 800484e:	21d4      	movs	r1, #212	; 0xd4
 8004850:	4809      	ldr	r0, [pc, #36]	; (8004878 <lsm6_acc_init+0x48>)
 8004852:	f002 fdeb 	bl	800742c <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8004856:	2314      	movs	r3, #20
 8004858:	9302      	str	r3, [sp, #8]
 800485a:	2301      	movs	r3, #1
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	1dbb      	adds	r3, r7, #6
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2301      	movs	r3, #1
 8004864:	2219      	movs	r2, #25
 8004866:	21d4      	movs	r1, #212	; 0xd4
 8004868:	4803      	ldr	r0, [pc, #12]	; (8004878 <lsm6_acc_init+0x48>)
 800486a:	f002 fddf 	bl	800742c <HAL_I2C_Mem_Write>
 800486e:	4603      	mov	r3, r0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000364 	.word	0x20000364

0800487c <magn_init>:

HAL_StatusTypeDef magn_init(void){
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 8004886:	2342      	movs	r3, #66	; 0x42
 8004888:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 800488a:	2300      	movs	r3, #0
 800488c:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 800488e:	2308      	movs	r3, #8
 8004890:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 8004892:	2340      	movs	r3, #64	; 0x40
 8004894:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8004896:	2314      	movs	r3, #20
 8004898:	9302      	str	r3, [sp, #8]
 800489a:	2301      	movs	r3, #1
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	1dbb      	adds	r3, r7, #6
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2301      	movs	r3, #1
 80048a4:	2220      	movs	r2, #32
 80048a6:	213c      	movs	r1, #60	; 0x3c
 80048a8:	4821      	ldr	r0, [pc, #132]	; (8004930 <magn_init+0xb4>)
 80048aa:	f002 fdbf 	bl	800742c <HAL_I2C_Mem_Write>
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <magn_init+0x40>
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	e034      	b.n	8004926 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 80048bc:	2314      	movs	r3, #20
 80048be:	9302      	str	r3, [sp, #8]
 80048c0:	2301      	movs	r3, #1
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	1d7b      	adds	r3, r7, #5
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2301      	movs	r3, #1
 80048ca:	2222      	movs	r2, #34	; 0x22
 80048cc:	213c      	movs	r1, #60	; 0x3c
 80048ce:	4818      	ldr	r0, [pc, #96]	; (8004930 <magn_init+0xb4>)
 80048d0:	f002 fdac 	bl	800742c <HAL_I2C_Mem_Write>
 80048d4:	4603      	mov	r3, r0
 80048d6:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <magn_init+0x66>
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	e021      	b.n	8004926 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 20);
 80048e2:	2314      	movs	r3, #20
 80048e4:	9302      	str	r3, [sp, #8]
 80048e6:	2301      	movs	r3, #1
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	2301      	movs	r3, #1
 80048f0:	2223      	movs	r2, #35	; 0x23
 80048f2:	213c      	movs	r1, #60	; 0x3c
 80048f4:	480e      	ldr	r0, [pc, #56]	; (8004930 <magn_init+0xb4>)
 80048f6:	f002 fd99 	bl	800742c <HAL_I2C_Mem_Write>
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <magn_init+0x8c>
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	e00e      	b.n	8004926 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 20);
 8004908:	2314      	movs	r3, #20
 800490a:	9302      	str	r3, [sp, #8]
 800490c:	2301      	movs	r3, #1
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	1cfb      	adds	r3, r7, #3
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2301      	movs	r3, #1
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	213c      	movs	r1, #60	; 0x3c
 800491a:	4805      	ldr	r0, [pc, #20]	; (8004930 <magn_init+0xb4>)
 800491c:	f002 fd86 	bl	800742c <HAL_I2C_Mem_Write>
 8004920:	4603      	mov	r3, r0
 8004922:	71fb      	strb	r3, [r7, #7]
    return res;
 8004924:	79fb      	ldrb	r3, [r7, #7]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000364 	.word	0x20000364

08004934 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	; 0x30
 8004938:	af04      	add	r7, sp, #16
 800493a:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	2300      	movs	r3, #0
 8004942:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 800494c:	2332      	movs	r3, #50	; 0x32
 800494e:	9302      	str	r3, [sp, #8]
 8004950:	2306      	movs	r3, #6
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	f107 0310 	add.w	r3, r7, #16
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2301      	movs	r3, #1
 800495c:	2222      	movs	r2, #34	; 0x22
 800495e:	21d4      	movs	r1, #212	; 0xd4
 8004960:	482e      	ldr	r0, [pc, #184]	; (8004a1c <gyro_read+0xe8>)
 8004962:	f002 fe77 	bl	8007654 <HAL_I2C_Mem_Read>
    /*Timestamp Read*/
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 4, 50);
 8004966:	2332      	movs	r3, #50	; 0x32
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	2304      	movs	r3, #4
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	f107 030c 	add.w	r3, r7, #12
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2301      	movs	r3, #1
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	21d4      	movs	r1, #212	; 0xd4
 800497a:	4828      	ldr	r0, [pc, #160]	; (8004a1c <gyro_read+0xe8>)
 800497c:	f002 fe6a 	bl	8007654 <HAL_I2C_Mem_Read>

    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 8004980:	7c7b      	ldrb	r3, [r7, #17]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	b21a      	sxth	r2, r3
 8004986:	7c3b      	ldrb	r3, [r7, #16]
 8004988:	b21b      	sxth	r3, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	b21a      	sxth	r2, r3
 8004994:	7cbb      	ldrb	r3, [r7, #18]
 8004996:	b21b      	sxth	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 800499c:	7d7b      	ldrb	r3, [r7, #21]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	b21a      	sxth	r2, r3
 80049a2:	7d3b      	ldrb	r3, [r7, #20]
 80049a4:	b21b      	sxth	r3, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	833b      	strh	r3, [r7, #24]
    mems_data->gyro_x = (gyro_x / 131.1f);// * -1.0f;
 80049aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004a20 <gyro_read+0xec>
 80049ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro_y = (gyro_y / 131.1f);// * -1.0f;
 80049c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004a20 <gyro_read+0xec>
 80049d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro_z = (gyro_z / 131.1f);// * -1.0f;
 80049de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ea:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004a20 <gyro_read+0xec>
 80049ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = ((int)((ts_data[3]<<24)|(ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0])));
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	061a      	lsls	r2, r3, #24
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	431a      	orrs	r2, r3
 8004a02:	7b7b      	ldrb	r3, [r7, #13]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	4313      	orrs	r3, r2
 8004a08:	7b3a      	ldrb	r2, [r7, #12]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 8004a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000364 	.word	0x20000364
 8004a20:	4303199a 	.word	0x4303199a

08004a24 <lsm6_acc_read>:

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af04      	add	r7, sp, #16
 8004a2a:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	2300      	movs	r3, #0
 8004a32:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004a38:	2332      	movs	r3, #50	; 0x32
 8004a3a:	9302      	str	r3, [sp, #8]
 8004a3c:	2306      	movs	r3, #6
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2301      	movs	r3, #1
 8004a48:	2228      	movs	r2, #40	; 0x28
 8004a4a:	21d4      	movs	r1, #212	; 0xd4
 8004a4c:	4821      	ldr	r0, [pc, #132]	; (8004ad4 <lsm6_acc_read+0xb0>)
 8004a4e:	f002 fe01 	bl	8007654 <HAL_I2C_Mem_Read>
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 8004a52:	7a7b      	ldrb	r3, [r7, #9]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	b21a      	sxth	r2, r3
 8004a58:	7a3b      	ldrb	r3, [r7, #8]
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	b21a      	sxth	r2, r3
 8004a66:	7abb      	ldrb	r3, [r7, #10]
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 8004a6e:	7b7b      	ldrb	r3, [r7, #13]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	b21a      	sxth	r2, r3
 8004a74:	7b3b      	ldrb	r3, [r7, #12]
 8004a76:	b21b      	sxth	r3, r3
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	823b      	strh	r3, [r7, #16]
    mems_data->acc_x = (acc_x / 16384.0f);//  * -1.0f;
 8004a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a88:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004ad8 <lsm6_acc_read+0xb4>
 8004a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc_y = (acc_y / 16384.0f);// * -1.0f;
 8004a96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aa2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004ad8 <lsm6_acc_read+0xb4>
 8004aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc_z = (acc_z / 16384.0f);// * -1.0f;
 8004ab0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ab4:	ee07 3a90 	vmov	s15, r3
 8004ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004abc:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004ad8 <lsm6_acc_read+0xb4>
 8004ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000364 	.word	0x20000364
 8004ad8:	46800000 	.word	0x46800000

08004adc <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af04      	add	r7, sp, #16
 8004ae2:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004af0:	2332      	movs	r3, #50	; 0x32
 8004af2:	9302      	str	r3, [sp, #8]
 8004af4:	2306      	movs	r3, #6
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2301      	movs	r3, #1
 8004b00:	2228      	movs	r2, #40	; 0x28
 8004b02:	213c      	movs	r1, #60	; 0x3c
 8004b04:	4821      	ldr	r0, [pc, #132]	; (8004b8c <lis3_magn_read+0xb0>)
 8004b06:	f002 fda5 	bl	8007654 <HAL_I2C_Mem_Read>
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004b0a:	7a7b      	ldrb	r3, [r7, #9]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	b21a      	sxth	r2, r3
 8004b10:	7a3b      	ldrb	r3, [r7, #8]
 8004b12:	b21b      	sxth	r3, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 8004b18:	7afb      	ldrb	r3, [r7, #11]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	7abb      	ldrb	r3, [r7, #10]
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	4313      	orrs	r3, r2
 8004b24:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 8004b26:	7b7b      	ldrb	r3, [r7, #13]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	b21a      	sxth	r2, r3
 8004b2c:	7b3b      	ldrb	r3, [r7, #12]
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	823b      	strh	r3, [r7, #16]
    mems_data->magn_x = magn_x / 10.0f;
 8004b34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b40:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn_y = magn_y / 10.0f;
 8004b4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b5a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn_z = magn_z / 10.0f;
 8004b68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b74:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000364 	.word	0x20000364

08004b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b90:	b5b0      	push	{r4, r5, r7, lr}
 8004b92:	b09c      	sub	sp, #112	; 0x70
 8004b94:	af00      	add	r7, sp, #0

  HAL_Init();
 8004b96:	f001 fee4 	bl	8006962 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8004b9a:	f000 fa2a 	bl	8004ff2 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b9e:	f000 fa79 	bl	8005094 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8004ba2:	f001 fcc1 	bl	8006528 <MX_USART1_UART_Init>

  MX_UART4_Init();
 8004ba6:	f001 fd11 	bl	80065cc <MX_UART4_Init>


  if (lsm6_bus_init() != 0){
 8004baa:	f7ff fddb 	bl	8004764 <lsm6_bus_init>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d010      	beq.n	8004bd6 <main+0x46>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 8004bb4:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <main+0x1c8>)
 8004bb6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004bba:	461d      	mov	r5, r3
 8004bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bc4:	c403      	stmia	r4!, {r0, r1}
 8004bc6:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8004bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bcc:	210a      	movs	r1, #10
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fd86 	bl	80066e0 <uart_write_debug>
 8004bd4:	e042      	b.n	8004c5c <main+0xcc>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 8004bd6:	f7ff fe2b 	bl	8004830 <lsm6_acc_init>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00f      	beq.n	8004c00 <main+0x70>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004be0:	4b5e      	ldr	r3, [pc, #376]	; (8004d5c <main+0x1cc>)
 8004be2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004be6:	461d      	mov	r5, r3
 8004be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bf0:	c403      	stmia	r4!, {r0, r1}
 8004bf2:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bf8:	210a      	movs	r1, #10
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fd70 	bl	80066e0 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004c00:	f7ff fdf0 	bl	80047e4 <gyro_init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d012      	beq.n	8004c30 <main+0xa0>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 8004c0a:	4b55      	ldr	r3, [pc, #340]	; (8004d60 <main+0x1d0>)
 8004c0c:	f107 041c 	add.w	r4, r7, #28
 8004c10:	461d      	mov	r5, r3
 8004c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c1a:	c403      	stmia	r4!, {r0, r1}
 8004c1c:	8022      	strh	r2, [r4, #0]
 8004c1e:	3402      	adds	r4, #2
 8004c20:	0c13      	lsrs	r3, r2, #16
 8004c22:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004c24:	f107 031c 	add.w	r3, r7, #28
 8004c28:	210a      	movs	r1, #10
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fd58 	bl	80066e0 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004c30:	f7ff fe24 	bl	800487c <magn_init>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d010      	beq.n	8004c5c <main+0xcc>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 8004c3a:	4b4a      	ldr	r3, [pc, #296]	; (8004d64 <main+0x1d4>)
 8004c3c:	463c      	mov	r4, r7
 8004c3e:	461d      	mov	r5, r3
 8004c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c48:	c403      	stmia	r4!, {r0, r1}
 8004c4a:	8022      	strh	r2, [r4, #0]
 8004c4c:	3402      	adds	r4, #2
 8004c4e:	0c13      	lsrs	r3, r2, #16
 8004c50:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004c52:	463b      	mov	r3, r7
 8004c54:	210a      	movs	r1, #10
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 fd42 	bl	80066e0 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 8004c5c:	f7fe ffca 	bl	8003bf4 <ublox_i2c_bus_init>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <main+0xe0>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8004c66:	210a      	movs	r1, #10
 8004c68:	483f      	ldr	r0, [pc, #252]	; (8004d68 <main+0x1d8>)
 8004c6a:	f001 fd39 	bl	80066e0 <uart_write_debug>
 8004c6e:	e011      	b.n	8004c94 <main+0x104>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8004c70:	f7ff f880 	bl	8003d74 <ubloxInit>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 8004c7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <main+0xfc>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 8004c82:	210a      	movs	r1, #10
 8004c84:	4839      	ldr	r0, [pc, #228]	; (8004d6c <main+0x1dc>)
 8004c86:	f001 fd2b 	bl	80066e0 <uart_write_debug>
 8004c8a:	e003      	b.n	8004c94 <main+0x104>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 8004c8c:	210a      	movs	r1, #10
 8004c8e:	4838      	ldr	r0, [pc, #224]	; (8004d70 <main+0x1e0>)
 8004c90:	f001 fd26 	bl	80066e0 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 8004c94:	f007 f9cc 	bl	800c030 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 8004c98:	4836      	ldr	r0, [pc, #216]	; (8004d74 <main+0x1e4>)
 8004c9a:	f007 fac0 	bl	800c21e <osMutexNew>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4a35      	ldr	r2, [pc, #212]	; (8004d78 <main+0x1e8>)
 8004ca2:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 8004ca4:	4835      	ldr	r0, [pc, #212]	; (8004d7c <main+0x1ec>)
 8004ca6:	f007 faba 	bl	800c21e <osMutexNew>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <main+0x1f0>)
 8004cae:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (4, sizeof(mems_data_t), &memsQueue_attributes);
 8004cb0:	4a34      	ldr	r2, [pc, #208]	; (8004d84 <main+0x1f4>)
 8004cb2:	2128      	movs	r1, #40	; 0x28
 8004cb4:	2004      	movs	r0, #4
 8004cb6:	f007 fbc0 	bl	800c43a <osMessageQueueNew>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4a32      	ldr	r2, [pc, #200]	; (8004d88 <main+0x1f8>)
 8004cbe:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 8004cc0:	4a32      	ldr	r2, [pc, #200]	; (8004d8c <main+0x1fc>)
 8004cc2:	210c      	movs	r1, #12
 8004cc4:	2004      	movs	r0, #4
 8004cc6:	f007 fbb8 	bl	800c43a <osMessageQueueNew>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4a30      	ldr	r2, [pc, #192]	; (8004d90 <main+0x200>)
 8004cce:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 8004cd0:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <main+0x204>)
 8004cd2:	2128      	movs	r1, #40	; 0x28
 8004cd4:	2008      	movs	r0, #8
 8004cd6:	f007 fbb0 	bl	800c43a <osMessageQueueNew>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	; (8004d98 <main+0x208>)
 8004cde:	6013      	str	r3, [r2, #0]

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004ce0:	4a2e      	ldr	r2, [pc, #184]	; (8004d9c <main+0x20c>)
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	482e      	ldr	r0, [pc, #184]	; (8004da0 <main+0x210>)
 8004ce6:	f007 f9ed 	bl	800c0c4 <osThreadNew>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <main+0x214>)
 8004cee:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <main+0x218>)
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	482d      	ldr	r0, [pc, #180]	; (8004dac <main+0x21c>)
 8004cf6:	f007 f9e5 	bl	800c0c4 <osThreadNew>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4a2c      	ldr	r2, [pc, #176]	; (8004db0 <main+0x220>)
 8004cfe:	6013      	str	r3, [r2, #0]

  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);
 8004d00:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <main+0x224>)
 8004d02:	2100      	movs	r1, #0
 8004d04:	482c      	ldr	r0, [pc, #176]	; (8004db8 <main+0x228>)
 8004d06:	f007 f9dd 	bl	800c0c4 <osThreadNew>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <main+0x22c>)
 8004d0e:	6013      	str	r3, [r2, #0]

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 8004d10:	4a2b      	ldr	r2, [pc, #172]	; (8004dc0 <main+0x230>)
 8004d12:	2100      	movs	r1, #0
 8004d14:	482b      	ldr	r0, [pc, #172]	; (8004dc4 <main+0x234>)
 8004d16:	f007 f9d5 	bl	800c0c4 <osThreadNew>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <main+0x238>)
 8004d1e:	6013      	str	r3, [r2, #0]

  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);
 8004d20:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <main+0x23c>)
 8004d22:	2100      	movs	r1, #0
 8004d24:	482a      	ldr	r0, [pc, #168]	; (8004dd0 <main+0x240>)
 8004d26:	f007 f9cd 	bl	800c0c4 <osThreadNew>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4a29      	ldr	r2, [pc, #164]	; (8004dd4 <main+0x244>)
 8004d2e:	6013      	str	r3, [r2, #0]

  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);
 8004d30:	4a29      	ldr	r2, [pc, #164]	; (8004dd8 <main+0x248>)
 8004d32:	2100      	movs	r1, #0
 8004d34:	4829      	ldr	r0, [pc, #164]	; (8004ddc <main+0x24c>)
 8004d36:	f007 f9c5 	bl	800c0c4 <osThreadNew>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4a28      	ldr	r2, [pc, #160]	; (8004de0 <main+0x250>)
 8004d3e:	6013      	str	r3, [r2, #0]

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 8004d40:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <main+0x254>)
 8004d42:	2100      	movs	r1, #0
 8004d44:	4828      	ldr	r0, [pc, #160]	; (8004de8 <main+0x258>)
 8004d46:	f007 f9bd 	bl	800c0c4 <osThreadNew>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4a27      	ldr	r2, [pc, #156]	; (8004dec <main+0x25c>)
 8004d4e:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8004d50:	f007 f992 	bl	800c078 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d54:	e7fe      	b.n	8004d54 <main+0x1c4>
 8004d56:	bf00      	nop
 8004d58:	08013d4c 	.word	0x08013d4c
 8004d5c:	08013d68 	.word	0x08013d68
 8004d60:	08013d84 	.word	0x08013d84
 8004d64:	08013da0 	.word	0x08013da0
 8004d68:	08013cf0 	.word	0x08013cf0
 8004d6c:	08013d14 	.word	0x08013d14
 8004d70:	08013d34 	.word	0x08013d34
 8004d74:	08013fac 	.word	0x08013fac
 8004d78:	200003d4 	.word	0x200003d4
 8004d7c:	08013fbc 	.word	0x08013fbc
 8004d80:	200003d8 	.word	0x200003d8
 8004d84:	08013fcc 	.word	0x08013fcc
 8004d88:	200003dc 	.word	0x200003dc
 8004d8c:	08013fe4 	.word	0x08013fe4
 8004d90:	200003e0 	.word	0x200003e0
 8004d94:	08013ffc 	.word	0x08013ffc
 8004d98:	200003e4 	.word	0x200003e4
 8004d9c:	08013eb0 	.word	0x08013eb0
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	200003b8 	.word	0x200003b8
 8004da8:	08013f1c 	.word	0x08013f1c
 8004dac:	08004e6d 	.word	0x08004e6d
 8004db0:	200003c0 	.word	0x200003c0
 8004db4:	08013ef8 	.word	0x08013ef8
 8004db8:	08004e19 	.word	0x08004e19
 8004dbc:	200003bc 	.word	0x200003bc
 8004dc0:	08013ed4 	.word	0x08013ed4
 8004dc4:	08004eb9 	.word	0x08004eb9
 8004dc8:	200003c4 	.word	0x200003c4
 8004dcc:	08013f40 	.word	0x08013f40
 8004dd0:	08004f45 	.word	0x08004f45
 8004dd4:	200003c8 	.word	0x200003c8
 8004dd8:	08013f88 	.word	0x08013f88
 8004ddc:	08004fe1 	.word	0x08004fe1
 8004de0:	200003d0 	.word	0x200003d0
 8004de4:	08013f64 	.word	0x08013f64
 8004de8:	08004f95 	.word	0x08004f95
 8004dec:	200003cc 	.word	0x200003cc

08004df0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004dfc:	4805      	ldr	r0, [pc, #20]	; (8004e14 <StartDefaultTask+0x24>)
 8004dfe:	f002 f955 	bl	80070ac <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 8004e02:	2001      	movs	r0, #1
 8004e04:	f001 fc44 	bl	8006690 <uart_receive_it>
    osDelay(500);
 8004e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e0c:	f007 f9ec 	bl	800c1e8 <osDelay>
  {
 8004e10:	e7f2      	b.n	8004df8 <StartDefaultTask+0x8>
 8004e12:	bf00      	nop
 8004e14:	48000400 	.word	0x48000400

08004e18 <calcHeadingTask>:
  /* USER CODE END 5 */
}


void calcHeadingTask(void *argument)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b090      	sub	sp, #64	; 0x40
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	osStatus_t status;
	FusionInit();
 8004e20:	f7fc fb82 	bl	8001528 <FusionInit>

	for(;;)
	{
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 2U);   // wait for message
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <calcHeadingTask+0x4c>)
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	f107 0114 	add.w	r1, r7, #20
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f007 fbd6 	bl	800c5e0 <osMessageQueueGet>
 8004e34:	63f8      	str	r0, [r7, #60]	; 0x3c
	    if (status == osOK) {
 8004e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <calcHeadingTask+0x44>
	    	FusionCalcHeading(&mems_data, &euler);
 8004e3c:	f107 0208 	add.w	r2, r7, #8
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fc fb8e 	bl	8001568 <FusionCalcHeading>
	    	osMessageQueuePut(outputQueueHandle, &euler, 0U, 2U);
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <calcHeadingTask+0x50>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	f107 0108 	add.w	r1, r7, #8
 8004e54:	2302      	movs	r3, #2
 8004e56:	2200      	movs	r2, #0
 8004e58:	f007 fb62 	bl	800c520 <osMessageQueuePut>
	    }
		osDelay(10);
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	f007 f9c3 	bl	800c1e8 <osDelay>
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 2U);   // wait for message
 8004e62:	e7df      	b.n	8004e24 <calcHeadingTask+0xc>
 8004e64:	200003dc 	.word	0x200003dc
 8004e68:	200003e0 	.word	0x200003e0

08004e6c <readMemsTask>:
	}
}

void readMemsTask(void *argument)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	for(;;)
	{
		osMutexAcquire(i2cMutex, osWaitForever);
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <readMemsTask+0x44>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f04f 31ff 	mov.w	r1, #4294967295
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f007 fa54 	bl	800c32a <osMutexAcquire>
		tick_gyro(&mems_data);
 8004e82:	f107 0308 	add.w	r3, r7, #8
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fc5a 	bl	8004740 <tick_gyro>
		osMutexRelease(i2cMutex);
 8004e8c:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <readMemsTask+0x44>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f007 fa95 	bl	800c3c0 <osMutexRelease>
		osMessageQueuePut(memsQueueHandle, &mems_data, 0U, 2U);
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <readMemsTask+0x48>)
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	f107 0108 	add.w	r1, r7, #8
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f007 fb3d 	bl	800c520 <osMessageQueuePut>
		osDelay(50);
 8004ea6:	2032      	movs	r0, #50	; 0x32
 8004ea8:	f007 f99e 	bl	800c1e8 <osDelay>
		osMutexAcquire(i2cMutex, osWaitForever);
 8004eac:	e7e2      	b.n	8004e74 <readMemsTask+0x8>
 8004eae:	bf00      	nop
 8004eb0:	200003d8 	.word	0x200003d8
 8004eb4:	200003dc 	.word	0x200003dc

08004eb8 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b094      	sub	sp, #80	; 0x50
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 2U);   // wait for message
 8004ece:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <printOutTask+0x80>)
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	f107 0118 	add.w	r1, r7, #24
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f007 fb81 	bl	800c5e0 <osMessageQueueGet>
 8004ede:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8004ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d123      	bne.n	8004f2e <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb45 	bl	8000578 <__aeabi_f2d>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	f107 000c 	add.w	r0, r7, #12
 8004ef6:	4911      	ldr	r1, [pc, #68]	; (8004f3c <printOutTask+0x84>)
 8004ef8:	f00b f872 	bl	800ffe0 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <printOutTask+0x88>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f04f 31ff 	mov.w	r1, #4294967295
 8004f04:	4618      	mov	r0, r3
 8004f06:	f007 fa10 	bl	800c32a <osMutexAcquire>
			uart_write_debug(text,50);
 8004f0a:	f107 030c 	add.w	r3, r7, #12
 8004f0e:	2132      	movs	r1, #50	; 0x32
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fbe5 	bl	80066e0 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 8004f16:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <printOutTask+0x88>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f007 fa50 	bl	800c3c0 <osMutexRelease>
			memset(text,0,sizeof(text));
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	220a      	movs	r2, #10
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f00a fbe7 	bl	800f6fc <memset>
		}
		osDelay(100);
 8004f2e:	2064      	movs	r0, #100	; 0x64
 8004f30:	f007 f95a 	bl	800c1e8 <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 2U);   // wait for message
 8004f34:	e7cb      	b.n	8004ece <printOutTask+0x16>
 8004f36:	bf00      	nop
 8004f38:	200003e0 	.word	0x200003e0
 8004f3c:	08013dbc 	.word	0x08013dbc
 8004f40:	200003d4 	.word	0x200003d4

08004f44 <getCoorsTask>:
	}
}


void getCoorsTask(void *argument){
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		osMutexAcquire(i2cMutex, osWaitForever);
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <getCoorsTask+0x48>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f04f 31ff 	mov.w	r1, #4294967295
 8004f54:	4618      	mov	r0, r3
 8004f56:	f007 f9e8 	bl	800c32a <osMutexAcquire>
		osMutexAcquire(debugUartMutex, osWaitForever);
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <getCoorsTask+0x4c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f62:	4618      	mov	r0, r3
 8004f64:	f007 f9e1 	bl	800c32a <osMutexAcquire>
		ublox_tick();
 8004f68:	f7fe fe84 	bl	8003c74 <ublox_tick>
		osMutexRelease(i2cMutex);
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <getCoorsTask+0x48>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f007 fa25 	bl	800c3c0 <osMutexRelease>
		osMutexRelease(debugUartMutex);
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <getCoorsTask+0x4c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f007 fa20 	bl	800c3c0 <osMutexRelease>
		osDelay(1700);
 8004f80:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8004f84:	f007 f930 	bl	800c1e8 <osDelay>
		osMutexAcquire(i2cMutex, osWaitForever);
 8004f88:	e7e0      	b.n	8004f4c <getCoorsTask+0x8>
 8004f8a:	bf00      	nop
 8004f8c:	200003d8 	.word	0x200003d8
 8004f90:	200003d4 	.word	0x200003d4

08004f94 <readMessageTask>:
	}
}

void readMessageTask(void *argument){
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	; 0x38
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint8_t message_buffer[RB_SIZE] = {0};
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	f107 0310 	add.w	r3, r7, #16
 8004fa4:	2224      	movs	r2, #36	; 0x24
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f00a fba7 	bl	800f6fc <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <readMessageTask+0x48>)
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f107 010c 	add.w	r1, r7, #12
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f007 fb10 	bl	800c5e0 <osMessageQueueGet>
 8004fc0:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <readMessageTask+0x3e>
			tick_Handler(message_buffer);
 8004fc8:	f107 030c 	add.w	r3, r7, #12
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fa2d 	bl	800542c <tick_Handler>
		}
		osDelay(500);
 8004fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fd6:	f007 f907 	bl	800c1e8 <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004fda:	e7e8      	b.n	8004fae <readMessageTask+0x1a>
 8004fdc:	200003e4 	.word	0x200003e4

08004fe0 <sendMessageTask>:
	}
}

void sendMessageTask(void *argument){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	for(;;){
		osDelay(500);
 8004fe8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fec:	f007 f8fc 	bl	800c1e8 <osDelay>
 8004ff0:	e7fa      	b.n	8004fe8 <sendMessageTask+0x8>

08004ff2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b096      	sub	sp, #88	; 0x58
 8004ff6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	2244      	movs	r2, #68	; 0x44
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f00a fb7b 	bl	800f6fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005006:	463b      	mov	r3, r7
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	609a      	str	r2, [r3, #8]
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8005014:	2000      	movs	r0, #0
 8005016:	f002 ffaf 	bl	8007f78 <HAL_PWREx_ControlVoltageScaling>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8005020:	f000 f9f4 	bl	800540c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005024:	2310      	movs	r3, #16
 8005026:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005028:	2301      	movs	r3, #1
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005030:	2360      	movs	r3, #96	; 0x60
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005034:	2302      	movs	r3, #2
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005038:	2301      	movs	r3, #1
 800503a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800503c:	2301      	movs	r3, #1
 800503e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8005040:	233c      	movs	r3, #60	; 0x3c
 8005042:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005044:	2302      	movs	r3, #2
 8005046:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005048:	2302      	movs	r3, #2
 800504a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800504c:	2302      	movs	r3, #2
 800504e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4618      	mov	r0, r3
 8005056:	f003 f833 	bl	80080c0 <HAL_RCC_OscConfig>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8005060:	f000 f9d4 	bl	800540c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005064:	230f      	movs	r3, #15
 8005066:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005068:	2303      	movs	r3, #3
 800506a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800506c:	2300      	movs	r3, #0
 800506e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005078:	463b      	mov	r3, r7
 800507a:	2105      	movs	r1, #5
 800507c:	4618      	mov	r0, r3
 800507e:	f003 fc39 	bl	80088f4 <HAL_RCC_ClockConfig>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005088:	f000 f9c0 	bl	800540c <Error_Handler>
  }
}
 800508c:	bf00      	nop
 800508e:	3758      	adds	r7, #88	; 0x58
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800509a:	f107 0314 	add.w	r3, r7, #20
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	605a      	str	r2, [r3, #4]
 80050a4:	609a      	str	r2, [r3, #8]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050aa:	4bbb      	ldr	r3, [pc, #748]	; (8005398 <MX_GPIO_Init+0x304>)
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	4aba      	ldr	r2, [pc, #744]	; (8005398 <MX_GPIO_Init+0x304>)
 80050b0:	f043 0310 	orr.w	r3, r3, #16
 80050b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050b6:	4bb8      	ldr	r3, [pc, #736]	; (8005398 <MX_GPIO_Init+0x304>)
 80050b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c2:	4bb5      	ldr	r3, [pc, #724]	; (8005398 <MX_GPIO_Init+0x304>)
 80050c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c6:	4ab4      	ldr	r2, [pc, #720]	; (8005398 <MX_GPIO_Init+0x304>)
 80050c8:	f043 0304 	orr.w	r3, r3, #4
 80050cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ce:	4bb2      	ldr	r3, [pc, #712]	; (8005398 <MX_GPIO_Init+0x304>)
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050da:	4baf      	ldr	r3, [pc, #700]	; (8005398 <MX_GPIO_Init+0x304>)
 80050dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050de:	4aae      	ldr	r2, [pc, #696]	; (8005398 <MX_GPIO_Init+0x304>)
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050e6:	4bac      	ldr	r3, [pc, #688]	; (8005398 <MX_GPIO_Init+0x304>)
 80050e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050f2:	4ba9      	ldr	r3, [pc, #676]	; (8005398 <MX_GPIO_Init+0x304>)
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	4aa8      	ldr	r2, [pc, #672]	; (8005398 <MX_GPIO_Init+0x304>)
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050fe:	4ba6      	ldr	r3, [pc, #664]	; (8005398 <MX_GPIO_Init+0x304>)
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800510a:	4ba3      	ldr	r3, [pc, #652]	; (8005398 <MX_GPIO_Init+0x304>)
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	4aa2      	ldr	r2, [pc, #648]	; (8005398 <MX_GPIO_Init+0x304>)
 8005110:	f043 0308 	orr.w	r3, r3, #8
 8005114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005116:	4ba0      	ldr	r3, [pc, #640]	; (8005398 <MX_GPIO_Init+0x304>)
 8005118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8005122:	2200      	movs	r2, #0
 8005124:	f240 1105 	movw	r1, #261	; 0x105
 8005128:	489c      	ldr	r0, [pc, #624]	; (800539c <MX_GPIO_Init+0x308>)
 800512a:	f001 ffa7 	bl	800707c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800512e:	2200      	movs	r2, #0
 8005130:	f248 111c 	movw	r1, #33052	; 0x811c
 8005134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005138:	f001 ffa0 	bl	800707c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800513c:	2200      	movs	r2, #0
 800513e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8005142:	4897      	ldr	r0, [pc, #604]	; (80053a0 <MX_GPIO_Init+0x30c>)
 8005144:	f001 ff9a 	bl	800707c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8005148:	2200      	movs	r2, #0
 800514a:	f242 0183 	movw	r1, #8323	; 0x2083
 800514e:	4895      	ldr	r0, [pc, #596]	; (80053a4 <MX_GPIO_Init+0x310>)
 8005150:	f001 ff94 	bl	800707c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 7110 	mov.w	r1, #576	; 0x240
 800515a:	4893      	ldr	r0, [pc, #588]	; (80053a8 <MX_GPIO_Init+0x314>)
 800515c:	f001 ff8e 	bl	800707c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8005160:	f240 1305 	movw	r3, #261	; 0x105
 8005164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005166:	2301      	movs	r3, #1
 8005168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516e:	2300      	movs	r3, #0
 8005170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005172:	f107 0314 	add.w	r3, r7, #20
 8005176:	4619      	mov	r1, r3
 8005178:	4888      	ldr	r0, [pc, #544]	; (800539c <MX_GPIO_Init+0x308>)
 800517a:	f001 fded 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800517e:	237a      	movs	r3, #122	; 0x7a
 8005180:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4619      	mov	r1, r3
 8005192:	4882      	ldr	r0, [pc, #520]	; (800539c <MX_GPIO_Init+0x308>)
 8005194:	f001 fde0 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8005198:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 800519c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800519e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80051a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051a8:	f107 0314 	add.w	r3, r7, #20
 80051ac:	4619      	mov	r1, r3
 80051ae:	487e      	ldr	r0, [pc, #504]	; (80053a8 <MX_GPIO_Init+0x314>)
 80051b0:	f001 fdd2 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80051b4:	233f      	movs	r3, #63	; 0x3f
 80051b6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80051b8:	230b      	movs	r3, #11
 80051ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c0:	f107 0314 	add.w	r3, r7, #20
 80051c4:	4619      	mov	r1, r3
 80051c6:	4878      	ldr	r0, [pc, #480]	; (80053a8 <MX_GPIO_Init+0x314>)
 80051c8:	f001 fdc6 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80051cc:	2303      	movs	r3, #3
 80051ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d0:	2302      	movs	r3, #2
 80051d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d8:	2303      	movs	r3, #3
 80051da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80051dc:	2308      	movs	r3, #8
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051ea:	f001 fdb5 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80051ee:	f248 131c 	movw	r3, #33052	; 0x811c
 80051f2:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fc:	2300      	movs	r3, #0
 80051fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	4619      	mov	r1, r3
 8005206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800520a:	f001 fda5 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800520e:	23e0      	movs	r3, #224	; 0xe0
 8005210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005212:	2302      	movs	r3, #2
 8005214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521a:	2303      	movs	r3, #3
 800521c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800521e:	2305      	movs	r3, #5
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005222:	f107 0314 	add.w	r3, r7, #20
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800522c:	f001 fd94 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8005230:	2301      	movs	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005234:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800523e:	f107 0314 	add.w	r3, r7, #20
 8005242:	4619      	mov	r1, r3
 8005244:	4856      	ldr	r0, [pc, #344]	; (80053a0 <MX_GPIO_Init+0x30c>)
 8005246:	f001 fd87 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800524a:	2302      	movs	r3, #2
 800524c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524e:	2302      	movs	r3, #2
 8005250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005256:	2300      	movs	r3, #0
 8005258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800525a:	2302      	movs	r3, #2
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800525e:	f107 0314 	add.w	r3, r7, #20
 8005262:	4619      	mov	r1, r3
 8005264:	484e      	ldr	r0, [pc, #312]	; (80053a0 <MX_GPIO_Init+0x30c>)
 8005266:	f001 fd77 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800526a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800526e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005270:	2301      	movs	r3, #1
 8005272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005278:	2300      	movs	r3, #0
 800527a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	4619      	mov	r1, r3
 8005282:	4847      	ldr	r0, [pc, #284]	; (80053a0 <MX_GPIO_Init+0x30c>)
 8005284:	f001 fd68 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8005288:	f44f 7320 	mov.w	r3, #640	; 0x280
 800528c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528e:	2302      	movs	r3, #2
 8005290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005296:	2300      	movs	r3, #0
 8005298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800529a:	2306      	movs	r3, #6
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800529e:	f107 0314 	add.w	r3, r7, #20
 80052a2:	4619      	mov	r1, r3
 80052a4:	483d      	ldr	r0, [pc, #244]	; (800539c <MX_GPIO_Init+0x308>)
 80052a6:	f001 fd57 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80052aa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80052ae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b0:	2302      	movs	r3, #2
 80052b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b8:	2303      	movs	r3, #3
 80052ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80052bc:	230a      	movs	r3, #10
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	4619      	mov	r1, r3
 80052c6:	4835      	ldr	r0, [pc, #212]	; (800539c <MX_GPIO_Init+0x308>)
 80052c8:	f001 fd46 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80052cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d2:	2302      	movs	r3, #2
 80052d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052da:	2303      	movs	r3, #3
 80052dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052de:	2307      	movs	r3, #7
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	4619      	mov	r1, r3
 80052e8:	482e      	ldr	r0, [pc, #184]	; (80053a4 <MX_GPIO_Init+0x310>)
 80052ea:	f001 fd35 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80052ee:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80052f2:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80052f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	4619      	mov	r1, r3
 8005304:	4827      	ldr	r0, [pc, #156]	; (80053a4 <MX_GPIO_Init+0x310>)
 8005306:	f001 fd27 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800530a:	f242 0383 	movw	r3, #8323	; 0x2083
 800530e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005310:	2301      	movs	r3, #1
 8005312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005318:	2300      	movs	r3, #0
 800531a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	4619      	mov	r1, r3
 8005322:	4820      	ldr	r0, [pc, #128]	; (80053a4 <MX_GPIO_Init+0x310>)
 8005324:	f001 fd18 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8005328:	f44f 7310 	mov.w	r3, #576	; 0x240
 800532c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800532e:	2301      	movs	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800533a:	f107 0314 	add.w	r3, r7, #20
 800533e:	4619      	mov	r1, r3
 8005340:	4819      	ldr	r0, [pc, #100]	; (80053a8 <MX_GPIO_Init+0x314>)
 8005342:	f001 fd09 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8005346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800534a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800534c:	2300      	movs	r3, #0
 800534e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	4619      	mov	r1, r3
 800535a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800535e:	f001 fcfb 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8005362:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005368:	2302      	movs	r3, #2
 800536a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005370:	2303      	movs	r3, #3
 8005372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005374:	2306      	movs	r3, #6
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005378:	f107 0314 	add.w	r3, r7, #20
 800537c:	4619      	mov	r1, r3
 800537e:	480a      	ldr	r0, [pc, #40]	; (80053a8 <MX_GPIO_Init+0x314>)
 8005380:	f001 fcea 	bl	8006d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8005384:	2378      	movs	r3, #120	; 0x78
 8005386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005388:	2302      	movs	r3, #2
 800538a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005390:	2303      	movs	r3, #3
 8005392:	623b      	str	r3, [r7, #32]
 8005394:	e00a      	b.n	80053ac <MX_GPIO_Init+0x318>
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	48001000 	.word	0x48001000
 80053a0:	48000400 	.word	0x48000400
 80053a4:	48000c00 	.word	0x48000c00
 80053a8:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053ac:	2307      	movs	r3, #7
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	4619      	mov	r1, r3
 80053b6:	480b      	ldr	r0, [pc, #44]	; (80053e4 <MX_GPIO_Init+0x350>)
 80053b8:	f001 fcce 	bl	8006d58 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	2105      	movs	r1, #5
 80053c0:	2017      	movs	r0, #23
 80053c2:	f001 fbe3 	bl	8006b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053c6:	2017      	movs	r0, #23
 80053c8:	f001 fbfc 	bl	8006bc4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2105      	movs	r1, #5
 80053d0:	2028      	movs	r0, #40	; 0x28
 80053d2:	f001 fbdb 	bl	8006b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053d6:	2028      	movs	r0, #40	; 0x28
 80053d8:	f001 fbf4 	bl	8006bc4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80053dc:	bf00      	nop
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	48000c00 	.word	0x48000c00

080053e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a04      	ldr	r2, [pc, #16]	; (8005408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80053fa:	f001 facb 	bl	8006994 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00

0800540c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005410:	b672      	cpsid	i
}
 8005412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005418:	4803      	ldr	r0, [pc, #12]	; (8005428 <Error_Handler+0x1c>)
 800541a:	f001 fe47 	bl	80070ac <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800541e:	2064      	movs	r0, #100	; 0x64
 8005420:	f001 fad8 	bl	80069d4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005424:	e7f6      	b.n	8005414 <Error_Handler+0x8>
 8005426:	bf00      	nop
 8005428:	48000400 	.word	0x48000400

0800542c <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 8005438:	f000 fb98 	bl	8005b6c <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 800543c:	2101      	movs	r1, #1
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa9a 	bl	8005978 <parseMessage>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <tick_Handler+0x24>
		handler(UART_NYX);
 800544a:	2001      	movs	r0, #1
 800544c:	f000 fb1e 	bl	8005a8c <handler>
	}
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8005462:	4b16      	ldr	r3, [pc, #88]	; (80054bc <sendNack+0x64>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b1b      	cmp	r3, #27
 8005468:	d007      	beq.n	800547a <sendNack+0x22>
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <sendNack+0x64>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d003      	beq.n	800547a <sendNack+0x22>
 8005472:	4b12      	ldr	r3, [pc, #72]	; (80054bc <sendNack+0x64>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d10f      	bne.n	800549a <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 800547a:	2315      	movs	r3, #21
 800547c:	733b      	strb	r3, [r7, #12]
 800547e:	231b      	movs	r3, #27
 8005480:	737b      	strb	r3, [r7, #13]
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <sendNack+0x64>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8005488:	79fa      	ldrb	r2, [r7, #7]
 800548a:	f107 000c 	add.w	r0, r7, #12
 800548e:	2305      	movs	r3, #5
 8005490:	2103      	movs	r1, #3
 8005492:	f001 f93b 	bl	800670c <uart_write>
 8005496:	4603      	mov	r3, r0
 8005498:	e00c      	b.n	80054b4 <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 800549a:	2315      	movs	r3, #21
 800549c:	723b      	strb	r3, [r7, #8]
 800549e:	4b07      	ldr	r3, [pc, #28]	; (80054bc <sendNack+0x64>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 80054a4:	79fa      	ldrb	r2, [r7, #7]
 80054a6:	f107 0008 	add.w	r0, r7, #8
 80054aa:	2305      	movs	r3, #5
 80054ac:	2102      	movs	r1, #2
 80054ae:	f001 f92d 	bl	800670c <uart_write>
 80054b2:	4603      	mov	r3, r0
    }
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	200003e8 	.word	0x200003e8

080054c0 <sendAck>:

uint8_t sendAck(UART_select device){
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 80054ca:	4b16      	ldr	r3, [pc, #88]	; (8005524 <sendAck+0x64>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b1b      	cmp	r3, #27
 80054d0:	d007      	beq.n	80054e2 <sendAck+0x22>
 80054d2:	4b14      	ldr	r3, [pc, #80]	; (8005524 <sendAck+0x64>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d003      	beq.n	80054e2 <sendAck+0x22>
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <sendAck+0x64>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d10f      	bne.n	8005502 <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 80054e2:	2306      	movs	r3, #6
 80054e4:	733b      	strb	r3, [r7, #12]
 80054e6:	231b      	movs	r3, #27
 80054e8:	737b      	strb	r3, [r7, #13]
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <sendAck+0x64>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 80054f0:	79fa      	ldrb	r2, [r7, #7]
 80054f2:	f107 000c 	add.w	r0, r7, #12
 80054f6:	2305      	movs	r3, #5
 80054f8:	2103      	movs	r1, #3
 80054fa:	f001 f907 	bl	800670c <uart_write>
 80054fe:	4603      	mov	r3, r0
 8005500:	e00c      	b.n	800551c <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 8005502:	2306      	movs	r3, #6
 8005504:	723b      	strb	r3, [r7, #8]
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <sendAck+0x64>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 800550c:	79fa      	ldrb	r2, [r7, #7]
 800550e:	f107 0008 	add.w	r0, r7, #8
 8005512:	2305      	movs	r3, #5
 8005514:	2102      	movs	r1, #2
 8005516:	f001 f8f9 	bl	800670c <uart_write>
 800551a:	4603      	mov	r3, r0
    }
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	200003e8 	.word	0x200003e8

08005528 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 8005534:	2300      	movs	r3, #0
 8005536:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8005538:	2300      	movs	r3, #0
 800553a:	73bb      	strb	r3, [r7, #14]
 800553c:	e01e      	b.n	800557c <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 800553e:	7bbb      	ldrb	r3, [r7, #14]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d00b      	beq.n	8005562 <calcDataSize+0x3a>
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d005      	beq.n	8005562 <calcDataSize+0x3a>
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	4413      	add	r3, r2
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b1b      	cmp	r3, #27
 8005560:	d106      	bne.n	8005570 <calcDataSize+0x48>
           j++;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	3301      	adds	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
           j++;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	3301      	adds	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
 800556e:	e002      	b.n	8005576 <calcDataSize+0x4e>
       }
       else j++;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	3301      	adds	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	3301      	adds	r3, #1
 800557a:	73bb      	strb	r3, [r7, #14]
 800557c:	7bba      	ldrb	r2, [r7, #14]
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	429a      	cmp	r2, r3
 8005582:	d3dc      	bcc.n	800553e <calcDataSize+0x16>
    }
    return j;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	70fb      	strb	r3, [r7, #3]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70bb      	strb	r3, [r7, #2]
 80055aa:	4613      	mov	r3, r2
 80055ac:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ffb5 	bl	8005528 <calcDataSize>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	4bc1      	ldr	r3, [pc, #772]	; (80058d0 <transmitMessage+0x33c>)
 80055ca:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 80055cc:	4bc0      	ldr	r3, [pc, #768]	; (80058d0 <transmitMessage+0x33c>)
 80055ce:	88db      	ldrh	r3, [r3, #6]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	48bf      	ldr	r0, [pc, #764]	; (80058d4 <transmitMessage+0x340>)
 80055d6:	f00a f883 	bl	800f6e0 <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 80055da:	4bbd      	ldr	r3, [pc, #756]	; (80058d0 <transmitMessage+0x33c>)
 80055dc:	22fe      	movs	r2, #254	; 0xfe
 80055de:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 80055e0:	4bbb      	ldr	r3, [pc, #748]	; (80058d0 <transmitMessage+0x33c>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 80055e6:	4bbc      	ldr	r3, [pc, #752]	; (80058d8 <transmitMessage+0x344>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2bff      	cmp	r3, #255	; 0xff
 80055ec:	d103      	bne.n	80055f6 <transmitMessage+0x62>
        TOKEN=0;
 80055ee:	4bba      	ldr	r3, [pc, #744]	; (80058d8 <transmitMessage+0x344>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e005      	b.n	8005602 <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 80055f6:	4bb8      	ldr	r3, [pc, #736]	; (80058d8 <transmitMessage+0x344>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4bb6      	ldr	r3, [pc, #728]	; (80058d8 <transmitMessage+0x344>)
 8005600:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 8005602:	4bb5      	ldr	r3, [pc, #724]	; (80058d8 <transmitMessage+0x344>)
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	4bb2      	ldr	r3, [pc, #712]	; (80058d0 <transmitMessage+0x33c>)
 8005608:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 800560a:	4ab1      	ldr	r2, [pc, #708]	; (80058d0 <transmitMessage+0x33c>)
 800560c:	78bb      	ldrb	r3, [r7, #2]
 800560e:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 8005610:	4baf      	ldr	r3, [pc, #700]	; (80058d0 <transmitMessage+0x33c>)
 8005612:	221b      	movs	r2, #27
 8005614:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 8005616:	4bae      	ldr	r3, [pc, #696]	; (80058d0 <transmitMessage+0x33c>)
 8005618:	2232      	movs	r2, #50	; 0x32
 800561a:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 800561c:	f000 f95e 	bl	80058dc <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 8005626:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800562a:	3330      	adds	r3, #48	; 0x30
 800562c:	443b      	add	r3, r7
 800562e:	2202      	movs	r2, #2
 8005630:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005634:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005638:	3301      	adds	r3, #1
 800563a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 800563e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005642:	4aa3      	ldr	r2, [pc, #652]	; (80058d0 <transmitMessage+0x33c>)
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	3330      	adds	r3, #48	; 0x30
 8005648:	443b      	add	r3, r7
 800564a:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800564e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005652:	3301      	adds	r3, #1
 8005654:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 8005658:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800565c:	4a9c      	ldr	r2, [pc, #624]	; (80058d0 <transmitMessage+0x33c>)
 800565e:	7852      	ldrb	r2, [r2, #1]
 8005660:	3330      	adds	r3, #48	; 0x30
 8005662:	443b      	add	r3, r7
 8005664:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005668:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800566c:	3301      	adds	r3, #1
 800566e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 8005672:	4b97      	ldr	r3, [pc, #604]	; (80058d0 <transmitMessage+0x33c>)
 8005674:	789b      	ldrb	r3, [r3, #2]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d007      	beq.n	800568a <transmitMessage+0xf6>
 800567a:	4b95      	ldr	r3, [pc, #596]	; (80058d0 <transmitMessage+0x33c>)
 800567c:	789b      	ldrb	r3, [r3, #2]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d003      	beq.n	800568a <transmitMessage+0xf6>
 8005682:	4b93      	ldr	r3, [pc, #588]	; (80058d0 <transmitMessage+0x33c>)
 8005684:	789b      	ldrb	r3, [r3, #2]
 8005686:	2b1b      	cmp	r3, #27
 8005688:	d119      	bne.n	80056be <transmitMessage+0x12a>
        message[index] = ESC;
 800568a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800568e:	3330      	adds	r3, #48	; 0x30
 8005690:	443b      	add	r3, r7
 8005692:	221b      	movs	r2, #27
 8005694:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005698:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800569c:	3301      	adds	r3, #1
 800569e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 80056a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056a6:	4a8a      	ldr	r2, [pc, #552]	; (80058d0 <transmitMessage+0x33c>)
 80056a8:	7892      	ldrb	r2, [r2, #2]
 80056aa:	3330      	adds	r3, #48	; 0x30
 80056ac:	443b      	add	r3, r7
 80056ae:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80056b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056b6:	3301      	adds	r3, #1
 80056b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80056bc:	e00c      	b.n	80056d8 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 80056be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056c2:	4a83      	ldr	r2, [pc, #524]	; (80058d0 <transmitMessage+0x33c>)
 80056c4:	7892      	ldrb	r2, [r2, #2]
 80056c6:	3330      	adds	r3, #48	; 0x30
 80056c8:	443b      	add	r3, r7
 80056ca:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80056ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056d2:	3301      	adds	r3, #1
 80056d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 80056d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056dc:	4a7c      	ldr	r2, [pc, #496]	; (80058d0 <transmitMessage+0x33c>)
 80056de:	78d2      	ldrb	r2, [r2, #3]
 80056e0:	3330      	adds	r3, #48	; 0x30
 80056e2:	443b      	add	r3, r7
 80056e4:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80056e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056ec:	3301      	adds	r3, #1
 80056ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 80056f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056f6:	4a76      	ldr	r2, [pc, #472]	; (80058d0 <transmitMessage+0x33c>)
 80056f8:	7912      	ldrb	r2, [r2, #4]
 80056fa:	3330      	adds	r3, #48	; 0x30
 80056fc:	443b      	add	r3, r7
 80056fe:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005702:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005706:	3301      	adds	r3, #1
 8005708:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 800570c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005710:	4a6f      	ldr	r2, [pc, #444]	; (80058d0 <transmitMessage+0x33c>)
 8005712:	7952      	ldrb	r2, [r2, #5]
 8005714:	3330      	adds	r3, #48	; 0x30
 8005716:	443b      	add	r3, r7
 8005718:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800571c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005720:	3301      	adds	r3, #1
 8005722:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8005726:	2300      	movs	r3, #0
 8005728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800572c:	e046      	b.n	80057bc <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 800572e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005732:	4a67      	ldr	r2, [pc, #412]	; (80058d0 <transmitMessage+0x33c>)
 8005734:	4413      	add	r3, r2
 8005736:	7a1b      	ldrb	r3, [r3, #8]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d00d      	beq.n	8005758 <transmitMessage+0x1c4>
 800573c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005740:	4a63      	ldr	r2, [pc, #396]	; (80058d0 <transmitMessage+0x33c>)
 8005742:	4413      	add	r3, r2
 8005744:	7a1b      	ldrb	r3, [r3, #8]
 8005746:	2b03      	cmp	r3, #3
 8005748:	d006      	beq.n	8005758 <transmitMessage+0x1c4>
 800574a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800574e:	4a60      	ldr	r2, [pc, #384]	; (80058d0 <transmitMessage+0x33c>)
 8005750:	4413      	add	r3, r2
 8005752:	7a1b      	ldrb	r3, [r3, #8]
 8005754:	2b1b      	cmp	r3, #27
 8005756:	d11c      	bne.n	8005792 <transmitMessage+0x1fe>
            message[index] = ESC;
 8005758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800575c:	3330      	adds	r3, #48	; 0x30
 800575e:	443b      	add	r3, r7
 8005760:	221b      	movs	r2, #27
 8005762:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005766:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800576a:	3301      	adds	r3, #1
 800576c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 8005770:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005774:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005778:	4955      	ldr	r1, [pc, #340]	; (80058d0 <transmitMessage+0x33c>)
 800577a:	440a      	add	r2, r1
 800577c:	7a12      	ldrb	r2, [r2, #8]
 800577e:	3330      	adds	r3, #48	; 0x30
 8005780:	443b      	add	r3, r7
 8005782:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005786:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800578a:	3301      	adds	r3, #1
 800578c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005790:	e00f      	b.n	80057b2 <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 8005792:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005796:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800579a:	494d      	ldr	r1, [pc, #308]	; (80058d0 <transmitMessage+0x33c>)
 800579c:	440a      	add	r2, r1
 800579e:	7a12      	ldrb	r2, [r2, #8]
 80057a0:	3330      	adds	r3, #48	; 0x30
 80057a2:	443b      	add	r3, r7
 80057a4:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 80057a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ac:	3301      	adds	r3, #1
 80057ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 80057b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057b6:	3301      	adds	r3, #1
 80057b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80057bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	4b43      	ldr	r3, [pc, #268]	; (80058d0 <transmitMessage+0x33c>)
 80057c4:	88db      	ldrh	r3, [r3, #6]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3b1      	bcc.n	800572e <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 80057ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ce:	4a40      	ldr	r2, [pc, #256]	; (80058d0 <transmitMessage+0x33c>)
 80057d0:	7fd2      	ldrb	r2, [r2, #31]
 80057d2:	3330      	adds	r3, #48	; 0x30
 80057d4:	443b      	add	r3, r7
 80057d6:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80057da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057de:	3301      	adds	r3, #1
 80057e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 80057e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057e8:	4a39      	ldr	r2, [pc, #228]	; (80058d0 <transmitMessage+0x33c>)
 80057ea:	7f92      	ldrb	r2, [r2, #30]
 80057ec:	3330      	adds	r3, #48	; 0x30
 80057ee:	443b      	add	r3, r7
 80057f0:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80057f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057f8:	3301      	adds	r3, #1
 80057fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 80057fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005802:	4a33      	ldr	r2, [pc, #204]	; (80058d0 <transmitMessage+0x33c>)
 8005804:	7f52      	ldrb	r2, [r2, #29]
 8005806:	3330      	adds	r3, #48	; 0x30
 8005808:	443b      	add	r3, r7
 800580a:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800580e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005812:	3301      	adds	r3, #1
 8005814:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 8005818:	4b2d      	ldr	r3, [pc, #180]	; (80058d0 <transmitMessage+0x33c>)
 800581a:	7f1b      	ldrb	r3, [r3, #28]
 800581c:	2b1b      	cmp	r3, #27
 800581e:	d12a      	bne.n	8005876 <transmitMessage+0x2e2>
        message[index] = ESC;
 8005820:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005824:	3330      	adds	r3, #48	; 0x30
 8005826:	443b      	add	r3, r7
 8005828:	221b      	movs	r2, #27
 800582a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800582e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005832:	3301      	adds	r3, #1
 8005834:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 8005838:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800583c:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <transmitMessage+0x33c>)
 800583e:	7f12      	ldrb	r2, [r2, #28]
 8005840:	3330      	adds	r3, #48	; 0x30
 8005842:	443b      	add	r3, r7
 8005844:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005848:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800584c:	3301      	adds	r3, #1
 800584e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8005852:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005856:	3330      	adds	r3, #48	; 0x30
 8005858:	443b      	add	r3, r7
 800585a:	2203      	movs	r2, #3
 800585c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005860:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005864:	3301      	adds	r3, #1
 8005866:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 800586a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800586e:	b29a      	uxth	r2, r3
 8005870:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <transmitMessage+0x33c>)
 8005872:	80da      	strh	r2, [r3, #6]
 8005874:	e01d      	b.n	80058b2 <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 8005876:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800587a:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <transmitMessage+0x33c>)
 800587c:	7f12      	ldrb	r2, [r2, #28]
 800587e:	3330      	adds	r3, #48	; 0x30
 8005880:	443b      	add	r3, r7
 8005882:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005886:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800588a:	3301      	adds	r3, #1
 800588c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8005890:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005894:	3330      	adds	r3, #48	; 0x30
 8005896:	443b      	add	r3, r7
 8005898:	2203      	movs	r2, #3
 800589a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800589e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058a2:	3301      	adds	r3, #1
 80058a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 80058a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <transmitMessage+0x33c>)
 80058b0:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <transmitMessage+0x33c>)
 80058b4:	88db      	ldrh	r3, [r3, #6]
 80058b6:	b2d9      	uxtb	r1, r3
 80058b8:	787a      	ldrb	r2, [r7, #1]
 80058ba:	f107 0008 	add.w	r0, r7, #8
 80058be:	230a      	movs	r3, #10
 80058c0:	f000 ff24 	bl	800670c <uart_write>
    return 1;
 80058c4:	2301      	movs	r3, #1
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3730      	adds	r7, #48	; 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200003ec 	.word	0x200003ec
 80058d4:	200003f4 	.word	0x200003f4
 80058d8:	200003e8 	.word	0x200003e8

080058dc <calcChecksum>:

static void calcChecksum(void){
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 80058e2:	4b24      	ldr	r3, [pc, #144]	; (8005974 <calcChecksum+0x98>)
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	4b23      	ldr	r3, [pc, #140]	; (8005974 <calcChecksum+0x98>)
 80058e8:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 80058ea:	4b22      	ldr	r3, [pc, #136]	; (8005974 <calcChecksum+0x98>)
 80058ec:	7f1a      	ldrb	r2, [r3, #28]
 80058ee:	4b21      	ldr	r3, [pc, #132]	; (8005974 <calcChecksum+0x98>)
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	4053      	eors	r3, r2
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <calcChecksum+0x98>)
 80058f8:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 80058fa:	4b1e      	ldr	r3, [pc, #120]	; (8005974 <calcChecksum+0x98>)
 80058fc:	7f1a      	ldrb	r2, [r3, #28]
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <calcChecksum+0x98>)
 8005900:	789b      	ldrb	r3, [r3, #2]
 8005902:	4053      	eors	r3, r2
 8005904:	b2da      	uxtb	r2, r3
 8005906:	4b1b      	ldr	r3, [pc, #108]	; (8005974 <calcChecksum+0x98>)
 8005908:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 800590a:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <calcChecksum+0x98>)
 800590c:	7f1a      	ldrb	r2, [r3, #28]
 800590e:	4b19      	ldr	r3, [pc, #100]	; (8005974 <calcChecksum+0x98>)
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	4053      	eors	r3, r2
 8005914:	b2da      	uxtb	r2, r3
 8005916:	4b17      	ldr	r3, [pc, #92]	; (8005974 <calcChecksum+0x98>)
 8005918:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 800591a:	4b16      	ldr	r3, [pc, #88]	; (8005974 <calcChecksum+0x98>)
 800591c:	7f1a      	ldrb	r2, [r3, #28]
 800591e:	4b15      	ldr	r3, [pc, #84]	; (8005974 <calcChecksum+0x98>)
 8005920:	791b      	ldrb	r3, [r3, #4]
 8005922:	4053      	eors	r3, r2
 8005924:	b2da      	uxtb	r2, r3
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <calcChecksum+0x98>)
 8005928:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <calcChecksum+0x98>)
 800592c:	7f1a      	ldrb	r2, [r3, #28]
 800592e:	4b11      	ldr	r3, [pc, #68]	; (8005974 <calcChecksum+0x98>)
 8005930:	795b      	ldrb	r3, [r3, #5]
 8005932:	4053      	eors	r3, r2
 8005934:	b2da      	uxtb	r2, r3
 8005936:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <calcChecksum+0x98>)
 8005938:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	71fb      	strb	r3, [r7, #7]
 800593e:	e00c      	b.n	800595a <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 8005940:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <calcChecksum+0x98>)
 8005942:	7f1a      	ldrb	r2, [r3, #28]
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	490b      	ldr	r1, [pc, #44]	; (8005974 <calcChecksum+0x98>)
 8005948:	440b      	add	r3, r1
 800594a:	7a1b      	ldrb	r3, [r3, #8]
 800594c:	4053      	eors	r3, r2
 800594e:	b2da      	uxtb	r2, r3
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <calcChecksum+0x98>)
 8005952:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	3301      	adds	r3, #1
 8005958:	71fb      	strb	r3, [r7, #7]
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	b29a      	uxth	r2, r3
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <calcChecksum+0x98>)
 8005960:	88db      	ldrh	r3, [r3, #6]
 8005962:	429a      	cmp	r2, r3
 8005964:	d3ec      	bcc.n	8005940 <calcChecksum+0x64>
    }
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	200003ec 	.word	0x200003ec

08005978 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 800598e:	7b7b      	ldrb	r3, [r7, #13]
 8005990:	2b0a      	cmp	r3, #10
 8005992:	d805      	bhi.n	80059a0 <parseMessage+0x28>
        sendNack(device);
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fd5e 	bl	8005458 <sendNack>
        return 1;
 800599c:	2301      	movs	r3, #1
 800599e:	e06d      	b.n	8005a7c <parseMessage+0x104>
    }
    msg.len = len-10;
 80059a0:	7b7b      	ldrb	r3, [r7, #13]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b0a      	subs	r3, #10
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <parseMessage+0x10c>)
 80059aa:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	785a      	ldrb	r2, [r3, #1]
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <parseMessage+0x10c>)
 80059b2:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	789a      	ldrb	r2, [r3, #2]
 80059b8:	4b32      	ldr	r3, [pc, #200]	; (8005a84 <parseMessage+0x10c>)
 80059ba:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	78da      	ldrb	r2, [r3, #3]
 80059c0:	4b30      	ldr	r3, [pc, #192]	; (8005a84 <parseMessage+0x10c>)
 80059c2:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 80059c4:	4b2f      	ldr	r3, [pc, #188]	; (8005a84 <parseMessage+0x10c>)
 80059c6:	789a      	ldrb	r2, [r3, #2]
 80059c8:	4b2f      	ldr	r3, [pc, #188]	; (8005a88 <parseMessage+0x110>)
 80059ca:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	791a      	ldrb	r2, [r3, #4]
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <parseMessage+0x10c>)
 80059d2:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	795a      	ldrb	r2, [r3, #5]
 80059d8:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <parseMessage+0x10c>)
 80059da:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	799a      	ldrb	r2, [r3, #6]
 80059e0:	4b28      	ldr	r3, [pc, #160]	; (8005a84 <parseMessage+0x10c>)
 80059e2:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	e00d      	b.n	8005a06 <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	3307      	adds	r3, #7
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	441a      	add	r2, r3
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	7811      	ldrb	r1, [r2, #0]
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <parseMessage+0x10c>)
 80059fa:	4413      	add	r3, r2
 80059fc:	460a      	mov	r2, r1
 80059fe:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	3301      	adds	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <parseMessage+0x10c>)
 8005a0c:	88db      	ldrh	r3, [r3, #6]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d3eb      	bcc.n	80059ea <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	3307      	adds	r3, #7
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	781a      	ldrb	r2, [r3, #0]
 8005a1e:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <parseMessage+0x10c>)
 8005a20:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	3308      	adds	r3, #8
 8005a26:	461a      	mov	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781a      	ldrb	r2, [r3, #0]
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <parseMessage+0x10c>)
 8005a30:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	3309      	adds	r3, #9
 8005a36:	461a      	mov	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <parseMessage+0x10c>)
 8005a40:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	330a      	adds	r3, #10
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <parseMessage+0x10c>)
 8005a50:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <parseMessage+0x10c>)
 8005a54:	7f1b      	ldrb	r3, [r3, #28]
 8005a56:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 8005a58:	f7ff ff40 	bl	80058dc <calcChecksum>
    if (chsum != msg.checksum[0]){
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <parseMessage+0x10c>)
 8005a5e:	7f1b      	ldrb	r3, [r3, #28]
 8005a60:	7bba      	ldrb	r2, [r7, #14]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d005      	beq.n	8005a72 <parseMessage+0xfa>
        sendNack(device);
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff fcf5 	bl	8005458 <sendNack>
        return 1;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e004      	b.n	8005a7c <parseMessage+0x104>
    }
    sendAck(device);
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fd23 	bl	80054c0 <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200003ec 	.word	0x200003ec
 8005a88:	200003e8 	.word	0x200003e8

08005a8c <handler>:



void handler(UART_select device){
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 8005a96:	4b33      	ldr	r3, [pc, #204]	; (8005b64 <handler+0xd8>)
 8005a98:	795b      	ldrb	r3, [r3, #5]
 8005a9a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a9c:	d057      	beq.n	8005b4e <handler+0xc2>
 8005a9e:	2ba0      	cmp	r3, #160	; 0xa0
 8005aa0:	dc5a      	bgt.n	8005b58 <handler+0xcc>
 8005aa2:	2b65      	cmp	r3, #101	; 0x65
 8005aa4:	dc34      	bgt.n	8005b10 <handler+0x84>
 8005aa6:	2b50      	cmp	r3, #80	; 0x50
 8005aa8:	db56      	blt.n	8005b58 <handler+0xcc>
 8005aaa:	3b50      	subs	r3, #80	; 0x50
 8005aac:	2b15      	cmp	r3, #21
 8005aae:	d853      	bhi.n	8005b58 <handler+0xcc>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <handler+0x2c>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005b17 	.word	0x08005b17
 8005abc:	08005b59 	.word	0x08005b59
 8005ac0:	08005b59 	.word	0x08005b59
 8005ac4:	08005b59 	.word	0x08005b59
 8005ac8:	08005b59 	.word	0x08005b59
 8005acc:	08005b59 	.word	0x08005b59
 8005ad0:	08005b1f 	.word	0x08005b1f
 8005ad4:	08005b59 	.word	0x08005b59
 8005ad8:	08005b59 	.word	0x08005b59
 8005adc:	08005b59 	.word	0x08005b59
 8005ae0:	08005b59 	.word	0x08005b59
 8005ae4:	08005b59 	.word	0x08005b59
 8005ae8:	08005b59 	.word	0x08005b59
 8005aec:	08005b59 	.word	0x08005b59
 8005af0:	08005b59 	.word	0x08005b59
 8005af4:	08005b59 	.word	0x08005b59
 8005af8:	08005b59 	.word	0x08005b59
 8005afc:	08005b59 	.word	0x08005b59
 8005b00:	08005b59 	.word	0x08005b59
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005b59 	.word	0x08005b59
 8005b0c:	08005b2f 	.word	0x08005b2f
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d014      	beq.n	8005b3e <handler+0xb2>
//        gpio_setGNSS_RESET(PIN_LOW);
        HAL_Delay(500);
//        gpio_setGNSS_RESET(PIN_HIGH);
        break;
    default:
        break;
 8005b14:	e020      	b.n	8005b58 <handler+0xcc>
        flag_connected_toIris = 1;
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <handler+0xdc>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	701a      	strb	r2, [r3, #0]
        break;
 8005b1c:	e01d      	b.n	8005b5a <handler+0xce>
        ublox_transmit_message(msg.cmd, device);
 8005b1e:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <handler+0xd8>)
 8005b20:	795b      	ldrb	r3, [r3, #5]
 8005b22:	79fa      	ldrb	r2, [r7, #7]
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe f8ce 	bl	8003cc8 <ublox_transmit_message>
        break;
 8005b2c:	e015      	b.n	8005b5a <handler+0xce>
        reportFW(msg.cmd, device);
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <handler+0xd8>)
 8005b30:	795b      	ldrb	r3, [r3, #5]
 8005b32:	79fa      	ldrb	r2, [r7, #7]
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f844 	bl	8005bc4 <reportFW>
        break;
 8005b3c:	e00d      	b.n	8005b5a <handler+0xce>
        ublox_transmit_rtc(msg.cmd, device);
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <handler+0xd8>)
 8005b40:	795b      	ldrb	r3, [r3, #5]
 8005b42:	79fa      	ldrb	r2, [r7, #7]
 8005b44:	4611      	mov	r1, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe f8aa 	bl	8003ca0 <ublox_transmit_rtc>
        break;
 8005b4c:	e005      	b.n	8005b5a <handler+0xce>
        HAL_Delay(500);
 8005b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b52:	f000 ff3f 	bl	80069d4 <HAL_Delay>
        break;
 8005b56:	e000      	b.n	8005b5a <handler+0xce>
        break;
 8005b58:	bf00      	nop
    }
}
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200003ec 	.word	0x200003ec
 8005b68:	200003e9 	.word	0x200003e9

08005b6c <init_message_t>:

void init_message_t(void){
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 8005b70:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <init_message_t+0x50>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <init_message_t+0x50>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <init_message_t+0x50>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 8005b82:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <init_message_t+0x50>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <init_message_t+0x50>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <init_message_t+0x50>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 8005b94:	2214      	movs	r2, #20
 8005b96:	2100      	movs	r1, #0
 8005b98:	4809      	ldr	r0, [pc, #36]	; (8005bc0 <init_message_t+0x54>)
 8005b9a:	f009 fdaf 	bl	800f6fc <memset>
    msg.checksum[0] = 0;
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <init_message_t+0x50>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <init_message_t+0x50>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <init_message_t+0x50>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <init_message_t+0x50>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	77da      	strb	r2, [r3, #31]
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	200003ec 	.word	0x200003ec
 8005bc0:	200003f4 	.word	0x200003f4

08005bc4 <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	460a      	mov	r2, r1
 8005bce:	71fb      	strb	r3, [r7, #7]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 8005bd4:	236e      	movs	r3, #110	; 0x6e
 8005bd6:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 8005bd8:	79bb      	ldrb	r3, [r7, #6]
 8005bda:	79fa      	ldrb	r2, [r7, #7]
 8005bdc:	f107 000c 	add.w	r0, r7, #12
 8005be0:	2101      	movs	r1, #1
 8005be2:	f7ff fcd7 	bl	8005594 <transmitMessage>
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f009 fd7b 	bl	800f6fc <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <RB_init+0x22>
    return 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e00a      	b.n	8005c26 <RB_init+0x38>
  }
  rb->rdpos = 0;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 8005c24:	2301      	movs	r3, #1
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	3301      	adds	r3, #1
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005c46:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c4a:	fb01 f202 	mul.w	r2, r1, r2
 8005c4e:	1a9a      	subs	r2, r3, r2
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d012      	beq.n	8005c7e <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	78f9      	ldrb	r1, [r7, #3]
 8005c60:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	3301      	adds	r3, #1
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c72:	fb01 f202 	mul.w	r2, r1, r2
 8005c76:	1a9a      	subs	r2, r3, r2
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c7c:	e000      	b.n	8005c80 <RB_push+0x52>
    return;
 8005c7e:	bf00      	nop
}
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d101      	bne.n	8005ca2 <RB_pop+0x18>
 8005c9e:	23ff      	movs	r3, #255	; 0xff
 8005ca0:	e012      	b.n	8005cc8 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005cb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8005cbc:	fb01 f202 	mul.w	r2, r1, r2
 8005cc0:	1a9a      	subs	r2, r3, r2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dc05      	bgt.n	8005cf4 <RB_pushFront+0x20>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e004      	b.n	8005cfe <RB_pushFront+0x2a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 8005d00:	7bfa      	ldrb	r2, [r7, #15]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d008      	beq.n	8005d1c <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	78f9      	ldrb	r1, [r7, #3]
 8005d18:	54d1      	strb	r1, [r2, r3]
 8005d1a:	e000      	b.n	8005d1e <RB_pushFront+0x4a>
    return;
 8005d1c:	bf00      	nop
}
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005d3a:	441a      	add	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005d48:	fb93 f1f2 	sdiv	r1, r3, r2
 8005d4c:	fb01 f202 	mul.w	r2, r1, r2
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	b2db      	uxtb	r3, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2228      	movs	r2, #40	; 0x28
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f009 fcc4 	bl	800f6fc <memset>
  rb->rdpos = 0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_MspInit+0x4c>)
 8005d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d92:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <HAL_MspInit+0x4c>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6613      	str	r3, [r2, #96]	; 0x60
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <HAL_MspInit+0x4c>)
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_MspInit+0x4c>)
 8005da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005daa:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <HAL_MspInit+0x4c>)
 8005dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db0:	6593      	str	r3, [r2, #88]	; 0x58
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <HAL_MspInit+0x4c>)
 8005db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	210f      	movs	r1, #15
 8005dc2:	f06f 0001 	mvn.w	r0, #1
 8005dc6:	f000 fee1 	bl	8006b8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40021000 	.word	0x40021000

08005dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b0b0      	sub	sp, #192	; 0xc0
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005df0:	f107 0318 	add.w	r3, r7, #24
 8005df4:	2294      	movs	r2, #148	; 0x94
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f009 fc7f 	bl	800f6fc <memset>
  if(hi2c->Instance==I2C2)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a4a      	ldr	r2, [pc, #296]	; (8005f2c <HAL_I2C_MspInit+0x154>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d144      	bne.n	8005e92 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e10:	f107 0318 	add.w	r3, r7, #24
 8005e14:	4618      	mov	r0, r3
 8005e16:	f003 f85d 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005e20:	f7ff faf4 	bl	800540c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e24:	4b42      	ldr	r3, [pc, #264]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e28:	4a41      	ldr	r2, [pc, #260]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005e2a:	f043 0302 	orr.w	r3, r3, #2
 8005e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e30:	4b3f      	ldr	r3, [pc, #252]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8005e3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e44:	2312      	movs	r3, #18
 8005e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e50:	2303      	movs	r3, #3
 8005e52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005e56:	2304      	movs	r3, #4
 8005e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005e60:	4619      	mov	r1, r3
 8005e62:	4834      	ldr	r0, [pc, #208]	; (8005f34 <HAL_I2C_MspInit+0x15c>)
 8005e64:	f000 ff78 	bl	8006d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005e68:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	4a30      	ldr	r2, [pc, #192]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e72:	6593      	str	r3, [r2, #88]	; 0x58
 8005e74:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005e80:	2200      	movs	r2, #0
 8005e82:	2105      	movs	r1, #5
 8005e84:	2021      	movs	r0, #33	; 0x21
 8005e86:	f000 fe81 	bl	8006b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005e8a:	2021      	movs	r0, #33	; 0x21
 8005e8c:	f000 fe9a 	bl	8006bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e90:	e048      	b.n	8005f24 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a28      	ldr	r2, [pc, #160]	; (8005f38 <HAL_I2C_MspInit+0x160>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d143      	bne.n	8005f24 <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005e9c:	2340      	movs	r3, #64	; 0x40
 8005e9e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ea4:	f107 0318 	add.w	r3, r7, #24
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f003 f813 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 8005eb4:	f7ff faaa 	bl	800540c <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005ebe:	f043 0302 	orr.w	r3, r3, #2
 8005ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8005ed0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ed8:	2312      	movs	r3, #18
 8005eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005eea:	2304      	movs	r3, #4
 8005eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ef0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	480f      	ldr	r0, [pc, #60]	; (8005f34 <HAL_I2C_MspInit+0x15c>)
 8005ef8:	f000 ff2e 	bl	8006d58 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005efc:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f00:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f06:	6593      	str	r3, [r2, #88]	; 0x58
 8005f08:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <HAL_I2C_MspInit+0x158>)
 8005f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2105      	movs	r1, #5
 8005f18:	201f      	movs	r0, #31
 8005f1a:	f000 fe37 	bl	8006b8c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005f1e:	201f      	movs	r0, #31
 8005f20:	f000 fe50 	bl	8006bc4 <HAL_NVIC_EnableIRQ>
}
 8005f24:	bf00      	nop
 8005f26:	37c0      	adds	r7, #192	; 0xc0
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40005800 	.word	0x40005800
 8005f30:	40021000 	.word	0x40021000
 8005f34:	48000400 	.word	0x48000400
 8005f38:	40005400 	.word	0x40005400

08005f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b0b4      	sub	sp, #208	; 0xd0
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f58:	2294      	movs	r2, #148	; 0x94
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f009 fbcd 	bl	800f6fc <memset>
  if(huart->Instance==UART4)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a8b      	ldr	r2, [pc, #556]	; (8006194 <HAL_UART_MspInit+0x258>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d144      	bne.n	8005ff6 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005f70:	2300      	movs	r3, #0
 8005f72:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f002 ffab 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005f84:	f7ff fa42 	bl	800540c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f88:	4b83      	ldr	r3, [pc, #524]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8c:	4a82      	ldr	r2, [pc, #520]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8005f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f92:	6593      	str	r3, [r2, #88]	; 0x58
 8005f94:	4b80      	ldr	r3, [pc, #512]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8005f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa0:	4b7d      	ldr	r3, [pc, #500]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8005fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa4:	4a7c      	ldr	r2, [pc, #496]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fac:	4b7a      	ldr	r3, [pc, #488]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8005fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	623b      	str	r3, [r7, #32]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005fda:	4619      	mov	r1, r3
 8005fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fe0:	f000 feba 	bl	8006d58 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2105      	movs	r1, #5
 8005fe8:	2034      	movs	r0, #52	; 0x34
 8005fea:	f000 fdcf 	bl	8006b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005fee:	2034      	movs	r0, #52	; 0x34
 8005ff0:	f000 fde8 	bl	8006bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005ff4:	e0ca      	b.n	800618c <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a68      	ldr	r2, [pc, #416]	; (800619c <HAL_UART_MspInit+0x260>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d143      	bne.n	8006088 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006000:	2301      	movs	r3, #1
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006004:	2300      	movs	r3, #0
 8006006:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800600c:	4618      	mov	r0, r3
 800600e:	f002 ff61 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8006018:	f7ff f9f8 	bl	800540c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800601c:	4b5e      	ldr	r3, [pc, #376]	; (8006198 <HAL_UART_MspInit+0x25c>)
 800601e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006020:	4a5d      	ldr	r2, [pc, #372]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8006022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006026:	6613      	str	r3, [r2, #96]	; 0x60
 8006028:	4b5b      	ldr	r3, [pc, #364]	; (8006198 <HAL_UART_MspInit+0x25c>)
 800602a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006034:	4b58      	ldr	r3, [pc, #352]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8006036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006038:	4a57      	ldr	r2, [pc, #348]	; (8006198 <HAL_UART_MspInit+0x25c>)
 800603a:	f043 0302 	orr.w	r3, r3, #2
 800603e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006040:	4b55      	ldr	r3, [pc, #340]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800604c:	23c0      	movs	r3, #192	; 0xc0
 800604e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006052:	2302      	movs	r3, #2
 8006054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006058:	2300      	movs	r3, #0
 800605a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800605e:	2303      	movs	r3, #3
 8006060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006064:	2307      	movs	r3, #7
 8006066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800606a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800606e:	4619      	mov	r1, r3
 8006070:	484b      	ldr	r0, [pc, #300]	; (80061a0 <HAL_UART_MspInit+0x264>)
 8006072:	f000 fe71 	bl	8006d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006076:	2200      	movs	r2, #0
 8006078:	2105      	movs	r1, #5
 800607a:	2025      	movs	r0, #37	; 0x25
 800607c:	f000 fd86 	bl	8006b8c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006080:	2025      	movs	r0, #37	; 0x25
 8006082:	f000 fd9f 	bl	8006bc4 <HAL_NVIC_EnableIRQ>
}
 8006086:	e081      	b.n	800618c <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a45      	ldr	r2, [pc, #276]	; (80061a4 <HAL_UART_MspInit+0x268>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d13b      	bne.n	800610a <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006092:	2302      	movs	r3, #2
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006096:	2300      	movs	r3, #0
 8006098:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800609a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 ff18 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_UART_MspInit+0x172>
      Error_Handler();
 80060aa:	f7ff f9af 	bl	800540c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060ae:	4b3a      	ldr	r3, [pc, #232]	; (8006198 <HAL_UART_MspInit+0x25c>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	4a39      	ldr	r2, [pc, #228]	; (8006198 <HAL_UART_MspInit+0x25c>)
 80060b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b8:	6593      	str	r3, [r2, #88]	; 0x58
 80060ba:	4b37      	ldr	r3, [pc, #220]	; (8006198 <HAL_UART_MspInit+0x25c>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060c6:	4b34      	ldr	r3, [pc, #208]	; (8006198 <HAL_UART_MspInit+0x25c>)
 80060c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ca:	4a33      	ldr	r2, [pc, #204]	; (8006198 <HAL_UART_MspInit+0x25c>)
 80060cc:	f043 0308 	orr.w	r3, r3, #8
 80060d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060d2:	4b31      	ldr	r3, [pc, #196]	; (8006198 <HAL_UART_MspInit+0x25c>)
 80060d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80060de:	2378      	movs	r3, #120	; 0x78
 80060e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e4:	2302      	movs	r3, #2
 80060e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f0:	2303      	movs	r3, #3
 80060f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060f6:	2307      	movs	r3, #7
 80060f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006100:	4619      	mov	r1, r3
 8006102:	4829      	ldr	r0, [pc, #164]	; (80061a8 <HAL_UART_MspInit+0x26c>)
 8006104:	f000 fe28 	bl	8006d58 <HAL_GPIO_Init>
}
 8006108:	e040      	b.n	800618c <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a27      	ldr	r2, [pc, #156]	; (80061ac <HAL_UART_MspInit+0x270>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d13b      	bne.n	800618c <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006114:	2304      	movs	r3, #4
 8006116:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006118:	2300      	movs	r3, #0
 800611a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800611c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006120:	4618      	mov	r0, r3
 8006122:	f002 fed7 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 800612c:	f7ff f96e 	bl	800540c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8006136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800613a:	6593      	str	r3, [r2, #88]	; 0x58
 800613c:	4b16      	ldr	r3, [pc, #88]	; (8006198 <HAL_UART_MspInit+0x25c>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006148:	4b13      	ldr	r3, [pc, #76]	; (8006198 <HAL_UART_MspInit+0x25c>)
 800614a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614c:	4a12      	ldr	r2, [pc, #72]	; (8006198 <HAL_UART_MspInit+0x25c>)
 800614e:	f043 0308 	orr.w	r3, r3, #8
 8006152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006154:	4b10      	ldr	r3, [pc, #64]	; (8006198 <HAL_UART_MspInit+0x25c>)
 8006156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8006160:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006168:	2302      	movs	r3, #2
 800616a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006174:	2303      	movs	r3, #3
 8006176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800617a:	2307      	movs	r3, #7
 800617c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006180:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006184:	4619      	mov	r1, r3
 8006186:	4808      	ldr	r0, [pc, #32]	; (80061a8 <HAL_UART_MspInit+0x26c>)
 8006188:	f000 fde6 	bl	8006d58 <HAL_GPIO_Init>
}
 800618c:	bf00      	nop
 800618e:	37d0      	adds	r7, #208	; 0xd0
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40004c00 	.word	0x40004c00
 8006198:	40021000 	.word	0x40021000
 800619c:	40013800 	.word	0x40013800
 80061a0:	48000400 	.word	0x48000400
 80061a4:	40004400 	.word	0x40004400
 80061a8:	48000c00 	.word	0x48000c00
 80061ac:	40004800 	.word	0x40004800

080061b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	; 0x30
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <HAL_InitTick+0xc8>)
 80061c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c2:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <HAL_InitTick+0xc8>)
 80061c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061c8:	6613      	str	r3, [r2, #96]	; 0x60
 80061ca:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_InitTick+0xc8>)
 80061cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80061d6:	f107 020c 	add.w	r2, r7, #12
 80061da:	f107 0310 	add.w	r3, r7, #16
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f002 fd85 	bl	8008cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80061e6:	f002 fd6d 	bl	8008cc4 <HAL_RCC_GetPCLK2Freq>
 80061ea:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	4a23      	ldr	r2, [pc, #140]	; (800627c <HAL_InitTick+0xcc>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	0c9b      	lsrs	r3, r3, #18
 80061f6:	3b01      	subs	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80061fa:	4b21      	ldr	r3, [pc, #132]	; (8006280 <HAL_InitTick+0xd0>)
 80061fc:	4a21      	ldr	r2, [pc, #132]	; (8006284 <HAL_InitTick+0xd4>)
 80061fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006200:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <HAL_InitTick+0xd0>)
 8006202:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006206:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006208:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <HAL_InitTick+0xd0>)
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800620e:	4b1c      	ldr	r3, [pc, #112]	; (8006280 <HAL_InitTick+0xd0>)
 8006210:	2200      	movs	r2, #0
 8006212:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006214:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <HAL_InitTick+0xd0>)
 8006216:	2200      	movs	r2, #0
 8006218:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800621a:	4b19      	ldr	r3, [pc, #100]	; (8006280 <HAL_InitTick+0xd0>)
 800621c:	2200      	movs	r2, #0
 800621e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006220:	4817      	ldr	r0, [pc, #92]	; (8006280 <HAL_InitTick+0xd0>)
 8006222:	f003 fb6f 	bl	8009904 <HAL_TIM_Base_Init>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800622c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006230:	2b00      	cmp	r3, #0
 8006232:	d11b      	bne.n	800626c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006234:	4812      	ldr	r0, [pc, #72]	; (8006280 <HAL_InitTick+0xd0>)
 8006236:	f003 fbc7 	bl	80099c8 <HAL_TIM_Base_Start_IT>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8006240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006244:	2b00      	cmp	r3, #0
 8006246:	d111      	bne.n	800626c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006248:	2019      	movs	r0, #25
 800624a:	f000 fcbb 	bl	8006bc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b0f      	cmp	r3, #15
 8006252:	d808      	bhi.n	8006266 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8006254:	2200      	movs	r2, #0
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	2019      	movs	r0, #25
 800625a:	f000 fc97 	bl	8006b8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800625e:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <HAL_InitTick+0xd8>)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	e002      	b.n	800626c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800626c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006270:	4618      	mov	r0, r3
 8006272:	3730      	adds	r7, #48	; 0x30
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	40021000 	.word	0x40021000
 800627c:	431bde83 	.word	0x431bde83
 8006280:	2000040c 	.word	0x2000040c
 8006284:	40012c00 	.word	0x40012c00
 8006288:	20000014 	.word	0x20000014

0800628c <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006290:	e7fe      	b.n	8006290 <NMI_Handler+0x4>

08006292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006292:	b480      	push	{r7}
 8006294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006296:	e7fe      	b.n	8006296 <HardFault_Handler+0x4>

08006298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800629c:	e7fe      	b.n	800629c <MemManage_Handler+0x4>

0800629e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800629e:	b480      	push	{r7}
 80062a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062a2:	e7fe      	b.n	80062a2 <BusFault_Handler+0x4>

080062a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062a8:	e7fe      	b.n	80062a8 <UsageFault_Handler+0x4>

080062aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062aa:	b480      	push	{r7}
 80062ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062ae:	bf00      	nop
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80062bc:	2020      	movs	r0, #32
 80062be:	f000 ff0f 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80062c2:	2040      	movs	r0, #64	; 0x40
 80062c4:	f000 ff0c 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80062c8:	2080      	movs	r0, #128	; 0x80
 80062ca:	f000 ff09 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80062ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80062d2:	f000 ff05 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80062e0:	4802      	ldr	r0, [pc, #8]	; (80062ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80062e2:	f003 fbe1 	bl	8009aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2000040c 	.word	0x2000040c

080062f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80062f4:	4802      	ldr	r0, [pc, #8]	; (8006300 <I2C1_EV_IRQHandler+0x10>)
 80062f6:	f001 fac7 	bl	8007888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000290 	.word	0x20000290

08006304 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006308:	4802      	ldr	r0, [pc, #8]	; (8006314 <I2C2_EV_IRQHandler+0x10>)
 800630a:	f001 fabd 	bl	8007888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800630e:	bf00      	nop
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000364 	.word	0x20000364

08006318 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800631c:	4802      	ldr	r0, [pc, #8]	; (8006328 <USART1_IRQHandler+0x10>)
 800631e:	f003 ff01 	bl	800a124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006322:	bf00      	nop
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	2000045c 	.word	0x2000045c

0800632c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006330:	4802      	ldr	r0, [pc, #8]	; (800633c <UART4_IRQHandler+0x10>)
 8006332:	f003 fef7 	bl	800a124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	200004ec 	.word	0x200004ec

08006340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8006344:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006348:	f000 feca 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800634c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006350:	f000 fec6 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8006354:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006358:	f000 fec2 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800635c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006360:	f000 febe 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8006364:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006368:	f000 feba 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800636c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006370:	f000 feb6 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006374:	bf00      	nop
 8006376:	bd80      	pop	{r7, pc}

08006378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  return 1;
 800637c:	2301      	movs	r3, #1
}
 800637e:	4618      	mov	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <_kill>:

int _kill(int pid, int sig)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006392:	f009 f97b 	bl	800f68c <__errno>
 8006396:	4603      	mov	r3, r0
 8006398:	2216      	movs	r2, #22
 800639a:	601a      	str	r2, [r3, #0]
  return -1;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <_exit>:

void _exit (int status)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80063b0:	f04f 31ff 	mov.w	r1, #4294967295
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff ffe7 	bl	8006388 <_kill>
  while (1) {}    /* Make sure we hang here */
 80063ba:	e7fe      	b.n	80063ba <_exit+0x12>

080063bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e00a      	b.n	80063e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80063ce:	f3af 8000 	nop.w
 80063d2:	4601      	mov	r1, r0
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	60ba      	str	r2, [r7, #8]
 80063da:	b2ca      	uxtb	r2, r1
 80063dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	3301      	adds	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	dbf0      	blt.n	80063ce <_read+0x12>
  }

  return len;
 80063ec:	687b      	ldr	r3, [r7, #4]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	e009      	b.n	800641c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	60ba      	str	r2, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	4618      	mov	r0, r3
 8006412:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	3301      	adds	r3, #1
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	dbf1      	blt.n	8006408 <_write+0x12>
  }
  return len;
 8006424:	687b      	ldr	r3, [r7, #4]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <_close>:

int _close(int file)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006456:	605a      	str	r2, [r3, #4]
  return 0;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <_isatty>:

int _isatty(int file)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800646e:	2301      	movs	r3, #1
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
	...

08006498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064a0:	4a14      	ldr	r2, [pc, #80]	; (80064f4 <_sbrk+0x5c>)
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <_sbrk+0x60>)
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <_sbrk+0x64>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064b4:	4b11      	ldr	r3, [pc, #68]	; (80064fc <_sbrk+0x64>)
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <_sbrk+0x68>)
 80064b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <_sbrk+0x64>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4413      	add	r3, r2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d207      	bcs.n	80064d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80064c8:	f009 f8e0 	bl	800f68c <__errno>
 80064cc:	4603      	mov	r3, r0
 80064ce:	220c      	movs	r2, #12
 80064d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80064d2:	f04f 33ff 	mov.w	r3, #4294967295
 80064d6:	e009      	b.n	80064ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80064d8:	4b08      	ldr	r3, [pc, #32]	; (80064fc <_sbrk+0x64>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80064de:	4b07      	ldr	r3, [pc, #28]	; (80064fc <_sbrk+0x64>)
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	4a05      	ldr	r2, [pc, #20]	; (80064fc <_sbrk+0x64>)
 80064e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200a0000 	.word	0x200a0000
 80064f8:	00000400 	.word	0x00000400
 80064fc:	20000458 	.word	0x20000458
 8006500:	20006350 	.word	0x20006350

08006504 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <SystemInit+0x20>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	4a05      	ldr	r2, [pc, #20]	; (8006524 <SystemInit+0x20>)
 8006510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006518:	bf00      	nop
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	e000ed00 	.word	0xe000ed00

08006528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800652c:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 800652e:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <MX_USART1_UART_Init+0x9c>)
 8006530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8006532:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006534:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 800653c:	2200      	movs	r2, #0
 800653e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006542:	2200      	movs	r2, #0
 8006544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006546:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006548:	2200      	movs	r2, #0
 800654a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 800654e:	220c      	movs	r2, #12
 8006550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006552:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006554:	2200      	movs	r2, #0
 8006556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 800655a:	2200      	movs	r2, #0
 800655c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800655e:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006560:	2200      	movs	r2, #0
 8006562:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006566:	2200      	movs	r2, #0
 8006568:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 800656c:	2200      	movs	r2, #0
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006570:	4813      	ldr	r0, [pc, #76]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006572:	f003 fc99 	bl	8009ea8 <HAL_UART_Init>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800657c:	f7fe ff46 	bl	800540c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006580:	2100      	movs	r1, #0
 8006582:	480f      	ldr	r0, [pc, #60]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006584:	f005 fc45 	bl	800be12 <HAL_UARTEx_SetTxFifoThreshold>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800658e:	f7fe ff3d 	bl	800540c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006592:	2100      	movs	r1, #0
 8006594:	480a      	ldr	r0, [pc, #40]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 8006596:	f005 fc7a 	bl	800be8e <HAL_UARTEx_SetRxFifoThreshold>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80065a0:	f7fe ff34 	bl	800540c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80065a4:	4806      	ldr	r0, [pc, #24]	; (80065c0 <MX_USART1_UART_Init+0x98>)
 80065a6:	f005 fbfb 	bl	800bda0 <HAL_UARTEx_DisableFifoMode>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80065b0:	f7fe ff2c 	bl	800540c <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 80065b4:	2128      	movs	r1, #40	; 0x28
 80065b6:	4804      	ldr	r0, [pc, #16]	; (80065c8 <MX_USART1_UART_Init+0xa0>)
 80065b8:	f7ff fb19 	bl	8005bee <RB_init>

}
 80065bc:	bf00      	nop
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	2000045c 	.word	0x2000045c
 80065c4:	40013800 	.word	0x40013800
 80065c8:	200005b0 	.word	0x200005b0

080065cc <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80065d0:	4b26      	ldr	r3, [pc, #152]	; (800666c <MX_UART4_Init+0xa0>)
 80065d2:	4a27      	ldr	r2, [pc, #156]	; (8006670 <MX_UART4_Init+0xa4>)
 80065d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 80065d6:	4b25      	ldr	r3, [pc, #148]	; (800666c <MX_UART4_Init+0xa0>)
 80065d8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80065dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80065de:	4b23      	ldr	r3, [pc, #140]	; (800666c <MX_UART4_Init+0xa0>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80065e4:	4b21      	ldr	r3, [pc, #132]	; (800666c <MX_UART4_Init+0xa0>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80065ea:	4b20      	ldr	r3, [pc, #128]	; (800666c <MX_UART4_Init+0xa0>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80065f0:	4b1e      	ldr	r3, [pc, #120]	; (800666c <MX_UART4_Init+0xa0>)
 80065f2:	220c      	movs	r2, #12
 80065f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <MX_UART4_Init+0xa0>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <MX_UART4_Init+0xa0>)
 80065fe:	2200      	movs	r2, #0
 8006600:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006602:	4b1a      	ldr	r3, [pc, #104]	; (800666c <MX_UART4_Init+0xa0>)
 8006604:	2200      	movs	r2, #0
 8006606:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006608:	4b18      	ldr	r3, [pc, #96]	; (800666c <MX_UART4_Init+0xa0>)
 800660a:	2200      	movs	r2, #0
 800660c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800660e:	4b17      	ldr	r3, [pc, #92]	; (800666c <MX_UART4_Init+0xa0>)
 8006610:	2200      	movs	r2, #0
 8006612:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006614:	4815      	ldr	r0, [pc, #84]	; (800666c <MX_UART4_Init+0xa0>)
 8006616:	f003 fc47 	bl	8009ea8 <HAL_UART_Init>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <MX_UART4_Init+0x58>
  {
    error_Handler();
 8006620:	f000 f82c 	bl	800667c <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006624:	2100      	movs	r1, #0
 8006626:	4811      	ldr	r0, [pc, #68]	; (800666c <MX_UART4_Init+0xa0>)
 8006628:	f005 fbf3 	bl	800be12 <HAL_UARTEx_SetTxFifoThreshold>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <MX_UART4_Init+0x6a>
  {
    error_Handler();
 8006632:	f000 f823 	bl	800667c <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006636:	2100      	movs	r1, #0
 8006638:	480c      	ldr	r0, [pc, #48]	; (800666c <MX_UART4_Init+0xa0>)
 800663a:	f005 fc28 	bl	800be8e <HAL_UARTEx_SetRxFifoThreshold>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 8006644:	f000 f81a 	bl	800667c <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8006648:	4808      	ldr	r0, [pc, #32]	; (800666c <MX_UART4_Init+0xa0>)
 800664a:	f005 fba9 	bl	800bda0 <HAL_UARTEx_DisableFifoMode>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 8006654:	f000 f812 	bl	800667c <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 8006658:	2128      	movs	r1, #40	; 0x28
 800665a:	4806      	ldr	r0, [pc, #24]	; (8006674 <MX_UART4_Init+0xa8>)
 800665c:	f7ff fac7 	bl	8005bee <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 8006660:	210a      	movs	r1, #10
 8006662:	4805      	ldr	r0, [pc, #20]	; (8006678 <MX_UART4_Init+0xac>)
 8006664:	f000 f83c 	bl	80066e0 <uart_write_debug>

}
 8006668:	bf00      	nop
 800666a:	bd80      	pop	{r7, pc}
 800666c:	200004ec 	.word	0x200004ec
 8006670:	40004c00 	.word	0x40004c00
 8006674:	2000057c 	.word	0x2000057c
 8006678:	08013dc4 	.word	0x08013dc4

0800667c <error_Handler>:

void error_Handler(void){
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 8006680:	210a      	movs	r1, #10
 8006682:	4802      	ldr	r0, [pc, #8]	; (800668c <error_Handler+0x10>)
 8006684:	f000 f82c 	bl	80066e0 <uart_write_debug>
}
 8006688:	bf00      	nop
 800668a:	bd80      	pop	{r7, pc}
 800668c:	08013dd8 	.word	0x08013dd8

08006690 <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d00c      	beq.n	80066ba <uart_receive_it+0x2a>
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	dc0d      	bgt.n	80066c0 <uart_receive_it+0x30>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <uart_receive_it+0x1e>
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d003      	beq.n	80066b4 <uart_receive_it+0x24>
 80066ac:	e008      	b.n	80066c0 <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <uart_receive_it+0x44>)
 80066b0:	60fb      	str	r3, [r7, #12]
		break;
 80066b2:	e005      	b.n	80066c0 <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <uart_receive_it+0x48>)
 80066b6:	60fb      	str	r3, [r7, #12]
		break;
 80066b8:	e002      	b.n	80066c0 <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <uart_receive_it+0x44>)
 80066bc:	60fb      	str	r3, [r7, #12]
		break;
 80066be:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 80066c0:	2201      	movs	r2, #1
 80066c2:	4906      	ldr	r1, [pc, #24]	; (80066dc <uart_receive_it+0x4c>)
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f003 fcd7 	bl	800a078 <HAL_UART_Receive_IT>
 80066ca:	4603      	mov	r3, r0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	2000045c 	.word	0x2000045c
 80066d8:	200004ec 	.word	0x200004ec
 80066dc:	200005e4 	.word	0x200005e4

080066e0 <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7f9 fd88 	bl	8000200 <strlen>
 80066f0:	4603      	mov	r3, r0
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	4803      	ldr	r0, [pc, #12]	; (8006708 <uart_write_debug+0x28>)
 80066fa:	f003 fc25 	bl	8009f48 <HAL_UART_Transmit>
 80066fe:	4603      	mov	r3, r0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	2000045c 	.word	0x2000045c

0800670c <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	72fb      	strb	r3, [r7, #11]
 800671a:	4613      	mov	r3, r2
 800671c:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 800671e:	7abb      	ldrb	r3, [r7, #10]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d00c      	beq.n	800673e <uart_write+0x32>
 8006724:	2b02      	cmp	r3, #2
 8006726:	dc0d      	bgt.n	8006744 <uart_write+0x38>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <uart_write+0x26>
 800672c:	2b01      	cmp	r3, #1
 800672e:	d003      	beq.n	8006738 <uart_write+0x2c>
 8006730:	e008      	b.n	8006744 <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <uart_write+0x70>)
 8006734:	617b      	str	r3, [r7, #20]
		break;
 8006736:	e005      	b.n	8006744 <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <uart_write+0x74>)
 800673a:	617b      	str	r3, [r7, #20]
		break;
 800673c:	e002      	b.n	8006744 <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <uart_write+0x70>)
 8006740:	617b      	str	r3, [r7, #20]
		break;
 8006742:	bf00      	nop
	}
	if (len == 0){
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7f9 fd58 	bl	8000200 <strlen>
 8006750:	4603      	mov	r3, r0
 8006752:	b29a      	uxth	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6978      	ldr	r0, [r7, #20]
 800675a:	f003 fbf5 	bl	8009f48 <HAL_UART_Transmit>
 800675e:	4603      	mov	r3, r0
 8006760:	e007      	b.n	8006772 <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 8006762:	7afb      	ldrb	r3, [r7, #11]
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	6978      	ldr	r0, [r7, #20]
 800676c:	f003 fbec 	bl	8009f48 <HAL_UART_Transmit>
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	2000045c 	.word	0x2000045c
 8006780:	200004ec 	.word	0x200004ec

08006784 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a56      	ldr	r2, [pc, #344]	; (80068ec <HAL_UART_RxCpltCallback+0x168>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d155      	bne.n	8006842 <HAL_UART_RxCpltCallback+0xbe>
	{
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006796:	4b56      	ldr	r3, [pc, #344]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b03      	cmp	r3, #3
 800679c:	d122      	bne.n	80067e4 <HAL_UART_RxCpltCallback+0x60>
 800679e:	4b55      	ldr	r3, [pc, #340]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b1b      	cmp	r3, #27
 80067a4:	d01e      	beq.n	80067e4 <HAL_UART_RxCpltCallback+0x60>
			uint8_t start_ch = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73bb      	strb	r3, [r7, #14]
			start_ch = RB_pop(&uart4RXrb);
 80067aa:	4853      	ldr	r0, [pc, #332]	; (80068f8 <HAL_UART_RxCpltCallback+0x174>)
 80067ac:	f7ff fa6d 	bl	8005c8a <RB_pop>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73bb      	strb	r3, [r7, #14]
			if (start_ch == STX){
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d110      	bne.n	80067dc <HAL_UART_RxCpltCallback+0x58>
				uint8_t rb_len = RB_size(&uart4RXrb);
 80067ba:	484f      	ldr	r0, [pc, #316]	; (80068f8 <HAL_UART_RxCpltCallback+0x174>)
 80067bc:	f7ff fab4 	bl	8005d28 <RB_size>
 80067c0:	4603      	mov	r3, r0
 80067c2:	737b      	strb	r3, [r7, #13]
				RB_pushFront(&uart4RXrb, rb_len);
 80067c4:	7b7b      	ldrb	r3, [r7, #13]
 80067c6:	4619      	mov	r1, r3
 80067c8:	484b      	ldr	r0, [pc, #300]	; (80068f8 <HAL_UART_RxCpltCallback+0x174>)
 80067ca:	f7ff fa83 	bl	8005cd4 <RB_pushFront>
				osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 80067ce:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <HAL_UART_RxCpltCallback+0x178>)
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	2200      	movs	r2, #0
 80067d6:	4948      	ldr	r1, [pc, #288]	; (80068f8 <HAL_UART_RxCpltCallback+0x174>)
 80067d8:	f005 fea2 	bl	800c520 <osMessageQueuePut>
//				uart_write("Message received\r\n", 0, UART_NYX, 10);
			}
			RB_clear(&uart4RXrb);
 80067dc:	4846      	ldr	r0, [pc, #280]	; (80068f8 <HAL_UART_RxCpltCallback+0x174>)
 80067de:	f7ff fabf 	bl	8005d60 <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 80067e2:	e028      	b.n	8006836 <HAL_UART_RxCpltCallback+0xb2>
		}
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 80067e4:	4b42      	ldr	r3, [pc, #264]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b1b      	cmp	r3, #27
 80067ea:	d108      	bne.n	80067fe <HAL_UART_RxCpltCallback+0x7a>
 80067ec:	4b41      	ldr	r3, [pc, #260]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b1b      	cmp	r3, #27
 80067f2:	d004      	beq.n	80067fe <HAL_UART_RxCpltCallback+0x7a>
			 prvRxChar = rxChar;
 80067f4:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	4b3e      	ldr	r3, [pc, #248]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	e01b      	b.n	8006836 <HAL_UART_RxCpltCallback+0xb2>
		}
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 80067fe:	4b3c      	ldr	r3, [pc, #240]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b1b      	cmp	r3, #27
 8006804:	d10d      	bne.n	8006822 <HAL_UART_RxCpltCallback+0x9e>
 8006806:	4b3b      	ldr	r3, [pc, #236]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b1b      	cmp	r3, #27
 800680c:	d109      	bne.n	8006822 <HAL_UART_RxCpltCallback+0x9e>
			RB_push(&uart4RXrb, rxChar);
 800680e:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	4619      	mov	r1, r3
 8006814:	4838      	ldr	r0, [pc, #224]	; (80068f8 <HAL_UART_RxCpltCallback+0x174>)
 8006816:	f7ff fa0a 	bl	8005c2e <RB_push>
			prvRxChar = 0x00;
 800681a:	4b36      	ldr	r3, [pc, #216]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	e009      	b.n	8006836 <HAL_UART_RxCpltCallback+0xb2>
		}
		else {
		  RB_push(&uart4RXrb, rxChar);
 8006822:	4b33      	ldr	r3, [pc, #204]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	4619      	mov	r1, r3
 8006828:	4833      	ldr	r0, [pc, #204]	; (80068f8 <HAL_UART_RxCpltCallback+0x174>)
 800682a:	f7ff fa00 	bl	8005c2e <RB_push>
		  prvRxChar = rxChar;
 800682e:	4b30      	ldr	r3, [pc, #192]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 8006830:	781a      	ldrb	r2, [r3, #0]
 8006832:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 8006834:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 8006836:	2201      	movs	r2, #1
 8006838:	492d      	ldr	r1, [pc, #180]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 800683a:	4831      	ldr	r0, [pc, #196]	; (8006900 <HAL_UART_RxCpltCallback+0x17c>)
 800683c:	f003 fc1c 	bl	800a078 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 8006840:	e04f      	b.n	80068e2 <HAL_UART_RxCpltCallback+0x15e>
	else if (UartHandle->Instance == USART1){
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2f      	ldr	r2, [pc, #188]	; (8006904 <HAL_UART_RxCpltCallback+0x180>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d14a      	bne.n	80068e2 <HAL_UART_RxCpltCallback+0x15e>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 800684c:	4b28      	ldr	r3, [pc, #160]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b03      	cmp	r3, #3
 8006852:	d118      	bne.n	8006886 <HAL_UART_RxCpltCallback+0x102>
 8006854:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b1b      	cmp	r3, #27
 800685a:	d014      	beq.n	8006886 <HAL_UART_RxCpltCallback+0x102>
		uint8_t start_ch = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 8006860:	4829      	ldr	r0, [pc, #164]	; (8006908 <HAL_UART_RxCpltCallback+0x184>)
 8006862:	f7ff fa12 	bl	8005c8a <RB_pop>
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d106      	bne.n	800687e <HAL_UART_RxCpltCallback+0xfa>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 8006870:	4b22      	ldr	r3, [pc, #136]	; (80068fc <HAL_UART_RxCpltCallback+0x178>)
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	2300      	movs	r3, #0
 8006876:	2200      	movs	r2, #0
 8006878:	4923      	ldr	r1, [pc, #140]	; (8006908 <HAL_UART_RxCpltCallback+0x184>)
 800687a:	f005 fe51 	bl	800c520 <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 800687e:	4822      	ldr	r0, [pc, #136]	; (8006908 <HAL_UART_RxCpltCallback+0x184>)
 8006880:	f7ff fa6e 	bl	8005d60 <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006884:	e028      	b.n	80068d8 <HAL_UART_RxCpltCallback+0x154>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8006886:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b1b      	cmp	r3, #27
 800688c:	d108      	bne.n	80068a0 <HAL_UART_RxCpltCallback+0x11c>
 800688e:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b1b      	cmp	r3, #27
 8006894:	d004      	beq.n	80068a0 <HAL_UART_RxCpltCallback+0x11c>
			 prvRxChar = rxChar;
 8006896:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	e01b      	b.n	80068d8 <HAL_UART_RxCpltCallback+0x154>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b1b      	cmp	r3, #27
 80068a6:	d10d      	bne.n	80068c4 <HAL_UART_RxCpltCallback+0x140>
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b1b      	cmp	r3, #27
 80068ae:	d109      	bne.n	80068c4 <HAL_UART_RxCpltCallback+0x140>
			RB_push(&uart1RXrb, rxChar);
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	4619      	mov	r1, r3
 80068b6:	4814      	ldr	r0, [pc, #80]	; (8006908 <HAL_UART_RxCpltCallback+0x184>)
 80068b8:	f7ff f9b9 	bl	8005c2e <RB_push>
			prvRxChar = 0x00;
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e009      	b.n	80068d8 <HAL_UART_RxCpltCallback+0x154>
		  RB_push(&uart1RXrb, rxChar);
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	4619      	mov	r1, r3
 80068ca:	480f      	ldr	r0, [pc, #60]	; (8006908 <HAL_UART_RxCpltCallback+0x184>)
 80068cc:	f7ff f9af 	bl	8005c2e <RB_push>
		  prvRxChar = rxChar;
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 80068d2:	781a      	ldrb	r2, [r3, #0]
 80068d4:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <HAL_UART_RxCpltCallback+0x170>)
 80068d6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 80068d8:	2201      	movs	r2, #1
 80068da:	4905      	ldr	r1, [pc, #20]	; (80068f0 <HAL_UART_RxCpltCallback+0x16c>)
 80068dc:	480b      	ldr	r0, [pc, #44]	; (800690c <HAL_UART_RxCpltCallback+0x188>)
 80068de:	f003 fbcb 	bl	800a078 <HAL_UART_Receive_IT>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40004c00 	.word	0x40004c00
 80068f0:	200005e4 	.word	0x200005e4
 80068f4:	200005e5 	.word	0x200005e5
 80068f8:	2000057c 	.word	0x2000057c
 80068fc:	200003e4 	.word	0x200003e4
 8006900:	200004ec 	.word	0x200004ec
 8006904:	40013800 	.word	0x40013800
 8006908:	200005b0 	.word	0x200005b0
 800690c:	2000045c 	.word	0x2000045c

08006910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006914:	f7ff fdf6 	bl	8006504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006918:	480c      	ldr	r0, [pc, #48]	; (800694c <LoopForever+0x6>)
  ldr r1, =_edata
 800691a:	490d      	ldr	r1, [pc, #52]	; (8006950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800691c:	4a0d      	ldr	r2, [pc, #52]	; (8006954 <LoopForever+0xe>)
  movs r3, #0
 800691e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006920:	e002      	b.n	8006928 <LoopCopyDataInit>

08006922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006926:	3304      	adds	r3, #4

08006928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800692a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800692c:	d3f9      	bcc.n	8006922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006930:	4c0a      	ldr	r4, [pc, #40]	; (800695c <LoopForever+0x16>)
  movs r3, #0
 8006932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006934:	e001      	b.n	800693a <LoopFillZerobss>

08006936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006938:	3204      	adds	r2, #4

0800693a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800693a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800693c:	d3fb      	bcc.n	8006936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800693e:	f008 feab 	bl	800f698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006942:	f7fe f925 	bl	8004b90 <main>

08006946 <LoopForever>:

LoopForever:
    b LoopForever
 8006946:	e7fe      	b.n	8006946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006948:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800694c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006950:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8006954:	0801488c 	.word	0x0801488c
  ldr r2, =_sbss
 8006958:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800695c:	2000634c 	.word	0x2000634c

08006960 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006960:	e7fe      	b.n	8006960 <ADC1_IRQHandler>

08006962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800696c:	2003      	movs	r0, #3
 800696e:	f000 f902 	bl	8006b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006972:	200f      	movs	r0, #15
 8006974:	f7ff fc1c 	bl	80061b0 <HAL_InitTick>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	71fb      	strb	r3, [r7, #7]
 8006982:	e001      	b.n	8006988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006984:	f7ff fa00 	bl	8005d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006988:	79fb      	ldrb	r3, [r7, #7]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_IncTick+0x20>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <HAL_IncTick+0x24>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4413      	add	r3, r2
 80069a4:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <HAL_IncTick+0x24>)
 80069a6:	6013      	str	r3, [r2, #0]
}
 80069a8:	bf00      	nop
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000018 	.word	0x20000018
 80069b8:	200005e8 	.word	0x200005e8

080069bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return uwTick;
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <HAL_GetTick+0x14>)
 80069c2:	681b      	ldr	r3, [r3, #0]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	200005e8 	.word	0x200005e8

080069d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069dc:	f7ff ffee 	bl	80069bc <HAL_GetTick>
 80069e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d005      	beq.n	80069fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <HAL_Delay+0x44>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069fa:	bf00      	nop
 80069fc:	f7ff ffde 	bl	80069bc <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d8f7      	bhi.n	80069fc <HAL_Delay+0x28>
  {
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000018 	.word	0x20000018

08006a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <__NVIC_SetPriorityGrouping+0x44>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a4e:	4a04      	ldr	r2, [pc, #16]	; (8006a60 <__NVIC_SetPriorityGrouping+0x44>)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	60d3      	str	r3, [r2, #12]
}
 8006a54:	bf00      	nop
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	e000ed00 	.word	0xe000ed00

08006a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a68:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <__NVIC_GetPriorityGrouping+0x18>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	0a1b      	lsrs	r3, r3, #8
 8006a6e:	f003 0307 	and.w	r3, r3, #7
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	e000ed00 	.word	0xe000ed00

08006a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	db0b      	blt.n	8006aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	f003 021f 	and.w	r2, r3, #31
 8006a98:	4907      	ldr	r1, [pc, #28]	; (8006ab8 <__NVIC_EnableIRQ+0x38>)
 8006a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8006aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	e000e100 	.word	0xe000e100

08006abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	6039      	str	r1, [r7, #0]
 8006ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	db0a      	blt.n	8006ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	490c      	ldr	r1, [pc, #48]	; (8006b08 <__NVIC_SetPriority+0x4c>)
 8006ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ada:	0112      	lsls	r2, r2, #4
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	440b      	add	r3, r1
 8006ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ae4:	e00a      	b.n	8006afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4908      	ldr	r1, [pc, #32]	; (8006b0c <__NVIC_SetPriority+0x50>)
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	3b04      	subs	r3, #4
 8006af4:	0112      	lsls	r2, r2, #4
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	440b      	add	r3, r1
 8006afa:	761a      	strb	r2, [r3, #24]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	e000e100 	.word	0xe000e100
 8006b0c:	e000ed00 	.word	0xe000ed00

08006b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b089      	sub	sp, #36	; 0x24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f1c3 0307 	rsb	r3, r3, #7
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	bf28      	it	cs
 8006b2e:	2304      	movcs	r3, #4
 8006b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3304      	adds	r3, #4
 8006b36:	2b06      	cmp	r3, #6
 8006b38:	d902      	bls.n	8006b40 <NVIC_EncodePriority+0x30>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3b03      	subs	r3, #3
 8006b3e:	e000      	b.n	8006b42 <NVIC_EncodePriority+0x32>
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4e:	43da      	mvns	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	401a      	ands	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b58:	f04f 31ff 	mov.w	r1, #4294967295
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	43d9      	mvns	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b68:	4313      	orrs	r3, r2
         );
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3724      	adds	r7, #36	; 0x24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff ff4c 	bl	8006a1c <__NVIC_SetPriorityGrouping>
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b9e:	f7ff ff61 	bl	8006a64 <__NVIC_GetPriorityGrouping>
 8006ba2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	6978      	ldr	r0, [r7, #20]
 8006baa:	f7ff ffb1 	bl	8006b10 <NVIC_EncodePriority>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ff80 	bl	8006abc <__NVIC_SetPriority>
}
 8006bbc:	bf00      	nop
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff ff54 	bl	8006a80 <__NVIC_EnableIRQ>
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d008      	beq.n	8006c0a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e040      	b.n	8006c8c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 020e 	bic.w	r2, r2, #14
 8006c18:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3e:	f003 021c 	and.w	r2, r3, #28
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	2101      	movs	r1, #1
 8006c48:	fa01 f202 	lsl.w	r2, r1, r2
 8006c4c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c56:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00c      	beq.n	8006c7a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006c78:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d005      	beq.n	8006cbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	73fb      	strb	r3, [r7, #15]
 8006cba:	e047      	b.n	8006d4c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 020e 	bic.w	r2, r2, #14
 8006cca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf0:	f003 021c 	and.w	r2, r3, #28
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8006cfe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00c      	beq.n	8006d2c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d2a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
    }
  }
  return status;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d66:	e166      	b.n	8007036 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	fa01 f303 	lsl.w	r3, r1, r3
 8006d74:	4013      	ands	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8158 	beq.w	8007030 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d005      	beq.n	8006d98 <HAL_GPIO_Init+0x40>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d130      	bne.n	8006dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	2203      	movs	r2, #3
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4013      	ands	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dce:	2201      	movs	r2, #1
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	091b      	lsrs	r3, r3, #4
 8006de4:	f003 0201 	and.w	r2, r3, #1
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	fa02 f303 	lsl.w	r3, r2, r3
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d017      	beq.n	8006e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	2203      	movs	r2, #3
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43db      	mvns	r3, r3
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d123      	bne.n	8006e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	08da      	lsrs	r2, r3, #3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3208      	adds	r2, #8
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	220f      	movs	r2, #15
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	43db      	mvns	r3, r3
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4013      	ands	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	08da      	lsrs	r2, r3, #3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3208      	adds	r2, #8
 8006e84:	6939      	ldr	r1, [r7, #16]
 8006e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	2203      	movs	r2, #3
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 0203 	and.w	r2, r3, #3
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80b2 	beq.w	8007030 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ecc:	4b61      	ldr	r3, [pc, #388]	; (8007054 <HAL_GPIO_Init+0x2fc>)
 8006ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed0:	4a60      	ldr	r2, [pc, #384]	; (8007054 <HAL_GPIO_Init+0x2fc>)
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8006ed8:	4b5e      	ldr	r3, [pc, #376]	; (8007054 <HAL_GPIO_Init+0x2fc>)
 8006eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	60bb      	str	r3, [r7, #8]
 8006ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006ee4:	4a5c      	ldr	r2, [pc, #368]	; (8007058 <HAL_GPIO_Init+0x300>)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	089b      	lsrs	r3, r3, #2
 8006eea:	3302      	adds	r3, #2
 8006eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	220f      	movs	r2, #15
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	43db      	mvns	r3, r3
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4013      	ands	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f0e:	d02b      	beq.n	8006f68 <HAL_GPIO_Init+0x210>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a52      	ldr	r2, [pc, #328]	; (800705c <HAL_GPIO_Init+0x304>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d025      	beq.n	8006f64 <HAL_GPIO_Init+0x20c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a51      	ldr	r2, [pc, #324]	; (8007060 <HAL_GPIO_Init+0x308>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d01f      	beq.n	8006f60 <HAL_GPIO_Init+0x208>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a50      	ldr	r2, [pc, #320]	; (8007064 <HAL_GPIO_Init+0x30c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d019      	beq.n	8006f5c <HAL_GPIO_Init+0x204>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a4f      	ldr	r2, [pc, #316]	; (8007068 <HAL_GPIO_Init+0x310>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_GPIO_Init+0x200>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a4e      	ldr	r2, [pc, #312]	; (800706c <HAL_GPIO_Init+0x314>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00d      	beq.n	8006f54 <HAL_GPIO_Init+0x1fc>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a4d      	ldr	r2, [pc, #308]	; (8007070 <HAL_GPIO_Init+0x318>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d007      	beq.n	8006f50 <HAL_GPIO_Init+0x1f8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a4c      	ldr	r2, [pc, #304]	; (8007074 <HAL_GPIO_Init+0x31c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d101      	bne.n	8006f4c <HAL_GPIO_Init+0x1f4>
 8006f48:	2307      	movs	r3, #7
 8006f4a:	e00e      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f4c:	2308      	movs	r3, #8
 8006f4e:	e00c      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f50:	2306      	movs	r3, #6
 8006f52:	e00a      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f54:	2305      	movs	r3, #5
 8006f56:	e008      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	e006      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e004      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e002      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <HAL_GPIO_Init+0x212>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	f002 0203 	and.w	r2, r2, #3
 8006f70:	0092      	lsls	r2, r2, #2
 8006f72:	4093      	lsls	r3, r2
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006f7a:	4937      	ldr	r1, [pc, #220]	; (8007058 <HAL_GPIO_Init+0x300>)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	089b      	lsrs	r3, r3, #2
 8006f80:	3302      	adds	r3, #2
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f88:	4b3b      	ldr	r3, [pc, #236]	; (8007078 <HAL_GPIO_Init+0x320>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4013      	ands	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006fac:	4a32      	ldr	r2, [pc, #200]	; (8007078 <HAL_GPIO_Init+0x320>)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006fb2:	4b31      	ldr	r3, [pc, #196]	; (8007078 <HAL_GPIO_Init+0x320>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fd6:	4a28      	ldr	r2, [pc, #160]	; (8007078 <HAL_GPIO_Init+0x320>)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006fdc:	4b26      	ldr	r3, [pc, #152]	; (8007078 <HAL_GPIO_Init+0x320>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007000:	4a1d      	ldr	r2, [pc, #116]	; (8007078 <HAL_GPIO_Init+0x320>)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007006:	4b1c      	ldr	r3, [pc, #112]	; (8007078 <HAL_GPIO_Init+0x320>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	43db      	mvns	r3, r3
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4013      	ands	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_GPIO_Init+0x320>)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	3301      	adds	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	f47f ae91 	bne.w	8006d68 <HAL_GPIO_Init+0x10>
  }
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40021000 	.word	0x40021000
 8007058:	40010000 	.word	0x40010000
 800705c:	48000400 	.word	0x48000400
 8007060:	48000800 	.word	0x48000800
 8007064:	48000c00 	.word	0x48000c00
 8007068:	48001000 	.word	0x48001000
 800706c:	48001400 	.word	0x48001400
 8007070:	48001800 	.word	0x48001800
 8007074:	48001c00 	.word	0x48001c00
 8007078:	40010400 	.word	0x40010400

0800707c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	807b      	strh	r3, [r7, #2]
 8007088:	4613      	mov	r3, r2
 800708a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800708c:	787b      	ldrb	r3, [r7, #1]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007092:	887a      	ldrh	r2, [r7, #2]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007098:	e002      	b.n	80070a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800709a:	887a      	ldrh	r2, [r7, #2]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070be:	887a      	ldrh	r2, [r7, #2]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4013      	ands	r3, r2
 80070c4:	041a      	lsls	r2, r3, #16
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	43d9      	mvns	r1, r3
 80070ca:	887b      	ldrh	r3, [r7, #2]
 80070cc:	400b      	ands	r3, r1
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	619a      	str	r2, [r3, #24]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d006      	beq.n	8007104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070f6:	4a05      	ldr	r2, [pc, #20]	; (800710c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f806 	bl	8007110 <HAL_GPIO_EXTI_Callback>
  }
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40010400 	.word	0x40010400

08007110 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e081      	b.n	800723c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fe fe43 	bl	8005dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2224      	movs	r2, #36	; 0x24
 8007156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0201 	bic.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007176:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007186:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d107      	bne.n	80071a0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	e006      	b.n	80071ae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d104      	bne.n	80071c0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69d9      	ldr	r1, [r3, #28]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1a      	ldr	r2, [r3, #32]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	461a      	mov	r2, r3
 8007250:	460b      	mov	r3, r1
 8007252:	817b      	strh	r3, [r7, #10]
 8007254:	4613      	mov	r3, r2
 8007256:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b20      	cmp	r3, #32
 8007262:	f040 80da 	bne.w	800741a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_I2C_Master_Transmit+0x30>
 8007270:	2302      	movs	r3, #2
 8007272:	e0d3      	b.n	800741c <HAL_I2C_Master_Transmit+0x1d8>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800727c:	f7ff fb9e 	bl	80069bc <HAL_GetTick>
 8007280:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2319      	movs	r3, #25
 8007288:	2201      	movs	r2, #1
 800728a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fbe0 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e0be      	b.n	800741c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2221      	movs	r2, #33	; 0x21
 80072a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2210      	movs	r2, #16
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	893a      	ldrh	r2, [r7, #8]
 80072be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2bff      	cmp	r3, #255	; 0xff
 80072ce:	d90e      	bls.n	80072ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	22ff      	movs	r2, #255	; 0xff
 80072d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	8979      	ldrh	r1, [r7, #10]
 80072de:	4b51      	ldr	r3, [pc, #324]	; (8007424 <HAL_I2C_Master_Transmit+0x1e0>)
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fd5c 	bl	8007da4 <I2C_TransferConfig>
 80072ec:	e06c      	b.n	80073c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	8979      	ldrh	r1, [r7, #10]
 8007300:	4b48      	ldr	r3, [pc, #288]	; (8007424 <HAL_I2C_Master_Transmit+0x1e0>)
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 fd4b 	bl	8007da4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800730e:	e05b      	b.n	80073c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	6a39      	ldr	r1, [r7, #32]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fbdd 	bl	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e07b      	b.n	800741c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d034      	beq.n	80073c8 <HAL_I2C_Master_Transmit+0x184>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d130      	bne.n	80073c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	2200      	movs	r2, #0
 800736e:	2180      	movs	r1, #128	; 0x80
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fb6f 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e04d      	b.n	800741c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d90e      	bls.n	80073a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007394:	b2da      	uxtb	r2, r3
 8007396:	8979      	ldrh	r1, [r7, #10]
 8007398:	2300      	movs	r3, #0
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 fcff 	bl	8007da4 <I2C_TransferConfig>
 80073a6:	e00f      	b.n	80073c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	8979      	ldrh	r1, [r7, #10]
 80073ba:	2300      	movs	r3, #0
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fcee 	bl	8007da4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d19e      	bne.n	8007310 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	6a39      	ldr	r1, [r7, #32]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fbbc 	bl	8007b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e01a      	b.n	800741c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2220      	movs	r2, #32
 80073ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6859      	ldr	r1, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <HAL_I2C_Master_Transmit+0x1e4>)
 80073fa:	400b      	ands	r3, r1
 80073fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	e000      	b.n	800741c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800741a:	2302      	movs	r3, #2
  }
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	80002000 	.word	0x80002000
 8007428:	fe00e800 	.word	0xfe00e800

0800742c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	4608      	mov	r0, r1
 8007436:	4611      	mov	r1, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4603      	mov	r3, r0
 800743c:	817b      	strh	r3, [r7, #10]
 800743e:	460b      	mov	r3, r1
 8007440:	813b      	strh	r3, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b20      	cmp	r3, #32
 8007450:	f040 80f9 	bne.w	8007646 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_I2C_Mem_Write+0x34>
 800745a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d105      	bne.n	800746c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007466:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0ed      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_I2C_Mem_Write+0x4e>
 8007476:	2302      	movs	r3, #2
 8007478:	e0e6      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007482:	f7ff fa9b 	bl	80069bc <HAL_GetTick>
 8007486:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	2319      	movs	r3, #25
 800748e:	2201      	movs	r2, #1
 8007490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fadd 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0d1      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2221      	movs	r2, #33	; 0x21
 80074a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2240      	movs	r2, #64	; 0x40
 80074b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a3a      	ldr	r2, [r7, #32]
 80074be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074cc:	88f8      	ldrh	r0, [r7, #6]
 80074ce:	893a      	ldrh	r2, [r7, #8]
 80074d0:	8979      	ldrh	r1, [r7, #10]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	4603      	mov	r3, r0
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f9ed 	bl	80078bc <I2C_RequestMemoryWrite>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0a9      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2bff      	cmp	r3, #255	; 0xff
 80074fc:	d90e      	bls.n	800751c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	22ff      	movs	r2, #255	; 0xff
 8007502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007508:	b2da      	uxtb	r2, r3
 800750a:	8979      	ldrh	r1, [r7, #10]
 800750c:	2300      	movs	r3, #0
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fc45 	bl	8007da4 <I2C_TransferConfig>
 800751a:	e00f      	b.n	800753c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752a:	b2da      	uxtb	r2, r3
 800752c:	8979      	ldrh	r1, [r7, #10]
 800752e:	2300      	movs	r3, #0
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fc34 	bl	8007da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fac7 	bl	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e07b      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	781a      	ldrb	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d034      	beq.n	80075f4 <HAL_I2C_Mem_Write+0x1c8>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758e:	2b00      	cmp	r3, #0
 8007590:	d130      	bne.n	80075f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	2200      	movs	r2, #0
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fa59 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e04d      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2bff      	cmp	r3, #255	; 0xff
 80075b4:	d90e      	bls.n	80075d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	22ff      	movs	r2, #255	; 0xff
 80075ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	8979      	ldrh	r1, [r7, #10]
 80075c4:	2300      	movs	r3, #0
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fbe9 	bl	8007da4 <I2C_TransferConfig>
 80075d2:	e00f      	b.n	80075f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	8979      	ldrh	r1, [r7, #10]
 80075e6:	2300      	movs	r3, #0
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fbd8 	bl	8007da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d19e      	bne.n	800753c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 faa6 	bl	8007b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e01a      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2220      	movs	r2, #32
 8007618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6859      	ldr	r1, [r3, #4]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <HAL_I2C_Mem_Write+0x224>)
 8007626:	400b      	ands	r3, r1
 8007628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e000      	b.n	8007648 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007646:	2302      	movs	r3, #2
  }
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	fe00e800 	.word	0xfe00e800

08007654 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	461a      	mov	r2, r3
 8007662:	4603      	mov	r3, r0
 8007664:	817b      	strh	r3, [r7, #10]
 8007666:	460b      	mov	r3, r1
 8007668:	813b      	strh	r3, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b20      	cmp	r3, #32
 8007678:	f040 80fd 	bne.w	8007876 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_I2C_Mem_Read+0x34>
 8007682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d105      	bne.n	8007694 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800768e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e0f1      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_I2C_Mem_Read+0x4e>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0ea      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076aa:	f7ff f987 	bl	80069bc <HAL_GetTick>
 80076ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	2319      	movs	r3, #25
 80076b6:	2201      	movs	r2, #1
 80076b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f9c9 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0d5      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2222      	movs	r2, #34	; 0x22
 80076d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2240      	movs	r2, #64	; 0x40
 80076d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a3a      	ldr	r2, [r7, #32]
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076f4:	88f8      	ldrh	r0, [r7, #6]
 80076f6:	893a      	ldrh	r2, [r7, #8]
 80076f8:	8979      	ldrh	r1, [r7, #10]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	4603      	mov	r3, r0
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f92d 	bl	8007964 <I2C_RequestMemoryRead>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e0ad      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007720:	b29b      	uxth	r3, r3
 8007722:	2bff      	cmp	r3, #255	; 0xff
 8007724:	d90e      	bls.n	8007744 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007730:	b2da      	uxtb	r2, r3
 8007732:	8979      	ldrh	r1, [r7, #10]
 8007734:	4b52      	ldr	r3, [pc, #328]	; (8007880 <HAL_I2C_Mem_Read+0x22c>)
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fb31 	bl	8007da4 <I2C_TransferConfig>
 8007742:	e00f      	b.n	8007764 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007752:	b2da      	uxtb	r2, r3
 8007754:	8979      	ldrh	r1, [r7, #10]
 8007756:	4b4a      	ldr	r3, [pc, #296]	; (8007880 <HAL_I2C_Mem_Read+0x22c>)
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fb20 	bl	8007da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	2200      	movs	r2, #0
 800776c:	2104      	movs	r1, #4
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f970 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e07c      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d034      	beq.n	8007824 <HAL_I2C_Mem_Read+0x1d0>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d130      	bne.n	8007824 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	2200      	movs	r2, #0
 80077ca:	2180      	movs	r1, #128	; 0x80
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f941 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e04d      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	d90e      	bls.n	8007804 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	22ff      	movs	r2, #255	; 0xff
 80077ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	8979      	ldrh	r1, [r7, #10]
 80077f4:	2300      	movs	r3, #0
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fad1 	bl	8007da4 <I2C_TransferConfig>
 8007802:	e00f      	b.n	8007824 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007812:	b2da      	uxtb	r2, r3
 8007814:	8979      	ldrh	r1, [r7, #10]
 8007816:	2300      	movs	r3, #0
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fac0 	bl	8007da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d19a      	bne.n	8007764 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f98e 	bl	8007b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e01a      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2220      	movs	r2, #32
 8007848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6859      	ldr	r1, [r3, #4]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <HAL_I2C_Mem_Read+0x230>)
 8007856:	400b      	ands	r3, r1
 8007858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	80002400 	.word	0x80002400
 8007884:	fe00e800 	.word	0xfe00e800

08007888 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
  }
}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	4608      	mov	r0, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	817b      	strh	r3, [r7, #10]
 80078ce:	460b      	mov	r3, r1
 80078d0:	813b      	strh	r3, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	8979      	ldrh	r1, [r7, #10]
 80078dc:	4b20      	ldr	r3, [pc, #128]	; (8007960 <I2C_RequestMemoryWrite+0xa4>)
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 fa5d 	bl	8007da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	69b9      	ldr	r1, [r7, #24]
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f8f0 	bl	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e02c      	b.n	8007958 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d105      	bne.n	8007910 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007904:	893b      	ldrh	r3, [r7, #8]
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	629a      	str	r2, [r3, #40]	; 0x28
 800790e:	e015      	b.n	800793c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007910:	893b      	ldrh	r3, [r7, #8]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	b29b      	uxth	r3, r3
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	69b9      	ldr	r1, [r7, #24]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f8d6 	bl	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e012      	b.n	8007958 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007932:	893b      	ldrh	r3, [r7, #8]
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	2200      	movs	r2, #0
 8007944:	2180      	movs	r1, #128	; 0x80
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f884 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e000      	b.n	8007958 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	80002000 	.word	0x80002000

08007964 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af02      	add	r7, sp, #8
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	4608      	mov	r0, r1
 800796e:	4611      	mov	r1, r2
 8007970:	461a      	mov	r2, r3
 8007972:	4603      	mov	r3, r0
 8007974:	817b      	strh	r3, [r7, #10]
 8007976:	460b      	mov	r3, r1
 8007978:	813b      	strh	r3, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	8979      	ldrh	r1, [r7, #10]
 8007984:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <I2C_RequestMemoryRead+0xa4>)
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	2300      	movs	r3, #0
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fa0a 	bl	8007da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	69b9      	ldr	r1, [r7, #24]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f89d 	bl	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e02c      	b.n	80079fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d105      	bne.n	80079b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	629a      	str	r2, [r3, #40]	; 0x28
 80079b4:	e015      	b.n	80079e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079b6:	893b      	ldrh	r3, [r7, #8]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	69b9      	ldr	r1, [r7, #24]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f883 	bl	8007ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e012      	b.n	80079fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079d8:	893b      	ldrh	r3, [r7, #8]
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2200      	movs	r2, #0
 80079ea:	2140      	movs	r1, #64	; 0x40
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 f831 	bl	8007a54 <I2C_WaitOnFlagUntilTimeout>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	80002000 	.word	0x80002000

08007a0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d103      	bne.n	8007a2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2200      	movs	r2, #0
 8007a28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d007      	beq.n	8007a48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0201 	orr.w	r2, r2, #1
 8007a46:	619a      	str	r2, [r3, #24]
  }
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a64:	e022      	b.n	8007aac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d01e      	beq.n	8007aac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6e:	f7fe ffa5 	bl	80069bc <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d113      	bne.n	8007aac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a88:	f043 0220 	orr.w	r2, r3, #32
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e00f      	b.n	8007acc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699a      	ldr	r2, [r3, #24]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d0cd      	beq.n	8007a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ae0:	e02c      	b.n	8007b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f870 	bl	8007bcc <I2C_IsErrorOccurred>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e02a      	b.n	8007b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d01e      	beq.n	8007b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afe:	f7fe ff5d 	bl	80069bc <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d302      	bcc.n	8007b14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d113      	bne.n	8007b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b18:	f043 0220 	orr.w	r2, r3, #32
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e007      	b.n	8007b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d1cb      	bne.n	8007ae2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b60:	e028      	b.n	8007bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	68b9      	ldr	r1, [r7, #8]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f830 	bl	8007bcc <I2C_IsErrorOccurred>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e026      	b.n	8007bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b76:	f7fe ff21 	bl	80069bc <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d302      	bcc.n	8007b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d113      	bne.n	8007bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b90:	f043 0220 	orr.w	r2, r3, #32
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e007      	b.n	8007bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d1cf      	bne.n	8007b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d075      	beq.n	8007ce4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2210      	movs	r2, #16
 8007bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c00:	e056      	b.n	8007cb0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d052      	beq.n	8007cb0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c0a:	f7fe fed7 	bl	80069bc <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d302      	bcc.n	8007c20 <I2C_IsErrorOccurred+0x54>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d147      	bne.n	8007cb0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c42:	d12e      	bne.n	8007ca2 <I2C_IsErrorOccurred+0xd6>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c4a:	d02a      	beq.n	8007ca2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007c4c:	7cfb      	ldrb	r3, [r7, #19]
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d027      	beq.n	8007ca2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007c62:	f7fe feab 	bl	80069bc <HAL_GetTick>
 8007c66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c68:	e01b      	b.n	8007ca2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007c6a:	f7fe fea7 	bl	80069bc <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b19      	cmp	r3, #25
 8007c76:	d914      	bls.n	8007ca2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7c:	f043 0220 	orr.w	r2, r3, #32
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d1dc      	bne.n	8007c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d003      	beq.n	8007cc6 <I2C_IsErrorOccurred+0xfa>
 8007cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d09d      	beq.n	8007c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	f043 0304 	orr.w	r3, r3, #4
 8007cdc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00b      	beq.n	8007d0e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f043 0301 	orr.w	r3, r3, #1
 8007cfc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	f043 0308 	orr.w	r3, r3, #8
 8007d1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f043 0302 	orr.w	r3, r3, #2
 8007d40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01c      	beq.n	8007d94 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f7ff fe56 	bl	8007a0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6859      	ldr	r1, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <I2C_IsErrorOccurred+0x1d4>)
 8007d6c:	400b      	ands	r3, r1
 8007d6e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3728      	adds	r7, #40	; 0x28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	fe00e800 	.word	0xfe00e800

08007da4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	607b      	str	r3, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	817b      	strh	r3, [r7, #10]
 8007db2:	4613      	mov	r3, r2
 8007db4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007db6:	897b      	ldrh	r3, [r7, #10]
 8007db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007dbc:	7a7b      	ldrb	r3, [r7, #9]
 8007dbe:	041b      	lsls	r3, r3, #16
 8007dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	0d5b      	lsrs	r3, r3, #21
 8007dde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007de2:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <I2C_TransferConfig+0x60>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	43db      	mvns	r3, r3
 8007de8:	ea02 0103 	and.w	r1, r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	03ff63ff 	.word	0x03ff63ff

08007e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d138      	bne.n	8007e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e032      	b.n	8007e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2224      	movs	r2, #36	; 0x24
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0201 	bic.w	r2, r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6819      	ldr	r1, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e000      	b.n	8007e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e90:	2302      	movs	r3, #2
  }
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b20      	cmp	r3, #32
 8007eb2:	d139      	bne.n	8007f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e033      	b.n	8007f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2224      	movs	r2, #36	; 0x24
 8007ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0201 	bic.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	021b      	lsls	r3, r3, #8
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0201 	orr.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e000      	b.n	8007f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
	...

08007f38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f48:	d102      	bne.n	8007f50 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f4e:	e00b      	b.n	8007f68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007f50:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f5e:	d102      	bne.n	8007f66 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f64:	e000      	b.n	8007f68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007f66:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40007000 	.word	0x40007000

08007f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d141      	bne.n	800800a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f86:	4b4b      	ldr	r3, [pc, #300]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f92:	d131      	bne.n	8007ff8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f94:	4b47      	ldr	r3, [pc, #284]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f9a:	4a46      	ldr	r2, [pc, #280]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fa4:	4b43      	ldr	r3, [pc, #268]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007fac:	4a41      	ldr	r2, [pc, #260]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007fb4:	4b40      	ldr	r3, [pc, #256]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2232      	movs	r2, #50	; 0x32
 8007fba:	fb02 f303 	mul.w	r3, r2, r3
 8007fbe:	4a3f      	ldr	r2, [pc, #252]	; (80080bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc4:	0c9b      	lsrs	r3, r3, #18
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fca:	e002      	b.n	8007fd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fd2:	4b38      	ldr	r3, [pc, #224]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fde:	d102      	bne.n	8007fe6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1f2      	bne.n	8007fcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007fe6:	4b33      	ldr	r3, [pc, #204]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff2:	d158      	bne.n	80080a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e057      	b.n	80080a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ff8:	4b2e      	ldr	r3, [pc, #184]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ffe:	4a2d      	ldr	r2, [pc, #180]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008008:	e04d      	b.n	80080a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008010:	d141      	bne.n	8008096 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008012:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801e:	d131      	bne.n	8008084 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008020:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008026:	4a23      	ldr	r2, [pc, #140]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008030:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008038:	4a1e      	ldr	r2, [pc, #120]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800803a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800803e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008040:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2232      	movs	r2, #50	; 0x32
 8008046:	fb02 f303 	mul.w	r3, r2, r3
 800804a:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800804c:	fba2 2303 	umull	r2, r3, r2, r3
 8008050:	0c9b      	lsrs	r3, r3, #18
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008056:	e002      	b.n	800805e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3b01      	subs	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800805e:	4b15      	ldr	r3, [pc, #84]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806a:	d102      	bne.n	8008072 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f2      	bne.n	8008058 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008072:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800807a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807e:	d112      	bne.n	80080a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e011      	b.n	80080a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808a:	4a0a      	ldr	r2, [pc, #40]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800808c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008094:	e007      	b.n	80080a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800809e:	4a05      	ldr	r2, [pc, #20]	; (80080b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	40007000 	.word	0x40007000
 80080b8:	20000010 	.word	0x20000010
 80080bc:	431bde83 	.word	0x431bde83

080080c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d102      	bne.n	80080d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f000 bc08 	b.w	80088e4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080d4:	4b96      	ldr	r3, [pc, #600]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 030c 	and.w	r3, r3, #12
 80080dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080de:	4b94      	ldr	r3, [pc, #592]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0303 	and.w	r3, r3, #3
 80080e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0310 	and.w	r3, r3, #16
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 80e4 	beq.w	80082be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <HAL_RCC_OscConfig+0x4c>
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b0c      	cmp	r3, #12
 8008100:	f040 808b 	bne.w	800821a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b01      	cmp	r3, #1
 8008108:	f040 8087 	bne.w	800821a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800810c:	4b88      	ldr	r3, [pc, #544]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_RCC_OscConfig+0x64>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e3df      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	4b81      	ldr	r3, [pc, #516]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <HAL_RCC_OscConfig+0x7e>
 8008134:	4b7e      	ldr	r3, [pc, #504]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800813c:	e005      	b.n	800814a <HAL_RCC_OscConfig+0x8a>
 800813e:	4b7c      	ldr	r3, [pc, #496]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008144:	091b      	lsrs	r3, r3, #4
 8008146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800814a:	4293      	cmp	r3, r2
 800814c:	d223      	bcs.n	8008196 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fdfe 	bl	8008d54 <RCC_SetFlashLatencyFromMSIRange>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e3c0      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008162:	4b73      	ldr	r3, [pc, #460]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a72      	ldr	r2, [pc, #456]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008168:	f043 0308 	orr.w	r3, r3, #8
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	4b70      	ldr	r3, [pc, #448]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	496d      	ldr	r1, [pc, #436]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800817c:	4313      	orrs	r3, r2
 800817e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008180:	4b6b      	ldr	r3, [pc, #428]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	4968      	ldr	r1, [pc, #416]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008190:	4313      	orrs	r3, r2
 8008192:	604b      	str	r3, [r1, #4]
 8008194:	e025      	b.n	80081e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008196:	4b66      	ldr	r3, [pc, #408]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a65      	ldr	r2, [pc, #404]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800819c:	f043 0308 	orr.w	r3, r3, #8
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	4b63      	ldr	r3, [pc, #396]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	4960      	ldr	r1, [pc, #384]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081b4:	4b5e      	ldr	r3, [pc, #376]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	495b      	ldr	r1, [pc, #364]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fdbe 	bl	8008d54 <RCC_SetFlashLatencyFromMSIRange>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e380      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081e2:	f000 fcc1 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 80081e6:	4602      	mov	r2, r0
 80081e8:	4b51      	ldr	r3, [pc, #324]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	091b      	lsrs	r3, r3, #4
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	4950      	ldr	r1, [pc, #320]	; (8008334 <HAL_RCC_OscConfig+0x274>)
 80081f4:	5ccb      	ldrb	r3, [r1, r3]
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	fa22 f303 	lsr.w	r3, r2, r3
 80081fe:	4a4e      	ldr	r2, [pc, #312]	; (8008338 <HAL_RCC_OscConfig+0x278>)
 8008200:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008202:	4b4e      	ldr	r3, [pc, #312]	; (800833c <HAL_RCC_OscConfig+0x27c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4618      	mov	r0, r3
 8008208:	f7fd ffd2 	bl	80061b0 <HAL_InitTick>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d052      	beq.n	80082bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	e364      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d032      	beq.n	8008288 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008222:	4b43      	ldr	r3, [pc, #268]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a42      	ldr	r2, [pc, #264]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800822e:	f7fe fbc5 	bl	80069bc <HAL_GetTick>
 8008232:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008234:	e008      	b.n	8008248 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008236:	f7fe fbc1 	bl	80069bc <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d901      	bls.n	8008248 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e34d      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008248:	4b39      	ldr	r3, [pc, #228]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0f0      	beq.n	8008236 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008254:	4b36      	ldr	r3, [pc, #216]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a35      	ldr	r2, [pc, #212]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800825a:	f043 0308 	orr.w	r3, r3, #8
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	4b33      	ldr	r3, [pc, #204]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	4930      	ldr	r1, [pc, #192]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800826e:	4313      	orrs	r3, r2
 8008270:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008272:	4b2f      	ldr	r3, [pc, #188]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	492b      	ldr	r1, [pc, #172]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008282:	4313      	orrs	r3, r2
 8008284:	604b      	str	r3, [r1, #4]
 8008286:	e01a      	b.n	80082be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008288:	4b29      	ldr	r3, [pc, #164]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a28      	ldr	r2, [pc, #160]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800828e:	f023 0301 	bic.w	r3, r3, #1
 8008292:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008294:	f7fe fb92 	bl	80069bc <HAL_GetTick>
 8008298:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800829a:	e008      	b.n	80082ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800829c:	f7fe fb8e 	bl	80069bc <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e31a      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082ae:	4b20      	ldr	r3, [pc, #128]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f0      	bne.n	800829c <HAL_RCC_OscConfig+0x1dc>
 80082ba:	e000      	b.n	80082be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d073      	beq.n	80083b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d005      	beq.n	80082dc <HAL_RCC_OscConfig+0x21c>
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b0c      	cmp	r3, #12
 80082d4:	d10e      	bne.n	80082f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d10b      	bne.n	80082f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082dc:	4b14      	ldr	r3, [pc, #80]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d063      	beq.n	80083b0 <HAL_RCC_OscConfig+0x2f0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d15f      	bne.n	80083b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e2f7      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fc:	d106      	bne.n	800830c <HAL_RCC_OscConfig+0x24c>
 80082fe:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a0b      	ldr	r2, [pc, #44]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	e025      	b.n	8008358 <HAL_RCC_OscConfig+0x298>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008314:	d114      	bne.n	8008340 <HAL_RCC_OscConfig+0x280>
 8008316:	4b06      	ldr	r3, [pc, #24]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a05      	ldr	r2, [pc, #20]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 800831c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	4b03      	ldr	r3, [pc, #12]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a02      	ldr	r2, [pc, #8]	; (8008330 <HAL_RCC_OscConfig+0x270>)
 8008328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	e013      	b.n	8008358 <HAL_RCC_OscConfig+0x298>
 8008330:	40021000 	.word	0x40021000
 8008334:	08014014 	.word	0x08014014
 8008338:	20000010 	.word	0x20000010
 800833c:	20000014 	.word	0x20000014
 8008340:	4ba0      	ldr	r3, [pc, #640]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a9f      	ldr	r2, [pc, #636]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	4b9d      	ldr	r3, [pc, #628]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a9c      	ldr	r2, [pc, #624]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d013      	beq.n	8008388 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008360:	f7fe fb2c 	bl	80069bc <HAL_GetTick>
 8008364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008368:	f7fe fb28 	bl	80069bc <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b64      	cmp	r3, #100	; 0x64
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e2b4      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837a:	4b92      	ldr	r3, [pc, #584]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f0      	beq.n	8008368 <HAL_RCC_OscConfig+0x2a8>
 8008386:	e014      	b.n	80083b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008388:	f7fe fb18 	bl	80069bc <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008390:	f7fe fb14 	bl	80069bc <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b64      	cmp	r3, #100	; 0x64
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e2a0      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083a2:	4b88      	ldr	r3, [pc, #544]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1f0      	bne.n	8008390 <HAL_RCC_OscConfig+0x2d0>
 80083ae:	e000      	b.n	80083b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d060      	beq.n	8008480 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d005      	beq.n	80083d0 <HAL_RCC_OscConfig+0x310>
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	2b0c      	cmp	r3, #12
 80083c8:	d119      	bne.n	80083fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d116      	bne.n	80083fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d0:	4b7c      	ldr	r3, [pc, #496]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <HAL_RCC_OscConfig+0x328>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e27d      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083e8:	4b76      	ldr	r3, [pc, #472]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	061b      	lsls	r3, r3, #24
 80083f6:	4973      	ldr	r1, [pc, #460]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083fc:	e040      	b.n	8008480 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d023      	beq.n	800844e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008406:	4b6f      	ldr	r3, [pc, #444]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a6e      	ldr	r2, [pc, #440]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800840c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008412:	f7fe fad3 	bl	80069bc <HAL_GetTick>
 8008416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008418:	e008      	b.n	800842c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800841a:	f7fe facf 	bl	80069bc <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b02      	cmp	r3, #2
 8008426:	d901      	bls.n	800842c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e25b      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800842c:	4b65      	ldr	r3, [pc, #404]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008434:	2b00      	cmp	r3, #0
 8008436:	d0f0      	beq.n	800841a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008438:	4b62      	ldr	r3, [pc, #392]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	061b      	lsls	r3, r3, #24
 8008446:	495f      	ldr	r1, [pc, #380]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008448:	4313      	orrs	r3, r2
 800844a:	604b      	str	r3, [r1, #4]
 800844c:	e018      	b.n	8008480 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800844e:	4b5d      	ldr	r3, [pc, #372]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a5c      	ldr	r2, [pc, #368]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845a:	f7fe faaf 	bl	80069bc <HAL_GetTick>
 800845e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008460:	e008      	b.n	8008474 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008462:	f7fe faab 	bl	80069bc <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	2b02      	cmp	r3, #2
 800846e:	d901      	bls.n	8008474 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e237      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008474:	4b53      	ldr	r3, [pc, #332]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1f0      	bne.n	8008462 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d03c      	beq.n	8008506 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01c      	beq.n	80084ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008494:	4b4b      	ldr	r3, [pc, #300]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800849a:	4a4a      	ldr	r2, [pc, #296]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a4:	f7fe fa8a 	bl	80069bc <HAL_GetTick>
 80084a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ac:	f7fe fa86 	bl	80069bc <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e212      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084be:	4b41      	ldr	r3, [pc, #260]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80084c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0ef      	beq.n	80084ac <HAL_RCC_OscConfig+0x3ec>
 80084cc:	e01b      	b.n	8008506 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084ce:	4b3d      	ldr	r3, [pc, #244]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80084d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d4:	4a3b      	ldr	r2, [pc, #236]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084de:	f7fe fa6d 	bl	80069bc <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e6:	f7fe fa69 	bl	80069bc <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e1f5      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084f8:	4b32      	ldr	r3, [pc, #200]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80084fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1ef      	bne.n	80084e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80a6 	beq.w	8008660 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008514:	2300      	movs	r3, #0
 8008516:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008518:	4b2a      	ldr	r3, [pc, #168]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800851a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10d      	bne.n	8008540 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008524:	4b27      	ldr	r3, [pc, #156]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008528:	4a26      	ldr	r2, [pc, #152]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800852a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800852e:	6593      	str	r3, [r2, #88]	; 0x58
 8008530:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800853c:	2301      	movs	r3, #1
 800853e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008540:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <HAL_RCC_OscConfig+0x508>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008548:	2b00      	cmp	r3, #0
 800854a:	d118      	bne.n	800857e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800854c:	4b1e      	ldr	r3, [pc, #120]	; (80085c8 <HAL_RCC_OscConfig+0x508>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1d      	ldr	r2, [pc, #116]	; (80085c8 <HAL_RCC_OscConfig+0x508>)
 8008552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008556:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008558:	f7fe fa30 	bl	80069bc <HAL_GetTick>
 800855c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008560:	f7fe fa2c 	bl	80069bc <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e1b8      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <HAL_RCC_OscConfig+0x508>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d108      	bne.n	8008598 <HAL_RCC_OscConfig+0x4d8>
 8008586:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 8008588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800858c:	4a0d      	ldr	r2, [pc, #52]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008596:	e029      	b.n	80085ec <HAL_RCC_OscConfig+0x52c>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	2b05      	cmp	r3, #5
 800859e:	d115      	bne.n	80085cc <HAL_RCC_OscConfig+0x50c>
 80085a0:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a6:	4a07      	ldr	r2, [pc, #28]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80085a8:	f043 0304 	orr.w	r3, r3, #4
 80085ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80085b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b6:	4a03      	ldr	r2, [pc, #12]	; (80085c4 <HAL_RCC_OscConfig+0x504>)
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085c0:	e014      	b.n	80085ec <HAL_RCC_OscConfig+0x52c>
 80085c2:	bf00      	nop
 80085c4:	40021000 	.word	0x40021000
 80085c8:	40007000 	.word	0x40007000
 80085cc:	4b9d      	ldr	r3, [pc, #628]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80085ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d2:	4a9c      	ldr	r2, [pc, #624]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085dc:	4b99      	ldr	r3, [pc, #612]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e2:	4a98      	ldr	r2, [pc, #608]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80085e4:	f023 0304 	bic.w	r3, r3, #4
 80085e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d016      	beq.n	8008622 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f4:	f7fe f9e2 	bl	80069bc <HAL_GetTick>
 80085f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085fa:	e00a      	b.n	8008612 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085fc:	f7fe f9de 	bl	80069bc <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	f241 3288 	movw	r2, #5000	; 0x1388
 800860a:	4293      	cmp	r3, r2
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e168      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008612:	4b8c      	ldr	r3, [pc, #560]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0ed      	beq.n	80085fc <HAL_RCC_OscConfig+0x53c>
 8008620:	e015      	b.n	800864e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008622:	f7fe f9cb 	bl	80069bc <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008628:	e00a      	b.n	8008640 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862a:	f7fe f9c7 	bl	80069bc <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	f241 3288 	movw	r2, #5000	; 0x1388
 8008638:	4293      	cmp	r3, r2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e151      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008640:	4b80      	ldr	r3, [pc, #512]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1ed      	bne.n	800862a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800864e:	7ffb      	ldrb	r3, [r7, #31]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d105      	bne.n	8008660 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008654:	4b7b      	ldr	r3, [pc, #492]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008658:	4a7a      	ldr	r2, [pc, #488]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 800865a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800865e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d03c      	beq.n	80086e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d01c      	beq.n	80086ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008674:	4b73      	ldr	r3, [pc, #460]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800867a:	4a72      	ldr	r2, [pc, #456]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 800867c:	f043 0301 	orr.w	r3, r3, #1
 8008680:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008684:	f7fe f99a 	bl	80069bc <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800868c:	f7fe f996 	bl	80069bc <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e122      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800869e:	4b69      	ldr	r3, [pc, #420]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80086a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0ef      	beq.n	800868c <HAL_RCC_OscConfig+0x5cc>
 80086ac:	e01b      	b.n	80086e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086ae:	4b65      	ldr	r3, [pc, #404]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80086b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086b4:	4a63      	ldr	r2, [pc, #396]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80086b6:	f023 0301 	bic.w	r3, r3, #1
 80086ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086be:	f7fe f97d 	bl	80069bc <HAL_GetTick>
 80086c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086c4:	e008      	b.n	80086d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086c6:	f7fe f979 	bl	80069bc <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e105      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086d8:	4b5a      	ldr	r3, [pc, #360]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80086da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1ef      	bne.n	80086c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80f9 	beq.w	80088e2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	f040 80cf 	bne.w	8008898 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80086fa:	4b52      	ldr	r3, [pc, #328]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f003 0203 	and.w	r2, r3, #3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	429a      	cmp	r2, r3
 800870c:	d12c      	bne.n	8008768 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	3b01      	subs	r3, #1
 800871a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800871c:	429a      	cmp	r2, r3
 800871e:	d123      	bne.n	8008768 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800872c:	429a      	cmp	r2, r3
 800872e:	d11b      	bne.n	8008768 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800873c:	429a      	cmp	r2, r3
 800873e:	d113      	bne.n	8008768 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	3b01      	subs	r3, #1
 800874e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008750:	429a      	cmp	r2, r3
 8008752:	d109      	bne.n	8008768 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	085b      	lsrs	r3, r3, #1
 8008760:	3b01      	subs	r3, #1
 8008762:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008764:	429a      	cmp	r2, r3
 8008766:	d071      	beq.n	800884c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2b0c      	cmp	r3, #12
 800876c:	d068      	beq.n	8008840 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800876e:	4b35      	ldr	r3, [pc, #212]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800877a:	4b32      	ldr	r3, [pc, #200]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e0ac      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800878a:	4b2e      	ldr	r3, [pc, #184]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a2d      	ldr	r2, [pc, #180]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008794:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008796:	f7fe f911 	bl	80069bc <HAL_GetTick>
 800879a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800879e:	f7fe f90d 	bl	80069bc <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e099      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087b0:	4b24      	ldr	r3, [pc, #144]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f0      	bne.n	800879e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087bc:	4b21      	ldr	r3, [pc, #132]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	4b21      	ldr	r3, [pc, #132]	; (8008848 <HAL_RCC_OscConfig+0x788>)
 80087c2:	4013      	ands	r3, r2
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087cc:	3a01      	subs	r2, #1
 80087ce:	0112      	lsls	r2, r2, #4
 80087d0:	4311      	orrs	r1, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087d6:	0212      	lsls	r2, r2, #8
 80087d8:	4311      	orrs	r1, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80087de:	0852      	lsrs	r2, r2, #1
 80087e0:	3a01      	subs	r2, #1
 80087e2:	0552      	lsls	r2, r2, #21
 80087e4:	4311      	orrs	r1, r2
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80087ea:	0852      	lsrs	r2, r2, #1
 80087ec:	3a01      	subs	r2, #1
 80087ee:	0652      	lsls	r2, r2, #25
 80087f0:	4311      	orrs	r1, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087f6:	06d2      	lsls	r2, r2, #27
 80087f8:	430a      	orrs	r2, r1
 80087fa:	4912      	ldr	r1, [pc, #72]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008800:	4b10      	ldr	r3, [pc, #64]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a0f      	ldr	r2, [pc, #60]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800880a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	4a0c      	ldr	r2, [pc, #48]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008818:	f7fe f8d0 	bl	80069bc <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008820:	f7fe f8cc 	bl	80069bc <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e058      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <HAL_RCC_OscConfig+0x784>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f0      	beq.n	8008820 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800883e:	e050      	b.n	80088e2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e04f      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
 8008844:	40021000 	.word	0x40021000
 8008848:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800884c:	4b27      	ldr	r3, [pc, #156]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d144      	bne.n	80088e2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008858:	4b24      	ldr	r3, [pc, #144]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a23      	ldr	r2, [pc, #140]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 800885e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008862:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008864:	4b21      	ldr	r3, [pc, #132]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4a20      	ldr	r2, [pc, #128]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 800886a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800886e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008870:	f7fe f8a4 	bl	80069bc <HAL_GetTick>
 8008874:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008878:	f7fe f8a0 	bl	80069bc <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e02c      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800888a:	4b18      	ldr	r3, [pc, #96]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0f0      	beq.n	8008878 <HAL_RCC_OscConfig+0x7b8>
 8008896:	e024      	b.n	80088e2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2b0c      	cmp	r3, #12
 800889c:	d01f      	beq.n	80088de <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a12      	ldr	r2, [pc, #72]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 80088a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088aa:	f7fe f887 	bl	80069bc <HAL_GetTick>
 80088ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b2:	f7fe f883 	bl	80069bc <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e00f      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088c4:	4b09      	ldr	r3, [pc, #36]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1f0      	bne.n	80088b2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80088d0:	4b06      	ldr	r3, [pc, #24]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	4905      	ldr	r1, [pc, #20]	; (80088ec <HAL_RCC_OscConfig+0x82c>)
 80088d6:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <HAL_RCC_OscConfig+0x830>)
 80088d8:	4013      	ands	r3, r2
 80088da:	60cb      	str	r3, [r1, #12]
 80088dc:	e001      	b.n	80088e2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3720      	adds	r7, #32
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	40021000 	.word	0x40021000
 80088f0:	feeefffc 	.word	0xfeeefffc

080088f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e11d      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800890c:	4b90      	ldr	r3, [pc, #576]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d910      	bls.n	800893c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800891a:	4b8d      	ldr	r3, [pc, #564]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f023 020f 	bic.w	r2, r3, #15
 8008922:	498b      	ldr	r1, [pc, #556]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	4313      	orrs	r3, r2
 8008928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800892a:	4b89      	ldr	r3, [pc, #548]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 030f 	and.w	r3, r3, #15
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d001      	beq.n	800893c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e105      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d010      	beq.n	800896a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	4b81      	ldr	r3, [pc, #516]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008954:	429a      	cmp	r2, r3
 8008956:	d908      	bls.n	800896a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008958:	4b7e      	ldr	r3, [pc, #504]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	497b      	ldr	r1, [pc, #492]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008966:	4313      	orrs	r3, r2
 8008968:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d079      	beq.n	8008a6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b03      	cmp	r3, #3
 800897c:	d11e      	bne.n	80089bc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800897e:	4b75      	ldr	r3, [pc, #468]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e0dc      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800898e:	f000 fa3b 	bl	8008e08 <RCC_GetSysClockFreqFromPLLSource>
 8008992:	4603      	mov	r3, r0
 8008994:	4a70      	ldr	r2, [pc, #448]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d946      	bls.n	8008a28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800899a:	4b6e      	ldr	r3, [pc, #440]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d140      	bne.n	8008a28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089a6:	4b6b      	ldr	r3, [pc, #428]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ae:	4a69      	ldr	r2, [pc, #420]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 80089b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80089b6:	2380      	movs	r3, #128	; 0x80
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	e035      	b.n	8008a28 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d107      	bne.n	80089d4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089c4:	4b63      	ldr	r3, [pc, #396]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d115      	bne.n	80089fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e0b9      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d107      	bne.n	80089ec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089dc:	4b5d      	ldr	r3, [pc, #372]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0ad      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089ec:	4b59      	ldr	r3, [pc, #356]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0a5      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80089fc:	f000 f8b4 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4a55      	ldr	r2, [pc, #340]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d90f      	bls.n	8008a28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008a08:	4b52      	ldr	r3, [pc, #328]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d109      	bne.n	8008a28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a14:	4b4f      	ldr	r3, [pc, #316]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a1c:	4a4d      	ldr	r2, [pc, #308]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a22:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008a24:	2380      	movs	r3, #128	; 0x80
 8008a26:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a28:	4b4a      	ldr	r3, [pc, #296]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f023 0203 	bic.w	r2, r3, #3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4947      	ldr	r1, [pc, #284]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a3a:	f7fd ffbf 	bl	80069bc <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a40:	e00a      	b.n	8008a58 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a42:	f7fd ffbb 	bl	80069bc <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e077      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a58:	4b3e      	ldr	r3, [pc, #248]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 020c 	and.w	r2, r3, #12
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d1eb      	bne.n	8008a42 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b80      	cmp	r3, #128	; 0x80
 8008a6e:	d105      	bne.n	8008a7c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a70:	4b38      	ldr	r3, [pc, #224]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4a37      	ldr	r2, [pc, #220]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a7a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d010      	beq.n	8008aaa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	4b31      	ldr	r3, [pc, #196]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d208      	bcs.n	8008aaa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a98:	4b2e      	ldr	r3, [pc, #184]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	492b      	ldr	r1, [pc, #172]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008aaa:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d210      	bcs.n	8008ada <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ab8:	4b25      	ldr	r3, [pc, #148]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f023 020f 	bic.w	r2, r3, #15
 8008ac0:	4923      	ldr	r1, [pc, #140]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac8:	4b21      	ldr	r3, [pc, #132]	; (8008b50 <HAL_RCC_ClockConfig+0x25c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 030f 	and.w	r3, r3, #15
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d001      	beq.n	8008ada <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e036      	b.n	8008b48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0304 	and.w	r3, r3, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d008      	beq.n	8008af8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ae6:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	4918      	ldr	r1, [pc, #96]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b04:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	4910      	ldr	r1, [pc, #64]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b18:	f000 f826 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	4b0d      	ldr	r3, [pc, #52]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	091b      	lsrs	r3, r3, #4
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	490c      	ldr	r1, [pc, #48]	; (8008b5c <HAL_RCC_ClockConfig+0x268>)
 8008b2a:	5ccb      	ldrb	r3, [r1, r3]
 8008b2c:	f003 031f 	and.w	r3, r3, #31
 8008b30:	fa22 f303 	lsr.w	r3, r2, r3
 8008b34:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <HAL_RCC_ClockConfig+0x26c>)
 8008b36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <HAL_RCC_ClockConfig+0x270>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd fb37 	bl	80061b0 <HAL_InitTick>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]

  return status;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	40022000 	.word	0x40022000
 8008b54:	40021000 	.word	0x40021000
 8008b58:	04c4b400 	.word	0x04c4b400
 8008b5c:	08014014 	.word	0x08014014
 8008b60:	20000010 	.word	0x20000010
 8008b64:	20000014 	.word	0x20000014

08008b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b089      	sub	sp, #36	; 0x24
 8008b6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61fb      	str	r3, [r7, #28]
 8008b72:	2300      	movs	r3, #0
 8008b74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b76:	4b3e      	ldr	r3, [pc, #248]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f003 030c 	and.w	r3, r3, #12
 8008b7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b80:	4b3b      	ldr	r3, [pc, #236]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f003 0303 	and.w	r3, r3, #3
 8008b88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0x34>
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b0c      	cmp	r3, #12
 8008b94:	d121      	bne.n	8008bda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d11e      	bne.n	8008bda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008b9c:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ba8:	4b31      	ldr	r3, [pc, #196]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	61fb      	str	r3, [r7, #28]
 8008bb6:	e005      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008bb8:	4b2d      	ldr	r3, [pc, #180]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008bc4:	4a2b      	ldr	r2, [pc, #172]	; (8008c74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10d      	bne.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008bd8:	e00a      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d102      	bne.n	8008be6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008be0:	4b25      	ldr	r3, [pc, #148]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x110>)
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	e004      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d101      	bne.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008bec:	4b23      	ldr	r3, [pc, #140]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x114>)
 8008bee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b0c      	cmp	r3, #12
 8008bf4:	d134      	bne.n	8008c60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008bf6:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d003      	beq.n	8008c0e <HAL_RCC_GetSysClockFreq+0xa6>
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d003      	beq.n	8008c14 <HAL_RCC_GetSysClockFreq+0xac>
 8008c0c:	e005      	b.n	8008c1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008c0e:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c10:	617b      	str	r3, [r7, #20]
      break;
 8008c12:	e005      	b.n	8008c20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008c14:	4b19      	ldr	r3, [pc, #100]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x114>)
 8008c16:	617b      	str	r3, [r7, #20]
      break;
 8008c18:	e002      	b.n	8008c20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	617b      	str	r3, [r7, #20]
      break;
 8008c1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c20:	4b13      	ldr	r3, [pc, #76]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	091b      	lsrs	r3, r3, #4
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008c2e:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	fb03 f202 	mul.w	r2, r3, r2
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c46:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	0e5b      	lsrs	r3, r3, #25
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	3301      	adds	r3, #1
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008c60:	69bb      	ldr	r3, [r7, #24]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3724      	adds	r7, #36	; 0x24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	40021000 	.word	0x40021000
 8008c74:	0801402c 	.word	0x0801402c
 8008c78:	00f42400 	.word	0x00f42400
 8008c7c:	007a1200 	.word	0x007a1200

08008c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c84:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c86:	681b      	ldr	r3, [r3, #0]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000010 	.word	0x20000010

08008c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c9c:	f7ff fff0 	bl	8008c80 <HAL_RCC_GetHCLKFreq>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	0a1b      	lsrs	r3, r3, #8
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cae:	5ccb      	ldrb	r3, [r1, r3]
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40021000 	.word	0x40021000
 8008cc0:	08014024 	.word	0x08014024

08008cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008cc8:	f7ff ffda 	bl	8008c80 <HAL_RCC_GetHCLKFreq>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	0adb      	lsrs	r3, r3, #11
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	4904      	ldr	r1, [pc, #16]	; (8008cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cda:	5ccb      	ldrb	r3, [r1, r3]
 8008cdc:	f003 031f 	and.w	r3, r3, #31
 8008ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40021000 	.word	0x40021000
 8008cec:	08014024 	.word	0x08014024

08008cf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	220f      	movs	r2, #15
 8008cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008d00:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <HAL_RCC_GetClockConfig+0x5c>)
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f003 0203 	and.w	r2, r3, #3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008d0c:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <HAL_RCC_GetClockConfig+0x5c>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <HAL_RCC_GetClockConfig+0x5c>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <HAL_RCC_GetClockConfig+0x5c>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	08db      	lsrs	r3, r3, #3
 8008d2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <HAL_RCC_GetClockConfig+0x60>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 020f 	and.w	r2, r3, #15
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	601a      	str	r2, [r3, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	40022000 	.word	0x40022000

08008d54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008d60:	4b27      	ldr	r3, [pc, #156]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008d6c:	f7ff f8e4 	bl	8007f38 <HAL_PWREx_GetVoltageRange>
 8008d70:	6178      	str	r0, [r7, #20]
 8008d72:	e014      	b.n	8008d9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d74:	4b22      	ldr	r3, [pc, #136]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d78:	4a21      	ldr	r2, [pc, #132]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8008d80:	4b1f      	ldr	r3, [pc, #124]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d8c:	f7ff f8d4 	bl	8007f38 <HAL_PWREx_GetVoltageRange>
 8008d90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d92:	4b1b      	ldr	r3, [pc, #108]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	4a1a      	ldr	r2, [pc, #104]	; (8008e00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008da4:	d10b      	bne.n	8008dbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b80      	cmp	r3, #128	; 0x80
 8008daa:	d913      	bls.n	8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2ba0      	cmp	r3, #160	; 0xa0
 8008db0:	d902      	bls.n	8008db8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008db2:	2302      	movs	r3, #2
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	e00d      	b.n	8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008db8:	2301      	movs	r3, #1
 8008dba:	613b      	str	r3, [r7, #16]
 8008dbc:	e00a      	b.n	8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8008dc2:	d902      	bls.n	8008dca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	e004      	b.n	8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b70      	cmp	r3, #112	; 0x70
 8008dce:	d101      	bne.n	8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008dd4:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f023 020f 	bic.w	r2, r3, #15
 8008ddc:	4909      	ldr	r1, [pc, #36]	; (8008e04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008de4:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 030f 	and.w	r3, r3, #15
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d001      	beq.n	8008df6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40021000 	.word	0x40021000
 8008e04:	40022000 	.word	0x40022000

08008e08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e0e:	4b2d      	ldr	r3, [pc, #180]	; (8008ec4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d00b      	beq.n	8008e36 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d825      	bhi.n	8008e70 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d008      	beq.n	8008e3c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d11f      	bne.n	8008e70 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008e30:	4b25      	ldr	r3, [pc, #148]	; (8008ec8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008e32:	613b      	str	r3, [r7, #16]
    break;
 8008e34:	e01f      	b.n	8008e76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008e36:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008e38:	613b      	str	r3, [r7, #16]
    break;
 8008e3a:	e01c      	b.n	8008e76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e3c:	4b21      	ldr	r3, [pc, #132]	; (8008ec4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0308 	and.w	r3, r3, #8
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d107      	bne.n	8008e58 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008e48:	4b1e      	ldr	r3, [pc, #120]	; (8008ec4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e4e:	0a1b      	lsrs	r3, r3, #8
 8008e50:	f003 030f 	and.w	r3, r3, #15
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	e005      	b.n	8008e64 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e58:	4b1a      	ldr	r3, [pc, #104]	; (8008ec4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	091b      	lsrs	r3, r3, #4
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008e64:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e6c:	613b      	str	r3, [r7, #16]
    break;
 8008e6e:	e002      	b.n	8008e76 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	613b      	str	r3, [r7, #16]
    break;
 8008e74:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e76:	4b13      	ldr	r3, [pc, #76]	; (8008ec4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	091b      	lsrs	r3, r3, #4
 8008e7c:	f003 030f 	and.w	r3, r3, #15
 8008e80:	3301      	adds	r3, #1
 8008e82:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e84:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	fb03 f202 	mul.w	r2, r3, r2
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e9a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	0e5b      	lsrs	r3, r3, #25
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008eb6:	683b      	ldr	r3, [r7, #0]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	00f42400 	.word	0x00f42400
 8008ecc:	007a1200 	.word	0x007a1200
 8008ed0:	0801402c 	.word	0x0801402c

08008ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008edc:	2300      	movs	r3, #0
 8008ede:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d040      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef4:	2b80      	cmp	r3, #128	; 0x80
 8008ef6:	d02a      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ef8:	2b80      	cmp	r3, #128	; 0x80
 8008efa:	d825      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008efc:	2b60      	cmp	r3, #96	; 0x60
 8008efe:	d026      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f00:	2b60      	cmp	r3, #96	; 0x60
 8008f02:	d821      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	d006      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d81d      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	d010      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008f14:	e018      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008f16:	4b89      	ldr	r3, [pc, #548]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	4a88      	ldr	r2, [pc, #544]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f20:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f22:	e015      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3304      	adds	r3, #4
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 fb02 	bl	8009534 <RCCEx_PLLSAI1_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f34:	e00c      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3320      	adds	r3, #32
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fbed 	bl	800971c <RCCEx_PLLSAI2_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f46:	e003      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	74fb      	strb	r3, [r7, #19]
      break;
 8008f4c:	e000      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8008f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f50:	7cfb      	ldrb	r3, [r7, #19]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10b      	bne.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f56:	4b79      	ldr	r3, [pc, #484]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f64:	4975      	ldr	r1, [pc, #468]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008f6c:	e001      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f6e:	7cfb      	ldrb	r3, [r7, #19]
 8008f70:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d047      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f86:	d030      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8c:	d82a      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f92:	d02a      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f98:	d824      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f9e:	d008      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa4:	d81e      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fae:	d010      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008fb0:	e018      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008fb2:	4b62      	ldr	r3, [pc, #392]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	4a61      	ldr	r2, [pc, #388]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fbc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008fbe:	e015      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fab4 	bl	8009534 <RCCEx_PLLSAI1_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008fd0:	e00c      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3320      	adds	r3, #32
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fb9f 	bl	800971c <RCCEx_PLLSAI2_Config>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008fe2:	e003      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	74fb      	strb	r3, [r7, #19]
      break;
 8008fe8:	e000      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fec:	7cfb      	ldrb	r3, [r7, #19]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10b      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008ff2:	4b52      	ldr	r3, [pc, #328]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009000:	494e      	ldr	r1, [pc, #312]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009008:	e001      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900a:	7cfb      	ldrb	r3, [r7, #19]
 800900c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 809f 	beq.w	800915a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800901c:	2300      	movs	r3, #0
 800901e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009020:	4b46      	ldr	r3, [pc, #280]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009030:	2300      	movs	r3, #0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00d      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009036:	4b41      	ldr	r3, [pc, #260]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903a:	4a40      	ldr	r2, [pc, #256]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800903c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009040:	6593      	str	r3, [r2, #88]	; 0x58
 8009042:	4b3e      	ldr	r3, [pc, #248]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800904a:	60bb      	str	r3, [r7, #8]
 800904c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800904e:	2301      	movs	r3, #1
 8009050:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009052:	4b3b      	ldr	r3, [pc, #236]	; (8009140 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a3a      	ldr	r2, [pc, #232]	; (8009140 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800905c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800905e:	f7fd fcad 	bl	80069bc <HAL_GetTick>
 8009062:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009064:	e009      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009066:	f7fd fca9 	bl	80069bc <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d902      	bls.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	74fb      	strb	r3, [r7, #19]
        break;
 8009078:	e005      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800907a:	4b31      	ldr	r3, [pc, #196]	; (8009140 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0ef      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009086:	7cfb      	ldrb	r3, [r7, #19]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d15b      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800908c:	4b2b      	ldr	r3, [pc, #172]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800908e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009096:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01f      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d019      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090b6:	4b21      	ldr	r3, [pc, #132]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090bc:	4a1f      	ldr	r2, [pc, #124]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090c6:	4b1d      	ldr	r3, [pc, #116]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090cc:	4a1b      	ldr	r2, [pc, #108]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80090d6:	4a19      	ldr	r2, [pc, #100]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d016      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e8:	f7fd fc68 	bl	80069bc <HAL_GetTick>
 80090ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090ee:	e00b      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090f0:	f7fd fc64 	bl	80069bc <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fe:	4293      	cmp	r3, r2
 8009100:	d902      	bls.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	74fb      	strb	r3, [r7, #19]
            break;
 8009106:	e006      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800910a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0ec      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009116:	7cfb      	ldrb	r3, [r7, #19]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10c      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800911e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800912c:	4903      	ldr	r1, [pc, #12]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800912e:	4313      	orrs	r3, r2
 8009130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009134:	e008      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009136:	7cfb      	ldrb	r3, [r7, #19]
 8009138:	74bb      	strb	r3, [r7, #18]
 800913a:	e005      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800913c:	40021000 	.word	0x40021000
 8009140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009144:	7cfb      	ldrb	r3, [r7, #19]
 8009146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009148:	7c7b      	ldrb	r3, [r7, #17]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d105      	bne.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800914e:	4ba0      	ldr	r3, [pc, #640]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009152:	4a9f      	ldr	r2, [pc, #636]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009158:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009166:	4b9a      	ldr	r3, [pc, #616]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916c:	f023 0203 	bic.w	r2, r3, #3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009174:	4996      	ldr	r1, [pc, #600]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009176:	4313      	orrs	r3, r2
 8009178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00a      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009188:	4b91      	ldr	r3, [pc, #580]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800918a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918e:	f023 020c 	bic.w	r2, r3, #12
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	498e      	ldr	r1, [pc, #568]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009198:	4313      	orrs	r3, r2
 800919a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0304 	and.w	r3, r3, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00a      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80091aa:	4b89      	ldr	r3, [pc, #548]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b8:	4985      	ldr	r1, [pc, #532]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0308 	and.w	r3, r3, #8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00a      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80091cc:	4b80      	ldr	r3, [pc, #512]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091da:	497d      	ldr	r1, [pc, #500]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091dc:	4313      	orrs	r3, r2
 80091de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80091ee:	4b78      	ldr	r3, [pc, #480]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fc:	4974      	ldr	r1, [pc, #464]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00a      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009210:	4b6f      	ldr	r3, [pc, #444]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800921e:	496c      	ldr	r1, [pc, #432]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009220:	4313      	orrs	r3, r2
 8009222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009232:	4b67      	ldr	r3, [pc, #412]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009240:	4963      	ldr	r1, [pc, #396]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009242:	4313      	orrs	r3, r2
 8009244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009254:	4b5e      	ldr	r3, [pc, #376]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009262:	495b      	ldr	r1, [pc, #364]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009264:	4313      	orrs	r3, r2
 8009266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009276:	4b56      	ldr	r3, [pc, #344]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800927c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009284:	4952      	ldr	r1, [pc, #328]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009286:	4313      	orrs	r3, r2
 8009288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009298:	4b4d      	ldr	r3, [pc, #308]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800929a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a6:	494a      	ldr	r1, [pc, #296]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092ba:	4b45      	ldr	r3, [pc, #276]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c8:	4941      	ldr	r1, [pc, #260]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092dc:	4b3c      	ldr	r3, [pc, #240]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092e2:	f023 0203 	bic.w	r2, r3, #3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ea:	4939      	ldr	r1, [pc, #228]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d028      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092fe:	4b34      	ldr	r3, [pc, #208]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930c:	4930      	ldr	r1, [pc, #192]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800930e:	4313      	orrs	r3, r2
 8009310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800931c:	d106      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800931e:	4b2c      	ldr	r3, [pc, #176]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	4a2b      	ldr	r2, [pc, #172]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009328:	60d3      	str	r3, [r2, #12]
 800932a:	e011      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009334:	d10c      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3304      	adds	r3, #4
 800933a:	2101      	movs	r1, #1
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f8f9 	bl	8009534 <RCCEx_PLLSAI1_Config>
 8009342:	4603      	mov	r3, r0
 8009344:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009346:	7cfb      	ldrb	r3, [r7, #19]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800934c:	7cfb      	ldrb	r3, [r7, #19]
 800934e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d04d      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009364:	d108      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009366:	4b1a      	ldr	r3, [pc, #104]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800936e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009372:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009376:	e012      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009378:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800937a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800937e:	4a14      	ldr	r2, [pc, #80]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009384:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009388:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800938a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800938e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009396:	490e      	ldr	r1, [pc, #56]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009398:	4313      	orrs	r3, r2
 800939a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a6:	d106      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093a8:	4b09      	ldr	r3, [pc, #36]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	4a08      	ldr	r2, [pc, #32]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093b2:	60d3      	str	r3, [r2, #12]
 80093b4:	e020      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093be:	d109      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80093c0:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	4a02      	ldr	r2, [pc, #8]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ca:	60d3      	str	r3, [r2, #12]
 80093cc:	e014      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80093ce:	bf00      	nop
 80093d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093dc:	d10c      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3304      	adds	r3, #4
 80093e2:	2101      	movs	r1, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 f8a5 	bl	8009534 <RCCEx_PLLSAI1_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093ee:	7cfb      	ldrb	r3, [r7, #19]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80093f4:	7cfb      	ldrb	r3, [r7, #19]
 80093f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d028      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009404:	4b4a      	ldr	r3, [pc, #296]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009412:	4947      	ldr	r1, [pc, #284]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009414:	4313      	orrs	r3, r2
 8009416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800941e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009422:	d106      	bne.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009424:	4b42      	ldr	r3, [pc, #264]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	4a41      	ldr	r2, [pc, #260]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800942a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800942e:	60d3      	str	r3, [r2, #12]
 8009430:	e011      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800943a:	d10c      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	2101      	movs	r1, #1
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f876 	bl	8009534 <RCCEx_PLLSAI1_Config>
 8009448:	4603      	mov	r3, r0
 800944a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800944c:	7cfb      	ldrb	r3, [r7, #19]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8009452:	7cfb      	ldrb	r3, [r7, #19]
 8009454:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01e      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009462:	4b33      	ldr	r3, [pc, #204]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009468:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009472:	492f      	ldr	r1, [pc, #188]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009484:	d10c      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3304      	adds	r3, #4
 800948a:	2102      	movs	r1, #2
 800948c:	4618      	mov	r0, r3
 800948e:	f000 f851 	bl	8009534 <RCCEx_PLLSAI1_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009496:	7cfb      	ldrb	r3, [r7, #19]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800949c:	7cfb      	ldrb	r3, [r7, #19]
 800949e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094ac:	4b20      	ldr	r3, [pc, #128]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094b2:	f023 0204 	bic.w	r2, r3, #4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094bc:	491c      	ldr	r1, [pc, #112]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00b      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80094d0:	4b17      	ldr	r3, [pc, #92]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094d6:	f023 0218 	bic.w	r2, r3, #24
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e0:	4913      	ldr	r1, [pc, #76]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d017      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80094f4:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009504:	490a      	ldr	r1, [pc, #40]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009506:	4313      	orrs	r3, r2
 8009508:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009516:	d105      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009518:	4b05      	ldr	r3, [pc, #20]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	4a04      	ldr	r2, [pc, #16]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800951e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009522:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009524:	7cbb      	ldrb	r3, [r7, #18]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	40021000 	.word	0x40021000

08009534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009542:	4b72      	ldr	r3, [pc, #456]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00e      	beq.n	800956c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800954e:	4b6f      	ldr	r3, [pc, #444]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f003 0203 	and.w	r2, r3, #3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d103      	bne.n	8009566 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
       ||
 8009562:	2b00      	cmp	r3, #0
 8009564:	d142      	bne.n	80095ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
 800956a:	e03f      	b.n	80095ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b03      	cmp	r3, #3
 8009572:	d018      	beq.n	80095a6 <RCCEx_PLLSAI1_Config+0x72>
 8009574:	2b03      	cmp	r3, #3
 8009576:	d825      	bhi.n	80095c4 <RCCEx_PLLSAI1_Config+0x90>
 8009578:	2b01      	cmp	r3, #1
 800957a:	d002      	beq.n	8009582 <RCCEx_PLLSAI1_Config+0x4e>
 800957c:	2b02      	cmp	r3, #2
 800957e:	d009      	beq.n	8009594 <RCCEx_PLLSAI1_Config+0x60>
 8009580:	e020      	b.n	80095c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009582:	4b62      	ldr	r3, [pc, #392]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d11d      	bne.n	80095ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009592:	e01a      	b.n	80095ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009594:	4b5d      	ldr	r3, [pc, #372]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800959c:	2b00      	cmp	r3, #0
 800959e:	d116      	bne.n	80095ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095a4:	e013      	b.n	80095ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80095a6:	4b59      	ldr	r3, [pc, #356]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10f      	bne.n	80095d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80095b2:	4b56      	ldr	r3, [pc, #344]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d109      	bne.n	80095d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095c2:	e006      	b.n	80095d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]
      break;
 80095c8:	e004      	b.n	80095d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80095ca:	bf00      	nop
 80095cc:	e002      	b.n	80095d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80095ce:	bf00      	nop
 80095d0:	e000      	b.n	80095d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80095d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d108      	bne.n	80095ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80095da:	4b4c      	ldr	r3, [pc, #304]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f023 0203 	bic.w	r2, r3, #3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4949      	ldr	r1, [pc, #292]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 8086 	bne.w	8009700 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80095f4:	4b45      	ldr	r3, [pc, #276]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a44      	ldr	r2, [pc, #272]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80095fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009600:	f7fd f9dc 	bl	80069bc <HAL_GetTick>
 8009604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009606:	e009      	b.n	800961c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009608:	f7fd f9d8 	bl	80069bc <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	2b02      	cmp	r3, #2
 8009614:	d902      	bls.n	800961c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	73fb      	strb	r3, [r7, #15]
        break;
 800961a:	e005      	b.n	8009628 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800961c:	4b3b      	ldr	r3, [pc, #236]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1ef      	bne.n	8009608 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d168      	bne.n	8009700 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d113      	bne.n	800965c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009634:	4b35      	ldr	r3, [pc, #212]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009636:	691a      	ldr	r2, [r3, #16]
 8009638:	4b35      	ldr	r3, [pc, #212]	; (8009710 <RCCEx_PLLSAI1_Config+0x1dc>)
 800963a:	4013      	ands	r3, r2
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6892      	ldr	r2, [r2, #8]
 8009640:	0211      	lsls	r1, r2, #8
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	68d2      	ldr	r2, [r2, #12]
 8009646:	06d2      	lsls	r2, r2, #27
 8009648:	4311      	orrs	r1, r2
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6852      	ldr	r2, [r2, #4]
 800964e:	3a01      	subs	r2, #1
 8009650:	0112      	lsls	r2, r2, #4
 8009652:	430a      	orrs	r2, r1
 8009654:	492d      	ldr	r1, [pc, #180]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009656:	4313      	orrs	r3, r2
 8009658:	610b      	str	r3, [r1, #16]
 800965a:	e02d      	b.n	80096b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d115      	bne.n	800968e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009662:	4b2a      	ldr	r3, [pc, #168]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009664:	691a      	ldr	r2, [r3, #16]
 8009666:	4b2b      	ldr	r3, [pc, #172]	; (8009714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009668:	4013      	ands	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	6892      	ldr	r2, [r2, #8]
 800966e:	0211      	lsls	r1, r2, #8
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6912      	ldr	r2, [r2, #16]
 8009674:	0852      	lsrs	r2, r2, #1
 8009676:	3a01      	subs	r2, #1
 8009678:	0552      	lsls	r2, r2, #21
 800967a:	4311      	orrs	r1, r2
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	6852      	ldr	r2, [r2, #4]
 8009680:	3a01      	subs	r2, #1
 8009682:	0112      	lsls	r2, r2, #4
 8009684:	430a      	orrs	r2, r1
 8009686:	4921      	ldr	r1, [pc, #132]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009688:	4313      	orrs	r3, r2
 800968a:	610b      	str	r3, [r1, #16]
 800968c:	e014      	b.n	80096b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800968e:	4b1f      	ldr	r3, [pc, #124]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009690:	691a      	ldr	r2, [r3, #16]
 8009692:	4b21      	ldr	r3, [pc, #132]	; (8009718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009694:	4013      	ands	r3, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6892      	ldr	r2, [r2, #8]
 800969a:	0211      	lsls	r1, r2, #8
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6952      	ldr	r2, [r2, #20]
 80096a0:	0852      	lsrs	r2, r2, #1
 80096a2:	3a01      	subs	r2, #1
 80096a4:	0652      	lsls	r2, r2, #25
 80096a6:	4311      	orrs	r1, r2
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6852      	ldr	r2, [r2, #4]
 80096ac:	3a01      	subs	r2, #1
 80096ae:	0112      	lsls	r2, r2, #4
 80096b0:	430a      	orrs	r2, r1
 80096b2:	4916      	ldr	r1, [pc, #88]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80096b8:	4b14      	ldr	r3, [pc, #80]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a13      	ldr	r2, [pc, #76]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80096be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096c4:	f7fd f97a 	bl	80069bc <HAL_GetTick>
 80096c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80096ca:	e009      	b.n	80096e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80096cc:	f7fd f976 	bl	80069bc <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d902      	bls.n	80096e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	73fb      	strb	r3, [r7, #15]
          break;
 80096de:	e005      	b.n	80096ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80096e0:	4b0a      	ldr	r3, [pc, #40]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0ef      	beq.n	80096cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80096f2:	4b06      	ldr	r3, [pc, #24]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80096f4:	691a      	ldr	r2, [r3, #16]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	4904      	ldr	r1, [pc, #16]	; (800970c <RCCEx_PLLSAI1_Config+0x1d8>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40021000 	.word	0x40021000
 8009710:	07ff800f 	.word	0x07ff800f
 8009714:	ff9f800f 	.word	0xff9f800f
 8009718:	f9ff800f 	.word	0xf9ff800f

0800971c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800972a:	4b72      	ldr	r3, [pc, #456]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00e      	beq.n	8009754 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009736:	4b6f      	ldr	r3, [pc, #444]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f003 0203 	and.w	r2, r3, #3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d103      	bne.n	800974e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
       ||
 800974a:	2b00      	cmp	r3, #0
 800974c:	d142      	bne.n	80097d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
 8009752:	e03f      	b.n	80097d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d018      	beq.n	800978e <RCCEx_PLLSAI2_Config+0x72>
 800975c:	2b03      	cmp	r3, #3
 800975e:	d825      	bhi.n	80097ac <RCCEx_PLLSAI2_Config+0x90>
 8009760:	2b01      	cmp	r3, #1
 8009762:	d002      	beq.n	800976a <RCCEx_PLLSAI2_Config+0x4e>
 8009764:	2b02      	cmp	r3, #2
 8009766:	d009      	beq.n	800977c <RCCEx_PLLSAI2_Config+0x60>
 8009768:	e020      	b.n	80097ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800976a:	4b62      	ldr	r3, [pc, #392]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d11d      	bne.n	80097b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800977a:	e01a      	b.n	80097b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800977c:	4b5d      	ldr	r3, [pc, #372]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009784:	2b00      	cmp	r3, #0
 8009786:	d116      	bne.n	80097b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800978c:	e013      	b.n	80097b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800978e:	4b59      	ldr	r3, [pc, #356]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10f      	bne.n	80097ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800979a:	4b56      	ldr	r3, [pc, #344]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d109      	bne.n	80097ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097aa:	e006      	b.n	80097ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	73fb      	strb	r3, [r7, #15]
      break;
 80097b0:	e004      	b.n	80097bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80097b2:	bf00      	nop
 80097b4:	e002      	b.n	80097bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80097b6:	bf00      	nop
 80097b8:	e000      	b.n	80097bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80097ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d108      	bne.n	80097d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80097c2:	4b4c      	ldr	r3, [pc, #304]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f023 0203 	bic.w	r2, r3, #3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4949      	ldr	r1, [pc, #292]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f040 8086 	bne.w	80098e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80097dc:	4b45      	ldr	r3, [pc, #276]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a44      	ldr	r2, [pc, #272]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097e8:	f7fd f8e8 	bl	80069bc <HAL_GetTick>
 80097ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80097ee:	e009      	b.n	8009804 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80097f0:	f7fd f8e4 	bl	80069bc <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d902      	bls.n	8009804 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	73fb      	strb	r3, [r7, #15]
        break;
 8009802:	e005      	b.n	8009810 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009804:	4b3b      	ldr	r3, [pc, #236]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1ef      	bne.n	80097f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d168      	bne.n	80098e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d113      	bne.n	8009844 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800981c:	4b35      	ldr	r3, [pc, #212]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800981e:	695a      	ldr	r2, [r3, #20]
 8009820:	4b35      	ldr	r3, [pc, #212]	; (80098f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8009822:	4013      	ands	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6892      	ldr	r2, [r2, #8]
 8009828:	0211      	lsls	r1, r2, #8
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	68d2      	ldr	r2, [r2, #12]
 800982e:	06d2      	lsls	r2, r2, #27
 8009830:	4311      	orrs	r1, r2
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6852      	ldr	r2, [r2, #4]
 8009836:	3a01      	subs	r2, #1
 8009838:	0112      	lsls	r2, r2, #4
 800983a:	430a      	orrs	r2, r1
 800983c:	492d      	ldr	r1, [pc, #180]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800983e:	4313      	orrs	r3, r2
 8009840:	614b      	str	r3, [r1, #20]
 8009842:	e02d      	b.n	80098a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d115      	bne.n	8009876 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800984a:	4b2a      	ldr	r3, [pc, #168]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	4b2b      	ldr	r3, [pc, #172]	; (80098fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8009850:	4013      	ands	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6892      	ldr	r2, [r2, #8]
 8009856:	0211      	lsls	r1, r2, #8
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6912      	ldr	r2, [r2, #16]
 800985c:	0852      	lsrs	r2, r2, #1
 800985e:	3a01      	subs	r2, #1
 8009860:	0552      	lsls	r2, r2, #21
 8009862:	4311      	orrs	r1, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6852      	ldr	r2, [r2, #4]
 8009868:	3a01      	subs	r2, #1
 800986a:	0112      	lsls	r2, r2, #4
 800986c:	430a      	orrs	r2, r1
 800986e:	4921      	ldr	r1, [pc, #132]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009870:	4313      	orrs	r3, r2
 8009872:	614b      	str	r3, [r1, #20]
 8009874:	e014      	b.n	80098a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009876:	4b1f      	ldr	r3, [pc, #124]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009878:	695a      	ldr	r2, [r3, #20]
 800987a:	4b21      	ldr	r3, [pc, #132]	; (8009900 <RCCEx_PLLSAI2_Config+0x1e4>)
 800987c:	4013      	ands	r3, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6892      	ldr	r2, [r2, #8]
 8009882:	0211      	lsls	r1, r2, #8
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6952      	ldr	r2, [r2, #20]
 8009888:	0852      	lsrs	r2, r2, #1
 800988a:	3a01      	subs	r2, #1
 800988c:	0652      	lsls	r2, r2, #25
 800988e:	4311      	orrs	r1, r2
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6852      	ldr	r2, [r2, #4]
 8009894:	3a01      	subs	r2, #1
 8009896:	0112      	lsls	r2, r2, #4
 8009898:	430a      	orrs	r2, r1
 800989a:	4916      	ldr	r1, [pc, #88]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800989c:	4313      	orrs	r3, r2
 800989e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80098a0:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a13      	ldr	r2, [pc, #76]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098ac:	f7fd f886 	bl	80069bc <HAL_GetTick>
 80098b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80098b2:	e009      	b.n	80098c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80098b4:	f7fd f882 	bl	80069bc <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d902      	bls.n	80098c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	73fb      	strb	r3, [r7, #15]
          break;
 80098c6:	e005      	b.n	80098d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0ef      	beq.n	80098b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80098da:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098dc:	695a      	ldr	r2, [r3, #20]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	4904      	ldr	r1, [pc, #16]	; (80098f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	40021000 	.word	0x40021000
 80098f8:	07ff800f 	.word	0x07ff800f
 80098fc:	ff9f800f 	.word	0xff9f800f
 8009900:	f9ff800f 	.word	0xf9ff800f

08009904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e049      	b.n	80099aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f841 	bl	80099b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3304      	adds	r3, #4
 8009940:	4619      	mov	r1, r3
 8009942:	4610      	mov	r0, r2
 8009944:	f000 f9f8 	bl	8009d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
	...

080099c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d001      	beq.n	80099e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e04f      	b.n	8009a80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a23      	ldr	r2, [pc, #140]	; (8009a8c <HAL_TIM_Base_Start_IT+0xc4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d01d      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0x76>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0a:	d018      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0x76>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1f      	ldr	r2, [pc, #124]	; (8009a90 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d013      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0x76>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1e      	ldr	r2, [pc, #120]	; (8009a94 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00e      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0x76>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a1c      	ldr	r2, [pc, #112]	; (8009a98 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d009      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0x76>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a1b      	ldr	r2, [pc, #108]	; (8009a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d004      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0x76>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a19      	ldr	r2, [pc, #100]	; (8009aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d115      	bne.n	8009a6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	4b17      	ldr	r3, [pc, #92]	; (8009aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b06      	cmp	r3, #6
 8009a4e:	d015      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0xb4>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a56:	d011      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a68:	e008      	b.n	8009a7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0201 	orr.w	r2, r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	e000      	b.n	8009a7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	40012c00 	.word	0x40012c00
 8009a90:	40000400 	.word	0x40000400
 8009a94:	40000800 	.word	0x40000800
 8009a98:	40000c00 	.word	0x40000c00
 8009a9c:	40013400 	.word	0x40013400
 8009aa0:	40014000 	.word	0x40014000
 8009aa4:	00010007 	.word	0x00010007

08009aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d122      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d11b      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f06f 0202 	mvn.w	r2, #2
 8009ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f905 	bl	8009cfa <HAL_TIM_IC_CaptureCallback>
 8009af0:	e005      	b.n	8009afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f8f7 	bl	8009ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f908 	bl	8009d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d122      	bne.n	8009b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d11b      	bne.n	8009b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f06f 0204 	mvn.w	r2, #4
 8009b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f8db 	bl	8009cfa <HAL_TIM_IC_CaptureCallback>
 8009b44:	e005      	b.n	8009b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f8cd 	bl	8009ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f8de 	bl	8009d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f003 0308 	and.w	r3, r3, #8
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	d122      	bne.n	8009bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f003 0308 	and.w	r3, r3, #8
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d11b      	bne.n	8009bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f06f 0208 	mvn.w	r2, #8
 8009b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2204      	movs	r2, #4
 8009b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f8b1 	bl	8009cfa <HAL_TIM_IC_CaptureCallback>
 8009b98:	e005      	b.n	8009ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f8a3 	bl	8009ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f8b4 	bl	8009d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	f003 0310 	and.w	r3, r3, #16
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d122      	bne.n	8009c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f003 0310 	and.w	r3, r3, #16
 8009bc4:	2b10      	cmp	r3, #16
 8009bc6:	d11b      	bne.n	8009c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f06f 0210 	mvn.w	r2, #16
 8009bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2208      	movs	r2, #8
 8009bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f887 	bl	8009cfa <HAL_TIM_IC_CaptureCallback>
 8009bec:	e005      	b.n	8009bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f879 	bl	8009ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f88a 	bl	8009d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d10e      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d107      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f06f 0201 	mvn.w	r2, #1
 8009c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7fb fbde 	bl	80053e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c36:	2b80      	cmp	r3, #128	; 0x80
 8009c38:	d10e      	bne.n	8009c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c44:	2b80      	cmp	r3, #128	; 0x80
 8009c46:	d107      	bne.n	8009c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f914 	bl	8009e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c66:	d10e      	bne.n	8009c86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c72:	2b80      	cmp	r3, #128	; 0x80
 8009c74:	d107      	bne.n	8009c86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f907 	bl	8009e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c90:	2b40      	cmp	r3, #64	; 0x40
 8009c92:	d10e      	bne.n	8009cb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d107      	bne.n	8009cb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f838 	bl	8009d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d10e      	bne.n	8009cde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d107      	bne.n	8009cde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f06f 0220 	mvn.w	r2, #32
 8009cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f8c7 	bl	8009e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d02:	bf00      	nop
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b083      	sub	sp, #12
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d16:	bf00      	nop
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b083      	sub	sp, #12
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d2a:	bf00      	nop
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
	...

08009d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a40      	ldr	r2, [pc, #256]	; (8009e4c <TIM_Base_SetConfig+0x114>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d013      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d56:	d00f      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a3d      	ldr	r2, [pc, #244]	; (8009e50 <TIM_Base_SetConfig+0x118>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a3c      	ldr	r2, [pc, #240]	; (8009e54 <TIM_Base_SetConfig+0x11c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d007      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a3b      	ldr	r2, [pc, #236]	; (8009e58 <TIM_Base_SetConfig+0x120>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_Base_SetConfig+0x40>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a3a      	ldr	r2, [pc, #232]	; (8009e5c <TIM_Base_SetConfig+0x124>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d108      	bne.n	8009d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a2f      	ldr	r2, [pc, #188]	; (8009e4c <TIM_Base_SetConfig+0x114>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d01f      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d98:	d01b      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2c      	ldr	r2, [pc, #176]	; (8009e50 <TIM_Base_SetConfig+0x118>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d017      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a2b      	ldr	r2, [pc, #172]	; (8009e54 <TIM_Base_SetConfig+0x11c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d013      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a2a      	ldr	r2, [pc, #168]	; (8009e58 <TIM_Base_SetConfig+0x120>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00f      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a29      	ldr	r2, [pc, #164]	; (8009e5c <TIM_Base_SetConfig+0x124>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00b      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a28      	ldr	r2, [pc, #160]	; (8009e60 <TIM_Base_SetConfig+0x128>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d007      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a27      	ldr	r2, [pc, #156]	; (8009e64 <TIM_Base_SetConfig+0x12c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d003      	beq.n	8009dd2 <TIM_Base_SetConfig+0x9a>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a26      	ldr	r2, [pc, #152]	; (8009e68 <TIM_Base_SetConfig+0x130>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d108      	bne.n	8009de4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a10      	ldr	r2, [pc, #64]	; (8009e4c <TIM_Base_SetConfig+0x114>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00f      	beq.n	8009e30 <TIM_Base_SetConfig+0xf8>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a12      	ldr	r2, [pc, #72]	; (8009e5c <TIM_Base_SetConfig+0x124>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00b      	beq.n	8009e30 <TIM_Base_SetConfig+0xf8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a11      	ldr	r2, [pc, #68]	; (8009e60 <TIM_Base_SetConfig+0x128>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d007      	beq.n	8009e30 <TIM_Base_SetConfig+0xf8>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <TIM_Base_SetConfig+0x12c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d003      	beq.n	8009e30 <TIM_Base_SetConfig+0xf8>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a0f      	ldr	r2, [pc, #60]	; (8009e68 <TIM_Base_SetConfig+0x130>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d103      	bne.n	8009e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	691a      	ldr	r2, [r3, #16]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	615a      	str	r2, [r3, #20]
}
 8009e3e:	bf00      	nop
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	40012c00 	.word	0x40012c00
 8009e50:	40000400 	.word	0x40000400
 8009e54:	40000800 	.word	0x40000800
 8009e58:	40000c00 	.word	0x40000c00
 8009e5c:	40013400 	.word	0x40013400
 8009e60:	40014000 	.word	0x40014000
 8009e64:	40014400 	.word	0x40014400
 8009e68:	40014800 	.word	0x40014800

08009e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e042      	b.n	8009f40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d106      	bne.n	8009ed2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7fc f835 	bl	8005f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2224      	movs	r2, #36	; 0x24
 8009ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0201 	bic.w	r2, r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fc52 	bl	800a794 <UART_SetConfig>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e022      	b.n	8009f40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 ff42 	bl	800ad8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0201 	orr.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 ffc9 	bl	800aed0 <UART_CheckIdleState>
 8009f3e:	4603      	mov	r3, r0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08a      	sub	sp, #40	; 0x28
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	4613      	mov	r3, r2
 8009f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	f040 8084 	bne.w	800a06c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <HAL_UART_Transmit+0x28>
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e07c      	b.n	800a06e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_UART_Transmit+0x3a>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e075      	b.n	800a06e <HAL_UART_Transmit+0x126>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2221      	movs	r2, #33	; 0x21
 8009f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f9a:	f7fc fd0f 	bl	80069bc <HAL_GetTick>
 8009f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	88fa      	ldrh	r2, [r7, #6]
 8009fa4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	88fa      	ldrh	r2, [r7, #6]
 8009fac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb8:	d108      	bne.n	8009fcc <HAL_UART_Transmit+0x84>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d104      	bne.n	8009fcc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	61bb      	str	r3, [r7, #24]
 8009fca:	e003      	b.n	8009fd4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009fdc:	e02d      	b.n	800a03a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2180      	movs	r1, #128	; 0x80
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 ffbc 	bl	800af66 <UART_WaitOnFlagUntilTimeout>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e03a      	b.n	800a06e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10b      	bne.n	800a016 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	881a      	ldrh	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a00a:	b292      	uxth	r2, r2
 800a00c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	3302      	adds	r3, #2
 800a012:	61bb      	str	r3, [r7, #24]
 800a014:	e008      	b.n	800a028 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	781a      	ldrb	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	b292      	uxth	r2, r2
 800a020:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	3301      	adds	r3, #1
 800a026:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3b01      	subs	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1cb      	bne.n	8009fde <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2200      	movs	r2, #0
 800a04e:	2140      	movs	r1, #64	; 0x40
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 ff88 	bl	800af66 <UART_WaitOnFlagUntilTimeout>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e006      	b.n	800a06e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	e000      	b.n	800a06e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a06c:	2302      	movs	r3, #2
  }
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3720      	adds	r7, #32
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	; 0x28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	4613      	mov	r3, r2
 800a084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	d142      	bne.n	800a116 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <HAL_UART_Receive_IT+0x24>
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e03b      	b.n	800a118 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <HAL_UART_Receive_IT+0x36>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e034      	b.n	800a118 <HAL_UART_Receive_IT+0xa0>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a17      	ldr	r2, [pc, #92]	; (800a120 <HAL_UART_Receive_IT+0xa8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d01f      	beq.n	800a106 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d018      	beq.n	800a106 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	623b      	str	r3, [r7, #32]
 800a0f4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	69f9      	ldr	r1, [r7, #28]
 800a0f8:	6a3a      	ldr	r2, [r7, #32]
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e6      	bne.n	800a0d4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a106:	88fb      	ldrh	r3, [r7, #6]
 800a108:	461a      	mov	r2, r3
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 fff3 	bl	800b0f8 <UART_Start_Receive_IT>
 800a112:	4603      	mov	r3, r0
 800a114:	e000      	b.n	800a118 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a116:	2302      	movs	r3, #2
  }
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3728      	adds	r7, #40	; 0x28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	40008000 	.word	0x40008000

0800a124 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b0ba      	sub	sp, #232	; 0xe8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a14a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a14e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a152:	4013      	ands	r3, r2
 800a154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d11b      	bne.n	800a198 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a164:	f003 0320 	and.w	r3, r3, #32
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d015      	beq.n	800a198 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a170:	f003 0320 	and.w	r3, r3, #32
 800a174:	2b00      	cmp	r3, #0
 800a176:	d105      	bne.n	800a184 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a17c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d009      	beq.n	800a198 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 82d6 	beq.w	800a73a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	4798      	blx	r3
      }
      return;
 800a196:	e2d0      	b.n	800a73a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 811f 	beq.w	800a3e0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a1a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a1a6:	4b8b      	ldr	r3, [pc, #556]	; (800a3d4 <HAL_UART_IRQHandler+0x2b0>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a1ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a1b2:	4b89      	ldr	r3, [pc, #548]	; (800a3d8 <HAL_UART_IRQHandler+0x2b4>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 8112 	beq.w	800a3e0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d011      	beq.n	800a1ec <HAL_UART_IRQHandler+0xc8>
 800a1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1e2:	f043 0201 	orr.w	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d011      	beq.n	800a21c <HAL_UART_IRQHandler+0xf8>
 800a1f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00b      	beq.n	800a21c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2202      	movs	r2, #2
 800a20a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a212:	f043 0204 	orr.w	r2, r3, #4
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a220:	f003 0304 	and.w	r3, r3, #4
 800a224:	2b00      	cmp	r3, #0
 800a226:	d011      	beq.n	800a24c <HAL_UART_IRQHandler+0x128>
 800a228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00b      	beq.n	800a24c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2204      	movs	r2, #4
 800a23a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a242:	f043 0202 	orr.w	r2, r3, #2
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a250:	f003 0308 	and.w	r3, r3, #8
 800a254:	2b00      	cmp	r3, #0
 800a256:	d017      	beq.n	800a288 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a25c:	f003 0320 	and.w	r3, r3, #32
 800a260:	2b00      	cmp	r3, #0
 800a262:	d105      	bne.n	800a270 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a264:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a268:	4b5a      	ldr	r3, [pc, #360]	; (800a3d4 <HAL_UART_IRQHandler+0x2b0>)
 800a26a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2208      	movs	r2, #8
 800a276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a27e:	f043 0208 	orr.w	r2, r3, #8
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a290:	2b00      	cmp	r3, #0
 800a292:	d012      	beq.n	800a2ba <HAL_UART_IRQHandler+0x196>
 800a294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00c      	beq.n	800a2ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2b0:	f043 0220 	orr.w	r2, r3, #32
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 823c 	beq.w	800a73e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d013      	beq.n	800a2fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d105      	bne.n	800a2ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a300:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30e:	2b40      	cmp	r3, #64	; 0x40
 800a310:	d005      	beq.n	800a31e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a316:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d04f      	beq.n	800a3be <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 f814 	bl	800b34c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32e:	2b40      	cmp	r3, #64	; 0x40
 800a330:	d141      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3308      	adds	r3, #8
 800a35a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a35e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a36a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1d9      	bne.n	800a332 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d013      	beq.n	800a3ae <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a38a:	4a14      	ldr	r2, [pc, #80]	; (800a3dc <HAL_UART_IRQHandler+0x2b8>)
 800a38c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a392:	4618      	mov	r0, r3
 800a394:	f7fc fc80 	bl	8006c98 <HAL_DMA_Abort_IT>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d017      	beq.n	800a3ce <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ac:	e00f      	b.n	800a3ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f9da 	bl	800a768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3b4:	e00b      	b.n	800a3ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f9d6 	bl	800a768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3bc:	e007      	b.n	800a3ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f9d2 	bl	800a768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a3cc:	e1b7      	b.n	800a73e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ce:	bf00      	nop
    return;
 800a3d0:	e1b5      	b.n	800a73e <HAL_UART_IRQHandler+0x61a>
 800a3d2:	bf00      	nop
 800a3d4:	10000001 	.word	0x10000001
 800a3d8:	04000120 	.word	0x04000120
 800a3dc:	0800b419 	.word	0x0800b419

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	f040 814a 	bne.w	800a67e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ee:	f003 0310 	and.w	r3, r3, #16
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 8143 	beq.w	800a67e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 813c 	beq.w	800a67e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2210      	movs	r2, #16
 800a40c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a418:	2b40      	cmp	r3, #64	; 0x40
 800a41a:	f040 80b5 	bne.w	800a588 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a42a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 8187 	beq.w	800a742 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a43a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a43e:	429a      	cmp	r2, r3
 800a440:	f080 817f 	bcs.w	800a742 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a44a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f040 8086 	bne.w	800a56c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a46c:	e853 3f00 	ldrex	r3, [r3]
 800a470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a47c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a48a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a48e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1da      	bne.n	800a460 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a4ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4bc:	f023 0301 	bic.w	r3, r3, #1
 800a4c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a4d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a4d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a4e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e1      	bne.n	800a4aa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a4f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3308      	adds	r3, #8
 800a506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a50a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a50c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a512:	e841 2300 	strex	r3, r2, [r1]
 800a516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1e3      	bne.n	800a4e6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a53c:	f023 0310 	bic.w	r3, r3, #16
 800a540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a54e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a550:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e4      	bne.n	800a52c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a566:	4618      	mov	r0, r3
 800a568:	f7fc fb3a 	bl	8006be0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a578:	b29b      	uxth	r3, r3
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f8fb 	bl	800a77c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a586:	e0dc      	b.n	800a742 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a594:	b29b      	uxth	r3, r3
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80ce 	beq.w	800a746 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a5aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 80c9 	beq.w	800a746 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a5d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5de:	e841 2300 	strex	r3, r2, [r1]
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1e4      	bne.n	800a5b4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3308      	adds	r3, #8
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	623b      	str	r3, [r7, #32]
   return(result);
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a600:	f023 0301 	bic.w	r3, r3, #1
 800a604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3308      	adds	r3, #8
 800a60e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a612:	633a      	str	r2, [r7, #48]	; 0x30
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e1      	bne.n	800a5ea <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2220      	movs	r2, #32
 800a62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	e853 3f00 	ldrex	r3, [r3]
 800a646:	60fb      	str	r3, [r7, #12]
   return(result);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 0310 	bic.w	r3, r3, #16
 800a64e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a65c:	61fb      	str	r3, [r7, #28]
 800a65e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a660:	69b9      	ldr	r1, [r7, #24]
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	e841 2300 	strex	r3, r2, [r1]
 800a668:	617b      	str	r3, [r7, #20]
   return(result);
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e4      	bne.n	800a63a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f880 	bl	800a77c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a67c:	e063      	b.n	800a746 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00e      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x584>
 800a68a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a68e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a69e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f001 fb5f 	bl	800bd64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6a6:	e051      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d014      	beq.n	800a6de <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d105      	bne.n	800a6cc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a6c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d008      	beq.n	800a6de <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d03a      	beq.n	800a74a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	4798      	blx	r3
    }
    return;
 800a6dc:	e035      	b.n	800a74a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <HAL_UART_IRQHandler+0x5da>
 800a6ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fea4 	bl	800b444 <UART_EndTransmit_IT>
    return;
 800a6fc:	e026      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d009      	beq.n	800a71e <HAL_UART_IRQHandler+0x5fa>
 800a70a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a70e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f001 fb38 	bl	800bd8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a71c:	e016      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d010      	beq.n	800a74c <HAL_UART_IRQHandler+0x628>
 800a72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	da0c      	bge.n	800a74c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 fb20 	bl	800bd78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a738:	e008      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
      return;
 800a73a:	bf00      	nop
 800a73c:	e006      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
    return;
 800a73e:	bf00      	nop
 800a740:	e004      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
      return;
 800a742:	bf00      	nop
 800a744:	e002      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
      return;
 800a746:	bf00      	nop
 800a748:	e000      	b.n	800a74c <HAL_UART_IRQHandler+0x628>
    return;
 800a74a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a74c:	37e8      	adds	r7, #232	; 0xe8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop

0800a754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a798:	b08c      	sub	sp, #48	; 0x30
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	431a      	orrs	r2, r3
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4baa      	ldr	r3, [pc, #680]	; (800aa6c <UART_SetConfig+0x2d8>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	6812      	ldr	r2, [r2, #0]
 800a7ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7cc:	430b      	orrs	r3, r1
 800a7ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a9f      	ldr	r2, [pc, #636]	; (800aa70 <UART_SetConfig+0x2dc>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d004      	beq.n	800a800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a80a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	6812      	ldr	r2, [r2, #0]
 800a812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a814:	430b      	orrs	r3, r1
 800a816:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81e:	f023 010f 	bic.w	r1, r3, #15
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	430a      	orrs	r2, r1
 800a82c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a90      	ldr	r2, [pc, #576]	; (800aa74 <UART_SetConfig+0x2e0>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d125      	bne.n	800a884 <UART_SetConfig+0xf0>
 800a838:	4b8f      	ldr	r3, [pc, #572]	; (800aa78 <UART_SetConfig+0x2e4>)
 800a83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	2b03      	cmp	r3, #3
 800a844:	d81a      	bhi.n	800a87c <UART_SetConfig+0xe8>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <UART_SetConfig+0xb8>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a85d 	.word	0x0800a85d
 800a850:	0800a86d 	.word	0x0800a86d
 800a854:	0800a865 	.word	0x0800a865
 800a858:	0800a875 	.word	0x0800a875
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a862:	e116      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a864:	2302      	movs	r3, #2
 800a866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a86a:	e112      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a86c:	2304      	movs	r3, #4
 800a86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a872:	e10e      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a874:	2308      	movs	r3, #8
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a87a:	e10a      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a87c:	2310      	movs	r3, #16
 800a87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a882:	e106      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a7c      	ldr	r2, [pc, #496]	; (800aa7c <UART_SetConfig+0x2e8>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d138      	bne.n	800a900 <UART_SetConfig+0x16c>
 800a88e:	4b7a      	ldr	r3, [pc, #488]	; (800aa78 <UART_SetConfig+0x2e4>)
 800a890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a894:	f003 030c 	and.w	r3, r3, #12
 800a898:	2b0c      	cmp	r3, #12
 800a89a:	d82d      	bhi.n	800a8f8 <UART_SetConfig+0x164>
 800a89c:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <UART_SetConfig+0x110>)
 800a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a2:	bf00      	nop
 800a8a4:	0800a8d9 	.word	0x0800a8d9
 800a8a8:	0800a8f9 	.word	0x0800a8f9
 800a8ac:	0800a8f9 	.word	0x0800a8f9
 800a8b0:	0800a8f9 	.word	0x0800a8f9
 800a8b4:	0800a8e9 	.word	0x0800a8e9
 800a8b8:	0800a8f9 	.word	0x0800a8f9
 800a8bc:	0800a8f9 	.word	0x0800a8f9
 800a8c0:	0800a8f9 	.word	0x0800a8f9
 800a8c4:	0800a8e1 	.word	0x0800a8e1
 800a8c8:	0800a8f9 	.word	0x0800a8f9
 800a8cc:	0800a8f9 	.word	0x0800a8f9
 800a8d0:	0800a8f9 	.word	0x0800a8f9
 800a8d4:	0800a8f1 	.word	0x0800a8f1
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8de:	e0d8      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8e6:	e0d4      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a8e8:	2304      	movs	r3, #4
 800a8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8ee:	e0d0      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a8f0:	2308      	movs	r3, #8
 800a8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8f6:	e0cc      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8fe:	e0c8      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a5e      	ldr	r2, [pc, #376]	; (800aa80 <UART_SetConfig+0x2ec>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d125      	bne.n	800a956 <UART_SetConfig+0x1c2>
 800a90a:	4b5b      	ldr	r3, [pc, #364]	; (800aa78 <UART_SetConfig+0x2e4>)
 800a90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a910:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a914:	2b30      	cmp	r3, #48	; 0x30
 800a916:	d016      	beq.n	800a946 <UART_SetConfig+0x1b2>
 800a918:	2b30      	cmp	r3, #48	; 0x30
 800a91a:	d818      	bhi.n	800a94e <UART_SetConfig+0x1ba>
 800a91c:	2b20      	cmp	r3, #32
 800a91e:	d00a      	beq.n	800a936 <UART_SetConfig+0x1a2>
 800a920:	2b20      	cmp	r3, #32
 800a922:	d814      	bhi.n	800a94e <UART_SetConfig+0x1ba>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <UART_SetConfig+0x19a>
 800a928:	2b10      	cmp	r3, #16
 800a92a:	d008      	beq.n	800a93e <UART_SetConfig+0x1aa>
 800a92c:	e00f      	b.n	800a94e <UART_SetConfig+0x1ba>
 800a92e:	2300      	movs	r3, #0
 800a930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a934:	e0ad      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a936:	2302      	movs	r3, #2
 800a938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a93c:	e0a9      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a93e:	2304      	movs	r3, #4
 800a940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a944:	e0a5      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a946:	2308      	movs	r3, #8
 800a948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a94c:	e0a1      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a94e:	2310      	movs	r3, #16
 800a950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a954:	e09d      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a4a      	ldr	r2, [pc, #296]	; (800aa84 <UART_SetConfig+0x2f0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d125      	bne.n	800a9ac <UART_SetConfig+0x218>
 800a960:	4b45      	ldr	r3, [pc, #276]	; (800aa78 <UART_SetConfig+0x2e4>)
 800a962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a966:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a96a:	2bc0      	cmp	r3, #192	; 0xc0
 800a96c:	d016      	beq.n	800a99c <UART_SetConfig+0x208>
 800a96e:	2bc0      	cmp	r3, #192	; 0xc0
 800a970:	d818      	bhi.n	800a9a4 <UART_SetConfig+0x210>
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d00a      	beq.n	800a98c <UART_SetConfig+0x1f8>
 800a976:	2b80      	cmp	r3, #128	; 0x80
 800a978:	d814      	bhi.n	800a9a4 <UART_SetConfig+0x210>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <UART_SetConfig+0x1f0>
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d008      	beq.n	800a994 <UART_SetConfig+0x200>
 800a982:	e00f      	b.n	800a9a4 <UART_SetConfig+0x210>
 800a984:	2300      	movs	r3, #0
 800a986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a98a:	e082      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a98c:	2302      	movs	r3, #2
 800a98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a992:	e07e      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a994:	2304      	movs	r3, #4
 800a996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a99a:	e07a      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a99c:	2308      	movs	r3, #8
 800a99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9a2:	e076      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9aa:	e072      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a35      	ldr	r2, [pc, #212]	; (800aa88 <UART_SetConfig+0x2f4>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d12a      	bne.n	800aa0c <UART_SetConfig+0x278>
 800a9b6:	4b30      	ldr	r3, [pc, #192]	; (800aa78 <UART_SetConfig+0x2e4>)
 800a9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9c4:	d01a      	beq.n	800a9fc <UART_SetConfig+0x268>
 800a9c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9ca:	d81b      	bhi.n	800aa04 <UART_SetConfig+0x270>
 800a9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d0:	d00c      	beq.n	800a9ec <UART_SetConfig+0x258>
 800a9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d6:	d815      	bhi.n	800aa04 <UART_SetConfig+0x270>
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <UART_SetConfig+0x250>
 800a9dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9e0:	d008      	beq.n	800a9f4 <UART_SetConfig+0x260>
 800a9e2:	e00f      	b.n	800aa04 <UART_SetConfig+0x270>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ea:	e052      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9f2:	e04e      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a9f4:	2304      	movs	r3, #4
 800a9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9fa:	e04a      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800a9fc:	2308      	movs	r3, #8
 800a9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa02:	e046      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800aa04:	2310      	movs	r3, #16
 800aa06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa0a:	e042      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a17      	ldr	r2, [pc, #92]	; (800aa70 <UART_SetConfig+0x2dc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d13a      	bne.n	800aa8c <UART_SetConfig+0x2f8>
 800aa16:	4b18      	ldr	r3, [pc, #96]	; (800aa78 <UART_SetConfig+0x2e4>)
 800aa18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa24:	d01a      	beq.n	800aa5c <UART_SetConfig+0x2c8>
 800aa26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa2a:	d81b      	bhi.n	800aa64 <UART_SetConfig+0x2d0>
 800aa2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa30:	d00c      	beq.n	800aa4c <UART_SetConfig+0x2b8>
 800aa32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa36:	d815      	bhi.n	800aa64 <UART_SetConfig+0x2d0>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <UART_SetConfig+0x2b0>
 800aa3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa40:	d008      	beq.n	800aa54 <UART_SetConfig+0x2c0>
 800aa42:	e00f      	b.n	800aa64 <UART_SetConfig+0x2d0>
 800aa44:	2300      	movs	r3, #0
 800aa46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa4a:	e022      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa52:	e01e      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800aa54:	2304      	movs	r3, #4
 800aa56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa5a:	e01a      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800aa5c:	2308      	movs	r3, #8
 800aa5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa62:	e016      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800aa64:	2310      	movs	r3, #16
 800aa66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa6a:	e012      	b.n	800aa92 <UART_SetConfig+0x2fe>
 800aa6c:	cfff69f3 	.word	0xcfff69f3
 800aa70:	40008000 	.word	0x40008000
 800aa74:	40013800 	.word	0x40013800
 800aa78:	40021000 	.word	0x40021000
 800aa7c:	40004400 	.word	0x40004400
 800aa80:	40004800 	.word	0x40004800
 800aa84:	40004c00 	.word	0x40004c00
 800aa88:	40005000 	.word	0x40005000
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4aae      	ldr	r2, [pc, #696]	; (800ad50 <UART_SetConfig+0x5bc>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	f040 8097 	bne.w	800abcc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aaa2:	2b08      	cmp	r3, #8
 800aaa4:	d823      	bhi.n	800aaee <UART_SetConfig+0x35a>
 800aaa6:	a201      	add	r2, pc, #4	; (adr r2, 800aaac <UART_SetConfig+0x318>)
 800aaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaac:	0800aad1 	.word	0x0800aad1
 800aab0:	0800aaef 	.word	0x0800aaef
 800aab4:	0800aad9 	.word	0x0800aad9
 800aab8:	0800aaef 	.word	0x0800aaef
 800aabc:	0800aadf 	.word	0x0800aadf
 800aac0:	0800aaef 	.word	0x0800aaef
 800aac4:	0800aaef 	.word	0x0800aaef
 800aac8:	0800aaef 	.word	0x0800aaef
 800aacc:	0800aae7 	.word	0x0800aae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aad0:	f7fe f8e2 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800aad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aad6:	e010      	b.n	800aafa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aad8:	4b9e      	ldr	r3, [pc, #632]	; (800ad54 <UART_SetConfig+0x5c0>)
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aadc:	e00d      	b.n	800aafa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aade:	f7fe f843 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 800aae2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aae4:	e009      	b.n	800aafa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aaec:	e005      	b.n	800aafa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aaf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 8130 	beq.w	800ad62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	4a94      	ldr	r2, [pc, #592]	; (800ad58 <UART_SetConfig+0x5c4>)
 800ab08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d305      	bcc.n	800ab32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d903      	bls.n	800ab3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ab38:	e113      	b.n	800ad62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	60bb      	str	r3, [r7, #8]
 800ab40:	60fa      	str	r2, [r7, #12]
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	4a84      	ldr	r2, [pc, #528]	; (800ad58 <UART_SetConfig+0x5c4>)
 800ab48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	2200      	movs	r2, #0
 800ab50:	603b      	str	r3, [r7, #0]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab5c:	f7f6 f83c 	bl	8000bd8 <__aeabi_uldivmod>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4610      	mov	r0, r2
 800ab66:	4619      	mov	r1, r3
 800ab68:	f04f 0200 	mov.w	r2, #0
 800ab6c:	f04f 0300 	mov.w	r3, #0
 800ab70:	020b      	lsls	r3, r1, #8
 800ab72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab76:	0202      	lsls	r2, r0, #8
 800ab78:	6979      	ldr	r1, [r7, #20]
 800ab7a:	6849      	ldr	r1, [r1, #4]
 800ab7c:	0849      	lsrs	r1, r1, #1
 800ab7e:	2000      	movs	r0, #0
 800ab80:	460c      	mov	r4, r1
 800ab82:	4605      	mov	r5, r0
 800ab84:	eb12 0804 	adds.w	r8, r2, r4
 800ab88:	eb43 0905 	adc.w	r9, r3, r5
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	469a      	mov	sl, r3
 800ab94:	4693      	mov	fp, r2
 800ab96:	4652      	mov	r2, sl
 800ab98:	465b      	mov	r3, fp
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	f7f6 f81b 	bl	8000bd8 <__aeabi_uldivmod>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	4613      	mov	r3, r2
 800aba8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abb0:	d308      	bcc.n	800abc4 <UART_SetConfig+0x430>
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abb8:	d204      	bcs.n	800abc4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6a3a      	ldr	r2, [r7, #32]
 800abc0:	60da      	str	r2, [r3, #12]
 800abc2:	e0ce      	b.n	800ad62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800abca:	e0ca      	b.n	800ad62 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abd4:	d166      	bne.n	800aca4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800abd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abda:	2b08      	cmp	r3, #8
 800abdc:	d827      	bhi.n	800ac2e <UART_SetConfig+0x49a>
 800abde:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <UART_SetConfig+0x450>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800ac09 	.word	0x0800ac09
 800abe8:	0800ac11 	.word	0x0800ac11
 800abec:	0800ac19 	.word	0x0800ac19
 800abf0:	0800ac2f 	.word	0x0800ac2f
 800abf4:	0800ac1f 	.word	0x0800ac1f
 800abf8:	0800ac2f 	.word	0x0800ac2f
 800abfc:	0800ac2f 	.word	0x0800ac2f
 800ac00:	0800ac2f 	.word	0x0800ac2f
 800ac04:	0800ac27 	.word	0x0800ac27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac08:	f7fe f846 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800ac0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac0e:	e014      	b.n	800ac3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac10:	f7fe f858 	bl	8008cc4 <HAL_RCC_GetPCLK2Freq>
 800ac14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac16:	e010      	b.n	800ac3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac18:	4b4e      	ldr	r3, [pc, #312]	; (800ad54 <UART_SetConfig+0x5c0>)
 800ac1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac1c:	e00d      	b.n	800ac3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac1e:	f7fd ffa3 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 800ac22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac24:	e009      	b.n	800ac3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac2c:	e005      	b.n	800ac3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ac38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 8090 	beq.w	800ad62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	4a44      	ldr	r2, [pc, #272]	; (800ad58 <UART_SetConfig+0x5c4>)
 800ac48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac54:	005a      	lsls	r2, r3, #1
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	441a      	add	r2, r3
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac66:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	2b0f      	cmp	r3, #15
 800ac6c:	d916      	bls.n	800ac9c <UART_SetConfig+0x508>
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac74:	d212      	bcs.n	800ac9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f023 030f 	bic.w	r3, r3, #15
 800ac7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	8bfb      	ldrh	r3, [r7, #30]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	8bfa      	ldrh	r2, [r7, #30]
 800ac98:	60da      	str	r2, [r3, #12]
 800ac9a:	e062      	b.n	800ad62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aca2:	e05e      	b.n	800ad62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d828      	bhi.n	800acfe <UART_SetConfig+0x56a>
 800acac:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <UART_SetConfig+0x520>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800acd9 	.word	0x0800acd9
 800acb8:	0800ace1 	.word	0x0800ace1
 800acbc:	0800ace9 	.word	0x0800ace9
 800acc0:	0800acff 	.word	0x0800acff
 800acc4:	0800acef 	.word	0x0800acef
 800acc8:	0800acff 	.word	0x0800acff
 800accc:	0800acff 	.word	0x0800acff
 800acd0:	0800acff 	.word	0x0800acff
 800acd4:	0800acf7 	.word	0x0800acf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acd8:	f7fd ffde 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800acdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acde:	e014      	b.n	800ad0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ace0:	f7fd fff0 	bl	8008cc4 <HAL_RCC_GetPCLK2Freq>
 800ace4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ace6:	e010      	b.n	800ad0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ace8:	4b1a      	ldr	r3, [pc, #104]	; (800ad54 <UART_SetConfig+0x5c0>)
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acec:	e00d      	b.n	800ad0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acee:	f7fd ff3b 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 800acf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acf4:	e009      	b.n	800ad0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acfc:	e005      	b.n	800ad0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad08:	bf00      	nop
    }

    if (pclk != 0U)
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d028      	beq.n	800ad62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	4a10      	ldr	r2, [pc, #64]	; (800ad58 <UART_SetConfig+0x5c4>)
 800ad16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	085b      	lsrs	r3, r3, #1
 800ad28:	441a      	add	r2, r3
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	2b0f      	cmp	r3, #15
 800ad38:	d910      	bls.n	800ad5c <UART_SetConfig+0x5c8>
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad40:	d20c      	bcs.n	800ad5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60da      	str	r2, [r3, #12]
 800ad4c:	e009      	b.n	800ad62 <UART_SetConfig+0x5ce>
 800ad4e:	bf00      	nop
 800ad50:	40008000 	.word	0x40008000
 800ad54:	00f42400 	.word	0x00f42400
 800ad58:	0801405c 	.word	0x0801405c
      }
      else
      {
        ret = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2200      	movs	r2, #0
 800ad76:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ad7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3730      	adds	r7, #48	; 0x30
 800ad86:	46bd      	mov	sp, r7
 800ad88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ad8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00a      	beq.n	800add8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800addc:	f003 0304 	and.w	r3, r3, #4
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00a      	beq.n	800adfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	430a      	orrs	r2, r1
 800adf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	f003 0308 	and.w	r3, r3, #8
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae20:	f003 0310 	and.w	r3, r3, #16
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00a      	beq.n	800ae3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	430a      	orrs	r2, r1
 800ae3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01a      	beq.n	800aea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae8a:	d10a      	bne.n	800aea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	430a      	orrs	r2, r1
 800aec2:	605a      	str	r2, [r3, #4]
  }
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af02      	add	r7, sp, #8
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aee0:	f7fb fd6c 	bl	80069bc <HAL_GetTick>
 800aee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0308 	and.w	r3, r3, #8
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d10e      	bne.n	800af12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f82f 	bl	800af66 <UART_WaitOnFlagUntilTimeout>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e025      	b.n	800af5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d10e      	bne.n	800af3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f819 	bl	800af66 <UART_WaitOnFlagUntilTimeout>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e00f      	b.n	800af5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2220      	movs	r2, #32
 800af4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b09c      	sub	sp, #112	; 0x70
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	603b      	str	r3, [r7, #0]
 800af72:	4613      	mov	r3, r2
 800af74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af76:	e0a9      	b.n	800b0cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7e:	f000 80a5 	beq.w	800b0cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af82:	f7fb fd1b 	bl	80069bc <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af8e:	429a      	cmp	r2, r3
 800af90:	d302      	bcc.n	800af98 <UART_WaitOnFlagUntilTimeout+0x32>
 800af92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af94:	2b00      	cmp	r3, #0
 800af96:	d140      	bne.n	800b01a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800afa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afac:	667b      	str	r3, [r7, #100]	; 0x64
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800afc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e6      	bne.n	800af98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	f023 0301 	bic.w	r3, r3, #1
 800afe0:	663b      	str	r3, [r7, #96]	; 0x60
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3308      	adds	r3, #8
 800afe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afea:	64ba      	str	r2, [r7, #72]	; 0x48
 800afec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e5      	bne.n	800afca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2220      	movs	r2, #32
 800b002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e069      	b.n	800b0ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b00      	cmp	r3, #0
 800b026:	d051      	beq.n	800b0cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b036:	d149      	bne.n	800b0cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b040:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04a:	e853 3f00 	ldrex	r3, [r3]
 800b04e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b056:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b060:	637b      	str	r3, [r7, #52]	; 0x34
 800b062:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e6      	bne.n	800b042 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3308      	adds	r3, #8
 800b07a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	e853 3f00 	ldrex	r3, [r3]
 800b082:	613b      	str	r3, [r7, #16]
   return(result);
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f023 0301 	bic.w	r3, r3, #1
 800b08a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3308      	adds	r3, #8
 800b092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b094:	623a      	str	r2, [r7, #32]
 800b096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b098:	69f9      	ldr	r1, [r7, #28]
 800b09a:	6a3a      	ldr	r2, [r7, #32]
 800b09c:	e841 2300 	strex	r3, r2, [r1]
 800b0a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e5      	bne.n	800b074 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2220      	movs	r2, #32
 800b0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e010      	b.n	800b0ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	69da      	ldr	r2, [r3, #28]
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	bf0c      	ite	eq
 800b0dc:	2301      	moveq	r3, #1
 800b0de:	2300      	movne	r3, #0
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	79fb      	ldrb	r3, [r7, #7]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	f43f af46 	beq.w	800af78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3770      	adds	r7, #112	; 0x70
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b0a3      	sub	sp, #140	; 0x8c
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	4613      	mov	r3, r2
 800b104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	88fa      	ldrh	r2, [r7, #6]
 800b110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	88fa      	ldrh	r2, [r7, #6]
 800b118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b12a:	d10e      	bne.n	800b14a <UART_Start_Receive_IT+0x52>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <UART_Start_Receive_IT+0x48>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b13a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b13e:	e02d      	b.n	800b19c <UART_Start_Receive_IT+0xa4>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	22ff      	movs	r2, #255	; 0xff
 800b144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b148:	e028      	b.n	800b19c <UART_Start_Receive_IT+0xa4>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10d      	bne.n	800b16e <UART_Start_Receive_IT+0x76>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d104      	bne.n	800b164 <UART_Start_Receive_IT+0x6c>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	22ff      	movs	r2, #255	; 0xff
 800b15e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b162:	e01b      	b.n	800b19c <UART_Start_Receive_IT+0xa4>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	227f      	movs	r2, #127	; 0x7f
 800b168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b16c:	e016      	b.n	800b19c <UART_Start_Receive_IT+0xa4>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b176:	d10d      	bne.n	800b194 <UART_Start_Receive_IT+0x9c>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d104      	bne.n	800b18a <UART_Start_Receive_IT+0x92>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	227f      	movs	r2, #127	; 0x7f
 800b184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b188:	e008      	b.n	800b19c <UART_Start_Receive_IT+0xa4>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	223f      	movs	r2, #63	; 0x3f
 800b18e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b192:	e003      	b.n	800b19c <UART_Start_Receive_IT+0xa4>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2222      	movs	r2, #34	; 0x22
 800b1a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b1bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1be:	f043 0301 	orr.w	r3, r3, #1
 800b1c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b1d0:	673a      	str	r2, [r7, #112]	; 0x70
 800b1d2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b1d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b1de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e3      	bne.n	800b1ac <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ec:	d153      	bne.n	800b296 <UART_Start_Receive_IT+0x19e>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b1f4:	88fa      	ldrh	r2, [r7, #6]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d34d      	bcc.n	800b296 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b202:	d107      	bne.n	800b214 <UART_Start_Receive_IT+0x11c>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d103      	bne.n	800b214 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4a4b      	ldr	r2, [pc, #300]	; (800b33c <UART_Start_Receive_IT+0x244>)
 800b210:	671a      	str	r2, [r3, #112]	; 0x70
 800b212:	e002      	b.n	800b21a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4a4a      	ldr	r2, [pc, #296]	; (800b340 <UART_Start_Receive_IT+0x248>)
 800b218:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d01a      	beq.n	800b260 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b23e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b24c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b24e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b250:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b252:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b254:	e841 2300 	strex	r3, r2, [r1]
 800b258:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1e4      	bne.n	800b22a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3308      	adds	r3, #8
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26a:	e853 3f00 	ldrex	r3, [r3]
 800b26e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b276:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3308      	adds	r3, #8
 800b27e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b280:	64ba      	str	r2, [r7, #72]	; 0x48
 800b282:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e5      	bne.n	800b260 <UART_Start_Receive_IT+0x168>
 800b294:	e04a      	b.n	800b32c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b29e:	d107      	bne.n	800b2b0 <UART_Start_Receive_IT+0x1b8>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d103      	bne.n	800b2b0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4a26      	ldr	r2, [pc, #152]	; (800b344 <UART_Start_Receive_IT+0x24c>)
 800b2ac:	671a      	str	r2, [r3, #112]	; 0x70
 800b2ae:	e002      	b.n	800b2b6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4a25      	ldr	r2, [pc, #148]	; (800b348 <UART_Start_Receive_IT+0x250>)
 800b2b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d019      	beq.n	800b2fa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b2da:	677b      	str	r3, [r7, #116]	; 0x74
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b2e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2ec:	e841 2300 	strex	r3, r2, [r1]
 800b2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e6      	bne.n	800b2c6 <UART_Start_Receive_IT+0x1ce>
 800b2f8:	e018      	b.n	800b32c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	e853 3f00 	ldrex	r3, [r3]
 800b306:	613b      	str	r3, [r7, #16]
   return(result);
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f043 0320 	orr.w	r3, r3, #32
 800b30e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b318:	623b      	str	r3, [r7, #32]
 800b31a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31c:	69f9      	ldr	r1, [r7, #28]
 800b31e:	6a3a      	ldr	r2, [r7, #32]
 800b320:	e841 2300 	strex	r3, r2, [r1]
 800b324:	61bb      	str	r3, [r7, #24]
   return(result);
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1e6      	bne.n	800b2fa <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	378c      	adds	r7, #140	; 0x8c
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	0800ba61 	.word	0x0800ba61
 800b340:	0800b765 	.word	0x0800b765
 800b344:	0800b5ff 	.word	0x0800b5ff
 800b348:	0800b49b 	.word	0x0800b49b

0800b34c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b095      	sub	sp, #84	; 0x54
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b372:	643b      	str	r3, [r7, #64]	; 0x40
 800b374:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e6      	bne.n	800b354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3308      	adds	r3, #8
 800b38c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	e853 3f00 	ldrex	r3, [r3]
 800b394:	61fb      	str	r3, [r7, #28]
   return(result);
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b39c:	f023 0301 	bic.w	r3, r3, #1
 800b3a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e3      	bne.n	800b386 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d118      	bne.n	800b3f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	e853 3f00 	ldrex	r3, [r3]
 800b3d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f023 0310 	bic.w	r3, r3, #16
 800b3da:	647b      	str	r3, [r7, #68]	; 0x44
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3e4:	61bb      	str	r3, [r7, #24]
 800b3e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e8:	6979      	ldr	r1, [r7, #20]
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	e841 2300 	strex	r3, r2, [r1]
 800b3f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1e6      	bne.n	800b3c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b40c:	bf00      	nop
 800b40e:	3754      	adds	r7, #84	; 0x54
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b424:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7ff f996 	bl	800a768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b43c:	bf00      	nop
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	60bb      	str	r3, [r7, #8]
   return(result);
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b460:	61fb      	str	r3, [r7, #28]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46e:	6979      	ldr	r1, [r7, #20]
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	613b      	str	r3, [r7, #16]
   return(result);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e6      	bne.n	800b44c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2220      	movs	r2, #32
 800b482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff f961 	bl	800a754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b492:	bf00      	nop
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b096      	sub	sp, #88	; 0x58
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b2:	2b22      	cmp	r3, #34	; 0x22
 800b4b4:	f040 8095 	bne.w	800b5e2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b4be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b4c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b4c6:	b2d9      	uxtb	r1, r3
 800b4c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d2:	400a      	ands	r2, r1
 800b4d4:	b2d2      	uxtb	r2, r2
 800b4d6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4dc:	1c5a      	adds	r2, r3, #1
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d17a      	bne.n	800b5f6 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	e853 3f00 	ldrex	r3, [r3]
 800b50c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b514:	653b      	str	r3, [r7, #80]	; 0x50
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b51e:	647b      	str	r3, [r7, #68]	; 0x44
 800b520:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b526:	e841 2300 	strex	r3, r2, [r1]
 800b52a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e6      	bne.n	800b500 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3308      	adds	r3, #8
 800b538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	623b      	str	r3, [r7, #32]
   return(result);
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	f023 0301 	bic.w	r3, r3, #1
 800b548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3308      	adds	r3, #8
 800b550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b552:	633a      	str	r2, [r7, #48]	; 0x30
 800b554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e5      	bne.n	800b532 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2220      	movs	r2, #32
 800b56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d12e      	bne.n	800b5da <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0310 	bic.w	r3, r3, #16
 800b596:	64bb      	str	r3, [r7, #72]	; 0x48
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a4:	69b9      	ldr	r1, [r7, #24]
 800b5a6:	69fa      	ldr	r2, [r7, #28]
 800b5a8:	e841 2300 	strex	r3, r2, [r1]
 800b5ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e6      	bne.n	800b582 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	f003 0310 	and.w	r3, r3, #16
 800b5be:	2b10      	cmp	r3, #16
 800b5c0:	d103      	bne.n	800b5ca <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2210      	movs	r2, #16
 800b5c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff f8d2 	bl	800a77c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5d8:	e00d      	b.n	800b5f6 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fb f8d2 	bl	8006784 <HAL_UART_RxCpltCallback>
}
 800b5e0:	e009      	b.n	800b5f6 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	8b1b      	ldrh	r3, [r3, #24]
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0208 	orr.w	r2, r2, #8
 800b5f2:	b292      	uxth	r2, r2
 800b5f4:	831a      	strh	r2, [r3, #24]
}
 800b5f6:	bf00      	nop
 800b5f8:	3758      	adds	r7, #88	; 0x58
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b096      	sub	sp, #88	; 0x58
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b60c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b616:	2b22      	cmp	r3, #34	; 0x22
 800b618:	f040 8095 	bne.w	800b746 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b622:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b62c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b630:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b634:	4013      	ands	r3, r2
 800b636:	b29a      	uxth	r2, r3
 800b638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b63a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b640:	1c9a      	adds	r2, r3, #2
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b65e:	b29b      	uxth	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d17a      	bne.n	800b75a <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66c:	e853 3f00 	ldrex	r3, [r3]
 800b670:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b682:	643b      	str	r3, [r7, #64]	; 0x40
 800b684:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b686:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b68a:	e841 2300 	strex	r3, r2, [r1]
 800b68e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1e6      	bne.n	800b664 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3308      	adds	r3, #8
 800b69c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	e853 3f00 	ldrex	r3, [r3]
 800b6a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	f023 0301 	bic.w	r3, r3, #1
 800b6ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6be:	e841 2300 	strex	r3, r2, [r1]
 800b6c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1e5      	bne.n	800b696 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d12e      	bne.n	800b73e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	e853 3f00 	ldrex	r3, [r3]
 800b6f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f023 0310 	bic.w	r3, r3, #16
 800b6fa:	647b      	str	r3, [r7, #68]	; 0x44
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b704:	61bb      	str	r3, [r7, #24]
 800b706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6979      	ldr	r1, [r7, #20]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	613b      	str	r3, [r7, #16]
   return(result);
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e6      	bne.n	800b6e6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	f003 0310 	and.w	r3, r3, #16
 800b722:	2b10      	cmp	r3, #16
 800b724:	d103      	bne.n	800b72e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2210      	movs	r2, #16
 800b72c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff f820 	bl	800a77c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b73c:	e00d      	b.n	800b75a <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7fb f820 	bl	8006784 <HAL_UART_RxCpltCallback>
}
 800b744:	e009      	b.n	800b75a <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	8b1b      	ldrh	r3, [r3, #24]
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f042 0208 	orr.w	r2, r2, #8
 800b756:	b292      	uxth	r2, r2
 800b758:	831a      	strh	r2, [r3, #24]
}
 800b75a:	bf00      	nop
 800b75c:	3758      	adds	r7, #88	; 0x58
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
	...

0800b764 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b0a6      	sub	sp, #152	; 0x98
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b772:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	69db      	ldr	r3, [r3, #28]
 800b77c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b79a:	2b22      	cmp	r3, #34	; 0x22
 800b79c:	f040 814f 	bne.w	800ba3e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7aa:	e0f6      	b.n	800b99a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b7b2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7b6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b7ba:	b2d9      	uxtb	r1, r3
 800b7bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c6:	400a      	ands	r2, r1
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d053      	beq.n	800b8a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d011      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00b      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2201      	movs	r2, #1
 800b81c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b824:	f043 0201 	orr.w	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b82e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b832:	f003 0302 	and.w	r3, r3, #2
 800b836:	2b00      	cmp	r3, #0
 800b838:	d011      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b83a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00b      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2202      	movs	r2, #2
 800b84c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b854:	f043 0204 	orr.w	r2, r3, #4
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b85e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	2b00      	cmp	r3, #0
 800b868:	d011      	beq.n	800b88e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b86a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b86e:	f003 0301 	and.w	r3, r3, #1
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2204      	movs	r2, #4
 800b87c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b884:	f043 0202 	orr.w	r2, r3, #2
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7fe ff65 	bl	800a768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d173      	bne.n	800b99a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b8c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8d6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b8da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b8e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e4      	bne.n	800b8b2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8fe:	f023 0301 	bic.w	r3, r3, #1
 800b902:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3308      	adds	r3, #8
 800b90a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b90c:	657a      	str	r2, [r7, #84]	; 0x54
 800b90e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b912:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e3      	bne.n	800b8e8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b932:	2b01      	cmp	r3, #1
 800b934:	d12e      	bne.n	800b994 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	f023 0310 	bic.w	r3, r3, #16
 800b950:	67bb      	str	r3, [r7, #120]	; 0x78
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b95a:	643b      	str	r3, [r7, #64]	; 0x40
 800b95c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b962:	e841 2300 	strex	r3, r2, [r1]
 800b966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1e6      	bne.n	800b93c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69db      	ldr	r3, [r3, #28]
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	2b10      	cmp	r3, #16
 800b97a:	d103      	bne.n	800b984 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2210      	movs	r2, #16
 800b982:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7fe fef5 	bl	800a77c <HAL_UARTEx_RxEventCallback>
 800b992:	e002      	b.n	800b99a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7fa fef5 	bl	8006784 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b99a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b9a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b9a6:	f003 0320 	and.w	r3, r3, #32
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f47f aefe 	bne.w	800b7ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b9ba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d047      	beq.n	800ba52 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b9c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d240      	bcs.n	800ba52 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9e6:	673b      	str	r3, [r7, #112]	; 0x70
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b9f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e5      	bne.n	800b9d0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a15      	ldr	r2, [pc, #84]	; (800ba5c <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800ba08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f043 0320 	orr.w	r3, r3, #32
 800ba1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	461a      	mov	r2, r3
 800ba26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba28:	61bb      	str	r3, [r7, #24]
 800ba2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2c:	6979      	ldr	r1, [r7, #20]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	e841 2300 	strex	r3, r2, [r1]
 800ba34:	613b      	str	r3, [r7, #16]
   return(result);
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1e6      	bne.n	800ba0a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba3c:	e009      	b.n	800ba52 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	8b1b      	ldrh	r3, [r3, #24]
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0208 	orr.w	r2, r2, #8
 800ba4e:	b292      	uxth	r2, r2
 800ba50:	831a      	strh	r2, [r3, #24]
}
 800ba52:	bf00      	nop
 800ba54:	3798      	adds	r7, #152	; 0x98
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800b49b 	.word	0x0800b49b

0800ba60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b0a8      	sub	sp, #160	; 0xa0
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba6e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	69db      	ldr	r3, [r3, #28]
 800ba78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba96:	2b22      	cmp	r3, #34	; 0x22
 800ba98:	f040 8153 	bne.w	800bd42 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800baa2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800baa6:	e0fa      	b.n	800bc9e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800baae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800baba:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800babe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bac2:	4013      	ands	r3, r2
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800baca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad0:	1c9a      	adds	r2, r3, #2
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800badc:	b29b      	uxth	r3, r3
 800bade:	3b01      	subs	r3, #1
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800baf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800baf6:	f003 0307 	and.w	r3, r3, #7
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d053      	beq.n	800bba6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bafe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d011      	beq.n	800bb2e <UART_RxISR_16BIT_FIFOEN+0xce>
 800bb0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00b      	beq.n	800bb2e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb24:	f043 0201 	orr.w	r2, r3, #1
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d011      	beq.n	800bb5e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bb3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00b      	beq.n	800bb5e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb54:	f043 0204 	orr.w	r2, r3, #4
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb62:	f003 0304 	and.w	r3, r3, #4
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d011      	beq.n	800bb8e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bb6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00b      	beq.n	800bb8e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2204      	movs	r2, #4
 800bb7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb84:	f043 0202 	orr.w	r2, r3, #2
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d006      	beq.n	800bba6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7fe fde5 	bl	800a768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d175      	bne.n	800bc9e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bbc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbd6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bbda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bbdc:	e841 2300 	strex	r3, r2, [r1]
 800bbe0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bbe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1e4      	bne.n	800bbb2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3308      	adds	r3, #8
 800bbee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf2:	e853 3f00 	ldrex	r3, [r3]
 800bbf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbfe:	f023 0301 	bic.w	r3, r3, #1
 800bc02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc10:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e1      	bne.n	800bbe8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2220      	movs	r2, #32
 800bc28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d12e      	bne.n	800bc98 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	e853 3f00 	ldrex	r3, [r3]
 800bc4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc50:	f023 0310 	bic.w	r3, r3, #16
 800bc54:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc5e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e6      	bne.n	800bc40 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	f003 0310 	and.w	r3, r3, #16
 800bc7c:	2b10      	cmp	r3, #16
 800bc7e:	d103      	bne.n	800bc88 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2210      	movs	r2, #16
 800bc86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7fe fd73 	bl	800a77c <HAL_UARTEx_RxEventCallback>
 800bc96:	e002      	b.n	800bc9e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7fa fd73 	bl	8006784 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bc9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d006      	beq.n	800bcb4 <UART_RxISR_16BIT_FIFOEN+0x254>
 800bca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f47f aefa 	bne.w	800baa8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bcbe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d047      	beq.n	800bd56 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bccc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d240      	bcs.n	800bd56 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	3308      	adds	r3, #8
 800bcda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	e853 3f00 	ldrex	r3, [r3]
 800bce2:	623b      	str	r3, [r7, #32]
   return(result);
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcea:	677b      	str	r3, [r7, #116]	; 0x74
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bcf4:	633a      	str	r2, [r7, #48]	; 0x30
 800bcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcfc:	e841 2300 	strex	r3, r2, [r1]
 800bd00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1e5      	bne.n	800bcd4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a15      	ldr	r2, [pc, #84]	; (800bd60 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800bd0c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	e853 3f00 	ldrex	r3, [r3]
 800bd1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f043 0320 	orr.w	r3, r3, #32
 800bd22:	673b      	str	r3, [r7, #112]	; 0x70
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd2c:	61fb      	str	r3, [r7, #28]
 800bd2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd30:	69b9      	ldr	r1, [r7, #24]
 800bd32:	69fa      	ldr	r2, [r7, #28]
 800bd34:	e841 2300 	strex	r3, r2, [r1]
 800bd38:	617b      	str	r3, [r7, #20]
   return(result);
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1e6      	bne.n	800bd0e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd40:	e009      	b.n	800bd56 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	8b1b      	ldrh	r3, [r3, #24]
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f042 0208 	orr.w	r2, r2, #8
 800bd52:	b292      	uxth	r2, r2
 800bd54:	831a      	strh	r2, [r3, #24]
}
 800bd56:	bf00      	nop
 800bd58:	37a0      	adds	r7, #160	; 0xa0
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800b5ff 	.word	0x0800b5ff

0800bd64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d101      	bne.n	800bdb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	e027      	b.n	800be06 <HAL_UARTEx_DisableFifoMode+0x66>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2224      	movs	r2, #36	; 0x24
 800bdc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f022 0201 	bic.w	r2, r2, #1
 800bddc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bde4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be22:	2b01      	cmp	r3, #1
 800be24:	d101      	bne.n	800be2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be26:	2302      	movs	r3, #2
 800be28:	e02d      	b.n	800be86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2224      	movs	r2, #36	; 0x24
 800be36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f022 0201 	bic.w	r2, r2, #1
 800be50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f850 	bl	800bf0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b084      	sub	sp, #16
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d101      	bne.n	800bea6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bea2:	2302      	movs	r3, #2
 800bea4:	e02d      	b.n	800bf02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2224      	movs	r2, #36	; 0x24
 800beb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0201 	bic.w	r2, r2, #1
 800becc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f812 	bl	800bf0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2220      	movs	r2, #32
 800bef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d108      	bne.n	800bf2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf2c:	e031      	b.n	800bf92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf2e:	2308      	movs	r3, #8
 800bf30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf32:	2308      	movs	r3, #8
 800bf34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	0e5b      	lsrs	r3, r3, #25
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f003 0307 	and.w	r3, r3, #7
 800bf44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	0f5b      	lsrs	r3, r3, #29
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	f003 0307 	and.w	r3, r3, #7
 800bf54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	7b3a      	ldrb	r2, [r7, #12]
 800bf5a:	4911      	ldr	r1, [pc, #68]	; (800bfa0 <UARTEx_SetNbDataToProcess+0x94>)
 800bf5c:	5c8a      	ldrb	r2, [r1, r2]
 800bf5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf62:	7b3a      	ldrb	r2, [r7, #12]
 800bf64:	490f      	ldr	r1, [pc, #60]	; (800bfa4 <UARTEx_SetNbDataToProcess+0x98>)
 800bf66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf68:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	7b7a      	ldrb	r2, [r7, #13]
 800bf78:	4909      	ldr	r1, [pc, #36]	; (800bfa0 <UARTEx_SetNbDataToProcess+0x94>)
 800bf7a:	5c8a      	ldrb	r2, [r1, r2]
 800bf7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf80:	7b7a      	ldrb	r2, [r7, #13]
 800bf82:	4908      	ldr	r1, [pc, #32]	; (800bfa4 <UARTEx_SetNbDataToProcess+0x98>)
 800bf84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf86:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bf92:	bf00      	nop
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	08014074 	.word	0x08014074
 800bfa4:	0801407c 	.word	0x0801407c

0800bfa8 <__NVIC_SetPriority>:
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	4603      	mov	r3, r0
 800bfb0:	6039      	str	r1, [r7, #0]
 800bfb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	db0a      	blt.n	800bfd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	490c      	ldr	r1, [pc, #48]	; (800bff4 <__NVIC_SetPriority+0x4c>)
 800bfc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfc6:	0112      	lsls	r2, r2, #4
 800bfc8:	b2d2      	uxtb	r2, r2
 800bfca:	440b      	add	r3, r1
 800bfcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bfd0:	e00a      	b.n	800bfe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	4908      	ldr	r1, [pc, #32]	; (800bff8 <__NVIC_SetPriority+0x50>)
 800bfd8:	79fb      	ldrb	r3, [r7, #7]
 800bfda:	f003 030f 	and.w	r3, r3, #15
 800bfde:	3b04      	subs	r3, #4
 800bfe0:	0112      	lsls	r2, r2, #4
 800bfe2:	b2d2      	uxtb	r2, r2
 800bfe4:	440b      	add	r3, r1
 800bfe6:	761a      	strb	r2, [r3, #24]
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	e000e100 	.word	0xe000e100
 800bff8:	e000ed00 	.word	0xe000ed00

0800bffc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <SysTick_Handler+0x1c>)
 800c002:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c004:	f002 f9e0 	bl	800e3c8 <xTaskGetSchedulerState>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d001      	beq.n	800c012 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c00e:	f003 f8c3 	bl	800f198 <xPortSysTickHandler>
  }
}
 800c012:	bf00      	nop
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	e000e010 	.word	0xe000e010

0800c01c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c01c:	b580      	push	{r7, lr}
 800c01e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c020:	2100      	movs	r1, #0
 800c022:	f06f 0004 	mvn.w	r0, #4
 800c026:	f7ff ffbf 	bl	800bfa8 <__NVIC_SetPriority>
#endif
}
 800c02a:	bf00      	nop
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c036:	f3ef 8305 	mrs	r3, IPSR
 800c03a:	603b      	str	r3, [r7, #0]
  return(result);
 800c03c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c042:	f06f 0305 	mvn.w	r3, #5
 800c046:	607b      	str	r3, [r7, #4]
 800c048:	e00c      	b.n	800c064 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c04a:	4b0a      	ldr	r3, [pc, #40]	; (800c074 <osKernelInitialize+0x44>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d105      	bne.n	800c05e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c052:	4b08      	ldr	r3, [pc, #32]	; (800c074 <osKernelInitialize+0x44>)
 800c054:	2201      	movs	r2, #1
 800c056:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c058:	2300      	movs	r3, #0
 800c05a:	607b      	str	r3, [r7, #4]
 800c05c:	e002      	b.n	800c064 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c05e:	f04f 33ff 	mov.w	r3, #4294967295
 800c062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c064:	687b      	ldr	r3, [r7, #4]
}
 800c066:	4618      	mov	r0, r3
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	200005ec 	.word	0x200005ec

0800c078 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c07e:	f3ef 8305 	mrs	r3, IPSR
 800c082:	603b      	str	r3, [r7, #0]
  return(result);
 800c084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c08a:	f06f 0305 	mvn.w	r3, #5
 800c08e:	607b      	str	r3, [r7, #4]
 800c090:	e010      	b.n	800c0b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c092:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <osKernelStart+0x48>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d109      	bne.n	800c0ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c09a:	f7ff ffbf 	bl	800c01c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c09e:	4b08      	ldr	r3, [pc, #32]	; (800c0c0 <osKernelStart+0x48>)
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c0a4:	f001 fd38 	bl	800db18 <vTaskStartScheduler>
      stat = osOK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	607b      	str	r3, [r7, #4]
 800c0ac:	e002      	b.n	800c0b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0b4:	687b      	ldr	r3, [r7, #4]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	200005ec 	.word	0x200005ec

0800c0c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08e      	sub	sp, #56	; 0x38
 800c0c8:	af04      	add	r7, sp, #16
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0d4:	f3ef 8305 	mrs	r3, IPSR
 800c0d8:	617b      	str	r3, [r7, #20]
  return(result);
 800c0da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d17e      	bne.n	800c1de <osThreadNew+0x11a>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d07b      	beq.n	800c1de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c0e6:	2380      	movs	r3, #128	; 0x80
 800c0e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c0ea:	2318      	movs	r3, #24
 800c0ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d045      	beq.n	800c18a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d002      	beq.n	800c10c <osThreadNew+0x48>
        name = attr->name;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d008      	beq.n	800c132 <osThreadNew+0x6e>
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	2b38      	cmp	r3, #56	; 0x38
 800c124:	d805      	bhi.n	800c132 <osThreadNew+0x6e>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <osThreadNew+0x72>
        return (NULL);
 800c132:	2300      	movs	r3, #0
 800c134:	e054      	b.n	800c1e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	089b      	lsrs	r3, r3, #2
 800c144:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00e      	beq.n	800c16c <osThreadNew+0xa8>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	2b5b      	cmp	r3, #91	; 0x5b
 800c154:	d90a      	bls.n	800c16c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d006      	beq.n	800c16c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d002      	beq.n	800c16c <osThreadNew+0xa8>
        mem = 1;
 800c166:	2301      	movs	r3, #1
 800c168:	61bb      	str	r3, [r7, #24]
 800c16a:	e010      	b.n	800c18e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10c      	bne.n	800c18e <osThreadNew+0xca>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d108      	bne.n	800c18e <osThreadNew+0xca>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d104      	bne.n	800c18e <osThreadNew+0xca>
          mem = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	61bb      	str	r3, [r7, #24]
 800c188:	e001      	b.n	800c18e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d110      	bne.n	800c1b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c19c:	9202      	str	r2, [sp, #8]
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6a3a      	ldr	r2, [r7, #32]
 800c1a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f001 fade 	bl	800d76c <xTaskCreateStatic>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	613b      	str	r3, [r7, #16]
 800c1b4:	e013      	b.n	800c1de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d110      	bne.n	800c1de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	f107 0310 	add.w	r3, r7, #16
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f001 fb29 	bl	800d826 <xTaskCreate>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d001      	beq.n	800c1de <osThreadNew+0x11a>
            hTask = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c1de:	693b      	ldr	r3, [r7, #16]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3728      	adds	r7, #40	; 0x28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1f0:	f3ef 8305 	mrs	r3, IPSR
 800c1f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d003      	beq.n	800c204 <osDelay+0x1c>
    stat = osErrorISR;
 800c1fc:	f06f 0305 	mvn.w	r3, #5
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	e007      	b.n	800c214 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c204:	2300      	movs	r3, #0
 800c206:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f001 fc4e 	bl	800dab0 <vTaskDelay>
    }
  }

  return (stat);
 800c214:	68fb      	ldr	r3, [r7, #12]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c21e:	b580      	push	{r7, lr}
 800c220:	b088      	sub	sp, #32
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c22a:	f3ef 8305 	mrs	r3, IPSR
 800c22e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c230:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c232:	2b00      	cmp	r3, #0
 800c234:	d174      	bne.n	800c320 <osMutexNew+0x102>
    if (attr != NULL) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	61bb      	str	r3, [r7, #24]
 800c242:	e001      	b.n	800c248 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <osMutexNew+0x3a>
      rmtx = 1U;
 800c252:	2301      	movs	r3, #1
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	e001      	b.n	800c25c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	f003 0308 	and.w	r3, r3, #8
 800c262:	2b00      	cmp	r3, #0
 800c264:	d15c      	bne.n	800c320 <osMutexNew+0x102>
      mem = -1;
 800c266:	f04f 33ff 	mov.w	r3, #4294967295
 800c26a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d015      	beq.n	800c29e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <osMutexNew+0x6a>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	2b4f      	cmp	r3, #79	; 0x4f
 800c280:	d902      	bls.n	800c288 <osMutexNew+0x6a>
          mem = 1;
 800c282:	2301      	movs	r3, #1
 800c284:	613b      	str	r3, [r7, #16]
 800c286:	e00c      	b.n	800c2a2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d108      	bne.n	800c2a2 <osMutexNew+0x84>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d104      	bne.n	800c2a2 <osMutexNew+0x84>
            mem = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	613b      	str	r3, [r7, #16]
 800c29c:	e001      	b.n	800c2a2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d112      	bne.n	800c2ce <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d007      	beq.n	800c2be <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	2004      	movs	r0, #4
 800c2b6:	f000 fc48 	bl	800cb4a <xQueueCreateMutexStatic>
 800c2ba:	61f8      	str	r0, [r7, #28]
 800c2bc:	e016      	b.n	800c2ec <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	f000 fc40 	bl	800cb4a <xQueueCreateMutexStatic>
 800c2ca:	61f8      	str	r0, [r7, #28]
 800c2cc:	e00e      	b.n	800c2ec <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10b      	bne.n	800c2ec <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d004      	beq.n	800c2e4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c2da:	2004      	movs	r0, #4
 800c2dc:	f000 fc1d 	bl	800cb1a <xQueueCreateMutex>
 800c2e0:	61f8      	str	r0, [r7, #28]
 800c2e2:	e003      	b.n	800c2ec <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	f000 fc18 	bl	800cb1a <xQueueCreateMutex>
 800c2ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00c      	beq.n	800c30c <osMutexNew+0xee>
        if (attr != NULL) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <osMutexNew+0xe2>
          name = attr->name;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	e001      	b.n	800c304 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c300:	2300      	movs	r3, #0
 800c302:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c304:	68f9      	ldr	r1, [r7, #12]
 800c306:	69f8      	ldr	r0, [r7, #28]
 800c308:	f001 f9d2 	bl	800d6b0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d006      	beq.n	800c320 <osMutexNew+0x102>
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d003      	beq.n	800c320 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	f043 0301 	orr.w	r3, r3, #1
 800c31e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c320:	69fb      	ldr	r3, [r7, #28]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3720      	adds	r7, #32
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b086      	sub	sp, #24
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f023 0301 	bic.w	r3, r3, #1
 800c33a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c344:	2300      	movs	r3, #0
 800c346:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c348:	f3ef 8305 	mrs	r3, IPSR
 800c34c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c34e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c350:	2b00      	cmp	r3, #0
 800c352:	d003      	beq.n	800c35c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c354:	f06f 0305 	mvn.w	r3, #5
 800c358:	617b      	str	r3, [r7, #20]
 800c35a:	e02c      	b.n	800c3b6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d103      	bne.n	800c36a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c362:	f06f 0303 	mvn.w	r3, #3
 800c366:	617b      	str	r3, [r7, #20]
 800c368:	e025      	b.n	800c3b6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d011      	beq.n	800c394 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6938      	ldr	r0, [r7, #16]
 800c374:	f000 fc38 	bl	800cbe8 <xQueueTakeMutexRecursive>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d01b      	beq.n	800c3b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d003      	beq.n	800c38c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c384:	f06f 0301 	mvn.w	r3, #1
 800c388:	617b      	str	r3, [r7, #20]
 800c38a:	e014      	b.n	800c3b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c38c:	f06f 0302 	mvn.w	r3, #2
 800c390:	617b      	str	r3, [r7, #20]
 800c392:	e010      	b.n	800c3b6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6938      	ldr	r0, [r7, #16]
 800c398:	f000 fed6 	bl	800d148 <xQueueSemaphoreTake>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d009      	beq.n	800c3b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c3a8:	f06f 0301 	mvn.w	r3, #1
 800c3ac:	617b      	str	r3, [r7, #20]
 800c3ae:	e002      	b.n	800c3b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c3b0:	f06f 0302 	mvn.w	r3, #2
 800c3b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c3b6:	697b      	ldr	r3, [r7, #20]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f023 0301 	bic.w	r3, r3, #1
 800c3ce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3dc:	f3ef 8305 	mrs	r3, IPSR
 800c3e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3e2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c3e8:	f06f 0305 	mvn.w	r3, #5
 800c3ec:	617b      	str	r3, [r7, #20]
 800c3ee:	e01f      	b.n	800c430 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d103      	bne.n	800c3fe <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c3f6:	f06f 0303 	mvn.w	r3, #3
 800c3fa:	617b      	str	r3, [r7, #20]
 800c3fc:	e018      	b.n	800c430 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d009      	beq.n	800c418 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c404:	6938      	ldr	r0, [r7, #16]
 800c406:	f000 fbbb 	bl	800cb80 <xQueueGiveMutexRecursive>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d00f      	beq.n	800c430 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c410:	f06f 0302 	mvn.w	r3, #2
 800c414:	617b      	str	r3, [r7, #20]
 800c416:	e00b      	b.n	800c430 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c418:	2300      	movs	r3, #0
 800c41a:	2200      	movs	r2, #0
 800c41c:	2100      	movs	r1, #0
 800c41e:	6938      	ldr	r0, [r7, #16]
 800c420:	f000 fc18 	bl	800cc54 <xQueueGenericSend>
 800c424:	4603      	mov	r3, r0
 800c426:	2b01      	cmp	r3, #1
 800c428:	d002      	beq.n	800c430 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c42a:	f06f 0302 	mvn.w	r3, #2
 800c42e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c430:	697b      	ldr	r3, [r7, #20]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b08a      	sub	sp, #40	; 0x28
 800c43e:	af02      	add	r7, sp, #8
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c446:	2300      	movs	r3, #0
 800c448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c44a:	f3ef 8305 	mrs	r3, IPSR
 800c44e:	613b      	str	r3, [r7, #16]
  return(result);
 800c450:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c452:	2b00      	cmp	r3, #0
 800c454:	d15f      	bne.n	800c516 <osMessageQueueNew+0xdc>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d05c      	beq.n	800c516 <osMessageQueueNew+0xdc>
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d059      	beq.n	800c516 <osMessageQueueNew+0xdc>
    mem = -1;
 800c462:	f04f 33ff 	mov.w	r3, #4294967295
 800c466:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d029      	beq.n	800c4c2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d012      	beq.n	800c49c <osMessageQueueNew+0x62>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	2b4f      	cmp	r3, #79	; 0x4f
 800c47c:	d90e      	bls.n	800c49c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00a      	beq.n	800c49c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	695a      	ldr	r2, [r3, #20]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	68b9      	ldr	r1, [r7, #8]
 800c48e:	fb01 f303 	mul.w	r3, r1, r3
 800c492:	429a      	cmp	r2, r3
 800c494:	d302      	bcc.n	800c49c <osMessageQueueNew+0x62>
        mem = 1;
 800c496:	2301      	movs	r3, #1
 800c498:	61bb      	str	r3, [r7, #24]
 800c49a:	e014      	b.n	800c4c6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d110      	bne.n	800c4c6 <osMessageQueueNew+0x8c>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10c      	bne.n	800c4c6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d108      	bne.n	800c4c6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d104      	bne.n	800c4c6 <osMessageQueueNew+0x8c>
          mem = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	61bb      	str	r3, [r7, #24]
 800c4c0:	e001      	b.n	800c4c6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d10b      	bne.n	800c4e4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	691a      	ldr	r2, [r3, #16]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	9100      	str	r1, [sp, #0]
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f000 fa2e 	bl	800c93c <xQueueGenericCreateStatic>
 800c4e0:	61f8      	str	r0, [r7, #28]
 800c4e2:	e008      	b.n	800c4f6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d105      	bne.n	800c4f6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	68b9      	ldr	r1, [r7, #8]
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 fa9c 	bl	800ca2c <xQueueGenericCreate>
 800c4f4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00c      	beq.n	800c516 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <osMessageQueueNew+0xd0>
        name = attr->name;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	e001      	b.n	800c50e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c50e:	6979      	ldr	r1, [r7, #20]
 800c510:	69f8      	ldr	r0, [r7, #28]
 800c512:	f001 f8cd 	bl	800d6b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c516:	69fb      	ldr	r3, [r7, #28]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c520:	b580      	push	{r7, lr}
 800c522:	b088      	sub	sp, #32
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	4613      	mov	r3, r2
 800c52e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c534:	2300      	movs	r3, #0
 800c536:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c538:	f3ef 8305 	mrs	r3, IPSR
 800c53c:	617b      	str	r3, [r7, #20]
  return(result);
 800c53e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c540:	2b00      	cmp	r3, #0
 800c542:	d028      	beq.n	800c596 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d005      	beq.n	800c556 <osMessageQueuePut+0x36>
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <osMessageQueuePut+0x36>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c556:	f06f 0303 	mvn.w	r3, #3
 800c55a:	61fb      	str	r3, [r7, #28]
 800c55c:	e038      	b.n	800c5d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c55e:	2300      	movs	r3, #0
 800c560:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c562:	f107 0210 	add.w	r2, r7, #16
 800c566:	2300      	movs	r3, #0
 800c568:	68b9      	ldr	r1, [r7, #8]
 800c56a:	69b8      	ldr	r0, [r7, #24]
 800c56c:	f000 fc70 	bl	800ce50 <xQueueGenericSendFromISR>
 800c570:	4603      	mov	r3, r0
 800c572:	2b01      	cmp	r3, #1
 800c574:	d003      	beq.n	800c57e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c576:	f06f 0302 	mvn.w	r3, #2
 800c57a:	61fb      	str	r3, [r7, #28]
 800c57c:	e028      	b.n	800c5d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d025      	beq.n	800c5d0 <osMessageQueuePut+0xb0>
 800c584:	4b15      	ldr	r3, [pc, #84]	; (800c5dc <osMessageQueuePut+0xbc>)
 800c586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	e01c      	b.n	800c5d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <osMessageQueuePut+0x82>
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d103      	bne.n	800c5aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c5a2:	f06f 0303 	mvn.w	r3, #3
 800c5a6:	61fb      	str	r3, [r7, #28]
 800c5a8:	e012      	b.n	800c5d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	69b8      	ldr	r0, [r7, #24]
 800c5b2:	f000 fb4f 	bl	800cc54 <xQueueGenericSend>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d009      	beq.n	800c5d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d003      	beq.n	800c5ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c5c2:	f06f 0301 	mvn.w	r3, #1
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	e002      	b.n	800c5d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c5ca:	f06f 0302 	mvn.w	r3, #2
 800c5ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c5d0:	69fb      	ldr	r3, [r7, #28]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3720      	adds	r7, #32
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	e000ed04 	.word	0xe000ed04

0800c5e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5f6:	f3ef 8305 	mrs	r3, IPSR
 800c5fa:	617b      	str	r3, [r7, #20]
  return(result);
 800c5fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d028      	beq.n	800c654 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d005      	beq.n	800c614 <osMessageQueueGet+0x34>
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <osMessageQueueGet+0x34>
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d003      	beq.n	800c61c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c614:	f06f 0303 	mvn.w	r3, #3
 800c618:	61fb      	str	r3, [r7, #28]
 800c61a:	e037      	b.n	800c68c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c61c:	2300      	movs	r3, #0
 800c61e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c620:	f107 0310 	add.w	r3, r7, #16
 800c624:	461a      	mov	r2, r3
 800c626:	68b9      	ldr	r1, [r7, #8]
 800c628:	69b8      	ldr	r0, [r7, #24]
 800c62a:	f000 fe99 	bl	800d360 <xQueueReceiveFromISR>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b01      	cmp	r3, #1
 800c632:	d003      	beq.n	800c63c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c634:	f06f 0302 	mvn.w	r3, #2
 800c638:	61fb      	str	r3, [r7, #28]
 800c63a:	e027      	b.n	800c68c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d024      	beq.n	800c68c <osMessageQueueGet+0xac>
 800c642:	4b15      	ldr	r3, [pc, #84]	; (800c698 <osMessageQueueGet+0xb8>)
 800c644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	e01b      	b.n	800c68c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <osMessageQueueGet+0x80>
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d103      	bne.n	800c668 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c660:	f06f 0303 	mvn.w	r3, #3
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	e011      	b.n	800c68c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	68b9      	ldr	r1, [r7, #8]
 800c66c:	69b8      	ldr	r0, [r7, #24]
 800c66e:	f000 fc8b 	bl	800cf88 <xQueueReceive>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	d009      	beq.n	800c68c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c67e:	f06f 0301 	mvn.w	r3, #1
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	e002      	b.n	800c68c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c686:	f06f 0302 	mvn.w	r3, #2
 800c68a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c68c:	69fb      	ldr	r3, [r7, #28]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3720      	adds	r7, #32
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4a07      	ldr	r2, [pc, #28]	; (800c6c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c6ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	4a06      	ldr	r2, [pc, #24]	; (800c6cc <vApplicationGetIdleTaskMemory+0x30>)
 800c6b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2280      	movs	r2, #128	; 0x80
 800c6b8:	601a      	str	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	200005f0 	.word	0x200005f0
 800c6cc:	2000064c 	.word	0x2000064c

0800c6d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	4a07      	ldr	r2, [pc, #28]	; (800c6fc <vApplicationGetTimerTaskMemory+0x2c>)
 800c6e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	4a06      	ldr	r2, [pc, #24]	; (800c700 <vApplicationGetTimerTaskMemory+0x30>)
 800c6e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6ee:	601a      	str	r2, [r3, #0]
}
 800c6f0:	bf00      	nop
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	2000084c 	.word	0x2000084c
 800c700:	200008a8 	.word	0x200008a8

0800c704 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f103 0208 	add.w	r2, r3, #8
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f04f 32ff 	mov.w	r2, #4294967295
 800c71c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f103 0208 	add.w	r2, r3, #8
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f103 0208 	add.w	r2, r3, #8
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c752:	bf00      	nop
 800c754:	370c      	adds	r7, #12
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c75e:	b480      	push	{r7}
 800c760:	b085      	sub	sp, #20
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	601a      	str	r2, [r3, #0]
}
 800c79a:	bf00      	nop
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b085      	sub	sp, #20
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7bc:	d103      	bne.n	800c7c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	e00c      	b.n	800c7e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	60fb      	str	r3, [r7, #12]
 800c7cc:	e002      	b.n	800c7d4 <vListInsert+0x2e>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d2f6      	bcs.n	800c7ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	685a      	ldr	r2, [r3, #4]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	1c5a      	adds	r2, r3, #1
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	601a      	str	r2, [r3, #0]
}
 800c80c:	bf00      	nop
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	6892      	ldr	r2, [r2, #8]
 800c82e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	6852      	ldr	r2, [r2, #4]
 800c838:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d103      	bne.n	800c84c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689a      	ldr	r2, [r3, #8]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	1e5a      	subs	r2, r3, #1
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10a      	bne.n	800c896 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c896:	f002 fbed 	bl	800f074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a2:	68f9      	ldr	r1, [r7, #12]
 800c8a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8a6:	fb01 f303 	mul.w	r3, r1, r3
 800c8aa:	441a      	add	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	68f9      	ldr	r1, [r7, #12]
 800c8ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8cc:	fb01 f303 	mul.w	r3, r1, r3
 800c8d0:	441a      	add	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	22ff      	movs	r2, #255	; 0xff
 800c8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	22ff      	movs	r2, #255	; 0xff
 800c8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d114      	bne.n	800c916 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01a      	beq.n	800c92a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3310      	adds	r3, #16
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 fb97 	bl	800e02c <xTaskRemoveFromEventList>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d012      	beq.n	800c92a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c904:	4b0c      	ldr	r3, [pc, #48]	; (800c938 <xQueueGenericReset+0xcc>)
 800c906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	e009      	b.n	800c92a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3310      	adds	r3, #16
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fef2 	bl	800c704 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3324      	adds	r3, #36	; 0x24
 800c924:	4618      	mov	r0, r3
 800c926:	f7ff feed 	bl	800c704 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c92a:	f002 fbd3 	bl	800f0d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c92e:	2301      	movs	r3, #1
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08e      	sub	sp, #56	; 0x38
 800c940:	af02      	add	r7, sp, #8
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10a      	bne.n	800c966 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10a      	bne.n	800c982 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <xQueueGenericCreateStatic+0x52>
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d001      	beq.n	800c992 <xQueueGenericCreateStatic+0x56>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <xQueueGenericCreateStatic+0x58>
 800c992:	2300      	movs	r3, #0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	623b      	str	r3, [r7, #32]
}
 800c9aa:	bf00      	nop
 800c9ac:	e7fe      	b.n	800c9ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <xQueueGenericCreateStatic+0x7e>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <xQueueGenericCreateStatic+0x82>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <xQueueGenericCreateStatic+0x84>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10a      	bne.n	800c9da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	61fb      	str	r3, [r7, #28]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c9da:	2350      	movs	r3, #80	; 0x50
 800c9dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b50      	cmp	r3, #80	; 0x50
 800c9e2:	d00a      	beq.n	800c9fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	61bb      	str	r3, [r7, #24]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c9fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00d      	beq.n	800ca22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	4613      	mov	r3, r2
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	68b9      	ldr	r1, [r7, #8]
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f000 f83f 	bl	800caa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3730      	adds	r7, #48	; 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08a      	sub	sp, #40	; 0x28
 800ca30:	af02      	add	r7, sp, #8
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	4613      	mov	r3, r2
 800ca38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	613b      	str	r3, [r7, #16]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	fb02 f303 	mul.w	r3, r2, r3
 800ca5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	3350      	adds	r3, #80	; 0x50
 800ca64:	4618      	mov	r0, r3
 800ca66:	f002 fc27 	bl	800f2b8 <pvPortMalloc>
 800ca6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d011      	beq.n	800ca96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	3350      	adds	r3, #80	; 0x50
 800ca7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 f805 	bl	800caa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca96:	69bb      	ldr	r3, [r7, #24]
	}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3720      	adds	r7, #32
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	e002      	b.n	800cac2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cace:	2101      	movs	r1, #1
 800cad0:	69b8      	ldr	r0, [r7, #24]
 800cad2:	f7ff fecb 	bl	800c86c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	78fa      	ldrb	r2, [r7, #3]
 800cada:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b082      	sub	sp, #8
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00e      	beq.n	800cb12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cb06:	2300      	movs	r3, #0
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f8a1 	bl	800cc54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b086      	sub	sp, #24
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	4603      	mov	r3, r0
 800cb22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb24:	2301      	movs	r3, #1
 800cb26:	617b      	str	r3, [r7, #20]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	6939      	ldr	r1, [r7, #16]
 800cb32:	6978      	ldr	r0, [r7, #20]
 800cb34:	f7ff ff7a 	bl	800ca2c <xQueueGenericCreate>
 800cb38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f7ff ffd3 	bl	800cae6 <prvInitialiseMutex>

		return xNewQueue;
 800cb40:	68fb      	ldr	r3, [r7, #12]
	}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b088      	sub	sp, #32
 800cb4e:	af02      	add	r7, sp, #8
 800cb50:	4603      	mov	r3, r0
 800cb52:	6039      	str	r1, [r7, #0]
 800cb54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb56:	2301      	movs	r3, #1
 800cb58:	617b      	str	r3, [r7, #20]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2200      	movs	r2, #0
 800cb66:	6939      	ldr	r1, [r7, #16]
 800cb68:	6978      	ldr	r0, [r7, #20]
 800cb6a:	f7ff fee7 	bl	800c93c <xQueueGenericCreateStatic>
 800cb6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff ffb8 	bl	800cae6 <prvInitialiseMutex>

		return xNewQueue;
 800cb76:	68fb      	ldr	r3, [r7, #12]
	}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3718      	adds	r7, #24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cb80:	b590      	push	{r4, r7, lr}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10a      	bne.n	800cba8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	60fb      	str	r3, [r7, #12]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	689c      	ldr	r4, [r3, #8]
 800cbac:	f001 fbfc 	bl	800e3a8 <xTaskGetCurrentTaskHandle>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	429c      	cmp	r4, r3
 800cbb4:	d111      	bne.n	800cbda <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	1e5a      	subs	r2, r3, #1
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d105      	bne.n	800cbd4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	6938      	ldr	r0, [r7, #16]
 800cbd0:	f000 f840 	bl	800cc54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	617b      	str	r3, [r7, #20]
 800cbd8:	e001      	b.n	800cbde <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cbde:	697b      	ldr	r3, [r7, #20]
	}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	371c      	adds	r7, #28
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd90      	pop	{r4, r7, pc}

0800cbe8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cbe8:	b590      	push	{r4, r7, lr}
 800cbea:	b087      	sub	sp, #28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	60fb      	str	r3, [r7, #12]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	689c      	ldr	r4, [r3, #8]
 800cc16:	f001 fbc7 	bl	800e3a8 <xTaskGetCurrentTaskHandle>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	429c      	cmp	r4, r3
 800cc1e:	d107      	bne.n	800cc30 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	e00c      	b.n	800cc4a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cc30:	6839      	ldr	r1, [r7, #0]
 800cc32:	6938      	ldr	r0, [r7, #16]
 800cc34:	f000 fa88 	bl	800d148 <xQueueSemaphoreTake>
 800cc38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d004      	beq.n	800cc4a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	1c5a      	adds	r2, r3, #1
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cc4a:	697b      	ldr	r3, [r7, #20]
	}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	371c      	adds	r7, #28
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd90      	pop	{r4, r7, pc}

0800cc54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b08e      	sub	sp, #56	; 0x38
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc62:	2300      	movs	r3, #0
 800cc64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10a      	bne.n	800cc86 <xQueueGenericSend+0x32>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d103      	bne.n	800cc94 <xQueueGenericSend+0x40>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <xQueueGenericSend+0x44>
 800cc94:	2301      	movs	r3, #1
 800cc96:	e000      	b.n	800cc9a <xQueueGenericSend+0x46>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10a      	bne.n	800ccb4 <xQueueGenericSend+0x60>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccb0:	bf00      	nop
 800ccb2:	e7fe      	b.n	800ccb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d103      	bne.n	800ccc2 <xQueueGenericSend+0x6e>
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d101      	bne.n	800ccc6 <xQueueGenericSend+0x72>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e000      	b.n	800ccc8 <xQueueGenericSend+0x74>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10a      	bne.n	800cce2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd0:	f383 8811 	msr	BASEPRI, r3
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	623b      	str	r3, [r7, #32]
}
 800ccde:	bf00      	nop
 800cce0:	e7fe      	b.n	800cce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cce2:	f001 fb71 	bl	800e3c8 <xTaskGetSchedulerState>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <xQueueGenericSend+0x9e>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <xQueueGenericSend+0xa2>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e000      	b.n	800ccf8 <xQueueGenericSend+0xa4>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <xQueueGenericSend+0xbe>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	61fb      	str	r3, [r7, #28]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd12:	f002 f9af 	bl	800f074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d302      	bcc.n	800cd28 <xQueueGenericSend+0xd4>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d129      	bne.n	800cd7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd2e:	f000 fbaf 	bl	800d490 <prvCopyDataToQueue>
 800cd32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d010      	beq.n	800cd5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3e:	3324      	adds	r3, #36	; 0x24
 800cd40:	4618      	mov	r0, r3
 800cd42:	f001 f973 	bl	800e02c <xTaskRemoveFromEventList>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d013      	beq.n	800cd74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd4c:	4b3f      	ldr	r3, [pc, #252]	; (800ce4c <xQueueGenericSend+0x1f8>)
 800cd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	e00a      	b.n	800cd74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d007      	beq.n	800cd74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd64:	4b39      	ldr	r3, [pc, #228]	; (800ce4c <xQueueGenericSend+0x1f8>)
 800cd66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd74:	f002 f9ae 	bl	800f0d4 <vPortExitCritical>
				return pdPASS;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e063      	b.n	800ce44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d103      	bne.n	800cd8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd82:	f002 f9a7 	bl	800f0d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e05c      	b.n	800ce44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d106      	bne.n	800cd9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd90:	f107 0314 	add.w	r3, r7, #20
 800cd94:	4618      	mov	r0, r3
 800cd96:	f001 f9ad 	bl	800e0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd9e:	f002 f999 	bl	800f0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cda2:	f000 ff1f 	bl	800dbe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cda6:	f002 f965 	bl	800f074 <vPortEnterCritical>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdb0:	b25b      	sxtb	r3, r3
 800cdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb6:	d103      	bne.n	800cdc0 <xQueueGenericSend+0x16c>
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdc6:	b25b      	sxtb	r3, r3
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdcc:	d103      	bne.n	800cdd6 <xQueueGenericSend+0x182>
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdd6:	f002 f97d 	bl	800f0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdda:	1d3a      	adds	r2, r7, #4
 800cddc:	f107 0314 	add.w	r3, r7, #20
 800cde0:	4611      	mov	r1, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f001 f99c 	bl	800e120 <xTaskCheckForTimeOut>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d124      	bne.n	800ce38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdf0:	f000 fc46 	bl	800d680 <prvIsQueueFull>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d018      	beq.n	800ce2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	3310      	adds	r3, #16
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	4611      	mov	r1, r2
 800ce02:	4618      	mov	r0, r3
 800ce04:	f001 f8c2 	bl	800df8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce0a:	f000 fbd1 	bl	800d5b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce0e:	f000 fef7 	bl	800dc00 <xTaskResumeAll>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f47f af7c 	bne.w	800cd12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <xQueueGenericSend+0x1f8>)
 800ce1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	e772      	b.n	800cd12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce2e:	f000 fbbf 	bl	800d5b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce32:	f000 fee5 	bl	800dc00 <xTaskResumeAll>
 800ce36:	e76c      	b.n	800cd12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce3a:	f000 fbb9 	bl	800d5b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce3e:	f000 fedf 	bl	800dc00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3738      	adds	r7, #56	; 0x38
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	e000ed04 	.word	0xe000ed04

0800ce50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b090      	sub	sp, #64	; 0x40
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d103      	bne.n	800ce8c <xQueueGenericSendFromISR+0x3c>
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <xQueueGenericSendFromISR+0x40>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e000      	b.n	800ce92 <xQueueGenericSendFromISR+0x42>
 800ce90:	2300      	movs	r3, #0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10a      	bne.n	800ceac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cea8:	bf00      	nop
 800ceaa:	e7fe      	b.n	800ceaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d103      	bne.n	800ceba <xQueueGenericSendFromISR+0x6a>
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d101      	bne.n	800cebe <xQueueGenericSendFromISR+0x6e>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e000      	b.n	800cec0 <xQueueGenericSendFromISR+0x70>
 800cebe:	2300      	movs	r3, #0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10a      	bne.n	800ceda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	623b      	str	r3, [r7, #32]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ceda:	f002 f9ad 	bl	800f238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cede:	f3ef 8211 	mrs	r2, BASEPRI
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	61fa      	str	r2, [r7, #28]
 800cef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d302      	bcc.n	800cf0c <xQueueGenericSendFromISR+0xbc>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d12f      	bne.n	800cf6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	68b9      	ldr	r1, [r7, #8]
 800cf20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf22:	f000 fab5 	bl	800d490 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2e:	d112      	bne.n	800cf56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d016      	beq.n	800cf66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	3324      	adds	r3, #36	; 0x24
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f001 f875 	bl	800e02c <xTaskRemoveFromEventList>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00e      	beq.n	800cf66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00b      	beq.n	800cf66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e007      	b.n	800cf66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	b25a      	sxtb	r2, r3
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf66:	2301      	movs	r3, #1
 800cf68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cf6a:	e001      	b.n	800cf70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3740      	adds	r7, #64	; 0x40
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08c      	sub	sp, #48	; 0x30
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10a      	bne.n	800cfb8 <xQueueReceive+0x30>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	623b      	str	r3, [r7, #32]
}
 800cfb4:	bf00      	nop
 800cfb6:	e7fe      	b.n	800cfb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d103      	bne.n	800cfc6 <xQueueReceive+0x3e>
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <xQueueReceive+0x42>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e000      	b.n	800cfcc <xQueueReceive+0x44>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10a      	bne.n	800cfe6 <xQueueReceive+0x5e>
	__asm volatile
 800cfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	61fb      	str	r3, [r7, #28]
}
 800cfe2:	bf00      	nop
 800cfe4:	e7fe      	b.n	800cfe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfe6:	f001 f9ef 	bl	800e3c8 <xTaskGetSchedulerState>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d102      	bne.n	800cff6 <xQueueReceive+0x6e>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <xQueueReceive+0x72>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e000      	b.n	800cffc <xQueueReceive+0x74>
 800cffa:	2300      	movs	r3, #0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <xQueueReceive+0x8e>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	61bb      	str	r3, [r7, #24]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d016:	f002 f82d 	bl	800f074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	2b00      	cmp	r3, #0
 800d024:	d01f      	beq.n	800d066 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d02a:	f000 fa9b 	bl	800d564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	1e5a      	subs	r2, r3, #1
 800d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d034:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00f      	beq.n	800d05e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	3310      	adds	r3, #16
 800d042:	4618      	mov	r0, r3
 800d044:	f000 fff2 	bl	800e02c <xTaskRemoveFromEventList>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d007      	beq.n	800d05e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d04e:	4b3d      	ldr	r3, [pc, #244]	; (800d144 <xQueueReceive+0x1bc>)
 800d050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d05e:	f002 f839 	bl	800f0d4 <vPortExitCritical>
				return pdPASS;
 800d062:	2301      	movs	r3, #1
 800d064:	e069      	b.n	800d13a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d103      	bne.n	800d074 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d06c:	f002 f832 	bl	800f0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d070:	2300      	movs	r3, #0
 800d072:	e062      	b.n	800d13a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d07a:	f107 0310 	add.w	r3, r7, #16
 800d07e:	4618      	mov	r0, r3
 800d080:	f001 f838 	bl	800e0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d088:	f002 f824 	bl	800f0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d08c:	f000 fdaa 	bl	800dbe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d090:	f001 fff0 	bl	800f074 <vPortEnterCritical>
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d09a:	b25b      	sxtb	r3, r3
 800d09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a0:	d103      	bne.n	800d0aa <xQueueReceive+0x122>
 800d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0b0:	b25b      	sxtb	r3, r3
 800d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b6:	d103      	bne.n	800d0c0 <xQueueReceive+0x138>
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0c0:	f002 f808 	bl	800f0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0c4:	1d3a      	adds	r2, r7, #4
 800d0c6:	f107 0310 	add.w	r3, r7, #16
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f001 f827 	bl	800e120 <xTaskCheckForTimeOut>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d123      	bne.n	800d120 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0da:	f000 fabb 	bl	800d654 <prvIsQueueEmpty>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d017      	beq.n	800d114 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	3324      	adds	r3, #36	; 0x24
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 ff4d 	bl	800df8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f4:	f000 fa5c 	bl	800d5b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0f8:	f000 fd82 	bl	800dc00 <xTaskResumeAll>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d189      	bne.n	800d016 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d102:	4b10      	ldr	r3, [pc, #64]	; (800d144 <xQueueReceive+0x1bc>)
 800d104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	e780      	b.n	800d016 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d116:	f000 fa4b 	bl	800d5b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d11a:	f000 fd71 	bl	800dc00 <xTaskResumeAll>
 800d11e:	e77a      	b.n	800d016 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d122:	f000 fa45 	bl	800d5b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d126:	f000 fd6b 	bl	800dc00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d12c:	f000 fa92 	bl	800d654 <prvIsQueueEmpty>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	f43f af6f 	beq.w	800d016 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3730      	adds	r7, #48	; 0x30
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08e      	sub	sp, #56	; 0x38
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d152:	2300      	movs	r3, #0
 800d154:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d15a:	2300      	movs	r3, #0
 800d15c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	623b      	str	r3, [r7, #32]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00a      	beq.n	800d198 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	61fb      	str	r3, [r7, #28]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d198:	f001 f916 	bl	800e3c8 <xTaskGetSchedulerState>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <xQueueSemaphoreTake+0x60>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <xQueueSemaphoreTake+0x64>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <xQueueSemaphoreTake+0x66>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10a      	bne.n	800d1c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	61bb      	str	r3, [r7, #24]
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1c8:	f001 ff54 	bl	800f074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d024      	beq.n	800d222 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	1e5a      	subs	r2, r3, #1
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d104      	bne.n	800d1f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d1e8:	f001 fa64 	bl	800e6b4 <pvTaskIncrementMutexHeldCount>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00f      	beq.n	800d21a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fc:	3310      	adds	r3, #16
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 ff14 	bl	800e02c <xTaskRemoveFromEventList>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d007      	beq.n	800d21a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d20a:	4b54      	ldr	r3, [pc, #336]	; (800d35c <xQueueSemaphoreTake+0x214>)
 800d20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d210:	601a      	str	r2, [r3, #0]
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d21a:	f001 ff5b 	bl	800f0d4 <vPortExitCritical>
				return pdPASS;
 800d21e:	2301      	movs	r3, #1
 800d220:	e097      	b.n	800d352 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d111      	bne.n	800d24c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	617b      	str	r3, [r7, #20]
}
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d244:	f001 ff46 	bl	800f0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d248:	2300      	movs	r3, #0
 800d24a:	e082      	b.n	800d352 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d252:	f107 030c 	add.w	r3, r7, #12
 800d256:	4618      	mov	r0, r3
 800d258:	f000 ff4c 	bl	800e0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d25c:	2301      	movs	r3, #1
 800d25e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d260:	f001 ff38 	bl	800f0d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d264:	f000 fcbe 	bl	800dbe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d268:	f001 ff04 	bl	800f074 <vPortEnterCritical>
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d272:	b25b      	sxtb	r3, r3
 800d274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d278:	d103      	bne.n	800d282 <xQueueSemaphoreTake+0x13a>
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2200      	movs	r2, #0
 800d27e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d288:	b25b      	sxtb	r3, r3
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d103      	bne.n	800d298 <xQueueSemaphoreTake+0x150>
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d298:	f001 ff1c 	bl	800f0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d29c:	463a      	mov	r2, r7
 800d29e:	f107 030c 	add.w	r3, r7, #12
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 ff3b 	bl	800e120 <xTaskCheckForTimeOut>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d132      	bne.n	800d316 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2b2:	f000 f9cf 	bl	800d654 <prvIsQueueEmpty>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d026      	beq.n	800d30a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d109      	bne.n	800d2d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d2c4:	f001 fed6 	bl	800f074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f001 f899 	bl	800e404 <xTaskPriorityInherit>
 800d2d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d2d4:	f001 fefe 	bl	800f0d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	3324      	adds	r3, #36	; 0x24
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	4611      	mov	r1, r2
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 fe53 	bl	800df8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2e8:	f000 f962 	bl	800d5b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2ec:	f000 fc88 	bl	800dc00 <xTaskResumeAll>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f47f af68 	bne.w	800d1c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d2f8:	4b18      	ldr	r3, [pc, #96]	; (800d35c <xQueueSemaphoreTake+0x214>)
 800d2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	e75e      	b.n	800d1c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d30a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d30c:	f000 f950 	bl	800d5b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d310:	f000 fc76 	bl	800dc00 <xTaskResumeAll>
 800d314:	e758      	b.n	800d1c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d318:	f000 f94a 	bl	800d5b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d31c:	f000 fc70 	bl	800dc00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d322:	f000 f997 	bl	800d654 <prvIsQueueEmpty>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f43f af4d 	beq.w	800d1c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00d      	beq.n	800d350 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d334:	f001 fe9e 	bl	800f074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d33a:	f000 f891 	bl	800d460 <prvGetDisinheritPriorityAfterTimeout>
 800d33e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d346:	4618      	mov	r0, r3
 800d348:	f001 f932 	bl	800e5b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d34c:	f001 fec2 	bl	800f0d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d350:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d352:	4618      	mov	r0, r3
 800d354:	3738      	adds	r7, #56	; 0x38
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	e000ed04 	.word	0xe000ed04

0800d360 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b08e      	sub	sp, #56	; 0x38
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10a      	bne.n	800d38c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	623b      	str	r3, [r7, #32]
}
 800d388:	bf00      	nop
 800d38a:	e7fe      	b.n	800d38a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d103      	bne.n	800d39a <xQueueReceiveFromISR+0x3a>
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <xQueueReceiveFromISR+0x3e>
 800d39a:	2301      	movs	r3, #1
 800d39c:	e000      	b.n	800d3a0 <xQueueReceiveFromISR+0x40>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10a      	bne.n	800d3ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	61fb      	str	r3, [r7, #28]
}
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ba:	f001 ff3d 	bl	800f238 <vPortValidateInterruptPriority>
	__asm volatile
 800d3be:	f3ef 8211 	mrs	r2, BASEPRI
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	61ba      	str	r2, [r7, #24]
 800d3d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d3d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d02f      	beq.n	800d446 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3f0:	68b9      	ldr	r1, [r7, #8]
 800d3f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3f4:	f000 f8b6 	bl	800d564 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	1e5a      	subs	r2, r3, #1
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d400:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d408:	d112      	bne.n	800d430 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d016      	beq.n	800d440 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	3310      	adds	r3, #16
 800d416:	4618      	mov	r0, r3
 800d418:	f000 fe08 	bl	800e02c <xTaskRemoveFromEventList>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00e      	beq.n	800d440 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00b      	beq.n	800d440 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
 800d42e:	e007      	b.n	800d440 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d434:	3301      	adds	r3, #1
 800d436:	b2db      	uxtb	r3, r3
 800d438:	b25a      	sxtb	r2, r3
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d440:	2301      	movs	r3, #1
 800d442:	637b      	str	r3, [r7, #52]	; 0x34
 800d444:	e001      	b.n	800d44a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d446:	2300      	movs	r3, #0
 800d448:	637b      	str	r3, [r7, #52]	; 0x34
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	f383 8811 	msr	BASEPRI, r3
}
 800d454:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3738      	adds	r7, #56	; 0x38
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d006      	beq.n	800d47e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d47a:	60fb      	str	r3, [r7, #12]
 800d47c:	e001      	b.n	800d482 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d482:	68fb      	ldr	r3, [r7, #12]
	}
 800d484:	4618      	mov	r0, r3
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d49c:	2300      	movs	r3, #0
 800d49e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10d      	bne.n	800d4ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d14d      	bne.n	800d552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f001 f80a 	bl	800e4d4 <xTaskPriorityDisinherit>
 800d4c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	609a      	str	r2, [r3, #8]
 800d4c8:	e043      	b.n	800d552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d119      	bne.n	800d504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6858      	ldr	r0, [r3, #4]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d8:	461a      	mov	r2, r3
 800d4da:	68b9      	ldr	r1, [r7, #8]
 800d4dc:	f002 f900 	bl	800f6e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e8:	441a      	add	r2, r3
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	685a      	ldr	r2, [r3, #4]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d32b      	bcc.n	800d552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	605a      	str	r2, [r3, #4]
 800d502:	e026      	b.n	800d552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	68d8      	ldr	r0, [r3, #12]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50c:	461a      	mov	r2, r3
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	f002 f8e6 	bl	800f6e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51c:	425b      	negs	r3, r3
 800d51e:	441a      	add	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	68da      	ldr	r2, [r3, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d207      	bcs.n	800d540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	689a      	ldr	r2, [r3, #8]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d538:	425b      	negs	r3, r3
 800d53a:	441a      	add	r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d105      	bne.n	800d552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	3b01      	subs	r3, #1
 800d550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d55a:	697b      	ldr	r3, [r7, #20]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d572:	2b00      	cmp	r3, #0
 800d574:	d018      	beq.n	800d5a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68da      	ldr	r2, [r3, #12]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57e:	441a      	add	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d303      	bcc.n	800d598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	68d9      	ldr	r1, [r3, #12]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	6838      	ldr	r0, [r7, #0]
 800d5a4:	f002 f89c 	bl	800f6e0 <memcpy>
	}
}
 800d5a8:	bf00      	nop
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5b8:	f001 fd5c 	bl	800f074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5c4:	e011      	b.n	800d5ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d012      	beq.n	800d5f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3324      	adds	r3, #36	; 0x24
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 fd2a 	bl	800e02c <xTaskRemoveFromEventList>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5de:	f000 fe01 	bl	800e1e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5e2:	7bfb      	ldrb	r3, [r7, #15]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	dce9      	bgt.n	800d5c6 <prvUnlockQueue+0x16>
 800d5f2:	e000      	b.n	800d5f6 <prvUnlockQueue+0x46>
					break;
 800d5f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	22ff      	movs	r2, #255	; 0xff
 800d5fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d5fe:	f001 fd69 	bl	800f0d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d602:	f001 fd37 	bl	800f074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d60c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d60e:	e011      	b.n	800d634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d012      	beq.n	800d63e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3310      	adds	r3, #16
 800d61c:	4618      	mov	r0, r3
 800d61e:	f000 fd05 	bl	800e02c <xTaskRemoveFromEventList>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d001      	beq.n	800d62c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d628:	f000 fddc 	bl	800e1e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	3b01      	subs	r3, #1
 800d630:	b2db      	uxtb	r3, r3
 800d632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	dce9      	bgt.n	800d610 <prvUnlockQueue+0x60>
 800d63c:	e000      	b.n	800d640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d63e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	22ff      	movs	r2, #255	; 0xff
 800d644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d648:	f001 fd44 	bl	800f0d4 <vPortExitCritical>
}
 800d64c:	bf00      	nop
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d65c:	f001 fd0a 	bl	800f074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d668:	2301      	movs	r3, #1
 800d66a:	60fb      	str	r3, [r7, #12]
 800d66c:	e001      	b.n	800d672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d66e:	2300      	movs	r3, #0
 800d670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d672:	f001 fd2f 	bl	800f0d4 <vPortExitCritical>

	return xReturn;
 800d676:	68fb      	ldr	r3, [r7, #12]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d688:	f001 fcf4 	bl	800f074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d694:	429a      	cmp	r2, r3
 800d696:	d102      	bne.n	800d69e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d698:	2301      	movs	r3, #1
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	e001      	b.n	800d6a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6a2:	f001 fd17 	bl	800f0d4 <vPortExitCritical>

	return xReturn;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60fb      	str	r3, [r7, #12]
 800d6be:	e014      	b.n	800d6ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d6c0:	4a0f      	ldr	r2, [pc, #60]	; (800d700 <vQueueAddToRegistry+0x50>)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10b      	bne.n	800d6e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d6cc:	490c      	ldr	r1, [pc, #48]	; (800d700 <vQueueAddToRegistry+0x50>)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d6d6:	4a0a      	ldr	r2, [pc, #40]	; (800d700 <vQueueAddToRegistry+0x50>)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	4413      	add	r3, r2
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d6e2:	e006      	b.n	800d6f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b07      	cmp	r3, #7
 800d6ee:	d9e7      	bls.n	800d6c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d6f0:	bf00      	nop
 800d6f2:	bf00      	nop
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	20000ca8 	.word	0x20000ca8

0800d704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d714:	f001 fcae 	bl	800f074 <vPortEnterCritical>
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d71e:	b25b      	sxtb	r3, r3
 800d720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d724:	d103      	bne.n	800d72e <vQueueWaitForMessageRestricted+0x2a>
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d734:	b25b      	sxtb	r3, r3
 800d736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73a:	d103      	bne.n	800d744 <vQueueWaitForMessageRestricted+0x40>
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d744:	f001 fcc6 	bl	800f0d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d106      	bne.n	800d75e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	3324      	adds	r3, #36	; 0x24
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	68b9      	ldr	r1, [r7, #8]
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fc3b 	bl	800dfd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d75e:	6978      	ldr	r0, [r7, #20]
 800d760:	f7ff ff26 	bl	800d5b0 <prvUnlockQueue>
	}
 800d764:	bf00      	nop
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b08e      	sub	sp, #56	; 0x38
 800d770:	af04      	add	r7, sp, #16
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10a      	bne.n	800d796 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	623b      	str	r3, [r7, #32]
}
 800d792:	bf00      	nop
 800d794:	e7fe      	b.n	800d794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10a      	bne.n	800d7b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800d79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	61fb      	str	r3, [r7, #28]
}
 800d7ae:	bf00      	nop
 800d7b0:	e7fe      	b.n	800d7b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d7b2:	235c      	movs	r3, #92	; 0x5c
 800d7b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	2b5c      	cmp	r3, #92	; 0x5c
 800d7ba:	d00a      	beq.n	800d7d2 <xTaskCreateStatic+0x66>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	61bb      	str	r3, [r7, #24]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d01e      	beq.n	800d818 <xTaskCreateStatic+0xac>
 800d7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d01b      	beq.n	800d818 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	9303      	str	r3, [sp, #12]
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f8:	9302      	str	r3, [sp, #8]
 800d7fa:	f107 0314 	add.w	r3, r7, #20
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 f850 	bl	800d8b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d812:	f000 f8dd 	bl	800d9d0 <prvAddNewTaskToReadyList>
 800d816:	e001      	b.n	800d81c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d818:	2300      	movs	r3, #0
 800d81a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d81c:	697b      	ldr	r3, [r7, #20]
	}
 800d81e:	4618      	mov	r0, r3
 800d820:	3728      	adds	r7, #40	; 0x28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d826:	b580      	push	{r7, lr}
 800d828:	b08c      	sub	sp, #48	; 0x30
 800d82a:	af04      	add	r7, sp, #16
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	603b      	str	r3, [r7, #0]
 800d832:	4613      	mov	r3, r2
 800d834:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d836:	88fb      	ldrh	r3, [r7, #6]
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 fd3c 	bl	800f2b8 <pvPortMalloc>
 800d840:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00e      	beq.n	800d866 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d848:	205c      	movs	r0, #92	; 0x5c
 800d84a:	f001 fd35 	bl	800f2b8 <pvPortMalloc>
 800d84e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	631a      	str	r2, [r3, #48]	; 0x30
 800d85c:	e005      	b.n	800d86a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d85e:	6978      	ldr	r0, [r7, #20]
 800d860:	f001 fdf6 	bl	800f450 <vPortFree>
 800d864:	e001      	b.n	800d86a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d017      	beq.n	800d8a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2200      	movs	r2, #0
 800d874:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d878:	88fa      	ldrh	r2, [r7, #6]
 800d87a:	2300      	movs	r3, #0
 800d87c:	9303      	str	r3, [sp, #12]
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	9302      	str	r3, [sp, #8]
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	68b9      	ldr	r1, [r7, #8]
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f000 f80e 	bl	800d8b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d894:	69f8      	ldr	r0, [r7, #28]
 800d896:	f000 f89b 	bl	800d9d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d89a:	2301      	movs	r3, #1
 800d89c:	61bb      	str	r3, [r7, #24]
 800d89e:	e002      	b.n	800d8a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d8a6:	69bb      	ldr	r3, [r7, #24]
	}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3720      	adds	r7, #32
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
 800d8bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	21a5      	movs	r1, #165	; 0xa5
 800d8ca:	f001 ff17 	bl	800f6fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	f023 0307 	bic.w	r3, r3, #7
 800d8e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	f003 0307 	and.w	r3, r3, #7
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00a      	beq.n	800d908 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	617b      	str	r3, [r7, #20]
}
 800d904:	bf00      	nop
 800d906:	e7fe      	b.n	800d906 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d01f      	beq.n	800d94e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d90e:	2300      	movs	r3, #0
 800d910:	61fb      	str	r3, [r7, #28]
 800d912:	e012      	b.n	800d93a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	4413      	add	r3, r2
 800d91a:	7819      	ldrb	r1, [r3, #0]
 800d91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	4413      	add	r3, r2
 800d922:	3334      	adds	r3, #52	; 0x34
 800d924:	460a      	mov	r2, r1
 800d926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	4413      	add	r3, r2
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d006      	beq.n	800d942 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	3301      	adds	r3, #1
 800d938:	61fb      	str	r3, [r7, #28]
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	2b0f      	cmp	r3, #15
 800d93e:	d9e9      	bls.n	800d914 <prvInitialiseNewTask+0x64>
 800d940:	e000      	b.n	800d944 <prvInitialiseNewTask+0x94>
			{
				break;
 800d942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	2200      	movs	r2, #0
 800d948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d94c:	e003      	b.n	800d956 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	2200      	movs	r2, #0
 800d952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	2b37      	cmp	r3, #55	; 0x37
 800d95a:	d901      	bls.n	800d960 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d95c:	2337      	movs	r3, #55	; 0x37
 800d95e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d96a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	2200      	movs	r2, #0
 800d970:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	3304      	adds	r3, #4
 800d976:	4618      	mov	r0, r3
 800d978:	f7fe fee4 	bl	800c744 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	3318      	adds	r3, #24
 800d980:	4618      	mov	r0, r3
 800d982:	f7fe fedf 	bl	800c744 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d98a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d99a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99e:	2200      	movs	r2, #0
 800d9a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	68f9      	ldr	r1, [r7, #12]
 800d9ae:	69b8      	ldr	r0, [r7, #24]
 800d9b0:	f001 fa36 	bl	800ee20 <pxPortInitialiseStack>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d002      	beq.n	800d9c6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9c6:	bf00      	nop
 800d9c8:	3720      	adds	r7, #32
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
	...

0800d9d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9d8:	f001 fb4c 	bl	800f074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9dc:	4b2d      	ldr	r3, [pc, #180]	; (800da94 <prvAddNewTaskToReadyList+0xc4>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	4a2c      	ldr	r2, [pc, #176]	; (800da94 <prvAddNewTaskToReadyList+0xc4>)
 800d9e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9e6:	4b2c      	ldr	r3, [pc, #176]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d109      	bne.n	800da02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9ee:	4a2a      	ldr	r2, [pc, #168]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9f4:	4b27      	ldr	r3, [pc, #156]	; (800da94 <prvAddNewTaskToReadyList+0xc4>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d110      	bne.n	800da1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9fc:	f000 fc16 	bl	800e22c <prvInitialiseTaskLists>
 800da00:	e00d      	b.n	800da1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da02:	4b26      	ldr	r3, [pc, #152]	; (800da9c <prvAddNewTaskToReadyList+0xcc>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d109      	bne.n	800da1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da0a:	4b23      	ldr	r3, [pc, #140]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	429a      	cmp	r2, r3
 800da16:	d802      	bhi.n	800da1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da18:	4a1f      	ldr	r2, [pc, #124]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da1e:	4b20      	ldr	r3, [pc, #128]	; (800daa0 <prvAddNewTaskToReadyList+0xd0>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3301      	adds	r3, #1
 800da24:	4a1e      	ldr	r2, [pc, #120]	; (800daa0 <prvAddNewTaskToReadyList+0xd0>)
 800da26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da28:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <prvAddNewTaskToReadyList+0xd0>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da34:	4b1b      	ldr	r3, [pc, #108]	; (800daa4 <prvAddNewTaskToReadyList+0xd4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d903      	bls.n	800da44 <prvAddNewTaskToReadyList+0x74>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	4a18      	ldr	r2, [pc, #96]	; (800daa4 <prvAddNewTaskToReadyList+0xd4>)
 800da42:	6013      	str	r3, [r2, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da48:	4613      	mov	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4a15      	ldr	r2, [pc, #84]	; (800daa8 <prvAddNewTaskToReadyList+0xd8>)
 800da52:	441a      	add	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3304      	adds	r3, #4
 800da58:	4619      	mov	r1, r3
 800da5a:	4610      	mov	r0, r2
 800da5c:	f7fe fe7f 	bl	800c75e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da60:	f001 fb38 	bl	800f0d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da64:	4b0d      	ldr	r3, [pc, #52]	; (800da9c <prvAddNewTaskToReadyList+0xcc>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00e      	beq.n	800da8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da6c:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da76:	429a      	cmp	r2, r3
 800da78:	d207      	bcs.n	800da8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da7a:	4b0c      	ldr	r3, [pc, #48]	; (800daac <prvAddNewTaskToReadyList+0xdc>)
 800da7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da8a:	bf00      	nop
 800da8c:	3708      	adds	r7, #8
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	200011bc 	.word	0x200011bc
 800da98:	20000ce8 	.word	0x20000ce8
 800da9c:	200011c8 	.word	0x200011c8
 800daa0:	200011d8 	.word	0x200011d8
 800daa4:	200011c4 	.word	0x200011c4
 800daa8:	20000cec 	.word	0x20000cec
 800daac:	e000ed04 	.word	0xe000ed04

0800dab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dab8:	2300      	movs	r3, #0
 800daba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d017      	beq.n	800daf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dac2:	4b13      	ldr	r3, [pc, #76]	; (800db10 <vTaskDelay+0x60>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00a      	beq.n	800dae0 <vTaskDelay+0x30>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	60bb      	str	r3, [r7, #8]
}
 800dadc:	bf00      	nop
 800dade:	e7fe      	b.n	800dade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dae0:	f000 f880 	bl	800dbe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dae4:	2100      	movs	r1, #0
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 fdf8 	bl	800e6dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800daec:	f000 f888 	bl	800dc00 <xTaskResumeAll>
 800daf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d107      	bne.n	800db08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800daf8:	4b06      	ldr	r3, [pc, #24]	; (800db14 <vTaskDelay+0x64>)
 800dafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db08:	bf00      	nop
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	200011e4 	.word	0x200011e4
 800db14:	e000ed04 	.word	0xe000ed04

0800db18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08a      	sub	sp, #40	; 0x28
 800db1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db1e:	2300      	movs	r3, #0
 800db20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db26:	463a      	mov	r2, r7
 800db28:	1d39      	adds	r1, r7, #4
 800db2a:	f107 0308 	add.w	r3, r7, #8
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe fdb4 	bl	800c69c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	9202      	str	r2, [sp, #8]
 800db3c:	9301      	str	r3, [sp, #4]
 800db3e:	2300      	movs	r3, #0
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	2300      	movs	r3, #0
 800db44:	460a      	mov	r2, r1
 800db46:	4921      	ldr	r1, [pc, #132]	; (800dbcc <vTaskStartScheduler+0xb4>)
 800db48:	4821      	ldr	r0, [pc, #132]	; (800dbd0 <vTaskStartScheduler+0xb8>)
 800db4a:	f7ff fe0f 	bl	800d76c <xTaskCreateStatic>
 800db4e:	4603      	mov	r3, r0
 800db50:	4a20      	ldr	r2, [pc, #128]	; (800dbd4 <vTaskStartScheduler+0xbc>)
 800db52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db54:	4b1f      	ldr	r3, [pc, #124]	; (800dbd4 <vTaskStartScheduler+0xbc>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d002      	beq.n	800db62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db5c:	2301      	movs	r3, #1
 800db5e:	617b      	str	r3, [r7, #20]
 800db60:	e001      	b.n	800db66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d102      	bne.n	800db72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db6c:	f000 fe0a 	bl	800e784 <xTimerCreateTimerTask>
 800db70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d116      	bne.n	800dba6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	613b      	str	r3, [r7, #16]
}
 800db8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db8c:	4b12      	ldr	r3, [pc, #72]	; (800dbd8 <vTaskStartScheduler+0xc0>)
 800db8e:	f04f 32ff 	mov.w	r2, #4294967295
 800db92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db94:	4b11      	ldr	r3, [pc, #68]	; (800dbdc <vTaskStartScheduler+0xc4>)
 800db96:	2201      	movs	r2, #1
 800db98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db9a:	4b11      	ldr	r3, [pc, #68]	; (800dbe0 <vTaskStartScheduler+0xc8>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dba0:	f001 f9c6 	bl	800ef30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dba4:	e00e      	b.n	800dbc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbac:	d10a      	bne.n	800dbc4 <vTaskStartScheduler+0xac>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	60fb      	str	r3, [r7, #12]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <vTaskStartScheduler+0xaa>
}
 800dbc4:	bf00      	nop
 800dbc6:	3718      	adds	r7, #24
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	08013df0 	.word	0x08013df0
 800dbd0:	0800e1fd 	.word	0x0800e1fd
 800dbd4:	200011e0 	.word	0x200011e0
 800dbd8:	200011dc 	.word	0x200011dc
 800dbdc:	200011c8 	.word	0x200011c8
 800dbe0:	200011c0 	.word	0x200011c0

0800dbe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dbe8:	4b04      	ldr	r3, [pc, #16]	; (800dbfc <vTaskSuspendAll+0x18>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3301      	adds	r3, #1
 800dbee:	4a03      	ldr	r2, [pc, #12]	; (800dbfc <vTaskSuspendAll+0x18>)
 800dbf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dbf2:	bf00      	nop
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr
 800dbfc:	200011e4 	.word	0x200011e4

0800dc00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc06:	2300      	movs	r3, #0
 800dc08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc0e:	4b42      	ldr	r3, [pc, #264]	; (800dd18 <xTaskResumeAll+0x118>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10a      	bne.n	800dc2c <xTaskResumeAll+0x2c>
	__asm volatile
 800dc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	603b      	str	r3, [r7, #0]
}
 800dc28:	bf00      	nop
 800dc2a:	e7fe      	b.n	800dc2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc2c:	f001 fa22 	bl	800f074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc30:	4b39      	ldr	r3, [pc, #228]	; (800dd18 <xTaskResumeAll+0x118>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	3b01      	subs	r3, #1
 800dc36:	4a38      	ldr	r2, [pc, #224]	; (800dd18 <xTaskResumeAll+0x118>)
 800dc38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc3a:	4b37      	ldr	r3, [pc, #220]	; (800dd18 <xTaskResumeAll+0x118>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d162      	bne.n	800dd08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc42:	4b36      	ldr	r3, [pc, #216]	; (800dd1c <xTaskResumeAll+0x11c>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d05e      	beq.n	800dd08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc4a:	e02f      	b.n	800dcac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc4c:	4b34      	ldr	r3, [pc, #208]	; (800dd20 <xTaskResumeAll+0x120>)
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3318      	adds	r3, #24
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fe fddd 	bl	800c818 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3304      	adds	r3, #4
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fe fdd8 	bl	800c818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6c:	4b2d      	ldr	r3, [pc, #180]	; (800dd24 <xTaskResumeAll+0x124>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d903      	bls.n	800dc7c <xTaskResumeAll+0x7c>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	4a2a      	ldr	r2, [pc, #168]	; (800dd24 <xTaskResumeAll+0x124>)
 800dc7a:	6013      	str	r3, [r2, #0]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc80:	4613      	mov	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	4a27      	ldr	r2, [pc, #156]	; (800dd28 <xTaskResumeAll+0x128>)
 800dc8a:	441a      	add	r2, r3
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	3304      	adds	r3, #4
 800dc90:	4619      	mov	r1, r3
 800dc92:	4610      	mov	r0, r2
 800dc94:	f7fe fd63 	bl	800c75e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9c:	4b23      	ldr	r3, [pc, #140]	; (800dd2c <xTaskResumeAll+0x12c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d302      	bcc.n	800dcac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dca6:	4b22      	ldr	r3, [pc, #136]	; (800dd30 <xTaskResumeAll+0x130>)
 800dca8:	2201      	movs	r2, #1
 800dcaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcac:	4b1c      	ldr	r3, [pc, #112]	; (800dd20 <xTaskResumeAll+0x120>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d1cb      	bne.n	800dc4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dcba:	f000 fb55 	bl	800e368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dcbe:	4b1d      	ldr	r3, [pc, #116]	; (800dd34 <xTaskResumeAll+0x134>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d010      	beq.n	800dcec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dcca:	f000 f847 	bl	800dd5c <xTaskIncrementTick>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dcd4:	4b16      	ldr	r3, [pc, #88]	; (800dd30 <xTaskResumeAll+0x130>)
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1f1      	bne.n	800dcca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dce6:	4b13      	ldr	r3, [pc, #76]	; (800dd34 <xTaskResumeAll+0x134>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dcec:	4b10      	ldr	r3, [pc, #64]	; (800dd30 <xTaskResumeAll+0x130>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d009      	beq.n	800dd08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dcf8:	4b0f      	ldr	r3, [pc, #60]	; (800dd38 <xTaskResumeAll+0x138>)
 800dcfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd08:	f001 f9e4 	bl	800f0d4 <vPortExitCritical>

	return xAlreadyYielded;
 800dd0c:	68bb      	ldr	r3, [r7, #8]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	200011e4 	.word	0x200011e4
 800dd1c:	200011bc 	.word	0x200011bc
 800dd20:	2000117c 	.word	0x2000117c
 800dd24:	200011c4 	.word	0x200011c4
 800dd28:	20000cec 	.word	0x20000cec
 800dd2c:	20000ce8 	.word	0x20000ce8
 800dd30:	200011d0 	.word	0x200011d0
 800dd34:	200011cc 	.word	0x200011cc
 800dd38:	e000ed04 	.word	0xe000ed04

0800dd3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd42:	4b05      	ldr	r3, [pc, #20]	; (800dd58 <xTaskGetTickCount+0x1c>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd48:	687b      	ldr	r3, [r7, #4]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	200011c0 	.word	0x200011c0

0800dd5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd66:	4b4f      	ldr	r3, [pc, #316]	; (800dea4 <xTaskIncrementTick+0x148>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f040 808f 	bne.w	800de8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd70:	4b4d      	ldr	r3, [pc, #308]	; (800dea8 <xTaskIncrementTick+0x14c>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd78:	4a4b      	ldr	r2, [pc, #300]	; (800dea8 <xTaskIncrementTick+0x14c>)
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d120      	bne.n	800ddc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd84:	4b49      	ldr	r3, [pc, #292]	; (800deac <xTaskIncrementTick+0x150>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00a      	beq.n	800dda4 <xTaskIncrementTick+0x48>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	603b      	str	r3, [r7, #0]
}
 800dda0:	bf00      	nop
 800dda2:	e7fe      	b.n	800dda2 <xTaskIncrementTick+0x46>
 800dda4:	4b41      	ldr	r3, [pc, #260]	; (800deac <xTaskIncrementTick+0x150>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60fb      	str	r3, [r7, #12]
 800ddaa:	4b41      	ldr	r3, [pc, #260]	; (800deb0 <xTaskIncrementTick+0x154>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a3f      	ldr	r2, [pc, #252]	; (800deac <xTaskIncrementTick+0x150>)
 800ddb0:	6013      	str	r3, [r2, #0]
 800ddb2:	4a3f      	ldr	r2, [pc, #252]	; (800deb0 <xTaskIncrementTick+0x154>)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6013      	str	r3, [r2, #0]
 800ddb8:	4b3e      	ldr	r3, [pc, #248]	; (800deb4 <xTaskIncrementTick+0x158>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	4a3d      	ldr	r2, [pc, #244]	; (800deb4 <xTaskIncrementTick+0x158>)
 800ddc0:	6013      	str	r3, [r2, #0]
 800ddc2:	f000 fad1 	bl	800e368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ddc6:	4b3c      	ldr	r3, [pc, #240]	; (800deb8 <xTaskIncrementTick+0x15c>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	693a      	ldr	r2, [r7, #16]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d349      	bcc.n	800de64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddd0:	4b36      	ldr	r3, [pc, #216]	; (800deac <xTaskIncrementTick+0x150>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d104      	bne.n	800dde4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddda:	4b37      	ldr	r3, [pc, #220]	; (800deb8 <xTaskIncrementTick+0x15c>)
 800dddc:	f04f 32ff 	mov.w	r2, #4294967295
 800dde0:	601a      	str	r2, [r3, #0]
					break;
 800dde2:	e03f      	b.n	800de64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dde4:	4b31      	ldr	r3, [pc, #196]	; (800deac <xTaskIncrementTick+0x150>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d203      	bcs.n	800de04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddfc:	4a2e      	ldr	r2, [pc, #184]	; (800deb8 <xTaskIncrementTick+0x15c>)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de02:	e02f      	b.n	800de64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	3304      	adds	r3, #4
 800de08:	4618      	mov	r0, r3
 800de0a:	f7fe fd05 	bl	800c818 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de12:	2b00      	cmp	r3, #0
 800de14:	d004      	beq.n	800de20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	3318      	adds	r3, #24
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fcfc 	bl	800c818 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de24:	4b25      	ldr	r3, [pc, #148]	; (800debc <xTaskIncrementTick+0x160>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d903      	bls.n	800de34 <xTaskIncrementTick+0xd8>
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de30:	4a22      	ldr	r2, [pc, #136]	; (800debc <xTaskIncrementTick+0x160>)
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de38:	4613      	mov	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4a1f      	ldr	r2, [pc, #124]	; (800dec0 <xTaskIncrementTick+0x164>)
 800de42:	441a      	add	r2, r3
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	3304      	adds	r3, #4
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	f7fe fc87 	bl	800c75e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de54:	4b1b      	ldr	r3, [pc, #108]	; (800dec4 <xTaskIncrementTick+0x168>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d3b8      	bcc.n	800ddd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de5e:	2301      	movs	r3, #1
 800de60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de62:	e7b5      	b.n	800ddd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de64:	4b17      	ldr	r3, [pc, #92]	; (800dec4 <xTaskIncrementTick+0x168>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6a:	4915      	ldr	r1, [pc, #84]	; (800dec0 <xTaskIncrementTick+0x164>)
 800de6c:	4613      	mov	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	440b      	add	r3, r1
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d901      	bls.n	800de80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de7c:	2301      	movs	r3, #1
 800de7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de80:	4b11      	ldr	r3, [pc, #68]	; (800dec8 <xTaskIncrementTick+0x16c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d007      	beq.n	800de98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de88:	2301      	movs	r3, #1
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	e004      	b.n	800de98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de8e:	4b0f      	ldr	r3, [pc, #60]	; (800decc <xTaskIncrementTick+0x170>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	4a0d      	ldr	r2, [pc, #52]	; (800decc <xTaskIncrementTick+0x170>)
 800de96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de98:	697b      	ldr	r3, [r7, #20]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3718      	adds	r7, #24
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	200011e4 	.word	0x200011e4
 800dea8:	200011c0 	.word	0x200011c0
 800deac:	20001174 	.word	0x20001174
 800deb0:	20001178 	.word	0x20001178
 800deb4:	200011d4 	.word	0x200011d4
 800deb8:	200011dc 	.word	0x200011dc
 800debc:	200011c4 	.word	0x200011c4
 800dec0:	20000cec 	.word	0x20000cec
 800dec4:	20000ce8 	.word	0x20000ce8
 800dec8:	200011d0 	.word	0x200011d0
 800decc:	200011cc 	.word	0x200011cc

0800ded0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ded6:	4b28      	ldr	r3, [pc, #160]	; (800df78 <vTaskSwitchContext+0xa8>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d003      	beq.n	800dee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dede:	4b27      	ldr	r3, [pc, #156]	; (800df7c <vTaskSwitchContext+0xac>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dee4:	e041      	b.n	800df6a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800dee6:	4b25      	ldr	r3, [pc, #148]	; (800df7c <vTaskSwitchContext+0xac>)
 800dee8:	2200      	movs	r2, #0
 800deea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deec:	4b24      	ldr	r3, [pc, #144]	; (800df80 <vTaskSwitchContext+0xb0>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	e010      	b.n	800df16 <vTaskSwitchContext+0x46>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10a      	bne.n	800df10 <vTaskSwitchContext+0x40>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	607b      	str	r3, [r7, #4]
}
 800df0c:	bf00      	nop
 800df0e:	e7fe      	b.n	800df0e <vTaskSwitchContext+0x3e>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3b01      	subs	r3, #1
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	491b      	ldr	r1, [pc, #108]	; (800df84 <vTaskSwitchContext+0xb4>)
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	4613      	mov	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	440b      	add	r3, r1
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0e4      	beq.n	800def4 <vTaskSwitchContext+0x24>
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	4613      	mov	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4a13      	ldr	r2, [pc, #76]	; (800df84 <vTaskSwitchContext+0xb4>)
 800df36:	4413      	add	r3, r2
 800df38:	60bb      	str	r3, [r7, #8]
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	605a      	str	r2, [r3, #4]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	685a      	ldr	r2, [r3, #4]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	3308      	adds	r3, #8
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d104      	bne.n	800df5a <vTaskSwitchContext+0x8a>
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	605a      	str	r2, [r3, #4]
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	4a09      	ldr	r2, [pc, #36]	; (800df88 <vTaskSwitchContext+0xb8>)
 800df62:	6013      	str	r3, [r2, #0]
 800df64:	4a06      	ldr	r2, [pc, #24]	; (800df80 <vTaskSwitchContext+0xb0>)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6013      	str	r3, [r2, #0]
}
 800df6a:	bf00      	nop
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	200011e4 	.word	0x200011e4
 800df7c:	200011d0 	.word	0x200011d0
 800df80:	200011c4 	.word	0x200011c4
 800df84:	20000cec 	.word	0x20000cec
 800df88:	20000ce8 	.word	0x20000ce8

0800df8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10a      	bne.n	800dfb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	60fb      	str	r3, [r7, #12]
}
 800dfae:	bf00      	nop
 800dfb0:	e7fe      	b.n	800dfb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfb2:	4b07      	ldr	r3, [pc, #28]	; (800dfd0 <vTaskPlaceOnEventList+0x44>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	3318      	adds	r3, #24
 800dfb8:	4619      	mov	r1, r3
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7fe fbf3 	bl	800c7a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfc0:	2101      	movs	r1, #1
 800dfc2:	6838      	ldr	r0, [r7, #0]
 800dfc4:	f000 fb8a 	bl	800e6dc <prvAddCurrentTaskToDelayedList>
}
 800dfc8:	bf00      	nop
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	20000ce8 	.word	0x20000ce8

0800dfd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b086      	sub	sp, #24
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10a      	bne.n	800dffc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	617b      	str	r3, [r7, #20]
}
 800dff8:	bf00      	nop
 800dffa:	e7fe      	b.n	800dffa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dffc:	4b0a      	ldr	r3, [pc, #40]	; (800e028 <vTaskPlaceOnEventListRestricted+0x54>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	3318      	adds	r3, #24
 800e002:	4619      	mov	r1, r3
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f7fe fbaa 	bl	800c75e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e010:	f04f 33ff 	mov.w	r3, #4294967295
 800e014:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e016:	6879      	ldr	r1, [r7, #4]
 800e018:	68b8      	ldr	r0, [r7, #8]
 800e01a:	f000 fb5f 	bl	800e6dc <prvAddCurrentTaskToDelayedList>
	}
 800e01e:	bf00      	nop
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	20000ce8 	.word	0x20000ce8

0800e02c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b086      	sub	sp, #24
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10a      	bne.n	800e058 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	60fb      	str	r3, [r7, #12]
}
 800e054:	bf00      	nop
 800e056:	e7fe      	b.n	800e056 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	3318      	adds	r3, #24
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe fbdb 	bl	800c818 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e062:	4b1e      	ldr	r3, [pc, #120]	; (800e0dc <xTaskRemoveFromEventList+0xb0>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d11d      	bne.n	800e0a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fbd2 	bl	800c818 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e078:	4b19      	ldr	r3, [pc, #100]	; (800e0e0 <xTaskRemoveFromEventList+0xb4>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d903      	bls.n	800e088 <xTaskRemoveFromEventList+0x5c>
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e084:	4a16      	ldr	r2, [pc, #88]	; (800e0e0 <xTaskRemoveFromEventList+0xb4>)
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08c:	4613      	mov	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4a13      	ldr	r2, [pc, #76]	; (800e0e4 <xTaskRemoveFromEventList+0xb8>)
 800e096:	441a      	add	r2, r3
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	3304      	adds	r3, #4
 800e09c:	4619      	mov	r1, r3
 800e09e:	4610      	mov	r0, r2
 800e0a0:	f7fe fb5d 	bl	800c75e <vListInsertEnd>
 800e0a4:	e005      	b.n	800e0b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	3318      	adds	r3, #24
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	480e      	ldr	r0, [pc, #56]	; (800e0e8 <xTaskRemoveFromEventList+0xbc>)
 800e0ae:	f7fe fb56 	bl	800c75e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b6:	4b0d      	ldr	r3, [pc, #52]	; (800e0ec <xTaskRemoveFromEventList+0xc0>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d905      	bls.n	800e0cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0c4:	4b0a      	ldr	r3, [pc, #40]	; (800e0f0 <xTaskRemoveFromEventList+0xc4>)
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	601a      	str	r2, [r3, #0]
 800e0ca:	e001      	b.n	800e0d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0d0:	697b      	ldr	r3, [r7, #20]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	200011e4 	.word	0x200011e4
 800e0e0:	200011c4 	.word	0x200011c4
 800e0e4:	20000cec 	.word	0x20000cec
 800e0e8:	2000117c 	.word	0x2000117c
 800e0ec:	20000ce8 	.word	0x20000ce8
 800e0f0:	200011d0 	.word	0x200011d0

0800e0f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0fc:	4b06      	ldr	r3, [pc, #24]	; (800e118 <vTaskInternalSetTimeOutState+0x24>)
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e104:	4b05      	ldr	r3, [pc, #20]	; (800e11c <vTaskInternalSetTimeOutState+0x28>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	605a      	str	r2, [r3, #4]
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	200011d4 	.word	0x200011d4
 800e11c:	200011c0 	.word	0x200011c0

0800e120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b088      	sub	sp, #32
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10a      	bne.n	800e146 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	613b      	str	r3, [r7, #16]
}
 800e142:	bf00      	nop
 800e144:	e7fe      	b.n	800e144 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10a      	bne.n	800e162 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	60fb      	str	r3, [r7, #12]
}
 800e15e:	bf00      	nop
 800e160:	e7fe      	b.n	800e160 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e162:	f000 ff87 	bl	800f074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e166:	4b1d      	ldr	r3, [pc, #116]	; (800e1dc <xTaskCheckForTimeOut+0xbc>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	69ba      	ldr	r2, [r7, #24]
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e17e:	d102      	bne.n	800e186 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]
 800e184:	e023      	b.n	800e1ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	4b15      	ldr	r3, [pc, #84]	; (800e1e0 <xTaskCheckForTimeOut+0xc0>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d007      	beq.n	800e1a2 <xTaskCheckForTimeOut+0x82>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	69ba      	ldr	r2, [r7, #24]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d302      	bcc.n	800e1a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e19c:	2301      	movs	r3, #1
 800e19e:	61fb      	str	r3, [r7, #28]
 800e1a0:	e015      	b.n	800e1ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d20b      	bcs.n	800e1c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	1ad2      	subs	r2, r2, r3
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff ff9b 	bl	800e0f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	61fb      	str	r3, [r7, #28]
 800e1c2:	e004      	b.n	800e1ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1ce:	f000 ff81 	bl	800f0d4 <vPortExitCritical>

	return xReturn;
 800e1d2:	69fb      	ldr	r3, [r7, #28]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3720      	adds	r7, #32
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	200011c0 	.word	0x200011c0
 800e1e0:	200011d4 	.word	0x200011d4

0800e1e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1e8:	4b03      	ldr	r3, [pc, #12]	; (800e1f8 <vTaskMissedYield+0x14>)
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	601a      	str	r2, [r3, #0]
}
 800e1ee:	bf00      	nop
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	200011d0 	.word	0x200011d0

0800e1fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e204:	f000 f852 	bl	800e2ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e208:	4b06      	ldr	r3, [pc, #24]	; (800e224 <prvIdleTask+0x28>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d9f9      	bls.n	800e204 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e210:	4b05      	ldr	r3, [pc, #20]	; (800e228 <prvIdleTask+0x2c>)
 800e212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e216:	601a      	str	r2, [r3, #0]
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e220:	e7f0      	b.n	800e204 <prvIdleTask+0x8>
 800e222:	bf00      	nop
 800e224:	20000cec 	.word	0x20000cec
 800e228:	e000ed04 	.word	0xe000ed04

0800e22c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e232:	2300      	movs	r3, #0
 800e234:	607b      	str	r3, [r7, #4]
 800e236:	e00c      	b.n	800e252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	4613      	mov	r3, r2
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	4413      	add	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4a12      	ldr	r2, [pc, #72]	; (800e28c <prvInitialiseTaskLists+0x60>)
 800e244:	4413      	add	r3, r2
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe fa5c 	bl	800c704 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3301      	adds	r3, #1
 800e250:	607b      	str	r3, [r7, #4]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b37      	cmp	r3, #55	; 0x37
 800e256:	d9ef      	bls.n	800e238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e258:	480d      	ldr	r0, [pc, #52]	; (800e290 <prvInitialiseTaskLists+0x64>)
 800e25a:	f7fe fa53 	bl	800c704 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e25e:	480d      	ldr	r0, [pc, #52]	; (800e294 <prvInitialiseTaskLists+0x68>)
 800e260:	f7fe fa50 	bl	800c704 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e264:	480c      	ldr	r0, [pc, #48]	; (800e298 <prvInitialiseTaskLists+0x6c>)
 800e266:	f7fe fa4d 	bl	800c704 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e26a:	480c      	ldr	r0, [pc, #48]	; (800e29c <prvInitialiseTaskLists+0x70>)
 800e26c:	f7fe fa4a 	bl	800c704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e270:	480b      	ldr	r0, [pc, #44]	; (800e2a0 <prvInitialiseTaskLists+0x74>)
 800e272:	f7fe fa47 	bl	800c704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e276:	4b0b      	ldr	r3, [pc, #44]	; (800e2a4 <prvInitialiseTaskLists+0x78>)
 800e278:	4a05      	ldr	r2, [pc, #20]	; (800e290 <prvInitialiseTaskLists+0x64>)
 800e27a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e27c:	4b0a      	ldr	r3, [pc, #40]	; (800e2a8 <prvInitialiseTaskLists+0x7c>)
 800e27e:	4a05      	ldr	r2, [pc, #20]	; (800e294 <prvInitialiseTaskLists+0x68>)
 800e280:	601a      	str	r2, [r3, #0]
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20000cec 	.word	0x20000cec
 800e290:	2000114c 	.word	0x2000114c
 800e294:	20001160 	.word	0x20001160
 800e298:	2000117c 	.word	0x2000117c
 800e29c:	20001190 	.word	0x20001190
 800e2a0:	200011a8 	.word	0x200011a8
 800e2a4:	20001174 	.word	0x20001174
 800e2a8:	20001178 	.word	0x20001178

0800e2ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2b2:	e019      	b.n	800e2e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2b4:	f000 fede 	bl	800f074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b8:	4b10      	ldr	r3, [pc, #64]	; (800e2fc <prvCheckTasksWaitingTermination+0x50>)
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fe faa7 	bl	800c818 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <prvCheckTasksWaitingTermination+0x54>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	4a0b      	ldr	r2, [pc, #44]	; (800e300 <prvCheckTasksWaitingTermination+0x54>)
 800e2d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2d4:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <prvCheckTasksWaitingTermination+0x58>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	4a0a      	ldr	r2, [pc, #40]	; (800e304 <prvCheckTasksWaitingTermination+0x58>)
 800e2dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2de:	f000 fef9 	bl	800f0d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f810 	bl	800e308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2e8:	4b06      	ldr	r3, [pc, #24]	; (800e304 <prvCheckTasksWaitingTermination+0x58>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d1e1      	bne.n	800e2b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20001190 	.word	0x20001190
 800e300:	200011bc 	.word	0x200011bc
 800e304:	200011a4 	.word	0x200011a4

0800e308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e316:	2b00      	cmp	r3, #0
 800e318:	d108      	bne.n	800e32c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	4618      	mov	r0, r3
 800e320:	f001 f896 	bl	800f450 <vPortFree>
				vPortFree( pxTCB );
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f001 f893 	bl	800f450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e32a:	e018      	b.n	800e35e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e332:	2b01      	cmp	r3, #1
 800e334:	d103      	bne.n	800e33e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f001 f88a 	bl	800f450 <vPortFree>
	}
 800e33c:	e00f      	b.n	800e35e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e344:	2b02      	cmp	r3, #2
 800e346:	d00a      	beq.n	800e35e <prvDeleteTCB+0x56>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	60fb      	str	r3, [r7, #12]
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <prvDeleteTCB+0x54>
	}
 800e35e:	bf00      	nop
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e36e:	4b0c      	ldr	r3, [pc, #48]	; (800e3a0 <prvResetNextTaskUnblockTime+0x38>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e378:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e37a:	f04f 32ff 	mov.w	r2, #4294967295
 800e37e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e380:	e008      	b.n	800e394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e382:	4b07      	ldr	r3, [pc, #28]	; (800e3a0 <prvResetNextTaskUnblockTime+0x38>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	4a04      	ldr	r2, [pc, #16]	; (800e3a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e392:	6013      	str	r3, [r2, #0]
}
 800e394:	bf00      	nop
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr
 800e3a0:	20001174 	.word	0x20001174
 800e3a4:	200011dc 	.word	0x200011dc

0800e3a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e3ae:	4b05      	ldr	r3, [pc, #20]	; (800e3c4 <xTaskGetCurrentTaskHandle+0x1c>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e3b4:	687b      	ldr	r3, [r7, #4]
	}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	20000ce8 	.word	0x20000ce8

0800e3c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3ce:	4b0b      	ldr	r3, [pc, #44]	; (800e3fc <xTaskGetSchedulerState+0x34>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d102      	bne.n	800e3dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	607b      	str	r3, [r7, #4]
 800e3da:	e008      	b.n	800e3ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3dc:	4b08      	ldr	r3, [pc, #32]	; (800e400 <xTaskGetSchedulerState+0x38>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d102      	bne.n	800e3ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	607b      	str	r3, [r7, #4]
 800e3e8:	e001      	b.n	800e3ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3ee:	687b      	ldr	r3, [r7, #4]
	}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	200011c8 	.word	0x200011c8
 800e400:	200011e4 	.word	0x200011e4

0800e404 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e410:	2300      	movs	r3, #0
 800e412:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d051      	beq.n	800e4be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41e:	4b2a      	ldr	r3, [pc, #168]	; (800e4c8 <xTaskPriorityInherit+0xc4>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e424:	429a      	cmp	r2, r3
 800e426:	d241      	bcs.n	800e4ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	699b      	ldr	r3, [r3, #24]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	db06      	blt.n	800e43e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e430:	4b25      	ldr	r3, [pc, #148]	; (800e4c8 <xTaskPriorityInherit+0xc4>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e436:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	6959      	ldr	r1, [r3, #20]
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e446:	4613      	mov	r3, r2
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	4413      	add	r3, r2
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	4a1f      	ldr	r2, [pc, #124]	; (800e4cc <xTaskPriorityInherit+0xc8>)
 800e450:	4413      	add	r3, r2
 800e452:	4299      	cmp	r1, r3
 800e454:	d122      	bne.n	800e49c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	3304      	adds	r3, #4
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fe f9dc 	bl	800c818 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e460:	4b19      	ldr	r3, [pc, #100]	; (800e4c8 <xTaskPriorityInherit+0xc4>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46e:	4b18      	ldr	r3, [pc, #96]	; (800e4d0 <xTaskPriorityInherit+0xcc>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	429a      	cmp	r2, r3
 800e474:	d903      	bls.n	800e47e <xTaskPriorityInherit+0x7a>
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e47a:	4a15      	ldr	r2, [pc, #84]	; (800e4d0 <xTaskPriorityInherit+0xcc>)
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e482:	4613      	mov	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4a10      	ldr	r2, [pc, #64]	; (800e4cc <xTaskPriorityInherit+0xc8>)
 800e48c:	441a      	add	r2, r3
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	3304      	adds	r3, #4
 800e492:	4619      	mov	r1, r3
 800e494:	4610      	mov	r0, r2
 800e496:	f7fe f962 	bl	800c75e <vListInsertEnd>
 800e49a:	e004      	b.n	800e4a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e49c:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <xTaskPriorityInherit+0xc4>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	60fb      	str	r3, [r7, #12]
 800e4aa:	e008      	b.n	800e4be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <xTaskPriorityInherit+0xc4>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d201      	bcs.n	800e4be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4be:	68fb      	ldr	r3, [r7, #12]
	}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	20000ce8 	.word	0x20000ce8
 800e4cc:	20000cec 	.word	0x20000cec
 800e4d0:	200011c4 	.word	0x200011c4

0800e4d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d056      	beq.n	800e598 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4ea:	4b2e      	ldr	r3, [pc, #184]	; (800e5a4 <xTaskPriorityDisinherit+0xd0>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d00a      	beq.n	800e50a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	60fb      	str	r3, [r7, #12]
}
 800e506:	bf00      	nop
 800e508:	e7fe      	b.n	800e508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d10a      	bne.n	800e528 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60bb      	str	r3, [r7, #8]
}
 800e524:	bf00      	nop
 800e526:	e7fe      	b.n	800e526 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e52c:	1e5a      	subs	r2, r3, #1
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d02c      	beq.n	800e598 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e542:	2b00      	cmp	r3, #0
 800e544:	d128      	bne.n	800e598 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	3304      	adds	r3, #4
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe f964 	bl	800c818 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e55c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e568:	4b0f      	ldr	r3, [pc, #60]	; (800e5a8 <xTaskPriorityDisinherit+0xd4>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d903      	bls.n	800e578 <xTaskPriorityDisinherit+0xa4>
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e574:	4a0c      	ldr	r2, [pc, #48]	; (800e5a8 <xTaskPriorityDisinherit+0xd4>)
 800e576:	6013      	str	r3, [r2, #0]
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57c:	4613      	mov	r3, r2
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	4413      	add	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4a09      	ldr	r2, [pc, #36]	; (800e5ac <xTaskPriorityDisinherit+0xd8>)
 800e586:	441a      	add	r2, r3
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	3304      	adds	r3, #4
 800e58c:	4619      	mov	r1, r3
 800e58e:	4610      	mov	r0, r2
 800e590:	f7fe f8e5 	bl	800c75e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e594:	2301      	movs	r3, #1
 800e596:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e598:	697b      	ldr	r3, [r7, #20]
	}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3718      	adds	r7, #24
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000ce8 	.word	0x20000ce8
 800e5a8:	200011c4 	.word	0x200011c4
 800e5ac:	20000cec 	.word	0x20000cec

0800e5b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d06a      	beq.n	800e69e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10a      	bne.n	800e5e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	60fb      	str	r3, [r7, #12]
}
 800e5e2:	bf00      	nop
 800e5e4:	e7fe      	b.n	800e5e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d902      	bls.n	800e5f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	61fb      	str	r3, [r7, #28]
 800e5f4:	e002      	b.n	800e5fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	429a      	cmp	r2, r3
 800e604:	d04b      	beq.n	800e69e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d146      	bne.n	800e69e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e610:	4b25      	ldr	r3, [pc, #148]	; (800e6a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	69ba      	ldr	r2, [r7, #24]
 800e616:	429a      	cmp	r2, r3
 800e618:	d10a      	bne.n	800e630 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	60bb      	str	r3, [r7, #8]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e634:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	69fa      	ldr	r2, [r7, #28]
 800e63a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	699b      	ldr	r3, [r3, #24]
 800e640:	2b00      	cmp	r3, #0
 800e642:	db04      	blt.n	800e64e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	6959      	ldr	r1, [r3, #20]
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4a13      	ldr	r2, [pc, #76]	; (800e6ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e65e:	4413      	add	r3, r2
 800e660:	4299      	cmp	r1, r3
 800e662:	d11c      	bne.n	800e69e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	3304      	adds	r3, #4
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fe f8d5 	bl	800c818 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e672:	4b0f      	ldr	r3, [pc, #60]	; (800e6b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	429a      	cmp	r2, r3
 800e678:	d903      	bls.n	800e682 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67e:	4a0c      	ldr	r2, [pc, #48]	; (800e6b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e680:	6013      	str	r3, [r2, #0]
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e686:	4613      	mov	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4a07      	ldr	r2, [pc, #28]	; (800e6ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e690:	441a      	add	r2, r3
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	3304      	adds	r3, #4
 800e696:	4619      	mov	r1, r3
 800e698:	4610      	mov	r0, r2
 800e69a:	f7fe f860 	bl	800c75e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e69e:	bf00      	nop
 800e6a0:	3720      	adds	r7, #32
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20000ce8 	.word	0x20000ce8
 800e6ac:	20000cec 	.word	0x20000cec
 800e6b0:	200011c4 	.word	0x200011c4

0800e6b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e6b4:	b480      	push	{r7}
 800e6b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6b8:	4b07      	ldr	r3, [pc, #28]	; (800e6d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d004      	beq.n	800e6ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6c0:	4b05      	ldr	r3, [pc, #20]	; (800e6d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6c6:	3201      	adds	r2, #1
 800e6c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e6ca:	4b03      	ldr	r3, [pc, #12]	; (800e6d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
	}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr
 800e6d8:	20000ce8 	.word	0x20000ce8

0800e6dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6e6:	4b21      	ldr	r3, [pc, #132]	; (800e76c <prvAddCurrentTaskToDelayedList+0x90>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6ec:	4b20      	ldr	r3, [pc, #128]	; (800e770 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe f890 	bl	800c818 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fe:	d10a      	bne.n	800e716 <prvAddCurrentTaskToDelayedList+0x3a>
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d007      	beq.n	800e716 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e706:	4b1a      	ldr	r3, [pc, #104]	; (800e770 <prvAddCurrentTaskToDelayedList+0x94>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4819      	ldr	r0, [pc, #100]	; (800e774 <prvAddCurrentTaskToDelayedList+0x98>)
 800e710:	f7fe f825 	bl	800c75e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e714:	e026      	b.n	800e764 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	4413      	add	r3, r2
 800e71c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e71e:	4b14      	ldr	r3, [pc, #80]	; (800e770 <prvAddCurrentTaskToDelayedList+0x94>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d209      	bcs.n	800e742 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e72e:	4b12      	ldr	r3, [pc, #72]	; (800e778 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	4b0f      	ldr	r3, [pc, #60]	; (800e770 <prvAddCurrentTaskToDelayedList+0x94>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3304      	adds	r3, #4
 800e738:	4619      	mov	r1, r3
 800e73a:	4610      	mov	r0, r2
 800e73c:	f7fe f833 	bl	800c7a6 <vListInsert>
}
 800e740:	e010      	b.n	800e764 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e742:	4b0e      	ldr	r3, [pc, #56]	; (800e77c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	4b0a      	ldr	r3, [pc, #40]	; (800e770 <prvAddCurrentTaskToDelayedList+0x94>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3304      	adds	r3, #4
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	f7fe f829 	bl	800c7a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e754:	4b0a      	ldr	r3, [pc, #40]	; (800e780 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d202      	bcs.n	800e764 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e75e:	4a08      	ldr	r2, [pc, #32]	; (800e780 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	6013      	str	r3, [r2, #0]
}
 800e764:	bf00      	nop
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	200011c0 	.word	0x200011c0
 800e770:	20000ce8 	.word	0x20000ce8
 800e774:	200011a8 	.word	0x200011a8
 800e778:	20001178 	.word	0x20001178
 800e77c:	20001174 	.word	0x20001174
 800e780:	200011dc 	.word	0x200011dc

0800e784 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b08a      	sub	sp, #40	; 0x28
 800e788:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e78a:	2300      	movs	r3, #0
 800e78c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e78e:	f000 fb07 	bl	800eda0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e792:	4b1c      	ldr	r3, [pc, #112]	; (800e804 <xTimerCreateTimerTask+0x80>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d021      	beq.n	800e7de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e7a2:	1d3a      	adds	r2, r7, #4
 800e7a4:	f107 0108 	add.w	r1, r7, #8
 800e7a8:	f107 030c 	add.w	r3, r7, #12
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fd ff8f 	bl	800c6d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e7b2:	6879      	ldr	r1, [r7, #4]
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	9202      	str	r2, [sp, #8]
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	2302      	movs	r3, #2
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	460a      	mov	r2, r1
 800e7c4:	4910      	ldr	r1, [pc, #64]	; (800e808 <xTimerCreateTimerTask+0x84>)
 800e7c6:	4811      	ldr	r0, [pc, #68]	; (800e80c <xTimerCreateTimerTask+0x88>)
 800e7c8:	f7fe ffd0 	bl	800d76c <xTaskCreateStatic>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	4a10      	ldr	r2, [pc, #64]	; (800e810 <xTimerCreateTimerTask+0x8c>)
 800e7d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e7d2:	4b0f      	ldr	r3, [pc, #60]	; (800e810 <xTimerCreateTimerTask+0x8c>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d001      	beq.n	800e7de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10a      	bne.n	800e7fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	613b      	str	r3, [r7, #16]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e7fa:	697b      	ldr	r3, [r7, #20]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3718      	adds	r7, #24
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	20001218 	.word	0x20001218
 800e808:	08013df8 	.word	0x08013df8
 800e80c:	0800e949 	.word	0x0800e949
 800e810:	2000121c 	.word	0x2000121c

0800e814 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b08a      	sub	sp, #40	; 0x28
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e822:	2300      	movs	r3, #0
 800e824:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10a      	bne.n	800e842 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	623b      	str	r3, [r7, #32]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e842:	4b1a      	ldr	r3, [pc, #104]	; (800e8ac <xTimerGenericCommand+0x98>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d02a      	beq.n	800e8a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	2b05      	cmp	r3, #5
 800e85a:	dc18      	bgt.n	800e88e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e85c:	f7ff fdb4 	bl	800e3c8 <xTaskGetSchedulerState>
 800e860:	4603      	mov	r3, r0
 800e862:	2b02      	cmp	r3, #2
 800e864:	d109      	bne.n	800e87a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e866:	4b11      	ldr	r3, [pc, #68]	; (800e8ac <xTimerGenericCommand+0x98>)
 800e868:	6818      	ldr	r0, [r3, #0]
 800e86a:	f107 0110 	add.w	r1, r7, #16
 800e86e:	2300      	movs	r3, #0
 800e870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e872:	f7fe f9ef 	bl	800cc54 <xQueueGenericSend>
 800e876:	6278      	str	r0, [r7, #36]	; 0x24
 800e878:	e012      	b.n	800e8a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e87a:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <xTimerGenericCommand+0x98>)
 800e87c:	6818      	ldr	r0, [r3, #0]
 800e87e:	f107 0110 	add.w	r1, r7, #16
 800e882:	2300      	movs	r3, #0
 800e884:	2200      	movs	r2, #0
 800e886:	f7fe f9e5 	bl	800cc54 <xQueueGenericSend>
 800e88a:	6278      	str	r0, [r7, #36]	; 0x24
 800e88c:	e008      	b.n	800e8a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e88e:	4b07      	ldr	r3, [pc, #28]	; (800e8ac <xTimerGenericCommand+0x98>)
 800e890:	6818      	ldr	r0, [r3, #0]
 800e892:	f107 0110 	add.w	r1, r7, #16
 800e896:	2300      	movs	r3, #0
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	f7fe fad9 	bl	800ce50 <xQueueGenericSendFromISR>
 800e89e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3728      	adds	r7, #40	; 0x28
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20001218 	.word	0x20001218

0800e8b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b088      	sub	sp, #32
 800e8b4:	af02      	add	r7, sp, #8
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ba:	4b22      	ldr	r3, [pc, #136]	; (800e944 <prvProcessExpiredTimer+0x94>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fd ffa5 	bl	800c818 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d4:	f003 0304 	and.w	r3, r3, #4
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d022      	beq.n	800e922 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	699a      	ldr	r2, [r3, #24]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	18d1      	adds	r1, r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	683a      	ldr	r2, [r7, #0]
 800e8e8:	6978      	ldr	r0, [r7, #20]
 800e8ea:	f000 f8d1 	bl	800ea90 <prvInsertTimerInActiveList>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d01f      	beq.n	800e934 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	6978      	ldr	r0, [r7, #20]
 800e900:	f7ff ff88 	bl	800e814 <xTimerGenericCommand>
 800e904:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d113      	bne.n	800e934 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	60fb      	str	r3, [r7, #12]
}
 800e91e:	bf00      	nop
 800e920:	e7fe      	b.n	800e920 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e928:	f023 0301 	bic.w	r3, r3, #1
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	6a1b      	ldr	r3, [r3, #32]
 800e938:	6978      	ldr	r0, [r7, #20]
 800e93a:	4798      	blx	r3
}
 800e93c:	bf00      	nop
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	20001210 	.word	0x20001210

0800e948 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e950:	f107 0308 	add.w	r3, r7, #8
 800e954:	4618      	mov	r0, r3
 800e956:	f000 f857 	bl	800ea08 <prvGetNextExpireTime>
 800e95a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	4619      	mov	r1, r3
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f000 f803 	bl	800e96c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e966:	f000 f8d5 	bl	800eb14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e96a:	e7f1      	b.n	800e950 <prvTimerTask+0x8>

0800e96c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e976:	f7ff f935 	bl	800dbe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e97a:	f107 0308 	add.w	r3, r7, #8
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 f866 	bl	800ea50 <prvSampleTimeNow>
 800e984:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d130      	bne.n	800e9ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10a      	bne.n	800e9a8 <prvProcessTimerOrBlockTask+0x3c>
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	429a      	cmp	r2, r3
 800e998:	d806      	bhi.n	800e9a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e99a:	f7ff f931 	bl	800dc00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e99e:	68f9      	ldr	r1, [r7, #12]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7ff ff85 	bl	800e8b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e9a6:	e024      	b.n	800e9f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d008      	beq.n	800e9c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <prvProcessTimerOrBlockTask+0x90>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <prvProcessTimerOrBlockTask+0x50>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e000      	b.n	800e9be <prvProcessTimerOrBlockTask+0x52>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ea00 <prvProcessTimerOrBlockTask+0x94>)
 800e9c2:	6818      	ldr	r0, [r3, #0]
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	f7fe fe99 	bl	800d704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e9d2:	f7ff f915 	bl	800dc00 <xTaskResumeAll>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10a      	bne.n	800e9f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e9dc:	4b09      	ldr	r3, [pc, #36]	; (800ea04 <prvProcessTimerOrBlockTask+0x98>)
 800e9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	f3bf 8f6f 	isb	sy
}
 800e9ec:	e001      	b.n	800e9f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e9ee:	f7ff f907 	bl	800dc00 <xTaskResumeAll>
}
 800e9f2:	bf00      	nop
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20001214 	.word	0x20001214
 800ea00:	20001218 	.word	0x20001218
 800ea04:	e000ed04 	.word	0xe000ed04

0800ea08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea10:	4b0e      	ldr	r3, [pc, #56]	; (800ea4c <prvGetNextExpireTime+0x44>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <prvGetNextExpireTime+0x16>
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	e000      	b.n	800ea20 <prvGetNextExpireTime+0x18>
 800ea1e:	2200      	movs	r2, #0
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d105      	bne.n	800ea38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea2c:	4b07      	ldr	r3, [pc, #28]	; (800ea4c <prvGetNextExpireTime+0x44>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	e001      	b.n	800ea3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3714      	adds	r7, #20
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	20001210 	.word	0x20001210

0800ea50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea58:	f7ff f970 	bl	800dd3c <xTaskGetTickCount>
 800ea5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea5e:	4b0b      	ldr	r3, [pc, #44]	; (800ea8c <prvSampleTimeNow+0x3c>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d205      	bcs.n	800ea74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea68:	f000 f936 	bl	800ecd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	601a      	str	r2, [r3, #0]
 800ea72:	e002      	b.n	800ea7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea7a:	4a04      	ldr	r2, [pc, #16]	; (800ea8c <prvSampleTimeNow+0x3c>)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea80:	68fb      	ldr	r3, [r7, #12]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20001220 	.word	0x20001220

0800ea90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
 800ea9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d812      	bhi.n	800eadc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	1ad2      	subs	r2, r2, r3
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d302      	bcc.n	800eaca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eac4:	2301      	movs	r3, #1
 800eac6:	617b      	str	r3, [r7, #20]
 800eac8:	e01b      	b.n	800eb02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eaca:	4b10      	ldr	r3, [pc, #64]	; (800eb0c <prvInsertTimerInActiveList+0x7c>)
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	3304      	adds	r3, #4
 800ead2:	4619      	mov	r1, r3
 800ead4:	4610      	mov	r0, r2
 800ead6:	f7fd fe66 	bl	800c7a6 <vListInsert>
 800eada:	e012      	b.n	800eb02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d206      	bcs.n	800eaf2 <prvInsertTimerInActiveList+0x62>
 800eae4:	68ba      	ldr	r2, [r7, #8]
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d302      	bcc.n	800eaf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eaec:	2301      	movs	r3, #1
 800eaee:	617b      	str	r3, [r7, #20]
 800eaf0:	e007      	b.n	800eb02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaf2:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <prvInsertTimerInActiveList+0x80>)
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	4619      	mov	r1, r3
 800eafc:	4610      	mov	r0, r2
 800eafe:	f7fd fe52 	bl	800c7a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eb02:	697b      	ldr	r3, [r7, #20]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3718      	adds	r7, #24
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	20001214 	.word	0x20001214
 800eb10:	20001210 	.word	0x20001210

0800eb14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b08e      	sub	sp, #56	; 0x38
 800eb18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb1a:	e0ca      	b.n	800ecb2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	da18      	bge.n	800eb54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb22:	1d3b      	adds	r3, r7, #4
 800eb24:	3304      	adds	r3, #4
 800eb26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10a      	bne.n	800eb44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800eb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb32:	f383 8811 	msr	BASEPRI, r3
 800eb36:	f3bf 8f6f 	isb	sy
 800eb3a:	f3bf 8f4f 	dsb	sy
 800eb3e:	61fb      	str	r3, [r7, #28]
}
 800eb40:	bf00      	nop
 800eb42:	e7fe      	b.n	800eb42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb4a:	6850      	ldr	r0, [r2, #4]
 800eb4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb4e:	6892      	ldr	r2, [r2, #8]
 800eb50:	4611      	mov	r1, r2
 800eb52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f2c0 80aa 	blt.w	800ecb0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fd fe53 	bl	800c818 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb72:	463b      	mov	r3, r7
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff ff6b 	bl	800ea50 <prvSampleTimeNow>
 800eb7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b09      	cmp	r3, #9
 800eb80:	f200 8097 	bhi.w	800ecb2 <prvProcessReceivedCommands+0x19e>
 800eb84:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <prvProcessReceivedCommands+0x78>)
 800eb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8a:	bf00      	nop
 800eb8c:	0800ebb5 	.word	0x0800ebb5
 800eb90:	0800ebb5 	.word	0x0800ebb5
 800eb94:	0800ebb5 	.word	0x0800ebb5
 800eb98:	0800ec29 	.word	0x0800ec29
 800eb9c:	0800ec3d 	.word	0x0800ec3d
 800eba0:	0800ec87 	.word	0x0800ec87
 800eba4:	0800ebb5 	.word	0x0800ebb5
 800eba8:	0800ebb5 	.word	0x0800ebb5
 800ebac:	0800ec29 	.word	0x0800ec29
 800ebb0:	0800ec3d 	.word	0x0800ec3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebba:	f043 0301 	orr.w	r3, r3, #1
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebca:	699b      	ldr	r3, [r3, #24]
 800ebcc:	18d1      	adds	r1, r2, r3
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebd4:	f7ff ff5c 	bl	800ea90 <prvInsertTimerInActiveList>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d069      	beq.n	800ecb2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe0:	6a1b      	ldr	r3, [r3, #32]
 800ebe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebec:	f003 0304 	and.w	r3, r3, #4
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d05e      	beq.n	800ecb2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	699b      	ldr	r3, [r3, #24]
 800ebfa:	441a      	add	r2, r3
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	2300      	movs	r3, #0
 800ec02:	2100      	movs	r1, #0
 800ec04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec06:	f7ff fe05 	bl	800e814 <xTimerGenericCommand>
 800ec0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ec0c:	6a3b      	ldr	r3, [r7, #32]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d14f      	bne.n	800ecb2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	61bb      	str	r3, [r7, #24]
}
 800ec24:	bf00      	nop
 800ec26:	e7fe      	b.n	800ec26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec2e:	f023 0301 	bic.w	r3, r3, #1
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ec3a:	e03a      	b.n	800ecb2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec42:	f043 0301 	orr.w	r3, r3, #1
 800ec46:	b2da      	uxtb	r2, r3
 800ec48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec4e:	68ba      	ldr	r2, [r7, #8]
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10a      	bne.n	800ec72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	617b      	str	r3, [r7, #20]
}
 800ec6e:	bf00      	nop
 800ec70:	e7fe      	b.n	800ec70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec74:	699a      	ldr	r2, [r3, #24]
 800ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec78:	18d1      	adds	r1, r2, r3
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec80:	f7ff ff06 	bl	800ea90 <prvInsertTimerInActiveList>
					break;
 800ec84:	e015      	b.n	800ecb2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d103      	bne.n	800ec9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ec94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec96:	f000 fbdb 	bl	800f450 <vPortFree>
 800ec9a:	e00a      	b.n	800ecb2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eca2:	f023 0301 	bic.w	r3, r3, #1
 800eca6:	b2da      	uxtb	r2, r3
 800eca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ecae:	e000      	b.n	800ecb2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ecb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecb2:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <prvProcessReceivedCommands+0x1c0>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	1d39      	adds	r1, r7, #4
 800ecb8:	2200      	movs	r2, #0
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe f964 	bl	800cf88 <xQueueReceive>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f47f af2a 	bne.w	800eb1c <prvProcessReceivedCommands+0x8>
	}
}
 800ecc8:	bf00      	nop
 800ecca:	bf00      	nop
 800eccc:	3730      	adds	r7, #48	; 0x30
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	20001218 	.word	0x20001218

0800ecd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b088      	sub	sp, #32
 800ecdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ecde:	e048      	b.n	800ed72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ece0:	4b2d      	ldr	r3, [pc, #180]	; (800ed98 <prvSwitchTimerLists+0xc0>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecea:	4b2b      	ldr	r3, [pc, #172]	; (800ed98 <prvSwitchTimerLists+0xc0>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3304      	adds	r3, #4
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fd fd8d 	bl	800c818 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6a1b      	ldr	r3, [r3, #32]
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed0c:	f003 0304 	and.w	r3, r3, #4
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d02e      	beq.n	800ed72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	693a      	ldr	r2, [r7, #16]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d90e      	bls.n	800ed44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed32:	4b19      	ldr	r3, [pc, #100]	; (800ed98 <prvSwitchTimerLists+0xc0>)
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	3304      	adds	r3, #4
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	f7fd fd32 	bl	800c7a6 <vListInsert>
 800ed42:	e016      	b.n	800ed72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed44:	2300      	movs	r3, #0
 800ed46:	9300      	str	r3, [sp, #0]
 800ed48:	2300      	movs	r3, #0
 800ed4a:	693a      	ldr	r2, [r7, #16]
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f7ff fd60 	bl	800e814 <xTimerGenericCommand>
 800ed54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10a      	bne.n	800ed72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	603b      	str	r3, [r7, #0]
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed72:	4b09      	ldr	r3, [pc, #36]	; (800ed98 <prvSwitchTimerLists+0xc0>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1b1      	bne.n	800ece0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed7c:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <prvSwitchTimerLists+0xc0>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed82:	4b06      	ldr	r3, [pc, #24]	; (800ed9c <prvSwitchTimerLists+0xc4>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a04      	ldr	r2, [pc, #16]	; (800ed98 <prvSwitchTimerLists+0xc0>)
 800ed88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed8a:	4a04      	ldr	r2, [pc, #16]	; (800ed9c <prvSwitchTimerLists+0xc4>)
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	6013      	str	r3, [r2, #0]
}
 800ed90:	bf00      	nop
 800ed92:	3718      	adds	r7, #24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	20001210 	.word	0x20001210
 800ed9c:	20001214 	.word	0x20001214

0800eda0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eda6:	f000 f965 	bl	800f074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800edaa:	4b15      	ldr	r3, [pc, #84]	; (800ee00 <prvCheckForValidListAndQueue+0x60>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d120      	bne.n	800edf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800edb2:	4814      	ldr	r0, [pc, #80]	; (800ee04 <prvCheckForValidListAndQueue+0x64>)
 800edb4:	f7fd fca6 	bl	800c704 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800edb8:	4813      	ldr	r0, [pc, #76]	; (800ee08 <prvCheckForValidListAndQueue+0x68>)
 800edba:	f7fd fca3 	bl	800c704 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800edbe:	4b13      	ldr	r3, [pc, #76]	; (800ee0c <prvCheckForValidListAndQueue+0x6c>)
 800edc0:	4a10      	ldr	r2, [pc, #64]	; (800ee04 <prvCheckForValidListAndQueue+0x64>)
 800edc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800edc4:	4b12      	ldr	r3, [pc, #72]	; (800ee10 <prvCheckForValidListAndQueue+0x70>)
 800edc6:	4a10      	ldr	r2, [pc, #64]	; (800ee08 <prvCheckForValidListAndQueue+0x68>)
 800edc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800edca:	2300      	movs	r3, #0
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	4b11      	ldr	r3, [pc, #68]	; (800ee14 <prvCheckForValidListAndQueue+0x74>)
 800edd0:	4a11      	ldr	r2, [pc, #68]	; (800ee18 <prvCheckForValidListAndQueue+0x78>)
 800edd2:	2110      	movs	r1, #16
 800edd4:	200a      	movs	r0, #10
 800edd6:	f7fd fdb1 	bl	800c93c <xQueueGenericCreateStatic>
 800edda:	4603      	mov	r3, r0
 800eddc:	4a08      	ldr	r2, [pc, #32]	; (800ee00 <prvCheckForValidListAndQueue+0x60>)
 800edde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <prvCheckForValidListAndQueue+0x60>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d005      	beq.n	800edf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ede8:	4b05      	ldr	r3, [pc, #20]	; (800ee00 <prvCheckForValidListAndQueue+0x60>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	490b      	ldr	r1, [pc, #44]	; (800ee1c <prvCheckForValidListAndQueue+0x7c>)
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fe fc5e 	bl	800d6b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800edf4:	f000 f96e 	bl	800f0d4 <vPortExitCritical>
}
 800edf8:	bf00      	nop
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20001218 	.word	0x20001218
 800ee04:	200011e8 	.word	0x200011e8
 800ee08:	200011fc 	.word	0x200011fc
 800ee0c:	20001210 	.word	0x20001210
 800ee10:	20001214 	.word	0x20001214
 800ee14:	200012c4 	.word	0x200012c4
 800ee18:	20001224 	.word	0x20001224
 800ee1c:	08013e00 	.word	0x08013e00

0800ee20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	3b04      	subs	r3, #4
 800ee30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ee38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3b04      	subs	r3, #4
 800ee3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	f023 0201 	bic.w	r2, r3, #1
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3b04      	subs	r3, #4
 800ee4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee50:	4a0c      	ldr	r2, [pc, #48]	; (800ee84 <pxPortInitialiseStack+0x64>)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	3b14      	subs	r3, #20
 800ee5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3b04      	subs	r3, #4
 800ee66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f06f 0202 	mvn.w	r2, #2
 800ee6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	3b20      	subs	r3, #32
 800ee74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee76:	68fb      	ldr	r3, [r7, #12]
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3714      	adds	r7, #20
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	0800ee89 	.word	0x0800ee89

0800ee88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee92:	4b12      	ldr	r3, [pc, #72]	; (800eedc <prvTaskExitError+0x54>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9a:	d00a      	beq.n	800eeb2 <prvTaskExitError+0x2a>
	__asm volatile
 800ee9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea0:	f383 8811 	msr	BASEPRI, r3
 800eea4:	f3bf 8f6f 	isb	sy
 800eea8:	f3bf 8f4f 	dsb	sy
 800eeac:	60fb      	str	r3, [r7, #12]
}
 800eeae:	bf00      	nop
 800eeb0:	e7fe      	b.n	800eeb0 <prvTaskExitError+0x28>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	60bb      	str	r3, [r7, #8]
}
 800eec4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eec6:	bf00      	nop
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d0fc      	beq.n	800eec8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eece:	bf00      	nop
 800eed0:	bf00      	nop
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr
 800eedc:	2000001c 	.word	0x2000001c

0800eee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eee0:	4b07      	ldr	r3, [pc, #28]	; (800ef00 <pxCurrentTCBConst2>)
 800eee2:	6819      	ldr	r1, [r3, #0]
 800eee4:	6808      	ldr	r0, [r1, #0]
 800eee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeea:	f380 8809 	msr	PSP, r0
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f04f 0000 	mov.w	r0, #0
 800eef6:	f380 8811 	msr	BASEPRI, r0
 800eefa:	4770      	bx	lr
 800eefc:	f3af 8000 	nop.w

0800ef00 <pxCurrentTCBConst2>:
 800ef00:	20000ce8 	.word	0x20000ce8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef04:	bf00      	nop
 800ef06:	bf00      	nop

0800ef08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef08:	4808      	ldr	r0, [pc, #32]	; (800ef2c <prvPortStartFirstTask+0x24>)
 800ef0a:	6800      	ldr	r0, [r0, #0]
 800ef0c:	6800      	ldr	r0, [r0, #0]
 800ef0e:	f380 8808 	msr	MSP, r0
 800ef12:	f04f 0000 	mov.w	r0, #0
 800ef16:	f380 8814 	msr	CONTROL, r0
 800ef1a:	b662      	cpsie	i
 800ef1c:	b661      	cpsie	f
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	f3bf 8f6f 	isb	sy
 800ef26:	df00      	svc	0
 800ef28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef2a:	bf00      	nop
 800ef2c:	e000ed08 	.word	0xe000ed08

0800ef30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b086      	sub	sp, #24
 800ef34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef36:	4b46      	ldr	r3, [pc, #280]	; (800f050 <xPortStartScheduler+0x120>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4a46      	ldr	r2, [pc, #280]	; (800f054 <xPortStartScheduler+0x124>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d10a      	bne.n	800ef56 <xPortStartScheduler+0x26>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	613b      	str	r3, [r7, #16]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef56:	4b3e      	ldr	r3, [pc, #248]	; (800f050 <xPortStartScheduler+0x120>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a3f      	ldr	r2, [pc, #252]	; (800f058 <xPortStartScheduler+0x128>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d10a      	bne.n	800ef76 <xPortStartScheduler+0x46>
	__asm volatile
 800ef60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	60fb      	str	r3, [r7, #12]
}
 800ef72:	bf00      	nop
 800ef74:	e7fe      	b.n	800ef74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ef76:	4b39      	ldr	r3, [pc, #228]	; (800f05c <xPortStartScheduler+0x12c>)
 800ef78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	22ff      	movs	r2, #255	; 0xff
 800ef86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ef90:	78fb      	ldrb	r3, [r7, #3]
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	4b31      	ldr	r3, [pc, #196]	; (800f060 <xPortStartScheduler+0x130>)
 800ef9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ef9e:	4b31      	ldr	r3, [pc, #196]	; (800f064 <xPortStartScheduler+0x134>)
 800efa0:	2207      	movs	r2, #7
 800efa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efa4:	e009      	b.n	800efba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800efa6:	4b2f      	ldr	r3, [pc, #188]	; (800f064 <xPortStartScheduler+0x134>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3b01      	subs	r3, #1
 800efac:	4a2d      	ldr	r2, [pc, #180]	; (800f064 <xPortStartScheduler+0x134>)
 800efae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800efb0:	78fb      	ldrb	r3, [r7, #3]
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	005b      	lsls	r3, r3, #1
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efba:	78fb      	ldrb	r3, [r7, #3]
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efc2:	2b80      	cmp	r3, #128	; 0x80
 800efc4:	d0ef      	beq.n	800efa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800efc6:	4b27      	ldr	r3, [pc, #156]	; (800f064 <xPortStartScheduler+0x134>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f1c3 0307 	rsb	r3, r3, #7
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d00a      	beq.n	800efe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800efd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd6:	f383 8811 	msr	BASEPRI, r3
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	60bb      	str	r3, [r7, #8]
}
 800efe4:	bf00      	nop
 800efe6:	e7fe      	b.n	800efe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800efe8:	4b1e      	ldr	r3, [pc, #120]	; (800f064 <xPortStartScheduler+0x134>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	4a1d      	ldr	r2, [pc, #116]	; (800f064 <xPortStartScheduler+0x134>)
 800eff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eff2:	4b1c      	ldr	r3, [pc, #112]	; (800f064 <xPortStartScheduler+0x134>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800effa:	4a1a      	ldr	r2, [pc, #104]	; (800f064 <xPortStartScheduler+0x134>)
 800effc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	b2da      	uxtb	r2, r3
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f006:	4b18      	ldr	r3, [pc, #96]	; (800f068 <xPortStartScheduler+0x138>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a17      	ldr	r2, [pc, #92]	; (800f068 <xPortStartScheduler+0x138>)
 800f00c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f012:	4b15      	ldr	r3, [pc, #84]	; (800f068 <xPortStartScheduler+0x138>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a14      	ldr	r2, [pc, #80]	; (800f068 <xPortStartScheduler+0x138>)
 800f018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f01c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f01e:	f000 f8dd 	bl	800f1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f022:	4b12      	ldr	r3, [pc, #72]	; (800f06c <xPortStartScheduler+0x13c>)
 800f024:	2200      	movs	r2, #0
 800f026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f028:	f000 f8fc 	bl	800f224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f02c:	4b10      	ldr	r3, [pc, #64]	; (800f070 <xPortStartScheduler+0x140>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a0f      	ldr	r2, [pc, #60]	; (800f070 <xPortStartScheduler+0x140>)
 800f032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f038:	f7ff ff66 	bl	800ef08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f03c:	f7fe ff48 	bl	800ded0 <vTaskSwitchContext>
	prvTaskExitError();
 800f040:	f7ff ff22 	bl	800ee88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f044:	2300      	movs	r3, #0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3718      	adds	r7, #24
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	e000ed00 	.word	0xe000ed00
 800f054:	410fc271 	.word	0x410fc271
 800f058:	410fc270 	.word	0x410fc270
 800f05c:	e000e400 	.word	0xe000e400
 800f060:	20001314 	.word	0x20001314
 800f064:	20001318 	.word	0x20001318
 800f068:	e000ed20 	.word	0xe000ed20
 800f06c:	2000001c 	.word	0x2000001c
 800f070:	e000ef34 	.word	0xe000ef34

0800f074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	607b      	str	r3, [r7, #4]
}
 800f08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f08e:	4b0f      	ldr	r3, [pc, #60]	; (800f0cc <vPortEnterCritical+0x58>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3301      	adds	r3, #1
 800f094:	4a0d      	ldr	r2, [pc, #52]	; (800f0cc <vPortEnterCritical+0x58>)
 800f096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f098:	4b0c      	ldr	r3, [pc, #48]	; (800f0cc <vPortEnterCritical+0x58>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d10f      	bne.n	800f0c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f0a0:	4b0b      	ldr	r3, [pc, #44]	; (800f0d0 <vPortEnterCritical+0x5c>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00a      	beq.n	800f0c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	603b      	str	r3, [r7, #0]
}
 800f0bc:	bf00      	nop
 800f0be:	e7fe      	b.n	800f0be <vPortEnterCritical+0x4a>
	}
}
 800f0c0:	bf00      	nop
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	2000001c 	.word	0x2000001c
 800f0d0:	e000ed04 	.word	0xe000ed04

0800f0d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f0da:	4b12      	ldr	r3, [pc, #72]	; (800f124 <vPortExitCritical+0x50>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10a      	bne.n	800f0f8 <vPortExitCritical+0x24>
	__asm volatile
 800f0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e6:	f383 8811 	msr	BASEPRI, r3
 800f0ea:	f3bf 8f6f 	isb	sy
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	607b      	str	r3, [r7, #4]
}
 800f0f4:	bf00      	nop
 800f0f6:	e7fe      	b.n	800f0f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f0f8:	4b0a      	ldr	r3, [pc, #40]	; (800f124 <vPortExitCritical+0x50>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	4a09      	ldr	r2, [pc, #36]	; (800f124 <vPortExitCritical+0x50>)
 800f100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f102:	4b08      	ldr	r3, [pc, #32]	; (800f124 <vPortExitCritical+0x50>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d105      	bne.n	800f116 <vPortExitCritical+0x42>
 800f10a:	2300      	movs	r3, #0
 800f10c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	f383 8811 	msr	BASEPRI, r3
}
 800f114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f116:	bf00      	nop
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	2000001c 	.word	0x2000001c
	...

0800f130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f130:	f3ef 8009 	mrs	r0, PSP
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	4b15      	ldr	r3, [pc, #84]	; (800f190 <pxCurrentTCBConst>)
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	f01e 0f10 	tst.w	lr, #16
 800f140:	bf08      	it	eq
 800f142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14a:	6010      	str	r0, [r2, #0]
 800f14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f150:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f154:	f380 8811 	msr	BASEPRI, r0
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f7fe feb6 	bl	800ded0 <vTaskSwitchContext>
 800f164:	f04f 0000 	mov.w	r0, #0
 800f168:	f380 8811 	msr	BASEPRI, r0
 800f16c:	bc09      	pop	{r0, r3}
 800f16e:	6819      	ldr	r1, [r3, #0]
 800f170:	6808      	ldr	r0, [r1, #0]
 800f172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f176:	f01e 0f10 	tst.w	lr, #16
 800f17a:	bf08      	it	eq
 800f17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f180:	f380 8809 	msr	PSP, r0
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	f3af 8000 	nop.w

0800f190 <pxCurrentTCBConst>:
 800f190:	20000ce8 	.word	0x20000ce8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f194:	bf00      	nop
 800f196:	bf00      	nop

0800f198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	607b      	str	r3, [r7, #4]
}
 800f1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1b2:	f7fe fdd3 	bl	800dd5c <xTaskIncrementTick>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d003      	beq.n	800f1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1bc:	4b06      	ldr	r3, [pc, #24]	; (800f1d8 <xPortSysTickHandler+0x40>)
 800f1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	f383 8811 	msr	BASEPRI, r3
}
 800f1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f1d0:	bf00      	nop
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	e000ed04 	.word	0xe000ed04

0800f1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f1dc:	b480      	push	{r7}
 800f1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f1e0:	4b0b      	ldr	r3, [pc, #44]	; (800f210 <vPortSetupTimerInterrupt+0x34>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f1e6:	4b0b      	ldr	r3, [pc, #44]	; (800f214 <vPortSetupTimerInterrupt+0x38>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f1ec:	4b0a      	ldr	r3, [pc, #40]	; (800f218 <vPortSetupTimerInterrupt+0x3c>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a0a      	ldr	r2, [pc, #40]	; (800f21c <vPortSetupTimerInterrupt+0x40>)
 800f1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1f6:	099b      	lsrs	r3, r3, #6
 800f1f8:	4a09      	ldr	r2, [pc, #36]	; (800f220 <vPortSetupTimerInterrupt+0x44>)
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f1fe:	4b04      	ldr	r3, [pc, #16]	; (800f210 <vPortSetupTimerInterrupt+0x34>)
 800f200:	2207      	movs	r2, #7
 800f202:	601a      	str	r2, [r3, #0]
}
 800f204:	bf00      	nop
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	e000e010 	.word	0xe000e010
 800f214:	e000e018 	.word	0xe000e018
 800f218:	20000010 	.word	0x20000010
 800f21c:	10624dd3 	.word	0x10624dd3
 800f220:	e000e014 	.word	0xe000e014

0800f224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f234 <vPortEnableVFP+0x10>
 800f228:	6801      	ldr	r1, [r0, #0]
 800f22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f22e:	6001      	str	r1, [r0, #0]
 800f230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f232:	bf00      	nop
 800f234:	e000ed88 	.word	0xe000ed88

0800f238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f23e:	f3ef 8305 	mrs	r3, IPSR
 800f242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b0f      	cmp	r3, #15
 800f248:	d914      	bls.n	800f274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f24a:	4a17      	ldr	r2, [pc, #92]	; (800f2a8 <vPortValidateInterruptPriority+0x70>)
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	4413      	add	r3, r2
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f254:	4b15      	ldr	r3, [pc, #84]	; (800f2ac <vPortValidateInterruptPriority+0x74>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	7afa      	ldrb	r2, [r7, #11]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d20a      	bcs.n	800f274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f262:	f383 8811 	msr	BASEPRI, r3
 800f266:	f3bf 8f6f 	isb	sy
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	607b      	str	r3, [r7, #4]
}
 800f270:	bf00      	nop
 800f272:	e7fe      	b.n	800f272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f274:	4b0e      	ldr	r3, [pc, #56]	; (800f2b0 <vPortValidateInterruptPriority+0x78>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f27c:	4b0d      	ldr	r3, [pc, #52]	; (800f2b4 <vPortValidateInterruptPriority+0x7c>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	429a      	cmp	r2, r3
 800f282:	d90a      	bls.n	800f29a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f288:	f383 8811 	msr	BASEPRI, r3
 800f28c:	f3bf 8f6f 	isb	sy
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	603b      	str	r3, [r7, #0]
}
 800f296:	bf00      	nop
 800f298:	e7fe      	b.n	800f298 <vPortValidateInterruptPriority+0x60>
	}
 800f29a:	bf00      	nop
 800f29c:	3714      	adds	r7, #20
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	e000e3f0 	.word	0xe000e3f0
 800f2ac:	20001314 	.word	0x20001314
 800f2b0:	e000ed0c 	.word	0xe000ed0c
 800f2b4:	20001318 	.word	0x20001318

0800f2b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b08a      	sub	sp, #40	; 0x28
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f2c4:	f7fe fc8e 	bl	800dbe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f2c8:	4b5b      	ldr	r3, [pc, #364]	; (800f438 <pvPortMalloc+0x180>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d101      	bne.n	800f2d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f2d0:	f000 f920 	bl	800f514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f2d4:	4b59      	ldr	r3, [pc, #356]	; (800f43c <pvPortMalloc+0x184>)
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4013      	ands	r3, r2
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f040 8093 	bne.w	800f408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d01d      	beq.n	800f324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f2e8:	2208      	movs	r2, #8
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f003 0307 	and.w	r3, r3, #7
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d014      	beq.n	800f324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f023 0307 	bic.w	r3, r3, #7
 800f300:	3308      	adds	r3, #8
 800f302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f003 0307 	and.w	r3, r3, #7
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00a      	beq.n	800f324 <pvPortMalloc+0x6c>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	617b      	str	r3, [r7, #20]
}
 800f320:	bf00      	nop
 800f322:	e7fe      	b.n	800f322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d06e      	beq.n	800f408 <pvPortMalloc+0x150>
 800f32a:	4b45      	ldr	r3, [pc, #276]	; (800f440 <pvPortMalloc+0x188>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	429a      	cmp	r2, r3
 800f332:	d869      	bhi.n	800f408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f334:	4b43      	ldr	r3, [pc, #268]	; (800f444 <pvPortMalloc+0x18c>)
 800f336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f338:	4b42      	ldr	r3, [pc, #264]	; (800f444 <pvPortMalloc+0x18c>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f33e:	e004      	b.n	800f34a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	429a      	cmp	r2, r3
 800f352:	d903      	bls.n	800f35c <pvPortMalloc+0xa4>
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1f1      	bne.n	800f340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f35c:	4b36      	ldr	r3, [pc, #216]	; (800f438 <pvPortMalloc+0x180>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f362:	429a      	cmp	r2, r3
 800f364:	d050      	beq.n	800f408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f366:	6a3b      	ldr	r3, [r7, #32]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2208      	movs	r2, #8
 800f36c:	4413      	add	r3, r2
 800f36e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	6a3b      	ldr	r3, [r7, #32]
 800f376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37a:	685a      	ldr	r2, [r3, #4]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	1ad2      	subs	r2, r2, r3
 800f380:	2308      	movs	r3, #8
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	429a      	cmp	r2, r3
 800f386:	d91f      	bls.n	800f3c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4413      	add	r3, r2
 800f38e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	f003 0307 	and.w	r3, r3, #7
 800f396:	2b00      	cmp	r3, #0
 800f398:	d00a      	beq.n	800f3b0 <pvPortMalloc+0xf8>
	__asm volatile
 800f39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	f3bf 8f4f 	dsb	sy
 800f3aa:	613b      	str	r3, [r7, #16]
}
 800f3ac:	bf00      	nop
 800f3ae:	e7fe      	b.n	800f3ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b2:	685a      	ldr	r2, [r3, #4]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	1ad2      	subs	r2, r2, r3
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f3c2:	69b8      	ldr	r0, [r7, #24]
 800f3c4:	f000 f908 	bl	800f5d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f3c8:	4b1d      	ldr	r3, [pc, #116]	; (800f440 <pvPortMalloc+0x188>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	4a1b      	ldr	r2, [pc, #108]	; (800f440 <pvPortMalloc+0x188>)
 800f3d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f3d6:	4b1a      	ldr	r3, [pc, #104]	; (800f440 <pvPortMalloc+0x188>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	4b1b      	ldr	r3, [pc, #108]	; (800f448 <pvPortMalloc+0x190>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d203      	bcs.n	800f3ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f3e2:	4b17      	ldr	r3, [pc, #92]	; (800f440 <pvPortMalloc+0x188>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4a18      	ldr	r2, [pc, #96]	; (800f448 <pvPortMalloc+0x190>)
 800f3e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	4b13      	ldr	r3, [pc, #76]	; (800f43c <pvPortMalloc+0x184>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	431a      	orrs	r2, r3
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f3fe:	4b13      	ldr	r3, [pc, #76]	; (800f44c <pvPortMalloc+0x194>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	3301      	adds	r3, #1
 800f404:	4a11      	ldr	r2, [pc, #68]	; (800f44c <pvPortMalloc+0x194>)
 800f406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f408:	f7fe fbfa 	bl	800dc00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	f003 0307 	and.w	r3, r3, #7
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00a      	beq.n	800f42c <pvPortMalloc+0x174>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	60fb      	str	r3, [r7, #12]
}
 800f428:	bf00      	nop
 800f42a:	e7fe      	b.n	800f42a <pvPortMalloc+0x172>
	return pvReturn;
 800f42c:	69fb      	ldr	r3, [r7, #28]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3728      	adds	r7, #40	; 0x28
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	20006324 	.word	0x20006324
 800f43c:	20006338 	.word	0x20006338
 800f440:	20006328 	.word	0x20006328
 800f444:	2000631c 	.word	0x2000631c
 800f448:	2000632c 	.word	0x2000632c
 800f44c:	20006330 	.word	0x20006330

0800f450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b086      	sub	sp, #24
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d04d      	beq.n	800f4fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f462:	2308      	movs	r3, #8
 800f464:	425b      	negs	r3, r3
 800f466:	697a      	ldr	r2, [r7, #20]
 800f468:	4413      	add	r3, r2
 800f46a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	685a      	ldr	r2, [r3, #4]
 800f474:	4b24      	ldr	r3, [pc, #144]	; (800f508 <vPortFree+0xb8>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4013      	ands	r3, r2
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10a      	bne.n	800f494 <vPortFree+0x44>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	60fb      	str	r3, [r7, #12]
}
 800f490:	bf00      	nop
 800f492:	e7fe      	b.n	800f492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00a      	beq.n	800f4b2 <vPortFree+0x62>
	__asm volatile
 800f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a0:	f383 8811 	msr	BASEPRI, r3
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	60bb      	str	r3, [r7, #8]
}
 800f4ae:	bf00      	nop
 800f4b0:	e7fe      	b.n	800f4b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	4b14      	ldr	r3, [pc, #80]	; (800f508 <vPortFree+0xb8>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d01e      	beq.n	800f4fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d11a      	bne.n	800f4fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	685a      	ldr	r2, [r3, #4]
 800f4cc:	4b0e      	ldr	r3, [pc, #56]	; (800f508 <vPortFree+0xb8>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	43db      	mvns	r3, r3
 800f4d2:	401a      	ands	r2, r3
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f4d8:	f7fe fb84 	bl	800dbe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	685a      	ldr	r2, [r3, #4]
 800f4e0:	4b0a      	ldr	r3, [pc, #40]	; (800f50c <vPortFree+0xbc>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	4a09      	ldr	r2, [pc, #36]	; (800f50c <vPortFree+0xbc>)
 800f4e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f4ea:	6938      	ldr	r0, [r7, #16]
 800f4ec:	f000 f874 	bl	800f5d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f4f0:	4b07      	ldr	r3, [pc, #28]	; (800f510 <vPortFree+0xc0>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	4a06      	ldr	r2, [pc, #24]	; (800f510 <vPortFree+0xc0>)
 800f4f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f4fa:	f7fe fb81 	bl	800dc00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f4fe:	bf00      	nop
 800f500:	3718      	adds	r7, #24
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	20006338 	.word	0x20006338
 800f50c:	20006328 	.word	0x20006328
 800f510:	20006334 	.word	0x20006334

0800f514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f51a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800f51e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f520:	4b27      	ldr	r3, [pc, #156]	; (800f5c0 <prvHeapInit+0xac>)
 800f522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f003 0307 	and.w	r3, r3, #7
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d00c      	beq.n	800f548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3307      	adds	r3, #7
 800f532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f023 0307 	bic.w	r3, r3, #7
 800f53a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	4a1f      	ldr	r2, [pc, #124]	; (800f5c0 <prvHeapInit+0xac>)
 800f544:	4413      	add	r3, r2
 800f546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f54c:	4a1d      	ldr	r2, [pc, #116]	; (800f5c4 <prvHeapInit+0xb0>)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f552:	4b1c      	ldr	r3, [pc, #112]	; (800f5c4 <prvHeapInit+0xb0>)
 800f554:	2200      	movs	r2, #0
 800f556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	68ba      	ldr	r2, [r7, #8]
 800f55c:	4413      	add	r3, r2
 800f55e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f560:	2208      	movs	r2, #8
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	1a9b      	subs	r3, r3, r2
 800f566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f023 0307 	bic.w	r3, r3, #7
 800f56e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	4a15      	ldr	r2, [pc, #84]	; (800f5c8 <prvHeapInit+0xb4>)
 800f574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f576:	4b14      	ldr	r3, [pc, #80]	; (800f5c8 <prvHeapInit+0xb4>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2200      	movs	r2, #0
 800f57c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f57e:	4b12      	ldr	r3, [pc, #72]	; (800f5c8 <prvHeapInit+0xb4>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	1ad2      	subs	r2, r2, r3
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f594:	4b0c      	ldr	r3, [pc, #48]	; (800f5c8 <prvHeapInit+0xb4>)
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	4a0a      	ldr	r2, [pc, #40]	; (800f5cc <prvHeapInit+0xb8>)
 800f5a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	4a09      	ldr	r2, [pc, #36]	; (800f5d0 <prvHeapInit+0xbc>)
 800f5aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5ac:	4b09      	ldr	r3, [pc, #36]	; (800f5d4 <prvHeapInit+0xc0>)
 800f5ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f5b2:	601a      	str	r2, [r3, #0]
}
 800f5b4:	bf00      	nop
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr
 800f5c0:	2000131c 	.word	0x2000131c
 800f5c4:	2000631c 	.word	0x2000631c
 800f5c8:	20006324 	.word	0x20006324
 800f5cc:	2000632c 	.word	0x2000632c
 800f5d0:	20006328 	.word	0x20006328
 800f5d4:	20006338 	.word	0x20006338

0800f5d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f5e0:	4b28      	ldr	r3, [pc, #160]	; (800f684 <prvInsertBlockIntoFreeList+0xac>)
 800f5e2:	60fb      	str	r3, [r7, #12]
 800f5e4:	e002      	b.n	800f5ec <prvInsertBlockIntoFreeList+0x14>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	60fb      	str	r3, [r7, #12]
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d8f7      	bhi.n	800f5e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	4413      	add	r3, r2
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	429a      	cmp	r2, r3
 800f606:	d108      	bne.n	800f61a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	441a      	add	r2, r3
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	441a      	add	r2, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d118      	bne.n	800f660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	4b15      	ldr	r3, [pc, #84]	; (800f688 <prvInsertBlockIntoFreeList+0xb0>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	429a      	cmp	r2, r3
 800f638:	d00d      	beq.n	800f656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	441a      	add	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	e008      	b.n	800f668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f656:	4b0c      	ldr	r3, [pc, #48]	; (800f688 <prvInsertBlockIntoFreeList+0xb0>)
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	e003      	b.n	800f668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d002      	beq.n	800f676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	2000631c 	.word	0x2000631c
 800f688:	20006324 	.word	0x20006324

0800f68c <__errno>:
 800f68c:	4b01      	ldr	r3, [pc, #4]	; (800f694 <__errno+0x8>)
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	20000020 	.word	0x20000020

0800f698 <__libc_init_array>:
 800f698:	b570      	push	{r4, r5, r6, lr}
 800f69a:	4d0d      	ldr	r5, [pc, #52]	; (800f6d0 <__libc_init_array+0x38>)
 800f69c:	4c0d      	ldr	r4, [pc, #52]	; (800f6d4 <__libc_init_array+0x3c>)
 800f69e:	1b64      	subs	r4, r4, r5
 800f6a0:	10a4      	asrs	r4, r4, #2
 800f6a2:	2600      	movs	r6, #0
 800f6a4:	42a6      	cmp	r6, r4
 800f6a6:	d109      	bne.n	800f6bc <__libc_init_array+0x24>
 800f6a8:	4d0b      	ldr	r5, [pc, #44]	; (800f6d8 <__libc_init_array+0x40>)
 800f6aa:	4c0c      	ldr	r4, [pc, #48]	; (800f6dc <__libc_init_array+0x44>)
 800f6ac:	f004 faac 	bl	8013c08 <_init>
 800f6b0:	1b64      	subs	r4, r4, r5
 800f6b2:	10a4      	asrs	r4, r4, #2
 800f6b4:	2600      	movs	r6, #0
 800f6b6:	42a6      	cmp	r6, r4
 800f6b8:	d105      	bne.n	800f6c6 <__libc_init_array+0x2e>
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6c0:	4798      	blx	r3
 800f6c2:	3601      	adds	r6, #1
 800f6c4:	e7ee      	b.n	800f6a4 <__libc_init_array+0xc>
 800f6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ca:	4798      	blx	r3
 800f6cc:	3601      	adds	r6, #1
 800f6ce:	e7f2      	b.n	800f6b6 <__libc_init_array+0x1e>
 800f6d0:	08014884 	.word	0x08014884
 800f6d4:	08014884 	.word	0x08014884
 800f6d8:	08014884 	.word	0x08014884
 800f6dc:	08014888 	.word	0x08014888

0800f6e0 <memcpy>:
 800f6e0:	440a      	add	r2, r1
 800f6e2:	4291      	cmp	r1, r2
 800f6e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6e8:	d100      	bne.n	800f6ec <memcpy+0xc>
 800f6ea:	4770      	bx	lr
 800f6ec:	b510      	push	{r4, lr}
 800f6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6f6:	4291      	cmp	r1, r2
 800f6f8:	d1f9      	bne.n	800f6ee <memcpy+0xe>
 800f6fa:	bd10      	pop	{r4, pc}

0800f6fc <memset>:
 800f6fc:	4402      	add	r2, r0
 800f6fe:	4603      	mov	r3, r0
 800f700:	4293      	cmp	r3, r2
 800f702:	d100      	bne.n	800f706 <memset+0xa>
 800f704:	4770      	bx	lr
 800f706:	f803 1b01 	strb.w	r1, [r3], #1
 800f70a:	e7f9      	b.n	800f700 <memset+0x4>

0800f70c <__cvt>:
 800f70c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f710:	ec55 4b10 	vmov	r4, r5, d0
 800f714:	2d00      	cmp	r5, #0
 800f716:	460e      	mov	r6, r1
 800f718:	4619      	mov	r1, r3
 800f71a:	462b      	mov	r3, r5
 800f71c:	bfbb      	ittet	lt
 800f71e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f722:	461d      	movlt	r5, r3
 800f724:	2300      	movge	r3, #0
 800f726:	232d      	movlt	r3, #45	; 0x2d
 800f728:	700b      	strb	r3, [r1, #0]
 800f72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f72c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f730:	4691      	mov	r9, r2
 800f732:	f023 0820 	bic.w	r8, r3, #32
 800f736:	bfbc      	itt	lt
 800f738:	4622      	movlt	r2, r4
 800f73a:	4614      	movlt	r4, r2
 800f73c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f740:	d005      	beq.n	800f74e <__cvt+0x42>
 800f742:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f746:	d100      	bne.n	800f74a <__cvt+0x3e>
 800f748:	3601      	adds	r6, #1
 800f74a:	2102      	movs	r1, #2
 800f74c:	e000      	b.n	800f750 <__cvt+0x44>
 800f74e:	2103      	movs	r1, #3
 800f750:	ab03      	add	r3, sp, #12
 800f752:	9301      	str	r3, [sp, #4]
 800f754:	ab02      	add	r3, sp, #8
 800f756:	9300      	str	r3, [sp, #0]
 800f758:	ec45 4b10 	vmov	d0, r4, r5
 800f75c:	4653      	mov	r3, sl
 800f75e:	4632      	mov	r2, r6
 800f760:	f000 fd0e 	bl	8010180 <_dtoa_r>
 800f764:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f768:	4607      	mov	r7, r0
 800f76a:	d102      	bne.n	800f772 <__cvt+0x66>
 800f76c:	f019 0f01 	tst.w	r9, #1
 800f770:	d022      	beq.n	800f7b8 <__cvt+0xac>
 800f772:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f776:	eb07 0906 	add.w	r9, r7, r6
 800f77a:	d110      	bne.n	800f79e <__cvt+0x92>
 800f77c:	783b      	ldrb	r3, [r7, #0]
 800f77e:	2b30      	cmp	r3, #48	; 0x30
 800f780:	d10a      	bne.n	800f798 <__cvt+0x8c>
 800f782:	2200      	movs	r2, #0
 800f784:	2300      	movs	r3, #0
 800f786:	4620      	mov	r0, r4
 800f788:	4629      	mov	r1, r5
 800f78a:	f7f1 f9b5 	bl	8000af8 <__aeabi_dcmpeq>
 800f78e:	b918      	cbnz	r0, 800f798 <__cvt+0x8c>
 800f790:	f1c6 0601 	rsb	r6, r6, #1
 800f794:	f8ca 6000 	str.w	r6, [sl]
 800f798:	f8da 3000 	ldr.w	r3, [sl]
 800f79c:	4499      	add	r9, r3
 800f79e:	2200      	movs	r2, #0
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	f7f1 f9a7 	bl	8000af8 <__aeabi_dcmpeq>
 800f7aa:	b108      	cbz	r0, 800f7b0 <__cvt+0xa4>
 800f7ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800f7b0:	2230      	movs	r2, #48	; 0x30
 800f7b2:	9b03      	ldr	r3, [sp, #12]
 800f7b4:	454b      	cmp	r3, r9
 800f7b6:	d307      	bcc.n	800f7c8 <__cvt+0xbc>
 800f7b8:	9b03      	ldr	r3, [sp, #12]
 800f7ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7bc:	1bdb      	subs	r3, r3, r7
 800f7be:	4638      	mov	r0, r7
 800f7c0:	6013      	str	r3, [r2, #0]
 800f7c2:	b004      	add	sp, #16
 800f7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c8:	1c59      	adds	r1, r3, #1
 800f7ca:	9103      	str	r1, [sp, #12]
 800f7cc:	701a      	strb	r2, [r3, #0]
 800f7ce:	e7f0      	b.n	800f7b2 <__cvt+0xa6>

0800f7d0 <__exponent>:
 800f7d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2900      	cmp	r1, #0
 800f7d6:	bfb8      	it	lt
 800f7d8:	4249      	neglt	r1, r1
 800f7da:	f803 2b02 	strb.w	r2, [r3], #2
 800f7de:	bfb4      	ite	lt
 800f7e0:	222d      	movlt	r2, #45	; 0x2d
 800f7e2:	222b      	movge	r2, #43	; 0x2b
 800f7e4:	2909      	cmp	r1, #9
 800f7e6:	7042      	strb	r2, [r0, #1]
 800f7e8:	dd2a      	ble.n	800f840 <__exponent+0x70>
 800f7ea:	f10d 0407 	add.w	r4, sp, #7
 800f7ee:	46a4      	mov	ip, r4
 800f7f0:	270a      	movs	r7, #10
 800f7f2:	46a6      	mov	lr, r4
 800f7f4:	460a      	mov	r2, r1
 800f7f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800f7fa:	fb07 1516 	mls	r5, r7, r6, r1
 800f7fe:	3530      	adds	r5, #48	; 0x30
 800f800:	2a63      	cmp	r2, #99	; 0x63
 800f802:	f104 34ff 	add.w	r4, r4, #4294967295
 800f806:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f80a:	4631      	mov	r1, r6
 800f80c:	dcf1      	bgt.n	800f7f2 <__exponent+0x22>
 800f80e:	3130      	adds	r1, #48	; 0x30
 800f810:	f1ae 0502 	sub.w	r5, lr, #2
 800f814:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f818:	1c44      	adds	r4, r0, #1
 800f81a:	4629      	mov	r1, r5
 800f81c:	4561      	cmp	r1, ip
 800f81e:	d30a      	bcc.n	800f836 <__exponent+0x66>
 800f820:	f10d 0209 	add.w	r2, sp, #9
 800f824:	eba2 020e 	sub.w	r2, r2, lr
 800f828:	4565      	cmp	r5, ip
 800f82a:	bf88      	it	hi
 800f82c:	2200      	movhi	r2, #0
 800f82e:	4413      	add	r3, r2
 800f830:	1a18      	subs	r0, r3, r0
 800f832:	b003      	add	sp, #12
 800f834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f83a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f83e:	e7ed      	b.n	800f81c <__exponent+0x4c>
 800f840:	2330      	movs	r3, #48	; 0x30
 800f842:	3130      	adds	r1, #48	; 0x30
 800f844:	7083      	strb	r3, [r0, #2]
 800f846:	70c1      	strb	r1, [r0, #3]
 800f848:	1d03      	adds	r3, r0, #4
 800f84a:	e7f1      	b.n	800f830 <__exponent+0x60>

0800f84c <_printf_float>:
 800f84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f850:	ed2d 8b02 	vpush	{d8}
 800f854:	b08d      	sub	sp, #52	; 0x34
 800f856:	460c      	mov	r4, r1
 800f858:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f85c:	4616      	mov	r6, r2
 800f85e:	461f      	mov	r7, r3
 800f860:	4605      	mov	r5, r0
 800f862:	f001 fa7b 	bl	8010d5c <_localeconv_r>
 800f866:	f8d0 a000 	ldr.w	sl, [r0]
 800f86a:	4650      	mov	r0, sl
 800f86c:	f7f0 fcc8 	bl	8000200 <strlen>
 800f870:	2300      	movs	r3, #0
 800f872:	930a      	str	r3, [sp, #40]	; 0x28
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	9305      	str	r3, [sp, #20]
 800f878:	f8d8 3000 	ldr.w	r3, [r8]
 800f87c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f880:	3307      	adds	r3, #7
 800f882:	f023 0307 	bic.w	r3, r3, #7
 800f886:	f103 0208 	add.w	r2, r3, #8
 800f88a:	f8c8 2000 	str.w	r2, [r8]
 800f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f892:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f896:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f89a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f89e:	9307      	str	r3, [sp, #28]
 800f8a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f8a4:	ee08 0a10 	vmov	s16, r0
 800f8a8:	4b9f      	ldr	r3, [pc, #636]	; (800fb28 <_printf_float+0x2dc>)
 800f8aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b2:	f7f1 f953 	bl	8000b5c <__aeabi_dcmpun>
 800f8b6:	bb88      	cbnz	r0, 800f91c <_printf_float+0xd0>
 800f8b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8bc:	4b9a      	ldr	r3, [pc, #616]	; (800fb28 <_printf_float+0x2dc>)
 800f8be:	f04f 32ff 	mov.w	r2, #4294967295
 800f8c2:	f7f1 f92d 	bl	8000b20 <__aeabi_dcmple>
 800f8c6:	bb48      	cbnz	r0, 800f91c <_printf_float+0xd0>
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	4649      	mov	r1, r9
 800f8d0:	f7f1 f91c 	bl	8000b0c <__aeabi_dcmplt>
 800f8d4:	b110      	cbz	r0, 800f8dc <_printf_float+0x90>
 800f8d6:	232d      	movs	r3, #45	; 0x2d
 800f8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8dc:	4b93      	ldr	r3, [pc, #588]	; (800fb2c <_printf_float+0x2e0>)
 800f8de:	4894      	ldr	r0, [pc, #592]	; (800fb30 <_printf_float+0x2e4>)
 800f8e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f8e4:	bf94      	ite	ls
 800f8e6:	4698      	movls	r8, r3
 800f8e8:	4680      	movhi	r8, r0
 800f8ea:	2303      	movs	r3, #3
 800f8ec:	6123      	str	r3, [r4, #16]
 800f8ee:	9b05      	ldr	r3, [sp, #20]
 800f8f0:	f023 0204 	bic.w	r2, r3, #4
 800f8f4:	6022      	str	r2, [r4, #0]
 800f8f6:	f04f 0900 	mov.w	r9, #0
 800f8fa:	9700      	str	r7, [sp, #0]
 800f8fc:	4633      	mov	r3, r6
 800f8fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800f900:	4621      	mov	r1, r4
 800f902:	4628      	mov	r0, r5
 800f904:	f000 f9d8 	bl	800fcb8 <_printf_common>
 800f908:	3001      	adds	r0, #1
 800f90a:	f040 8090 	bne.w	800fa2e <_printf_float+0x1e2>
 800f90e:	f04f 30ff 	mov.w	r0, #4294967295
 800f912:	b00d      	add	sp, #52	; 0x34
 800f914:	ecbd 8b02 	vpop	{d8}
 800f918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f91c:	4642      	mov	r2, r8
 800f91e:	464b      	mov	r3, r9
 800f920:	4640      	mov	r0, r8
 800f922:	4649      	mov	r1, r9
 800f924:	f7f1 f91a 	bl	8000b5c <__aeabi_dcmpun>
 800f928:	b140      	cbz	r0, 800f93c <_printf_float+0xf0>
 800f92a:	464b      	mov	r3, r9
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	bfbc      	itt	lt
 800f930:	232d      	movlt	r3, #45	; 0x2d
 800f932:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f936:	487f      	ldr	r0, [pc, #508]	; (800fb34 <_printf_float+0x2e8>)
 800f938:	4b7f      	ldr	r3, [pc, #508]	; (800fb38 <_printf_float+0x2ec>)
 800f93a:	e7d1      	b.n	800f8e0 <_printf_float+0x94>
 800f93c:	6863      	ldr	r3, [r4, #4]
 800f93e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f942:	9206      	str	r2, [sp, #24]
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	d13f      	bne.n	800f9c8 <_printf_float+0x17c>
 800f948:	2306      	movs	r3, #6
 800f94a:	6063      	str	r3, [r4, #4]
 800f94c:	9b05      	ldr	r3, [sp, #20]
 800f94e:	6861      	ldr	r1, [r4, #4]
 800f950:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f954:	2300      	movs	r3, #0
 800f956:	9303      	str	r3, [sp, #12]
 800f958:	ab0a      	add	r3, sp, #40	; 0x28
 800f95a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f95e:	ab09      	add	r3, sp, #36	; 0x24
 800f960:	ec49 8b10 	vmov	d0, r8, r9
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	6022      	str	r2, [r4, #0]
 800f968:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f96c:	4628      	mov	r0, r5
 800f96e:	f7ff fecd 	bl	800f70c <__cvt>
 800f972:	9b06      	ldr	r3, [sp, #24]
 800f974:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f976:	2b47      	cmp	r3, #71	; 0x47
 800f978:	4680      	mov	r8, r0
 800f97a:	d108      	bne.n	800f98e <_printf_float+0x142>
 800f97c:	1cc8      	adds	r0, r1, #3
 800f97e:	db02      	blt.n	800f986 <_printf_float+0x13a>
 800f980:	6863      	ldr	r3, [r4, #4]
 800f982:	4299      	cmp	r1, r3
 800f984:	dd41      	ble.n	800fa0a <_printf_float+0x1be>
 800f986:	f1ab 0b02 	sub.w	fp, fp, #2
 800f98a:	fa5f fb8b 	uxtb.w	fp, fp
 800f98e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f992:	d820      	bhi.n	800f9d6 <_printf_float+0x18a>
 800f994:	3901      	subs	r1, #1
 800f996:	465a      	mov	r2, fp
 800f998:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f99c:	9109      	str	r1, [sp, #36]	; 0x24
 800f99e:	f7ff ff17 	bl	800f7d0 <__exponent>
 800f9a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9a4:	1813      	adds	r3, r2, r0
 800f9a6:	2a01      	cmp	r2, #1
 800f9a8:	4681      	mov	r9, r0
 800f9aa:	6123      	str	r3, [r4, #16]
 800f9ac:	dc02      	bgt.n	800f9b4 <_printf_float+0x168>
 800f9ae:	6822      	ldr	r2, [r4, #0]
 800f9b0:	07d2      	lsls	r2, r2, #31
 800f9b2:	d501      	bpl.n	800f9b8 <_printf_float+0x16c>
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	6123      	str	r3, [r4, #16]
 800f9b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d09c      	beq.n	800f8fa <_printf_float+0xae>
 800f9c0:	232d      	movs	r3, #45	; 0x2d
 800f9c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9c6:	e798      	b.n	800f8fa <_printf_float+0xae>
 800f9c8:	9a06      	ldr	r2, [sp, #24]
 800f9ca:	2a47      	cmp	r2, #71	; 0x47
 800f9cc:	d1be      	bne.n	800f94c <_printf_float+0x100>
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1bc      	bne.n	800f94c <_printf_float+0x100>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e7b9      	b.n	800f94a <_printf_float+0xfe>
 800f9d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f9da:	d118      	bne.n	800fa0e <_printf_float+0x1c2>
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	6863      	ldr	r3, [r4, #4]
 800f9e0:	dd0b      	ble.n	800f9fa <_printf_float+0x1ae>
 800f9e2:	6121      	str	r1, [r4, #16]
 800f9e4:	b913      	cbnz	r3, 800f9ec <_printf_float+0x1a0>
 800f9e6:	6822      	ldr	r2, [r4, #0]
 800f9e8:	07d0      	lsls	r0, r2, #31
 800f9ea:	d502      	bpl.n	800f9f2 <_printf_float+0x1a6>
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	440b      	add	r3, r1
 800f9f0:	6123      	str	r3, [r4, #16]
 800f9f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800f9f4:	f04f 0900 	mov.w	r9, #0
 800f9f8:	e7de      	b.n	800f9b8 <_printf_float+0x16c>
 800f9fa:	b913      	cbnz	r3, 800fa02 <_printf_float+0x1b6>
 800f9fc:	6822      	ldr	r2, [r4, #0]
 800f9fe:	07d2      	lsls	r2, r2, #31
 800fa00:	d501      	bpl.n	800fa06 <_printf_float+0x1ba>
 800fa02:	3302      	adds	r3, #2
 800fa04:	e7f4      	b.n	800f9f0 <_printf_float+0x1a4>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e7f2      	b.n	800f9f0 <_printf_float+0x1a4>
 800fa0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fa0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa10:	4299      	cmp	r1, r3
 800fa12:	db05      	blt.n	800fa20 <_printf_float+0x1d4>
 800fa14:	6823      	ldr	r3, [r4, #0]
 800fa16:	6121      	str	r1, [r4, #16]
 800fa18:	07d8      	lsls	r0, r3, #31
 800fa1a:	d5ea      	bpl.n	800f9f2 <_printf_float+0x1a6>
 800fa1c:	1c4b      	adds	r3, r1, #1
 800fa1e:	e7e7      	b.n	800f9f0 <_printf_float+0x1a4>
 800fa20:	2900      	cmp	r1, #0
 800fa22:	bfd4      	ite	le
 800fa24:	f1c1 0202 	rsble	r2, r1, #2
 800fa28:	2201      	movgt	r2, #1
 800fa2a:	4413      	add	r3, r2
 800fa2c:	e7e0      	b.n	800f9f0 <_printf_float+0x1a4>
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	055a      	lsls	r2, r3, #21
 800fa32:	d407      	bmi.n	800fa44 <_printf_float+0x1f8>
 800fa34:	6923      	ldr	r3, [r4, #16]
 800fa36:	4642      	mov	r2, r8
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	47b8      	blx	r7
 800fa3e:	3001      	adds	r0, #1
 800fa40:	d12c      	bne.n	800fa9c <_printf_float+0x250>
 800fa42:	e764      	b.n	800f90e <_printf_float+0xc2>
 800fa44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fa48:	f240 80e0 	bls.w	800fc0c <_printf_float+0x3c0>
 800fa4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa50:	2200      	movs	r2, #0
 800fa52:	2300      	movs	r3, #0
 800fa54:	f7f1 f850 	bl	8000af8 <__aeabi_dcmpeq>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d034      	beq.n	800fac6 <_printf_float+0x27a>
 800fa5c:	4a37      	ldr	r2, [pc, #220]	; (800fb3c <_printf_float+0x2f0>)
 800fa5e:	2301      	movs	r3, #1
 800fa60:	4631      	mov	r1, r6
 800fa62:	4628      	mov	r0, r5
 800fa64:	47b8      	blx	r7
 800fa66:	3001      	adds	r0, #1
 800fa68:	f43f af51 	beq.w	800f90e <_printf_float+0xc2>
 800fa6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa70:	429a      	cmp	r2, r3
 800fa72:	db02      	blt.n	800fa7a <_printf_float+0x22e>
 800fa74:	6823      	ldr	r3, [r4, #0]
 800fa76:	07d8      	lsls	r0, r3, #31
 800fa78:	d510      	bpl.n	800fa9c <_printf_float+0x250>
 800fa7a:	ee18 3a10 	vmov	r3, s16
 800fa7e:	4652      	mov	r2, sl
 800fa80:	4631      	mov	r1, r6
 800fa82:	4628      	mov	r0, r5
 800fa84:	47b8      	blx	r7
 800fa86:	3001      	adds	r0, #1
 800fa88:	f43f af41 	beq.w	800f90e <_printf_float+0xc2>
 800fa8c:	f04f 0800 	mov.w	r8, #0
 800fa90:	f104 091a 	add.w	r9, r4, #26
 800fa94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa96:	3b01      	subs	r3, #1
 800fa98:	4543      	cmp	r3, r8
 800fa9a:	dc09      	bgt.n	800fab0 <_printf_float+0x264>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	079b      	lsls	r3, r3, #30
 800faa0:	f100 8105 	bmi.w	800fcae <_printf_float+0x462>
 800faa4:	68e0      	ldr	r0, [r4, #12]
 800faa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800faa8:	4298      	cmp	r0, r3
 800faaa:	bfb8      	it	lt
 800faac:	4618      	movlt	r0, r3
 800faae:	e730      	b.n	800f912 <_printf_float+0xc6>
 800fab0:	2301      	movs	r3, #1
 800fab2:	464a      	mov	r2, r9
 800fab4:	4631      	mov	r1, r6
 800fab6:	4628      	mov	r0, r5
 800fab8:	47b8      	blx	r7
 800faba:	3001      	adds	r0, #1
 800fabc:	f43f af27 	beq.w	800f90e <_printf_float+0xc2>
 800fac0:	f108 0801 	add.w	r8, r8, #1
 800fac4:	e7e6      	b.n	800fa94 <_printf_float+0x248>
 800fac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fac8:	2b00      	cmp	r3, #0
 800faca:	dc39      	bgt.n	800fb40 <_printf_float+0x2f4>
 800facc:	4a1b      	ldr	r2, [pc, #108]	; (800fb3c <_printf_float+0x2f0>)
 800face:	2301      	movs	r3, #1
 800fad0:	4631      	mov	r1, r6
 800fad2:	4628      	mov	r0, r5
 800fad4:	47b8      	blx	r7
 800fad6:	3001      	adds	r0, #1
 800fad8:	f43f af19 	beq.w	800f90e <_printf_float+0xc2>
 800fadc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fae0:	4313      	orrs	r3, r2
 800fae2:	d102      	bne.n	800faea <_printf_float+0x29e>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	07d9      	lsls	r1, r3, #31
 800fae8:	d5d8      	bpl.n	800fa9c <_printf_float+0x250>
 800faea:	ee18 3a10 	vmov	r3, s16
 800faee:	4652      	mov	r2, sl
 800faf0:	4631      	mov	r1, r6
 800faf2:	4628      	mov	r0, r5
 800faf4:	47b8      	blx	r7
 800faf6:	3001      	adds	r0, #1
 800faf8:	f43f af09 	beq.w	800f90e <_printf_float+0xc2>
 800fafc:	f04f 0900 	mov.w	r9, #0
 800fb00:	f104 0a1a 	add.w	sl, r4, #26
 800fb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb06:	425b      	negs	r3, r3
 800fb08:	454b      	cmp	r3, r9
 800fb0a:	dc01      	bgt.n	800fb10 <_printf_float+0x2c4>
 800fb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb0e:	e792      	b.n	800fa36 <_printf_float+0x1ea>
 800fb10:	2301      	movs	r3, #1
 800fb12:	4652      	mov	r2, sl
 800fb14:	4631      	mov	r1, r6
 800fb16:	4628      	mov	r0, r5
 800fb18:	47b8      	blx	r7
 800fb1a:	3001      	adds	r0, #1
 800fb1c:	f43f aef7 	beq.w	800f90e <_printf_float+0xc2>
 800fb20:	f109 0901 	add.w	r9, r9, #1
 800fb24:	e7ee      	b.n	800fb04 <_printf_float+0x2b8>
 800fb26:	bf00      	nop
 800fb28:	7fefffff 	.word	0x7fefffff
 800fb2c:	08014088 	.word	0x08014088
 800fb30:	0801408c 	.word	0x0801408c
 800fb34:	08014094 	.word	0x08014094
 800fb38:	08014090 	.word	0x08014090
 800fb3c:	08014098 	.word	0x08014098
 800fb40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb44:	429a      	cmp	r2, r3
 800fb46:	bfa8      	it	ge
 800fb48:	461a      	movge	r2, r3
 800fb4a:	2a00      	cmp	r2, #0
 800fb4c:	4691      	mov	r9, r2
 800fb4e:	dc37      	bgt.n	800fbc0 <_printf_float+0x374>
 800fb50:	f04f 0b00 	mov.w	fp, #0
 800fb54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb58:	f104 021a 	add.w	r2, r4, #26
 800fb5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb5e:	9305      	str	r3, [sp, #20]
 800fb60:	eba3 0309 	sub.w	r3, r3, r9
 800fb64:	455b      	cmp	r3, fp
 800fb66:	dc33      	bgt.n	800fbd0 <_printf_float+0x384>
 800fb68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	db3b      	blt.n	800fbe8 <_printf_float+0x39c>
 800fb70:	6823      	ldr	r3, [r4, #0]
 800fb72:	07da      	lsls	r2, r3, #31
 800fb74:	d438      	bmi.n	800fbe8 <_printf_float+0x39c>
 800fb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb78:	9a05      	ldr	r2, [sp, #20]
 800fb7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb7c:	1a9a      	subs	r2, r3, r2
 800fb7e:	eba3 0901 	sub.w	r9, r3, r1
 800fb82:	4591      	cmp	r9, r2
 800fb84:	bfa8      	it	ge
 800fb86:	4691      	movge	r9, r2
 800fb88:	f1b9 0f00 	cmp.w	r9, #0
 800fb8c:	dc35      	bgt.n	800fbfa <_printf_float+0x3ae>
 800fb8e:	f04f 0800 	mov.w	r8, #0
 800fb92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb96:	f104 0a1a 	add.w	sl, r4, #26
 800fb9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb9e:	1a9b      	subs	r3, r3, r2
 800fba0:	eba3 0309 	sub.w	r3, r3, r9
 800fba4:	4543      	cmp	r3, r8
 800fba6:	f77f af79 	ble.w	800fa9c <_printf_float+0x250>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	4652      	mov	r2, sl
 800fbae:	4631      	mov	r1, r6
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	47b8      	blx	r7
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	f43f aeaa 	beq.w	800f90e <_printf_float+0xc2>
 800fbba:	f108 0801 	add.w	r8, r8, #1
 800fbbe:	e7ec      	b.n	800fb9a <_printf_float+0x34e>
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	4631      	mov	r1, r6
 800fbc4:	4642      	mov	r2, r8
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	47b8      	blx	r7
 800fbca:	3001      	adds	r0, #1
 800fbcc:	d1c0      	bne.n	800fb50 <_printf_float+0x304>
 800fbce:	e69e      	b.n	800f90e <_printf_float+0xc2>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	4631      	mov	r1, r6
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	9205      	str	r2, [sp, #20]
 800fbd8:	47b8      	blx	r7
 800fbda:	3001      	adds	r0, #1
 800fbdc:	f43f ae97 	beq.w	800f90e <_printf_float+0xc2>
 800fbe0:	9a05      	ldr	r2, [sp, #20]
 800fbe2:	f10b 0b01 	add.w	fp, fp, #1
 800fbe6:	e7b9      	b.n	800fb5c <_printf_float+0x310>
 800fbe8:	ee18 3a10 	vmov	r3, s16
 800fbec:	4652      	mov	r2, sl
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	47b8      	blx	r7
 800fbf4:	3001      	adds	r0, #1
 800fbf6:	d1be      	bne.n	800fb76 <_printf_float+0x32a>
 800fbf8:	e689      	b.n	800f90e <_printf_float+0xc2>
 800fbfa:	9a05      	ldr	r2, [sp, #20]
 800fbfc:	464b      	mov	r3, r9
 800fbfe:	4442      	add	r2, r8
 800fc00:	4631      	mov	r1, r6
 800fc02:	4628      	mov	r0, r5
 800fc04:	47b8      	blx	r7
 800fc06:	3001      	adds	r0, #1
 800fc08:	d1c1      	bne.n	800fb8e <_printf_float+0x342>
 800fc0a:	e680      	b.n	800f90e <_printf_float+0xc2>
 800fc0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc0e:	2a01      	cmp	r2, #1
 800fc10:	dc01      	bgt.n	800fc16 <_printf_float+0x3ca>
 800fc12:	07db      	lsls	r3, r3, #31
 800fc14:	d538      	bpl.n	800fc88 <_printf_float+0x43c>
 800fc16:	2301      	movs	r3, #1
 800fc18:	4642      	mov	r2, r8
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b8      	blx	r7
 800fc20:	3001      	adds	r0, #1
 800fc22:	f43f ae74 	beq.w	800f90e <_printf_float+0xc2>
 800fc26:	ee18 3a10 	vmov	r3, s16
 800fc2a:	4652      	mov	r2, sl
 800fc2c:	4631      	mov	r1, r6
 800fc2e:	4628      	mov	r0, r5
 800fc30:	47b8      	blx	r7
 800fc32:	3001      	adds	r0, #1
 800fc34:	f43f ae6b 	beq.w	800f90e <_printf_float+0xc2>
 800fc38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2300      	movs	r3, #0
 800fc40:	f7f0 ff5a 	bl	8000af8 <__aeabi_dcmpeq>
 800fc44:	b9d8      	cbnz	r0, 800fc7e <_printf_float+0x432>
 800fc46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc48:	f108 0201 	add.w	r2, r8, #1
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	4631      	mov	r1, r6
 800fc50:	4628      	mov	r0, r5
 800fc52:	47b8      	blx	r7
 800fc54:	3001      	adds	r0, #1
 800fc56:	d10e      	bne.n	800fc76 <_printf_float+0x42a>
 800fc58:	e659      	b.n	800f90e <_printf_float+0xc2>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	4652      	mov	r2, sl
 800fc5e:	4631      	mov	r1, r6
 800fc60:	4628      	mov	r0, r5
 800fc62:	47b8      	blx	r7
 800fc64:	3001      	adds	r0, #1
 800fc66:	f43f ae52 	beq.w	800f90e <_printf_float+0xc2>
 800fc6a:	f108 0801 	add.w	r8, r8, #1
 800fc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc70:	3b01      	subs	r3, #1
 800fc72:	4543      	cmp	r3, r8
 800fc74:	dcf1      	bgt.n	800fc5a <_printf_float+0x40e>
 800fc76:	464b      	mov	r3, r9
 800fc78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fc7c:	e6dc      	b.n	800fa38 <_printf_float+0x1ec>
 800fc7e:	f04f 0800 	mov.w	r8, #0
 800fc82:	f104 0a1a 	add.w	sl, r4, #26
 800fc86:	e7f2      	b.n	800fc6e <_printf_float+0x422>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	4642      	mov	r2, r8
 800fc8c:	e7df      	b.n	800fc4e <_printf_float+0x402>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	464a      	mov	r2, r9
 800fc92:	4631      	mov	r1, r6
 800fc94:	4628      	mov	r0, r5
 800fc96:	47b8      	blx	r7
 800fc98:	3001      	adds	r0, #1
 800fc9a:	f43f ae38 	beq.w	800f90e <_printf_float+0xc2>
 800fc9e:	f108 0801 	add.w	r8, r8, #1
 800fca2:	68e3      	ldr	r3, [r4, #12]
 800fca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fca6:	1a5b      	subs	r3, r3, r1
 800fca8:	4543      	cmp	r3, r8
 800fcaa:	dcf0      	bgt.n	800fc8e <_printf_float+0x442>
 800fcac:	e6fa      	b.n	800faa4 <_printf_float+0x258>
 800fcae:	f04f 0800 	mov.w	r8, #0
 800fcb2:	f104 0919 	add.w	r9, r4, #25
 800fcb6:	e7f4      	b.n	800fca2 <_printf_float+0x456>

0800fcb8 <_printf_common>:
 800fcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcbc:	4616      	mov	r6, r2
 800fcbe:	4699      	mov	r9, r3
 800fcc0:	688a      	ldr	r2, [r1, #8]
 800fcc2:	690b      	ldr	r3, [r1, #16]
 800fcc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	bfb8      	it	lt
 800fccc:	4613      	movlt	r3, r2
 800fcce:	6033      	str	r3, [r6, #0]
 800fcd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fcd4:	4607      	mov	r7, r0
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	b10a      	cbz	r2, 800fcde <_printf_common+0x26>
 800fcda:	3301      	adds	r3, #1
 800fcdc:	6033      	str	r3, [r6, #0]
 800fcde:	6823      	ldr	r3, [r4, #0]
 800fce0:	0699      	lsls	r1, r3, #26
 800fce2:	bf42      	ittt	mi
 800fce4:	6833      	ldrmi	r3, [r6, #0]
 800fce6:	3302      	addmi	r3, #2
 800fce8:	6033      	strmi	r3, [r6, #0]
 800fcea:	6825      	ldr	r5, [r4, #0]
 800fcec:	f015 0506 	ands.w	r5, r5, #6
 800fcf0:	d106      	bne.n	800fd00 <_printf_common+0x48>
 800fcf2:	f104 0a19 	add.w	sl, r4, #25
 800fcf6:	68e3      	ldr	r3, [r4, #12]
 800fcf8:	6832      	ldr	r2, [r6, #0]
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	42ab      	cmp	r3, r5
 800fcfe:	dc26      	bgt.n	800fd4e <_printf_common+0x96>
 800fd00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd04:	1e13      	subs	r3, r2, #0
 800fd06:	6822      	ldr	r2, [r4, #0]
 800fd08:	bf18      	it	ne
 800fd0a:	2301      	movne	r3, #1
 800fd0c:	0692      	lsls	r2, r2, #26
 800fd0e:	d42b      	bmi.n	800fd68 <_printf_common+0xb0>
 800fd10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd14:	4649      	mov	r1, r9
 800fd16:	4638      	mov	r0, r7
 800fd18:	47c0      	blx	r8
 800fd1a:	3001      	adds	r0, #1
 800fd1c:	d01e      	beq.n	800fd5c <_printf_common+0xa4>
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	68e5      	ldr	r5, [r4, #12]
 800fd22:	6832      	ldr	r2, [r6, #0]
 800fd24:	f003 0306 	and.w	r3, r3, #6
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	bf08      	it	eq
 800fd2c:	1aad      	subeq	r5, r5, r2
 800fd2e:	68a3      	ldr	r3, [r4, #8]
 800fd30:	6922      	ldr	r2, [r4, #16]
 800fd32:	bf0c      	ite	eq
 800fd34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd38:	2500      	movne	r5, #0
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	bfc4      	itt	gt
 800fd3e:	1a9b      	subgt	r3, r3, r2
 800fd40:	18ed      	addgt	r5, r5, r3
 800fd42:	2600      	movs	r6, #0
 800fd44:	341a      	adds	r4, #26
 800fd46:	42b5      	cmp	r5, r6
 800fd48:	d11a      	bne.n	800fd80 <_printf_common+0xc8>
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	e008      	b.n	800fd60 <_printf_common+0xa8>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	4652      	mov	r2, sl
 800fd52:	4649      	mov	r1, r9
 800fd54:	4638      	mov	r0, r7
 800fd56:	47c0      	blx	r8
 800fd58:	3001      	adds	r0, #1
 800fd5a:	d103      	bne.n	800fd64 <_printf_common+0xac>
 800fd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd64:	3501      	adds	r5, #1
 800fd66:	e7c6      	b.n	800fcf6 <_printf_common+0x3e>
 800fd68:	18e1      	adds	r1, r4, r3
 800fd6a:	1c5a      	adds	r2, r3, #1
 800fd6c:	2030      	movs	r0, #48	; 0x30
 800fd6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd72:	4422      	add	r2, r4
 800fd74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd7c:	3302      	adds	r3, #2
 800fd7e:	e7c7      	b.n	800fd10 <_printf_common+0x58>
 800fd80:	2301      	movs	r3, #1
 800fd82:	4622      	mov	r2, r4
 800fd84:	4649      	mov	r1, r9
 800fd86:	4638      	mov	r0, r7
 800fd88:	47c0      	blx	r8
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	d0e6      	beq.n	800fd5c <_printf_common+0xa4>
 800fd8e:	3601      	adds	r6, #1
 800fd90:	e7d9      	b.n	800fd46 <_printf_common+0x8e>
	...

0800fd94 <_printf_i>:
 800fd94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd98:	7e0f      	ldrb	r7, [r1, #24]
 800fd9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd9c:	2f78      	cmp	r7, #120	; 0x78
 800fd9e:	4691      	mov	r9, r2
 800fda0:	4680      	mov	r8, r0
 800fda2:	460c      	mov	r4, r1
 800fda4:	469a      	mov	sl, r3
 800fda6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fdaa:	d807      	bhi.n	800fdbc <_printf_i+0x28>
 800fdac:	2f62      	cmp	r7, #98	; 0x62
 800fdae:	d80a      	bhi.n	800fdc6 <_printf_i+0x32>
 800fdb0:	2f00      	cmp	r7, #0
 800fdb2:	f000 80d8 	beq.w	800ff66 <_printf_i+0x1d2>
 800fdb6:	2f58      	cmp	r7, #88	; 0x58
 800fdb8:	f000 80a3 	beq.w	800ff02 <_printf_i+0x16e>
 800fdbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdc4:	e03a      	b.n	800fe3c <_printf_i+0xa8>
 800fdc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdca:	2b15      	cmp	r3, #21
 800fdcc:	d8f6      	bhi.n	800fdbc <_printf_i+0x28>
 800fdce:	a101      	add	r1, pc, #4	; (adr r1, 800fdd4 <_printf_i+0x40>)
 800fdd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fdd4:	0800fe2d 	.word	0x0800fe2d
 800fdd8:	0800fe41 	.word	0x0800fe41
 800fddc:	0800fdbd 	.word	0x0800fdbd
 800fde0:	0800fdbd 	.word	0x0800fdbd
 800fde4:	0800fdbd 	.word	0x0800fdbd
 800fde8:	0800fdbd 	.word	0x0800fdbd
 800fdec:	0800fe41 	.word	0x0800fe41
 800fdf0:	0800fdbd 	.word	0x0800fdbd
 800fdf4:	0800fdbd 	.word	0x0800fdbd
 800fdf8:	0800fdbd 	.word	0x0800fdbd
 800fdfc:	0800fdbd 	.word	0x0800fdbd
 800fe00:	0800ff4d 	.word	0x0800ff4d
 800fe04:	0800fe71 	.word	0x0800fe71
 800fe08:	0800ff2f 	.word	0x0800ff2f
 800fe0c:	0800fdbd 	.word	0x0800fdbd
 800fe10:	0800fdbd 	.word	0x0800fdbd
 800fe14:	0800ff6f 	.word	0x0800ff6f
 800fe18:	0800fdbd 	.word	0x0800fdbd
 800fe1c:	0800fe71 	.word	0x0800fe71
 800fe20:	0800fdbd 	.word	0x0800fdbd
 800fe24:	0800fdbd 	.word	0x0800fdbd
 800fe28:	0800ff37 	.word	0x0800ff37
 800fe2c:	682b      	ldr	r3, [r5, #0]
 800fe2e:	1d1a      	adds	r2, r3, #4
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	602a      	str	r2, [r5, #0]
 800fe34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e0a3      	b.n	800ff88 <_printf_i+0x1f4>
 800fe40:	6820      	ldr	r0, [r4, #0]
 800fe42:	6829      	ldr	r1, [r5, #0]
 800fe44:	0606      	lsls	r6, r0, #24
 800fe46:	f101 0304 	add.w	r3, r1, #4
 800fe4a:	d50a      	bpl.n	800fe62 <_printf_i+0xce>
 800fe4c:	680e      	ldr	r6, [r1, #0]
 800fe4e:	602b      	str	r3, [r5, #0]
 800fe50:	2e00      	cmp	r6, #0
 800fe52:	da03      	bge.n	800fe5c <_printf_i+0xc8>
 800fe54:	232d      	movs	r3, #45	; 0x2d
 800fe56:	4276      	negs	r6, r6
 800fe58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe5c:	485e      	ldr	r0, [pc, #376]	; (800ffd8 <_printf_i+0x244>)
 800fe5e:	230a      	movs	r3, #10
 800fe60:	e019      	b.n	800fe96 <_printf_i+0x102>
 800fe62:	680e      	ldr	r6, [r1, #0]
 800fe64:	602b      	str	r3, [r5, #0]
 800fe66:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe6a:	bf18      	it	ne
 800fe6c:	b236      	sxthne	r6, r6
 800fe6e:	e7ef      	b.n	800fe50 <_printf_i+0xbc>
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	6820      	ldr	r0, [r4, #0]
 800fe74:	1d19      	adds	r1, r3, #4
 800fe76:	6029      	str	r1, [r5, #0]
 800fe78:	0601      	lsls	r1, r0, #24
 800fe7a:	d501      	bpl.n	800fe80 <_printf_i+0xec>
 800fe7c:	681e      	ldr	r6, [r3, #0]
 800fe7e:	e002      	b.n	800fe86 <_printf_i+0xf2>
 800fe80:	0646      	lsls	r6, r0, #25
 800fe82:	d5fb      	bpl.n	800fe7c <_printf_i+0xe8>
 800fe84:	881e      	ldrh	r6, [r3, #0]
 800fe86:	4854      	ldr	r0, [pc, #336]	; (800ffd8 <_printf_i+0x244>)
 800fe88:	2f6f      	cmp	r7, #111	; 0x6f
 800fe8a:	bf0c      	ite	eq
 800fe8c:	2308      	moveq	r3, #8
 800fe8e:	230a      	movne	r3, #10
 800fe90:	2100      	movs	r1, #0
 800fe92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe96:	6865      	ldr	r5, [r4, #4]
 800fe98:	60a5      	str	r5, [r4, #8]
 800fe9a:	2d00      	cmp	r5, #0
 800fe9c:	bfa2      	ittt	ge
 800fe9e:	6821      	ldrge	r1, [r4, #0]
 800fea0:	f021 0104 	bicge.w	r1, r1, #4
 800fea4:	6021      	strge	r1, [r4, #0]
 800fea6:	b90e      	cbnz	r6, 800feac <_printf_i+0x118>
 800fea8:	2d00      	cmp	r5, #0
 800feaa:	d04d      	beq.n	800ff48 <_printf_i+0x1b4>
 800feac:	4615      	mov	r5, r2
 800feae:	fbb6 f1f3 	udiv	r1, r6, r3
 800feb2:	fb03 6711 	mls	r7, r3, r1, r6
 800feb6:	5dc7      	ldrb	r7, [r0, r7]
 800feb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800febc:	4637      	mov	r7, r6
 800febe:	42bb      	cmp	r3, r7
 800fec0:	460e      	mov	r6, r1
 800fec2:	d9f4      	bls.n	800feae <_printf_i+0x11a>
 800fec4:	2b08      	cmp	r3, #8
 800fec6:	d10b      	bne.n	800fee0 <_printf_i+0x14c>
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	07de      	lsls	r6, r3, #31
 800fecc:	d508      	bpl.n	800fee0 <_printf_i+0x14c>
 800fece:	6923      	ldr	r3, [r4, #16]
 800fed0:	6861      	ldr	r1, [r4, #4]
 800fed2:	4299      	cmp	r1, r3
 800fed4:	bfde      	ittt	le
 800fed6:	2330      	movle	r3, #48	; 0x30
 800fed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fedc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fee0:	1b52      	subs	r2, r2, r5
 800fee2:	6122      	str	r2, [r4, #16]
 800fee4:	f8cd a000 	str.w	sl, [sp]
 800fee8:	464b      	mov	r3, r9
 800feea:	aa03      	add	r2, sp, #12
 800feec:	4621      	mov	r1, r4
 800feee:	4640      	mov	r0, r8
 800fef0:	f7ff fee2 	bl	800fcb8 <_printf_common>
 800fef4:	3001      	adds	r0, #1
 800fef6:	d14c      	bne.n	800ff92 <_printf_i+0x1fe>
 800fef8:	f04f 30ff 	mov.w	r0, #4294967295
 800fefc:	b004      	add	sp, #16
 800fefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff02:	4835      	ldr	r0, [pc, #212]	; (800ffd8 <_printf_i+0x244>)
 800ff04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ff08:	6829      	ldr	r1, [r5, #0]
 800ff0a:	6823      	ldr	r3, [r4, #0]
 800ff0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff10:	6029      	str	r1, [r5, #0]
 800ff12:	061d      	lsls	r5, r3, #24
 800ff14:	d514      	bpl.n	800ff40 <_printf_i+0x1ac>
 800ff16:	07df      	lsls	r7, r3, #31
 800ff18:	bf44      	itt	mi
 800ff1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ff1e:	6023      	strmi	r3, [r4, #0]
 800ff20:	b91e      	cbnz	r6, 800ff2a <_printf_i+0x196>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	f023 0320 	bic.w	r3, r3, #32
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	2310      	movs	r3, #16
 800ff2c:	e7b0      	b.n	800fe90 <_printf_i+0xfc>
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	f043 0320 	orr.w	r3, r3, #32
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	2378      	movs	r3, #120	; 0x78
 800ff38:	4828      	ldr	r0, [pc, #160]	; (800ffdc <_printf_i+0x248>)
 800ff3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff3e:	e7e3      	b.n	800ff08 <_printf_i+0x174>
 800ff40:	0659      	lsls	r1, r3, #25
 800ff42:	bf48      	it	mi
 800ff44:	b2b6      	uxthmi	r6, r6
 800ff46:	e7e6      	b.n	800ff16 <_printf_i+0x182>
 800ff48:	4615      	mov	r5, r2
 800ff4a:	e7bb      	b.n	800fec4 <_printf_i+0x130>
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	6826      	ldr	r6, [r4, #0]
 800ff50:	6961      	ldr	r1, [r4, #20]
 800ff52:	1d18      	adds	r0, r3, #4
 800ff54:	6028      	str	r0, [r5, #0]
 800ff56:	0635      	lsls	r5, r6, #24
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	d501      	bpl.n	800ff60 <_printf_i+0x1cc>
 800ff5c:	6019      	str	r1, [r3, #0]
 800ff5e:	e002      	b.n	800ff66 <_printf_i+0x1d2>
 800ff60:	0670      	lsls	r0, r6, #25
 800ff62:	d5fb      	bpl.n	800ff5c <_printf_i+0x1c8>
 800ff64:	8019      	strh	r1, [r3, #0]
 800ff66:	2300      	movs	r3, #0
 800ff68:	6123      	str	r3, [r4, #16]
 800ff6a:	4615      	mov	r5, r2
 800ff6c:	e7ba      	b.n	800fee4 <_printf_i+0x150>
 800ff6e:	682b      	ldr	r3, [r5, #0]
 800ff70:	1d1a      	adds	r2, r3, #4
 800ff72:	602a      	str	r2, [r5, #0]
 800ff74:	681d      	ldr	r5, [r3, #0]
 800ff76:	6862      	ldr	r2, [r4, #4]
 800ff78:	2100      	movs	r1, #0
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f7f0 f948 	bl	8000210 <memchr>
 800ff80:	b108      	cbz	r0, 800ff86 <_printf_i+0x1f2>
 800ff82:	1b40      	subs	r0, r0, r5
 800ff84:	6060      	str	r0, [r4, #4]
 800ff86:	6863      	ldr	r3, [r4, #4]
 800ff88:	6123      	str	r3, [r4, #16]
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff90:	e7a8      	b.n	800fee4 <_printf_i+0x150>
 800ff92:	6923      	ldr	r3, [r4, #16]
 800ff94:	462a      	mov	r2, r5
 800ff96:	4649      	mov	r1, r9
 800ff98:	4640      	mov	r0, r8
 800ff9a:	47d0      	blx	sl
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	d0ab      	beq.n	800fef8 <_printf_i+0x164>
 800ffa0:	6823      	ldr	r3, [r4, #0]
 800ffa2:	079b      	lsls	r3, r3, #30
 800ffa4:	d413      	bmi.n	800ffce <_printf_i+0x23a>
 800ffa6:	68e0      	ldr	r0, [r4, #12]
 800ffa8:	9b03      	ldr	r3, [sp, #12]
 800ffaa:	4298      	cmp	r0, r3
 800ffac:	bfb8      	it	lt
 800ffae:	4618      	movlt	r0, r3
 800ffb0:	e7a4      	b.n	800fefc <_printf_i+0x168>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	4632      	mov	r2, r6
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	4640      	mov	r0, r8
 800ffba:	47d0      	blx	sl
 800ffbc:	3001      	adds	r0, #1
 800ffbe:	d09b      	beq.n	800fef8 <_printf_i+0x164>
 800ffc0:	3501      	adds	r5, #1
 800ffc2:	68e3      	ldr	r3, [r4, #12]
 800ffc4:	9903      	ldr	r1, [sp, #12]
 800ffc6:	1a5b      	subs	r3, r3, r1
 800ffc8:	42ab      	cmp	r3, r5
 800ffca:	dcf2      	bgt.n	800ffb2 <_printf_i+0x21e>
 800ffcc:	e7eb      	b.n	800ffa6 <_printf_i+0x212>
 800ffce:	2500      	movs	r5, #0
 800ffd0:	f104 0619 	add.w	r6, r4, #25
 800ffd4:	e7f5      	b.n	800ffc2 <_printf_i+0x22e>
 800ffd6:	bf00      	nop
 800ffd8:	0801409a 	.word	0x0801409a
 800ffdc:	080140ab 	.word	0x080140ab

0800ffe0 <siprintf>:
 800ffe0:	b40e      	push	{r1, r2, r3}
 800ffe2:	b500      	push	{lr}
 800ffe4:	b09c      	sub	sp, #112	; 0x70
 800ffe6:	ab1d      	add	r3, sp, #116	; 0x74
 800ffe8:	9002      	str	r0, [sp, #8]
 800ffea:	9006      	str	r0, [sp, #24]
 800ffec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fff0:	4809      	ldr	r0, [pc, #36]	; (8010018 <siprintf+0x38>)
 800fff2:	9107      	str	r1, [sp, #28]
 800fff4:	9104      	str	r1, [sp, #16]
 800fff6:	4909      	ldr	r1, [pc, #36]	; (801001c <siprintf+0x3c>)
 800fff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fffc:	9105      	str	r1, [sp, #20]
 800fffe:	6800      	ldr	r0, [r0, #0]
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	a902      	add	r1, sp, #8
 8010004:	f001 fb8c 	bl	8011720 <_svfiprintf_r>
 8010008:	9b02      	ldr	r3, [sp, #8]
 801000a:	2200      	movs	r2, #0
 801000c:	701a      	strb	r2, [r3, #0]
 801000e:	b01c      	add	sp, #112	; 0x70
 8010010:	f85d eb04 	ldr.w	lr, [sp], #4
 8010014:	b003      	add	sp, #12
 8010016:	4770      	bx	lr
 8010018:	20000020 	.word	0x20000020
 801001c:	ffff0208 	.word	0xffff0208

08010020 <strcpy>:
 8010020:	4603      	mov	r3, r0
 8010022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010026:	f803 2b01 	strb.w	r2, [r3], #1
 801002a:	2a00      	cmp	r2, #0
 801002c:	d1f9      	bne.n	8010022 <strcpy+0x2>
 801002e:	4770      	bx	lr

08010030 <strpbrk>:
 8010030:	b570      	push	{r4, r5, r6, lr}
 8010032:	7803      	ldrb	r3, [r0, #0]
 8010034:	b1a3      	cbz	r3, 8010060 <strpbrk+0x30>
 8010036:	4603      	mov	r3, r0
 8010038:	460c      	mov	r4, r1
 801003a:	4618      	mov	r0, r3
 801003c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8010040:	b14d      	cbz	r5, 8010056 <strpbrk+0x26>
 8010042:	460a      	mov	r2, r1
 8010044:	e001      	b.n	801004a <strpbrk+0x1a>
 8010046:	42ae      	cmp	r6, r5
 8010048:	d009      	beq.n	801005e <strpbrk+0x2e>
 801004a:	4614      	mov	r4, r2
 801004c:	f812 6b01 	ldrb.w	r6, [r2], #1
 8010050:	2e00      	cmp	r6, #0
 8010052:	d1f8      	bne.n	8010046 <strpbrk+0x16>
 8010054:	e7f1      	b.n	801003a <strpbrk+0xa>
 8010056:	7823      	ldrb	r3, [r4, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	bf08      	it	eq
 801005c:	2000      	moveq	r0, #0
 801005e:	bd70      	pop	{r4, r5, r6, pc}
 8010060:	4618      	mov	r0, r3
 8010062:	e7fc      	b.n	801005e <strpbrk+0x2e>

08010064 <quorem>:
 8010064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010068:	6903      	ldr	r3, [r0, #16]
 801006a:	690c      	ldr	r4, [r1, #16]
 801006c:	42a3      	cmp	r3, r4
 801006e:	4607      	mov	r7, r0
 8010070:	f2c0 8081 	blt.w	8010176 <quorem+0x112>
 8010074:	3c01      	subs	r4, #1
 8010076:	f101 0814 	add.w	r8, r1, #20
 801007a:	f100 0514 	add.w	r5, r0, #20
 801007e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010082:	9301      	str	r3, [sp, #4]
 8010084:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801008c:	3301      	adds	r3, #1
 801008e:	429a      	cmp	r2, r3
 8010090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010094:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010098:	fbb2 f6f3 	udiv	r6, r2, r3
 801009c:	d331      	bcc.n	8010102 <quorem+0x9e>
 801009e:	f04f 0e00 	mov.w	lr, #0
 80100a2:	4640      	mov	r0, r8
 80100a4:	46ac      	mov	ip, r5
 80100a6:	46f2      	mov	sl, lr
 80100a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80100ac:	b293      	uxth	r3, r2
 80100ae:	fb06 e303 	mla	r3, r6, r3, lr
 80100b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	ebaa 0303 	sub.w	r3, sl, r3
 80100bc:	f8dc a000 	ldr.w	sl, [ip]
 80100c0:	0c12      	lsrs	r2, r2, #16
 80100c2:	fa13 f38a 	uxtah	r3, r3, sl
 80100c6:	fb06 e202 	mla	r2, r6, r2, lr
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	9b00      	ldr	r3, [sp, #0]
 80100ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80100d2:	b292      	uxth	r2, r2
 80100d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80100d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80100e0:	4581      	cmp	r9, r0
 80100e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100e6:	f84c 3b04 	str.w	r3, [ip], #4
 80100ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80100ee:	d2db      	bcs.n	80100a8 <quorem+0x44>
 80100f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80100f4:	b92b      	cbnz	r3, 8010102 <quorem+0x9e>
 80100f6:	9b01      	ldr	r3, [sp, #4]
 80100f8:	3b04      	subs	r3, #4
 80100fa:	429d      	cmp	r5, r3
 80100fc:	461a      	mov	r2, r3
 80100fe:	d32e      	bcc.n	801015e <quorem+0xfa>
 8010100:	613c      	str	r4, [r7, #16]
 8010102:	4638      	mov	r0, r7
 8010104:	f001 f8b8 	bl	8011278 <__mcmp>
 8010108:	2800      	cmp	r0, #0
 801010a:	db24      	blt.n	8010156 <quorem+0xf2>
 801010c:	3601      	adds	r6, #1
 801010e:	4628      	mov	r0, r5
 8010110:	f04f 0c00 	mov.w	ip, #0
 8010114:	f858 2b04 	ldr.w	r2, [r8], #4
 8010118:	f8d0 e000 	ldr.w	lr, [r0]
 801011c:	b293      	uxth	r3, r2
 801011e:	ebac 0303 	sub.w	r3, ip, r3
 8010122:	0c12      	lsrs	r2, r2, #16
 8010124:	fa13 f38e 	uxtah	r3, r3, lr
 8010128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801012c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010130:	b29b      	uxth	r3, r3
 8010132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010136:	45c1      	cmp	r9, r8
 8010138:	f840 3b04 	str.w	r3, [r0], #4
 801013c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010140:	d2e8      	bcs.n	8010114 <quorem+0xb0>
 8010142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801014a:	b922      	cbnz	r2, 8010156 <quorem+0xf2>
 801014c:	3b04      	subs	r3, #4
 801014e:	429d      	cmp	r5, r3
 8010150:	461a      	mov	r2, r3
 8010152:	d30a      	bcc.n	801016a <quorem+0x106>
 8010154:	613c      	str	r4, [r7, #16]
 8010156:	4630      	mov	r0, r6
 8010158:	b003      	add	sp, #12
 801015a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015e:	6812      	ldr	r2, [r2, #0]
 8010160:	3b04      	subs	r3, #4
 8010162:	2a00      	cmp	r2, #0
 8010164:	d1cc      	bne.n	8010100 <quorem+0x9c>
 8010166:	3c01      	subs	r4, #1
 8010168:	e7c7      	b.n	80100fa <quorem+0x96>
 801016a:	6812      	ldr	r2, [r2, #0]
 801016c:	3b04      	subs	r3, #4
 801016e:	2a00      	cmp	r2, #0
 8010170:	d1f0      	bne.n	8010154 <quorem+0xf0>
 8010172:	3c01      	subs	r4, #1
 8010174:	e7eb      	b.n	801014e <quorem+0xea>
 8010176:	2000      	movs	r0, #0
 8010178:	e7ee      	b.n	8010158 <quorem+0xf4>
 801017a:	0000      	movs	r0, r0
 801017c:	0000      	movs	r0, r0
	...

08010180 <_dtoa_r>:
 8010180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010184:	ed2d 8b04 	vpush	{d8-d9}
 8010188:	ec57 6b10 	vmov	r6, r7, d0
 801018c:	b093      	sub	sp, #76	; 0x4c
 801018e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010190:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010194:	9106      	str	r1, [sp, #24]
 8010196:	ee10 aa10 	vmov	sl, s0
 801019a:	4604      	mov	r4, r0
 801019c:	9209      	str	r2, [sp, #36]	; 0x24
 801019e:	930c      	str	r3, [sp, #48]	; 0x30
 80101a0:	46bb      	mov	fp, r7
 80101a2:	b975      	cbnz	r5, 80101c2 <_dtoa_r+0x42>
 80101a4:	2010      	movs	r0, #16
 80101a6:	f000 fddd 	bl	8010d64 <malloc>
 80101aa:	4602      	mov	r2, r0
 80101ac:	6260      	str	r0, [r4, #36]	; 0x24
 80101ae:	b920      	cbnz	r0, 80101ba <_dtoa_r+0x3a>
 80101b0:	4ba7      	ldr	r3, [pc, #668]	; (8010450 <_dtoa_r+0x2d0>)
 80101b2:	21ea      	movs	r1, #234	; 0xea
 80101b4:	48a7      	ldr	r0, [pc, #668]	; (8010454 <_dtoa_r+0x2d4>)
 80101b6:	f001 fbc3 	bl	8011940 <__assert_func>
 80101ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101be:	6005      	str	r5, [r0, #0]
 80101c0:	60c5      	str	r5, [r0, #12]
 80101c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101c4:	6819      	ldr	r1, [r3, #0]
 80101c6:	b151      	cbz	r1, 80101de <_dtoa_r+0x5e>
 80101c8:	685a      	ldr	r2, [r3, #4]
 80101ca:	604a      	str	r2, [r1, #4]
 80101cc:	2301      	movs	r3, #1
 80101ce:	4093      	lsls	r3, r2
 80101d0:	608b      	str	r3, [r1, #8]
 80101d2:	4620      	mov	r0, r4
 80101d4:	f000 fe0e 	bl	8010df4 <_Bfree>
 80101d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101da:	2200      	movs	r2, #0
 80101dc:	601a      	str	r2, [r3, #0]
 80101de:	1e3b      	subs	r3, r7, #0
 80101e0:	bfaa      	itet	ge
 80101e2:	2300      	movge	r3, #0
 80101e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80101e8:	f8c8 3000 	strge.w	r3, [r8]
 80101ec:	4b9a      	ldr	r3, [pc, #616]	; (8010458 <_dtoa_r+0x2d8>)
 80101ee:	bfbc      	itt	lt
 80101f0:	2201      	movlt	r2, #1
 80101f2:	f8c8 2000 	strlt.w	r2, [r8]
 80101f6:	ea33 030b 	bics.w	r3, r3, fp
 80101fa:	d11b      	bne.n	8010234 <_dtoa_r+0xb4>
 80101fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8010202:	6013      	str	r3, [r2, #0]
 8010204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010208:	4333      	orrs	r3, r6
 801020a:	f000 8592 	beq.w	8010d32 <_dtoa_r+0xbb2>
 801020e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010210:	b963      	cbnz	r3, 801022c <_dtoa_r+0xac>
 8010212:	4b92      	ldr	r3, [pc, #584]	; (801045c <_dtoa_r+0x2dc>)
 8010214:	e022      	b.n	801025c <_dtoa_r+0xdc>
 8010216:	4b92      	ldr	r3, [pc, #584]	; (8010460 <_dtoa_r+0x2e0>)
 8010218:	9301      	str	r3, [sp, #4]
 801021a:	3308      	adds	r3, #8
 801021c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	9801      	ldr	r0, [sp, #4]
 8010222:	b013      	add	sp, #76	; 0x4c
 8010224:	ecbd 8b04 	vpop	{d8-d9}
 8010228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022c:	4b8b      	ldr	r3, [pc, #556]	; (801045c <_dtoa_r+0x2dc>)
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	3303      	adds	r3, #3
 8010232:	e7f3      	b.n	801021c <_dtoa_r+0x9c>
 8010234:	2200      	movs	r2, #0
 8010236:	2300      	movs	r3, #0
 8010238:	4650      	mov	r0, sl
 801023a:	4659      	mov	r1, fp
 801023c:	f7f0 fc5c 	bl	8000af8 <__aeabi_dcmpeq>
 8010240:	ec4b ab19 	vmov	d9, sl, fp
 8010244:	4680      	mov	r8, r0
 8010246:	b158      	cbz	r0, 8010260 <_dtoa_r+0xe0>
 8010248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801024a:	2301      	movs	r3, #1
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 856b 	beq.w	8010d2c <_dtoa_r+0xbac>
 8010256:	4883      	ldr	r0, [pc, #524]	; (8010464 <_dtoa_r+0x2e4>)
 8010258:	6018      	str	r0, [r3, #0]
 801025a:	1e43      	subs	r3, r0, #1
 801025c:	9301      	str	r3, [sp, #4]
 801025e:	e7df      	b.n	8010220 <_dtoa_r+0xa0>
 8010260:	ec4b ab10 	vmov	d0, sl, fp
 8010264:	aa10      	add	r2, sp, #64	; 0x40
 8010266:	a911      	add	r1, sp, #68	; 0x44
 8010268:	4620      	mov	r0, r4
 801026a:	f001 f8ab 	bl	80113c4 <__d2b>
 801026e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010272:	ee08 0a10 	vmov	s16, r0
 8010276:	2d00      	cmp	r5, #0
 8010278:	f000 8084 	beq.w	8010384 <_dtoa_r+0x204>
 801027c:	ee19 3a90 	vmov	r3, s19
 8010280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010284:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010288:	4656      	mov	r6, sl
 801028a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801028e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010292:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010296:	4b74      	ldr	r3, [pc, #464]	; (8010468 <_dtoa_r+0x2e8>)
 8010298:	2200      	movs	r2, #0
 801029a:	4630      	mov	r0, r6
 801029c:	4639      	mov	r1, r7
 801029e:	f7f0 f80b 	bl	80002b8 <__aeabi_dsub>
 80102a2:	a365      	add	r3, pc, #404	; (adr r3, 8010438 <_dtoa_r+0x2b8>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	f7f0 f9be 	bl	8000628 <__aeabi_dmul>
 80102ac:	a364      	add	r3, pc, #400	; (adr r3, 8010440 <_dtoa_r+0x2c0>)
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	f7f0 f803 	bl	80002bc <__adddf3>
 80102b6:	4606      	mov	r6, r0
 80102b8:	4628      	mov	r0, r5
 80102ba:	460f      	mov	r7, r1
 80102bc:	f7f0 f94a 	bl	8000554 <__aeabi_i2d>
 80102c0:	a361      	add	r3, pc, #388	; (adr r3, 8010448 <_dtoa_r+0x2c8>)
 80102c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c6:	f7f0 f9af 	bl	8000628 <__aeabi_dmul>
 80102ca:	4602      	mov	r2, r0
 80102cc:	460b      	mov	r3, r1
 80102ce:	4630      	mov	r0, r6
 80102d0:	4639      	mov	r1, r7
 80102d2:	f7ef fff3 	bl	80002bc <__adddf3>
 80102d6:	4606      	mov	r6, r0
 80102d8:	460f      	mov	r7, r1
 80102da:	f7f0 fc55 	bl	8000b88 <__aeabi_d2iz>
 80102de:	2200      	movs	r2, #0
 80102e0:	9000      	str	r0, [sp, #0]
 80102e2:	2300      	movs	r3, #0
 80102e4:	4630      	mov	r0, r6
 80102e6:	4639      	mov	r1, r7
 80102e8:	f7f0 fc10 	bl	8000b0c <__aeabi_dcmplt>
 80102ec:	b150      	cbz	r0, 8010304 <_dtoa_r+0x184>
 80102ee:	9800      	ldr	r0, [sp, #0]
 80102f0:	f7f0 f930 	bl	8000554 <__aeabi_i2d>
 80102f4:	4632      	mov	r2, r6
 80102f6:	463b      	mov	r3, r7
 80102f8:	f7f0 fbfe 	bl	8000af8 <__aeabi_dcmpeq>
 80102fc:	b910      	cbnz	r0, 8010304 <_dtoa_r+0x184>
 80102fe:	9b00      	ldr	r3, [sp, #0]
 8010300:	3b01      	subs	r3, #1
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	9b00      	ldr	r3, [sp, #0]
 8010306:	2b16      	cmp	r3, #22
 8010308:	d85a      	bhi.n	80103c0 <_dtoa_r+0x240>
 801030a:	9a00      	ldr	r2, [sp, #0]
 801030c:	4b57      	ldr	r3, [pc, #348]	; (801046c <_dtoa_r+0x2ec>)
 801030e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010316:	ec51 0b19 	vmov	r0, r1, d9
 801031a:	f7f0 fbf7 	bl	8000b0c <__aeabi_dcmplt>
 801031e:	2800      	cmp	r0, #0
 8010320:	d050      	beq.n	80103c4 <_dtoa_r+0x244>
 8010322:	9b00      	ldr	r3, [sp, #0]
 8010324:	3b01      	subs	r3, #1
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	2300      	movs	r3, #0
 801032a:	930b      	str	r3, [sp, #44]	; 0x2c
 801032c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801032e:	1b5d      	subs	r5, r3, r5
 8010330:	1e6b      	subs	r3, r5, #1
 8010332:	9305      	str	r3, [sp, #20]
 8010334:	bf45      	ittet	mi
 8010336:	f1c5 0301 	rsbmi	r3, r5, #1
 801033a:	9304      	strmi	r3, [sp, #16]
 801033c:	2300      	movpl	r3, #0
 801033e:	2300      	movmi	r3, #0
 8010340:	bf4c      	ite	mi
 8010342:	9305      	strmi	r3, [sp, #20]
 8010344:	9304      	strpl	r3, [sp, #16]
 8010346:	9b00      	ldr	r3, [sp, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	db3d      	blt.n	80103c8 <_dtoa_r+0x248>
 801034c:	9b05      	ldr	r3, [sp, #20]
 801034e:	9a00      	ldr	r2, [sp, #0]
 8010350:	920a      	str	r2, [sp, #40]	; 0x28
 8010352:	4413      	add	r3, r2
 8010354:	9305      	str	r3, [sp, #20]
 8010356:	2300      	movs	r3, #0
 8010358:	9307      	str	r3, [sp, #28]
 801035a:	9b06      	ldr	r3, [sp, #24]
 801035c:	2b09      	cmp	r3, #9
 801035e:	f200 8089 	bhi.w	8010474 <_dtoa_r+0x2f4>
 8010362:	2b05      	cmp	r3, #5
 8010364:	bfc4      	itt	gt
 8010366:	3b04      	subgt	r3, #4
 8010368:	9306      	strgt	r3, [sp, #24]
 801036a:	9b06      	ldr	r3, [sp, #24]
 801036c:	f1a3 0302 	sub.w	r3, r3, #2
 8010370:	bfcc      	ite	gt
 8010372:	2500      	movgt	r5, #0
 8010374:	2501      	movle	r5, #1
 8010376:	2b03      	cmp	r3, #3
 8010378:	f200 8087 	bhi.w	801048a <_dtoa_r+0x30a>
 801037c:	e8df f003 	tbb	[pc, r3]
 8010380:	59383a2d 	.word	0x59383a2d
 8010384:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010388:	441d      	add	r5, r3
 801038a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801038e:	2b20      	cmp	r3, #32
 8010390:	bfc1      	itttt	gt
 8010392:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010396:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801039a:	fa0b f303 	lslgt.w	r3, fp, r3
 801039e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80103a2:	bfda      	itte	le
 80103a4:	f1c3 0320 	rsble	r3, r3, #32
 80103a8:	fa06 f003 	lslle.w	r0, r6, r3
 80103ac:	4318      	orrgt	r0, r3
 80103ae:	f7f0 f8c1 	bl	8000534 <__aeabi_ui2d>
 80103b2:	2301      	movs	r3, #1
 80103b4:	4606      	mov	r6, r0
 80103b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80103ba:	3d01      	subs	r5, #1
 80103bc:	930e      	str	r3, [sp, #56]	; 0x38
 80103be:	e76a      	b.n	8010296 <_dtoa_r+0x116>
 80103c0:	2301      	movs	r3, #1
 80103c2:	e7b2      	b.n	801032a <_dtoa_r+0x1aa>
 80103c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80103c6:	e7b1      	b.n	801032c <_dtoa_r+0x1ac>
 80103c8:	9b04      	ldr	r3, [sp, #16]
 80103ca:	9a00      	ldr	r2, [sp, #0]
 80103cc:	1a9b      	subs	r3, r3, r2
 80103ce:	9304      	str	r3, [sp, #16]
 80103d0:	4253      	negs	r3, r2
 80103d2:	9307      	str	r3, [sp, #28]
 80103d4:	2300      	movs	r3, #0
 80103d6:	930a      	str	r3, [sp, #40]	; 0x28
 80103d8:	e7bf      	b.n	801035a <_dtoa_r+0x1da>
 80103da:	2300      	movs	r3, #0
 80103dc:	9308      	str	r3, [sp, #32]
 80103de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	dc55      	bgt.n	8010490 <_dtoa_r+0x310>
 80103e4:	2301      	movs	r3, #1
 80103e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80103ea:	461a      	mov	r2, r3
 80103ec:	9209      	str	r2, [sp, #36]	; 0x24
 80103ee:	e00c      	b.n	801040a <_dtoa_r+0x28a>
 80103f0:	2301      	movs	r3, #1
 80103f2:	e7f3      	b.n	80103dc <_dtoa_r+0x25c>
 80103f4:	2300      	movs	r3, #0
 80103f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103f8:	9308      	str	r3, [sp, #32]
 80103fa:	9b00      	ldr	r3, [sp, #0]
 80103fc:	4413      	add	r3, r2
 80103fe:	9302      	str	r3, [sp, #8]
 8010400:	3301      	adds	r3, #1
 8010402:	2b01      	cmp	r3, #1
 8010404:	9303      	str	r3, [sp, #12]
 8010406:	bfb8      	it	lt
 8010408:	2301      	movlt	r3, #1
 801040a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801040c:	2200      	movs	r2, #0
 801040e:	6042      	str	r2, [r0, #4]
 8010410:	2204      	movs	r2, #4
 8010412:	f102 0614 	add.w	r6, r2, #20
 8010416:	429e      	cmp	r6, r3
 8010418:	6841      	ldr	r1, [r0, #4]
 801041a:	d93d      	bls.n	8010498 <_dtoa_r+0x318>
 801041c:	4620      	mov	r0, r4
 801041e:	f000 fca9 	bl	8010d74 <_Balloc>
 8010422:	9001      	str	r0, [sp, #4]
 8010424:	2800      	cmp	r0, #0
 8010426:	d13b      	bne.n	80104a0 <_dtoa_r+0x320>
 8010428:	4b11      	ldr	r3, [pc, #68]	; (8010470 <_dtoa_r+0x2f0>)
 801042a:	4602      	mov	r2, r0
 801042c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010430:	e6c0      	b.n	80101b4 <_dtoa_r+0x34>
 8010432:	2301      	movs	r3, #1
 8010434:	e7df      	b.n	80103f6 <_dtoa_r+0x276>
 8010436:	bf00      	nop
 8010438:	636f4361 	.word	0x636f4361
 801043c:	3fd287a7 	.word	0x3fd287a7
 8010440:	8b60c8b3 	.word	0x8b60c8b3
 8010444:	3fc68a28 	.word	0x3fc68a28
 8010448:	509f79fb 	.word	0x509f79fb
 801044c:	3fd34413 	.word	0x3fd34413
 8010450:	080140c9 	.word	0x080140c9
 8010454:	080140e0 	.word	0x080140e0
 8010458:	7ff00000 	.word	0x7ff00000
 801045c:	080140c5 	.word	0x080140c5
 8010460:	080140bc 	.word	0x080140bc
 8010464:	08014099 	.word	0x08014099
 8010468:	3ff80000 	.word	0x3ff80000
 801046c:	080141d0 	.word	0x080141d0
 8010470:	0801413b 	.word	0x0801413b
 8010474:	2501      	movs	r5, #1
 8010476:	2300      	movs	r3, #0
 8010478:	9306      	str	r3, [sp, #24]
 801047a:	9508      	str	r5, [sp, #32]
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010484:	2200      	movs	r2, #0
 8010486:	2312      	movs	r3, #18
 8010488:	e7b0      	b.n	80103ec <_dtoa_r+0x26c>
 801048a:	2301      	movs	r3, #1
 801048c:	9308      	str	r3, [sp, #32]
 801048e:	e7f5      	b.n	801047c <_dtoa_r+0x2fc>
 8010490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010492:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010496:	e7b8      	b.n	801040a <_dtoa_r+0x28a>
 8010498:	3101      	adds	r1, #1
 801049a:	6041      	str	r1, [r0, #4]
 801049c:	0052      	lsls	r2, r2, #1
 801049e:	e7b8      	b.n	8010412 <_dtoa_r+0x292>
 80104a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104a2:	9a01      	ldr	r2, [sp, #4]
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	9b03      	ldr	r3, [sp, #12]
 80104a8:	2b0e      	cmp	r3, #14
 80104aa:	f200 809d 	bhi.w	80105e8 <_dtoa_r+0x468>
 80104ae:	2d00      	cmp	r5, #0
 80104b0:	f000 809a 	beq.w	80105e8 <_dtoa_r+0x468>
 80104b4:	9b00      	ldr	r3, [sp, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	dd32      	ble.n	8010520 <_dtoa_r+0x3a0>
 80104ba:	4ab7      	ldr	r2, [pc, #732]	; (8010798 <_dtoa_r+0x618>)
 80104bc:	f003 030f 	and.w	r3, r3, #15
 80104c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80104c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80104c8:	9b00      	ldr	r3, [sp, #0]
 80104ca:	05d8      	lsls	r0, r3, #23
 80104cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80104d0:	d516      	bpl.n	8010500 <_dtoa_r+0x380>
 80104d2:	4bb2      	ldr	r3, [pc, #712]	; (801079c <_dtoa_r+0x61c>)
 80104d4:	ec51 0b19 	vmov	r0, r1, d9
 80104d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104dc:	f7f0 f9ce 	bl	800087c <__aeabi_ddiv>
 80104e0:	f007 070f 	and.w	r7, r7, #15
 80104e4:	4682      	mov	sl, r0
 80104e6:	468b      	mov	fp, r1
 80104e8:	2503      	movs	r5, #3
 80104ea:	4eac      	ldr	r6, [pc, #688]	; (801079c <_dtoa_r+0x61c>)
 80104ec:	b957      	cbnz	r7, 8010504 <_dtoa_r+0x384>
 80104ee:	4642      	mov	r2, r8
 80104f0:	464b      	mov	r3, r9
 80104f2:	4650      	mov	r0, sl
 80104f4:	4659      	mov	r1, fp
 80104f6:	f7f0 f9c1 	bl	800087c <__aeabi_ddiv>
 80104fa:	4682      	mov	sl, r0
 80104fc:	468b      	mov	fp, r1
 80104fe:	e028      	b.n	8010552 <_dtoa_r+0x3d2>
 8010500:	2502      	movs	r5, #2
 8010502:	e7f2      	b.n	80104ea <_dtoa_r+0x36a>
 8010504:	07f9      	lsls	r1, r7, #31
 8010506:	d508      	bpl.n	801051a <_dtoa_r+0x39a>
 8010508:	4640      	mov	r0, r8
 801050a:	4649      	mov	r1, r9
 801050c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010510:	f7f0 f88a 	bl	8000628 <__aeabi_dmul>
 8010514:	3501      	adds	r5, #1
 8010516:	4680      	mov	r8, r0
 8010518:	4689      	mov	r9, r1
 801051a:	107f      	asrs	r7, r7, #1
 801051c:	3608      	adds	r6, #8
 801051e:	e7e5      	b.n	80104ec <_dtoa_r+0x36c>
 8010520:	f000 809b 	beq.w	801065a <_dtoa_r+0x4da>
 8010524:	9b00      	ldr	r3, [sp, #0]
 8010526:	4f9d      	ldr	r7, [pc, #628]	; (801079c <_dtoa_r+0x61c>)
 8010528:	425e      	negs	r6, r3
 801052a:	4b9b      	ldr	r3, [pc, #620]	; (8010798 <_dtoa_r+0x618>)
 801052c:	f006 020f 	and.w	r2, r6, #15
 8010530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	ec51 0b19 	vmov	r0, r1, d9
 801053c:	f7f0 f874 	bl	8000628 <__aeabi_dmul>
 8010540:	1136      	asrs	r6, r6, #4
 8010542:	4682      	mov	sl, r0
 8010544:	468b      	mov	fp, r1
 8010546:	2300      	movs	r3, #0
 8010548:	2502      	movs	r5, #2
 801054a:	2e00      	cmp	r6, #0
 801054c:	d17a      	bne.n	8010644 <_dtoa_r+0x4c4>
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1d3      	bne.n	80104fa <_dtoa_r+0x37a>
 8010552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010554:	2b00      	cmp	r3, #0
 8010556:	f000 8082 	beq.w	801065e <_dtoa_r+0x4de>
 801055a:	4b91      	ldr	r3, [pc, #580]	; (80107a0 <_dtoa_r+0x620>)
 801055c:	2200      	movs	r2, #0
 801055e:	4650      	mov	r0, sl
 8010560:	4659      	mov	r1, fp
 8010562:	f7f0 fad3 	bl	8000b0c <__aeabi_dcmplt>
 8010566:	2800      	cmp	r0, #0
 8010568:	d079      	beq.n	801065e <_dtoa_r+0x4de>
 801056a:	9b03      	ldr	r3, [sp, #12]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d076      	beq.n	801065e <_dtoa_r+0x4de>
 8010570:	9b02      	ldr	r3, [sp, #8]
 8010572:	2b00      	cmp	r3, #0
 8010574:	dd36      	ble.n	80105e4 <_dtoa_r+0x464>
 8010576:	9b00      	ldr	r3, [sp, #0]
 8010578:	4650      	mov	r0, sl
 801057a:	4659      	mov	r1, fp
 801057c:	1e5f      	subs	r7, r3, #1
 801057e:	2200      	movs	r2, #0
 8010580:	4b88      	ldr	r3, [pc, #544]	; (80107a4 <_dtoa_r+0x624>)
 8010582:	f7f0 f851 	bl	8000628 <__aeabi_dmul>
 8010586:	9e02      	ldr	r6, [sp, #8]
 8010588:	4682      	mov	sl, r0
 801058a:	468b      	mov	fp, r1
 801058c:	3501      	adds	r5, #1
 801058e:	4628      	mov	r0, r5
 8010590:	f7ef ffe0 	bl	8000554 <__aeabi_i2d>
 8010594:	4652      	mov	r2, sl
 8010596:	465b      	mov	r3, fp
 8010598:	f7f0 f846 	bl	8000628 <__aeabi_dmul>
 801059c:	4b82      	ldr	r3, [pc, #520]	; (80107a8 <_dtoa_r+0x628>)
 801059e:	2200      	movs	r2, #0
 80105a0:	f7ef fe8c 	bl	80002bc <__adddf3>
 80105a4:	46d0      	mov	r8, sl
 80105a6:	46d9      	mov	r9, fp
 80105a8:	4682      	mov	sl, r0
 80105aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80105ae:	2e00      	cmp	r6, #0
 80105b0:	d158      	bne.n	8010664 <_dtoa_r+0x4e4>
 80105b2:	4b7e      	ldr	r3, [pc, #504]	; (80107ac <_dtoa_r+0x62c>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	4640      	mov	r0, r8
 80105b8:	4649      	mov	r1, r9
 80105ba:	f7ef fe7d 	bl	80002b8 <__aeabi_dsub>
 80105be:	4652      	mov	r2, sl
 80105c0:	465b      	mov	r3, fp
 80105c2:	4680      	mov	r8, r0
 80105c4:	4689      	mov	r9, r1
 80105c6:	f7f0 fabf 	bl	8000b48 <__aeabi_dcmpgt>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	f040 8295 	bne.w	8010afa <_dtoa_r+0x97a>
 80105d0:	4652      	mov	r2, sl
 80105d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80105d6:	4640      	mov	r0, r8
 80105d8:	4649      	mov	r1, r9
 80105da:	f7f0 fa97 	bl	8000b0c <__aeabi_dcmplt>
 80105de:	2800      	cmp	r0, #0
 80105e0:	f040 8289 	bne.w	8010af6 <_dtoa_r+0x976>
 80105e4:	ec5b ab19 	vmov	sl, fp, d9
 80105e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f2c0 8148 	blt.w	8010880 <_dtoa_r+0x700>
 80105f0:	9a00      	ldr	r2, [sp, #0]
 80105f2:	2a0e      	cmp	r2, #14
 80105f4:	f300 8144 	bgt.w	8010880 <_dtoa_r+0x700>
 80105f8:	4b67      	ldr	r3, [pc, #412]	; (8010798 <_dtoa_r+0x618>)
 80105fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010604:	2b00      	cmp	r3, #0
 8010606:	f280 80d5 	bge.w	80107b4 <_dtoa_r+0x634>
 801060a:	9b03      	ldr	r3, [sp, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	f300 80d1 	bgt.w	80107b4 <_dtoa_r+0x634>
 8010612:	f040 826f 	bne.w	8010af4 <_dtoa_r+0x974>
 8010616:	4b65      	ldr	r3, [pc, #404]	; (80107ac <_dtoa_r+0x62c>)
 8010618:	2200      	movs	r2, #0
 801061a:	4640      	mov	r0, r8
 801061c:	4649      	mov	r1, r9
 801061e:	f7f0 f803 	bl	8000628 <__aeabi_dmul>
 8010622:	4652      	mov	r2, sl
 8010624:	465b      	mov	r3, fp
 8010626:	f7f0 fa85 	bl	8000b34 <__aeabi_dcmpge>
 801062a:	9e03      	ldr	r6, [sp, #12]
 801062c:	4637      	mov	r7, r6
 801062e:	2800      	cmp	r0, #0
 8010630:	f040 8245 	bne.w	8010abe <_dtoa_r+0x93e>
 8010634:	9d01      	ldr	r5, [sp, #4]
 8010636:	2331      	movs	r3, #49	; 0x31
 8010638:	f805 3b01 	strb.w	r3, [r5], #1
 801063c:	9b00      	ldr	r3, [sp, #0]
 801063e:	3301      	adds	r3, #1
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	e240      	b.n	8010ac6 <_dtoa_r+0x946>
 8010644:	07f2      	lsls	r2, r6, #31
 8010646:	d505      	bpl.n	8010654 <_dtoa_r+0x4d4>
 8010648:	e9d7 2300 	ldrd	r2, r3, [r7]
 801064c:	f7ef ffec 	bl	8000628 <__aeabi_dmul>
 8010650:	3501      	adds	r5, #1
 8010652:	2301      	movs	r3, #1
 8010654:	1076      	asrs	r6, r6, #1
 8010656:	3708      	adds	r7, #8
 8010658:	e777      	b.n	801054a <_dtoa_r+0x3ca>
 801065a:	2502      	movs	r5, #2
 801065c:	e779      	b.n	8010552 <_dtoa_r+0x3d2>
 801065e:	9f00      	ldr	r7, [sp, #0]
 8010660:	9e03      	ldr	r6, [sp, #12]
 8010662:	e794      	b.n	801058e <_dtoa_r+0x40e>
 8010664:	9901      	ldr	r1, [sp, #4]
 8010666:	4b4c      	ldr	r3, [pc, #304]	; (8010798 <_dtoa_r+0x618>)
 8010668:	4431      	add	r1, r6
 801066a:	910d      	str	r1, [sp, #52]	; 0x34
 801066c:	9908      	ldr	r1, [sp, #32]
 801066e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010672:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010676:	2900      	cmp	r1, #0
 8010678:	d043      	beq.n	8010702 <_dtoa_r+0x582>
 801067a:	494d      	ldr	r1, [pc, #308]	; (80107b0 <_dtoa_r+0x630>)
 801067c:	2000      	movs	r0, #0
 801067e:	f7f0 f8fd 	bl	800087c <__aeabi_ddiv>
 8010682:	4652      	mov	r2, sl
 8010684:	465b      	mov	r3, fp
 8010686:	f7ef fe17 	bl	80002b8 <__aeabi_dsub>
 801068a:	9d01      	ldr	r5, [sp, #4]
 801068c:	4682      	mov	sl, r0
 801068e:	468b      	mov	fp, r1
 8010690:	4649      	mov	r1, r9
 8010692:	4640      	mov	r0, r8
 8010694:	f7f0 fa78 	bl	8000b88 <__aeabi_d2iz>
 8010698:	4606      	mov	r6, r0
 801069a:	f7ef ff5b 	bl	8000554 <__aeabi_i2d>
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	4640      	mov	r0, r8
 80106a4:	4649      	mov	r1, r9
 80106a6:	f7ef fe07 	bl	80002b8 <__aeabi_dsub>
 80106aa:	3630      	adds	r6, #48	; 0x30
 80106ac:	f805 6b01 	strb.w	r6, [r5], #1
 80106b0:	4652      	mov	r2, sl
 80106b2:	465b      	mov	r3, fp
 80106b4:	4680      	mov	r8, r0
 80106b6:	4689      	mov	r9, r1
 80106b8:	f7f0 fa28 	bl	8000b0c <__aeabi_dcmplt>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d163      	bne.n	8010788 <_dtoa_r+0x608>
 80106c0:	4642      	mov	r2, r8
 80106c2:	464b      	mov	r3, r9
 80106c4:	4936      	ldr	r1, [pc, #216]	; (80107a0 <_dtoa_r+0x620>)
 80106c6:	2000      	movs	r0, #0
 80106c8:	f7ef fdf6 	bl	80002b8 <__aeabi_dsub>
 80106cc:	4652      	mov	r2, sl
 80106ce:	465b      	mov	r3, fp
 80106d0:	f7f0 fa1c 	bl	8000b0c <__aeabi_dcmplt>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	f040 80b5 	bne.w	8010844 <_dtoa_r+0x6c4>
 80106da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106dc:	429d      	cmp	r5, r3
 80106de:	d081      	beq.n	80105e4 <_dtoa_r+0x464>
 80106e0:	4b30      	ldr	r3, [pc, #192]	; (80107a4 <_dtoa_r+0x624>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	4650      	mov	r0, sl
 80106e6:	4659      	mov	r1, fp
 80106e8:	f7ef ff9e 	bl	8000628 <__aeabi_dmul>
 80106ec:	4b2d      	ldr	r3, [pc, #180]	; (80107a4 <_dtoa_r+0x624>)
 80106ee:	4682      	mov	sl, r0
 80106f0:	468b      	mov	fp, r1
 80106f2:	4640      	mov	r0, r8
 80106f4:	4649      	mov	r1, r9
 80106f6:	2200      	movs	r2, #0
 80106f8:	f7ef ff96 	bl	8000628 <__aeabi_dmul>
 80106fc:	4680      	mov	r8, r0
 80106fe:	4689      	mov	r9, r1
 8010700:	e7c6      	b.n	8010690 <_dtoa_r+0x510>
 8010702:	4650      	mov	r0, sl
 8010704:	4659      	mov	r1, fp
 8010706:	f7ef ff8f 	bl	8000628 <__aeabi_dmul>
 801070a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801070c:	9d01      	ldr	r5, [sp, #4]
 801070e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010710:	4682      	mov	sl, r0
 8010712:	468b      	mov	fp, r1
 8010714:	4649      	mov	r1, r9
 8010716:	4640      	mov	r0, r8
 8010718:	f7f0 fa36 	bl	8000b88 <__aeabi_d2iz>
 801071c:	4606      	mov	r6, r0
 801071e:	f7ef ff19 	bl	8000554 <__aeabi_i2d>
 8010722:	3630      	adds	r6, #48	; 0x30
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	4640      	mov	r0, r8
 801072a:	4649      	mov	r1, r9
 801072c:	f7ef fdc4 	bl	80002b8 <__aeabi_dsub>
 8010730:	f805 6b01 	strb.w	r6, [r5], #1
 8010734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010736:	429d      	cmp	r5, r3
 8010738:	4680      	mov	r8, r0
 801073a:	4689      	mov	r9, r1
 801073c:	f04f 0200 	mov.w	r2, #0
 8010740:	d124      	bne.n	801078c <_dtoa_r+0x60c>
 8010742:	4b1b      	ldr	r3, [pc, #108]	; (80107b0 <_dtoa_r+0x630>)
 8010744:	4650      	mov	r0, sl
 8010746:	4659      	mov	r1, fp
 8010748:	f7ef fdb8 	bl	80002bc <__adddf3>
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	4640      	mov	r0, r8
 8010752:	4649      	mov	r1, r9
 8010754:	f7f0 f9f8 	bl	8000b48 <__aeabi_dcmpgt>
 8010758:	2800      	cmp	r0, #0
 801075a:	d173      	bne.n	8010844 <_dtoa_r+0x6c4>
 801075c:	4652      	mov	r2, sl
 801075e:	465b      	mov	r3, fp
 8010760:	4913      	ldr	r1, [pc, #76]	; (80107b0 <_dtoa_r+0x630>)
 8010762:	2000      	movs	r0, #0
 8010764:	f7ef fda8 	bl	80002b8 <__aeabi_dsub>
 8010768:	4602      	mov	r2, r0
 801076a:	460b      	mov	r3, r1
 801076c:	4640      	mov	r0, r8
 801076e:	4649      	mov	r1, r9
 8010770:	f7f0 f9cc 	bl	8000b0c <__aeabi_dcmplt>
 8010774:	2800      	cmp	r0, #0
 8010776:	f43f af35 	beq.w	80105e4 <_dtoa_r+0x464>
 801077a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801077c:	1e6b      	subs	r3, r5, #1
 801077e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010780:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010784:	2b30      	cmp	r3, #48	; 0x30
 8010786:	d0f8      	beq.n	801077a <_dtoa_r+0x5fa>
 8010788:	9700      	str	r7, [sp, #0]
 801078a:	e049      	b.n	8010820 <_dtoa_r+0x6a0>
 801078c:	4b05      	ldr	r3, [pc, #20]	; (80107a4 <_dtoa_r+0x624>)
 801078e:	f7ef ff4b 	bl	8000628 <__aeabi_dmul>
 8010792:	4680      	mov	r8, r0
 8010794:	4689      	mov	r9, r1
 8010796:	e7bd      	b.n	8010714 <_dtoa_r+0x594>
 8010798:	080141d0 	.word	0x080141d0
 801079c:	080141a8 	.word	0x080141a8
 80107a0:	3ff00000 	.word	0x3ff00000
 80107a4:	40240000 	.word	0x40240000
 80107a8:	401c0000 	.word	0x401c0000
 80107ac:	40140000 	.word	0x40140000
 80107b0:	3fe00000 	.word	0x3fe00000
 80107b4:	9d01      	ldr	r5, [sp, #4]
 80107b6:	4656      	mov	r6, sl
 80107b8:	465f      	mov	r7, fp
 80107ba:	4642      	mov	r2, r8
 80107bc:	464b      	mov	r3, r9
 80107be:	4630      	mov	r0, r6
 80107c0:	4639      	mov	r1, r7
 80107c2:	f7f0 f85b 	bl	800087c <__aeabi_ddiv>
 80107c6:	f7f0 f9df 	bl	8000b88 <__aeabi_d2iz>
 80107ca:	4682      	mov	sl, r0
 80107cc:	f7ef fec2 	bl	8000554 <__aeabi_i2d>
 80107d0:	4642      	mov	r2, r8
 80107d2:	464b      	mov	r3, r9
 80107d4:	f7ef ff28 	bl	8000628 <__aeabi_dmul>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	4630      	mov	r0, r6
 80107de:	4639      	mov	r1, r7
 80107e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80107e4:	f7ef fd68 	bl	80002b8 <__aeabi_dsub>
 80107e8:	f805 6b01 	strb.w	r6, [r5], #1
 80107ec:	9e01      	ldr	r6, [sp, #4]
 80107ee:	9f03      	ldr	r7, [sp, #12]
 80107f0:	1bae      	subs	r6, r5, r6
 80107f2:	42b7      	cmp	r7, r6
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	d135      	bne.n	8010866 <_dtoa_r+0x6e6>
 80107fa:	f7ef fd5f 	bl	80002bc <__adddf3>
 80107fe:	4642      	mov	r2, r8
 8010800:	464b      	mov	r3, r9
 8010802:	4606      	mov	r6, r0
 8010804:	460f      	mov	r7, r1
 8010806:	f7f0 f99f 	bl	8000b48 <__aeabi_dcmpgt>
 801080a:	b9d0      	cbnz	r0, 8010842 <_dtoa_r+0x6c2>
 801080c:	4642      	mov	r2, r8
 801080e:	464b      	mov	r3, r9
 8010810:	4630      	mov	r0, r6
 8010812:	4639      	mov	r1, r7
 8010814:	f7f0 f970 	bl	8000af8 <__aeabi_dcmpeq>
 8010818:	b110      	cbz	r0, 8010820 <_dtoa_r+0x6a0>
 801081a:	f01a 0f01 	tst.w	sl, #1
 801081e:	d110      	bne.n	8010842 <_dtoa_r+0x6c2>
 8010820:	4620      	mov	r0, r4
 8010822:	ee18 1a10 	vmov	r1, s16
 8010826:	f000 fae5 	bl	8010df4 <_Bfree>
 801082a:	2300      	movs	r3, #0
 801082c:	9800      	ldr	r0, [sp, #0]
 801082e:	702b      	strb	r3, [r5, #0]
 8010830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010832:	3001      	adds	r0, #1
 8010834:	6018      	str	r0, [r3, #0]
 8010836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010838:	2b00      	cmp	r3, #0
 801083a:	f43f acf1 	beq.w	8010220 <_dtoa_r+0xa0>
 801083e:	601d      	str	r5, [r3, #0]
 8010840:	e4ee      	b.n	8010220 <_dtoa_r+0xa0>
 8010842:	9f00      	ldr	r7, [sp, #0]
 8010844:	462b      	mov	r3, r5
 8010846:	461d      	mov	r5, r3
 8010848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801084c:	2a39      	cmp	r2, #57	; 0x39
 801084e:	d106      	bne.n	801085e <_dtoa_r+0x6de>
 8010850:	9a01      	ldr	r2, [sp, #4]
 8010852:	429a      	cmp	r2, r3
 8010854:	d1f7      	bne.n	8010846 <_dtoa_r+0x6c6>
 8010856:	9901      	ldr	r1, [sp, #4]
 8010858:	2230      	movs	r2, #48	; 0x30
 801085a:	3701      	adds	r7, #1
 801085c:	700a      	strb	r2, [r1, #0]
 801085e:	781a      	ldrb	r2, [r3, #0]
 8010860:	3201      	adds	r2, #1
 8010862:	701a      	strb	r2, [r3, #0]
 8010864:	e790      	b.n	8010788 <_dtoa_r+0x608>
 8010866:	4ba6      	ldr	r3, [pc, #664]	; (8010b00 <_dtoa_r+0x980>)
 8010868:	2200      	movs	r2, #0
 801086a:	f7ef fedd 	bl	8000628 <__aeabi_dmul>
 801086e:	2200      	movs	r2, #0
 8010870:	2300      	movs	r3, #0
 8010872:	4606      	mov	r6, r0
 8010874:	460f      	mov	r7, r1
 8010876:	f7f0 f93f 	bl	8000af8 <__aeabi_dcmpeq>
 801087a:	2800      	cmp	r0, #0
 801087c:	d09d      	beq.n	80107ba <_dtoa_r+0x63a>
 801087e:	e7cf      	b.n	8010820 <_dtoa_r+0x6a0>
 8010880:	9a08      	ldr	r2, [sp, #32]
 8010882:	2a00      	cmp	r2, #0
 8010884:	f000 80d7 	beq.w	8010a36 <_dtoa_r+0x8b6>
 8010888:	9a06      	ldr	r2, [sp, #24]
 801088a:	2a01      	cmp	r2, #1
 801088c:	f300 80ba 	bgt.w	8010a04 <_dtoa_r+0x884>
 8010890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010892:	2a00      	cmp	r2, #0
 8010894:	f000 80b2 	beq.w	80109fc <_dtoa_r+0x87c>
 8010898:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801089c:	9e07      	ldr	r6, [sp, #28]
 801089e:	9d04      	ldr	r5, [sp, #16]
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	441a      	add	r2, r3
 80108a4:	9204      	str	r2, [sp, #16]
 80108a6:	9a05      	ldr	r2, [sp, #20]
 80108a8:	2101      	movs	r1, #1
 80108aa:	441a      	add	r2, r3
 80108ac:	4620      	mov	r0, r4
 80108ae:	9205      	str	r2, [sp, #20]
 80108b0:	f000 fb58 	bl	8010f64 <__i2b>
 80108b4:	4607      	mov	r7, r0
 80108b6:	2d00      	cmp	r5, #0
 80108b8:	dd0c      	ble.n	80108d4 <_dtoa_r+0x754>
 80108ba:	9b05      	ldr	r3, [sp, #20]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd09      	ble.n	80108d4 <_dtoa_r+0x754>
 80108c0:	42ab      	cmp	r3, r5
 80108c2:	9a04      	ldr	r2, [sp, #16]
 80108c4:	bfa8      	it	ge
 80108c6:	462b      	movge	r3, r5
 80108c8:	1ad2      	subs	r2, r2, r3
 80108ca:	9204      	str	r2, [sp, #16]
 80108cc:	9a05      	ldr	r2, [sp, #20]
 80108ce:	1aed      	subs	r5, r5, r3
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	9305      	str	r3, [sp, #20]
 80108d4:	9b07      	ldr	r3, [sp, #28]
 80108d6:	b31b      	cbz	r3, 8010920 <_dtoa_r+0x7a0>
 80108d8:	9b08      	ldr	r3, [sp, #32]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 80af 	beq.w	8010a3e <_dtoa_r+0x8be>
 80108e0:	2e00      	cmp	r6, #0
 80108e2:	dd13      	ble.n	801090c <_dtoa_r+0x78c>
 80108e4:	4639      	mov	r1, r7
 80108e6:	4632      	mov	r2, r6
 80108e8:	4620      	mov	r0, r4
 80108ea:	f000 fbfb 	bl	80110e4 <__pow5mult>
 80108ee:	ee18 2a10 	vmov	r2, s16
 80108f2:	4601      	mov	r1, r0
 80108f4:	4607      	mov	r7, r0
 80108f6:	4620      	mov	r0, r4
 80108f8:	f000 fb4a 	bl	8010f90 <__multiply>
 80108fc:	ee18 1a10 	vmov	r1, s16
 8010900:	4680      	mov	r8, r0
 8010902:	4620      	mov	r0, r4
 8010904:	f000 fa76 	bl	8010df4 <_Bfree>
 8010908:	ee08 8a10 	vmov	s16, r8
 801090c:	9b07      	ldr	r3, [sp, #28]
 801090e:	1b9a      	subs	r2, r3, r6
 8010910:	d006      	beq.n	8010920 <_dtoa_r+0x7a0>
 8010912:	ee18 1a10 	vmov	r1, s16
 8010916:	4620      	mov	r0, r4
 8010918:	f000 fbe4 	bl	80110e4 <__pow5mult>
 801091c:	ee08 0a10 	vmov	s16, r0
 8010920:	2101      	movs	r1, #1
 8010922:	4620      	mov	r0, r4
 8010924:	f000 fb1e 	bl	8010f64 <__i2b>
 8010928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801092a:	2b00      	cmp	r3, #0
 801092c:	4606      	mov	r6, r0
 801092e:	f340 8088 	ble.w	8010a42 <_dtoa_r+0x8c2>
 8010932:	461a      	mov	r2, r3
 8010934:	4601      	mov	r1, r0
 8010936:	4620      	mov	r0, r4
 8010938:	f000 fbd4 	bl	80110e4 <__pow5mult>
 801093c:	9b06      	ldr	r3, [sp, #24]
 801093e:	2b01      	cmp	r3, #1
 8010940:	4606      	mov	r6, r0
 8010942:	f340 8081 	ble.w	8010a48 <_dtoa_r+0x8c8>
 8010946:	f04f 0800 	mov.w	r8, #0
 801094a:	6933      	ldr	r3, [r6, #16]
 801094c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010950:	6918      	ldr	r0, [r3, #16]
 8010952:	f000 fab7 	bl	8010ec4 <__hi0bits>
 8010956:	f1c0 0020 	rsb	r0, r0, #32
 801095a:	9b05      	ldr	r3, [sp, #20]
 801095c:	4418      	add	r0, r3
 801095e:	f010 001f 	ands.w	r0, r0, #31
 8010962:	f000 8092 	beq.w	8010a8a <_dtoa_r+0x90a>
 8010966:	f1c0 0320 	rsb	r3, r0, #32
 801096a:	2b04      	cmp	r3, #4
 801096c:	f340 808a 	ble.w	8010a84 <_dtoa_r+0x904>
 8010970:	f1c0 001c 	rsb	r0, r0, #28
 8010974:	9b04      	ldr	r3, [sp, #16]
 8010976:	4403      	add	r3, r0
 8010978:	9304      	str	r3, [sp, #16]
 801097a:	9b05      	ldr	r3, [sp, #20]
 801097c:	4403      	add	r3, r0
 801097e:	4405      	add	r5, r0
 8010980:	9305      	str	r3, [sp, #20]
 8010982:	9b04      	ldr	r3, [sp, #16]
 8010984:	2b00      	cmp	r3, #0
 8010986:	dd07      	ble.n	8010998 <_dtoa_r+0x818>
 8010988:	ee18 1a10 	vmov	r1, s16
 801098c:	461a      	mov	r2, r3
 801098e:	4620      	mov	r0, r4
 8010990:	f000 fc02 	bl	8011198 <__lshift>
 8010994:	ee08 0a10 	vmov	s16, r0
 8010998:	9b05      	ldr	r3, [sp, #20]
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd05      	ble.n	80109aa <_dtoa_r+0x82a>
 801099e:	4631      	mov	r1, r6
 80109a0:	461a      	mov	r2, r3
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 fbf8 	bl	8011198 <__lshift>
 80109a8:	4606      	mov	r6, r0
 80109aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d06e      	beq.n	8010a8e <_dtoa_r+0x90e>
 80109b0:	ee18 0a10 	vmov	r0, s16
 80109b4:	4631      	mov	r1, r6
 80109b6:	f000 fc5f 	bl	8011278 <__mcmp>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	da67      	bge.n	8010a8e <_dtoa_r+0x90e>
 80109be:	9b00      	ldr	r3, [sp, #0]
 80109c0:	3b01      	subs	r3, #1
 80109c2:	ee18 1a10 	vmov	r1, s16
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	220a      	movs	r2, #10
 80109ca:	2300      	movs	r3, #0
 80109cc:	4620      	mov	r0, r4
 80109ce:	f000 fa33 	bl	8010e38 <__multadd>
 80109d2:	9b08      	ldr	r3, [sp, #32]
 80109d4:	ee08 0a10 	vmov	s16, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f000 81b1 	beq.w	8010d40 <_dtoa_r+0xbc0>
 80109de:	2300      	movs	r3, #0
 80109e0:	4639      	mov	r1, r7
 80109e2:	220a      	movs	r2, #10
 80109e4:	4620      	mov	r0, r4
 80109e6:	f000 fa27 	bl	8010e38 <__multadd>
 80109ea:	9b02      	ldr	r3, [sp, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	4607      	mov	r7, r0
 80109f0:	f300 808e 	bgt.w	8010b10 <_dtoa_r+0x990>
 80109f4:	9b06      	ldr	r3, [sp, #24]
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	dc51      	bgt.n	8010a9e <_dtoa_r+0x91e>
 80109fa:	e089      	b.n	8010b10 <_dtoa_r+0x990>
 80109fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a02:	e74b      	b.n	801089c <_dtoa_r+0x71c>
 8010a04:	9b03      	ldr	r3, [sp, #12]
 8010a06:	1e5e      	subs	r6, r3, #1
 8010a08:	9b07      	ldr	r3, [sp, #28]
 8010a0a:	42b3      	cmp	r3, r6
 8010a0c:	bfbf      	itttt	lt
 8010a0e:	9b07      	ldrlt	r3, [sp, #28]
 8010a10:	9607      	strlt	r6, [sp, #28]
 8010a12:	1af2      	sublt	r2, r6, r3
 8010a14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010a16:	bfb6      	itet	lt
 8010a18:	189b      	addlt	r3, r3, r2
 8010a1a:	1b9e      	subge	r6, r3, r6
 8010a1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010a1e:	9b03      	ldr	r3, [sp, #12]
 8010a20:	bfb8      	it	lt
 8010a22:	2600      	movlt	r6, #0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	bfb7      	itett	lt
 8010a28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010a2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010a30:	1a9d      	sublt	r5, r3, r2
 8010a32:	2300      	movlt	r3, #0
 8010a34:	e734      	b.n	80108a0 <_dtoa_r+0x720>
 8010a36:	9e07      	ldr	r6, [sp, #28]
 8010a38:	9d04      	ldr	r5, [sp, #16]
 8010a3a:	9f08      	ldr	r7, [sp, #32]
 8010a3c:	e73b      	b.n	80108b6 <_dtoa_r+0x736>
 8010a3e:	9a07      	ldr	r2, [sp, #28]
 8010a40:	e767      	b.n	8010912 <_dtoa_r+0x792>
 8010a42:	9b06      	ldr	r3, [sp, #24]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	dc18      	bgt.n	8010a7a <_dtoa_r+0x8fa>
 8010a48:	f1ba 0f00 	cmp.w	sl, #0
 8010a4c:	d115      	bne.n	8010a7a <_dtoa_r+0x8fa>
 8010a4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a52:	b993      	cbnz	r3, 8010a7a <_dtoa_r+0x8fa>
 8010a54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a58:	0d1b      	lsrs	r3, r3, #20
 8010a5a:	051b      	lsls	r3, r3, #20
 8010a5c:	b183      	cbz	r3, 8010a80 <_dtoa_r+0x900>
 8010a5e:	9b04      	ldr	r3, [sp, #16]
 8010a60:	3301      	adds	r3, #1
 8010a62:	9304      	str	r3, [sp, #16]
 8010a64:	9b05      	ldr	r3, [sp, #20]
 8010a66:	3301      	adds	r3, #1
 8010a68:	9305      	str	r3, [sp, #20]
 8010a6a:	f04f 0801 	mov.w	r8, #1
 8010a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f47f af6a 	bne.w	801094a <_dtoa_r+0x7ca>
 8010a76:	2001      	movs	r0, #1
 8010a78:	e76f      	b.n	801095a <_dtoa_r+0x7da>
 8010a7a:	f04f 0800 	mov.w	r8, #0
 8010a7e:	e7f6      	b.n	8010a6e <_dtoa_r+0x8ee>
 8010a80:	4698      	mov	r8, r3
 8010a82:	e7f4      	b.n	8010a6e <_dtoa_r+0x8ee>
 8010a84:	f43f af7d 	beq.w	8010982 <_dtoa_r+0x802>
 8010a88:	4618      	mov	r0, r3
 8010a8a:	301c      	adds	r0, #28
 8010a8c:	e772      	b.n	8010974 <_dtoa_r+0x7f4>
 8010a8e:	9b03      	ldr	r3, [sp, #12]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	dc37      	bgt.n	8010b04 <_dtoa_r+0x984>
 8010a94:	9b06      	ldr	r3, [sp, #24]
 8010a96:	2b02      	cmp	r3, #2
 8010a98:	dd34      	ble.n	8010b04 <_dtoa_r+0x984>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	9302      	str	r3, [sp, #8]
 8010a9e:	9b02      	ldr	r3, [sp, #8]
 8010aa0:	b96b      	cbnz	r3, 8010abe <_dtoa_r+0x93e>
 8010aa2:	4631      	mov	r1, r6
 8010aa4:	2205      	movs	r2, #5
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f000 f9c6 	bl	8010e38 <__multadd>
 8010aac:	4601      	mov	r1, r0
 8010aae:	4606      	mov	r6, r0
 8010ab0:	ee18 0a10 	vmov	r0, s16
 8010ab4:	f000 fbe0 	bl	8011278 <__mcmp>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	f73f adbb 	bgt.w	8010634 <_dtoa_r+0x4b4>
 8010abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac0:	9d01      	ldr	r5, [sp, #4]
 8010ac2:	43db      	mvns	r3, r3
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	f04f 0800 	mov.w	r8, #0
 8010aca:	4631      	mov	r1, r6
 8010acc:	4620      	mov	r0, r4
 8010ace:	f000 f991 	bl	8010df4 <_Bfree>
 8010ad2:	2f00      	cmp	r7, #0
 8010ad4:	f43f aea4 	beq.w	8010820 <_dtoa_r+0x6a0>
 8010ad8:	f1b8 0f00 	cmp.w	r8, #0
 8010adc:	d005      	beq.n	8010aea <_dtoa_r+0x96a>
 8010ade:	45b8      	cmp	r8, r7
 8010ae0:	d003      	beq.n	8010aea <_dtoa_r+0x96a>
 8010ae2:	4641      	mov	r1, r8
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 f985 	bl	8010df4 <_Bfree>
 8010aea:	4639      	mov	r1, r7
 8010aec:	4620      	mov	r0, r4
 8010aee:	f000 f981 	bl	8010df4 <_Bfree>
 8010af2:	e695      	b.n	8010820 <_dtoa_r+0x6a0>
 8010af4:	2600      	movs	r6, #0
 8010af6:	4637      	mov	r7, r6
 8010af8:	e7e1      	b.n	8010abe <_dtoa_r+0x93e>
 8010afa:	9700      	str	r7, [sp, #0]
 8010afc:	4637      	mov	r7, r6
 8010afe:	e599      	b.n	8010634 <_dtoa_r+0x4b4>
 8010b00:	40240000 	.word	0x40240000
 8010b04:	9b08      	ldr	r3, [sp, #32]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	f000 80ca 	beq.w	8010ca0 <_dtoa_r+0xb20>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	9302      	str	r3, [sp, #8]
 8010b10:	2d00      	cmp	r5, #0
 8010b12:	dd05      	ble.n	8010b20 <_dtoa_r+0x9a0>
 8010b14:	4639      	mov	r1, r7
 8010b16:	462a      	mov	r2, r5
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f000 fb3d 	bl	8011198 <__lshift>
 8010b1e:	4607      	mov	r7, r0
 8010b20:	f1b8 0f00 	cmp.w	r8, #0
 8010b24:	d05b      	beq.n	8010bde <_dtoa_r+0xa5e>
 8010b26:	6879      	ldr	r1, [r7, #4]
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f000 f923 	bl	8010d74 <_Balloc>
 8010b2e:	4605      	mov	r5, r0
 8010b30:	b928      	cbnz	r0, 8010b3e <_dtoa_r+0x9be>
 8010b32:	4b87      	ldr	r3, [pc, #540]	; (8010d50 <_dtoa_r+0xbd0>)
 8010b34:	4602      	mov	r2, r0
 8010b36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010b3a:	f7ff bb3b 	b.w	80101b4 <_dtoa_r+0x34>
 8010b3e:	693a      	ldr	r2, [r7, #16]
 8010b40:	3202      	adds	r2, #2
 8010b42:	0092      	lsls	r2, r2, #2
 8010b44:	f107 010c 	add.w	r1, r7, #12
 8010b48:	300c      	adds	r0, #12
 8010b4a:	f7fe fdc9 	bl	800f6e0 <memcpy>
 8010b4e:	2201      	movs	r2, #1
 8010b50:	4629      	mov	r1, r5
 8010b52:	4620      	mov	r0, r4
 8010b54:	f000 fb20 	bl	8011198 <__lshift>
 8010b58:	9b01      	ldr	r3, [sp, #4]
 8010b5a:	f103 0901 	add.w	r9, r3, #1
 8010b5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010b62:	4413      	add	r3, r2
 8010b64:	9305      	str	r3, [sp, #20]
 8010b66:	f00a 0301 	and.w	r3, sl, #1
 8010b6a:	46b8      	mov	r8, r7
 8010b6c:	9304      	str	r3, [sp, #16]
 8010b6e:	4607      	mov	r7, r0
 8010b70:	4631      	mov	r1, r6
 8010b72:	ee18 0a10 	vmov	r0, s16
 8010b76:	f7ff fa75 	bl	8010064 <quorem>
 8010b7a:	4641      	mov	r1, r8
 8010b7c:	9002      	str	r0, [sp, #8]
 8010b7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010b82:	ee18 0a10 	vmov	r0, s16
 8010b86:	f000 fb77 	bl	8011278 <__mcmp>
 8010b8a:	463a      	mov	r2, r7
 8010b8c:	9003      	str	r0, [sp, #12]
 8010b8e:	4631      	mov	r1, r6
 8010b90:	4620      	mov	r0, r4
 8010b92:	f000 fb8d 	bl	80112b0 <__mdiff>
 8010b96:	68c2      	ldr	r2, [r0, #12]
 8010b98:	f109 3bff 	add.w	fp, r9, #4294967295
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	bb02      	cbnz	r2, 8010be2 <_dtoa_r+0xa62>
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	ee18 0a10 	vmov	r0, s16
 8010ba6:	f000 fb67 	bl	8011278 <__mcmp>
 8010baa:	4602      	mov	r2, r0
 8010bac:	4629      	mov	r1, r5
 8010bae:	4620      	mov	r0, r4
 8010bb0:	9207      	str	r2, [sp, #28]
 8010bb2:	f000 f91f 	bl	8010df4 <_Bfree>
 8010bb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010bba:	ea43 0102 	orr.w	r1, r3, r2
 8010bbe:	9b04      	ldr	r3, [sp, #16]
 8010bc0:	430b      	orrs	r3, r1
 8010bc2:	464d      	mov	r5, r9
 8010bc4:	d10f      	bne.n	8010be6 <_dtoa_r+0xa66>
 8010bc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010bca:	d02a      	beq.n	8010c22 <_dtoa_r+0xaa2>
 8010bcc:	9b03      	ldr	r3, [sp, #12]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	dd02      	ble.n	8010bd8 <_dtoa_r+0xa58>
 8010bd2:	9b02      	ldr	r3, [sp, #8]
 8010bd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010bd8:	f88b a000 	strb.w	sl, [fp]
 8010bdc:	e775      	b.n	8010aca <_dtoa_r+0x94a>
 8010bde:	4638      	mov	r0, r7
 8010be0:	e7ba      	b.n	8010b58 <_dtoa_r+0x9d8>
 8010be2:	2201      	movs	r2, #1
 8010be4:	e7e2      	b.n	8010bac <_dtoa_r+0xa2c>
 8010be6:	9b03      	ldr	r3, [sp, #12]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	db04      	blt.n	8010bf6 <_dtoa_r+0xa76>
 8010bec:	9906      	ldr	r1, [sp, #24]
 8010bee:	430b      	orrs	r3, r1
 8010bf0:	9904      	ldr	r1, [sp, #16]
 8010bf2:	430b      	orrs	r3, r1
 8010bf4:	d122      	bne.n	8010c3c <_dtoa_r+0xabc>
 8010bf6:	2a00      	cmp	r2, #0
 8010bf8:	ddee      	ble.n	8010bd8 <_dtoa_r+0xa58>
 8010bfa:	ee18 1a10 	vmov	r1, s16
 8010bfe:	2201      	movs	r2, #1
 8010c00:	4620      	mov	r0, r4
 8010c02:	f000 fac9 	bl	8011198 <__lshift>
 8010c06:	4631      	mov	r1, r6
 8010c08:	ee08 0a10 	vmov	s16, r0
 8010c0c:	f000 fb34 	bl	8011278 <__mcmp>
 8010c10:	2800      	cmp	r0, #0
 8010c12:	dc03      	bgt.n	8010c1c <_dtoa_r+0xa9c>
 8010c14:	d1e0      	bne.n	8010bd8 <_dtoa_r+0xa58>
 8010c16:	f01a 0f01 	tst.w	sl, #1
 8010c1a:	d0dd      	beq.n	8010bd8 <_dtoa_r+0xa58>
 8010c1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010c20:	d1d7      	bne.n	8010bd2 <_dtoa_r+0xa52>
 8010c22:	2339      	movs	r3, #57	; 0x39
 8010c24:	f88b 3000 	strb.w	r3, [fp]
 8010c28:	462b      	mov	r3, r5
 8010c2a:	461d      	mov	r5, r3
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c32:	2a39      	cmp	r2, #57	; 0x39
 8010c34:	d071      	beq.n	8010d1a <_dtoa_r+0xb9a>
 8010c36:	3201      	adds	r2, #1
 8010c38:	701a      	strb	r2, [r3, #0]
 8010c3a:	e746      	b.n	8010aca <_dtoa_r+0x94a>
 8010c3c:	2a00      	cmp	r2, #0
 8010c3e:	dd07      	ble.n	8010c50 <_dtoa_r+0xad0>
 8010c40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010c44:	d0ed      	beq.n	8010c22 <_dtoa_r+0xaa2>
 8010c46:	f10a 0301 	add.w	r3, sl, #1
 8010c4a:	f88b 3000 	strb.w	r3, [fp]
 8010c4e:	e73c      	b.n	8010aca <_dtoa_r+0x94a>
 8010c50:	9b05      	ldr	r3, [sp, #20]
 8010c52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010c56:	4599      	cmp	r9, r3
 8010c58:	d047      	beq.n	8010cea <_dtoa_r+0xb6a>
 8010c5a:	ee18 1a10 	vmov	r1, s16
 8010c5e:	2300      	movs	r3, #0
 8010c60:	220a      	movs	r2, #10
 8010c62:	4620      	mov	r0, r4
 8010c64:	f000 f8e8 	bl	8010e38 <__multadd>
 8010c68:	45b8      	cmp	r8, r7
 8010c6a:	ee08 0a10 	vmov	s16, r0
 8010c6e:	f04f 0300 	mov.w	r3, #0
 8010c72:	f04f 020a 	mov.w	r2, #10
 8010c76:	4641      	mov	r1, r8
 8010c78:	4620      	mov	r0, r4
 8010c7a:	d106      	bne.n	8010c8a <_dtoa_r+0xb0a>
 8010c7c:	f000 f8dc 	bl	8010e38 <__multadd>
 8010c80:	4680      	mov	r8, r0
 8010c82:	4607      	mov	r7, r0
 8010c84:	f109 0901 	add.w	r9, r9, #1
 8010c88:	e772      	b.n	8010b70 <_dtoa_r+0x9f0>
 8010c8a:	f000 f8d5 	bl	8010e38 <__multadd>
 8010c8e:	4639      	mov	r1, r7
 8010c90:	4680      	mov	r8, r0
 8010c92:	2300      	movs	r3, #0
 8010c94:	220a      	movs	r2, #10
 8010c96:	4620      	mov	r0, r4
 8010c98:	f000 f8ce 	bl	8010e38 <__multadd>
 8010c9c:	4607      	mov	r7, r0
 8010c9e:	e7f1      	b.n	8010c84 <_dtoa_r+0xb04>
 8010ca0:	9b03      	ldr	r3, [sp, #12]
 8010ca2:	9302      	str	r3, [sp, #8]
 8010ca4:	9d01      	ldr	r5, [sp, #4]
 8010ca6:	ee18 0a10 	vmov	r0, s16
 8010caa:	4631      	mov	r1, r6
 8010cac:	f7ff f9da 	bl	8010064 <quorem>
 8010cb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010cb4:	9b01      	ldr	r3, [sp, #4]
 8010cb6:	f805 ab01 	strb.w	sl, [r5], #1
 8010cba:	1aea      	subs	r2, r5, r3
 8010cbc:	9b02      	ldr	r3, [sp, #8]
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	dd09      	ble.n	8010cd6 <_dtoa_r+0xb56>
 8010cc2:	ee18 1a10 	vmov	r1, s16
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	220a      	movs	r2, #10
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f000 f8b4 	bl	8010e38 <__multadd>
 8010cd0:	ee08 0a10 	vmov	s16, r0
 8010cd4:	e7e7      	b.n	8010ca6 <_dtoa_r+0xb26>
 8010cd6:	9b02      	ldr	r3, [sp, #8]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	bfc8      	it	gt
 8010cdc:	461d      	movgt	r5, r3
 8010cde:	9b01      	ldr	r3, [sp, #4]
 8010ce0:	bfd8      	it	le
 8010ce2:	2501      	movle	r5, #1
 8010ce4:	441d      	add	r5, r3
 8010ce6:	f04f 0800 	mov.w	r8, #0
 8010cea:	ee18 1a10 	vmov	r1, s16
 8010cee:	2201      	movs	r2, #1
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f000 fa51 	bl	8011198 <__lshift>
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	ee08 0a10 	vmov	s16, r0
 8010cfc:	f000 fabc 	bl	8011278 <__mcmp>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	dc91      	bgt.n	8010c28 <_dtoa_r+0xaa8>
 8010d04:	d102      	bne.n	8010d0c <_dtoa_r+0xb8c>
 8010d06:	f01a 0f01 	tst.w	sl, #1
 8010d0a:	d18d      	bne.n	8010c28 <_dtoa_r+0xaa8>
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	461d      	mov	r5, r3
 8010d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d14:	2a30      	cmp	r2, #48	; 0x30
 8010d16:	d0fa      	beq.n	8010d0e <_dtoa_r+0xb8e>
 8010d18:	e6d7      	b.n	8010aca <_dtoa_r+0x94a>
 8010d1a:	9a01      	ldr	r2, [sp, #4]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d184      	bne.n	8010c2a <_dtoa_r+0xaaa>
 8010d20:	9b00      	ldr	r3, [sp, #0]
 8010d22:	3301      	adds	r3, #1
 8010d24:	9300      	str	r3, [sp, #0]
 8010d26:	2331      	movs	r3, #49	; 0x31
 8010d28:	7013      	strb	r3, [r2, #0]
 8010d2a:	e6ce      	b.n	8010aca <_dtoa_r+0x94a>
 8010d2c:	4b09      	ldr	r3, [pc, #36]	; (8010d54 <_dtoa_r+0xbd4>)
 8010d2e:	f7ff ba95 	b.w	801025c <_dtoa_r+0xdc>
 8010d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f47f aa6e 	bne.w	8010216 <_dtoa_r+0x96>
 8010d3a:	4b07      	ldr	r3, [pc, #28]	; (8010d58 <_dtoa_r+0xbd8>)
 8010d3c:	f7ff ba8e 	b.w	801025c <_dtoa_r+0xdc>
 8010d40:	9b02      	ldr	r3, [sp, #8]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dcae      	bgt.n	8010ca4 <_dtoa_r+0xb24>
 8010d46:	9b06      	ldr	r3, [sp, #24]
 8010d48:	2b02      	cmp	r3, #2
 8010d4a:	f73f aea8 	bgt.w	8010a9e <_dtoa_r+0x91e>
 8010d4e:	e7a9      	b.n	8010ca4 <_dtoa_r+0xb24>
 8010d50:	0801413b 	.word	0x0801413b
 8010d54:	08014098 	.word	0x08014098
 8010d58:	080140bc 	.word	0x080140bc

08010d5c <_localeconv_r>:
 8010d5c:	4800      	ldr	r0, [pc, #0]	; (8010d60 <_localeconv_r+0x4>)
 8010d5e:	4770      	bx	lr
 8010d60:	20000174 	.word	0x20000174

08010d64 <malloc>:
 8010d64:	4b02      	ldr	r3, [pc, #8]	; (8010d70 <malloc+0xc>)
 8010d66:	4601      	mov	r1, r0
 8010d68:	6818      	ldr	r0, [r3, #0]
 8010d6a:	f000 bc09 	b.w	8011580 <_malloc_r>
 8010d6e:	bf00      	nop
 8010d70:	20000020 	.word	0x20000020

08010d74 <_Balloc>:
 8010d74:	b570      	push	{r4, r5, r6, lr}
 8010d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d78:	4604      	mov	r4, r0
 8010d7a:	460d      	mov	r5, r1
 8010d7c:	b976      	cbnz	r6, 8010d9c <_Balloc+0x28>
 8010d7e:	2010      	movs	r0, #16
 8010d80:	f7ff fff0 	bl	8010d64 <malloc>
 8010d84:	4602      	mov	r2, r0
 8010d86:	6260      	str	r0, [r4, #36]	; 0x24
 8010d88:	b920      	cbnz	r0, 8010d94 <_Balloc+0x20>
 8010d8a:	4b18      	ldr	r3, [pc, #96]	; (8010dec <_Balloc+0x78>)
 8010d8c:	4818      	ldr	r0, [pc, #96]	; (8010df0 <_Balloc+0x7c>)
 8010d8e:	2166      	movs	r1, #102	; 0x66
 8010d90:	f000 fdd6 	bl	8011940 <__assert_func>
 8010d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d98:	6006      	str	r6, [r0, #0]
 8010d9a:	60c6      	str	r6, [r0, #12]
 8010d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010d9e:	68f3      	ldr	r3, [r6, #12]
 8010da0:	b183      	cbz	r3, 8010dc4 <_Balloc+0x50>
 8010da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010daa:	b9b8      	cbnz	r0, 8010ddc <_Balloc+0x68>
 8010dac:	2101      	movs	r1, #1
 8010dae:	fa01 f605 	lsl.w	r6, r1, r5
 8010db2:	1d72      	adds	r2, r6, #5
 8010db4:	0092      	lsls	r2, r2, #2
 8010db6:	4620      	mov	r0, r4
 8010db8:	f000 fb60 	bl	801147c <_calloc_r>
 8010dbc:	b160      	cbz	r0, 8010dd8 <_Balloc+0x64>
 8010dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010dc2:	e00e      	b.n	8010de2 <_Balloc+0x6e>
 8010dc4:	2221      	movs	r2, #33	; 0x21
 8010dc6:	2104      	movs	r1, #4
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f000 fb57 	bl	801147c <_calloc_r>
 8010dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dd0:	60f0      	str	r0, [r6, #12]
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1e4      	bne.n	8010da2 <_Balloc+0x2e>
 8010dd8:	2000      	movs	r0, #0
 8010dda:	bd70      	pop	{r4, r5, r6, pc}
 8010ddc:	6802      	ldr	r2, [r0, #0]
 8010dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010de2:	2300      	movs	r3, #0
 8010de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010de8:	e7f7      	b.n	8010dda <_Balloc+0x66>
 8010dea:	bf00      	nop
 8010dec:	080140c9 	.word	0x080140c9
 8010df0:	0801414c 	.word	0x0801414c

08010df4 <_Bfree>:
 8010df4:	b570      	push	{r4, r5, r6, lr}
 8010df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010df8:	4605      	mov	r5, r0
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	b976      	cbnz	r6, 8010e1c <_Bfree+0x28>
 8010dfe:	2010      	movs	r0, #16
 8010e00:	f7ff ffb0 	bl	8010d64 <malloc>
 8010e04:	4602      	mov	r2, r0
 8010e06:	6268      	str	r0, [r5, #36]	; 0x24
 8010e08:	b920      	cbnz	r0, 8010e14 <_Bfree+0x20>
 8010e0a:	4b09      	ldr	r3, [pc, #36]	; (8010e30 <_Bfree+0x3c>)
 8010e0c:	4809      	ldr	r0, [pc, #36]	; (8010e34 <_Bfree+0x40>)
 8010e0e:	218a      	movs	r1, #138	; 0x8a
 8010e10:	f000 fd96 	bl	8011940 <__assert_func>
 8010e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e18:	6006      	str	r6, [r0, #0]
 8010e1a:	60c6      	str	r6, [r0, #12]
 8010e1c:	b13c      	cbz	r4, 8010e2e <_Bfree+0x3a>
 8010e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e20:	6862      	ldr	r2, [r4, #4]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e28:	6021      	str	r1, [r4, #0]
 8010e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e2e:	bd70      	pop	{r4, r5, r6, pc}
 8010e30:	080140c9 	.word	0x080140c9
 8010e34:	0801414c 	.word	0x0801414c

08010e38 <__multadd>:
 8010e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3c:	690d      	ldr	r5, [r1, #16]
 8010e3e:	4607      	mov	r7, r0
 8010e40:	460c      	mov	r4, r1
 8010e42:	461e      	mov	r6, r3
 8010e44:	f101 0c14 	add.w	ip, r1, #20
 8010e48:	2000      	movs	r0, #0
 8010e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8010e4e:	b299      	uxth	r1, r3
 8010e50:	fb02 6101 	mla	r1, r2, r1, r6
 8010e54:	0c1e      	lsrs	r6, r3, #16
 8010e56:	0c0b      	lsrs	r3, r1, #16
 8010e58:	fb02 3306 	mla	r3, r2, r6, r3
 8010e5c:	b289      	uxth	r1, r1
 8010e5e:	3001      	adds	r0, #1
 8010e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e64:	4285      	cmp	r5, r0
 8010e66:	f84c 1b04 	str.w	r1, [ip], #4
 8010e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e6e:	dcec      	bgt.n	8010e4a <__multadd+0x12>
 8010e70:	b30e      	cbz	r6, 8010eb6 <__multadd+0x7e>
 8010e72:	68a3      	ldr	r3, [r4, #8]
 8010e74:	42ab      	cmp	r3, r5
 8010e76:	dc19      	bgt.n	8010eac <__multadd+0x74>
 8010e78:	6861      	ldr	r1, [r4, #4]
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	3101      	adds	r1, #1
 8010e7e:	f7ff ff79 	bl	8010d74 <_Balloc>
 8010e82:	4680      	mov	r8, r0
 8010e84:	b928      	cbnz	r0, 8010e92 <__multadd+0x5a>
 8010e86:	4602      	mov	r2, r0
 8010e88:	4b0c      	ldr	r3, [pc, #48]	; (8010ebc <__multadd+0x84>)
 8010e8a:	480d      	ldr	r0, [pc, #52]	; (8010ec0 <__multadd+0x88>)
 8010e8c:	21b5      	movs	r1, #181	; 0xb5
 8010e8e:	f000 fd57 	bl	8011940 <__assert_func>
 8010e92:	6922      	ldr	r2, [r4, #16]
 8010e94:	3202      	adds	r2, #2
 8010e96:	f104 010c 	add.w	r1, r4, #12
 8010e9a:	0092      	lsls	r2, r2, #2
 8010e9c:	300c      	adds	r0, #12
 8010e9e:	f7fe fc1f 	bl	800f6e0 <memcpy>
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	4638      	mov	r0, r7
 8010ea6:	f7ff ffa5 	bl	8010df4 <_Bfree>
 8010eaa:	4644      	mov	r4, r8
 8010eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010eb0:	3501      	adds	r5, #1
 8010eb2:	615e      	str	r6, [r3, #20]
 8010eb4:	6125      	str	r5, [r4, #16]
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ebc:	0801413b 	.word	0x0801413b
 8010ec0:	0801414c 	.word	0x0801414c

08010ec4 <__hi0bits>:
 8010ec4:	0c03      	lsrs	r3, r0, #16
 8010ec6:	041b      	lsls	r3, r3, #16
 8010ec8:	b9d3      	cbnz	r3, 8010f00 <__hi0bits+0x3c>
 8010eca:	0400      	lsls	r0, r0, #16
 8010ecc:	2310      	movs	r3, #16
 8010ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ed2:	bf04      	itt	eq
 8010ed4:	0200      	lsleq	r0, r0, #8
 8010ed6:	3308      	addeq	r3, #8
 8010ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010edc:	bf04      	itt	eq
 8010ede:	0100      	lsleq	r0, r0, #4
 8010ee0:	3304      	addeq	r3, #4
 8010ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ee6:	bf04      	itt	eq
 8010ee8:	0080      	lsleq	r0, r0, #2
 8010eea:	3302      	addeq	r3, #2
 8010eec:	2800      	cmp	r0, #0
 8010eee:	db05      	blt.n	8010efc <__hi0bits+0x38>
 8010ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ef4:	f103 0301 	add.w	r3, r3, #1
 8010ef8:	bf08      	it	eq
 8010efa:	2320      	moveq	r3, #32
 8010efc:	4618      	mov	r0, r3
 8010efe:	4770      	bx	lr
 8010f00:	2300      	movs	r3, #0
 8010f02:	e7e4      	b.n	8010ece <__hi0bits+0xa>

08010f04 <__lo0bits>:
 8010f04:	6803      	ldr	r3, [r0, #0]
 8010f06:	f013 0207 	ands.w	r2, r3, #7
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	d00b      	beq.n	8010f26 <__lo0bits+0x22>
 8010f0e:	07da      	lsls	r2, r3, #31
 8010f10:	d423      	bmi.n	8010f5a <__lo0bits+0x56>
 8010f12:	0798      	lsls	r0, r3, #30
 8010f14:	bf49      	itett	mi
 8010f16:	085b      	lsrmi	r3, r3, #1
 8010f18:	089b      	lsrpl	r3, r3, #2
 8010f1a:	2001      	movmi	r0, #1
 8010f1c:	600b      	strmi	r3, [r1, #0]
 8010f1e:	bf5c      	itt	pl
 8010f20:	600b      	strpl	r3, [r1, #0]
 8010f22:	2002      	movpl	r0, #2
 8010f24:	4770      	bx	lr
 8010f26:	b298      	uxth	r0, r3
 8010f28:	b9a8      	cbnz	r0, 8010f56 <__lo0bits+0x52>
 8010f2a:	0c1b      	lsrs	r3, r3, #16
 8010f2c:	2010      	movs	r0, #16
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	b90a      	cbnz	r2, 8010f36 <__lo0bits+0x32>
 8010f32:	3008      	adds	r0, #8
 8010f34:	0a1b      	lsrs	r3, r3, #8
 8010f36:	071a      	lsls	r2, r3, #28
 8010f38:	bf04      	itt	eq
 8010f3a:	091b      	lsreq	r3, r3, #4
 8010f3c:	3004      	addeq	r0, #4
 8010f3e:	079a      	lsls	r2, r3, #30
 8010f40:	bf04      	itt	eq
 8010f42:	089b      	lsreq	r3, r3, #2
 8010f44:	3002      	addeq	r0, #2
 8010f46:	07da      	lsls	r2, r3, #31
 8010f48:	d403      	bmi.n	8010f52 <__lo0bits+0x4e>
 8010f4a:	085b      	lsrs	r3, r3, #1
 8010f4c:	f100 0001 	add.w	r0, r0, #1
 8010f50:	d005      	beq.n	8010f5e <__lo0bits+0x5a>
 8010f52:	600b      	str	r3, [r1, #0]
 8010f54:	4770      	bx	lr
 8010f56:	4610      	mov	r0, r2
 8010f58:	e7e9      	b.n	8010f2e <__lo0bits+0x2a>
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	4770      	bx	lr
 8010f5e:	2020      	movs	r0, #32
 8010f60:	4770      	bx	lr
	...

08010f64 <__i2b>:
 8010f64:	b510      	push	{r4, lr}
 8010f66:	460c      	mov	r4, r1
 8010f68:	2101      	movs	r1, #1
 8010f6a:	f7ff ff03 	bl	8010d74 <_Balloc>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	b928      	cbnz	r0, 8010f7e <__i2b+0x1a>
 8010f72:	4b05      	ldr	r3, [pc, #20]	; (8010f88 <__i2b+0x24>)
 8010f74:	4805      	ldr	r0, [pc, #20]	; (8010f8c <__i2b+0x28>)
 8010f76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010f7a:	f000 fce1 	bl	8011940 <__assert_func>
 8010f7e:	2301      	movs	r3, #1
 8010f80:	6144      	str	r4, [r0, #20]
 8010f82:	6103      	str	r3, [r0, #16]
 8010f84:	bd10      	pop	{r4, pc}
 8010f86:	bf00      	nop
 8010f88:	0801413b 	.word	0x0801413b
 8010f8c:	0801414c 	.word	0x0801414c

08010f90 <__multiply>:
 8010f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	4691      	mov	r9, r2
 8010f96:	690a      	ldr	r2, [r1, #16]
 8010f98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	bfb8      	it	lt
 8010fa0:	460b      	movlt	r3, r1
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	bfbc      	itt	lt
 8010fa6:	464c      	movlt	r4, r9
 8010fa8:	4699      	movlt	r9, r3
 8010faa:	6927      	ldr	r7, [r4, #16]
 8010fac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010fb0:	68a3      	ldr	r3, [r4, #8]
 8010fb2:	6861      	ldr	r1, [r4, #4]
 8010fb4:	eb07 060a 	add.w	r6, r7, sl
 8010fb8:	42b3      	cmp	r3, r6
 8010fba:	b085      	sub	sp, #20
 8010fbc:	bfb8      	it	lt
 8010fbe:	3101      	addlt	r1, #1
 8010fc0:	f7ff fed8 	bl	8010d74 <_Balloc>
 8010fc4:	b930      	cbnz	r0, 8010fd4 <__multiply+0x44>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	4b44      	ldr	r3, [pc, #272]	; (80110dc <__multiply+0x14c>)
 8010fca:	4845      	ldr	r0, [pc, #276]	; (80110e0 <__multiply+0x150>)
 8010fcc:	f240 115d 	movw	r1, #349	; 0x15d
 8010fd0:	f000 fcb6 	bl	8011940 <__assert_func>
 8010fd4:	f100 0514 	add.w	r5, r0, #20
 8010fd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fdc:	462b      	mov	r3, r5
 8010fde:	2200      	movs	r2, #0
 8010fe0:	4543      	cmp	r3, r8
 8010fe2:	d321      	bcc.n	8011028 <__multiply+0x98>
 8010fe4:	f104 0314 	add.w	r3, r4, #20
 8010fe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010fec:	f109 0314 	add.w	r3, r9, #20
 8010ff0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010ff4:	9202      	str	r2, [sp, #8]
 8010ff6:	1b3a      	subs	r2, r7, r4
 8010ff8:	3a15      	subs	r2, #21
 8010ffa:	f022 0203 	bic.w	r2, r2, #3
 8010ffe:	3204      	adds	r2, #4
 8011000:	f104 0115 	add.w	r1, r4, #21
 8011004:	428f      	cmp	r7, r1
 8011006:	bf38      	it	cc
 8011008:	2204      	movcc	r2, #4
 801100a:	9201      	str	r2, [sp, #4]
 801100c:	9a02      	ldr	r2, [sp, #8]
 801100e:	9303      	str	r3, [sp, #12]
 8011010:	429a      	cmp	r2, r3
 8011012:	d80c      	bhi.n	801102e <__multiply+0x9e>
 8011014:	2e00      	cmp	r6, #0
 8011016:	dd03      	ble.n	8011020 <__multiply+0x90>
 8011018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801101c:	2b00      	cmp	r3, #0
 801101e:	d05a      	beq.n	80110d6 <__multiply+0x146>
 8011020:	6106      	str	r6, [r0, #16]
 8011022:	b005      	add	sp, #20
 8011024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011028:	f843 2b04 	str.w	r2, [r3], #4
 801102c:	e7d8      	b.n	8010fe0 <__multiply+0x50>
 801102e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011032:	f1ba 0f00 	cmp.w	sl, #0
 8011036:	d024      	beq.n	8011082 <__multiply+0xf2>
 8011038:	f104 0e14 	add.w	lr, r4, #20
 801103c:	46a9      	mov	r9, r5
 801103e:	f04f 0c00 	mov.w	ip, #0
 8011042:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011046:	f8d9 1000 	ldr.w	r1, [r9]
 801104a:	fa1f fb82 	uxth.w	fp, r2
 801104e:	b289      	uxth	r1, r1
 8011050:	fb0a 110b 	mla	r1, sl, fp, r1
 8011054:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011058:	f8d9 2000 	ldr.w	r2, [r9]
 801105c:	4461      	add	r1, ip
 801105e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011062:	fb0a c20b 	mla	r2, sl, fp, ip
 8011066:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801106a:	b289      	uxth	r1, r1
 801106c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011070:	4577      	cmp	r7, lr
 8011072:	f849 1b04 	str.w	r1, [r9], #4
 8011076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801107a:	d8e2      	bhi.n	8011042 <__multiply+0xb2>
 801107c:	9a01      	ldr	r2, [sp, #4]
 801107e:	f845 c002 	str.w	ip, [r5, r2]
 8011082:	9a03      	ldr	r2, [sp, #12]
 8011084:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011088:	3304      	adds	r3, #4
 801108a:	f1b9 0f00 	cmp.w	r9, #0
 801108e:	d020      	beq.n	80110d2 <__multiply+0x142>
 8011090:	6829      	ldr	r1, [r5, #0]
 8011092:	f104 0c14 	add.w	ip, r4, #20
 8011096:	46ae      	mov	lr, r5
 8011098:	f04f 0a00 	mov.w	sl, #0
 801109c:	f8bc b000 	ldrh.w	fp, [ip]
 80110a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80110a4:	fb09 220b 	mla	r2, r9, fp, r2
 80110a8:	4492      	add	sl, r2
 80110aa:	b289      	uxth	r1, r1
 80110ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80110b0:	f84e 1b04 	str.w	r1, [lr], #4
 80110b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80110b8:	f8be 1000 	ldrh.w	r1, [lr]
 80110bc:	0c12      	lsrs	r2, r2, #16
 80110be:	fb09 1102 	mla	r1, r9, r2, r1
 80110c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80110c6:	4567      	cmp	r7, ip
 80110c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80110cc:	d8e6      	bhi.n	801109c <__multiply+0x10c>
 80110ce:	9a01      	ldr	r2, [sp, #4]
 80110d0:	50a9      	str	r1, [r5, r2]
 80110d2:	3504      	adds	r5, #4
 80110d4:	e79a      	b.n	801100c <__multiply+0x7c>
 80110d6:	3e01      	subs	r6, #1
 80110d8:	e79c      	b.n	8011014 <__multiply+0x84>
 80110da:	bf00      	nop
 80110dc:	0801413b 	.word	0x0801413b
 80110e0:	0801414c 	.word	0x0801414c

080110e4 <__pow5mult>:
 80110e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110e8:	4615      	mov	r5, r2
 80110ea:	f012 0203 	ands.w	r2, r2, #3
 80110ee:	4606      	mov	r6, r0
 80110f0:	460f      	mov	r7, r1
 80110f2:	d007      	beq.n	8011104 <__pow5mult+0x20>
 80110f4:	4c25      	ldr	r4, [pc, #148]	; (801118c <__pow5mult+0xa8>)
 80110f6:	3a01      	subs	r2, #1
 80110f8:	2300      	movs	r3, #0
 80110fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110fe:	f7ff fe9b 	bl	8010e38 <__multadd>
 8011102:	4607      	mov	r7, r0
 8011104:	10ad      	asrs	r5, r5, #2
 8011106:	d03d      	beq.n	8011184 <__pow5mult+0xa0>
 8011108:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801110a:	b97c      	cbnz	r4, 801112c <__pow5mult+0x48>
 801110c:	2010      	movs	r0, #16
 801110e:	f7ff fe29 	bl	8010d64 <malloc>
 8011112:	4602      	mov	r2, r0
 8011114:	6270      	str	r0, [r6, #36]	; 0x24
 8011116:	b928      	cbnz	r0, 8011124 <__pow5mult+0x40>
 8011118:	4b1d      	ldr	r3, [pc, #116]	; (8011190 <__pow5mult+0xac>)
 801111a:	481e      	ldr	r0, [pc, #120]	; (8011194 <__pow5mult+0xb0>)
 801111c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011120:	f000 fc0e 	bl	8011940 <__assert_func>
 8011124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011128:	6004      	str	r4, [r0, #0]
 801112a:	60c4      	str	r4, [r0, #12]
 801112c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011134:	b94c      	cbnz	r4, 801114a <__pow5mult+0x66>
 8011136:	f240 2171 	movw	r1, #625	; 0x271
 801113a:	4630      	mov	r0, r6
 801113c:	f7ff ff12 	bl	8010f64 <__i2b>
 8011140:	2300      	movs	r3, #0
 8011142:	f8c8 0008 	str.w	r0, [r8, #8]
 8011146:	4604      	mov	r4, r0
 8011148:	6003      	str	r3, [r0, #0]
 801114a:	f04f 0900 	mov.w	r9, #0
 801114e:	07eb      	lsls	r3, r5, #31
 8011150:	d50a      	bpl.n	8011168 <__pow5mult+0x84>
 8011152:	4639      	mov	r1, r7
 8011154:	4622      	mov	r2, r4
 8011156:	4630      	mov	r0, r6
 8011158:	f7ff ff1a 	bl	8010f90 <__multiply>
 801115c:	4639      	mov	r1, r7
 801115e:	4680      	mov	r8, r0
 8011160:	4630      	mov	r0, r6
 8011162:	f7ff fe47 	bl	8010df4 <_Bfree>
 8011166:	4647      	mov	r7, r8
 8011168:	106d      	asrs	r5, r5, #1
 801116a:	d00b      	beq.n	8011184 <__pow5mult+0xa0>
 801116c:	6820      	ldr	r0, [r4, #0]
 801116e:	b938      	cbnz	r0, 8011180 <__pow5mult+0x9c>
 8011170:	4622      	mov	r2, r4
 8011172:	4621      	mov	r1, r4
 8011174:	4630      	mov	r0, r6
 8011176:	f7ff ff0b 	bl	8010f90 <__multiply>
 801117a:	6020      	str	r0, [r4, #0]
 801117c:	f8c0 9000 	str.w	r9, [r0]
 8011180:	4604      	mov	r4, r0
 8011182:	e7e4      	b.n	801114e <__pow5mult+0x6a>
 8011184:	4638      	mov	r0, r7
 8011186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801118a:	bf00      	nop
 801118c:	08014298 	.word	0x08014298
 8011190:	080140c9 	.word	0x080140c9
 8011194:	0801414c 	.word	0x0801414c

08011198 <__lshift>:
 8011198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801119c:	460c      	mov	r4, r1
 801119e:	6849      	ldr	r1, [r1, #4]
 80111a0:	6923      	ldr	r3, [r4, #16]
 80111a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111a6:	68a3      	ldr	r3, [r4, #8]
 80111a8:	4607      	mov	r7, r0
 80111aa:	4691      	mov	r9, r2
 80111ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111b0:	f108 0601 	add.w	r6, r8, #1
 80111b4:	42b3      	cmp	r3, r6
 80111b6:	db0b      	blt.n	80111d0 <__lshift+0x38>
 80111b8:	4638      	mov	r0, r7
 80111ba:	f7ff fddb 	bl	8010d74 <_Balloc>
 80111be:	4605      	mov	r5, r0
 80111c0:	b948      	cbnz	r0, 80111d6 <__lshift+0x3e>
 80111c2:	4602      	mov	r2, r0
 80111c4:	4b2a      	ldr	r3, [pc, #168]	; (8011270 <__lshift+0xd8>)
 80111c6:	482b      	ldr	r0, [pc, #172]	; (8011274 <__lshift+0xdc>)
 80111c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80111cc:	f000 fbb8 	bl	8011940 <__assert_func>
 80111d0:	3101      	adds	r1, #1
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	e7ee      	b.n	80111b4 <__lshift+0x1c>
 80111d6:	2300      	movs	r3, #0
 80111d8:	f100 0114 	add.w	r1, r0, #20
 80111dc:	f100 0210 	add.w	r2, r0, #16
 80111e0:	4618      	mov	r0, r3
 80111e2:	4553      	cmp	r3, sl
 80111e4:	db37      	blt.n	8011256 <__lshift+0xbe>
 80111e6:	6920      	ldr	r0, [r4, #16]
 80111e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111ec:	f104 0314 	add.w	r3, r4, #20
 80111f0:	f019 091f 	ands.w	r9, r9, #31
 80111f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80111fc:	d02f      	beq.n	801125e <__lshift+0xc6>
 80111fe:	f1c9 0e20 	rsb	lr, r9, #32
 8011202:	468a      	mov	sl, r1
 8011204:	f04f 0c00 	mov.w	ip, #0
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	fa02 f209 	lsl.w	r2, r2, r9
 801120e:	ea42 020c 	orr.w	r2, r2, ip
 8011212:	f84a 2b04 	str.w	r2, [sl], #4
 8011216:	f853 2b04 	ldr.w	r2, [r3], #4
 801121a:	4298      	cmp	r0, r3
 801121c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011220:	d8f2      	bhi.n	8011208 <__lshift+0x70>
 8011222:	1b03      	subs	r3, r0, r4
 8011224:	3b15      	subs	r3, #21
 8011226:	f023 0303 	bic.w	r3, r3, #3
 801122a:	3304      	adds	r3, #4
 801122c:	f104 0215 	add.w	r2, r4, #21
 8011230:	4290      	cmp	r0, r2
 8011232:	bf38      	it	cc
 8011234:	2304      	movcc	r3, #4
 8011236:	f841 c003 	str.w	ip, [r1, r3]
 801123a:	f1bc 0f00 	cmp.w	ip, #0
 801123e:	d001      	beq.n	8011244 <__lshift+0xac>
 8011240:	f108 0602 	add.w	r6, r8, #2
 8011244:	3e01      	subs	r6, #1
 8011246:	4638      	mov	r0, r7
 8011248:	612e      	str	r6, [r5, #16]
 801124a:	4621      	mov	r1, r4
 801124c:	f7ff fdd2 	bl	8010df4 <_Bfree>
 8011250:	4628      	mov	r0, r5
 8011252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011256:	f842 0f04 	str.w	r0, [r2, #4]!
 801125a:	3301      	adds	r3, #1
 801125c:	e7c1      	b.n	80111e2 <__lshift+0x4a>
 801125e:	3904      	subs	r1, #4
 8011260:	f853 2b04 	ldr.w	r2, [r3], #4
 8011264:	f841 2f04 	str.w	r2, [r1, #4]!
 8011268:	4298      	cmp	r0, r3
 801126a:	d8f9      	bhi.n	8011260 <__lshift+0xc8>
 801126c:	e7ea      	b.n	8011244 <__lshift+0xac>
 801126e:	bf00      	nop
 8011270:	0801413b 	.word	0x0801413b
 8011274:	0801414c 	.word	0x0801414c

08011278 <__mcmp>:
 8011278:	b530      	push	{r4, r5, lr}
 801127a:	6902      	ldr	r2, [r0, #16]
 801127c:	690c      	ldr	r4, [r1, #16]
 801127e:	1b12      	subs	r2, r2, r4
 8011280:	d10e      	bne.n	80112a0 <__mcmp+0x28>
 8011282:	f100 0314 	add.w	r3, r0, #20
 8011286:	3114      	adds	r1, #20
 8011288:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801128c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011290:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011294:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011298:	42a5      	cmp	r5, r4
 801129a:	d003      	beq.n	80112a4 <__mcmp+0x2c>
 801129c:	d305      	bcc.n	80112aa <__mcmp+0x32>
 801129e:	2201      	movs	r2, #1
 80112a0:	4610      	mov	r0, r2
 80112a2:	bd30      	pop	{r4, r5, pc}
 80112a4:	4283      	cmp	r3, r0
 80112a6:	d3f3      	bcc.n	8011290 <__mcmp+0x18>
 80112a8:	e7fa      	b.n	80112a0 <__mcmp+0x28>
 80112aa:	f04f 32ff 	mov.w	r2, #4294967295
 80112ae:	e7f7      	b.n	80112a0 <__mcmp+0x28>

080112b0 <__mdiff>:
 80112b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b4:	460c      	mov	r4, r1
 80112b6:	4606      	mov	r6, r0
 80112b8:	4611      	mov	r1, r2
 80112ba:	4620      	mov	r0, r4
 80112bc:	4690      	mov	r8, r2
 80112be:	f7ff ffdb 	bl	8011278 <__mcmp>
 80112c2:	1e05      	subs	r5, r0, #0
 80112c4:	d110      	bne.n	80112e8 <__mdiff+0x38>
 80112c6:	4629      	mov	r1, r5
 80112c8:	4630      	mov	r0, r6
 80112ca:	f7ff fd53 	bl	8010d74 <_Balloc>
 80112ce:	b930      	cbnz	r0, 80112de <__mdiff+0x2e>
 80112d0:	4b3a      	ldr	r3, [pc, #232]	; (80113bc <__mdiff+0x10c>)
 80112d2:	4602      	mov	r2, r0
 80112d4:	f240 2132 	movw	r1, #562	; 0x232
 80112d8:	4839      	ldr	r0, [pc, #228]	; (80113c0 <__mdiff+0x110>)
 80112da:	f000 fb31 	bl	8011940 <__assert_func>
 80112de:	2301      	movs	r3, #1
 80112e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e8:	bfa4      	itt	ge
 80112ea:	4643      	movge	r3, r8
 80112ec:	46a0      	movge	r8, r4
 80112ee:	4630      	mov	r0, r6
 80112f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80112f4:	bfa6      	itte	ge
 80112f6:	461c      	movge	r4, r3
 80112f8:	2500      	movge	r5, #0
 80112fa:	2501      	movlt	r5, #1
 80112fc:	f7ff fd3a 	bl	8010d74 <_Balloc>
 8011300:	b920      	cbnz	r0, 801130c <__mdiff+0x5c>
 8011302:	4b2e      	ldr	r3, [pc, #184]	; (80113bc <__mdiff+0x10c>)
 8011304:	4602      	mov	r2, r0
 8011306:	f44f 7110 	mov.w	r1, #576	; 0x240
 801130a:	e7e5      	b.n	80112d8 <__mdiff+0x28>
 801130c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011310:	6926      	ldr	r6, [r4, #16]
 8011312:	60c5      	str	r5, [r0, #12]
 8011314:	f104 0914 	add.w	r9, r4, #20
 8011318:	f108 0514 	add.w	r5, r8, #20
 801131c:	f100 0e14 	add.w	lr, r0, #20
 8011320:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011324:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011328:	f108 0210 	add.w	r2, r8, #16
 801132c:	46f2      	mov	sl, lr
 801132e:	2100      	movs	r1, #0
 8011330:	f859 3b04 	ldr.w	r3, [r9], #4
 8011334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011338:	fa1f f883 	uxth.w	r8, r3
 801133c:	fa11 f18b 	uxtah	r1, r1, fp
 8011340:	0c1b      	lsrs	r3, r3, #16
 8011342:	eba1 0808 	sub.w	r8, r1, r8
 8011346:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801134a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801134e:	fa1f f888 	uxth.w	r8, r8
 8011352:	1419      	asrs	r1, r3, #16
 8011354:	454e      	cmp	r6, r9
 8011356:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801135a:	f84a 3b04 	str.w	r3, [sl], #4
 801135e:	d8e7      	bhi.n	8011330 <__mdiff+0x80>
 8011360:	1b33      	subs	r3, r6, r4
 8011362:	3b15      	subs	r3, #21
 8011364:	f023 0303 	bic.w	r3, r3, #3
 8011368:	3304      	adds	r3, #4
 801136a:	3415      	adds	r4, #21
 801136c:	42a6      	cmp	r6, r4
 801136e:	bf38      	it	cc
 8011370:	2304      	movcc	r3, #4
 8011372:	441d      	add	r5, r3
 8011374:	4473      	add	r3, lr
 8011376:	469e      	mov	lr, r3
 8011378:	462e      	mov	r6, r5
 801137a:	4566      	cmp	r6, ip
 801137c:	d30e      	bcc.n	801139c <__mdiff+0xec>
 801137e:	f10c 0203 	add.w	r2, ip, #3
 8011382:	1b52      	subs	r2, r2, r5
 8011384:	f022 0203 	bic.w	r2, r2, #3
 8011388:	3d03      	subs	r5, #3
 801138a:	45ac      	cmp	ip, r5
 801138c:	bf38      	it	cc
 801138e:	2200      	movcc	r2, #0
 8011390:	441a      	add	r2, r3
 8011392:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011396:	b17b      	cbz	r3, 80113b8 <__mdiff+0x108>
 8011398:	6107      	str	r7, [r0, #16]
 801139a:	e7a3      	b.n	80112e4 <__mdiff+0x34>
 801139c:	f856 8b04 	ldr.w	r8, [r6], #4
 80113a0:	fa11 f288 	uxtah	r2, r1, r8
 80113a4:	1414      	asrs	r4, r2, #16
 80113a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80113aa:	b292      	uxth	r2, r2
 80113ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80113b0:	f84e 2b04 	str.w	r2, [lr], #4
 80113b4:	1421      	asrs	r1, r4, #16
 80113b6:	e7e0      	b.n	801137a <__mdiff+0xca>
 80113b8:	3f01      	subs	r7, #1
 80113ba:	e7ea      	b.n	8011392 <__mdiff+0xe2>
 80113bc:	0801413b 	.word	0x0801413b
 80113c0:	0801414c 	.word	0x0801414c

080113c4 <__d2b>:
 80113c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80113c8:	4689      	mov	r9, r1
 80113ca:	2101      	movs	r1, #1
 80113cc:	ec57 6b10 	vmov	r6, r7, d0
 80113d0:	4690      	mov	r8, r2
 80113d2:	f7ff fccf 	bl	8010d74 <_Balloc>
 80113d6:	4604      	mov	r4, r0
 80113d8:	b930      	cbnz	r0, 80113e8 <__d2b+0x24>
 80113da:	4602      	mov	r2, r0
 80113dc:	4b25      	ldr	r3, [pc, #148]	; (8011474 <__d2b+0xb0>)
 80113de:	4826      	ldr	r0, [pc, #152]	; (8011478 <__d2b+0xb4>)
 80113e0:	f240 310a 	movw	r1, #778	; 0x30a
 80113e4:	f000 faac 	bl	8011940 <__assert_func>
 80113e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80113ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80113f0:	bb35      	cbnz	r5, 8011440 <__d2b+0x7c>
 80113f2:	2e00      	cmp	r6, #0
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	d028      	beq.n	801144a <__d2b+0x86>
 80113f8:	4668      	mov	r0, sp
 80113fa:	9600      	str	r6, [sp, #0]
 80113fc:	f7ff fd82 	bl	8010f04 <__lo0bits>
 8011400:	9900      	ldr	r1, [sp, #0]
 8011402:	b300      	cbz	r0, 8011446 <__d2b+0x82>
 8011404:	9a01      	ldr	r2, [sp, #4]
 8011406:	f1c0 0320 	rsb	r3, r0, #32
 801140a:	fa02 f303 	lsl.w	r3, r2, r3
 801140e:	430b      	orrs	r3, r1
 8011410:	40c2      	lsrs	r2, r0
 8011412:	6163      	str	r3, [r4, #20]
 8011414:	9201      	str	r2, [sp, #4]
 8011416:	9b01      	ldr	r3, [sp, #4]
 8011418:	61a3      	str	r3, [r4, #24]
 801141a:	2b00      	cmp	r3, #0
 801141c:	bf14      	ite	ne
 801141e:	2202      	movne	r2, #2
 8011420:	2201      	moveq	r2, #1
 8011422:	6122      	str	r2, [r4, #16]
 8011424:	b1d5      	cbz	r5, 801145c <__d2b+0x98>
 8011426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801142a:	4405      	add	r5, r0
 801142c:	f8c9 5000 	str.w	r5, [r9]
 8011430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011434:	f8c8 0000 	str.w	r0, [r8]
 8011438:	4620      	mov	r0, r4
 801143a:	b003      	add	sp, #12
 801143c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011444:	e7d5      	b.n	80113f2 <__d2b+0x2e>
 8011446:	6161      	str	r1, [r4, #20]
 8011448:	e7e5      	b.n	8011416 <__d2b+0x52>
 801144a:	a801      	add	r0, sp, #4
 801144c:	f7ff fd5a 	bl	8010f04 <__lo0bits>
 8011450:	9b01      	ldr	r3, [sp, #4]
 8011452:	6163      	str	r3, [r4, #20]
 8011454:	2201      	movs	r2, #1
 8011456:	6122      	str	r2, [r4, #16]
 8011458:	3020      	adds	r0, #32
 801145a:	e7e3      	b.n	8011424 <__d2b+0x60>
 801145c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011464:	f8c9 0000 	str.w	r0, [r9]
 8011468:	6918      	ldr	r0, [r3, #16]
 801146a:	f7ff fd2b 	bl	8010ec4 <__hi0bits>
 801146e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011472:	e7df      	b.n	8011434 <__d2b+0x70>
 8011474:	0801413b 	.word	0x0801413b
 8011478:	0801414c 	.word	0x0801414c

0801147c <_calloc_r>:
 801147c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801147e:	fba1 2402 	umull	r2, r4, r1, r2
 8011482:	b94c      	cbnz	r4, 8011498 <_calloc_r+0x1c>
 8011484:	4611      	mov	r1, r2
 8011486:	9201      	str	r2, [sp, #4]
 8011488:	f000 f87a 	bl	8011580 <_malloc_r>
 801148c:	9a01      	ldr	r2, [sp, #4]
 801148e:	4605      	mov	r5, r0
 8011490:	b930      	cbnz	r0, 80114a0 <_calloc_r+0x24>
 8011492:	4628      	mov	r0, r5
 8011494:	b003      	add	sp, #12
 8011496:	bd30      	pop	{r4, r5, pc}
 8011498:	220c      	movs	r2, #12
 801149a:	6002      	str	r2, [r0, #0]
 801149c:	2500      	movs	r5, #0
 801149e:	e7f8      	b.n	8011492 <_calloc_r+0x16>
 80114a0:	4621      	mov	r1, r4
 80114a2:	f7fe f92b 	bl	800f6fc <memset>
 80114a6:	e7f4      	b.n	8011492 <_calloc_r+0x16>

080114a8 <_free_r>:
 80114a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114aa:	2900      	cmp	r1, #0
 80114ac:	d044      	beq.n	8011538 <_free_r+0x90>
 80114ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114b2:	9001      	str	r0, [sp, #4]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f1a1 0404 	sub.w	r4, r1, #4
 80114ba:	bfb8      	it	lt
 80114bc:	18e4      	addlt	r4, r4, r3
 80114be:	f000 fa9b 	bl	80119f8 <__malloc_lock>
 80114c2:	4a1e      	ldr	r2, [pc, #120]	; (801153c <_free_r+0x94>)
 80114c4:	9801      	ldr	r0, [sp, #4]
 80114c6:	6813      	ldr	r3, [r2, #0]
 80114c8:	b933      	cbnz	r3, 80114d8 <_free_r+0x30>
 80114ca:	6063      	str	r3, [r4, #4]
 80114cc:	6014      	str	r4, [r2, #0]
 80114ce:	b003      	add	sp, #12
 80114d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114d4:	f000 ba96 	b.w	8011a04 <__malloc_unlock>
 80114d8:	42a3      	cmp	r3, r4
 80114da:	d908      	bls.n	80114ee <_free_r+0x46>
 80114dc:	6825      	ldr	r5, [r4, #0]
 80114de:	1961      	adds	r1, r4, r5
 80114e0:	428b      	cmp	r3, r1
 80114e2:	bf01      	itttt	eq
 80114e4:	6819      	ldreq	r1, [r3, #0]
 80114e6:	685b      	ldreq	r3, [r3, #4]
 80114e8:	1949      	addeq	r1, r1, r5
 80114ea:	6021      	streq	r1, [r4, #0]
 80114ec:	e7ed      	b.n	80114ca <_free_r+0x22>
 80114ee:	461a      	mov	r2, r3
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	b10b      	cbz	r3, 80114f8 <_free_r+0x50>
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	d9fa      	bls.n	80114ee <_free_r+0x46>
 80114f8:	6811      	ldr	r1, [r2, #0]
 80114fa:	1855      	adds	r5, r2, r1
 80114fc:	42a5      	cmp	r5, r4
 80114fe:	d10b      	bne.n	8011518 <_free_r+0x70>
 8011500:	6824      	ldr	r4, [r4, #0]
 8011502:	4421      	add	r1, r4
 8011504:	1854      	adds	r4, r2, r1
 8011506:	42a3      	cmp	r3, r4
 8011508:	6011      	str	r1, [r2, #0]
 801150a:	d1e0      	bne.n	80114ce <_free_r+0x26>
 801150c:	681c      	ldr	r4, [r3, #0]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	6053      	str	r3, [r2, #4]
 8011512:	4421      	add	r1, r4
 8011514:	6011      	str	r1, [r2, #0]
 8011516:	e7da      	b.n	80114ce <_free_r+0x26>
 8011518:	d902      	bls.n	8011520 <_free_r+0x78>
 801151a:	230c      	movs	r3, #12
 801151c:	6003      	str	r3, [r0, #0]
 801151e:	e7d6      	b.n	80114ce <_free_r+0x26>
 8011520:	6825      	ldr	r5, [r4, #0]
 8011522:	1961      	adds	r1, r4, r5
 8011524:	428b      	cmp	r3, r1
 8011526:	bf04      	itt	eq
 8011528:	6819      	ldreq	r1, [r3, #0]
 801152a:	685b      	ldreq	r3, [r3, #4]
 801152c:	6063      	str	r3, [r4, #4]
 801152e:	bf04      	itt	eq
 8011530:	1949      	addeq	r1, r1, r5
 8011532:	6021      	streq	r1, [r4, #0]
 8011534:	6054      	str	r4, [r2, #4]
 8011536:	e7ca      	b.n	80114ce <_free_r+0x26>
 8011538:	b003      	add	sp, #12
 801153a:	bd30      	pop	{r4, r5, pc}
 801153c:	2000633c 	.word	0x2000633c

08011540 <sbrk_aligned>:
 8011540:	b570      	push	{r4, r5, r6, lr}
 8011542:	4e0e      	ldr	r6, [pc, #56]	; (801157c <sbrk_aligned+0x3c>)
 8011544:	460c      	mov	r4, r1
 8011546:	6831      	ldr	r1, [r6, #0]
 8011548:	4605      	mov	r5, r0
 801154a:	b911      	cbnz	r1, 8011552 <sbrk_aligned+0x12>
 801154c:	f000 f9e8 	bl	8011920 <_sbrk_r>
 8011550:	6030      	str	r0, [r6, #0]
 8011552:	4621      	mov	r1, r4
 8011554:	4628      	mov	r0, r5
 8011556:	f000 f9e3 	bl	8011920 <_sbrk_r>
 801155a:	1c43      	adds	r3, r0, #1
 801155c:	d00a      	beq.n	8011574 <sbrk_aligned+0x34>
 801155e:	1cc4      	adds	r4, r0, #3
 8011560:	f024 0403 	bic.w	r4, r4, #3
 8011564:	42a0      	cmp	r0, r4
 8011566:	d007      	beq.n	8011578 <sbrk_aligned+0x38>
 8011568:	1a21      	subs	r1, r4, r0
 801156a:	4628      	mov	r0, r5
 801156c:	f000 f9d8 	bl	8011920 <_sbrk_r>
 8011570:	3001      	adds	r0, #1
 8011572:	d101      	bne.n	8011578 <sbrk_aligned+0x38>
 8011574:	f04f 34ff 	mov.w	r4, #4294967295
 8011578:	4620      	mov	r0, r4
 801157a:	bd70      	pop	{r4, r5, r6, pc}
 801157c:	20006340 	.word	0x20006340

08011580 <_malloc_r>:
 8011580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011584:	1ccd      	adds	r5, r1, #3
 8011586:	f025 0503 	bic.w	r5, r5, #3
 801158a:	3508      	adds	r5, #8
 801158c:	2d0c      	cmp	r5, #12
 801158e:	bf38      	it	cc
 8011590:	250c      	movcc	r5, #12
 8011592:	2d00      	cmp	r5, #0
 8011594:	4607      	mov	r7, r0
 8011596:	db01      	blt.n	801159c <_malloc_r+0x1c>
 8011598:	42a9      	cmp	r1, r5
 801159a:	d905      	bls.n	80115a8 <_malloc_r+0x28>
 801159c:	230c      	movs	r3, #12
 801159e:	603b      	str	r3, [r7, #0]
 80115a0:	2600      	movs	r6, #0
 80115a2:	4630      	mov	r0, r6
 80115a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a8:	4e2e      	ldr	r6, [pc, #184]	; (8011664 <_malloc_r+0xe4>)
 80115aa:	f000 fa25 	bl	80119f8 <__malloc_lock>
 80115ae:	6833      	ldr	r3, [r6, #0]
 80115b0:	461c      	mov	r4, r3
 80115b2:	bb34      	cbnz	r4, 8011602 <_malloc_r+0x82>
 80115b4:	4629      	mov	r1, r5
 80115b6:	4638      	mov	r0, r7
 80115b8:	f7ff ffc2 	bl	8011540 <sbrk_aligned>
 80115bc:	1c43      	adds	r3, r0, #1
 80115be:	4604      	mov	r4, r0
 80115c0:	d14d      	bne.n	801165e <_malloc_r+0xde>
 80115c2:	6834      	ldr	r4, [r6, #0]
 80115c4:	4626      	mov	r6, r4
 80115c6:	2e00      	cmp	r6, #0
 80115c8:	d140      	bne.n	801164c <_malloc_r+0xcc>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	4631      	mov	r1, r6
 80115ce:	4638      	mov	r0, r7
 80115d0:	eb04 0803 	add.w	r8, r4, r3
 80115d4:	f000 f9a4 	bl	8011920 <_sbrk_r>
 80115d8:	4580      	cmp	r8, r0
 80115da:	d13a      	bne.n	8011652 <_malloc_r+0xd2>
 80115dc:	6821      	ldr	r1, [r4, #0]
 80115de:	3503      	adds	r5, #3
 80115e0:	1a6d      	subs	r5, r5, r1
 80115e2:	f025 0503 	bic.w	r5, r5, #3
 80115e6:	3508      	adds	r5, #8
 80115e8:	2d0c      	cmp	r5, #12
 80115ea:	bf38      	it	cc
 80115ec:	250c      	movcc	r5, #12
 80115ee:	4629      	mov	r1, r5
 80115f0:	4638      	mov	r0, r7
 80115f2:	f7ff ffa5 	bl	8011540 <sbrk_aligned>
 80115f6:	3001      	adds	r0, #1
 80115f8:	d02b      	beq.n	8011652 <_malloc_r+0xd2>
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	442b      	add	r3, r5
 80115fe:	6023      	str	r3, [r4, #0]
 8011600:	e00e      	b.n	8011620 <_malloc_r+0xa0>
 8011602:	6822      	ldr	r2, [r4, #0]
 8011604:	1b52      	subs	r2, r2, r5
 8011606:	d41e      	bmi.n	8011646 <_malloc_r+0xc6>
 8011608:	2a0b      	cmp	r2, #11
 801160a:	d916      	bls.n	801163a <_malloc_r+0xba>
 801160c:	1961      	adds	r1, r4, r5
 801160e:	42a3      	cmp	r3, r4
 8011610:	6025      	str	r5, [r4, #0]
 8011612:	bf18      	it	ne
 8011614:	6059      	strne	r1, [r3, #4]
 8011616:	6863      	ldr	r3, [r4, #4]
 8011618:	bf08      	it	eq
 801161a:	6031      	streq	r1, [r6, #0]
 801161c:	5162      	str	r2, [r4, r5]
 801161e:	604b      	str	r3, [r1, #4]
 8011620:	4638      	mov	r0, r7
 8011622:	f104 060b 	add.w	r6, r4, #11
 8011626:	f000 f9ed 	bl	8011a04 <__malloc_unlock>
 801162a:	f026 0607 	bic.w	r6, r6, #7
 801162e:	1d23      	adds	r3, r4, #4
 8011630:	1af2      	subs	r2, r6, r3
 8011632:	d0b6      	beq.n	80115a2 <_malloc_r+0x22>
 8011634:	1b9b      	subs	r3, r3, r6
 8011636:	50a3      	str	r3, [r4, r2]
 8011638:	e7b3      	b.n	80115a2 <_malloc_r+0x22>
 801163a:	6862      	ldr	r2, [r4, #4]
 801163c:	42a3      	cmp	r3, r4
 801163e:	bf0c      	ite	eq
 8011640:	6032      	streq	r2, [r6, #0]
 8011642:	605a      	strne	r2, [r3, #4]
 8011644:	e7ec      	b.n	8011620 <_malloc_r+0xa0>
 8011646:	4623      	mov	r3, r4
 8011648:	6864      	ldr	r4, [r4, #4]
 801164a:	e7b2      	b.n	80115b2 <_malloc_r+0x32>
 801164c:	4634      	mov	r4, r6
 801164e:	6876      	ldr	r6, [r6, #4]
 8011650:	e7b9      	b.n	80115c6 <_malloc_r+0x46>
 8011652:	230c      	movs	r3, #12
 8011654:	603b      	str	r3, [r7, #0]
 8011656:	4638      	mov	r0, r7
 8011658:	f000 f9d4 	bl	8011a04 <__malloc_unlock>
 801165c:	e7a1      	b.n	80115a2 <_malloc_r+0x22>
 801165e:	6025      	str	r5, [r4, #0]
 8011660:	e7de      	b.n	8011620 <_malloc_r+0xa0>
 8011662:	bf00      	nop
 8011664:	2000633c 	.word	0x2000633c

08011668 <__ssputs_r>:
 8011668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	688e      	ldr	r6, [r1, #8]
 801166e:	429e      	cmp	r6, r3
 8011670:	4682      	mov	sl, r0
 8011672:	460c      	mov	r4, r1
 8011674:	4690      	mov	r8, r2
 8011676:	461f      	mov	r7, r3
 8011678:	d838      	bhi.n	80116ec <__ssputs_r+0x84>
 801167a:	898a      	ldrh	r2, [r1, #12]
 801167c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011680:	d032      	beq.n	80116e8 <__ssputs_r+0x80>
 8011682:	6825      	ldr	r5, [r4, #0]
 8011684:	6909      	ldr	r1, [r1, #16]
 8011686:	eba5 0901 	sub.w	r9, r5, r1
 801168a:	6965      	ldr	r5, [r4, #20]
 801168c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011694:	3301      	adds	r3, #1
 8011696:	444b      	add	r3, r9
 8011698:	106d      	asrs	r5, r5, #1
 801169a:	429d      	cmp	r5, r3
 801169c:	bf38      	it	cc
 801169e:	461d      	movcc	r5, r3
 80116a0:	0553      	lsls	r3, r2, #21
 80116a2:	d531      	bpl.n	8011708 <__ssputs_r+0xa0>
 80116a4:	4629      	mov	r1, r5
 80116a6:	f7ff ff6b 	bl	8011580 <_malloc_r>
 80116aa:	4606      	mov	r6, r0
 80116ac:	b950      	cbnz	r0, 80116c4 <__ssputs_r+0x5c>
 80116ae:	230c      	movs	r3, #12
 80116b0:	f8ca 3000 	str.w	r3, [sl]
 80116b4:	89a3      	ldrh	r3, [r4, #12]
 80116b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116ba:	81a3      	strh	r3, [r4, #12]
 80116bc:	f04f 30ff 	mov.w	r0, #4294967295
 80116c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116c4:	6921      	ldr	r1, [r4, #16]
 80116c6:	464a      	mov	r2, r9
 80116c8:	f7fe f80a 	bl	800f6e0 <memcpy>
 80116cc:	89a3      	ldrh	r3, [r4, #12]
 80116ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80116d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116d6:	81a3      	strh	r3, [r4, #12]
 80116d8:	6126      	str	r6, [r4, #16]
 80116da:	6165      	str	r5, [r4, #20]
 80116dc:	444e      	add	r6, r9
 80116de:	eba5 0509 	sub.w	r5, r5, r9
 80116e2:	6026      	str	r6, [r4, #0]
 80116e4:	60a5      	str	r5, [r4, #8]
 80116e6:	463e      	mov	r6, r7
 80116e8:	42be      	cmp	r6, r7
 80116ea:	d900      	bls.n	80116ee <__ssputs_r+0x86>
 80116ec:	463e      	mov	r6, r7
 80116ee:	6820      	ldr	r0, [r4, #0]
 80116f0:	4632      	mov	r2, r6
 80116f2:	4641      	mov	r1, r8
 80116f4:	f000 f966 	bl	80119c4 <memmove>
 80116f8:	68a3      	ldr	r3, [r4, #8]
 80116fa:	1b9b      	subs	r3, r3, r6
 80116fc:	60a3      	str	r3, [r4, #8]
 80116fe:	6823      	ldr	r3, [r4, #0]
 8011700:	4433      	add	r3, r6
 8011702:	6023      	str	r3, [r4, #0]
 8011704:	2000      	movs	r0, #0
 8011706:	e7db      	b.n	80116c0 <__ssputs_r+0x58>
 8011708:	462a      	mov	r2, r5
 801170a:	f000 f981 	bl	8011a10 <_realloc_r>
 801170e:	4606      	mov	r6, r0
 8011710:	2800      	cmp	r0, #0
 8011712:	d1e1      	bne.n	80116d8 <__ssputs_r+0x70>
 8011714:	6921      	ldr	r1, [r4, #16]
 8011716:	4650      	mov	r0, sl
 8011718:	f7ff fec6 	bl	80114a8 <_free_r>
 801171c:	e7c7      	b.n	80116ae <__ssputs_r+0x46>
	...

08011720 <_svfiprintf_r>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	4698      	mov	r8, r3
 8011726:	898b      	ldrh	r3, [r1, #12]
 8011728:	061b      	lsls	r3, r3, #24
 801172a:	b09d      	sub	sp, #116	; 0x74
 801172c:	4607      	mov	r7, r0
 801172e:	460d      	mov	r5, r1
 8011730:	4614      	mov	r4, r2
 8011732:	d50e      	bpl.n	8011752 <_svfiprintf_r+0x32>
 8011734:	690b      	ldr	r3, [r1, #16]
 8011736:	b963      	cbnz	r3, 8011752 <_svfiprintf_r+0x32>
 8011738:	2140      	movs	r1, #64	; 0x40
 801173a:	f7ff ff21 	bl	8011580 <_malloc_r>
 801173e:	6028      	str	r0, [r5, #0]
 8011740:	6128      	str	r0, [r5, #16]
 8011742:	b920      	cbnz	r0, 801174e <_svfiprintf_r+0x2e>
 8011744:	230c      	movs	r3, #12
 8011746:	603b      	str	r3, [r7, #0]
 8011748:	f04f 30ff 	mov.w	r0, #4294967295
 801174c:	e0d1      	b.n	80118f2 <_svfiprintf_r+0x1d2>
 801174e:	2340      	movs	r3, #64	; 0x40
 8011750:	616b      	str	r3, [r5, #20]
 8011752:	2300      	movs	r3, #0
 8011754:	9309      	str	r3, [sp, #36]	; 0x24
 8011756:	2320      	movs	r3, #32
 8011758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801175c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011760:	2330      	movs	r3, #48	; 0x30
 8011762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801190c <_svfiprintf_r+0x1ec>
 8011766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801176a:	f04f 0901 	mov.w	r9, #1
 801176e:	4623      	mov	r3, r4
 8011770:	469a      	mov	sl, r3
 8011772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011776:	b10a      	cbz	r2, 801177c <_svfiprintf_r+0x5c>
 8011778:	2a25      	cmp	r2, #37	; 0x25
 801177a:	d1f9      	bne.n	8011770 <_svfiprintf_r+0x50>
 801177c:	ebba 0b04 	subs.w	fp, sl, r4
 8011780:	d00b      	beq.n	801179a <_svfiprintf_r+0x7a>
 8011782:	465b      	mov	r3, fp
 8011784:	4622      	mov	r2, r4
 8011786:	4629      	mov	r1, r5
 8011788:	4638      	mov	r0, r7
 801178a:	f7ff ff6d 	bl	8011668 <__ssputs_r>
 801178e:	3001      	adds	r0, #1
 8011790:	f000 80aa 	beq.w	80118e8 <_svfiprintf_r+0x1c8>
 8011794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011796:	445a      	add	r2, fp
 8011798:	9209      	str	r2, [sp, #36]	; 0x24
 801179a:	f89a 3000 	ldrb.w	r3, [sl]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 80a2 	beq.w	80118e8 <_svfiprintf_r+0x1c8>
 80117a4:	2300      	movs	r3, #0
 80117a6:	f04f 32ff 	mov.w	r2, #4294967295
 80117aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117ae:	f10a 0a01 	add.w	sl, sl, #1
 80117b2:	9304      	str	r3, [sp, #16]
 80117b4:	9307      	str	r3, [sp, #28]
 80117b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117ba:	931a      	str	r3, [sp, #104]	; 0x68
 80117bc:	4654      	mov	r4, sl
 80117be:	2205      	movs	r2, #5
 80117c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c4:	4851      	ldr	r0, [pc, #324]	; (801190c <_svfiprintf_r+0x1ec>)
 80117c6:	f7ee fd23 	bl	8000210 <memchr>
 80117ca:	9a04      	ldr	r2, [sp, #16]
 80117cc:	b9d8      	cbnz	r0, 8011806 <_svfiprintf_r+0xe6>
 80117ce:	06d0      	lsls	r0, r2, #27
 80117d0:	bf44      	itt	mi
 80117d2:	2320      	movmi	r3, #32
 80117d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117d8:	0711      	lsls	r1, r2, #28
 80117da:	bf44      	itt	mi
 80117dc:	232b      	movmi	r3, #43	; 0x2b
 80117de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117e2:	f89a 3000 	ldrb.w	r3, [sl]
 80117e6:	2b2a      	cmp	r3, #42	; 0x2a
 80117e8:	d015      	beq.n	8011816 <_svfiprintf_r+0xf6>
 80117ea:	9a07      	ldr	r2, [sp, #28]
 80117ec:	4654      	mov	r4, sl
 80117ee:	2000      	movs	r0, #0
 80117f0:	f04f 0c0a 	mov.w	ip, #10
 80117f4:	4621      	mov	r1, r4
 80117f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117fa:	3b30      	subs	r3, #48	; 0x30
 80117fc:	2b09      	cmp	r3, #9
 80117fe:	d94e      	bls.n	801189e <_svfiprintf_r+0x17e>
 8011800:	b1b0      	cbz	r0, 8011830 <_svfiprintf_r+0x110>
 8011802:	9207      	str	r2, [sp, #28]
 8011804:	e014      	b.n	8011830 <_svfiprintf_r+0x110>
 8011806:	eba0 0308 	sub.w	r3, r0, r8
 801180a:	fa09 f303 	lsl.w	r3, r9, r3
 801180e:	4313      	orrs	r3, r2
 8011810:	9304      	str	r3, [sp, #16]
 8011812:	46a2      	mov	sl, r4
 8011814:	e7d2      	b.n	80117bc <_svfiprintf_r+0x9c>
 8011816:	9b03      	ldr	r3, [sp, #12]
 8011818:	1d19      	adds	r1, r3, #4
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	9103      	str	r1, [sp, #12]
 801181e:	2b00      	cmp	r3, #0
 8011820:	bfbb      	ittet	lt
 8011822:	425b      	neglt	r3, r3
 8011824:	f042 0202 	orrlt.w	r2, r2, #2
 8011828:	9307      	strge	r3, [sp, #28]
 801182a:	9307      	strlt	r3, [sp, #28]
 801182c:	bfb8      	it	lt
 801182e:	9204      	strlt	r2, [sp, #16]
 8011830:	7823      	ldrb	r3, [r4, #0]
 8011832:	2b2e      	cmp	r3, #46	; 0x2e
 8011834:	d10c      	bne.n	8011850 <_svfiprintf_r+0x130>
 8011836:	7863      	ldrb	r3, [r4, #1]
 8011838:	2b2a      	cmp	r3, #42	; 0x2a
 801183a:	d135      	bne.n	80118a8 <_svfiprintf_r+0x188>
 801183c:	9b03      	ldr	r3, [sp, #12]
 801183e:	1d1a      	adds	r2, r3, #4
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	9203      	str	r2, [sp, #12]
 8011844:	2b00      	cmp	r3, #0
 8011846:	bfb8      	it	lt
 8011848:	f04f 33ff 	movlt.w	r3, #4294967295
 801184c:	3402      	adds	r4, #2
 801184e:	9305      	str	r3, [sp, #20]
 8011850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801191c <_svfiprintf_r+0x1fc>
 8011854:	7821      	ldrb	r1, [r4, #0]
 8011856:	2203      	movs	r2, #3
 8011858:	4650      	mov	r0, sl
 801185a:	f7ee fcd9 	bl	8000210 <memchr>
 801185e:	b140      	cbz	r0, 8011872 <_svfiprintf_r+0x152>
 8011860:	2340      	movs	r3, #64	; 0x40
 8011862:	eba0 000a 	sub.w	r0, r0, sl
 8011866:	fa03 f000 	lsl.w	r0, r3, r0
 801186a:	9b04      	ldr	r3, [sp, #16]
 801186c:	4303      	orrs	r3, r0
 801186e:	3401      	adds	r4, #1
 8011870:	9304      	str	r3, [sp, #16]
 8011872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011876:	4826      	ldr	r0, [pc, #152]	; (8011910 <_svfiprintf_r+0x1f0>)
 8011878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801187c:	2206      	movs	r2, #6
 801187e:	f7ee fcc7 	bl	8000210 <memchr>
 8011882:	2800      	cmp	r0, #0
 8011884:	d038      	beq.n	80118f8 <_svfiprintf_r+0x1d8>
 8011886:	4b23      	ldr	r3, [pc, #140]	; (8011914 <_svfiprintf_r+0x1f4>)
 8011888:	bb1b      	cbnz	r3, 80118d2 <_svfiprintf_r+0x1b2>
 801188a:	9b03      	ldr	r3, [sp, #12]
 801188c:	3307      	adds	r3, #7
 801188e:	f023 0307 	bic.w	r3, r3, #7
 8011892:	3308      	adds	r3, #8
 8011894:	9303      	str	r3, [sp, #12]
 8011896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011898:	4433      	add	r3, r6
 801189a:	9309      	str	r3, [sp, #36]	; 0x24
 801189c:	e767      	b.n	801176e <_svfiprintf_r+0x4e>
 801189e:	fb0c 3202 	mla	r2, ip, r2, r3
 80118a2:	460c      	mov	r4, r1
 80118a4:	2001      	movs	r0, #1
 80118a6:	e7a5      	b.n	80117f4 <_svfiprintf_r+0xd4>
 80118a8:	2300      	movs	r3, #0
 80118aa:	3401      	adds	r4, #1
 80118ac:	9305      	str	r3, [sp, #20]
 80118ae:	4619      	mov	r1, r3
 80118b0:	f04f 0c0a 	mov.w	ip, #10
 80118b4:	4620      	mov	r0, r4
 80118b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118ba:	3a30      	subs	r2, #48	; 0x30
 80118bc:	2a09      	cmp	r2, #9
 80118be:	d903      	bls.n	80118c8 <_svfiprintf_r+0x1a8>
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d0c5      	beq.n	8011850 <_svfiprintf_r+0x130>
 80118c4:	9105      	str	r1, [sp, #20]
 80118c6:	e7c3      	b.n	8011850 <_svfiprintf_r+0x130>
 80118c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80118cc:	4604      	mov	r4, r0
 80118ce:	2301      	movs	r3, #1
 80118d0:	e7f0      	b.n	80118b4 <_svfiprintf_r+0x194>
 80118d2:	ab03      	add	r3, sp, #12
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	462a      	mov	r2, r5
 80118d8:	4b0f      	ldr	r3, [pc, #60]	; (8011918 <_svfiprintf_r+0x1f8>)
 80118da:	a904      	add	r1, sp, #16
 80118dc:	4638      	mov	r0, r7
 80118de:	f7fd ffb5 	bl	800f84c <_printf_float>
 80118e2:	1c42      	adds	r2, r0, #1
 80118e4:	4606      	mov	r6, r0
 80118e6:	d1d6      	bne.n	8011896 <_svfiprintf_r+0x176>
 80118e8:	89ab      	ldrh	r3, [r5, #12]
 80118ea:	065b      	lsls	r3, r3, #25
 80118ec:	f53f af2c 	bmi.w	8011748 <_svfiprintf_r+0x28>
 80118f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118f2:	b01d      	add	sp, #116	; 0x74
 80118f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f8:	ab03      	add	r3, sp, #12
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	462a      	mov	r2, r5
 80118fe:	4b06      	ldr	r3, [pc, #24]	; (8011918 <_svfiprintf_r+0x1f8>)
 8011900:	a904      	add	r1, sp, #16
 8011902:	4638      	mov	r0, r7
 8011904:	f7fe fa46 	bl	800fd94 <_printf_i>
 8011908:	e7eb      	b.n	80118e2 <_svfiprintf_r+0x1c2>
 801190a:	bf00      	nop
 801190c:	080142a4 	.word	0x080142a4
 8011910:	080142ae 	.word	0x080142ae
 8011914:	0800f84d 	.word	0x0800f84d
 8011918:	08011669 	.word	0x08011669
 801191c:	080142aa 	.word	0x080142aa

08011920 <_sbrk_r>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	4d06      	ldr	r5, [pc, #24]	; (801193c <_sbrk_r+0x1c>)
 8011924:	2300      	movs	r3, #0
 8011926:	4604      	mov	r4, r0
 8011928:	4608      	mov	r0, r1
 801192a:	602b      	str	r3, [r5, #0]
 801192c:	f7f4 fdb4 	bl	8006498 <_sbrk>
 8011930:	1c43      	adds	r3, r0, #1
 8011932:	d102      	bne.n	801193a <_sbrk_r+0x1a>
 8011934:	682b      	ldr	r3, [r5, #0]
 8011936:	b103      	cbz	r3, 801193a <_sbrk_r+0x1a>
 8011938:	6023      	str	r3, [r4, #0]
 801193a:	bd38      	pop	{r3, r4, r5, pc}
 801193c:	20006344 	.word	0x20006344

08011940 <__assert_func>:
 8011940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011942:	4614      	mov	r4, r2
 8011944:	461a      	mov	r2, r3
 8011946:	4b09      	ldr	r3, [pc, #36]	; (801196c <__assert_func+0x2c>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4605      	mov	r5, r0
 801194c:	68d8      	ldr	r0, [r3, #12]
 801194e:	b14c      	cbz	r4, 8011964 <__assert_func+0x24>
 8011950:	4b07      	ldr	r3, [pc, #28]	; (8011970 <__assert_func+0x30>)
 8011952:	9100      	str	r1, [sp, #0]
 8011954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011958:	4906      	ldr	r1, [pc, #24]	; (8011974 <__assert_func+0x34>)
 801195a:	462b      	mov	r3, r5
 801195c:	f000 f80e 	bl	801197c <fiprintf>
 8011960:	f000 faac 	bl	8011ebc <abort>
 8011964:	4b04      	ldr	r3, [pc, #16]	; (8011978 <__assert_func+0x38>)
 8011966:	461c      	mov	r4, r3
 8011968:	e7f3      	b.n	8011952 <__assert_func+0x12>
 801196a:	bf00      	nop
 801196c:	20000020 	.word	0x20000020
 8011970:	080142b5 	.word	0x080142b5
 8011974:	080142c2 	.word	0x080142c2
 8011978:	080142f0 	.word	0x080142f0

0801197c <fiprintf>:
 801197c:	b40e      	push	{r1, r2, r3}
 801197e:	b503      	push	{r0, r1, lr}
 8011980:	4601      	mov	r1, r0
 8011982:	ab03      	add	r3, sp, #12
 8011984:	4805      	ldr	r0, [pc, #20]	; (801199c <fiprintf+0x20>)
 8011986:	f853 2b04 	ldr.w	r2, [r3], #4
 801198a:	6800      	ldr	r0, [r0, #0]
 801198c:	9301      	str	r3, [sp, #4]
 801198e:	f000 f897 	bl	8011ac0 <_vfiprintf_r>
 8011992:	b002      	add	sp, #8
 8011994:	f85d eb04 	ldr.w	lr, [sp], #4
 8011998:	b003      	add	sp, #12
 801199a:	4770      	bx	lr
 801199c:	20000020 	.word	0x20000020

080119a0 <__ascii_mbtowc>:
 80119a0:	b082      	sub	sp, #8
 80119a2:	b901      	cbnz	r1, 80119a6 <__ascii_mbtowc+0x6>
 80119a4:	a901      	add	r1, sp, #4
 80119a6:	b142      	cbz	r2, 80119ba <__ascii_mbtowc+0x1a>
 80119a8:	b14b      	cbz	r3, 80119be <__ascii_mbtowc+0x1e>
 80119aa:	7813      	ldrb	r3, [r2, #0]
 80119ac:	600b      	str	r3, [r1, #0]
 80119ae:	7812      	ldrb	r2, [r2, #0]
 80119b0:	1e10      	subs	r0, r2, #0
 80119b2:	bf18      	it	ne
 80119b4:	2001      	movne	r0, #1
 80119b6:	b002      	add	sp, #8
 80119b8:	4770      	bx	lr
 80119ba:	4610      	mov	r0, r2
 80119bc:	e7fb      	b.n	80119b6 <__ascii_mbtowc+0x16>
 80119be:	f06f 0001 	mvn.w	r0, #1
 80119c2:	e7f8      	b.n	80119b6 <__ascii_mbtowc+0x16>

080119c4 <memmove>:
 80119c4:	4288      	cmp	r0, r1
 80119c6:	b510      	push	{r4, lr}
 80119c8:	eb01 0402 	add.w	r4, r1, r2
 80119cc:	d902      	bls.n	80119d4 <memmove+0x10>
 80119ce:	4284      	cmp	r4, r0
 80119d0:	4623      	mov	r3, r4
 80119d2:	d807      	bhi.n	80119e4 <memmove+0x20>
 80119d4:	1e43      	subs	r3, r0, #1
 80119d6:	42a1      	cmp	r1, r4
 80119d8:	d008      	beq.n	80119ec <memmove+0x28>
 80119da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119e2:	e7f8      	b.n	80119d6 <memmove+0x12>
 80119e4:	4402      	add	r2, r0
 80119e6:	4601      	mov	r1, r0
 80119e8:	428a      	cmp	r2, r1
 80119ea:	d100      	bne.n	80119ee <memmove+0x2a>
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119f6:	e7f7      	b.n	80119e8 <memmove+0x24>

080119f8 <__malloc_lock>:
 80119f8:	4801      	ldr	r0, [pc, #4]	; (8011a00 <__malloc_lock+0x8>)
 80119fa:	f000 bc1f 	b.w	801223c <__retarget_lock_acquire_recursive>
 80119fe:	bf00      	nop
 8011a00:	20006348 	.word	0x20006348

08011a04 <__malloc_unlock>:
 8011a04:	4801      	ldr	r0, [pc, #4]	; (8011a0c <__malloc_unlock+0x8>)
 8011a06:	f000 bc1a 	b.w	801223e <__retarget_lock_release_recursive>
 8011a0a:	bf00      	nop
 8011a0c:	20006348 	.word	0x20006348

08011a10 <_realloc_r>:
 8011a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a14:	4680      	mov	r8, r0
 8011a16:	4614      	mov	r4, r2
 8011a18:	460e      	mov	r6, r1
 8011a1a:	b921      	cbnz	r1, 8011a26 <_realloc_r+0x16>
 8011a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a20:	4611      	mov	r1, r2
 8011a22:	f7ff bdad 	b.w	8011580 <_malloc_r>
 8011a26:	b92a      	cbnz	r2, 8011a34 <_realloc_r+0x24>
 8011a28:	f7ff fd3e 	bl	80114a8 <_free_r>
 8011a2c:	4625      	mov	r5, r4
 8011a2e:	4628      	mov	r0, r5
 8011a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a34:	f000 fc6a 	bl	801230c <_malloc_usable_size_r>
 8011a38:	4284      	cmp	r4, r0
 8011a3a:	4607      	mov	r7, r0
 8011a3c:	d802      	bhi.n	8011a44 <_realloc_r+0x34>
 8011a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a42:	d812      	bhi.n	8011a6a <_realloc_r+0x5a>
 8011a44:	4621      	mov	r1, r4
 8011a46:	4640      	mov	r0, r8
 8011a48:	f7ff fd9a 	bl	8011580 <_malloc_r>
 8011a4c:	4605      	mov	r5, r0
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d0ed      	beq.n	8011a2e <_realloc_r+0x1e>
 8011a52:	42bc      	cmp	r4, r7
 8011a54:	4622      	mov	r2, r4
 8011a56:	4631      	mov	r1, r6
 8011a58:	bf28      	it	cs
 8011a5a:	463a      	movcs	r2, r7
 8011a5c:	f7fd fe40 	bl	800f6e0 <memcpy>
 8011a60:	4631      	mov	r1, r6
 8011a62:	4640      	mov	r0, r8
 8011a64:	f7ff fd20 	bl	80114a8 <_free_r>
 8011a68:	e7e1      	b.n	8011a2e <_realloc_r+0x1e>
 8011a6a:	4635      	mov	r5, r6
 8011a6c:	e7df      	b.n	8011a2e <_realloc_r+0x1e>

08011a6e <__sfputc_r>:
 8011a6e:	6893      	ldr	r3, [r2, #8]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	b410      	push	{r4}
 8011a76:	6093      	str	r3, [r2, #8]
 8011a78:	da08      	bge.n	8011a8c <__sfputc_r+0x1e>
 8011a7a:	6994      	ldr	r4, [r2, #24]
 8011a7c:	42a3      	cmp	r3, r4
 8011a7e:	db01      	blt.n	8011a84 <__sfputc_r+0x16>
 8011a80:	290a      	cmp	r1, #10
 8011a82:	d103      	bne.n	8011a8c <__sfputc_r+0x1e>
 8011a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a88:	f000 b94a 	b.w	8011d20 <__swbuf_r>
 8011a8c:	6813      	ldr	r3, [r2, #0]
 8011a8e:	1c58      	adds	r0, r3, #1
 8011a90:	6010      	str	r0, [r2, #0]
 8011a92:	7019      	strb	r1, [r3, #0]
 8011a94:	4608      	mov	r0, r1
 8011a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <__sfputs_r>:
 8011a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	460f      	mov	r7, r1
 8011aa2:	4614      	mov	r4, r2
 8011aa4:	18d5      	adds	r5, r2, r3
 8011aa6:	42ac      	cmp	r4, r5
 8011aa8:	d101      	bne.n	8011aae <__sfputs_r+0x12>
 8011aaa:	2000      	movs	r0, #0
 8011aac:	e007      	b.n	8011abe <__sfputs_r+0x22>
 8011aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ab2:	463a      	mov	r2, r7
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f7ff ffda 	bl	8011a6e <__sfputc_r>
 8011aba:	1c43      	adds	r3, r0, #1
 8011abc:	d1f3      	bne.n	8011aa6 <__sfputs_r+0xa>
 8011abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ac0 <_vfiprintf_r>:
 8011ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac4:	460d      	mov	r5, r1
 8011ac6:	b09d      	sub	sp, #116	; 0x74
 8011ac8:	4614      	mov	r4, r2
 8011aca:	4698      	mov	r8, r3
 8011acc:	4606      	mov	r6, r0
 8011ace:	b118      	cbz	r0, 8011ad8 <_vfiprintf_r+0x18>
 8011ad0:	6983      	ldr	r3, [r0, #24]
 8011ad2:	b90b      	cbnz	r3, 8011ad8 <_vfiprintf_r+0x18>
 8011ad4:	f000 fb14 	bl	8012100 <__sinit>
 8011ad8:	4b89      	ldr	r3, [pc, #548]	; (8011d00 <_vfiprintf_r+0x240>)
 8011ada:	429d      	cmp	r5, r3
 8011adc:	d11b      	bne.n	8011b16 <_vfiprintf_r+0x56>
 8011ade:	6875      	ldr	r5, [r6, #4]
 8011ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ae2:	07d9      	lsls	r1, r3, #31
 8011ae4:	d405      	bmi.n	8011af2 <_vfiprintf_r+0x32>
 8011ae6:	89ab      	ldrh	r3, [r5, #12]
 8011ae8:	059a      	lsls	r2, r3, #22
 8011aea:	d402      	bmi.n	8011af2 <_vfiprintf_r+0x32>
 8011aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011aee:	f000 fba5 	bl	801223c <__retarget_lock_acquire_recursive>
 8011af2:	89ab      	ldrh	r3, [r5, #12]
 8011af4:	071b      	lsls	r3, r3, #28
 8011af6:	d501      	bpl.n	8011afc <_vfiprintf_r+0x3c>
 8011af8:	692b      	ldr	r3, [r5, #16]
 8011afa:	b9eb      	cbnz	r3, 8011b38 <_vfiprintf_r+0x78>
 8011afc:	4629      	mov	r1, r5
 8011afe:	4630      	mov	r0, r6
 8011b00:	f000 f96e 	bl	8011de0 <__swsetup_r>
 8011b04:	b1c0      	cbz	r0, 8011b38 <_vfiprintf_r+0x78>
 8011b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b08:	07dc      	lsls	r4, r3, #31
 8011b0a:	d50e      	bpl.n	8011b2a <_vfiprintf_r+0x6a>
 8011b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b10:	b01d      	add	sp, #116	; 0x74
 8011b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b16:	4b7b      	ldr	r3, [pc, #492]	; (8011d04 <_vfiprintf_r+0x244>)
 8011b18:	429d      	cmp	r5, r3
 8011b1a:	d101      	bne.n	8011b20 <_vfiprintf_r+0x60>
 8011b1c:	68b5      	ldr	r5, [r6, #8]
 8011b1e:	e7df      	b.n	8011ae0 <_vfiprintf_r+0x20>
 8011b20:	4b79      	ldr	r3, [pc, #484]	; (8011d08 <_vfiprintf_r+0x248>)
 8011b22:	429d      	cmp	r5, r3
 8011b24:	bf08      	it	eq
 8011b26:	68f5      	ldreq	r5, [r6, #12]
 8011b28:	e7da      	b.n	8011ae0 <_vfiprintf_r+0x20>
 8011b2a:	89ab      	ldrh	r3, [r5, #12]
 8011b2c:	0598      	lsls	r0, r3, #22
 8011b2e:	d4ed      	bmi.n	8011b0c <_vfiprintf_r+0x4c>
 8011b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b32:	f000 fb84 	bl	801223e <__retarget_lock_release_recursive>
 8011b36:	e7e9      	b.n	8011b0c <_vfiprintf_r+0x4c>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b3c:	2320      	movs	r3, #32
 8011b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b42:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b46:	2330      	movs	r3, #48	; 0x30
 8011b48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011d0c <_vfiprintf_r+0x24c>
 8011b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b50:	f04f 0901 	mov.w	r9, #1
 8011b54:	4623      	mov	r3, r4
 8011b56:	469a      	mov	sl, r3
 8011b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b5c:	b10a      	cbz	r2, 8011b62 <_vfiprintf_r+0xa2>
 8011b5e:	2a25      	cmp	r2, #37	; 0x25
 8011b60:	d1f9      	bne.n	8011b56 <_vfiprintf_r+0x96>
 8011b62:	ebba 0b04 	subs.w	fp, sl, r4
 8011b66:	d00b      	beq.n	8011b80 <_vfiprintf_r+0xc0>
 8011b68:	465b      	mov	r3, fp
 8011b6a:	4622      	mov	r2, r4
 8011b6c:	4629      	mov	r1, r5
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f7ff ff94 	bl	8011a9c <__sfputs_r>
 8011b74:	3001      	adds	r0, #1
 8011b76:	f000 80aa 	beq.w	8011cce <_vfiprintf_r+0x20e>
 8011b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b7c:	445a      	add	r2, fp
 8011b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8011b80:	f89a 3000 	ldrb.w	r3, [sl]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	f000 80a2 	beq.w	8011cce <_vfiprintf_r+0x20e>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b94:	f10a 0a01 	add.w	sl, sl, #1
 8011b98:	9304      	str	r3, [sp, #16]
 8011b9a:	9307      	str	r3, [sp, #28]
 8011b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8011ba2:	4654      	mov	r4, sl
 8011ba4:	2205      	movs	r2, #5
 8011ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011baa:	4858      	ldr	r0, [pc, #352]	; (8011d0c <_vfiprintf_r+0x24c>)
 8011bac:	f7ee fb30 	bl	8000210 <memchr>
 8011bb0:	9a04      	ldr	r2, [sp, #16]
 8011bb2:	b9d8      	cbnz	r0, 8011bec <_vfiprintf_r+0x12c>
 8011bb4:	06d1      	lsls	r1, r2, #27
 8011bb6:	bf44      	itt	mi
 8011bb8:	2320      	movmi	r3, #32
 8011bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bbe:	0713      	lsls	r3, r2, #28
 8011bc0:	bf44      	itt	mi
 8011bc2:	232b      	movmi	r3, #43	; 0x2b
 8011bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8011bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8011bce:	d015      	beq.n	8011bfc <_vfiprintf_r+0x13c>
 8011bd0:	9a07      	ldr	r2, [sp, #28]
 8011bd2:	4654      	mov	r4, sl
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	f04f 0c0a 	mov.w	ip, #10
 8011bda:	4621      	mov	r1, r4
 8011bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011be0:	3b30      	subs	r3, #48	; 0x30
 8011be2:	2b09      	cmp	r3, #9
 8011be4:	d94e      	bls.n	8011c84 <_vfiprintf_r+0x1c4>
 8011be6:	b1b0      	cbz	r0, 8011c16 <_vfiprintf_r+0x156>
 8011be8:	9207      	str	r2, [sp, #28]
 8011bea:	e014      	b.n	8011c16 <_vfiprintf_r+0x156>
 8011bec:	eba0 0308 	sub.w	r3, r0, r8
 8011bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	9304      	str	r3, [sp, #16]
 8011bf8:	46a2      	mov	sl, r4
 8011bfa:	e7d2      	b.n	8011ba2 <_vfiprintf_r+0xe2>
 8011bfc:	9b03      	ldr	r3, [sp, #12]
 8011bfe:	1d19      	adds	r1, r3, #4
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	9103      	str	r1, [sp, #12]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	bfbb      	ittet	lt
 8011c08:	425b      	neglt	r3, r3
 8011c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8011c0e:	9307      	strge	r3, [sp, #28]
 8011c10:	9307      	strlt	r3, [sp, #28]
 8011c12:	bfb8      	it	lt
 8011c14:	9204      	strlt	r2, [sp, #16]
 8011c16:	7823      	ldrb	r3, [r4, #0]
 8011c18:	2b2e      	cmp	r3, #46	; 0x2e
 8011c1a:	d10c      	bne.n	8011c36 <_vfiprintf_r+0x176>
 8011c1c:	7863      	ldrb	r3, [r4, #1]
 8011c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8011c20:	d135      	bne.n	8011c8e <_vfiprintf_r+0x1ce>
 8011c22:	9b03      	ldr	r3, [sp, #12]
 8011c24:	1d1a      	adds	r2, r3, #4
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	9203      	str	r2, [sp, #12]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	bfb8      	it	lt
 8011c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c32:	3402      	adds	r4, #2
 8011c34:	9305      	str	r3, [sp, #20]
 8011c36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011d1c <_vfiprintf_r+0x25c>
 8011c3a:	7821      	ldrb	r1, [r4, #0]
 8011c3c:	2203      	movs	r2, #3
 8011c3e:	4650      	mov	r0, sl
 8011c40:	f7ee fae6 	bl	8000210 <memchr>
 8011c44:	b140      	cbz	r0, 8011c58 <_vfiprintf_r+0x198>
 8011c46:	2340      	movs	r3, #64	; 0x40
 8011c48:	eba0 000a 	sub.w	r0, r0, sl
 8011c4c:	fa03 f000 	lsl.w	r0, r3, r0
 8011c50:	9b04      	ldr	r3, [sp, #16]
 8011c52:	4303      	orrs	r3, r0
 8011c54:	3401      	adds	r4, #1
 8011c56:	9304      	str	r3, [sp, #16]
 8011c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c5c:	482c      	ldr	r0, [pc, #176]	; (8011d10 <_vfiprintf_r+0x250>)
 8011c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c62:	2206      	movs	r2, #6
 8011c64:	f7ee fad4 	bl	8000210 <memchr>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d03f      	beq.n	8011cec <_vfiprintf_r+0x22c>
 8011c6c:	4b29      	ldr	r3, [pc, #164]	; (8011d14 <_vfiprintf_r+0x254>)
 8011c6e:	bb1b      	cbnz	r3, 8011cb8 <_vfiprintf_r+0x1f8>
 8011c70:	9b03      	ldr	r3, [sp, #12]
 8011c72:	3307      	adds	r3, #7
 8011c74:	f023 0307 	bic.w	r3, r3, #7
 8011c78:	3308      	adds	r3, #8
 8011c7a:	9303      	str	r3, [sp, #12]
 8011c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c7e:	443b      	add	r3, r7
 8011c80:	9309      	str	r3, [sp, #36]	; 0x24
 8011c82:	e767      	b.n	8011b54 <_vfiprintf_r+0x94>
 8011c84:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c88:	460c      	mov	r4, r1
 8011c8a:	2001      	movs	r0, #1
 8011c8c:	e7a5      	b.n	8011bda <_vfiprintf_r+0x11a>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	3401      	adds	r4, #1
 8011c92:	9305      	str	r3, [sp, #20]
 8011c94:	4619      	mov	r1, r3
 8011c96:	f04f 0c0a 	mov.w	ip, #10
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ca0:	3a30      	subs	r2, #48	; 0x30
 8011ca2:	2a09      	cmp	r2, #9
 8011ca4:	d903      	bls.n	8011cae <_vfiprintf_r+0x1ee>
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d0c5      	beq.n	8011c36 <_vfiprintf_r+0x176>
 8011caa:	9105      	str	r1, [sp, #20]
 8011cac:	e7c3      	b.n	8011c36 <_vfiprintf_r+0x176>
 8011cae:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e7f0      	b.n	8011c9a <_vfiprintf_r+0x1da>
 8011cb8:	ab03      	add	r3, sp, #12
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	462a      	mov	r2, r5
 8011cbe:	4b16      	ldr	r3, [pc, #88]	; (8011d18 <_vfiprintf_r+0x258>)
 8011cc0:	a904      	add	r1, sp, #16
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	f7fd fdc2 	bl	800f84c <_printf_float>
 8011cc8:	4607      	mov	r7, r0
 8011cca:	1c78      	adds	r0, r7, #1
 8011ccc:	d1d6      	bne.n	8011c7c <_vfiprintf_r+0x1bc>
 8011cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cd0:	07d9      	lsls	r1, r3, #31
 8011cd2:	d405      	bmi.n	8011ce0 <_vfiprintf_r+0x220>
 8011cd4:	89ab      	ldrh	r3, [r5, #12]
 8011cd6:	059a      	lsls	r2, r3, #22
 8011cd8:	d402      	bmi.n	8011ce0 <_vfiprintf_r+0x220>
 8011cda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cdc:	f000 faaf 	bl	801223e <__retarget_lock_release_recursive>
 8011ce0:	89ab      	ldrh	r3, [r5, #12]
 8011ce2:	065b      	lsls	r3, r3, #25
 8011ce4:	f53f af12 	bmi.w	8011b0c <_vfiprintf_r+0x4c>
 8011ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cea:	e711      	b.n	8011b10 <_vfiprintf_r+0x50>
 8011cec:	ab03      	add	r3, sp, #12
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	462a      	mov	r2, r5
 8011cf2:	4b09      	ldr	r3, [pc, #36]	; (8011d18 <_vfiprintf_r+0x258>)
 8011cf4:	a904      	add	r1, sp, #16
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f7fe f84c 	bl	800fd94 <_printf_i>
 8011cfc:	e7e4      	b.n	8011cc8 <_vfiprintf_r+0x208>
 8011cfe:	bf00      	nop
 8011d00:	0801441c 	.word	0x0801441c
 8011d04:	0801443c 	.word	0x0801443c
 8011d08:	080143fc 	.word	0x080143fc
 8011d0c:	080142a4 	.word	0x080142a4
 8011d10:	080142ae 	.word	0x080142ae
 8011d14:	0800f84d 	.word	0x0800f84d
 8011d18:	08011a9d 	.word	0x08011a9d
 8011d1c:	080142aa 	.word	0x080142aa

08011d20 <__swbuf_r>:
 8011d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d22:	460e      	mov	r6, r1
 8011d24:	4614      	mov	r4, r2
 8011d26:	4605      	mov	r5, r0
 8011d28:	b118      	cbz	r0, 8011d32 <__swbuf_r+0x12>
 8011d2a:	6983      	ldr	r3, [r0, #24]
 8011d2c:	b90b      	cbnz	r3, 8011d32 <__swbuf_r+0x12>
 8011d2e:	f000 f9e7 	bl	8012100 <__sinit>
 8011d32:	4b21      	ldr	r3, [pc, #132]	; (8011db8 <__swbuf_r+0x98>)
 8011d34:	429c      	cmp	r4, r3
 8011d36:	d12b      	bne.n	8011d90 <__swbuf_r+0x70>
 8011d38:	686c      	ldr	r4, [r5, #4]
 8011d3a:	69a3      	ldr	r3, [r4, #24]
 8011d3c:	60a3      	str	r3, [r4, #8]
 8011d3e:	89a3      	ldrh	r3, [r4, #12]
 8011d40:	071a      	lsls	r2, r3, #28
 8011d42:	d52f      	bpl.n	8011da4 <__swbuf_r+0x84>
 8011d44:	6923      	ldr	r3, [r4, #16]
 8011d46:	b36b      	cbz	r3, 8011da4 <__swbuf_r+0x84>
 8011d48:	6923      	ldr	r3, [r4, #16]
 8011d4a:	6820      	ldr	r0, [r4, #0]
 8011d4c:	1ac0      	subs	r0, r0, r3
 8011d4e:	6963      	ldr	r3, [r4, #20]
 8011d50:	b2f6      	uxtb	r6, r6
 8011d52:	4283      	cmp	r3, r0
 8011d54:	4637      	mov	r7, r6
 8011d56:	dc04      	bgt.n	8011d62 <__swbuf_r+0x42>
 8011d58:	4621      	mov	r1, r4
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f000 f93c 	bl	8011fd8 <_fflush_r>
 8011d60:	bb30      	cbnz	r0, 8011db0 <__swbuf_r+0x90>
 8011d62:	68a3      	ldr	r3, [r4, #8]
 8011d64:	3b01      	subs	r3, #1
 8011d66:	60a3      	str	r3, [r4, #8]
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	1c5a      	adds	r2, r3, #1
 8011d6c:	6022      	str	r2, [r4, #0]
 8011d6e:	701e      	strb	r6, [r3, #0]
 8011d70:	6963      	ldr	r3, [r4, #20]
 8011d72:	3001      	adds	r0, #1
 8011d74:	4283      	cmp	r3, r0
 8011d76:	d004      	beq.n	8011d82 <__swbuf_r+0x62>
 8011d78:	89a3      	ldrh	r3, [r4, #12]
 8011d7a:	07db      	lsls	r3, r3, #31
 8011d7c:	d506      	bpl.n	8011d8c <__swbuf_r+0x6c>
 8011d7e:	2e0a      	cmp	r6, #10
 8011d80:	d104      	bne.n	8011d8c <__swbuf_r+0x6c>
 8011d82:	4621      	mov	r1, r4
 8011d84:	4628      	mov	r0, r5
 8011d86:	f000 f927 	bl	8011fd8 <_fflush_r>
 8011d8a:	b988      	cbnz	r0, 8011db0 <__swbuf_r+0x90>
 8011d8c:	4638      	mov	r0, r7
 8011d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d90:	4b0a      	ldr	r3, [pc, #40]	; (8011dbc <__swbuf_r+0x9c>)
 8011d92:	429c      	cmp	r4, r3
 8011d94:	d101      	bne.n	8011d9a <__swbuf_r+0x7a>
 8011d96:	68ac      	ldr	r4, [r5, #8]
 8011d98:	e7cf      	b.n	8011d3a <__swbuf_r+0x1a>
 8011d9a:	4b09      	ldr	r3, [pc, #36]	; (8011dc0 <__swbuf_r+0xa0>)
 8011d9c:	429c      	cmp	r4, r3
 8011d9e:	bf08      	it	eq
 8011da0:	68ec      	ldreq	r4, [r5, #12]
 8011da2:	e7ca      	b.n	8011d3a <__swbuf_r+0x1a>
 8011da4:	4621      	mov	r1, r4
 8011da6:	4628      	mov	r0, r5
 8011da8:	f000 f81a 	bl	8011de0 <__swsetup_r>
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d0cb      	beq.n	8011d48 <__swbuf_r+0x28>
 8011db0:	f04f 37ff 	mov.w	r7, #4294967295
 8011db4:	e7ea      	b.n	8011d8c <__swbuf_r+0x6c>
 8011db6:	bf00      	nop
 8011db8:	0801441c 	.word	0x0801441c
 8011dbc:	0801443c 	.word	0x0801443c
 8011dc0:	080143fc 	.word	0x080143fc

08011dc4 <__ascii_wctomb>:
 8011dc4:	b149      	cbz	r1, 8011dda <__ascii_wctomb+0x16>
 8011dc6:	2aff      	cmp	r2, #255	; 0xff
 8011dc8:	bf85      	ittet	hi
 8011dca:	238a      	movhi	r3, #138	; 0x8a
 8011dcc:	6003      	strhi	r3, [r0, #0]
 8011dce:	700a      	strbls	r2, [r1, #0]
 8011dd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8011dd4:	bf98      	it	ls
 8011dd6:	2001      	movls	r0, #1
 8011dd8:	4770      	bx	lr
 8011dda:	4608      	mov	r0, r1
 8011ddc:	4770      	bx	lr
	...

08011de0 <__swsetup_r>:
 8011de0:	4b32      	ldr	r3, [pc, #200]	; (8011eac <__swsetup_r+0xcc>)
 8011de2:	b570      	push	{r4, r5, r6, lr}
 8011de4:	681d      	ldr	r5, [r3, #0]
 8011de6:	4606      	mov	r6, r0
 8011de8:	460c      	mov	r4, r1
 8011dea:	b125      	cbz	r5, 8011df6 <__swsetup_r+0x16>
 8011dec:	69ab      	ldr	r3, [r5, #24]
 8011dee:	b913      	cbnz	r3, 8011df6 <__swsetup_r+0x16>
 8011df0:	4628      	mov	r0, r5
 8011df2:	f000 f985 	bl	8012100 <__sinit>
 8011df6:	4b2e      	ldr	r3, [pc, #184]	; (8011eb0 <__swsetup_r+0xd0>)
 8011df8:	429c      	cmp	r4, r3
 8011dfa:	d10f      	bne.n	8011e1c <__swsetup_r+0x3c>
 8011dfc:	686c      	ldr	r4, [r5, #4]
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e04:	0719      	lsls	r1, r3, #28
 8011e06:	d42c      	bmi.n	8011e62 <__swsetup_r+0x82>
 8011e08:	06dd      	lsls	r5, r3, #27
 8011e0a:	d411      	bmi.n	8011e30 <__swsetup_r+0x50>
 8011e0c:	2309      	movs	r3, #9
 8011e0e:	6033      	str	r3, [r6, #0]
 8011e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011e14:	81a3      	strh	r3, [r4, #12]
 8011e16:	f04f 30ff 	mov.w	r0, #4294967295
 8011e1a:	e03e      	b.n	8011e9a <__swsetup_r+0xba>
 8011e1c:	4b25      	ldr	r3, [pc, #148]	; (8011eb4 <__swsetup_r+0xd4>)
 8011e1e:	429c      	cmp	r4, r3
 8011e20:	d101      	bne.n	8011e26 <__swsetup_r+0x46>
 8011e22:	68ac      	ldr	r4, [r5, #8]
 8011e24:	e7eb      	b.n	8011dfe <__swsetup_r+0x1e>
 8011e26:	4b24      	ldr	r3, [pc, #144]	; (8011eb8 <__swsetup_r+0xd8>)
 8011e28:	429c      	cmp	r4, r3
 8011e2a:	bf08      	it	eq
 8011e2c:	68ec      	ldreq	r4, [r5, #12]
 8011e2e:	e7e6      	b.n	8011dfe <__swsetup_r+0x1e>
 8011e30:	0758      	lsls	r0, r3, #29
 8011e32:	d512      	bpl.n	8011e5a <__swsetup_r+0x7a>
 8011e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e36:	b141      	cbz	r1, 8011e4a <__swsetup_r+0x6a>
 8011e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e3c:	4299      	cmp	r1, r3
 8011e3e:	d002      	beq.n	8011e46 <__swsetup_r+0x66>
 8011e40:	4630      	mov	r0, r6
 8011e42:	f7ff fb31 	bl	80114a8 <_free_r>
 8011e46:	2300      	movs	r3, #0
 8011e48:	6363      	str	r3, [r4, #52]	; 0x34
 8011e4a:	89a3      	ldrh	r3, [r4, #12]
 8011e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e50:	81a3      	strh	r3, [r4, #12]
 8011e52:	2300      	movs	r3, #0
 8011e54:	6063      	str	r3, [r4, #4]
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	6023      	str	r3, [r4, #0]
 8011e5a:	89a3      	ldrh	r3, [r4, #12]
 8011e5c:	f043 0308 	orr.w	r3, r3, #8
 8011e60:	81a3      	strh	r3, [r4, #12]
 8011e62:	6923      	ldr	r3, [r4, #16]
 8011e64:	b94b      	cbnz	r3, 8011e7a <__swsetup_r+0x9a>
 8011e66:	89a3      	ldrh	r3, [r4, #12]
 8011e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e70:	d003      	beq.n	8011e7a <__swsetup_r+0x9a>
 8011e72:	4621      	mov	r1, r4
 8011e74:	4630      	mov	r0, r6
 8011e76:	f000 fa09 	bl	801228c <__smakebuf_r>
 8011e7a:	89a0      	ldrh	r0, [r4, #12]
 8011e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e80:	f010 0301 	ands.w	r3, r0, #1
 8011e84:	d00a      	beq.n	8011e9c <__swsetup_r+0xbc>
 8011e86:	2300      	movs	r3, #0
 8011e88:	60a3      	str	r3, [r4, #8]
 8011e8a:	6963      	ldr	r3, [r4, #20]
 8011e8c:	425b      	negs	r3, r3
 8011e8e:	61a3      	str	r3, [r4, #24]
 8011e90:	6923      	ldr	r3, [r4, #16]
 8011e92:	b943      	cbnz	r3, 8011ea6 <__swsetup_r+0xc6>
 8011e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e98:	d1ba      	bne.n	8011e10 <__swsetup_r+0x30>
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	0781      	lsls	r1, r0, #30
 8011e9e:	bf58      	it	pl
 8011ea0:	6963      	ldrpl	r3, [r4, #20]
 8011ea2:	60a3      	str	r3, [r4, #8]
 8011ea4:	e7f4      	b.n	8011e90 <__swsetup_r+0xb0>
 8011ea6:	2000      	movs	r0, #0
 8011ea8:	e7f7      	b.n	8011e9a <__swsetup_r+0xba>
 8011eaa:	bf00      	nop
 8011eac:	20000020 	.word	0x20000020
 8011eb0:	0801441c 	.word	0x0801441c
 8011eb4:	0801443c 	.word	0x0801443c
 8011eb8:	080143fc 	.word	0x080143fc

08011ebc <abort>:
 8011ebc:	b508      	push	{r3, lr}
 8011ebe:	2006      	movs	r0, #6
 8011ec0:	f000 fa54 	bl	801236c <raise>
 8011ec4:	2001      	movs	r0, #1
 8011ec6:	f7f4 fa6f 	bl	80063a8 <_exit>
	...

08011ecc <__sflush_r>:
 8011ecc:	898a      	ldrh	r2, [r1, #12]
 8011ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed2:	4605      	mov	r5, r0
 8011ed4:	0710      	lsls	r0, r2, #28
 8011ed6:	460c      	mov	r4, r1
 8011ed8:	d458      	bmi.n	8011f8c <__sflush_r+0xc0>
 8011eda:	684b      	ldr	r3, [r1, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	dc05      	bgt.n	8011eec <__sflush_r+0x20>
 8011ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	dc02      	bgt.n	8011eec <__sflush_r+0x20>
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eee:	2e00      	cmp	r6, #0
 8011ef0:	d0f9      	beq.n	8011ee6 <__sflush_r+0x1a>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ef8:	682f      	ldr	r7, [r5, #0]
 8011efa:	602b      	str	r3, [r5, #0]
 8011efc:	d032      	beq.n	8011f64 <__sflush_r+0x98>
 8011efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f00:	89a3      	ldrh	r3, [r4, #12]
 8011f02:	075a      	lsls	r2, r3, #29
 8011f04:	d505      	bpl.n	8011f12 <__sflush_r+0x46>
 8011f06:	6863      	ldr	r3, [r4, #4]
 8011f08:	1ac0      	subs	r0, r0, r3
 8011f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f0c:	b10b      	cbz	r3, 8011f12 <__sflush_r+0x46>
 8011f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f10:	1ac0      	subs	r0, r0, r3
 8011f12:	2300      	movs	r3, #0
 8011f14:	4602      	mov	r2, r0
 8011f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f18:	6a21      	ldr	r1, [r4, #32]
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	47b0      	blx	r6
 8011f1e:	1c43      	adds	r3, r0, #1
 8011f20:	89a3      	ldrh	r3, [r4, #12]
 8011f22:	d106      	bne.n	8011f32 <__sflush_r+0x66>
 8011f24:	6829      	ldr	r1, [r5, #0]
 8011f26:	291d      	cmp	r1, #29
 8011f28:	d82c      	bhi.n	8011f84 <__sflush_r+0xb8>
 8011f2a:	4a2a      	ldr	r2, [pc, #168]	; (8011fd4 <__sflush_r+0x108>)
 8011f2c:	40ca      	lsrs	r2, r1
 8011f2e:	07d6      	lsls	r6, r2, #31
 8011f30:	d528      	bpl.n	8011f84 <__sflush_r+0xb8>
 8011f32:	2200      	movs	r2, #0
 8011f34:	6062      	str	r2, [r4, #4]
 8011f36:	04d9      	lsls	r1, r3, #19
 8011f38:	6922      	ldr	r2, [r4, #16]
 8011f3a:	6022      	str	r2, [r4, #0]
 8011f3c:	d504      	bpl.n	8011f48 <__sflush_r+0x7c>
 8011f3e:	1c42      	adds	r2, r0, #1
 8011f40:	d101      	bne.n	8011f46 <__sflush_r+0x7a>
 8011f42:	682b      	ldr	r3, [r5, #0]
 8011f44:	b903      	cbnz	r3, 8011f48 <__sflush_r+0x7c>
 8011f46:	6560      	str	r0, [r4, #84]	; 0x54
 8011f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f4a:	602f      	str	r7, [r5, #0]
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	d0ca      	beq.n	8011ee6 <__sflush_r+0x1a>
 8011f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f54:	4299      	cmp	r1, r3
 8011f56:	d002      	beq.n	8011f5e <__sflush_r+0x92>
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f7ff faa5 	bl	80114a8 <_free_r>
 8011f5e:	2000      	movs	r0, #0
 8011f60:	6360      	str	r0, [r4, #52]	; 0x34
 8011f62:	e7c1      	b.n	8011ee8 <__sflush_r+0x1c>
 8011f64:	6a21      	ldr	r1, [r4, #32]
 8011f66:	2301      	movs	r3, #1
 8011f68:	4628      	mov	r0, r5
 8011f6a:	47b0      	blx	r6
 8011f6c:	1c41      	adds	r1, r0, #1
 8011f6e:	d1c7      	bne.n	8011f00 <__sflush_r+0x34>
 8011f70:	682b      	ldr	r3, [r5, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d0c4      	beq.n	8011f00 <__sflush_r+0x34>
 8011f76:	2b1d      	cmp	r3, #29
 8011f78:	d001      	beq.n	8011f7e <__sflush_r+0xb2>
 8011f7a:	2b16      	cmp	r3, #22
 8011f7c:	d101      	bne.n	8011f82 <__sflush_r+0xb6>
 8011f7e:	602f      	str	r7, [r5, #0]
 8011f80:	e7b1      	b.n	8011ee6 <__sflush_r+0x1a>
 8011f82:	89a3      	ldrh	r3, [r4, #12]
 8011f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f88:	81a3      	strh	r3, [r4, #12]
 8011f8a:	e7ad      	b.n	8011ee8 <__sflush_r+0x1c>
 8011f8c:	690f      	ldr	r7, [r1, #16]
 8011f8e:	2f00      	cmp	r7, #0
 8011f90:	d0a9      	beq.n	8011ee6 <__sflush_r+0x1a>
 8011f92:	0793      	lsls	r3, r2, #30
 8011f94:	680e      	ldr	r6, [r1, #0]
 8011f96:	bf08      	it	eq
 8011f98:	694b      	ldreq	r3, [r1, #20]
 8011f9a:	600f      	str	r7, [r1, #0]
 8011f9c:	bf18      	it	ne
 8011f9e:	2300      	movne	r3, #0
 8011fa0:	eba6 0807 	sub.w	r8, r6, r7
 8011fa4:	608b      	str	r3, [r1, #8]
 8011fa6:	f1b8 0f00 	cmp.w	r8, #0
 8011faa:	dd9c      	ble.n	8011ee6 <__sflush_r+0x1a>
 8011fac:	6a21      	ldr	r1, [r4, #32]
 8011fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011fb0:	4643      	mov	r3, r8
 8011fb2:	463a      	mov	r2, r7
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	47b0      	blx	r6
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	dc06      	bgt.n	8011fca <__sflush_r+0xfe>
 8011fbc:	89a3      	ldrh	r3, [r4, #12]
 8011fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fc2:	81a3      	strh	r3, [r4, #12]
 8011fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc8:	e78e      	b.n	8011ee8 <__sflush_r+0x1c>
 8011fca:	4407      	add	r7, r0
 8011fcc:	eba8 0800 	sub.w	r8, r8, r0
 8011fd0:	e7e9      	b.n	8011fa6 <__sflush_r+0xda>
 8011fd2:	bf00      	nop
 8011fd4:	20400001 	.word	0x20400001

08011fd8 <_fflush_r>:
 8011fd8:	b538      	push	{r3, r4, r5, lr}
 8011fda:	690b      	ldr	r3, [r1, #16]
 8011fdc:	4605      	mov	r5, r0
 8011fde:	460c      	mov	r4, r1
 8011fe0:	b913      	cbnz	r3, 8011fe8 <_fflush_r+0x10>
 8011fe2:	2500      	movs	r5, #0
 8011fe4:	4628      	mov	r0, r5
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	b118      	cbz	r0, 8011ff2 <_fflush_r+0x1a>
 8011fea:	6983      	ldr	r3, [r0, #24]
 8011fec:	b90b      	cbnz	r3, 8011ff2 <_fflush_r+0x1a>
 8011fee:	f000 f887 	bl	8012100 <__sinit>
 8011ff2:	4b14      	ldr	r3, [pc, #80]	; (8012044 <_fflush_r+0x6c>)
 8011ff4:	429c      	cmp	r4, r3
 8011ff6:	d11b      	bne.n	8012030 <_fflush_r+0x58>
 8011ff8:	686c      	ldr	r4, [r5, #4]
 8011ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d0ef      	beq.n	8011fe2 <_fflush_r+0xa>
 8012002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012004:	07d0      	lsls	r0, r2, #31
 8012006:	d404      	bmi.n	8012012 <_fflush_r+0x3a>
 8012008:	0599      	lsls	r1, r3, #22
 801200a:	d402      	bmi.n	8012012 <_fflush_r+0x3a>
 801200c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801200e:	f000 f915 	bl	801223c <__retarget_lock_acquire_recursive>
 8012012:	4628      	mov	r0, r5
 8012014:	4621      	mov	r1, r4
 8012016:	f7ff ff59 	bl	8011ecc <__sflush_r>
 801201a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801201c:	07da      	lsls	r2, r3, #31
 801201e:	4605      	mov	r5, r0
 8012020:	d4e0      	bmi.n	8011fe4 <_fflush_r+0xc>
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	059b      	lsls	r3, r3, #22
 8012026:	d4dd      	bmi.n	8011fe4 <_fflush_r+0xc>
 8012028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801202a:	f000 f908 	bl	801223e <__retarget_lock_release_recursive>
 801202e:	e7d9      	b.n	8011fe4 <_fflush_r+0xc>
 8012030:	4b05      	ldr	r3, [pc, #20]	; (8012048 <_fflush_r+0x70>)
 8012032:	429c      	cmp	r4, r3
 8012034:	d101      	bne.n	801203a <_fflush_r+0x62>
 8012036:	68ac      	ldr	r4, [r5, #8]
 8012038:	e7df      	b.n	8011ffa <_fflush_r+0x22>
 801203a:	4b04      	ldr	r3, [pc, #16]	; (801204c <_fflush_r+0x74>)
 801203c:	429c      	cmp	r4, r3
 801203e:	bf08      	it	eq
 8012040:	68ec      	ldreq	r4, [r5, #12]
 8012042:	e7da      	b.n	8011ffa <_fflush_r+0x22>
 8012044:	0801441c 	.word	0x0801441c
 8012048:	0801443c 	.word	0x0801443c
 801204c:	080143fc 	.word	0x080143fc

08012050 <std>:
 8012050:	2300      	movs	r3, #0
 8012052:	b510      	push	{r4, lr}
 8012054:	4604      	mov	r4, r0
 8012056:	e9c0 3300 	strd	r3, r3, [r0]
 801205a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801205e:	6083      	str	r3, [r0, #8]
 8012060:	8181      	strh	r1, [r0, #12]
 8012062:	6643      	str	r3, [r0, #100]	; 0x64
 8012064:	81c2      	strh	r2, [r0, #14]
 8012066:	6183      	str	r3, [r0, #24]
 8012068:	4619      	mov	r1, r3
 801206a:	2208      	movs	r2, #8
 801206c:	305c      	adds	r0, #92	; 0x5c
 801206e:	f7fd fb45 	bl	800f6fc <memset>
 8012072:	4b05      	ldr	r3, [pc, #20]	; (8012088 <std+0x38>)
 8012074:	6263      	str	r3, [r4, #36]	; 0x24
 8012076:	4b05      	ldr	r3, [pc, #20]	; (801208c <std+0x3c>)
 8012078:	62a3      	str	r3, [r4, #40]	; 0x28
 801207a:	4b05      	ldr	r3, [pc, #20]	; (8012090 <std+0x40>)
 801207c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801207e:	4b05      	ldr	r3, [pc, #20]	; (8012094 <std+0x44>)
 8012080:	6224      	str	r4, [r4, #32]
 8012082:	6323      	str	r3, [r4, #48]	; 0x30
 8012084:	bd10      	pop	{r4, pc}
 8012086:	bf00      	nop
 8012088:	080123a5 	.word	0x080123a5
 801208c:	080123c7 	.word	0x080123c7
 8012090:	080123ff 	.word	0x080123ff
 8012094:	08012423 	.word	0x08012423

08012098 <_cleanup_r>:
 8012098:	4901      	ldr	r1, [pc, #4]	; (80120a0 <_cleanup_r+0x8>)
 801209a:	f000 b8af 	b.w	80121fc <_fwalk_reent>
 801209e:	bf00      	nop
 80120a0:	08011fd9 	.word	0x08011fd9

080120a4 <__sfmoreglue>:
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	2268      	movs	r2, #104	; 0x68
 80120a8:	1e4d      	subs	r5, r1, #1
 80120aa:	4355      	muls	r5, r2
 80120ac:	460e      	mov	r6, r1
 80120ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80120b2:	f7ff fa65 	bl	8011580 <_malloc_r>
 80120b6:	4604      	mov	r4, r0
 80120b8:	b140      	cbz	r0, 80120cc <__sfmoreglue+0x28>
 80120ba:	2100      	movs	r1, #0
 80120bc:	e9c0 1600 	strd	r1, r6, [r0]
 80120c0:	300c      	adds	r0, #12
 80120c2:	60a0      	str	r0, [r4, #8]
 80120c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80120c8:	f7fd fb18 	bl	800f6fc <memset>
 80120cc:	4620      	mov	r0, r4
 80120ce:	bd70      	pop	{r4, r5, r6, pc}

080120d0 <__sfp_lock_acquire>:
 80120d0:	4801      	ldr	r0, [pc, #4]	; (80120d8 <__sfp_lock_acquire+0x8>)
 80120d2:	f000 b8b3 	b.w	801223c <__retarget_lock_acquire_recursive>
 80120d6:	bf00      	nop
 80120d8:	20006349 	.word	0x20006349

080120dc <__sfp_lock_release>:
 80120dc:	4801      	ldr	r0, [pc, #4]	; (80120e4 <__sfp_lock_release+0x8>)
 80120de:	f000 b8ae 	b.w	801223e <__retarget_lock_release_recursive>
 80120e2:	bf00      	nop
 80120e4:	20006349 	.word	0x20006349

080120e8 <__sinit_lock_acquire>:
 80120e8:	4801      	ldr	r0, [pc, #4]	; (80120f0 <__sinit_lock_acquire+0x8>)
 80120ea:	f000 b8a7 	b.w	801223c <__retarget_lock_acquire_recursive>
 80120ee:	bf00      	nop
 80120f0:	2000634a 	.word	0x2000634a

080120f4 <__sinit_lock_release>:
 80120f4:	4801      	ldr	r0, [pc, #4]	; (80120fc <__sinit_lock_release+0x8>)
 80120f6:	f000 b8a2 	b.w	801223e <__retarget_lock_release_recursive>
 80120fa:	bf00      	nop
 80120fc:	2000634a 	.word	0x2000634a

08012100 <__sinit>:
 8012100:	b510      	push	{r4, lr}
 8012102:	4604      	mov	r4, r0
 8012104:	f7ff fff0 	bl	80120e8 <__sinit_lock_acquire>
 8012108:	69a3      	ldr	r3, [r4, #24]
 801210a:	b11b      	cbz	r3, 8012114 <__sinit+0x14>
 801210c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012110:	f7ff bff0 	b.w	80120f4 <__sinit_lock_release>
 8012114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012118:	6523      	str	r3, [r4, #80]	; 0x50
 801211a:	4b13      	ldr	r3, [pc, #76]	; (8012168 <__sinit+0x68>)
 801211c:	4a13      	ldr	r2, [pc, #76]	; (801216c <__sinit+0x6c>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	62a2      	str	r2, [r4, #40]	; 0x28
 8012122:	42a3      	cmp	r3, r4
 8012124:	bf04      	itt	eq
 8012126:	2301      	moveq	r3, #1
 8012128:	61a3      	streq	r3, [r4, #24]
 801212a:	4620      	mov	r0, r4
 801212c:	f000 f820 	bl	8012170 <__sfp>
 8012130:	6060      	str	r0, [r4, #4]
 8012132:	4620      	mov	r0, r4
 8012134:	f000 f81c 	bl	8012170 <__sfp>
 8012138:	60a0      	str	r0, [r4, #8]
 801213a:	4620      	mov	r0, r4
 801213c:	f000 f818 	bl	8012170 <__sfp>
 8012140:	2200      	movs	r2, #0
 8012142:	60e0      	str	r0, [r4, #12]
 8012144:	2104      	movs	r1, #4
 8012146:	6860      	ldr	r0, [r4, #4]
 8012148:	f7ff ff82 	bl	8012050 <std>
 801214c:	68a0      	ldr	r0, [r4, #8]
 801214e:	2201      	movs	r2, #1
 8012150:	2109      	movs	r1, #9
 8012152:	f7ff ff7d 	bl	8012050 <std>
 8012156:	68e0      	ldr	r0, [r4, #12]
 8012158:	2202      	movs	r2, #2
 801215a:	2112      	movs	r1, #18
 801215c:	f7ff ff78 	bl	8012050 <std>
 8012160:	2301      	movs	r3, #1
 8012162:	61a3      	str	r3, [r4, #24]
 8012164:	e7d2      	b.n	801210c <__sinit+0xc>
 8012166:	bf00      	nop
 8012168:	08014084 	.word	0x08014084
 801216c:	08012099 	.word	0x08012099

08012170 <__sfp>:
 8012170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012172:	4607      	mov	r7, r0
 8012174:	f7ff ffac 	bl	80120d0 <__sfp_lock_acquire>
 8012178:	4b1e      	ldr	r3, [pc, #120]	; (80121f4 <__sfp+0x84>)
 801217a:	681e      	ldr	r6, [r3, #0]
 801217c:	69b3      	ldr	r3, [r6, #24]
 801217e:	b913      	cbnz	r3, 8012186 <__sfp+0x16>
 8012180:	4630      	mov	r0, r6
 8012182:	f7ff ffbd 	bl	8012100 <__sinit>
 8012186:	3648      	adds	r6, #72	; 0x48
 8012188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801218c:	3b01      	subs	r3, #1
 801218e:	d503      	bpl.n	8012198 <__sfp+0x28>
 8012190:	6833      	ldr	r3, [r6, #0]
 8012192:	b30b      	cbz	r3, 80121d8 <__sfp+0x68>
 8012194:	6836      	ldr	r6, [r6, #0]
 8012196:	e7f7      	b.n	8012188 <__sfp+0x18>
 8012198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801219c:	b9d5      	cbnz	r5, 80121d4 <__sfp+0x64>
 801219e:	4b16      	ldr	r3, [pc, #88]	; (80121f8 <__sfp+0x88>)
 80121a0:	60e3      	str	r3, [r4, #12]
 80121a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80121a6:	6665      	str	r5, [r4, #100]	; 0x64
 80121a8:	f000 f847 	bl	801223a <__retarget_lock_init_recursive>
 80121ac:	f7ff ff96 	bl	80120dc <__sfp_lock_release>
 80121b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80121b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80121b8:	6025      	str	r5, [r4, #0]
 80121ba:	61a5      	str	r5, [r4, #24]
 80121bc:	2208      	movs	r2, #8
 80121be:	4629      	mov	r1, r5
 80121c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80121c4:	f7fd fa9a 	bl	800f6fc <memset>
 80121c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80121cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80121d0:	4620      	mov	r0, r4
 80121d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121d4:	3468      	adds	r4, #104	; 0x68
 80121d6:	e7d9      	b.n	801218c <__sfp+0x1c>
 80121d8:	2104      	movs	r1, #4
 80121da:	4638      	mov	r0, r7
 80121dc:	f7ff ff62 	bl	80120a4 <__sfmoreglue>
 80121e0:	4604      	mov	r4, r0
 80121e2:	6030      	str	r0, [r6, #0]
 80121e4:	2800      	cmp	r0, #0
 80121e6:	d1d5      	bne.n	8012194 <__sfp+0x24>
 80121e8:	f7ff ff78 	bl	80120dc <__sfp_lock_release>
 80121ec:	230c      	movs	r3, #12
 80121ee:	603b      	str	r3, [r7, #0]
 80121f0:	e7ee      	b.n	80121d0 <__sfp+0x60>
 80121f2:	bf00      	nop
 80121f4:	08014084 	.word	0x08014084
 80121f8:	ffff0001 	.word	0xffff0001

080121fc <_fwalk_reent>:
 80121fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012200:	4606      	mov	r6, r0
 8012202:	4688      	mov	r8, r1
 8012204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012208:	2700      	movs	r7, #0
 801220a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801220e:	f1b9 0901 	subs.w	r9, r9, #1
 8012212:	d505      	bpl.n	8012220 <_fwalk_reent+0x24>
 8012214:	6824      	ldr	r4, [r4, #0]
 8012216:	2c00      	cmp	r4, #0
 8012218:	d1f7      	bne.n	801220a <_fwalk_reent+0xe>
 801221a:	4638      	mov	r0, r7
 801221c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012220:	89ab      	ldrh	r3, [r5, #12]
 8012222:	2b01      	cmp	r3, #1
 8012224:	d907      	bls.n	8012236 <_fwalk_reent+0x3a>
 8012226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801222a:	3301      	adds	r3, #1
 801222c:	d003      	beq.n	8012236 <_fwalk_reent+0x3a>
 801222e:	4629      	mov	r1, r5
 8012230:	4630      	mov	r0, r6
 8012232:	47c0      	blx	r8
 8012234:	4307      	orrs	r7, r0
 8012236:	3568      	adds	r5, #104	; 0x68
 8012238:	e7e9      	b.n	801220e <_fwalk_reent+0x12>

0801223a <__retarget_lock_init_recursive>:
 801223a:	4770      	bx	lr

0801223c <__retarget_lock_acquire_recursive>:
 801223c:	4770      	bx	lr

0801223e <__retarget_lock_release_recursive>:
 801223e:	4770      	bx	lr

08012240 <__swhatbuf_r>:
 8012240:	b570      	push	{r4, r5, r6, lr}
 8012242:	460e      	mov	r6, r1
 8012244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012248:	2900      	cmp	r1, #0
 801224a:	b096      	sub	sp, #88	; 0x58
 801224c:	4614      	mov	r4, r2
 801224e:	461d      	mov	r5, r3
 8012250:	da08      	bge.n	8012264 <__swhatbuf_r+0x24>
 8012252:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012256:	2200      	movs	r2, #0
 8012258:	602a      	str	r2, [r5, #0]
 801225a:	061a      	lsls	r2, r3, #24
 801225c:	d410      	bmi.n	8012280 <__swhatbuf_r+0x40>
 801225e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012262:	e00e      	b.n	8012282 <__swhatbuf_r+0x42>
 8012264:	466a      	mov	r2, sp
 8012266:	f000 f903 	bl	8012470 <_fstat_r>
 801226a:	2800      	cmp	r0, #0
 801226c:	dbf1      	blt.n	8012252 <__swhatbuf_r+0x12>
 801226e:	9a01      	ldr	r2, [sp, #4]
 8012270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012278:	425a      	negs	r2, r3
 801227a:	415a      	adcs	r2, r3
 801227c:	602a      	str	r2, [r5, #0]
 801227e:	e7ee      	b.n	801225e <__swhatbuf_r+0x1e>
 8012280:	2340      	movs	r3, #64	; 0x40
 8012282:	2000      	movs	r0, #0
 8012284:	6023      	str	r3, [r4, #0]
 8012286:	b016      	add	sp, #88	; 0x58
 8012288:	bd70      	pop	{r4, r5, r6, pc}
	...

0801228c <__smakebuf_r>:
 801228c:	898b      	ldrh	r3, [r1, #12]
 801228e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012290:	079d      	lsls	r5, r3, #30
 8012292:	4606      	mov	r6, r0
 8012294:	460c      	mov	r4, r1
 8012296:	d507      	bpl.n	80122a8 <__smakebuf_r+0x1c>
 8012298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	6123      	str	r3, [r4, #16]
 80122a0:	2301      	movs	r3, #1
 80122a2:	6163      	str	r3, [r4, #20]
 80122a4:	b002      	add	sp, #8
 80122a6:	bd70      	pop	{r4, r5, r6, pc}
 80122a8:	ab01      	add	r3, sp, #4
 80122aa:	466a      	mov	r2, sp
 80122ac:	f7ff ffc8 	bl	8012240 <__swhatbuf_r>
 80122b0:	9900      	ldr	r1, [sp, #0]
 80122b2:	4605      	mov	r5, r0
 80122b4:	4630      	mov	r0, r6
 80122b6:	f7ff f963 	bl	8011580 <_malloc_r>
 80122ba:	b948      	cbnz	r0, 80122d0 <__smakebuf_r+0x44>
 80122bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122c0:	059a      	lsls	r2, r3, #22
 80122c2:	d4ef      	bmi.n	80122a4 <__smakebuf_r+0x18>
 80122c4:	f023 0303 	bic.w	r3, r3, #3
 80122c8:	f043 0302 	orr.w	r3, r3, #2
 80122cc:	81a3      	strh	r3, [r4, #12]
 80122ce:	e7e3      	b.n	8012298 <__smakebuf_r+0xc>
 80122d0:	4b0d      	ldr	r3, [pc, #52]	; (8012308 <__smakebuf_r+0x7c>)
 80122d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80122d4:	89a3      	ldrh	r3, [r4, #12]
 80122d6:	6020      	str	r0, [r4, #0]
 80122d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122dc:	81a3      	strh	r3, [r4, #12]
 80122de:	9b00      	ldr	r3, [sp, #0]
 80122e0:	6163      	str	r3, [r4, #20]
 80122e2:	9b01      	ldr	r3, [sp, #4]
 80122e4:	6120      	str	r0, [r4, #16]
 80122e6:	b15b      	cbz	r3, 8012300 <__smakebuf_r+0x74>
 80122e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122ec:	4630      	mov	r0, r6
 80122ee:	f000 f8d1 	bl	8012494 <_isatty_r>
 80122f2:	b128      	cbz	r0, 8012300 <__smakebuf_r+0x74>
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	f023 0303 	bic.w	r3, r3, #3
 80122fa:	f043 0301 	orr.w	r3, r3, #1
 80122fe:	81a3      	strh	r3, [r4, #12]
 8012300:	89a0      	ldrh	r0, [r4, #12]
 8012302:	4305      	orrs	r5, r0
 8012304:	81a5      	strh	r5, [r4, #12]
 8012306:	e7cd      	b.n	80122a4 <__smakebuf_r+0x18>
 8012308:	08012099 	.word	0x08012099

0801230c <_malloc_usable_size_r>:
 801230c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012310:	1f18      	subs	r0, r3, #4
 8012312:	2b00      	cmp	r3, #0
 8012314:	bfbc      	itt	lt
 8012316:	580b      	ldrlt	r3, [r1, r0]
 8012318:	18c0      	addlt	r0, r0, r3
 801231a:	4770      	bx	lr

0801231c <_raise_r>:
 801231c:	291f      	cmp	r1, #31
 801231e:	b538      	push	{r3, r4, r5, lr}
 8012320:	4604      	mov	r4, r0
 8012322:	460d      	mov	r5, r1
 8012324:	d904      	bls.n	8012330 <_raise_r+0x14>
 8012326:	2316      	movs	r3, #22
 8012328:	6003      	str	r3, [r0, #0]
 801232a:	f04f 30ff 	mov.w	r0, #4294967295
 801232e:	bd38      	pop	{r3, r4, r5, pc}
 8012330:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012332:	b112      	cbz	r2, 801233a <_raise_r+0x1e>
 8012334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012338:	b94b      	cbnz	r3, 801234e <_raise_r+0x32>
 801233a:	4620      	mov	r0, r4
 801233c:	f000 f830 	bl	80123a0 <_getpid_r>
 8012340:	462a      	mov	r2, r5
 8012342:	4601      	mov	r1, r0
 8012344:	4620      	mov	r0, r4
 8012346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801234a:	f000 b817 	b.w	801237c <_kill_r>
 801234e:	2b01      	cmp	r3, #1
 8012350:	d00a      	beq.n	8012368 <_raise_r+0x4c>
 8012352:	1c59      	adds	r1, r3, #1
 8012354:	d103      	bne.n	801235e <_raise_r+0x42>
 8012356:	2316      	movs	r3, #22
 8012358:	6003      	str	r3, [r0, #0]
 801235a:	2001      	movs	r0, #1
 801235c:	e7e7      	b.n	801232e <_raise_r+0x12>
 801235e:	2400      	movs	r4, #0
 8012360:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012364:	4628      	mov	r0, r5
 8012366:	4798      	blx	r3
 8012368:	2000      	movs	r0, #0
 801236a:	e7e0      	b.n	801232e <_raise_r+0x12>

0801236c <raise>:
 801236c:	4b02      	ldr	r3, [pc, #8]	; (8012378 <raise+0xc>)
 801236e:	4601      	mov	r1, r0
 8012370:	6818      	ldr	r0, [r3, #0]
 8012372:	f7ff bfd3 	b.w	801231c <_raise_r>
 8012376:	bf00      	nop
 8012378:	20000020 	.word	0x20000020

0801237c <_kill_r>:
 801237c:	b538      	push	{r3, r4, r5, lr}
 801237e:	4d07      	ldr	r5, [pc, #28]	; (801239c <_kill_r+0x20>)
 8012380:	2300      	movs	r3, #0
 8012382:	4604      	mov	r4, r0
 8012384:	4608      	mov	r0, r1
 8012386:	4611      	mov	r1, r2
 8012388:	602b      	str	r3, [r5, #0]
 801238a:	f7f3 fffd 	bl	8006388 <_kill>
 801238e:	1c43      	adds	r3, r0, #1
 8012390:	d102      	bne.n	8012398 <_kill_r+0x1c>
 8012392:	682b      	ldr	r3, [r5, #0]
 8012394:	b103      	cbz	r3, 8012398 <_kill_r+0x1c>
 8012396:	6023      	str	r3, [r4, #0]
 8012398:	bd38      	pop	{r3, r4, r5, pc}
 801239a:	bf00      	nop
 801239c:	20006344 	.word	0x20006344

080123a0 <_getpid_r>:
 80123a0:	f7f3 bfea 	b.w	8006378 <_getpid>

080123a4 <__sread>:
 80123a4:	b510      	push	{r4, lr}
 80123a6:	460c      	mov	r4, r1
 80123a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ac:	f000 f894 	bl	80124d8 <_read_r>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	bfab      	itete	ge
 80123b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80123b6:	89a3      	ldrhlt	r3, [r4, #12]
 80123b8:	181b      	addge	r3, r3, r0
 80123ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123be:	bfac      	ite	ge
 80123c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80123c2:	81a3      	strhlt	r3, [r4, #12]
 80123c4:	bd10      	pop	{r4, pc}

080123c6 <__swrite>:
 80123c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123ca:	461f      	mov	r7, r3
 80123cc:	898b      	ldrh	r3, [r1, #12]
 80123ce:	05db      	lsls	r3, r3, #23
 80123d0:	4605      	mov	r5, r0
 80123d2:	460c      	mov	r4, r1
 80123d4:	4616      	mov	r6, r2
 80123d6:	d505      	bpl.n	80123e4 <__swrite+0x1e>
 80123d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123dc:	2302      	movs	r3, #2
 80123de:	2200      	movs	r2, #0
 80123e0:	f000 f868 	bl	80124b4 <_lseek_r>
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123ee:	81a3      	strh	r3, [r4, #12]
 80123f0:	4632      	mov	r2, r6
 80123f2:	463b      	mov	r3, r7
 80123f4:	4628      	mov	r0, r5
 80123f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123fa:	f000 b817 	b.w	801242c <_write_r>

080123fe <__sseek>:
 80123fe:	b510      	push	{r4, lr}
 8012400:	460c      	mov	r4, r1
 8012402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012406:	f000 f855 	bl	80124b4 <_lseek_r>
 801240a:	1c43      	adds	r3, r0, #1
 801240c:	89a3      	ldrh	r3, [r4, #12]
 801240e:	bf15      	itete	ne
 8012410:	6560      	strne	r0, [r4, #84]	; 0x54
 8012412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801241a:	81a3      	strheq	r3, [r4, #12]
 801241c:	bf18      	it	ne
 801241e:	81a3      	strhne	r3, [r4, #12]
 8012420:	bd10      	pop	{r4, pc}

08012422 <__sclose>:
 8012422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012426:	f000 b813 	b.w	8012450 <_close_r>
	...

0801242c <_write_r>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	4d07      	ldr	r5, [pc, #28]	; (801244c <_write_r+0x20>)
 8012430:	4604      	mov	r4, r0
 8012432:	4608      	mov	r0, r1
 8012434:	4611      	mov	r1, r2
 8012436:	2200      	movs	r2, #0
 8012438:	602a      	str	r2, [r5, #0]
 801243a:	461a      	mov	r2, r3
 801243c:	f7f3 ffdb 	bl	80063f6 <_write>
 8012440:	1c43      	adds	r3, r0, #1
 8012442:	d102      	bne.n	801244a <_write_r+0x1e>
 8012444:	682b      	ldr	r3, [r5, #0]
 8012446:	b103      	cbz	r3, 801244a <_write_r+0x1e>
 8012448:	6023      	str	r3, [r4, #0]
 801244a:	bd38      	pop	{r3, r4, r5, pc}
 801244c:	20006344 	.word	0x20006344

08012450 <_close_r>:
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4d06      	ldr	r5, [pc, #24]	; (801246c <_close_r+0x1c>)
 8012454:	2300      	movs	r3, #0
 8012456:	4604      	mov	r4, r0
 8012458:	4608      	mov	r0, r1
 801245a:	602b      	str	r3, [r5, #0]
 801245c:	f7f3 ffe7 	bl	800642e <_close>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	d102      	bne.n	801246a <_close_r+0x1a>
 8012464:	682b      	ldr	r3, [r5, #0]
 8012466:	b103      	cbz	r3, 801246a <_close_r+0x1a>
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	20006344 	.word	0x20006344

08012470 <_fstat_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	4d07      	ldr	r5, [pc, #28]	; (8012490 <_fstat_r+0x20>)
 8012474:	2300      	movs	r3, #0
 8012476:	4604      	mov	r4, r0
 8012478:	4608      	mov	r0, r1
 801247a:	4611      	mov	r1, r2
 801247c:	602b      	str	r3, [r5, #0]
 801247e:	f7f3 ffe2 	bl	8006446 <_fstat>
 8012482:	1c43      	adds	r3, r0, #1
 8012484:	d102      	bne.n	801248c <_fstat_r+0x1c>
 8012486:	682b      	ldr	r3, [r5, #0]
 8012488:	b103      	cbz	r3, 801248c <_fstat_r+0x1c>
 801248a:	6023      	str	r3, [r4, #0]
 801248c:	bd38      	pop	{r3, r4, r5, pc}
 801248e:	bf00      	nop
 8012490:	20006344 	.word	0x20006344

08012494 <_isatty_r>:
 8012494:	b538      	push	{r3, r4, r5, lr}
 8012496:	4d06      	ldr	r5, [pc, #24]	; (80124b0 <_isatty_r+0x1c>)
 8012498:	2300      	movs	r3, #0
 801249a:	4604      	mov	r4, r0
 801249c:	4608      	mov	r0, r1
 801249e:	602b      	str	r3, [r5, #0]
 80124a0:	f7f3 ffe1 	bl	8006466 <_isatty>
 80124a4:	1c43      	adds	r3, r0, #1
 80124a6:	d102      	bne.n	80124ae <_isatty_r+0x1a>
 80124a8:	682b      	ldr	r3, [r5, #0]
 80124aa:	b103      	cbz	r3, 80124ae <_isatty_r+0x1a>
 80124ac:	6023      	str	r3, [r4, #0]
 80124ae:	bd38      	pop	{r3, r4, r5, pc}
 80124b0:	20006344 	.word	0x20006344

080124b4 <_lseek_r>:
 80124b4:	b538      	push	{r3, r4, r5, lr}
 80124b6:	4d07      	ldr	r5, [pc, #28]	; (80124d4 <_lseek_r+0x20>)
 80124b8:	4604      	mov	r4, r0
 80124ba:	4608      	mov	r0, r1
 80124bc:	4611      	mov	r1, r2
 80124be:	2200      	movs	r2, #0
 80124c0:	602a      	str	r2, [r5, #0]
 80124c2:	461a      	mov	r2, r3
 80124c4:	f7f3 ffda 	bl	800647c <_lseek>
 80124c8:	1c43      	adds	r3, r0, #1
 80124ca:	d102      	bne.n	80124d2 <_lseek_r+0x1e>
 80124cc:	682b      	ldr	r3, [r5, #0]
 80124ce:	b103      	cbz	r3, 80124d2 <_lseek_r+0x1e>
 80124d0:	6023      	str	r3, [r4, #0]
 80124d2:	bd38      	pop	{r3, r4, r5, pc}
 80124d4:	20006344 	.word	0x20006344

080124d8 <_read_r>:
 80124d8:	b538      	push	{r3, r4, r5, lr}
 80124da:	4d07      	ldr	r5, [pc, #28]	; (80124f8 <_read_r+0x20>)
 80124dc:	4604      	mov	r4, r0
 80124de:	4608      	mov	r0, r1
 80124e0:	4611      	mov	r1, r2
 80124e2:	2200      	movs	r2, #0
 80124e4:	602a      	str	r2, [r5, #0]
 80124e6:	461a      	mov	r2, r3
 80124e8:	f7f3 ff68 	bl	80063bc <_read>
 80124ec:	1c43      	adds	r3, r0, #1
 80124ee:	d102      	bne.n	80124f6 <_read_r+0x1e>
 80124f0:	682b      	ldr	r3, [r5, #0]
 80124f2:	b103      	cbz	r3, 80124f6 <_read_r+0x1e>
 80124f4:	6023      	str	r3, [r4, #0]
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	20006344 	.word	0x20006344

080124fc <cosf>:
 80124fc:	ee10 3a10 	vmov	r3, s0
 8012500:	b507      	push	{r0, r1, r2, lr}
 8012502:	4a1e      	ldr	r2, [pc, #120]	; (801257c <cosf+0x80>)
 8012504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012508:	4293      	cmp	r3, r2
 801250a:	dc06      	bgt.n	801251a <cosf+0x1e>
 801250c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012580 <cosf+0x84>
 8012510:	b003      	add	sp, #12
 8012512:	f85d eb04 	ldr.w	lr, [sp], #4
 8012516:	f000 be95 	b.w	8013244 <__kernel_cosf>
 801251a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801251e:	db04      	blt.n	801252a <cosf+0x2e>
 8012520:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012524:	b003      	add	sp, #12
 8012526:	f85d fb04 	ldr.w	pc, [sp], #4
 801252a:	4668      	mov	r0, sp
 801252c:	f000 fd4a 	bl	8012fc4 <__ieee754_rem_pio2f>
 8012530:	f000 0003 	and.w	r0, r0, #3
 8012534:	2801      	cmp	r0, #1
 8012536:	d009      	beq.n	801254c <cosf+0x50>
 8012538:	2802      	cmp	r0, #2
 801253a:	d010      	beq.n	801255e <cosf+0x62>
 801253c:	b9b0      	cbnz	r0, 801256c <cosf+0x70>
 801253e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012542:	ed9d 0a00 	vldr	s0, [sp]
 8012546:	f000 fe7d 	bl	8013244 <__kernel_cosf>
 801254a:	e7eb      	b.n	8012524 <cosf+0x28>
 801254c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012550:	ed9d 0a00 	vldr	s0, [sp]
 8012554:	f001 f94c 	bl	80137f0 <__kernel_sinf>
 8012558:	eeb1 0a40 	vneg.f32	s0, s0
 801255c:	e7e2      	b.n	8012524 <cosf+0x28>
 801255e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012562:	ed9d 0a00 	vldr	s0, [sp]
 8012566:	f000 fe6d 	bl	8013244 <__kernel_cosf>
 801256a:	e7f5      	b.n	8012558 <cosf+0x5c>
 801256c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012570:	ed9d 0a00 	vldr	s0, [sp]
 8012574:	2001      	movs	r0, #1
 8012576:	f001 f93b 	bl	80137f0 <__kernel_sinf>
 801257a:	e7d3      	b.n	8012524 <cosf+0x28>
 801257c:	3f490fd8 	.word	0x3f490fd8
 8012580:	00000000 	.word	0x00000000

08012584 <sinf>:
 8012584:	ee10 3a10 	vmov	r3, s0
 8012588:	b507      	push	{r0, r1, r2, lr}
 801258a:	4a1f      	ldr	r2, [pc, #124]	; (8012608 <sinf+0x84>)
 801258c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012590:	4293      	cmp	r3, r2
 8012592:	dc07      	bgt.n	80125a4 <sinf+0x20>
 8012594:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801260c <sinf+0x88>
 8012598:	2000      	movs	r0, #0
 801259a:	b003      	add	sp, #12
 801259c:	f85d eb04 	ldr.w	lr, [sp], #4
 80125a0:	f001 b926 	b.w	80137f0 <__kernel_sinf>
 80125a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80125a8:	db04      	blt.n	80125b4 <sinf+0x30>
 80125aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80125ae:	b003      	add	sp, #12
 80125b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80125b4:	4668      	mov	r0, sp
 80125b6:	f000 fd05 	bl	8012fc4 <__ieee754_rem_pio2f>
 80125ba:	f000 0003 	and.w	r0, r0, #3
 80125be:	2801      	cmp	r0, #1
 80125c0:	d00a      	beq.n	80125d8 <sinf+0x54>
 80125c2:	2802      	cmp	r0, #2
 80125c4:	d00f      	beq.n	80125e6 <sinf+0x62>
 80125c6:	b9c0      	cbnz	r0, 80125fa <sinf+0x76>
 80125c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80125cc:	ed9d 0a00 	vldr	s0, [sp]
 80125d0:	2001      	movs	r0, #1
 80125d2:	f001 f90d 	bl	80137f0 <__kernel_sinf>
 80125d6:	e7ea      	b.n	80125ae <sinf+0x2a>
 80125d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80125dc:	ed9d 0a00 	vldr	s0, [sp]
 80125e0:	f000 fe30 	bl	8013244 <__kernel_cosf>
 80125e4:	e7e3      	b.n	80125ae <sinf+0x2a>
 80125e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80125ea:	ed9d 0a00 	vldr	s0, [sp]
 80125ee:	2001      	movs	r0, #1
 80125f0:	f001 f8fe 	bl	80137f0 <__kernel_sinf>
 80125f4:	eeb1 0a40 	vneg.f32	s0, s0
 80125f8:	e7d9      	b.n	80125ae <sinf+0x2a>
 80125fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80125fe:	ed9d 0a00 	vldr	s0, [sp]
 8012602:	f000 fe1f 	bl	8013244 <__kernel_cosf>
 8012606:	e7f5      	b.n	80125f4 <sinf+0x70>
 8012608:	3f490fd8 	.word	0x3f490fd8
 801260c:	00000000 	.word	0x00000000

08012610 <asinf>:
 8012610:	b508      	push	{r3, lr}
 8012612:	ed2d 8b02 	vpush	{d8}
 8012616:	eeb0 8a40 	vmov.f32	s16, s0
 801261a:	f000 f87f 	bl	801271c <__ieee754_asinf>
 801261e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012626:	eef0 8a40 	vmov.f32	s17, s0
 801262a:	d615      	bvs.n	8012658 <asinf+0x48>
 801262c:	eeb0 0a48 	vmov.f32	s0, s16
 8012630:	f001 fa1c 	bl	8013a6c <fabsf>
 8012634:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012638:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012640:	dd0a      	ble.n	8012658 <asinf+0x48>
 8012642:	f7fd f823 	bl	800f68c <__errno>
 8012646:	ecbd 8b02 	vpop	{d8}
 801264a:	2321      	movs	r3, #33	; 0x21
 801264c:	6003      	str	r3, [r0, #0]
 801264e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012652:	4804      	ldr	r0, [pc, #16]	; (8012664 <asinf+0x54>)
 8012654:	f001 ba60 	b.w	8013b18 <nanf>
 8012658:	eeb0 0a68 	vmov.f32	s0, s17
 801265c:	ecbd 8b02 	vpop	{d8}
 8012660:	bd08      	pop	{r3, pc}
 8012662:	bf00      	nop
 8012664:	080142f0 	.word	0x080142f0

08012668 <atan2f>:
 8012668:	f000 b93e 	b.w	80128e8 <__ieee754_atan2f>

0801266c <powf>:
 801266c:	b508      	push	{r3, lr}
 801266e:	ed2d 8b04 	vpush	{d8-d9}
 8012672:	eeb0 8a60 	vmov.f32	s16, s1
 8012676:	eeb0 9a40 	vmov.f32	s18, s0
 801267a:	f000 f9d5 	bl	8012a28 <__ieee754_powf>
 801267e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012686:	eef0 8a40 	vmov.f32	s17, s0
 801268a:	d63e      	bvs.n	801270a <powf+0x9e>
 801268c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012694:	d112      	bne.n	80126bc <powf+0x50>
 8012696:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269e:	d039      	beq.n	8012714 <powf+0xa8>
 80126a0:	eeb0 0a48 	vmov.f32	s0, s16
 80126a4:	f001 f9e9 	bl	8013a7a <finitef>
 80126a8:	b378      	cbz	r0, 801270a <powf+0x9e>
 80126aa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80126ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b2:	d52a      	bpl.n	801270a <powf+0x9e>
 80126b4:	f7fc ffea 	bl	800f68c <__errno>
 80126b8:	2322      	movs	r3, #34	; 0x22
 80126ba:	e014      	b.n	80126e6 <powf+0x7a>
 80126bc:	f001 f9dd 	bl	8013a7a <finitef>
 80126c0:	b998      	cbnz	r0, 80126ea <powf+0x7e>
 80126c2:	eeb0 0a49 	vmov.f32	s0, s18
 80126c6:	f001 f9d8 	bl	8013a7a <finitef>
 80126ca:	b170      	cbz	r0, 80126ea <powf+0x7e>
 80126cc:	eeb0 0a48 	vmov.f32	s0, s16
 80126d0:	f001 f9d3 	bl	8013a7a <finitef>
 80126d4:	b148      	cbz	r0, 80126ea <powf+0x7e>
 80126d6:	eef4 8a68 	vcmp.f32	s17, s17
 80126da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126de:	d7e9      	bvc.n	80126b4 <powf+0x48>
 80126e0:	f7fc ffd4 	bl	800f68c <__errno>
 80126e4:	2321      	movs	r3, #33	; 0x21
 80126e6:	6003      	str	r3, [r0, #0]
 80126e8:	e00f      	b.n	801270a <powf+0x9e>
 80126ea:	eef5 8a40 	vcmp.f32	s17, #0.0
 80126ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f2:	d10a      	bne.n	801270a <powf+0x9e>
 80126f4:	eeb0 0a49 	vmov.f32	s0, s18
 80126f8:	f001 f9bf 	bl	8013a7a <finitef>
 80126fc:	b128      	cbz	r0, 801270a <powf+0x9e>
 80126fe:	eeb0 0a48 	vmov.f32	s0, s16
 8012702:	f001 f9ba 	bl	8013a7a <finitef>
 8012706:	2800      	cmp	r0, #0
 8012708:	d1d4      	bne.n	80126b4 <powf+0x48>
 801270a:	eeb0 0a68 	vmov.f32	s0, s17
 801270e:	ecbd 8b04 	vpop	{d8-d9}
 8012712:	bd08      	pop	{r3, pc}
 8012714:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012718:	e7f7      	b.n	801270a <powf+0x9e>
	...

0801271c <__ieee754_asinf>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	ee10 5a10 	vmov	r5, s0
 8012722:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012726:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801272a:	ed2d 8b04 	vpush	{d8-d9}
 801272e:	d10c      	bne.n	801274a <__ieee754_asinf+0x2e>
 8012730:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80128a8 <__ieee754_asinf+0x18c>
 8012734:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80128ac <__ieee754_asinf+0x190>
 8012738:	ee60 7a27 	vmul.f32	s15, s0, s15
 801273c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012740:	eeb0 0a67 	vmov.f32	s0, s15
 8012744:	ecbd 8b04 	vpop	{d8-d9}
 8012748:	bd38      	pop	{r3, r4, r5, pc}
 801274a:	dd04      	ble.n	8012756 <__ieee754_asinf+0x3a>
 801274c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012750:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012754:	e7f6      	b.n	8012744 <__ieee754_asinf+0x28>
 8012756:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801275a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801275e:	da0b      	bge.n	8012778 <__ieee754_asinf+0x5c>
 8012760:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012764:	da52      	bge.n	801280c <__ieee754_asinf+0xf0>
 8012766:	eddf 7a52 	vldr	s15, [pc, #328]	; 80128b0 <__ieee754_asinf+0x194>
 801276a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801276e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012776:	dce5      	bgt.n	8012744 <__ieee754_asinf+0x28>
 8012778:	f001 f978 	bl	8013a6c <fabsf>
 801277c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012780:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012784:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012788:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80128b4 <__ieee754_asinf+0x198>
 801278c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80128b8 <__ieee754_asinf+0x19c>
 8012790:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80128bc <__ieee754_asinf+0x1a0>
 8012794:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012798:	eddf 7a49 	vldr	s15, [pc, #292]	; 80128c0 <__ieee754_asinf+0x1a4>
 801279c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80127a0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80128c4 <__ieee754_asinf+0x1a8>
 80127a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80127a8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80128c8 <__ieee754_asinf+0x1ac>
 80127ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 80127b0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80128cc <__ieee754_asinf+0x1b0>
 80127b4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80127b8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80128d0 <__ieee754_asinf+0x1b4>
 80127bc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80127c0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80128d4 <__ieee754_asinf+0x1b8>
 80127c4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80127c8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80128d8 <__ieee754_asinf+0x1bc>
 80127cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80127d0:	eeb0 0a48 	vmov.f32	s0, s16
 80127d4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80127d8:	f000 fd30 	bl	801323c <__ieee754_sqrtf>
 80127dc:	4b3f      	ldr	r3, [pc, #252]	; (80128dc <__ieee754_asinf+0x1c0>)
 80127de:	ee29 9a08 	vmul.f32	s18, s18, s16
 80127e2:	429c      	cmp	r4, r3
 80127e4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80127e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80127ec:	dd3d      	ble.n	801286a <__ieee754_asinf+0x14e>
 80127ee:	eea0 0a06 	vfma.f32	s0, s0, s12
 80127f2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80128e0 <__ieee754_asinf+0x1c4>
 80127f6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80127fa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80128ac <__ieee754_asinf+0x190>
 80127fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012802:	2d00      	cmp	r5, #0
 8012804:	bfd8      	it	le
 8012806:	eeb1 0a40 	vnegle.f32	s0, s0
 801280a:	e79b      	b.n	8012744 <__ieee754_asinf+0x28>
 801280c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012810:	eddf 6a28 	vldr	s13, [pc, #160]	; 80128b4 <__ieee754_asinf+0x198>
 8012814:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80128b8 <__ieee754_asinf+0x19c>
 8012818:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80128cc <__ieee754_asinf+0x1b0>
 801281c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012820:	eddf 6a27 	vldr	s13, [pc, #156]	; 80128c0 <__ieee754_asinf+0x1a4>
 8012824:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012828:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80128c4 <__ieee754_asinf+0x1a8>
 801282c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012830:	eddf 6a25 	vldr	s13, [pc, #148]	; 80128c8 <__ieee754_asinf+0x1ac>
 8012834:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012838:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80128bc <__ieee754_asinf+0x1a0>
 801283c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012840:	eddf 6a23 	vldr	s13, [pc, #140]	; 80128d0 <__ieee754_asinf+0x1b4>
 8012844:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012848:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80128d4 <__ieee754_asinf+0x1b8>
 801284c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012850:	eddf 6a21 	vldr	s13, [pc, #132]	; 80128d8 <__ieee754_asinf+0x1bc>
 8012854:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012858:	ee27 7a27 	vmul.f32	s14, s14, s15
 801285c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012860:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012864:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012868:	e76c      	b.n	8012744 <__ieee754_asinf+0x28>
 801286a:	ee10 3a10 	vmov	r3, s0
 801286e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012872:	f023 030f 	bic.w	r3, r3, #15
 8012876:	ee07 3a10 	vmov	s14, r3
 801287a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801287e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012882:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012886:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801288a:	eddf 7a07 	vldr	s15, [pc, #28]	; 80128a8 <__ieee754_asinf+0x18c>
 801288e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012892:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012896:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80128e4 <__ieee754_asinf+0x1c8>
 801289a:	eeb0 6a40 	vmov.f32	s12, s0
 801289e:	eea7 6a66 	vfms.f32	s12, s14, s13
 80128a2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80128a6:	e7aa      	b.n	80127fe <__ieee754_asinf+0xe2>
 80128a8:	b33bbd2e 	.word	0xb33bbd2e
 80128ac:	3fc90fdb 	.word	0x3fc90fdb
 80128b0:	7149f2ca 	.word	0x7149f2ca
 80128b4:	3811ef08 	.word	0x3811ef08
 80128b8:	3a4f7f04 	.word	0x3a4f7f04
 80128bc:	3e2aaaab 	.word	0x3e2aaaab
 80128c0:	bd241146 	.word	0xbd241146
 80128c4:	3e4e0aa8 	.word	0x3e4e0aa8
 80128c8:	bea6b090 	.word	0xbea6b090
 80128cc:	3d9dc62e 	.word	0x3d9dc62e
 80128d0:	bf303361 	.word	0xbf303361
 80128d4:	4001572d 	.word	0x4001572d
 80128d8:	c019d139 	.word	0xc019d139
 80128dc:	3f799999 	.word	0x3f799999
 80128e0:	333bbd2e 	.word	0x333bbd2e
 80128e4:	3f490fdb 	.word	0x3f490fdb

080128e8 <__ieee754_atan2f>:
 80128e8:	ee10 2a90 	vmov	r2, s1
 80128ec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80128f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80128f4:	b510      	push	{r4, lr}
 80128f6:	eef0 7a40 	vmov.f32	s15, s0
 80128fa:	dc06      	bgt.n	801290a <__ieee754_atan2f+0x22>
 80128fc:	ee10 0a10 	vmov	r0, s0
 8012900:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012904:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012908:	dd04      	ble.n	8012914 <__ieee754_atan2f+0x2c>
 801290a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801290e:	eeb0 0a67 	vmov.f32	s0, s15
 8012912:	bd10      	pop	{r4, pc}
 8012914:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012918:	d103      	bne.n	8012922 <__ieee754_atan2f+0x3a>
 801291a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801291e:	f000 bfd1 	b.w	80138c4 <atanf>
 8012922:	1794      	asrs	r4, r2, #30
 8012924:	f004 0402 	and.w	r4, r4, #2
 8012928:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801292c:	b943      	cbnz	r3, 8012940 <__ieee754_atan2f+0x58>
 801292e:	2c02      	cmp	r4, #2
 8012930:	d05e      	beq.n	80129f0 <__ieee754_atan2f+0x108>
 8012932:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012a04 <__ieee754_atan2f+0x11c>
 8012936:	2c03      	cmp	r4, #3
 8012938:	bf08      	it	eq
 801293a:	eef0 7a47 	vmoveq.f32	s15, s14
 801293e:	e7e6      	b.n	801290e <__ieee754_atan2f+0x26>
 8012940:	b941      	cbnz	r1, 8012954 <__ieee754_atan2f+0x6c>
 8012942:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012a08 <__ieee754_atan2f+0x120>
 8012946:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8012a0c <__ieee754_atan2f+0x124>
 801294a:	2800      	cmp	r0, #0
 801294c:	bfb8      	it	lt
 801294e:	eef0 7a40 	vmovlt.f32	s15, s0
 8012952:	e7dc      	b.n	801290e <__ieee754_atan2f+0x26>
 8012954:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012958:	d110      	bne.n	801297c <__ieee754_atan2f+0x94>
 801295a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801295e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012962:	d107      	bne.n	8012974 <__ieee754_atan2f+0x8c>
 8012964:	2c02      	cmp	r4, #2
 8012966:	d846      	bhi.n	80129f6 <__ieee754_atan2f+0x10e>
 8012968:	4b29      	ldr	r3, [pc, #164]	; (8012a10 <__ieee754_atan2f+0x128>)
 801296a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801296e:	edd4 7a00 	vldr	s15, [r4]
 8012972:	e7cc      	b.n	801290e <__ieee754_atan2f+0x26>
 8012974:	2c02      	cmp	r4, #2
 8012976:	d841      	bhi.n	80129fc <__ieee754_atan2f+0x114>
 8012978:	4b26      	ldr	r3, [pc, #152]	; (8012a14 <__ieee754_atan2f+0x12c>)
 801297a:	e7f6      	b.n	801296a <__ieee754_atan2f+0x82>
 801297c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012980:	d0df      	beq.n	8012942 <__ieee754_atan2f+0x5a>
 8012982:	1a5b      	subs	r3, r3, r1
 8012984:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012988:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801298c:	da1a      	bge.n	80129c4 <__ieee754_atan2f+0xdc>
 801298e:	2a00      	cmp	r2, #0
 8012990:	da01      	bge.n	8012996 <__ieee754_atan2f+0xae>
 8012992:	313c      	adds	r1, #60	; 0x3c
 8012994:	db19      	blt.n	80129ca <__ieee754_atan2f+0xe2>
 8012996:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801299a:	f001 f867 	bl	8013a6c <fabsf>
 801299e:	f000 ff91 	bl	80138c4 <atanf>
 80129a2:	eef0 7a40 	vmov.f32	s15, s0
 80129a6:	2c01      	cmp	r4, #1
 80129a8:	d012      	beq.n	80129d0 <__ieee754_atan2f+0xe8>
 80129aa:	2c02      	cmp	r4, #2
 80129ac:	d017      	beq.n	80129de <__ieee754_atan2f+0xf6>
 80129ae:	2c00      	cmp	r4, #0
 80129b0:	d0ad      	beq.n	801290e <__ieee754_atan2f+0x26>
 80129b2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012a18 <__ieee754_atan2f+0x130>
 80129b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80129ba:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012a1c <__ieee754_atan2f+0x134>
 80129be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80129c2:	e7a4      	b.n	801290e <__ieee754_atan2f+0x26>
 80129c4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012a08 <__ieee754_atan2f+0x120>
 80129c8:	e7ed      	b.n	80129a6 <__ieee754_atan2f+0xbe>
 80129ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012a20 <__ieee754_atan2f+0x138>
 80129ce:	e7ea      	b.n	80129a6 <__ieee754_atan2f+0xbe>
 80129d0:	ee17 3a90 	vmov	r3, s15
 80129d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80129d8:	ee07 3a90 	vmov	s15, r3
 80129dc:	e797      	b.n	801290e <__ieee754_atan2f+0x26>
 80129de:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012a18 <__ieee754_atan2f+0x130>
 80129e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80129e6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012a1c <__ieee754_atan2f+0x134>
 80129ea:	ee70 7a67 	vsub.f32	s15, s0, s15
 80129ee:	e78e      	b.n	801290e <__ieee754_atan2f+0x26>
 80129f0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012a1c <__ieee754_atan2f+0x134>
 80129f4:	e78b      	b.n	801290e <__ieee754_atan2f+0x26>
 80129f6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012a24 <__ieee754_atan2f+0x13c>
 80129fa:	e788      	b.n	801290e <__ieee754_atan2f+0x26>
 80129fc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012a20 <__ieee754_atan2f+0x138>
 8012a00:	e785      	b.n	801290e <__ieee754_atan2f+0x26>
 8012a02:	bf00      	nop
 8012a04:	c0490fdb 	.word	0xc0490fdb
 8012a08:	3fc90fdb 	.word	0x3fc90fdb
 8012a0c:	bfc90fdb 	.word	0xbfc90fdb
 8012a10:	0801445c 	.word	0x0801445c
 8012a14:	08014468 	.word	0x08014468
 8012a18:	33bbbd2e 	.word	0x33bbbd2e
 8012a1c:	40490fdb 	.word	0x40490fdb
 8012a20:	00000000 	.word	0x00000000
 8012a24:	3f490fdb 	.word	0x3f490fdb

08012a28 <__ieee754_powf>:
 8012a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2c:	ee10 4a90 	vmov	r4, s1
 8012a30:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012a34:	ed2d 8b02 	vpush	{d8}
 8012a38:	ee10 6a10 	vmov	r6, s0
 8012a3c:	eeb0 8a40 	vmov.f32	s16, s0
 8012a40:	eef0 8a60 	vmov.f32	s17, s1
 8012a44:	d10c      	bne.n	8012a60 <__ieee754_powf+0x38>
 8012a46:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012a4a:	0076      	lsls	r6, r6, #1
 8012a4c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012a50:	f240 8296 	bls.w	8012f80 <__ieee754_powf+0x558>
 8012a54:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012a58:	ecbd 8b02 	vpop	{d8}
 8012a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a60:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012a64:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012a68:	dcf4      	bgt.n	8012a54 <__ieee754_powf+0x2c>
 8012a6a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012a6e:	dd08      	ble.n	8012a82 <__ieee754_powf+0x5a>
 8012a70:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012a74:	d1ee      	bne.n	8012a54 <__ieee754_powf+0x2c>
 8012a76:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012a7a:	0064      	lsls	r4, r4, #1
 8012a7c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012a80:	e7e6      	b.n	8012a50 <__ieee754_powf+0x28>
 8012a82:	2e00      	cmp	r6, #0
 8012a84:	da20      	bge.n	8012ac8 <__ieee754_powf+0xa0>
 8012a86:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012a8a:	da2d      	bge.n	8012ae8 <__ieee754_powf+0xc0>
 8012a8c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012a90:	f2c0 827f 	blt.w	8012f92 <__ieee754_powf+0x56a>
 8012a94:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012a98:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012a9c:	fa48 f703 	asr.w	r7, r8, r3
 8012aa0:	fa07 f303 	lsl.w	r3, r7, r3
 8012aa4:	4543      	cmp	r3, r8
 8012aa6:	f040 8274 	bne.w	8012f92 <__ieee754_powf+0x56a>
 8012aaa:	f007 0701 	and.w	r7, r7, #1
 8012aae:	f1c7 0702 	rsb	r7, r7, #2
 8012ab2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012ab6:	d11f      	bne.n	8012af8 <__ieee754_powf+0xd0>
 8012ab8:	2c00      	cmp	r4, #0
 8012aba:	f280 8267 	bge.w	8012f8c <__ieee754_powf+0x564>
 8012abe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012ac2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012ac6:	e7c7      	b.n	8012a58 <__ieee754_powf+0x30>
 8012ac8:	2700      	movs	r7, #0
 8012aca:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012ace:	d1f0      	bne.n	8012ab2 <__ieee754_powf+0x8a>
 8012ad0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012ad4:	f000 8254 	beq.w	8012f80 <__ieee754_powf+0x558>
 8012ad8:	dd08      	ble.n	8012aec <__ieee754_powf+0xc4>
 8012ada:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8012de4 <__ieee754_powf+0x3bc>
 8012ade:	2c00      	cmp	r4, #0
 8012ae0:	bfa8      	it	ge
 8012ae2:	eeb0 0a68 	vmovge.f32	s0, s17
 8012ae6:	e7b7      	b.n	8012a58 <__ieee754_powf+0x30>
 8012ae8:	2702      	movs	r7, #2
 8012aea:	e7ee      	b.n	8012aca <__ieee754_powf+0xa2>
 8012aec:	2c00      	cmp	r4, #0
 8012aee:	f280 824a 	bge.w	8012f86 <__ieee754_powf+0x55e>
 8012af2:	eeb1 0a68 	vneg.f32	s0, s17
 8012af6:	e7af      	b.n	8012a58 <__ieee754_powf+0x30>
 8012af8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012afc:	d102      	bne.n	8012b04 <__ieee754_powf+0xdc>
 8012afe:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012b02:	e7a9      	b.n	8012a58 <__ieee754_powf+0x30>
 8012b04:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012b08:	eeb0 0a48 	vmov.f32	s0, s16
 8012b0c:	d107      	bne.n	8012b1e <__ieee754_powf+0xf6>
 8012b0e:	2e00      	cmp	r6, #0
 8012b10:	db05      	blt.n	8012b1e <__ieee754_powf+0xf6>
 8012b12:	ecbd 8b02 	vpop	{d8}
 8012b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b1a:	f000 bb8f 	b.w	801323c <__ieee754_sqrtf>
 8012b1e:	f000 ffa5 	bl	8013a6c <fabsf>
 8012b22:	b125      	cbz	r5, 8012b2e <__ieee754_powf+0x106>
 8012b24:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8012b28:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012b2c:	d116      	bne.n	8012b5c <__ieee754_powf+0x134>
 8012b2e:	2c00      	cmp	r4, #0
 8012b30:	bfbc      	itt	lt
 8012b32:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012b36:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012b3a:	2e00      	cmp	r6, #0
 8012b3c:	da8c      	bge.n	8012a58 <__ieee754_powf+0x30>
 8012b3e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012b42:	ea55 0307 	orrs.w	r3, r5, r7
 8012b46:	d104      	bne.n	8012b52 <__ieee754_powf+0x12a>
 8012b48:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012b4c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012b50:	e782      	b.n	8012a58 <__ieee754_powf+0x30>
 8012b52:	2f01      	cmp	r7, #1
 8012b54:	d180      	bne.n	8012a58 <__ieee754_powf+0x30>
 8012b56:	eeb1 0a40 	vneg.f32	s0, s0
 8012b5a:	e77d      	b.n	8012a58 <__ieee754_powf+0x30>
 8012b5c:	0ff0      	lsrs	r0, r6, #31
 8012b5e:	3801      	subs	r0, #1
 8012b60:	ea57 0300 	orrs.w	r3, r7, r0
 8012b64:	d104      	bne.n	8012b70 <__ieee754_powf+0x148>
 8012b66:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012b6a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012b6e:	e773      	b.n	8012a58 <__ieee754_powf+0x30>
 8012b70:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012b74:	dd74      	ble.n	8012c60 <__ieee754_powf+0x238>
 8012b76:	4b9c      	ldr	r3, [pc, #624]	; (8012de8 <__ieee754_powf+0x3c0>)
 8012b78:	429d      	cmp	r5, r3
 8012b7a:	dc08      	bgt.n	8012b8e <__ieee754_powf+0x166>
 8012b7c:	2c00      	cmp	r4, #0
 8012b7e:	da0b      	bge.n	8012b98 <__ieee754_powf+0x170>
 8012b80:	2000      	movs	r0, #0
 8012b82:	ecbd 8b02 	vpop	{d8}
 8012b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b8a:	f000 be95 	b.w	80138b8 <__math_oflowf>
 8012b8e:	4b97      	ldr	r3, [pc, #604]	; (8012dec <__ieee754_powf+0x3c4>)
 8012b90:	429d      	cmp	r5, r3
 8012b92:	dd08      	ble.n	8012ba6 <__ieee754_powf+0x17e>
 8012b94:	2c00      	cmp	r4, #0
 8012b96:	dcf3      	bgt.n	8012b80 <__ieee754_powf+0x158>
 8012b98:	2000      	movs	r0, #0
 8012b9a:	ecbd 8b02 	vpop	{d8}
 8012b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba2:	f000 be83 	b.w	80138ac <__math_uflowf>
 8012ba6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012baa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012bae:	eddf 6a90 	vldr	s13, [pc, #576]	; 8012df0 <__ieee754_powf+0x3c8>
 8012bb2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012bb6:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012bba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012bbe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012bc2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bca:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012df4 <__ieee754_powf+0x3cc>
 8012bce:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8012bd2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8012df8 <__ieee754_powf+0x3d0>
 8012bd6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012bda:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8012dfc <__ieee754_powf+0x3d4>
 8012bde:	eef0 6a67 	vmov.f32	s13, s15
 8012be2:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012be6:	ee16 3a90 	vmov	r3, s13
 8012bea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012bee:	f023 030f 	bic.w	r3, r3, #15
 8012bf2:	ee00 3a90 	vmov	s1, r3
 8012bf6:	eee0 0a47 	vfms.f32	s1, s0, s14
 8012bfa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012bfe:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8012c02:	f024 040f 	bic.w	r4, r4, #15
 8012c06:	ee07 4a10 	vmov	s14, r4
 8012c0a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012c0e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012c12:	ee07 3a90 	vmov	s15, r3
 8012c16:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012c1a:	3f01      	subs	r7, #1
 8012c1c:	ea57 0200 	orrs.w	r2, r7, r0
 8012c20:	ee07 4a10 	vmov	s14, r4
 8012c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c28:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012c2c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012c30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012c34:	ee17 4a10 	vmov	r4, s14
 8012c38:	bf08      	it	eq
 8012c3a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8012c3e:	2c00      	cmp	r4, #0
 8012c40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012c44:	f340 817e 	ble.w	8012f44 <__ieee754_powf+0x51c>
 8012c48:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8012c4c:	f340 80f8 	ble.w	8012e40 <__ieee754_powf+0x418>
 8012c50:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c58:	bf4c      	ite	mi
 8012c5a:	2001      	movmi	r0, #1
 8012c5c:	2000      	movpl	r0, #0
 8012c5e:	e790      	b.n	8012b82 <__ieee754_powf+0x15a>
 8012c60:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8012c64:	bf01      	itttt	eq
 8012c66:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8012e00 <__ieee754_powf+0x3d8>
 8012c6a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012c6e:	f06f 0217 	mvneq.w	r2, #23
 8012c72:	ee17 5a90 	vmoveq	r5, s15
 8012c76:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012c7a:	bf18      	it	ne
 8012c7c:	2200      	movne	r2, #0
 8012c7e:	3b7f      	subs	r3, #127	; 0x7f
 8012c80:	4413      	add	r3, r2
 8012c82:	4a60      	ldr	r2, [pc, #384]	; (8012e04 <__ieee754_powf+0x3dc>)
 8012c84:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8012c88:	4295      	cmp	r5, r2
 8012c8a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8012c8e:	dd06      	ble.n	8012c9e <__ieee754_powf+0x276>
 8012c90:	4a5d      	ldr	r2, [pc, #372]	; (8012e08 <__ieee754_powf+0x3e0>)
 8012c92:	4295      	cmp	r5, r2
 8012c94:	f340 80a4 	ble.w	8012de0 <__ieee754_powf+0x3b8>
 8012c98:	3301      	adds	r3, #1
 8012c9a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012c9e:	2500      	movs	r5, #0
 8012ca0:	4a5a      	ldr	r2, [pc, #360]	; (8012e0c <__ieee754_powf+0x3e4>)
 8012ca2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012ca6:	ee07 1a90 	vmov	s15, r1
 8012caa:	ed92 7a00 	vldr	s14, [r2]
 8012cae:	4a58      	ldr	r2, [pc, #352]	; (8012e10 <__ieee754_powf+0x3e8>)
 8012cb0:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012cb4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012cb8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8012cbc:	1049      	asrs	r1, r1, #1
 8012cbe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8012cc2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8012cc6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8012cca:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8012cce:	ee06 1a10 	vmov	s12, r1
 8012cd2:	ee65 4a26 	vmul.f32	s9, s10, s13
 8012cd6:	ee36 7a47 	vsub.f32	s14, s12, s14
 8012cda:	ee14 6a90 	vmov	r6, s9
 8012cde:	4016      	ands	r6, r2
 8012ce0:	ee05 6a90 	vmov	s11, r6
 8012ce4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8012ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012cec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012e14 <__ieee754_powf+0x3ec>
 8012cf0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8012cf4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8012cf8:	ee25 6a26 	vmul.f32	s12, s10, s13
 8012cfc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012e18 <__ieee754_powf+0x3f0>
 8012d00:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012d04:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012e1c <__ieee754_powf+0x3f4>
 8012d08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012d0c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012df0 <__ieee754_powf+0x3c8>
 8012d10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d14:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012e20 <__ieee754_powf+0x3f8>
 8012d18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012d1c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8012e24 <__ieee754_powf+0x3fc>
 8012d20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d24:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8012d28:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8012d2c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012d30:	eee5 6a07 	vfma.f32	s13, s10, s14
 8012d34:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8012d38:	eef0 7a45 	vmov.f32	s15, s10
 8012d3c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d44:	ee17 1a90 	vmov	r1, s15
 8012d48:	4011      	ands	r1, r2
 8012d4a:	ee07 1a90 	vmov	s15, r1
 8012d4e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8012d52:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8012d56:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012d5a:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012d5e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012d62:	eeb0 6a47 	vmov.f32	s12, s14
 8012d66:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012d6a:	ee16 1a10 	vmov	r1, s12
 8012d6e:	4011      	ands	r1, r2
 8012d70:	ee06 1a90 	vmov	s13, r1
 8012d74:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8012d78:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012e28 <__ieee754_powf+0x400>
 8012d7c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8012e2c <__ieee754_powf+0x404>
 8012d80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012d84:	ee06 1a10 	vmov	s12, r1
 8012d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d8c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012e30 <__ieee754_powf+0x408>
 8012d90:	4928      	ldr	r1, [pc, #160]	; (8012e34 <__ieee754_powf+0x40c>)
 8012d92:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012d96:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8012d9a:	edd1 7a00 	vldr	s15, [r1]
 8012d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012da2:	ee07 3a90 	vmov	s15, r3
 8012da6:	4b24      	ldr	r3, [pc, #144]	; (8012e38 <__ieee754_powf+0x410>)
 8012da8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012dac:	eef0 7a47 	vmov.f32	s15, s14
 8012db0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012db4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012db8:	edd5 0a00 	vldr	s1, [r5]
 8012dbc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012dc4:	ee17 3a90 	vmov	r3, s15
 8012dc8:	4013      	ands	r3, r2
 8012dca:	ee07 3a90 	vmov	s15, r3
 8012dce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8012dd2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8012dd6:	eee6 6a65 	vfms.f32	s13, s12, s11
 8012dda:	ee77 7a66 	vsub.f32	s15, s14, s13
 8012dde:	e70e      	b.n	8012bfe <__ieee754_powf+0x1d6>
 8012de0:	2501      	movs	r5, #1
 8012de2:	e75d      	b.n	8012ca0 <__ieee754_powf+0x278>
 8012de4:	00000000 	.word	0x00000000
 8012de8:	3f7ffff3 	.word	0x3f7ffff3
 8012dec:	3f800007 	.word	0x3f800007
 8012df0:	3eaaaaab 	.word	0x3eaaaaab
 8012df4:	3fb8aa3b 	.word	0x3fb8aa3b
 8012df8:	36eca570 	.word	0x36eca570
 8012dfc:	3fb8aa00 	.word	0x3fb8aa00
 8012e00:	4b800000 	.word	0x4b800000
 8012e04:	001cc471 	.word	0x001cc471
 8012e08:	005db3d6 	.word	0x005db3d6
 8012e0c:	08014474 	.word	0x08014474
 8012e10:	fffff000 	.word	0xfffff000
 8012e14:	3e6c3255 	.word	0x3e6c3255
 8012e18:	3e53f142 	.word	0x3e53f142
 8012e1c:	3e8ba305 	.word	0x3e8ba305
 8012e20:	3edb6db7 	.word	0x3edb6db7
 8012e24:	3f19999a 	.word	0x3f19999a
 8012e28:	3f76384f 	.word	0x3f76384f
 8012e2c:	3f763800 	.word	0x3f763800
 8012e30:	369dc3a0 	.word	0x369dc3a0
 8012e34:	08014484 	.word	0x08014484
 8012e38:	0801447c 	.word	0x0801447c
 8012e3c:	3338aa3c 	.word	0x3338aa3c
 8012e40:	f040 8095 	bne.w	8012f6e <__ieee754_powf+0x546>
 8012e44:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8012e3c <__ieee754_powf+0x414>
 8012e48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e4c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012e50:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e58:	f73f aefa 	bgt.w	8012c50 <__ieee754_powf+0x228>
 8012e5c:	15db      	asrs	r3, r3, #23
 8012e5e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8012e62:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012e66:	4103      	asrs	r3, r0
 8012e68:	4423      	add	r3, r4
 8012e6a:	494b      	ldr	r1, [pc, #300]	; (8012f98 <__ieee754_powf+0x570>)
 8012e6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012e70:	3a7f      	subs	r2, #127	; 0x7f
 8012e72:	4111      	asrs	r1, r2
 8012e74:	ea23 0101 	bic.w	r1, r3, r1
 8012e78:	ee07 1a10 	vmov	s14, r1
 8012e7c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012e80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012e84:	f1c2 0217 	rsb	r2, r2, #23
 8012e88:	4110      	asrs	r0, r2
 8012e8a:	2c00      	cmp	r4, #0
 8012e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e90:	bfb8      	it	lt
 8012e92:	4240      	neglt	r0, r0
 8012e94:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012e98:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8012f9c <__ieee754_powf+0x574>
 8012e9c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8012fa0 <__ieee754_powf+0x578>
 8012ea0:	ee17 3a10 	vmov	r3, s14
 8012ea4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012ea8:	f023 030f 	bic.w	r3, r3, #15
 8012eac:	ee07 3a10 	vmov	s14, r3
 8012eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012eb4:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012eb8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012ebc:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012fa4 <__ieee754_powf+0x57c>
 8012ec0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8012ec4:	eef0 7a40 	vmov.f32	s15, s0
 8012ec8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012ecc:	eeb0 6a67 	vmov.f32	s12, s15
 8012ed0:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012ed4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012ed8:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012edc:	eddf 6a32 	vldr	s13, [pc, #200]	; 8012fa8 <__ieee754_powf+0x580>
 8012ee0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8012fac <__ieee754_powf+0x584>
 8012ee4:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012ee8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8012fb0 <__ieee754_powf+0x588>
 8012eec:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012ef0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8012fb4 <__ieee754_powf+0x58c>
 8012ef4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012ef8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8012fb8 <__ieee754_powf+0x590>
 8012efc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012f00:	eef0 6a67 	vmov.f32	s13, s15
 8012f04:	eee6 6a47 	vfms.f32	s13, s12, s14
 8012f08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8012f0c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8012f10:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8012f14:	eea7 0a80 	vfma.f32	s0, s15, s0
 8012f18:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012f1c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012f20:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012f24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012f28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012f2c:	ee10 3a10 	vmov	r3, s0
 8012f30:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012f38:	da1f      	bge.n	8012f7a <__ieee754_powf+0x552>
 8012f3a:	f000 fdf3 	bl	8013b24 <scalbnf>
 8012f3e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012f42:	e589      	b.n	8012a58 <__ieee754_powf+0x30>
 8012f44:	4a1d      	ldr	r2, [pc, #116]	; (8012fbc <__ieee754_powf+0x594>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	dd07      	ble.n	8012f5a <__ieee754_powf+0x532>
 8012f4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f52:	bf4c      	ite	mi
 8012f54:	2001      	movmi	r0, #1
 8012f56:	2000      	movpl	r0, #0
 8012f58:	e61f      	b.n	8012b9a <__ieee754_powf+0x172>
 8012f5a:	d108      	bne.n	8012f6e <__ieee754_powf+0x546>
 8012f5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f60:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f68:	f6ff af78 	blt.w	8012e5c <__ieee754_powf+0x434>
 8012f6c:	e7ed      	b.n	8012f4a <__ieee754_powf+0x522>
 8012f6e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012f72:	f73f af73 	bgt.w	8012e5c <__ieee754_powf+0x434>
 8012f76:	2000      	movs	r0, #0
 8012f78:	e78c      	b.n	8012e94 <__ieee754_powf+0x46c>
 8012f7a:	ee00 3a10 	vmov	s0, r3
 8012f7e:	e7de      	b.n	8012f3e <__ieee754_powf+0x516>
 8012f80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012f84:	e568      	b.n	8012a58 <__ieee754_powf+0x30>
 8012f86:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012fc0 <__ieee754_powf+0x598>
 8012f8a:	e565      	b.n	8012a58 <__ieee754_powf+0x30>
 8012f8c:	eeb0 0a48 	vmov.f32	s0, s16
 8012f90:	e562      	b.n	8012a58 <__ieee754_powf+0x30>
 8012f92:	2700      	movs	r7, #0
 8012f94:	e58d      	b.n	8012ab2 <__ieee754_powf+0x8a>
 8012f96:	bf00      	nop
 8012f98:	007fffff 	.word	0x007fffff
 8012f9c:	35bfbe8c 	.word	0x35bfbe8c
 8012fa0:	3f317200 	.word	0x3f317200
 8012fa4:	3f317218 	.word	0x3f317218
 8012fa8:	b5ddea0e 	.word	0xb5ddea0e
 8012fac:	3331bb4c 	.word	0x3331bb4c
 8012fb0:	388ab355 	.word	0x388ab355
 8012fb4:	bb360b61 	.word	0xbb360b61
 8012fb8:	3e2aaaab 	.word	0x3e2aaaab
 8012fbc:	43160000 	.word	0x43160000
 8012fc0:	00000000 	.word	0x00000000

08012fc4 <__ieee754_rem_pio2f>:
 8012fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fc6:	ee10 6a10 	vmov	r6, s0
 8012fca:	4b8e      	ldr	r3, [pc, #568]	; (8013204 <__ieee754_rem_pio2f+0x240>)
 8012fcc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012fd0:	429d      	cmp	r5, r3
 8012fd2:	b087      	sub	sp, #28
 8012fd4:	eef0 7a40 	vmov.f32	s15, s0
 8012fd8:	4604      	mov	r4, r0
 8012fda:	dc05      	bgt.n	8012fe8 <__ieee754_rem_pio2f+0x24>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	ed80 0a00 	vstr	s0, [r0]
 8012fe2:	6043      	str	r3, [r0, #4]
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	e01a      	b.n	801301e <__ieee754_rem_pio2f+0x5a>
 8012fe8:	4b87      	ldr	r3, [pc, #540]	; (8013208 <__ieee754_rem_pio2f+0x244>)
 8012fea:	429d      	cmp	r5, r3
 8012fec:	dc46      	bgt.n	801307c <__ieee754_rem_pio2f+0xb8>
 8012fee:	2e00      	cmp	r6, #0
 8012ff0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801320c <__ieee754_rem_pio2f+0x248>
 8012ff4:	4b86      	ldr	r3, [pc, #536]	; (8013210 <__ieee754_rem_pio2f+0x24c>)
 8012ff6:	f025 050f 	bic.w	r5, r5, #15
 8012ffa:	dd1f      	ble.n	801303c <__ieee754_rem_pio2f+0x78>
 8012ffc:	429d      	cmp	r5, r3
 8012ffe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013002:	d00e      	beq.n	8013022 <__ieee754_rem_pio2f+0x5e>
 8013004:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013214 <__ieee754_rem_pio2f+0x250>
 8013008:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801300c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013010:	ed80 0a00 	vstr	s0, [r0]
 8013014:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013018:	2001      	movs	r0, #1
 801301a:	edc4 7a01 	vstr	s15, [r4, #4]
 801301e:	b007      	add	sp, #28
 8013020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013022:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013218 <__ieee754_rem_pio2f+0x254>
 8013026:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801321c <__ieee754_rem_pio2f+0x258>
 801302a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801302e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013032:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013036:	edc0 6a00 	vstr	s13, [r0]
 801303a:	e7eb      	b.n	8013014 <__ieee754_rem_pio2f+0x50>
 801303c:	429d      	cmp	r5, r3
 801303e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013042:	d00e      	beq.n	8013062 <__ieee754_rem_pio2f+0x9e>
 8013044:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013214 <__ieee754_rem_pio2f+0x250>
 8013048:	ee37 0a87 	vadd.f32	s0, s15, s14
 801304c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013050:	ed80 0a00 	vstr	s0, [r0]
 8013054:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013058:	f04f 30ff 	mov.w	r0, #4294967295
 801305c:	edc4 7a01 	vstr	s15, [r4, #4]
 8013060:	e7dd      	b.n	801301e <__ieee754_rem_pio2f+0x5a>
 8013062:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013218 <__ieee754_rem_pio2f+0x254>
 8013066:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801321c <__ieee754_rem_pio2f+0x258>
 801306a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801306e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013072:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013076:	edc0 6a00 	vstr	s13, [r0]
 801307a:	e7eb      	b.n	8013054 <__ieee754_rem_pio2f+0x90>
 801307c:	4b68      	ldr	r3, [pc, #416]	; (8013220 <__ieee754_rem_pio2f+0x25c>)
 801307e:	429d      	cmp	r5, r3
 8013080:	dc72      	bgt.n	8013168 <__ieee754_rem_pio2f+0x1a4>
 8013082:	f000 fcf3 	bl	8013a6c <fabsf>
 8013086:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013224 <__ieee754_rem_pio2f+0x260>
 801308a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801308e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801309a:	ee17 0a90 	vmov	r0, s15
 801309e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801320c <__ieee754_rem_pio2f+0x248>
 80130a2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80130a6:	281f      	cmp	r0, #31
 80130a8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013214 <__ieee754_rem_pio2f+0x250>
 80130ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130b0:	eeb1 6a47 	vneg.f32	s12, s14
 80130b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80130b8:	ee16 2a90 	vmov	r2, s13
 80130bc:	dc1c      	bgt.n	80130f8 <__ieee754_rem_pio2f+0x134>
 80130be:	495a      	ldr	r1, [pc, #360]	; (8013228 <__ieee754_rem_pio2f+0x264>)
 80130c0:	1e47      	subs	r7, r0, #1
 80130c2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80130c6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80130ca:	428b      	cmp	r3, r1
 80130cc:	d014      	beq.n	80130f8 <__ieee754_rem_pio2f+0x134>
 80130ce:	6022      	str	r2, [r4, #0]
 80130d0:	ed94 7a00 	vldr	s14, [r4]
 80130d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80130d8:	2e00      	cmp	r6, #0
 80130da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80130de:	ed84 0a01 	vstr	s0, [r4, #4]
 80130e2:	da9c      	bge.n	801301e <__ieee754_rem_pio2f+0x5a>
 80130e4:	eeb1 7a47 	vneg.f32	s14, s14
 80130e8:	eeb1 0a40 	vneg.f32	s0, s0
 80130ec:	ed84 7a00 	vstr	s14, [r4]
 80130f0:	ed84 0a01 	vstr	s0, [r4, #4]
 80130f4:	4240      	negs	r0, r0
 80130f6:	e792      	b.n	801301e <__ieee754_rem_pio2f+0x5a>
 80130f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80130fc:	15eb      	asrs	r3, r5, #23
 80130fe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8013102:	2d08      	cmp	r5, #8
 8013104:	dde3      	ble.n	80130ce <__ieee754_rem_pio2f+0x10a>
 8013106:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013218 <__ieee754_rem_pio2f+0x254>
 801310a:	eddf 5a44 	vldr	s11, [pc, #272]	; 801321c <__ieee754_rem_pio2f+0x258>
 801310e:	eef0 6a40 	vmov.f32	s13, s0
 8013112:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013116:	ee30 0a66 	vsub.f32	s0, s0, s13
 801311a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801311e:	eef0 7a40 	vmov.f32	s15, s0
 8013122:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013126:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801312a:	ee15 2a90 	vmov	r2, s11
 801312e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013132:	1a5b      	subs	r3, r3, r1
 8013134:	2b19      	cmp	r3, #25
 8013136:	dc04      	bgt.n	8013142 <__ieee754_rem_pio2f+0x17e>
 8013138:	edc4 5a00 	vstr	s11, [r4]
 801313c:	eeb0 0a66 	vmov.f32	s0, s13
 8013140:	e7c6      	b.n	80130d0 <__ieee754_rem_pio2f+0x10c>
 8013142:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801322c <__ieee754_rem_pio2f+0x268>
 8013146:	eeb0 0a66 	vmov.f32	s0, s13
 801314a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801314e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013152:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013230 <__ieee754_rem_pio2f+0x26c>
 8013156:	eee6 7a25 	vfma.f32	s15, s12, s11
 801315a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801315e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013162:	ed84 7a00 	vstr	s14, [r4]
 8013166:	e7b3      	b.n	80130d0 <__ieee754_rem_pio2f+0x10c>
 8013168:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801316c:	db06      	blt.n	801317c <__ieee754_rem_pio2f+0x1b8>
 801316e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013172:	edc0 7a01 	vstr	s15, [r0, #4]
 8013176:	edc0 7a00 	vstr	s15, [r0]
 801317a:	e733      	b.n	8012fe4 <__ieee754_rem_pio2f+0x20>
 801317c:	15ea      	asrs	r2, r5, #23
 801317e:	3a86      	subs	r2, #134	; 0x86
 8013180:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013184:	ee07 3a90 	vmov	s15, r3
 8013188:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801318c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013234 <__ieee754_rem_pio2f+0x270>
 8013190:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013198:	ed8d 7a03 	vstr	s14, [sp, #12]
 801319c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80131a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80131a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80131a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131ac:	ed8d 7a04 	vstr	s14, [sp, #16]
 80131b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80131b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80131b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131bc:	edcd 7a05 	vstr	s15, [sp, #20]
 80131c0:	d11e      	bne.n	8013200 <__ieee754_rem_pio2f+0x23c>
 80131c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80131c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ca:	bf14      	ite	ne
 80131cc:	2302      	movne	r3, #2
 80131ce:	2301      	moveq	r3, #1
 80131d0:	4919      	ldr	r1, [pc, #100]	; (8013238 <__ieee754_rem_pio2f+0x274>)
 80131d2:	9101      	str	r1, [sp, #4]
 80131d4:	2102      	movs	r1, #2
 80131d6:	9100      	str	r1, [sp, #0]
 80131d8:	a803      	add	r0, sp, #12
 80131da:	4621      	mov	r1, r4
 80131dc:	f000 f892 	bl	8013304 <__kernel_rem_pio2f>
 80131e0:	2e00      	cmp	r6, #0
 80131e2:	f6bf af1c 	bge.w	801301e <__ieee754_rem_pio2f+0x5a>
 80131e6:	edd4 7a00 	vldr	s15, [r4]
 80131ea:	eef1 7a67 	vneg.f32	s15, s15
 80131ee:	edc4 7a00 	vstr	s15, [r4]
 80131f2:	edd4 7a01 	vldr	s15, [r4, #4]
 80131f6:	eef1 7a67 	vneg.f32	s15, s15
 80131fa:	edc4 7a01 	vstr	s15, [r4, #4]
 80131fe:	e779      	b.n	80130f4 <__ieee754_rem_pio2f+0x130>
 8013200:	2303      	movs	r3, #3
 8013202:	e7e5      	b.n	80131d0 <__ieee754_rem_pio2f+0x20c>
 8013204:	3f490fd8 	.word	0x3f490fd8
 8013208:	4016cbe3 	.word	0x4016cbe3
 801320c:	3fc90f80 	.word	0x3fc90f80
 8013210:	3fc90fd0 	.word	0x3fc90fd0
 8013214:	37354443 	.word	0x37354443
 8013218:	37354400 	.word	0x37354400
 801321c:	2e85a308 	.word	0x2e85a308
 8013220:	43490f80 	.word	0x43490f80
 8013224:	3f22f984 	.word	0x3f22f984
 8013228:	0801448c 	.word	0x0801448c
 801322c:	2e85a300 	.word	0x2e85a300
 8013230:	248d3132 	.word	0x248d3132
 8013234:	43800000 	.word	0x43800000
 8013238:	0801450c 	.word	0x0801450c

0801323c <__ieee754_sqrtf>:
 801323c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013240:	4770      	bx	lr
	...

08013244 <__kernel_cosf>:
 8013244:	ee10 3a10 	vmov	r3, s0
 8013248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801324c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013250:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013254:	da05      	bge.n	8013262 <__kernel_cosf+0x1e>
 8013256:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801325a:	ee17 2a90 	vmov	r2, s15
 801325e:	2a00      	cmp	r2, #0
 8013260:	d03d      	beq.n	80132de <__kernel_cosf+0x9a>
 8013262:	ee60 5a00 	vmul.f32	s11, s0, s0
 8013266:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80132e4 <__kernel_cosf+0xa0>
 801326a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80132e8 <__kernel_cosf+0xa4>
 801326e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80132ec <__kernel_cosf+0xa8>
 8013272:	4a1f      	ldr	r2, [pc, #124]	; (80132f0 <__kernel_cosf+0xac>)
 8013274:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013278:	4293      	cmp	r3, r2
 801327a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80132f4 <__kernel_cosf+0xb0>
 801327e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013282:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80132f8 <__kernel_cosf+0xb4>
 8013286:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801328a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80132fc <__kernel_cosf+0xb8>
 801328e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013292:	eeb0 7a66 	vmov.f32	s14, s13
 8013296:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801329a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801329e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80132a2:	ee67 6a25 	vmul.f32	s13, s14, s11
 80132a6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80132aa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80132ae:	dc04      	bgt.n	80132ba <__kernel_cosf+0x76>
 80132b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80132b4:	ee36 0a47 	vsub.f32	s0, s12, s14
 80132b8:	4770      	bx	lr
 80132ba:	4a11      	ldr	r2, [pc, #68]	; (8013300 <__kernel_cosf+0xbc>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	bfda      	itte	le
 80132c0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80132c4:	ee06 3a90 	vmovle	s13, r3
 80132c8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80132cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80132d0:	ee36 0a66 	vsub.f32	s0, s12, s13
 80132d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80132dc:	4770      	bx	lr
 80132de:	eeb0 0a46 	vmov.f32	s0, s12
 80132e2:	4770      	bx	lr
 80132e4:	ad47d74e 	.word	0xad47d74e
 80132e8:	310f74f6 	.word	0x310f74f6
 80132ec:	3d2aaaab 	.word	0x3d2aaaab
 80132f0:	3e999999 	.word	0x3e999999
 80132f4:	b493f27c 	.word	0xb493f27c
 80132f8:	37d00d01 	.word	0x37d00d01
 80132fc:	bab60b61 	.word	0xbab60b61
 8013300:	3f480000 	.word	0x3f480000

08013304 <__kernel_rem_pio2f>:
 8013304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013308:	ed2d 8b04 	vpush	{d8-d9}
 801330c:	b0d9      	sub	sp, #356	; 0x164
 801330e:	4688      	mov	r8, r1
 8013310:	9002      	str	r0, [sp, #8]
 8013312:	49bb      	ldr	r1, [pc, #748]	; (8013600 <__kernel_rem_pio2f+0x2fc>)
 8013314:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013316:	9301      	str	r3, [sp, #4]
 8013318:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801331c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8013320:	1e59      	subs	r1, r3, #1
 8013322:	1d13      	adds	r3, r2, #4
 8013324:	db27      	blt.n	8013376 <__kernel_rem_pio2f+0x72>
 8013326:	f1b2 0b03 	subs.w	fp, r2, #3
 801332a:	bf48      	it	mi
 801332c:	f102 0b04 	addmi.w	fp, r2, #4
 8013330:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013334:	1c45      	adds	r5, r0, #1
 8013336:	00ec      	lsls	r4, r5, #3
 8013338:	1a47      	subs	r7, r0, r1
 801333a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013610 <__kernel_rem_pio2f+0x30c>
 801333e:	9403      	str	r4, [sp, #12]
 8013340:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013344:	eb0a 0c01 	add.w	ip, sl, r1
 8013348:	ae1c      	add	r6, sp, #112	; 0x70
 801334a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801334e:	2400      	movs	r4, #0
 8013350:	4564      	cmp	r4, ip
 8013352:	dd12      	ble.n	801337a <__kernel_rem_pio2f+0x76>
 8013354:	9b01      	ldr	r3, [sp, #4]
 8013356:	ac1c      	add	r4, sp, #112	; 0x70
 8013358:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801335c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8013360:	f04f 0c00 	mov.w	ip, #0
 8013364:	45d4      	cmp	ip, sl
 8013366:	dc27      	bgt.n	80133b8 <__kernel_rem_pio2f+0xb4>
 8013368:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801336c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013610 <__kernel_rem_pio2f+0x30c>
 8013370:	4627      	mov	r7, r4
 8013372:	2600      	movs	r6, #0
 8013374:	e016      	b.n	80133a4 <__kernel_rem_pio2f+0xa0>
 8013376:	2000      	movs	r0, #0
 8013378:	e7dc      	b.n	8013334 <__kernel_rem_pio2f+0x30>
 801337a:	42e7      	cmn	r7, r4
 801337c:	bf5d      	ittte	pl
 801337e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8013382:	ee07 3a90 	vmovpl	s15, r3
 8013386:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801338a:	eef0 7a47 	vmovmi.f32	s15, s14
 801338e:	ece6 7a01 	vstmia	r6!, {s15}
 8013392:	3401      	adds	r4, #1
 8013394:	e7dc      	b.n	8013350 <__kernel_rem_pio2f+0x4c>
 8013396:	ecf9 6a01 	vldmia	r9!, {s13}
 801339a:	ed97 7a00 	vldr	s14, [r7]
 801339e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80133a2:	3601      	adds	r6, #1
 80133a4:	428e      	cmp	r6, r1
 80133a6:	f1a7 0704 	sub.w	r7, r7, #4
 80133aa:	ddf4      	ble.n	8013396 <__kernel_rem_pio2f+0x92>
 80133ac:	eceb 7a01 	vstmia	fp!, {s15}
 80133b0:	f10c 0c01 	add.w	ip, ip, #1
 80133b4:	3404      	adds	r4, #4
 80133b6:	e7d5      	b.n	8013364 <__kernel_rem_pio2f+0x60>
 80133b8:	ab08      	add	r3, sp, #32
 80133ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80133be:	eddf 8a93 	vldr	s17, [pc, #588]	; 801360c <__kernel_rem_pio2f+0x308>
 80133c2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013608 <__kernel_rem_pio2f+0x304>
 80133c6:	9304      	str	r3, [sp, #16]
 80133c8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80133cc:	4656      	mov	r6, sl
 80133ce:	00b3      	lsls	r3, r6, #2
 80133d0:	9305      	str	r3, [sp, #20]
 80133d2:	ab58      	add	r3, sp, #352	; 0x160
 80133d4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80133d8:	ac08      	add	r4, sp, #32
 80133da:	ab44      	add	r3, sp, #272	; 0x110
 80133dc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80133e0:	46a4      	mov	ip, r4
 80133e2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80133e6:	4637      	mov	r7, r6
 80133e8:	2f00      	cmp	r7, #0
 80133ea:	f1a0 0004 	sub.w	r0, r0, #4
 80133ee:	dc4f      	bgt.n	8013490 <__kernel_rem_pio2f+0x18c>
 80133f0:	4628      	mov	r0, r5
 80133f2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80133f6:	f000 fb95 	bl	8013b24 <scalbnf>
 80133fa:	eeb0 8a40 	vmov.f32	s16, s0
 80133fe:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013402:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013406:	f000 fb45 	bl	8013a94 <floorf>
 801340a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801340e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013412:	2d00      	cmp	r5, #0
 8013414:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013418:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801341c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013420:	ee17 9a90 	vmov	r9, s15
 8013424:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013428:	dd44      	ble.n	80134b4 <__kernel_rem_pio2f+0x1b0>
 801342a:	f106 3cff 	add.w	ip, r6, #4294967295
 801342e:	ab08      	add	r3, sp, #32
 8013430:	f1c5 0e08 	rsb	lr, r5, #8
 8013434:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013438:	fa47 f00e 	asr.w	r0, r7, lr
 801343c:	4481      	add	r9, r0
 801343e:	fa00 f00e 	lsl.w	r0, r0, lr
 8013442:	1a3f      	subs	r7, r7, r0
 8013444:	f1c5 0007 	rsb	r0, r5, #7
 8013448:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801344c:	4107      	asrs	r7, r0
 801344e:	2f00      	cmp	r7, #0
 8013450:	dd3f      	ble.n	80134d2 <__kernel_rem_pio2f+0x1ce>
 8013452:	f04f 0e00 	mov.w	lr, #0
 8013456:	f109 0901 	add.w	r9, r9, #1
 801345a:	4673      	mov	r3, lr
 801345c:	4576      	cmp	r6, lr
 801345e:	dc6b      	bgt.n	8013538 <__kernel_rem_pio2f+0x234>
 8013460:	2d00      	cmp	r5, #0
 8013462:	dd04      	ble.n	801346e <__kernel_rem_pio2f+0x16a>
 8013464:	2d01      	cmp	r5, #1
 8013466:	d078      	beq.n	801355a <__kernel_rem_pio2f+0x256>
 8013468:	2d02      	cmp	r5, #2
 801346a:	f000 8081 	beq.w	8013570 <__kernel_rem_pio2f+0x26c>
 801346e:	2f02      	cmp	r7, #2
 8013470:	d12f      	bne.n	80134d2 <__kernel_rem_pio2f+0x1ce>
 8013472:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013476:	ee30 8a48 	vsub.f32	s16, s0, s16
 801347a:	b353      	cbz	r3, 80134d2 <__kernel_rem_pio2f+0x1ce>
 801347c:	4628      	mov	r0, r5
 801347e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013482:	f000 fb4f 	bl	8013b24 <scalbnf>
 8013486:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801348a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801348e:	e020      	b.n	80134d2 <__kernel_rem_pio2f+0x1ce>
 8013490:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013494:	3f01      	subs	r7, #1
 8013496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801349a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801349e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80134a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80134a6:	ecac 0a01 	vstmia	ip!, {s0}
 80134aa:	ed90 0a00 	vldr	s0, [r0]
 80134ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 80134b2:	e799      	b.n	80133e8 <__kernel_rem_pio2f+0xe4>
 80134b4:	d105      	bne.n	80134c2 <__kernel_rem_pio2f+0x1be>
 80134b6:	1e70      	subs	r0, r6, #1
 80134b8:	ab08      	add	r3, sp, #32
 80134ba:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80134be:	11ff      	asrs	r7, r7, #7
 80134c0:	e7c5      	b.n	801344e <__kernel_rem_pio2f+0x14a>
 80134c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80134c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80134ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ce:	da31      	bge.n	8013534 <__kernel_rem_pio2f+0x230>
 80134d0:	2700      	movs	r7, #0
 80134d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80134d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134da:	f040 809b 	bne.w	8013614 <__kernel_rem_pio2f+0x310>
 80134de:	1e74      	subs	r4, r6, #1
 80134e0:	46a4      	mov	ip, r4
 80134e2:	2000      	movs	r0, #0
 80134e4:	45d4      	cmp	ip, sl
 80134e6:	da4a      	bge.n	801357e <__kernel_rem_pio2f+0x27a>
 80134e8:	2800      	cmp	r0, #0
 80134ea:	d07a      	beq.n	80135e2 <__kernel_rem_pio2f+0x2de>
 80134ec:	ab08      	add	r3, sp, #32
 80134ee:	3d08      	subs	r5, #8
 80134f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	f000 8081 	beq.w	80135fc <__kernel_rem_pio2f+0x2f8>
 80134fa:	4628      	mov	r0, r5
 80134fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013500:	00a5      	lsls	r5, r4, #2
 8013502:	f000 fb0f 	bl	8013b24 <scalbnf>
 8013506:	aa44      	add	r2, sp, #272	; 0x110
 8013508:	1d2b      	adds	r3, r5, #4
 801350a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801360c <__kernel_rem_pio2f+0x308>
 801350e:	18d1      	adds	r1, r2, r3
 8013510:	4622      	mov	r2, r4
 8013512:	2a00      	cmp	r2, #0
 8013514:	f280 80ae 	bge.w	8013674 <__kernel_rem_pio2f+0x370>
 8013518:	4622      	mov	r2, r4
 801351a:	2a00      	cmp	r2, #0
 801351c:	f2c0 80cc 	blt.w	80136b8 <__kernel_rem_pio2f+0x3b4>
 8013520:	a944      	add	r1, sp, #272	; 0x110
 8013522:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013526:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013604 <__kernel_rem_pio2f+0x300>
 801352a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013610 <__kernel_rem_pio2f+0x30c>
 801352e:	2000      	movs	r0, #0
 8013530:	1aa1      	subs	r1, r4, r2
 8013532:	e0b6      	b.n	80136a2 <__kernel_rem_pio2f+0x39e>
 8013534:	2702      	movs	r7, #2
 8013536:	e78c      	b.n	8013452 <__kernel_rem_pio2f+0x14e>
 8013538:	6820      	ldr	r0, [r4, #0]
 801353a:	b94b      	cbnz	r3, 8013550 <__kernel_rem_pio2f+0x24c>
 801353c:	b118      	cbz	r0, 8013546 <__kernel_rem_pio2f+0x242>
 801353e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013542:	6020      	str	r0, [r4, #0]
 8013544:	2001      	movs	r0, #1
 8013546:	f10e 0e01 	add.w	lr, lr, #1
 801354a:	3404      	adds	r4, #4
 801354c:	4603      	mov	r3, r0
 801354e:	e785      	b.n	801345c <__kernel_rem_pio2f+0x158>
 8013550:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013554:	6020      	str	r0, [r4, #0]
 8013556:	4618      	mov	r0, r3
 8013558:	e7f5      	b.n	8013546 <__kernel_rem_pio2f+0x242>
 801355a:	1e74      	subs	r4, r6, #1
 801355c:	a808      	add	r0, sp, #32
 801355e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013562:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013566:	f10d 0c20 	add.w	ip, sp, #32
 801356a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801356e:	e77e      	b.n	801346e <__kernel_rem_pio2f+0x16a>
 8013570:	1e74      	subs	r4, r6, #1
 8013572:	a808      	add	r0, sp, #32
 8013574:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013578:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801357c:	e7f3      	b.n	8013566 <__kernel_rem_pio2f+0x262>
 801357e:	ab08      	add	r3, sp, #32
 8013580:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013584:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013588:	4318      	orrs	r0, r3
 801358a:	e7ab      	b.n	80134e4 <__kernel_rem_pio2f+0x1e0>
 801358c:	f10c 0c01 	add.w	ip, ip, #1
 8013590:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013594:	2c00      	cmp	r4, #0
 8013596:	d0f9      	beq.n	801358c <__kernel_rem_pio2f+0x288>
 8013598:	9b05      	ldr	r3, [sp, #20]
 801359a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801359e:	eb0d 0003 	add.w	r0, sp, r3
 80135a2:	9b01      	ldr	r3, [sp, #4]
 80135a4:	18f4      	adds	r4, r6, r3
 80135a6:	ab1c      	add	r3, sp, #112	; 0x70
 80135a8:	1c77      	adds	r7, r6, #1
 80135aa:	384c      	subs	r0, #76	; 0x4c
 80135ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135b0:	4466      	add	r6, ip
 80135b2:	42be      	cmp	r6, r7
 80135b4:	f6ff af0b 	blt.w	80133ce <__kernel_rem_pio2f+0xca>
 80135b8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80135bc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80135c0:	ee07 3a90 	vmov	s15, r3
 80135c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135c8:	f04f 0c00 	mov.w	ip, #0
 80135cc:	ece4 7a01 	vstmia	r4!, {s15}
 80135d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013610 <__kernel_rem_pio2f+0x30c>
 80135d4:	46a1      	mov	r9, r4
 80135d6:	458c      	cmp	ip, r1
 80135d8:	dd07      	ble.n	80135ea <__kernel_rem_pio2f+0x2e6>
 80135da:	ece0 7a01 	vstmia	r0!, {s15}
 80135de:	3701      	adds	r7, #1
 80135e0:	e7e7      	b.n	80135b2 <__kernel_rem_pio2f+0x2ae>
 80135e2:	9804      	ldr	r0, [sp, #16]
 80135e4:	f04f 0c01 	mov.w	ip, #1
 80135e8:	e7d2      	b.n	8013590 <__kernel_rem_pio2f+0x28c>
 80135ea:	ecfe 6a01 	vldmia	lr!, {s13}
 80135ee:	ed39 7a01 	vldmdb	r9!, {s14}
 80135f2:	f10c 0c01 	add.w	ip, ip, #1
 80135f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135fa:	e7ec      	b.n	80135d6 <__kernel_rem_pio2f+0x2d2>
 80135fc:	3c01      	subs	r4, #1
 80135fe:	e775      	b.n	80134ec <__kernel_rem_pio2f+0x1e8>
 8013600:	08014850 	.word	0x08014850
 8013604:	08014824 	.word	0x08014824
 8013608:	43800000 	.word	0x43800000
 801360c:	3b800000 	.word	0x3b800000
 8013610:	00000000 	.word	0x00000000
 8013614:	9b03      	ldr	r3, [sp, #12]
 8013616:	eeb0 0a48 	vmov.f32	s0, s16
 801361a:	1a98      	subs	r0, r3, r2
 801361c:	f000 fa82 	bl	8013b24 <scalbnf>
 8013620:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013608 <__kernel_rem_pio2f+0x304>
 8013624:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362c:	db19      	blt.n	8013662 <__kernel_rem_pio2f+0x35e>
 801362e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801360c <__kernel_rem_pio2f+0x308>
 8013632:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013636:	aa08      	add	r2, sp, #32
 8013638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801363c:	1c74      	adds	r4, r6, #1
 801363e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013642:	3508      	adds	r5, #8
 8013644:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801364c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013650:	ee10 3a10 	vmov	r3, s0
 8013654:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013658:	ee17 3a90 	vmov	r3, s15
 801365c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013660:	e74b      	b.n	80134fa <__kernel_rem_pio2f+0x1f6>
 8013662:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013666:	aa08      	add	r2, sp, #32
 8013668:	ee10 3a10 	vmov	r3, s0
 801366c:	4634      	mov	r4, r6
 801366e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013672:	e742      	b.n	80134fa <__kernel_rem_pio2f+0x1f6>
 8013674:	a808      	add	r0, sp, #32
 8013676:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801367a:	9001      	str	r0, [sp, #4]
 801367c:	ee07 0a90 	vmov	s15, r0
 8013680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013684:	3a01      	subs	r2, #1
 8013686:	ee67 7a80 	vmul.f32	s15, s15, s0
 801368a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801368e:	ed61 7a01 	vstmdb	r1!, {s15}
 8013692:	e73e      	b.n	8013512 <__kernel_rem_pio2f+0x20e>
 8013694:	ecfc 6a01 	vldmia	ip!, {s13}
 8013698:	ecb6 7a01 	vldmia	r6!, {s14}
 801369c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80136a0:	3001      	adds	r0, #1
 80136a2:	4550      	cmp	r0, sl
 80136a4:	dc01      	bgt.n	80136aa <__kernel_rem_pio2f+0x3a6>
 80136a6:	4288      	cmp	r0, r1
 80136a8:	ddf4      	ble.n	8013694 <__kernel_rem_pio2f+0x390>
 80136aa:	a858      	add	r0, sp, #352	; 0x160
 80136ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80136b0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80136b4:	3a01      	subs	r2, #1
 80136b6:	e730      	b.n	801351a <__kernel_rem_pio2f+0x216>
 80136b8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80136ba:	2a02      	cmp	r2, #2
 80136bc:	dc09      	bgt.n	80136d2 <__kernel_rem_pio2f+0x3ce>
 80136be:	2a00      	cmp	r2, #0
 80136c0:	dc2a      	bgt.n	8013718 <__kernel_rem_pio2f+0x414>
 80136c2:	d043      	beq.n	801374c <__kernel_rem_pio2f+0x448>
 80136c4:	f009 0007 	and.w	r0, r9, #7
 80136c8:	b059      	add	sp, #356	; 0x164
 80136ca:	ecbd 8b04 	vpop	{d8-d9}
 80136ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136d2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80136d4:	2b03      	cmp	r3, #3
 80136d6:	d1f5      	bne.n	80136c4 <__kernel_rem_pio2f+0x3c0>
 80136d8:	ab30      	add	r3, sp, #192	; 0xc0
 80136da:	442b      	add	r3, r5
 80136dc:	461a      	mov	r2, r3
 80136de:	4619      	mov	r1, r3
 80136e0:	4620      	mov	r0, r4
 80136e2:	2800      	cmp	r0, #0
 80136e4:	f1a1 0104 	sub.w	r1, r1, #4
 80136e8:	dc51      	bgt.n	801378e <__kernel_rem_pio2f+0x48a>
 80136ea:	4621      	mov	r1, r4
 80136ec:	2901      	cmp	r1, #1
 80136ee:	f1a2 0204 	sub.w	r2, r2, #4
 80136f2:	dc5c      	bgt.n	80137ae <__kernel_rem_pio2f+0x4aa>
 80136f4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013610 <__kernel_rem_pio2f+0x30c>
 80136f8:	3304      	adds	r3, #4
 80136fa:	2c01      	cmp	r4, #1
 80136fc:	dc67      	bgt.n	80137ce <__kernel_rem_pio2f+0x4ca>
 80136fe:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013702:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013706:	2f00      	cmp	r7, #0
 8013708:	d167      	bne.n	80137da <__kernel_rem_pio2f+0x4d6>
 801370a:	edc8 6a00 	vstr	s13, [r8]
 801370e:	ed88 7a01 	vstr	s14, [r8, #4]
 8013712:	edc8 7a02 	vstr	s15, [r8, #8]
 8013716:	e7d5      	b.n	80136c4 <__kernel_rem_pio2f+0x3c0>
 8013718:	aa30      	add	r2, sp, #192	; 0xc0
 801371a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013610 <__kernel_rem_pio2f+0x30c>
 801371e:	4413      	add	r3, r2
 8013720:	4622      	mov	r2, r4
 8013722:	2a00      	cmp	r2, #0
 8013724:	da24      	bge.n	8013770 <__kernel_rem_pio2f+0x46c>
 8013726:	b34f      	cbz	r7, 801377c <__kernel_rem_pio2f+0x478>
 8013728:	eef1 7a47 	vneg.f32	s15, s14
 801372c:	edc8 7a00 	vstr	s15, [r8]
 8013730:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013738:	aa31      	add	r2, sp, #196	; 0xc4
 801373a:	2301      	movs	r3, #1
 801373c:	429c      	cmp	r4, r3
 801373e:	da20      	bge.n	8013782 <__kernel_rem_pio2f+0x47e>
 8013740:	b10f      	cbz	r7, 8013746 <__kernel_rem_pio2f+0x442>
 8013742:	eef1 7a67 	vneg.f32	s15, s15
 8013746:	edc8 7a01 	vstr	s15, [r8, #4]
 801374a:	e7bb      	b.n	80136c4 <__kernel_rem_pio2f+0x3c0>
 801374c:	aa30      	add	r2, sp, #192	; 0xc0
 801374e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013610 <__kernel_rem_pio2f+0x30c>
 8013752:	4413      	add	r3, r2
 8013754:	2c00      	cmp	r4, #0
 8013756:	da05      	bge.n	8013764 <__kernel_rem_pio2f+0x460>
 8013758:	b10f      	cbz	r7, 801375e <__kernel_rem_pio2f+0x45a>
 801375a:	eef1 7a67 	vneg.f32	s15, s15
 801375e:	edc8 7a00 	vstr	s15, [r8]
 8013762:	e7af      	b.n	80136c4 <__kernel_rem_pio2f+0x3c0>
 8013764:	ed33 7a01 	vldmdb	r3!, {s14}
 8013768:	3c01      	subs	r4, #1
 801376a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801376e:	e7f1      	b.n	8013754 <__kernel_rem_pio2f+0x450>
 8013770:	ed73 7a01 	vldmdb	r3!, {s15}
 8013774:	3a01      	subs	r2, #1
 8013776:	ee37 7a27 	vadd.f32	s14, s14, s15
 801377a:	e7d2      	b.n	8013722 <__kernel_rem_pio2f+0x41e>
 801377c:	eef0 7a47 	vmov.f32	s15, s14
 8013780:	e7d4      	b.n	801372c <__kernel_rem_pio2f+0x428>
 8013782:	ecb2 7a01 	vldmia	r2!, {s14}
 8013786:	3301      	adds	r3, #1
 8013788:	ee77 7a87 	vadd.f32	s15, s15, s14
 801378c:	e7d6      	b.n	801373c <__kernel_rem_pio2f+0x438>
 801378e:	edd1 7a00 	vldr	s15, [r1]
 8013792:	edd1 6a01 	vldr	s13, [r1, #4]
 8013796:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801379a:	3801      	subs	r0, #1
 801379c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137a0:	ed81 7a00 	vstr	s14, [r1]
 80137a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80137a8:	edc1 7a01 	vstr	s15, [r1, #4]
 80137ac:	e799      	b.n	80136e2 <__kernel_rem_pio2f+0x3de>
 80137ae:	edd2 7a00 	vldr	s15, [r2]
 80137b2:	edd2 6a01 	vldr	s13, [r2, #4]
 80137b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80137ba:	3901      	subs	r1, #1
 80137bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137c0:	ed82 7a00 	vstr	s14, [r2]
 80137c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80137c8:	edc2 7a01 	vstr	s15, [r2, #4]
 80137cc:	e78e      	b.n	80136ec <__kernel_rem_pio2f+0x3e8>
 80137ce:	ed33 7a01 	vldmdb	r3!, {s14}
 80137d2:	3c01      	subs	r4, #1
 80137d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137d8:	e78f      	b.n	80136fa <__kernel_rem_pio2f+0x3f6>
 80137da:	eef1 6a66 	vneg.f32	s13, s13
 80137de:	eeb1 7a47 	vneg.f32	s14, s14
 80137e2:	edc8 6a00 	vstr	s13, [r8]
 80137e6:	ed88 7a01 	vstr	s14, [r8, #4]
 80137ea:	eef1 7a67 	vneg.f32	s15, s15
 80137ee:	e790      	b.n	8013712 <__kernel_rem_pio2f+0x40e>

080137f0 <__kernel_sinf>:
 80137f0:	ee10 3a10 	vmov	r3, s0
 80137f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80137fc:	da04      	bge.n	8013808 <__kernel_sinf+0x18>
 80137fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013802:	ee17 3a90 	vmov	r3, s15
 8013806:	b35b      	cbz	r3, 8013860 <__kernel_sinf+0x70>
 8013808:	ee20 7a00 	vmul.f32	s14, s0, s0
 801380c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013864 <__kernel_sinf+0x74>
 8013810:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013868 <__kernel_sinf+0x78>
 8013814:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013818:	eddf 7a14 	vldr	s15, [pc, #80]	; 801386c <__kernel_sinf+0x7c>
 801381c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013820:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013870 <__kernel_sinf+0x80>
 8013824:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013828:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013874 <__kernel_sinf+0x84>
 801382c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013830:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013834:	b930      	cbnz	r0, 8013844 <__kernel_sinf+0x54>
 8013836:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013878 <__kernel_sinf+0x88>
 801383a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801383e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013842:	4770      	bx	lr
 8013844:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013848:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801384c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013850:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013854:	eddf 7a09 	vldr	s15, [pc, #36]	; 801387c <__kernel_sinf+0x8c>
 8013858:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801385c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	2f2ec9d3 	.word	0x2f2ec9d3
 8013868:	b2d72f34 	.word	0xb2d72f34
 801386c:	3638ef1b 	.word	0x3638ef1b
 8013870:	b9500d01 	.word	0xb9500d01
 8013874:	3c088889 	.word	0x3c088889
 8013878:	be2aaaab 	.word	0xbe2aaaab
 801387c:	3e2aaaab 	.word	0x3e2aaaab

08013880 <with_errnof>:
 8013880:	b513      	push	{r0, r1, r4, lr}
 8013882:	4604      	mov	r4, r0
 8013884:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013888:	f7fb ff00 	bl	800f68c <__errno>
 801388c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013890:	6004      	str	r4, [r0, #0]
 8013892:	b002      	add	sp, #8
 8013894:	bd10      	pop	{r4, pc}

08013896 <xflowf>:
 8013896:	b130      	cbz	r0, 80138a6 <xflowf+0x10>
 8013898:	eef1 7a40 	vneg.f32	s15, s0
 801389c:	ee27 0a80 	vmul.f32	s0, s15, s0
 80138a0:	2022      	movs	r0, #34	; 0x22
 80138a2:	f7ff bfed 	b.w	8013880 <with_errnof>
 80138a6:	eef0 7a40 	vmov.f32	s15, s0
 80138aa:	e7f7      	b.n	801389c <xflowf+0x6>

080138ac <__math_uflowf>:
 80138ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80138b4 <__math_uflowf+0x8>
 80138b0:	f7ff bff1 	b.w	8013896 <xflowf>
 80138b4:	10000000 	.word	0x10000000

080138b8 <__math_oflowf>:
 80138b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80138c0 <__math_oflowf+0x8>
 80138bc:	f7ff bfeb 	b.w	8013896 <xflowf>
 80138c0:	70000000 	.word	0x70000000

080138c4 <atanf>:
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	ee10 5a10 	vmov	r5, s0
 80138ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80138ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80138d2:	eef0 7a40 	vmov.f32	s15, s0
 80138d6:	db10      	blt.n	80138fa <atanf+0x36>
 80138d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80138dc:	dd04      	ble.n	80138e8 <atanf+0x24>
 80138de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80138e2:	eeb0 0a67 	vmov.f32	s0, s15
 80138e6:	bd38      	pop	{r3, r4, r5, pc}
 80138e8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013a20 <atanf+0x15c>
 80138ec:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013a24 <atanf+0x160>
 80138f0:	2d00      	cmp	r5, #0
 80138f2:	bfd8      	it	le
 80138f4:	eef0 7a40 	vmovle.f32	s15, s0
 80138f8:	e7f3      	b.n	80138e2 <atanf+0x1e>
 80138fa:	4b4b      	ldr	r3, [pc, #300]	; (8013a28 <atanf+0x164>)
 80138fc:	429c      	cmp	r4, r3
 80138fe:	dc10      	bgt.n	8013922 <atanf+0x5e>
 8013900:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013904:	da0a      	bge.n	801391c <atanf+0x58>
 8013906:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013a2c <atanf+0x168>
 801390a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801390e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013912:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391a:	dce2      	bgt.n	80138e2 <atanf+0x1e>
 801391c:	f04f 33ff 	mov.w	r3, #4294967295
 8013920:	e013      	b.n	801394a <atanf+0x86>
 8013922:	f000 f8a3 	bl	8013a6c <fabsf>
 8013926:	4b42      	ldr	r3, [pc, #264]	; (8013a30 <atanf+0x16c>)
 8013928:	429c      	cmp	r4, r3
 801392a:	dc4f      	bgt.n	80139cc <atanf+0x108>
 801392c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013930:	429c      	cmp	r4, r3
 8013932:	dc41      	bgt.n	80139b8 <atanf+0xf4>
 8013934:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013938:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801393c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013940:	2300      	movs	r3, #0
 8013942:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013946:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801394a:	1c5a      	adds	r2, r3, #1
 801394c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013950:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013a34 <atanf+0x170>
 8013954:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013a38 <atanf+0x174>
 8013958:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013a3c <atanf+0x178>
 801395c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013960:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013964:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013a40 <atanf+0x17c>
 8013968:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801396c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013a44 <atanf+0x180>
 8013970:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013974:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013a48 <atanf+0x184>
 8013978:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801397c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013a4c <atanf+0x188>
 8013980:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013984:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013a50 <atanf+0x18c>
 8013988:	eea6 5a87 	vfma.f32	s10, s13, s14
 801398c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013a54 <atanf+0x190>
 8013990:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013994:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013a58 <atanf+0x194>
 8013998:	eea7 5a26 	vfma.f32	s10, s14, s13
 801399c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013a5c <atanf+0x198>
 80139a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80139a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80139a8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80139ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80139b0:	d121      	bne.n	80139f6 <atanf+0x132>
 80139b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139b6:	e794      	b.n	80138e2 <atanf+0x1e>
 80139b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80139bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80139c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80139c4:	2301      	movs	r3, #1
 80139c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80139ca:	e7be      	b.n	801394a <atanf+0x86>
 80139cc:	4b24      	ldr	r3, [pc, #144]	; (8013a60 <atanf+0x19c>)
 80139ce:	429c      	cmp	r4, r3
 80139d0:	dc0b      	bgt.n	80139ea <atanf+0x126>
 80139d2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80139d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80139da:	eea0 7a27 	vfma.f32	s14, s0, s15
 80139de:	2302      	movs	r3, #2
 80139e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80139e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80139e8:	e7af      	b.n	801394a <atanf+0x86>
 80139ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80139ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80139f2:	2303      	movs	r3, #3
 80139f4:	e7a9      	b.n	801394a <atanf+0x86>
 80139f6:	4a1b      	ldr	r2, [pc, #108]	; (8013a64 <atanf+0x1a0>)
 80139f8:	491b      	ldr	r1, [pc, #108]	; (8013a68 <atanf+0x1a4>)
 80139fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80139fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013a02:	ed93 0a00 	vldr	s0, [r3]
 8013a06:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013a0a:	ed92 0a00 	vldr	s0, [r2]
 8013a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a12:	2d00      	cmp	r5, #0
 8013a14:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013a18:	bfb8      	it	lt
 8013a1a:	eef1 7a67 	vneglt.f32	s15, s15
 8013a1e:	e760      	b.n	80138e2 <atanf+0x1e>
 8013a20:	3fc90fdb 	.word	0x3fc90fdb
 8013a24:	bfc90fdb 	.word	0xbfc90fdb
 8013a28:	3edfffff 	.word	0x3edfffff
 8013a2c:	7149f2ca 	.word	0x7149f2ca
 8013a30:	3f97ffff 	.word	0x3f97ffff
 8013a34:	3c8569d7 	.word	0x3c8569d7
 8013a38:	3d4bda59 	.word	0x3d4bda59
 8013a3c:	bd6ef16b 	.word	0xbd6ef16b
 8013a40:	3d886b35 	.word	0x3d886b35
 8013a44:	3dba2e6e 	.word	0x3dba2e6e
 8013a48:	3e124925 	.word	0x3e124925
 8013a4c:	3eaaaaab 	.word	0x3eaaaaab
 8013a50:	bd15a221 	.word	0xbd15a221
 8013a54:	bd9d8795 	.word	0xbd9d8795
 8013a58:	bde38e38 	.word	0xbde38e38
 8013a5c:	be4ccccd 	.word	0xbe4ccccd
 8013a60:	401bffff 	.word	0x401bffff
 8013a64:	0801485c 	.word	0x0801485c
 8013a68:	0801486c 	.word	0x0801486c

08013a6c <fabsf>:
 8013a6c:	ee10 3a10 	vmov	r3, s0
 8013a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a74:	ee00 3a10 	vmov	s0, r3
 8013a78:	4770      	bx	lr

08013a7a <finitef>:
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013a80:	9801      	ldr	r0, [sp, #4]
 8013a82:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013a86:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013a8a:	bfac      	ite	ge
 8013a8c:	2000      	movge	r0, #0
 8013a8e:	2001      	movlt	r0, #1
 8013a90:	b002      	add	sp, #8
 8013a92:	4770      	bx	lr

08013a94 <floorf>:
 8013a94:	ee10 3a10 	vmov	r3, s0
 8013a98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013a9c:	3a7f      	subs	r2, #127	; 0x7f
 8013a9e:	2a16      	cmp	r2, #22
 8013aa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013aa4:	dc2a      	bgt.n	8013afc <floorf+0x68>
 8013aa6:	2a00      	cmp	r2, #0
 8013aa8:	da11      	bge.n	8013ace <floorf+0x3a>
 8013aaa:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013b0c <floorf+0x78>
 8013aae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ab2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	dd05      	ble.n	8013ac8 <floorf+0x34>
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	da23      	bge.n	8013b08 <floorf+0x74>
 8013ac0:	4a13      	ldr	r2, [pc, #76]	; (8013b10 <floorf+0x7c>)
 8013ac2:	2900      	cmp	r1, #0
 8013ac4:	bf18      	it	ne
 8013ac6:	4613      	movne	r3, r2
 8013ac8:	ee00 3a10 	vmov	s0, r3
 8013acc:	4770      	bx	lr
 8013ace:	4911      	ldr	r1, [pc, #68]	; (8013b14 <floorf+0x80>)
 8013ad0:	4111      	asrs	r1, r2
 8013ad2:	420b      	tst	r3, r1
 8013ad4:	d0fa      	beq.n	8013acc <floorf+0x38>
 8013ad6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013b0c <floorf+0x78>
 8013ada:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ade:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae6:	ddef      	ble.n	8013ac8 <floorf+0x34>
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	bfbe      	ittt	lt
 8013aec:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8013af0:	fa40 f202 	asrlt.w	r2, r0, r2
 8013af4:	189b      	addlt	r3, r3, r2
 8013af6:	ea23 0301 	bic.w	r3, r3, r1
 8013afa:	e7e5      	b.n	8013ac8 <floorf+0x34>
 8013afc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013b00:	d3e4      	bcc.n	8013acc <floorf+0x38>
 8013b02:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013b06:	4770      	bx	lr
 8013b08:	2300      	movs	r3, #0
 8013b0a:	e7dd      	b.n	8013ac8 <floorf+0x34>
 8013b0c:	7149f2ca 	.word	0x7149f2ca
 8013b10:	bf800000 	.word	0xbf800000
 8013b14:	007fffff 	.word	0x007fffff

08013b18 <nanf>:
 8013b18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013b20 <nanf+0x8>
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop
 8013b20:	7fc00000 	.word	0x7fc00000

08013b24 <scalbnf>:
 8013b24:	ee10 3a10 	vmov	r3, s0
 8013b28:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013b2c:	d025      	beq.n	8013b7a <scalbnf+0x56>
 8013b2e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013b32:	d302      	bcc.n	8013b3a <scalbnf+0x16>
 8013b34:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013b38:	4770      	bx	lr
 8013b3a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013b3e:	d122      	bne.n	8013b86 <scalbnf+0x62>
 8013b40:	4b2a      	ldr	r3, [pc, #168]	; (8013bec <scalbnf+0xc8>)
 8013b42:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013bf0 <scalbnf+0xcc>
 8013b46:	4298      	cmp	r0, r3
 8013b48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b4c:	db16      	blt.n	8013b7c <scalbnf+0x58>
 8013b4e:	ee10 3a10 	vmov	r3, s0
 8013b52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013b56:	3a19      	subs	r2, #25
 8013b58:	4402      	add	r2, r0
 8013b5a:	2afe      	cmp	r2, #254	; 0xfe
 8013b5c:	dd15      	ble.n	8013b8a <scalbnf+0x66>
 8013b5e:	ee10 3a10 	vmov	r3, s0
 8013b62:	eddf 7a24 	vldr	s15, [pc, #144]	; 8013bf4 <scalbnf+0xd0>
 8013b66:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013bf8 <scalbnf+0xd4>
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	eeb0 7a67 	vmov.f32	s14, s15
 8013b70:	bfb8      	it	lt
 8013b72:	eef0 7a66 	vmovlt.f32	s15, s13
 8013b76:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013b7a:	4770      	bx	lr
 8013b7c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013bfc <scalbnf+0xd8>
 8013b80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b84:	4770      	bx	lr
 8013b86:	0dd2      	lsrs	r2, r2, #23
 8013b88:	e7e6      	b.n	8013b58 <scalbnf+0x34>
 8013b8a:	2a00      	cmp	r2, #0
 8013b8c:	dd06      	ble.n	8013b9c <scalbnf+0x78>
 8013b8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013b92:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013b96:	ee00 3a10 	vmov	s0, r3
 8013b9a:	4770      	bx	lr
 8013b9c:	f112 0f16 	cmn.w	r2, #22
 8013ba0:	da1a      	bge.n	8013bd8 <scalbnf+0xb4>
 8013ba2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013ba6:	4298      	cmp	r0, r3
 8013ba8:	ee10 3a10 	vmov	r3, s0
 8013bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013bb0:	dd0a      	ble.n	8013bc8 <scalbnf+0xa4>
 8013bb2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8013bf4 <scalbnf+0xd0>
 8013bb6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013bf8 <scalbnf+0xd4>
 8013bba:	eef0 7a40 	vmov.f32	s15, s0
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	bf18      	it	ne
 8013bc2:	eeb0 0a47 	vmovne.f32	s0, s14
 8013bc6:	e7db      	b.n	8013b80 <scalbnf+0x5c>
 8013bc8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013bfc <scalbnf+0xd8>
 8013bcc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013c00 <scalbnf+0xdc>
 8013bd0:	eef0 7a40 	vmov.f32	s15, s0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	e7f3      	b.n	8013bc0 <scalbnf+0x9c>
 8013bd8:	3219      	adds	r2, #25
 8013bda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013bde:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013be2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013c04 <scalbnf+0xe0>
 8013be6:	ee07 3a10 	vmov	s14, r3
 8013bea:	e7c4      	b.n	8013b76 <scalbnf+0x52>
 8013bec:	ffff3cb0 	.word	0xffff3cb0
 8013bf0:	4c000000 	.word	0x4c000000
 8013bf4:	7149f2ca 	.word	0x7149f2ca
 8013bf8:	f149f2ca 	.word	0xf149f2ca
 8013bfc:	0da24260 	.word	0x0da24260
 8013c00:	8da24260 	.word	0x8da24260
 8013c04:	33000000 	.word	0x33000000

08013c08 <_init>:
 8013c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0a:	bf00      	nop
 8013c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c0e:	bc08      	pop	{r3}
 8013c10:	469e      	mov	lr, r3
 8013c12:	4770      	bx	lr

08013c14 <_fini>:
 8013c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c16:	bf00      	nop
 8013c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c1a:	bc08      	pop	{r3}
 8013c1c:	469e      	mov	lr, r3
 8013c1e:	4770      	bx	lr
