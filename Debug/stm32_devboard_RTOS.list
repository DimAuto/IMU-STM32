
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014788  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08014948  08014948  00024948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155a4  080155a4  0003023c  2**0
                  CONTENTS
  4 .ARM          00000008  080155a4  080155a4  000255a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155ac  080155ac  0003023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155ac  080155ac  000255ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155b0  080155b0  000255b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  080155b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000618c  2000023c  080157f0  0003023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200063c8  080157f0  000363c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a1c9  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e44  00000000  00000000  0005a435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e8  00000000  00000000  00060280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002090  00000000  00000000  00062568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a1a  00000000  00000000  000645f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a71f  00000000  00000000  00096012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dfb0  00000000  00000000  000c0731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001de6e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8b4  00000000  00000000  001de734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014930 	.word	0x08014930

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000240 	.word	0x20000240
 80001fc:	08014930 	.word	0x08014930

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f00 <FusionRadiansToDegrees+0x24>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	42652ee0 	.word	0x42652ee0

08000f04 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d802      	bhi.n	8000f26 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000f20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f54 <FusionAsin+0x50>
 8000f24:	e011      	b.n	8000f4a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	db02      	blt.n	8000f3e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000f38:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f58 <FusionAsin+0x54>
 8000f3c:	e005      	b.n	8000f4a <FusionAsin+0x46>
    }
    return asinf(value);
 8000f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f42:	f012 f9f9 	bl	8013338 <asinf>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	bfc90fdb 	.word	0xbfc90fdb
 8000f58:	3fc90fdb 	.word	0x3fc90fdb

08000f5c <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b091      	sub	sp, #68	; 0x44
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	eeb0 5a40 	vmov.f32	s10, s0
 8000f66:	eef0 5a60 	vmov.f32	s11, s1
 8000f6a:	eeb0 6a41 	vmov.f32	s12, s2
 8000f6e:	eef0 6a61 	vmov.f32	s13, s3
 8000f72:	eeb0 7a42 	vmov.f32	s14, s4
 8000f76:	eef0 7a62 	vmov.f32	s15, s5
 8000f7a:	ed87 5a07 	vstr	s10, [r7, #28]
 8000f7e:	edc7 5a08 	vstr	s11, [r7, #32]
 8000f82:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8000f86:	edc7 6a04 	vstr	s13, [r7, #16]
 8000f8a:	ed87 7a05 	vstr	s14, [r7, #20]
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8000f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8000fa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8000fb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd6:	ee06 1a90 	vmov	s13, r1
 8000fda:	ee07 2a10 	vmov	s14, r2
 8000fde:	ee07 3a90 	vmov	s15, r3
}
 8000fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fe6:	eef0 0a47 	vmov.f32	s1, s14
 8000fea:	eeb0 1a67 	vmov.f32	s2, s15
 8000fee:	3744      	adds	r7, #68	; 0x44
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b091      	sub	sp, #68	; 0x44
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	eeb0 5a40 	vmov.f32	s10, s0
 8001002:	eef0 5a60 	vmov.f32	s11, s1
 8001006:	eeb0 6a41 	vmov.f32	s12, s2
 800100a:	eef0 6a61 	vmov.f32	s13, s3
 800100e:	eeb0 7a42 	vmov.f32	s14, s4
 8001012:	eef0 7a62 	vmov.f32	s15, s5
 8001016:	ed87 5a07 	vstr	s10, [r7, #28]
 800101a:	edc7 5a08 	vstr	s11, [r7, #32]
 800101e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001022:	edc7 6a04 	vstr	s13, [r7, #16]
 8001026:	ed87 7a05 	vstr	s14, [r7, #20]
 800102a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800102e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800103a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800103e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800104a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800104e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001052:	edd7 7a06 	vldr	s15, [r7, #24]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800105a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800106c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	ee06 1a90 	vmov	s13, r1
 8001076:	ee07 2a10 	vmov	s14, r2
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a66 	vmov.f32	s0, s13
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 1a67 	vmov.f32	s2, s15
 800108a:	3744      	adds	r7, #68	; 0x44
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001094:	b084      	sub	sp, #16
 8001096:	b480      	push	{r7}
 8001098:	b08f      	sub	sp, #60	; 0x3c
 800109a:	af00      	add	r7, sp, #0
 800109c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 80010a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a4:	eef0 6a40 	vmov.f32	s13, s0
 80010a8:	eeb0 7a60 	vmov.f32	s14, s1
 80010ac:	eef0 7a41 	vmov.f32	s15, s2
 80010b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80010b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80010bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80010dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010e8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80010ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80010fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001108:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800110c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 800111c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001138:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001148:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800115a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	ee06 1a90 	vmov	s13, r1
 8001164:	ee07 2a10 	vmov	s14, r2
 8001168:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800116c:	eeb0 0a66 	vmov.f32	s0, s13
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	373c      	adds	r7, #60	; 0x3c
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
 800118a:	eeb0 6a40 	vmov.f32	s12, s0
 800118e:	eef0 6a60 	vmov.f32	s13, s1
 8001192:	eeb0 7a41 	vmov.f32	s14, s2
 8001196:	eef0 7a61 	vmov.f32	s15, s3
 800119a:	ed87 6a04 	vstr	s12, [r7, #16]
 800119e:	edc7 6a05 	vstr	s13, [r7, #20]
 80011a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80011a6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80011aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80011ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80011c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011de:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	eeb0 0a66 	vmov.f32	s0, s13
 80011fa:	f012 f8c9 	bl	8013390 <atan2f>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f7ff fe69 	bl	8000edc <FusionRadiansToDegrees>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800120e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8001212:	ed97 7a04 	vldr	s14, [r7, #16]
 8001216:	edd7 7a06 	vldr	s15, [r7, #24]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f7ff fe65 	bl	8000f04 <FusionAsin>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff fe4b 	bl	8000edc <FusionRadiansToDegrees>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800124a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800124e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001252:	edd7 7a07 	vldr	s15, [r7, #28]
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	edd7 6a05 	vldr	s13, [r7, #20]
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 6a27 	vadd.f32	s13, s14, s15
 800126a:	ed97 7a07 	vldr	s14, [r7, #28]
 800126e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	eeb0 0a66 	vmov.f32	s0, s13
 8001286:	f012 f883 	bl	8013390 <atan2f>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f7ff fe23 	bl	8000edc <FusionRadiansToDegrees>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800129a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	ee06 1a90 	vmov	s13, r1
 80012b6:	ee07 2a10 	vmov	s14, r2
 80012ba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80012be:	eeb0 0a66 	vmov.f32	s0, s13
 80012c2:	eef0 0a47 	vmov.f32	s1, s14
 80012c6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ca:	3740      	adds	r7, #64	; 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 80012d0:	b084      	sub	sp, #16
 80012d2:	b5b0      	push	{r4, r5, r7, lr}
 80012d4:	b09e      	sub	sp, #120	; 0x78
 80012d6:	af06      	add	r7, sp, #24
 80012d8:	eef0 4a41 	vmov.f32	s9, s2
 80012dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012e4:	eeb0 5a61 	vmov.f32	s10, s3
 80012e8:	eef0 5a42 	vmov.f32	s11, s4
 80012ec:	eeb0 6a62 	vmov.f32	s12, s5
 80012f0:	eef0 6a43 	vmov.f32	s13, s6
 80012f4:	eeb0 7a63 	vmov.f32	s14, s7
 80012f8:	eef0 7a44 	vmov.f32	s15, s8
 80012fc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001300:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001304:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8001308:	ed87 5a08 	vstr	s10, [r7, #32]
 800130c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8001310:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8001314:	edc7 6a05 	vstr	s13, [r7, #20]
 8001318:	ed87 7a06 	vstr	s14, [r7, #24]
 800131c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8001320:	ed97 5a05 	vldr	s10, [r7, #20]
 8001324:	edd7 5a06 	vldr	s11, [r7, #24]
 8001328:	ed97 6a07 	vldr	s12, [r7, #28]
 800132c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001330:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001338:	eef0 1a45 	vmov.f32	s3, s10
 800133c:	eeb0 2a65 	vmov.f32	s4, s11
 8001340:	eef0 2a46 	vmov.f32	s5, s12
 8001344:	eeb0 0a66 	vmov.f32	s0, s13
 8001348:	eef0 0a47 	vmov.f32	s1, s14
 800134c:	eeb0 1a67 	vmov.f32	s2, s15
 8001350:	f7ff fe04 	bl	8000f5c <FusionVectorSubtract>
 8001354:	eef0 6a40 	vmov.f32	s13, s0
 8001358:	eeb0 7a60 	vmov.f32	s14, s1
 800135c:	eef0 7a41 	vmov.f32	s15, s2
 8001360:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8001364:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8001368:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800136c:	ed97 5a08 	vldr	s10, [r7, #32]
 8001370:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001378:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800137c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001380:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001384:	eef0 1a45 	vmov.f32	s3, s10
 8001388:	eeb0 2a65 	vmov.f32	s4, s11
 800138c:	eef0 2a46 	vmov.f32	s5, s12
 8001390:	eeb0 0a66 	vmov.f32	s0, s13
 8001394:	eef0 0a47 	vmov.f32	s1, s14
 8001398:	eeb0 1a67 	vmov.f32	s2, s15
 800139c:	f7ff fe2c 	bl	8000ff8 <FusionVectorHadamardProduct>
 80013a0:	eef0 6a40 	vmov.f32	s13, s0
 80013a4:	eeb0 7a60 	vmov.f32	s14, s1
 80013a8:	eef0 7a41 	vmov.f32	s15, s2
 80013ac:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 80013b0:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 80013b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80013b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80013bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013c4:	466d      	mov	r5, sp
 80013c6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	eeb0 0a66 	vmov.f32	s0, s13
 80013dc:	eef0 0a47 	vmov.f32	s1, s14
 80013e0:	eeb0 1a67 	vmov.f32	s2, s15
 80013e4:	f7ff fe56 	bl	8001094 <FusionMatrixMultiplyVector>
 80013e8:	eef0 6a40 	vmov.f32	s13, s0
 80013ec:	eeb0 7a60 	vmov.f32	s14, s1
 80013f0:	eef0 7a41 	vmov.f32	s15, s2
 80013f4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 80013f8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80013fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001406:	ee06 1a90 	vmov	s13, r1
 800140a:	ee07 2a10 	vmov	s14, r2
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a66 	vmov.f32	s0, s13
 8001416:	eef0 0a47 	vmov.f32	s1, s14
 800141a:	eeb0 1a67 	vmov.f32	s2, s15
 800141e:	3760      	adds	r7, #96	; 0x60
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr
	...

0800142c <setGyroOffset>:


FusionAhrs ahrs;
FusionOffset offset;

void setGyroOffset(gyro_data_t values){
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	eef0 6a40 	vmov.f32	s13, s0
 8001436:	eeb0 7a60 	vmov.f32	s14, s1
 800143a:	eef0 7a41 	vmov.f32	s15, s2
 800143e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001442:	ed87 7a02 	vstr	s14, [r7, #8]
 8001446:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroscopeOffset.array[0] = values.gyro_x;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <setGyroOffset+0x3c>)
 800144e:	6013      	str	r3, [r2, #0]
	gyroscopeOffset.array[1] = values.gyro_y;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <setGyroOffset+0x3c>)
 8001454:	6053      	str	r3, [r2, #4]
	gyroscopeOffset.array[2] = values.gyro_z;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <setGyroOffset+0x3c>)
 800145a:	6093      	str	r3, [r2, #8]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	20000258 	.word	0x20000258

0800146c <FusionInit>:

/* Initialize Fusion algorithm. */
void FusionInit(void){
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 8001472:	2132      	movs	r1, #50	; 0x32
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <FusionInit+0x34>)
 8001476:	f002 f935 	bl	80036e4 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <FusionInit+0x38>)
 800147c:	f000 fdc8 	bl	8002010 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <FusionInit+0x3c>)
 8001482:	1d3c      	adds	r4, r7, #4
 8001484:	461d      	mov	r5, r3
 8001486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 0.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <FusionInit+0x38>)
 8001494:	f000 fe36 	bl	8002104 <FusionAhrsSetSettings>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	200002d0 	.word	0x200002d0
 80014a4:	20000268 	.word	0x20000268
 80014a8:	08014948 	.word	0x08014948

080014ac <FusionCalcAngle>:

/* Calculate angle based only on Accelerometer and gyroscope.*/
void FusionCalcAngle(mems_data_t *memsData, FusionEuler *output_angles){
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	b095      	sub	sp, #84	; 0x54
 80014b0:	af06      	add	r7, sp, #24
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	FusionVector gyroscope = {memsData->gyro.gyro_x, memsData->gyro.gyro_y, memsData->gyro.gyro_z};
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	623b      	str	r3, [r7, #32]
	const FusionVector accelerometer = {memsData->acc.acc_x, memsData->acc.acc_y, memsData->acc.acc_z};
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	617b      	str	r3, [r7, #20]

	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <FusionCalcAngle+0x1e8>)
 80014dc:	edd3 3a00 	vldr	s7, [r3]
 80014e0:	ed93 4a01 	vldr	s8, [r3, #4]
 80014e4:	edd3 4a02 	vldr	s9, [r3, #8]
 80014e8:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <FusionCalcAngle+0x1ec>)
 80014ea:	ed93 5a00 	vldr	s10, [r3]
 80014ee:	edd3 5a01 	vldr	s11, [r3, #4]
 80014f2:	ed93 6a02 	vldr	s12, [r3, #8]
 80014f6:	4e69      	ldr	r6, [pc, #420]	; (800169c <FusionCalcAngle+0x1f0>)
 80014f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80014fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001500:	edd7 7a08 	vldr	s15, [r7, #32]
 8001504:	466d      	mov	r5, sp
 8001506:	f106 0410 	add.w	r4, r6, #16
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001516:	eeb0 3a63 	vmov.f32	s6, s7
 800151a:	eef0 3a44 	vmov.f32	s7, s8
 800151e:	eeb0 4a64 	vmov.f32	s8, s9
 8001522:	eef0 1a45 	vmov.f32	s3, s10
 8001526:	eeb0 2a65 	vmov.f32	s4, s11
 800152a:	eef0 2a46 	vmov.f32	s5, s12
 800152e:	eeb0 0a66 	vmov.f32	s0, s13
 8001532:	eef0 0a47 	vmov.f32	s1, s14
 8001536:	eeb0 1a67 	vmov.f32	s2, s15
 800153a:	f7ff fec9 	bl	80012d0 <FusionCalibrationInertial>
 800153e:	eef0 6a40 	vmov.f32	s13, s0
 8001542:	eeb0 7a60 	vmov.f32	s14, s1
 8001546:	eef0 7a41 	vmov.f32	s15, s2
 800154a:	edc7 6a06 	vstr	s13, [r7, #24]
 800154e:	ed87 7a07 	vstr	s14, [r7, #28]
 8001552:	edc7 7a08 	vstr	s15, [r7, #32]
	float delta = (float)(osKernelGetTickCount() - prv_tick) / 1000.0f;
 8001556:	f00a ff49 	bl	800c3ec <osKernelGetTickCount>
 800155a:	4602      	mov	r2, r0
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <FusionCalcAngle+0x1f4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800156a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80016a4 <FusionCalcAngle+0x1f8>
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, delta);
 8001576:	ed97 5a03 	vldr	s10, [r7, #12]
 800157a:	edd7 5a04 	vldr	s11, [r7, #16]
 800157e:	ed97 6a05 	vldr	s12, [r7, #20]
 8001582:	edd7 6a06 	vldr	s13, [r7, #24]
 8001586:	ed97 7a07 	vldr	s14, [r7, #28]
 800158a:	edd7 7a08 	vldr	s15, [r7, #32]
 800158e:	ed97 3a0d 	vldr	s6, [r7, #52]	; 0x34
 8001592:	eef0 1a45 	vmov.f32	s3, s10
 8001596:	eeb0 2a65 	vmov.f32	s4, s11
 800159a:	eef0 2a46 	vmov.f32	s5, s12
 800159e:	eeb0 0a66 	vmov.f32	s0, s13
 80015a2:	eef0 0a47 	vmov.f32	s1, s14
 80015a6:	eeb0 1a67 	vmov.f32	s2, s15
 80015aa:	483f      	ldr	r0, [pc, #252]	; (80016a8 <FusionCalcAngle+0x1fc>)
 80015ac:	f001 fb60 	bl	8002c70 <FusionAhrsUpdateNoMagnetometer>
	prv_tick = osKernelGetTickCount();
 80015b0:	f00a ff1c 	bl	800c3ec <osKernelGetTickCount>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a3a      	ldr	r2, [pc, #232]	; (80016a0 <FusionCalcAngle+0x1f4>)
 80015b8:	6013      	str	r3, [r2, #0]
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 80015ba:	483b      	ldr	r0, [pc, #236]	; (80016a8 <FusionCalcAngle+0x1fc>)
 80015bc:	f001 fbba 	bl	8002d34 <FusionAhrsGetQuaternion>
 80015c0:	eeb0 6a40 	vmov.f32	s12, s0
 80015c4:	eef0 6a60 	vmov.f32	s13, s1
 80015c8:	eeb0 7a41 	vmov.f32	s14, s2
 80015cc:	eef0 7a61 	vmov.f32	s15, s3
 80015d0:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80015d4:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80015d8:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80015dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80015e0:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80015e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80015e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015f0:	eeb0 0a46 	vmov.f32	s0, s12
 80015f4:	eef0 0a66 	vmov.f32	s1, s13
 80015f8:	eeb0 1a47 	vmov.f32	s2, s14
 80015fc:	eef0 1a67 	vmov.f32	s3, s15
 8001600:	f7ff fdc0 	bl	8001184 <FusionQuaternionToEuler>
 8001604:	eef0 6a40 	vmov.f32	s13, s0
 8001608:	eeb0 7a60 	vmov.f32	s14, s1
 800160c:	eef0 7a41 	vmov.f32	s15, s2
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	edc3 6a00 	vstr	s13, [r3]
 8001616:	ed83 7a01 	vstr	s14, [r3, #4]
 800161a:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	edd3 7a02 	vldr	s15, [r3, #8]
 8001624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162c:	d509      	bpl.n	8001642 <FusionCalcAngle+0x196>
		output_angles->angle.yaw += 360;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	edd3 7a02 	vldr	s15, [r3, #8]
 8001634:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80016ac <FusionCalcAngle+0x200>
 8001638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d509      	bpl.n	8001666 <FusionCalcAngle+0x1ba>
		output_angles->angle.roll += 360;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016ac <FusionCalcAngle+0x200>
 800165c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	edd3 7a01 	vldr	s15, [r3, #4]
 800166c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	d400      	bmi.n	8001678 <FusionCalcAngle+0x1cc>
		output_angles->angle.pitch += 360;
	}
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}
 8001676:	e009      	b.n	800168c <FusionCalcAngle+0x1e0>
		output_angles->angle.pitch += 360;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	edd3 7a01 	vldr	s15, [r3, #4]
 800167e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016ac <FusionCalcAngle+0x200>
 8001682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800168c:	bf00      	nop
 800168e:	373c      	adds	r7, #60	; 0x3c
 8001690:	46bd      	mov	sp, r7
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001694:	20000258 	.word	0x20000258
 8001698:	08014c14 	.word	0x08014c14
 800169c:	08014bf0 	.word	0x08014bf0
 80016a0:	20000264 	.word	0x20000264
 80016a4:	447a0000 	.word	0x447a0000
 80016a8:	20000268 	.word	0x20000268
 80016ac:	43b40000 	.word	0x43b40000

080016b0 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80016d4 <FusionDegreesToRadians+0x24>
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	3c8efa35 	.word	0x3c8efa35

080016d8 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	105a      	asrs	r2, r3, #1
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <FusionFastInverseSqrt+0x54>)
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80016f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001730 <FusionFastInverseSqrt+0x58>
 80016fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001700:	edd7 7a03 	vldr	s15, [r7, #12]
 8001704:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001708:	edd7 7a03 	vldr	s15, [r7, #12]
 800170c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001710:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001734 <FusionFastInverseSqrt+0x5c>
 8001714:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	5f1f1412 	.word	0x5f1f1412
 8001730:	3f36d312 	.word	0x3f36d312
 8001734:	3fd851ff 	.word	0x3fd851ff

08001738 <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	eef0 6a40 	vmov.f32	s13, s0
 8001742:	eeb0 7a60 	vmov.f32	s14, s1
 8001746:	eef0 7a41 	vmov.f32	s15, s2
 800174a:	edc7 6a01 	vstr	s13, [r7, #4]
 800174e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001752:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8001756:	edd7 7a01 	vldr	s15, [r7, #4]
 800175a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	d10f      	bne.n	8001784 <FusionVectorIsZero+0x4c>
 8001764:	edd7 7a02 	vldr	s15, [r7, #8]
 8001768:	eef5 7a40 	vcmp.f32	s15, #0.0
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d108      	bne.n	8001784 <FusionVectorIsZero+0x4c>
 8001772:	edd7 7a03 	vldr	s15, [r7, #12]
 8001776:	eef5 7a40 	vcmp.f32	s15, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d101      	bne.n	8001784 <FusionVectorIsZero+0x4c>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <FusionVectorIsZero+0x4e>
 8001784:	2300      	movs	r3, #0
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8001798:	b480      	push	{r7}
 800179a:	b091      	sub	sp, #68	; 0x44
 800179c:	af00      	add	r7, sp, #0
 800179e:	eeb0 5a40 	vmov.f32	s10, s0
 80017a2:	eef0 5a60 	vmov.f32	s11, s1
 80017a6:	eeb0 6a41 	vmov.f32	s12, s2
 80017aa:	eef0 6a61 	vmov.f32	s13, s3
 80017ae:	eeb0 7a42 	vmov.f32	s14, s4
 80017b2:	eef0 7a62 	vmov.f32	s15, s5
 80017b6:	ed87 5a07 	vstr	s10, [r7, #28]
 80017ba:	edc7 5a08 	vstr	s11, [r7, #32]
 80017be:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80017c2:	edc7 6a04 	vstr	s13, [r7, #16]
 80017c6:	ed87 7a05 	vstr	s14, [r7, #20]
 80017ca:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80017ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80017d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80017de:	ed97 7a08 	vldr	s14, [r7, #32]
 80017e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80017ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80017fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001806:	ca07      	ldmia	r2, {r0, r1, r2}
 8001808:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800180c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800180e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001812:	ee06 1a90 	vmov	s13, r1
 8001816:	ee07 2a10 	vmov	s14, r2
 800181a:	ee07 3a90 	vmov	s15, r3
}
 800181e:	eeb0 0a66 	vmov.f32	s0, s13
 8001822:	eef0 0a47 	vmov.f32	s1, s14
 8001826:	eeb0 1a67 	vmov.f32	s2, s15
 800182a:	3744      	adds	r7, #68	; 0x44
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	eef0 6a40 	vmov.f32	s13, s0
 800183e:	eeb0 7a60 	vmov.f32	s14, s1
 8001842:	eef0 7a41 	vmov.f32	s15, s2
 8001846:	edc7 6a01 	vstr	s13, [r7, #4]
 800184a:	ed87 7a02 	vstr	s14, [r7, #8]
 800184e:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001852:	ed97 7a01 	vldr	s14, [r7, #4]
 8001856:	edd7 7a02 	vldr	s15, [r7, #8]
 800185a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001866:	eeb0 0a67 	vmov.f32	s0, s15
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001874:	b480      	push	{r7}
 8001876:	b08f      	sub	sp, #60	; 0x3c
 8001878:	af00      	add	r7, sp, #0
 800187a:	eef0 6a40 	vmov.f32	s13, s0
 800187e:	eeb0 7a60 	vmov.f32	s14, s1
 8001882:	eef0 7a41 	vmov.f32	s15, s2
 8001886:	edc7 1a04 	vstr	s3, [r7, #16]
 800188a:	edc7 6a05 	vstr	s13, [r7, #20]
 800188e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001892:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8001896:	ed97 7a05 	vldr	s14, [r7, #20]
 800189a:	edd7 7a04 	vldr	s15, [r7, #16]
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80018a2:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80018a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80018aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ae:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80018b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80018b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80018ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80018be:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80018c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80018c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ca:	f107 0220 	add.w	r2, r7, #32
 80018ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018da:	ee06 1a90 	vmov	s13, r1
 80018de:	ee07 2a10 	vmov	s14, r2
 80018e2:	ee07 3a90 	vmov	s15, r3
}
 80018e6:	eeb0 0a66 	vmov.f32	s0, s13
 80018ea:	eef0 0a47 	vmov.f32	s1, s14
 80018ee:	eeb0 1a67 	vmov.f32	s2, s15
 80018f2:	373c      	adds	r7, #60	; 0x3c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80018fc:	b480      	push	{r7}
 80018fe:	b091      	sub	sp, #68	; 0x44
 8001900:	af00      	add	r7, sp, #0
 8001902:	eeb0 5a40 	vmov.f32	s10, s0
 8001906:	eef0 5a60 	vmov.f32	s11, s1
 800190a:	eeb0 6a41 	vmov.f32	s12, s2
 800190e:	eef0 6a61 	vmov.f32	s13, s3
 8001912:	eeb0 7a42 	vmov.f32	s14, s4
 8001916:	eef0 7a62 	vmov.f32	s15, s5
 800191a:	ed87 5a07 	vstr	s10, [r7, #28]
 800191e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001922:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001926:	edc7 6a04 	vstr	s13, [r7, #16]
 800192a:	ed87 7a05 	vstr	s14, [r7, #20]
 800192e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001932:	ed97 7a07 	vldr	s14, [r7, #28]
 8001936:	edd7 7a04 	vldr	s15, [r7, #16]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800193e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001942:	ed97 7a08 	vldr	s14, [r7, #32]
 8001946:	edd7 7a05 	vldr	s15, [r7, #20]
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800194e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001952:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001956:	edd7 7a06 	vldr	s15, [r7, #24]
 800195a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800195e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800196a:	ca07      	ldmia	r2, {r0, r1, r2}
 800196c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001970:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001976:	ee06 1a90 	vmov	s13, r1
 800197a:	ee07 2a10 	vmov	s14, r2
 800197e:	ee07 3a90 	vmov	s15, r3
}
 8001982:	eeb0 0a66 	vmov.f32	s0, s13
 8001986:	eef0 0a47 	vmov.f32	s1, s14
 800198a:	eeb0 1a67 	vmov.f32	s2, s15
 800198e:	3744      	adds	r7, #68	; 0x44
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001998:	b480      	push	{r7}
 800199a:	b091      	sub	sp, #68	; 0x44
 800199c:	af00      	add	r7, sp, #0
 800199e:	eeb0 5a40 	vmov.f32	s10, s0
 80019a2:	eef0 5a60 	vmov.f32	s11, s1
 80019a6:	eeb0 6a41 	vmov.f32	s12, s2
 80019aa:	eef0 6a61 	vmov.f32	s13, s3
 80019ae:	eeb0 7a42 	vmov.f32	s14, s4
 80019b2:	eef0 7a62 	vmov.f32	s15, s5
 80019b6:	ed87 5a07 	vstr	s10, [r7, #28]
 80019ba:	edc7 5a08 	vstr	s11, [r7, #32]
 80019be:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80019c2:	edc7 6a04 	vstr	s13, [r7, #16]
 80019c6:	ed87 7a05 	vstr	s14, [r7, #20]
 80019ca:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80019ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019da:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80019de:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019ea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80019ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80019fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001a0a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001a0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1a:	edd7 6a08 	vldr	s13, [r7, #32]
 8001a1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001a2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001a2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a42:	ee06 1a90 	vmov	s13, r1
 8001a46:	ee07 2a10 	vmov	s14, r2
 8001a4a:	ee07 3a90 	vmov	s15, r3
}
 8001a4e:	eeb0 0a66 	vmov.f32	s0, s13
 8001a52:	eef0 0a47 	vmov.f32	s1, s14
 8001a56:	eeb0 1a67 	vmov.f32	s2, s15
 8001a5a:	3744      	adds	r7, #68	; 0x44
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	eef0 6a40 	vmov.f32	s13, s0
 8001a6e:	eeb0 7a60 	vmov.f32	s14, s1
 8001a72:	eef0 7a41 	vmov.f32	s15, s2
 8001a76:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a7a:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a7e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001a82:	ed97 5a01 	vldr	s10, [r7, #4]
 8001a86:	edd7 5a02 	vldr	s11, [r7, #8]
 8001a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8001a8e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a92:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a9a:	eef0 1a45 	vmov.f32	s3, s10
 8001a9e:	eeb0 2a65 	vmov.f32	s4, s11
 8001aa2:	eef0 2a46 	vmov.f32	s5, s12
 8001aa6:	eeb0 0a66 	vmov.f32	s0, s13
 8001aaa:	eef0 0a47 	vmov.f32	s1, s14
 8001aae:	eeb0 1a67 	vmov.f32	s2, s15
 8001ab2:	f7ff ff23 	bl	80018fc <FusionVectorHadamardProduct>
 8001ab6:	eef0 6a40 	vmov.f32	s13, s0
 8001aba:	eeb0 7a60 	vmov.f32	s14, s1
 8001abe:	eef0 7a41 	vmov.f32	s15, s2
 8001ac2:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ac6:	ed87 7a06 	vstr	s14, [r7, #24]
 8001aca:	edc7 7a07 	vstr	s15, [r7, #28]
 8001ace:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ad2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ad6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ada:	eeb0 0a66 	vmov.f32	s0, s13
 8001ade:	eef0 0a47 	vmov.f32	s1, s14
 8001ae2:	eeb0 1a67 	vmov.f32	s2, s15
 8001ae6:	f7ff fea5 	bl	8001834 <FusionVectorSum>
 8001aea:	eef0 7a40 	vmov.f32	s15, s0
}
 8001aee:	eeb0 0a67 	vmov.f32	s0, s15
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	eef0 6a40 	vmov.f32	s13, s0
 8001b02:	eeb0 7a60 	vmov.f32	s14, s1
 8001b06:	eef0 7a41 	vmov.f32	s15, s2
 8001b0a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b0e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b12:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001b16:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b22:	eeb0 0a66 	vmov.f32	s0, s13
 8001b26:	eef0 0a47 	vmov.f32	s1, s14
 8001b2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b2e:	f7ff ff99 	bl	8001a64 <FusionVectorMagnitudeSquared>
 8001b32:	eef0 7a40 	vmov.f32	s15, s0
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	f7ff fdcd 	bl	80016d8 <FusionFastInverseSqrt>
 8001b3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001b42:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b46:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b4e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001b52:	eeb0 0a66 	vmov.f32	s0, s13
 8001b56:	eef0 0a47 	vmov.f32	s1, s14
 8001b5a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b5e:	f7ff fe89 	bl	8001874 <FusionVectorMultiplyScalar>
 8001b62:	eef0 6a40 	vmov.f32	s13, s0
 8001b66:	eeb0 7a60 	vmov.f32	s14, s1
 8001b6a:	eef0 7a41 	vmov.f32	s15, s2
 8001b6e:	edc7 6a08 	vstr	s13, [r7, #32]
 8001b72:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001b76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001b7a:	6a39      	ldr	r1, [r7, #32]
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	ee06 1a90 	vmov	s13, r1
 8001b84:	ee07 2a10 	vmov	s14, r2
 8001b88:	ee07 3a90 	vmov	s15, r3
}
 8001b8c:	eeb0 0a66 	vmov.f32	s0, s13
 8001b90:	eef0 0a47 	vmov.f32	s1, s14
 8001b94:	eeb0 1a67 	vmov.f32	s2, s15
 8001b98:	3730      	adds	r7, #48	; 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001b9e:	b490      	push	{r4, r7}
 8001ba0:	b094      	sub	sp, #80	; 0x50
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	eeb0 4a40 	vmov.f32	s8, s0
 8001ba8:	eef0 4a60 	vmov.f32	s9, s1
 8001bac:	eeb0 5a41 	vmov.f32	s10, s2
 8001bb0:	eef0 5a61 	vmov.f32	s11, s3
 8001bb4:	eeb0 6a42 	vmov.f32	s12, s4
 8001bb8:	eef0 6a62 	vmov.f32	s13, s5
 8001bbc:	eeb0 7a43 	vmov.f32	s14, s6
 8001bc0:	eef0 7a63 	vmov.f32	s15, s7
 8001bc4:	ed87 4a08 	vstr	s8, [r7, #32]
 8001bc8:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001bcc:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001bd0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001bd4:	ed87 6a04 	vstr	s12, [r7, #16]
 8001bd8:	edc7 6a05 	vstr	s13, [r7, #20]
 8001bdc:	ed87 7a06 	vstr	s14, [r7, #24]
 8001be0:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001be4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001be8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bec:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001bf0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001bf4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c00:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001c04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c10:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001c14:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001c24:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001c28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3a:	ee06 0a10 	vmov	s12, r0
 8001c3e:	ee06 1a90 	vmov	s13, r1
 8001c42:	ee07 2a10 	vmov	s14, r2
 8001c46:	ee07 3a90 	vmov	s15, r3
}
 8001c4a:	eeb0 0a46 	vmov.f32	s0, s12
 8001c4e:	eef0 0a66 	vmov.f32	s1, s13
 8001c52:	eeb0 1a47 	vmov.f32	s2, s14
 8001c56:	eef0 1a67 	vmov.f32	s3, s15
 8001c5a:	3750      	adds	r7, #80	; 0x50
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc90      	pop	{r4, r7}
 8001c60:	4770      	bx	lr

08001c62 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001c62:	b490      	push	{r4, r7}
 8001c64:	b094      	sub	sp, #80	; 0x50
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	eeb0 4a40 	vmov.f32	s8, s0
 8001c6c:	eef0 4a60 	vmov.f32	s9, s1
 8001c70:	eeb0 5a41 	vmov.f32	s10, s2
 8001c74:	eef0 5a61 	vmov.f32	s11, s3
 8001c78:	eeb0 6a42 	vmov.f32	s12, s4
 8001c7c:	eef0 6a62 	vmov.f32	s13, s5
 8001c80:	eeb0 7a43 	vmov.f32	s14, s6
 8001c84:	eef0 7a63 	vmov.f32	s15, s7
 8001c88:	ed87 4a08 	vstr	s8, [r7, #32]
 8001c8c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001c90:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001c94:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001c98:	ed87 6a04 	vstr	s12, [r7, #16]
 8001c9c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ca0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ca4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001ca8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cc4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001cd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ce4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001ce8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d04:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d14:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d20:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d24:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001d28:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d38:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d44:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d54:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d64:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001d68:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d94:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001da4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001da8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001db6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001db8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbe:	ee06 0a10 	vmov	s12, r0
 8001dc2:	ee06 1a90 	vmov	s13, r1
 8001dc6:	ee07 2a10 	vmov	s14, r2
 8001dca:	ee07 3a90 	vmov	s15, r3
}
 8001dce:	eeb0 0a46 	vmov.f32	s0, s12
 8001dd2:	eef0 0a66 	vmov.f32	s1, s13
 8001dd6:	eeb0 1a47 	vmov.f32	s2, s14
 8001dda:	eef0 1a67 	vmov.f32	s3, s15
 8001dde:	3750      	adds	r7, #80	; 0x50
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc90      	pop	{r4, r7}
 8001de4:	4770      	bx	lr

08001de6 <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001de6:	b490      	push	{r4, r7}
 8001de8:	b094      	sub	sp, #80	; 0x50
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	eef0 4a40 	vmov.f32	s9, s0
 8001df0:	eeb0 5a60 	vmov.f32	s10, s1
 8001df4:	eef0 5a41 	vmov.f32	s11, s2
 8001df8:	eeb0 6a61 	vmov.f32	s12, s3
 8001dfc:	eef0 6a42 	vmov.f32	s13, s4
 8001e00:	eeb0 7a62 	vmov.f32	s14, s5
 8001e04:	eef0 7a43 	vmov.f32	s15, s6
 8001e08:	edc7 4a08 	vstr	s9, [r7, #32]
 8001e0c:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8001e10:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001e14:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001e18:	edc7 6a05 	vstr	s13, [r7, #20]
 8001e1c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e20:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8001e24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e28:	eeb1 7a67 	vneg.f32	s14, s15
 8001e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e34:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001e38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e44:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e54:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001e58:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e64:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e74:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e84:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8001e88:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001e98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ea4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001eb4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8001eb8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ebc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ec8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001ed8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ee4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001ee8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001eec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ef6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ef8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efe:	ee06 0a10 	vmov	s12, r0
 8001f02:	ee06 1a90 	vmov	s13, r1
 8001f06:	ee07 2a10 	vmov	s14, r2
 8001f0a:	ee07 3a90 	vmov	s15, r3
}
 8001f0e:	eeb0 0a46 	vmov.f32	s0, s12
 8001f12:	eef0 0a66 	vmov.f32	s1, s13
 8001f16:	eeb0 1a47 	vmov.f32	s2, s14
 8001f1a:	eef0 1a67 	vmov.f32	s3, s15
 8001f1e:	3750      	adds	r7, #80	; 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc90      	pop	{r4, r7}
 8001f24:	4770      	bx	lr

08001f26 <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001f26:	b590      	push	{r4, r7, lr}
 8001f28:	b093      	sub	sp, #76	; 0x4c
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	eeb0 6a40 	vmov.f32	s12, s0
 8001f30:	eef0 6a60 	vmov.f32	s13, s1
 8001f34:	eeb0 7a41 	vmov.f32	s14, s2
 8001f38:	eef0 7a61 	vmov.f32	s15, s3
 8001f3c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001f40:	edc7 6a05 	vstr	s13, [r7, #20]
 8001f44:	ed87 7a06 	vstr	s14, [r7, #24]
 8001f48:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001f4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f68:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f78:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	f7ff fba4 	bl	80016d8 <FusionFastInverseSqrt>
 8001f90:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8001f94:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fa0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8001fa4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fa8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fb0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8001fb4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8001fc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fd0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001fd4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fea:	ee06 0a10 	vmov	s12, r0
 8001fee:	ee06 1a90 	vmov	s13, r1
 8001ff2:	ee07 2a10 	vmov	s14, r2
 8001ff6:	ee07 3a90 	vmov	s15, r3
}
 8001ffa:	eeb0 0a46 	vmov.f32	s0, s12
 8001ffe:	eef0 0a66 	vmov.f32	s1, s13
 8002002:	eeb0 1a47 	vmov.f32	s2, s14
 8002006:	eef0 1a67 	vmov.f32	s3, s15
 800200a:	374c      	adds	r7, #76	; 0x4c
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}

08002010 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <FusionAhrsInitialise+0x34>)
 800201a:	f107 040c 	add.w	r4, r7, #12
 800201e:	461d      	mov	r5, r3
 8002020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f868 	bl	8002104 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f807 	bl	8002048 <FusionAhrsReset>
}
 800203a:	bf00      	nop
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bdb0      	pop	{r4, r5, r7, pc}
 8002042:	bf00      	nop
 8002044:	0801495c 	.word	0x0801495c

08002048 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8002048:	b480      	push	{r7}
 800204a:	b091      	sub	sp, #68	; 0x44
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002056:	615a      	str	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	61da      	str	r2, [r3, #28]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	; 0x24
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <FusionAhrsReset+0xb8>)
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	63da      	str	r2, [r3, #60]	; 0x3c
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	649a      	str	r2, [r3, #72]	; 0x48
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80020f2:	bf00      	nop
 80020f4:	3744      	adds	r7, #68	; 0x44
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	41200000 	.word	0x41200000

08002104 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	edd3 7a02 	vldr	s15, [r3, #8]
 8002124:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212c:	d003      	beq.n	8002136 <FusionAhrsSetSettings+0x32>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a38      	ldr	r2, [pc, #224]	; (800221c <FusionAhrsSetSettings+0x118>)
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	e01d      	b.n	800217a <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	edd3 7a02 	vldr	s15, [r3, #8]
 8002144:	eeb0 0a67 	vmov.f32	s0, s15
 8002148:	f7ff fab2 	bl	80016b0 <FusionDegreesToRadians>
 800214c:	eef0 7a40 	vmov.f32	s15, s0
 8002150:	eeb0 0a67 	vmov.f32	s0, s15
 8002154:	f011 f8aa 	bl	80132ac <sinf>
 8002158:	eef0 7a40 	vmov.f32	s15, s0
 800215c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002164:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	f011 f912 	bl	8013394 <powf>
 8002170:	eef0 7a40 	vmov.f32	s15, s0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002180:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d003      	beq.n	8002192 <FusionAhrsSetSettings+0x8e>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <FusionAhrsSetSettings+0x118>)
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	e01d      	b.n	80021d6 <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	edd3 7a03 	vldr	s15, [r3, #12]
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	f7ff fa84 	bl	80016b0 <FusionDegreesToRadians>
 80021a8:	eef0 7a40 	vmov.f32	s15, s0
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	f011 f87c 	bl	80132ac <sinf>
 80021b4:	eef0 7a40 	vmov.f32	s15, s0
 80021b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80021c4:	eeb0 0a67 	vmov.f32	s0, s15
 80021c8:	f011 f8e4 	bl	8013394 <powf>
 80021cc:	eef0 7a40 	vmov.f32	s15, s0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021e4:	f083 0301 	eor.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002204:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	7f7fffff 	.word	0x7f7fffff

08002220 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b0bf      	sub	sp, #252	; 0xfc
 8002224:	af00      	add	r7, sp, #0
 8002226:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002228:	eeb0 5a61 	vmov.f32	s10, s3
 800222c:	eef0 5a42 	vmov.f32	s11, s4
 8002230:	eeb0 6a62 	vmov.f32	s12, s5
 8002234:	eef0 6a43 	vmov.f32	s13, s6
 8002238:	eeb0 7a63 	vmov.f32	s14, s7
 800223c:	eef0 7a44 	vmov.f32	s15, s8
 8002240:	edc7 4a01 	vstr	s9, [r7, #4]
 8002244:	ed87 0a08 	vstr	s0, [r7, #32]
 8002248:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800224c:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002250:	ed87 5a05 	vstr	s10, [r7, #20]
 8002254:	edc7 5a06 	vstr	s11, [r7, #24]
 8002258:	ed87 6a07 	vstr	s12, [r7, #28]
 800225c:	edc7 6a02 	vstr	s13, [r7, #8]
 8002260:	ed87 7a03 	vstr	s14, [r7, #12]
 8002264:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	3324      	adds	r3, #36	; 0x24
 800226c:	f107 0214 	add.w	r2, r7, #20
 8002270:	ca07      	ldmia	r2, {r0, r1, r2}
 8002272:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800227c:	2b00      	cmp	r3, #0
 800227e:	d025      	beq.n	80022cc <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800228c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80022aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	d50b      	bpl.n	80022cc <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80022cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022ce:	f000 fb08 	bl	80028e2 <HalfGravity>
 80022d2:	eef0 6a40 	vmov.f32	s13, s0
 80022d6:	eeb0 7a60 	vmov.f32	s14, s1
 80022da:	eef0 7a41 	vmov.f32	s15, s2
 80022de:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 80022e2:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 80022e6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 800230a:	edd7 6a05 	vldr	s13, [r7, #20]
 800230e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002312:	edd7 7a07 	vldr	s15, [r7, #28]
 8002316:	eeb0 0a66 	vmov.f32	s0, s13
 800231a:	eef0 0a47 	vmov.f32	s1, s14
 800231e:	eeb0 1a67 	vmov.f32	s2, s15
 8002322:	f7ff fa09 	bl	8001738 <FusionVectorIsZero>
 8002326:	4603      	mov	r3, r0
 8002328:	f083 0301 	eor.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 809b 	beq.w	800246a <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d918      	bls.n	8002372 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002346:	3314      	adds	r3, #20
 8002348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 800234e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002350:	f7ff fe7a 	bl	8002048 <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	f103 0414 	add.w	r4, r3, #20
 800235a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800235e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002366:	2200      	movs	r2, #0
 8002368:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2201      	movs	r2, #1
 800236e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002372:	edd7 6a05 	vldr	s13, [r7, #20]
 8002376:	ed97 7a06 	vldr	s14, [r7, #24]
 800237a:	edd7 7a07 	vldr	s15, [r7, #28]
 800237e:	eeb0 0a66 	vmov.f32	s0, s13
 8002382:	eef0 0a47 	vmov.f32	s1, s14
 8002386:	eeb0 1a67 	vmov.f32	s2, s15
 800238a:	f7ff fbb5 	bl	8001af8 <FusionVectorNormalise>
 800238e:	eef0 6a40 	vmov.f32	s13, s0
 8002392:	eeb0 7a60 	vmov.f32	s14, s1
 8002396:	eef0 7a41 	vmov.f32	s15, s2
 800239a:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800239e:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80023a2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80023a6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80023a8:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80023ac:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80023b0:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80023b4:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80023b8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80023bc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80023c0:	eef0 1a45 	vmov.f32	s3, s10
 80023c4:	eeb0 2a65 	vmov.f32	s4, s11
 80023c8:	eef0 2a46 	vmov.f32	s5, s12
 80023cc:	eeb0 0a66 	vmov.f32	s0, s13
 80023d0:	eef0 0a47 	vmov.f32	s1, s14
 80023d4:	eeb0 1a67 	vmov.f32	s2, s15
 80023d8:	f7ff fade 	bl	8001998 <FusionVectorCrossProduct>
 80023dc:	eef0 6a40 	vmov.f32	s13, s0
 80023e0:	eeb0 7a60 	vmov.f32	s14, s1
 80023e4:	eef0 7a41 	vmov.f32	s15, s2
 80023e8:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 80023ec:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 80023f0:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <FusionAhrsUpdate+0x210>
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002404:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002408:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800240c:	eeb0 0a66 	vmov.f32	s0, s13
 8002410:	eef0 0a47 	vmov.f32	s1, s14
 8002414:	eeb0 1a67 	vmov.f32	s2, s15
 8002418:	f7ff fb24 	bl	8001a64 <FusionVectorMagnitudeSquared>
 800241c:	eeb0 7a40 	vmov.f32	s14, s0
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	edd3 7a02 	vldr	s15, [r3, #8]
 8002426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242e:	d817      	bhi.n	8002460 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002432:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002436:	323c      	adds	r2, #60	; 0x3c
 8002438:	ca07      	ldmia	r2, {r0, r1, r2}
 800243a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	2b09      	cmp	r3, #9
 8002450:	d901      	bls.n	8002456 <FusionAhrsUpdate+0x236>
 8002452:	230a      	movs	r3, #10
 8002454:	e000      	b.n	8002458 <FusionAhrsUpdate+0x238>
 8002456:	2300      	movs	r3, #0
 8002458:	1ad2      	subs	r2, r2, r3
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	659a      	str	r2, [r3, #88]	; 0x58
 800245e:	e004      	b.n	800246a <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	673b      	str	r3, [r7, #112]	; 0x70
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	677b      	str	r3, [r7, #116]	; 0x74
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	2201      	movs	r2, #1
 8002480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002484:	edd7 6a02 	vldr	s13, [r7, #8]
 8002488:	ed97 7a03 	vldr	s14, [r7, #12]
 800248c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002490:	eeb0 0a66 	vmov.f32	s0, s13
 8002494:	eef0 0a47 	vmov.f32	s1, s14
 8002498:	eeb0 1a67 	vmov.f32	s2, s15
 800249c:	f7ff f94c 	bl	8001738 <FusionVectorIsZero>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80e6 	beq.w	800267a <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d92a      	bls.n	8002518 <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	ed97 5a02 	vldr	s10, [r7, #8]
 80024ca:	edd7 5a03 	vldr	s11, [r7, #12]
 80024ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80024d2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80024d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80024da:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80024de:	eef0 1a45 	vmov.f32	s3, s10
 80024e2:	eeb0 2a65 	vmov.f32	s4, s11
 80024e6:	eef0 2a46 	vmov.f32	s5, s12
 80024ea:	eeb0 0a66 	vmov.f32	s0, s13
 80024ee:	eef0 0a47 	vmov.f32	s1, s14
 80024f2:	eeb0 1a67 	vmov.f32	s2, s15
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fed0 	bl	800329c <FusionCompassCalculateHeading>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
 8002500:	eeb0 0a67 	vmov.f32	s0, s15
 8002504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002506:	f000 fc38 	bl	8002d7a <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	2200      	movs	r2, #0
 800250e:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8002518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800251a:	f000 fa9f 	bl	8002a5c <HalfMagnetic>
 800251e:	eef0 6a40 	vmov.f32	s13, s0
 8002522:	eeb0 7a60 	vmov.f32	s14, s1
 8002526:	eef0 7a41 	vmov.f32	s15, s2
 800252a:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800252e:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002532:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8002536:	ed97 5a02 	vldr	s10, [r7, #8]
 800253a:	edd7 5a03 	vldr	s11, [r7, #12]
 800253e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002542:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002546:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800254a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800254e:	eef0 1a45 	vmov.f32	s3, s10
 8002552:	eeb0 2a65 	vmov.f32	s4, s11
 8002556:	eef0 2a46 	vmov.f32	s5, s12
 800255a:	eeb0 0a66 	vmov.f32	s0, s13
 800255e:	eef0 0a47 	vmov.f32	s1, s14
 8002562:	eeb0 1a67 	vmov.f32	s2, s15
 8002566:	f7ff fa17 	bl	8001998 <FusionVectorCrossProduct>
 800256a:	eef0 6a40 	vmov.f32	s13, s0
 800256e:	eeb0 7a60 	vmov.f32	s14, s1
 8002572:	eef0 7a41 	vmov.f32	s15, s2
 8002576:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800257a:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800257e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002582:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002586:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800258a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800258e:	eeb0 0a66 	vmov.f32	s0, s13
 8002592:	eef0 0a47 	vmov.f32	s1, s14
 8002596:	eeb0 1a67 	vmov.f32	s2, s15
 800259a:	f7ff faad 	bl	8001af8 <FusionVectorNormalise>
 800259e:	eef0 6a40 	vmov.f32	s13, s0
 80025a2:	eeb0 7a60 	vmov.f32	s14, s1
 80025a6:	eef0 7a41 	vmov.f32	s15, s2
 80025aa:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 80025ae:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80025b2:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80025b6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80025b8:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80025bc:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80025c0:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80025c4:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80025c8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80025cc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80025d0:	eef0 1a45 	vmov.f32	s3, s10
 80025d4:	eeb0 2a65 	vmov.f32	s4, s11
 80025d8:	eef0 2a46 	vmov.f32	s5, s12
 80025dc:	eeb0 0a66 	vmov.f32	s0, s13
 80025e0:	eef0 0a47 	vmov.f32	s1, s14
 80025e4:	eeb0 1a67 	vmov.f32	s2, s15
 80025e8:	f7ff f9d6 	bl	8001998 <FusionVectorCrossProduct>
 80025ec:	eef0 6a40 	vmov.f32	s13, s0
 80025f0:	eeb0 7a60 	vmov.f32	s14, s1
 80025f4:	eef0 7a41 	vmov.f32	s15, s2
 80025f8:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 80025fc:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8002600:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <FusionAhrsUpdate+0x420>
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002614:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002618:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800261c:	eeb0 0a66 	vmov.f32	s0, s13
 8002620:	eef0 0a47 	vmov.f32	s1, s14
 8002624:	eeb0 1a67 	vmov.f32	s2, s15
 8002628:	f7ff fa1c 	bl	8001a64 <FusionVectorMagnitudeSquared>
 800262c:	eeb0 7a40 	vmov.f32	s14, s0
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	edd3 7a03 	vldr	s15, [r3, #12]
 8002636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	d817      	bhi.n	8002670 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002642:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002646:	3248      	adds	r2, #72	; 0x48
 8002648:	ca07      	ldmia	r2, {r0, r1, r2}
 800264a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2200      	movs	r2, #0
 8002652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	2b09      	cmp	r3, #9
 8002660:	d901      	bls.n	8002666 <FusionAhrsUpdate+0x446>
 8002662:	230a      	movs	r3, #10
 8002664:	e000      	b.n	8002668 <FusionAhrsUpdate+0x448>
 8002666:	2300      	movs	r3, #0
 8002668:	1ad2      	subs	r2, r2, r3
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	661a      	str	r2, [r3, #96]	; 0x60
 800266e:	e004      	b.n	800267a <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800267a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800267e:	f7ff f817 	bl	80016b0 <FusionDegreesToRadians>
 8002682:	eeb0 6a40 	vmov.f32	s12, s0
 8002686:	edd7 6a08 	vldr	s13, [r7, #32]
 800268a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800268e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002692:	eef0 1a46 	vmov.f32	s3, s12
 8002696:	eeb0 0a66 	vmov.f32	s0, s13
 800269a:	eef0 0a47 	vmov.f32	s1, s14
 800269e:	eeb0 1a67 	vmov.f32	s2, s15
 80026a2:	f7ff f8e7 	bl	8001874 <FusionVectorMultiplyScalar>
 80026a6:	eef0 6a40 	vmov.f32	s13, s0
 80026aa:	eeb0 7a60 	vmov.f32	s14, s1
 80026ae:	eef0 7a41 	vmov.f32	s15, s2
 80026b2:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80026b6:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80026ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80026be:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80026c2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80026c6:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80026ca:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80026ce:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80026d2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80026d6:	eef0 1a45 	vmov.f32	s3, s10
 80026da:	eeb0 2a65 	vmov.f32	s4, s11
 80026de:	eef0 2a46 	vmov.f32	s5, s12
 80026e2:	eeb0 0a66 	vmov.f32	s0, s13
 80026e6:	eef0 0a47 	vmov.f32	s1, s14
 80026ea:	eeb0 1a67 	vmov.f32	s2, s15
 80026ee:	f7ff f853 	bl	8001798 <FusionVectorAdd>
 80026f2:	eef0 6a40 	vmov.f32	s13, s0
 80026f6:	eeb0 7a60 	vmov.f32	s14, s1
 80026fa:	eef0 7a41 	vmov.f32	s15, s2
 80026fe:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002702:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 8002706:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002710:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002714:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002718:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800271c:	eef0 1a46 	vmov.f32	s3, s12
 8002720:	eeb0 0a66 	vmov.f32	s0, s13
 8002724:	eef0 0a47 	vmov.f32	s1, s14
 8002728:	eeb0 1a67 	vmov.f32	s2, s15
 800272c:	f7ff f8a2 	bl	8001874 <FusionVectorMultiplyScalar>
 8002730:	eef0 6a40 	vmov.f32	s13, s0
 8002734:	eeb0 7a60 	vmov.f32	s14, s1
 8002738:	eef0 7a41 	vmov.f32	s15, s2
 800273c:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002740:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002744:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8002748:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800274c:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002750:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002754:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002758:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800275c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002760:	eef0 1a45 	vmov.f32	s3, s10
 8002764:	eeb0 2a65 	vmov.f32	s4, s11
 8002768:	eef0 2a46 	vmov.f32	s5, s12
 800276c:	eeb0 0a66 	vmov.f32	s0, s13
 8002770:	eef0 0a47 	vmov.f32	s1, s14
 8002774:	eeb0 1a67 	vmov.f32	s2, s15
 8002778:	f7ff f80e 	bl	8001798 <FusionVectorAdd>
 800277c:	eef0 6a40 	vmov.f32	s13, s0
 8002780:	eeb0 7a60 	vmov.f32	s14, s1
 8002784:	eef0 7a41 	vmov.f32	s15, s2
 8002788:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800278c:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002790:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002794:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002798:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800279c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80027a0:	edd7 1a01 	vldr	s3, [r7, #4]
 80027a4:	eeb0 0a66 	vmov.f32	s0, s13
 80027a8:	eef0 0a47 	vmov.f32	s1, s14
 80027ac:	eeb0 1a67 	vmov.f32	s2, s15
 80027b0:	f7ff f860 	bl	8001874 <FusionVectorMultiplyScalar>
 80027b4:	eef0 6a40 	vmov.f32	s13, s0
 80027b8:	eeb0 7a60 	vmov.f32	s14, s1
 80027bc:	eef0 7a41 	vmov.f32	s15, s2
 80027c0:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80027c4:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80027c8:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80027cc:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80027d0:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80027d4:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	ed93 6a05 	vldr	s12, [r3, #20]
 80027de:	edd3 6a06 	vldr	s13, [r3, #24]
 80027e2:	ed93 7a07 	vldr	s14, [r3, #28]
 80027e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ea:	eeb0 2a64 	vmov.f32	s4, s9
 80027ee:	eef0 2a45 	vmov.f32	s5, s10
 80027f2:	eeb0 3a65 	vmov.f32	s6, s11
 80027f6:	eeb0 0a46 	vmov.f32	s0, s12
 80027fa:	eef0 0a66 	vmov.f32	s1, s13
 80027fe:	eeb0 1a47 	vmov.f32	s2, s14
 8002802:	eef0 1a67 	vmov.f32	s3, s15
 8002806:	f7ff faee 	bl	8001de6 <FusionQuaternionMultiplyVector>
 800280a:	eeb0 6a40 	vmov.f32	s12, s0
 800280e:	eef0 6a60 	vmov.f32	s13, s1
 8002812:	eeb0 7a41 	vmov.f32	s14, s2
 8002816:	eef0 7a61 	vmov.f32	s15, s3
 800281a:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800281e:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002822:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002826:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800282a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800282c:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002830:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002834:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002838:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	ed93 6a05 	vldr	s12, [r3, #20]
 8002842:	edd3 6a06 	vldr	s13, [r3, #24]
 8002846:	ed93 7a07 	vldr	s14, [r3, #28]
 800284a:	edd3 7a08 	vldr	s15, [r3, #32]
 800284e:	eeb0 2a44 	vmov.f32	s4, s8
 8002852:	eef0 2a64 	vmov.f32	s5, s9
 8002856:	eeb0 3a45 	vmov.f32	s6, s10
 800285a:	eef0 3a65 	vmov.f32	s7, s11
 800285e:	eeb0 0a46 	vmov.f32	s0, s12
 8002862:	eef0 0a66 	vmov.f32	s1, s13
 8002866:	eeb0 1a47 	vmov.f32	s2, s14
 800286a:	eef0 1a67 	vmov.f32	s3, s15
 800286e:	f7ff f996 	bl	8001b9e <FusionQuaternionAdd>
 8002872:	eeb0 6a40 	vmov.f32	s12, s0
 8002876:	eef0 6a60 	vmov.f32	s13, s1
 800287a:	eeb0 7a41 	vmov.f32	s14, s2
 800287e:	eef0 7a61 	vmov.f32	s15, s3
 8002882:	ed84 6a05 	vstr	s12, [r4, #20]
 8002886:	edc4 6a06 	vstr	s13, [r4, #24]
 800288a:	ed84 7a07 	vstr	s14, [r4, #28]
 800288e:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002892:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	ed93 6a05 	vldr	s12, [r3, #20]
 800289a:	edd3 6a06 	vldr	s13, [r3, #24]
 800289e:	ed93 7a07 	vldr	s14, [r3, #28]
 80028a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80028a6:	eeb0 0a46 	vmov.f32	s0, s12
 80028aa:	eef0 0a66 	vmov.f32	s1, s13
 80028ae:	eeb0 1a47 	vmov.f32	s2, s14
 80028b2:	eef0 1a67 	vmov.f32	s3, s15
 80028b6:	f7ff fb36 	bl	8001f26 <FusionQuaternionNormalise>
 80028ba:	eeb0 6a40 	vmov.f32	s12, s0
 80028be:	eef0 6a60 	vmov.f32	s13, s1
 80028c2:	eeb0 7a41 	vmov.f32	s14, s2
 80028c6:	eef0 7a61 	vmov.f32	s15, s3
 80028ca:	ed84 6a05 	vstr	s12, [r4, #20]
 80028ce:	edc4 6a06 	vstr	s13, [r4, #24]
 80028d2:	ed84 7a07 	vstr	s14, [r4, #28]
 80028d6:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80028da:	bf00      	nop
 80028dc:	37fc      	adds	r7, #252	; 0xfc
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}

080028e2 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 80028e2:	b480      	push	{r7}
 80028e4:	b093      	sub	sp, #76	; 0x4c
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	dc02      	bgt.n	80028f8 <HalfGravity+0x16>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da03      	bge.n	80028fe <HalfGravity+0x1c>
 80028f6:	e094      	b.n	8002a22 <HalfGravity+0x140>
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d048      	beq.n	800298e <HalfGravity+0xac>
 80028fc:	e091      	b.n	8002a22 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	ed93 7a06 	vldr	s14, [r3, #24]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	edd3 7a08 	vldr	s15, [r3, #32]
 800290a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	edd3 6a05 	vldr	s13, [r3, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	edd3 7a07 	vldr	s15, [r3, #28]
 800291a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002922:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	ed93 7a07 	vldr	s14, [r3, #28]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	edd3 6a05 	vldr	s13, [r3, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002946:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800294a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	ed93 7a05 	vldr	s14, [r3, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	edd3 7a05 	vldr	s15, [r3, #20]
 800295a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002962:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	edd3 6a08 	vldr	s13, [r3, #32]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800297a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800297e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002982:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002986:	ca07      	ldmia	r2, {r0, r1, r2}
 8002988:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800298c:	e052      	b.n	8002a34 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	ed93 7a05 	vldr	s14, [r3, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	edd3 7a07 	vldr	s15, [r3, #28]
 800299a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80029aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029b2:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	edd3 7a08 	vldr	s15, [r3, #32]
 80029c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	edd3 6a05 	vldr	s13, [r3, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80029d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002a0e:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002a12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a16:	f107 0218 	add.w	r2, r7, #24
 8002a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a20:	e008      	b.n	8002a34 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002a34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3a:	ee06 1a90 	vmov	s13, r1
 8002a3e:	ee07 2a10 	vmov	s14, r2
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eeb0 0a66 	vmov.f32	s0, s13
 8002a4a:	eef0 0a47 	vmov.f32	s1, s14
 8002a4e:	eeb0 1a67 	vmov.f32	s2, s15
 8002a52:	374c      	adds	r7, #76	; 0x4c
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b097      	sub	sp, #92	; 0x5c
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	f000 809a 	beq.w	8002ba2 <HalfMagnetic+0x146>
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	f300 80e1 	bgt.w	8002c36 <HalfMagnetic+0x1da>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HalfMagnetic+0x22>
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d048      	beq.n	8002b0e <HalfMagnetic+0xb2>
 8002a7c:	e0db      	b.n	8002c36 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	edd3 6a05 	vldr	s13, [r3, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002aa2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	edd3 6a07 	vldr	s13, [r3, #28]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ace:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ad2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	edd3 6a05 	vldr	s13, [r3, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	edd3 7a06 	vldr	s15, [r3, #24]
 8002af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002afa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002afe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b0c:	e09c      	b.n	8002c48 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b3a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b8e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002b92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ba0:	e052      	b.n	8002c48 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc6:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bca:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	edd3 6a07 	vldr	s13, [r3, #28]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bfa:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002c22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002c26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c2a:	f107 021c 	add.w	r2, r7, #28
 8002c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c34:	e008      	b.n	8002c48 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	653b      	str	r3, [r7, #80]	; 0x50
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002c48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4e:	ee06 1a90 	vmov	s13, r1
 8002c52:	ee07 2a10 	vmov	s14, r2
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c5e:	eef0 0a47 	vmov.f32	s1, s14
 8002c62:	eeb0 1a67 	vmov.f32	s2, s15
 8002c66:	375c      	adds	r7, #92	; 0x5c
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	61f8      	str	r0, [r7, #28]
 8002c78:	eeb0 5a40 	vmov.f32	s10, s0
 8002c7c:	eef0 5a60 	vmov.f32	s11, s1
 8002c80:	eeb0 6a41 	vmov.f32	s12, s2
 8002c84:	eef0 6a61 	vmov.f32	s13, s3
 8002c88:	eeb0 7a42 	vmov.f32	s14, s4
 8002c8c:	eef0 7a62 	vmov.f32	s15, s5
 8002c90:	ed87 3a00 	vstr	s6, [r7]
 8002c94:	ed87 5a04 	vstr	s10, [r7, #16]
 8002c98:	edc7 5a05 	vstr	s11, [r7, #20]
 8002c9c:	ed87 6a06 	vstr	s12, [r7, #24]
 8002ca0:	edc7 6a01 	vstr	s13, [r7, #4]
 8002ca4:	ed87 7a02 	vstr	s14, [r7, #8]
 8002ca8:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbe:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002cc2:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002cc6:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002cca:	ed97 5a01 	vldr	s10, [r7, #4]
 8002cce:	edd7 5a02 	vldr	s11, [r7, #8]
 8002cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cd6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002cda:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cde:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ce2:	edd7 4a00 	vldr	s9, [r7]
 8002ce6:	eef0 1a45 	vmov.f32	s3, s10
 8002cea:	eeb0 2a65 	vmov.f32	s4, s11
 8002cee:	eef0 2a46 	vmov.f32	s5, s12
 8002cf2:	eeb0 0a66 	vmov.f32	s0, s13
 8002cf6:	eef0 0a47 	vmov.f32	s1, s14
 8002cfa:	eeb0 1a67 	vmov.f32	s2, s15
 8002cfe:	69f8      	ldr	r0, [r7, #28]
 8002d00:	f7ff fa8e 	bl	8002220 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <FusionAhrsUpdateNoMagnetometer+0xb8>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <FusionAhrsUpdateNoMagnetometer+0xb8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8002d1e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002d30 <FusionAhrsUpdateNoMagnetometer+0xc0>
 8002d22:	69f8      	ldr	r0, [r7, #28]
 8002d24:	f000 f829 	bl	8002d7a <FusionAhrsSetHeading>
    }
}
 8002d28:	bf00      	nop
 8002d2a:	3730      	adds	r7, #48	; 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	00000000 	.word	0x00000000

08002d34 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002d34:	b490      	push	{r4, r7}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f107 0418 	add.w	r4, r7, #24
 8002d42:	3314      	adds	r3, #20
 8002d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d4a:	69b8      	ldr	r0, [r7, #24]
 8002d4c:	69f9      	ldr	r1, [r7, #28]
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	ee06 0a10 	vmov	s12, r0
 8002d56:	ee06 1a90 	vmov	s13, r1
 8002d5a:	ee07 2a10 	vmov	s14, r2
 8002d5e:	ee07 3a90 	vmov	s15, r3
}
 8002d62:	eeb0 0a46 	vmov.f32	s0, s12
 8002d66:	eef0 0a66 	vmov.f32	s1, s13
 8002d6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002d6e:	eef0 1a67 	vmov.f32	s3, s15
 8002d72:	3728      	adds	r7, #40	; 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc90      	pop	{r4, r7}
 8002d78:	4770      	bx	lr

08002d7a <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002d7a:	b590      	push	{r4, r7, lr}
 8002d7c:	b089      	sub	sp, #36	; 0x24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	ed93 7a07 	vldr	s14, [r3, #28]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	edd3 6a08 	vldr	s13, [r3, #32]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd6:	eef0 0a67 	vmov.f32	s1, s15
 8002dda:	eeb0 0a46 	vmov.f32	s0, s12
 8002dde:	f010 fad7 	bl	8013390 <atan2f>
 8002de2:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002de6:	ed97 0a00 	vldr	s0, [r7]
 8002dea:	f7fe fc61 	bl	80016b0 <FusionDegreesToRadians>
 8002dee:	eeb0 7a40 	vmov.f32	s14, s0
 8002df2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002df6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e02:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002e06:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e0a:	f010 fa0b 	bl	8013224 <cosf>
 8002e0e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002e12:	edc7 7a02 	vstr	s15, [r7, #8]
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002e22:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e26:	f010 fa41 	bl	80132ac <sinf>
 8002e2a:	eef0 7a40 	vmov.f32	s15, s0
 8002e2e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002e32:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002e36:	687c      	ldr	r4, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	ed93 4a05 	vldr	s8, [r3, #20]
 8002e3e:	edd3 4a06 	vldr	s9, [r3, #24]
 8002e42:	ed93 5a07 	vldr	s10, [r3, #28]
 8002e46:	edd3 5a08 	vldr	s11, [r3, #32]
 8002e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e52:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e5a:	eeb0 2a44 	vmov.f32	s4, s8
 8002e5e:	eef0 2a64 	vmov.f32	s5, s9
 8002e62:	eeb0 3a45 	vmov.f32	s6, s10
 8002e66:	eef0 3a65 	vmov.f32	s7, s11
 8002e6a:	eeb0 0a46 	vmov.f32	s0, s12
 8002e6e:	eef0 0a66 	vmov.f32	s1, s13
 8002e72:	eeb0 1a47 	vmov.f32	s2, s14
 8002e76:	eef0 1a67 	vmov.f32	s3, s15
 8002e7a:	f7fe fef2 	bl	8001c62 <FusionQuaternionMultiply>
 8002e7e:	eeb0 6a40 	vmov.f32	s12, s0
 8002e82:	eef0 6a60 	vmov.f32	s13, s1
 8002e86:	eeb0 7a41 	vmov.f32	s14, s2
 8002e8a:	eef0 7a61 	vmov.f32	s15, s3
 8002e8e:	ed84 6a05 	vstr	s12, [r4, #20]
 8002e92:	edc4 6a06 	vstr	s13, [r4, #24]
 8002e96:	ed84 7a07 	vstr	s14, [r4, #28]
 8002e9a:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
	...

08002ea8 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002ecc <FusionRadiansToDegrees+0x24>
 8002eba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	42652ee0 	.word	0x42652ee0

08002ed0 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	105a      	asrs	r2, r3, #1
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <FusionFastInverseSqrt+0x54>)
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8002ee8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002f28 <FusionFastInverseSqrt+0x58>
 8002ef4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f08:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002f2c <FusionFastInverseSqrt+0x5c>
 8002f0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f10:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	5f1f1412 	.word	0x5f1f1412
 8002f28:	3f36d312 	.word	0x3f36d312
 8002f2c:	3fd851ff 	.word	0x3fd851ff

08002f30 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	eef0 6a40 	vmov.f32	s13, s0
 8002f3a:	eeb0 7a60 	vmov.f32	s14, s1
 8002f3e:	eef0 7a41 	vmov.f32	s15, s2
 8002f42:	edc7 6a01 	vstr	s13, [r7, #4]
 8002f46:	ed87 7a02 	vstr	s14, [r7, #8]
 8002f4a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8002f4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002f62:	eeb0 0a67 	vmov.f32	s0, s15
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002f70:	b480      	push	{r7}
 8002f72:	b08f      	sub	sp, #60	; 0x3c
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	eef0 6a40 	vmov.f32	s13, s0
 8002f7a:	eeb0 7a60 	vmov.f32	s14, s1
 8002f7e:	eef0 7a41 	vmov.f32	s15, s2
 8002f82:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f86:	edc7 6a05 	vstr	s13, [r7, #20]
 8002f8a:	ed87 7a06 	vstr	s14, [r7, #24]
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8002f92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f9e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8002fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002faa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002fae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8002fb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002fbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8002fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc6:	f107 0220 	add.w	r2, r7, #32
 8002fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	ee06 1a90 	vmov	s13, r1
 8002fda:	ee07 2a10 	vmov	s14, r2
 8002fde:	ee07 3a90 	vmov	s15, r3
}
 8002fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8002fe6:	eef0 0a47 	vmov.f32	s1, s14
 8002fea:	eeb0 1a67 	vmov.f32	s2, s15
 8002fee:	373c      	adds	r7, #60	; 0x3c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b091      	sub	sp, #68	; 0x44
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	eeb0 5a40 	vmov.f32	s10, s0
 8003002:	eef0 5a60 	vmov.f32	s11, s1
 8003006:	eeb0 6a41 	vmov.f32	s12, s2
 800300a:	eef0 6a61 	vmov.f32	s13, s3
 800300e:	eeb0 7a42 	vmov.f32	s14, s4
 8003012:	eef0 7a62 	vmov.f32	s15, s5
 8003016:	ed87 5a07 	vstr	s10, [r7, #28]
 800301a:	edc7 5a08 	vstr	s11, [r7, #32]
 800301e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003022:	edc7 6a04 	vstr	s13, [r7, #16]
 8003026:	ed87 7a05 	vstr	s14, [r7, #20]
 800302a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800302e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003032:	edd7 7a04 	vldr	s15, [r7, #16]
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800303a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800303e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003042:	edd7 7a05 	vldr	s15, [r7, #20]
 8003046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800304a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800304e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003052:	edd7 7a06 	vldr	s15, [r7, #24]
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800305a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800305e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003066:	ca07      	ldmia	r2, {r0, r1, r2}
 8003068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800306c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800306e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003072:	ee06 1a90 	vmov	s13, r1
 8003076:	ee07 2a10 	vmov	s14, r2
 800307a:	ee07 3a90 	vmov	s15, r3
}
 800307e:	eeb0 0a66 	vmov.f32	s0, s13
 8003082:	eef0 0a47 	vmov.f32	s1, s14
 8003086:	eeb0 1a67 	vmov.f32	s2, s15
 800308a:	3744      	adds	r7, #68	; 0x44
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003094:	b480      	push	{r7}
 8003096:	b091      	sub	sp, #68	; 0x44
 8003098:	af00      	add	r7, sp, #0
 800309a:	eeb0 5a40 	vmov.f32	s10, s0
 800309e:	eef0 5a60 	vmov.f32	s11, s1
 80030a2:	eeb0 6a41 	vmov.f32	s12, s2
 80030a6:	eef0 6a61 	vmov.f32	s13, s3
 80030aa:	eeb0 7a42 	vmov.f32	s14, s4
 80030ae:	eef0 7a62 	vmov.f32	s15, s5
 80030b2:	ed87 5a07 	vstr	s10, [r7, #28]
 80030b6:	edc7 5a08 	vstr	s11, [r7, #32]
 80030ba:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80030be:	edc7 6a04 	vstr	s13, [r7, #16]
 80030c2:	ed87 7a05 	vstr	s14, [r7, #20]
 80030c6:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80030ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80030ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80030d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80030da:	edd7 7a05 	vldr	s15, [r7, #20]
 80030de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80030ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80030f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80030fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80030fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003106:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800310a:	ed97 7a07 	vldr	s14, [r7, #28]
 800310e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003116:	edd7 6a08 	vldr	s13, [r7, #32]
 800311a:	edd7 7a04 	vldr	s15, [r7, #16]
 800311e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003122:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003126:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800312a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800312e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003132:	ca07      	ldmia	r2, {r0, r1, r2}
 8003134:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800313a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800313c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313e:	ee06 1a90 	vmov	s13, r1
 8003142:	ee07 2a10 	vmov	s14, r2
 8003146:	ee07 3a90 	vmov	s15, r3
}
 800314a:	eeb0 0a66 	vmov.f32	s0, s13
 800314e:	eef0 0a47 	vmov.f32	s1, s14
 8003152:	eeb0 1a67 	vmov.f32	s2, s15
 8003156:	3744      	adds	r7, #68	; 0x44
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	eef0 6a40 	vmov.f32	s13, s0
 800316a:	eeb0 7a60 	vmov.f32	s14, s1
 800316e:	eef0 7a41 	vmov.f32	s15, s2
 8003172:	edc7 6a01 	vstr	s13, [r7, #4]
 8003176:	ed87 7a02 	vstr	s14, [r7, #8]
 800317a:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800317e:	ed97 5a01 	vldr	s10, [r7, #4]
 8003182:	edd7 5a02 	vldr	s11, [r7, #8]
 8003186:	ed97 6a03 	vldr	s12, [r7, #12]
 800318a:	edd7 6a01 	vldr	s13, [r7, #4]
 800318e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003192:	edd7 7a03 	vldr	s15, [r7, #12]
 8003196:	eef0 1a45 	vmov.f32	s3, s10
 800319a:	eeb0 2a65 	vmov.f32	s4, s11
 800319e:	eef0 2a46 	vmov.f32	s5, s12
 80031a2:	eeb0 0a66 	vmov.f32	s0, s13
 80031a6:	eef0 0a47 	vmov.f32	s1, s14
 80031aa:	eeb0 1a67 	vmov.f32	s2, s15
 80031ae:	f7ff ff23 	bl	8002ff8 <FusionVectorHadamardProduct>
 80031b2:	eef0 6a40 	vmov.f32	s13, s0
 80031b6:	eeb0 7a60 	vmov.f32	s14, s1
 80031ba:	eef0 7a41 	vmov.f32	s15, s2
 80031be:	edc7 6a05 	vstr	s13, [r7, #20]
 80031c2:	ed87 7a06 	vstr	s14, [r7, #24]
 80031c6:	edc7 7a07 	vstr	s15, [r7, #28]
 80031ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80031ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80031d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80031d6:	eeb0 0a66 	vmov.f32	s0, s13
 80031da:	eef0 0a47 	vmov.f32	s1, s14
 80031de:	eeb0 1a67 	vmov.f32	s2, s15
 80031e2:	f7ff fea5 	bl	8002f30 <FusionVectorSum>
 80031e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80031ea:	eeb0 0a67 	vmov.f32	s0, s15
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	eef0 6a40 	vmov.f32	s13, s0
 80031fe:	eeb0 7a60 	vmov.f32	s14, s1
 8003202:	eef0 7a41 	vmov.f32	s15, s2
 8003206:	edc7 6a05 	vstr	s13, [r7, #20]
 800320a:	ed87 7a06 	vstr	s14, [r7, #24]
 800320e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8003212:	edd7 6a05 	vldr	s13, [r7, #20]
 8003216:	ed97 7a06 	vldr	s14, [r7, #24]
 800321a:	edd7 7a07 	vldr	s15, [r7, #28]
 800321e:	eeb0 0a66 	vmov.f32	s0, s13
 8003222:	eef0 0a47 	vmov.f32	s1, s14
 8003226:	eeb0 1a67 	vmov.f32	s2, s15
 800322a:	f7ff ff99 	bl	8003160 <FusionVectorMagnitudeSquared>
 800322e:	eef0 7a40 	vmov.f32	s15, s0
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	f7ff fe4b 	bl	8002ed0 <FusionFastInverseSqrt>
 800323a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800323e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003242:	ed97 7a06 	vldr	s14, [r7, #24]
 8003246:	edd7 7a07 	vldr	s15, [r7, #28]
 800324a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800324e:	eeb0 0a66 	vmov.f32	s0, s13
 8003252:	eef0 0a47 	vmov.f32	s1, s14
 8003256:	eeb0 1a67 	vmov.f32	s2, s15
 800325a:	f7ff fe89 	bl	8002f70 <FusionVectorMultiplyScalar>
 800325e:	eef0 6a40 	vmov.f32	s13, s0
 8003262:	eeb0 7a60 	vmov.f32	s14, s1
 8003266:	eef0 7a41 	vmov.f32	s15, s2
 800326a:	edc7 6a08 	vstr	s13, [r7, #32]
 800326e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003272:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8003276:	6a39      	ldr	r1, [r7, #32]
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	ee06 1a90 	vmov	s13, r1
 8003280:	ee07 2a10 	vmov	s14, r2
 8003284:	ee07 3a90 	vmov	s15, r3
}
 8003288:	eeb0 0a66 	vmov.f32	s0, s13
 800328c:	eef0 0a47 	vmov.f32	s1, s14
 8003290:	eeb0 1a67 	vmov.f32	s2, s15
 8003294:	3730      	adds	r7, #48	; 0x30
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b0b2      	sub	sp, #200	; 0xc8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	eeb0 5a40 	vmov.f32	s10, s0
 80032a8:	eef0 5a60 	vmov.f32	s11, s1
 80032ac:	eeb0 6a41 	vmov.f32	s12, s2
 80032b0:	eef0 6a61 	vmov.f32	s13, s3
 80032b4:	eeb0 7a42 	vmov.f32	s14, s4
 80032b8:	eef0 7a62 	vmov.f32	s15, s5
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	ed87 5a04 	vstr	s10, [r7, #16]
 80032c2:	edc7 5a05 	vstr	s11, [r7, #20]
 80032c6:	ed87 6a06 	vstr	s12, [r7, #24]
 80032ca:	edc7 6a01 	vstr	s13, [r7, #4]
 80032ce:	ed87 7a02 	vstr	s14, [r7, #8]
 80032d2:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f000 814b 	beq.w	8003574 <FusionCompassCalculateHeading+0x2d8>
 80032de:	2b02      	cmp	r3, #2
 80032e0:	f300 81f7 	bgt.w	80036d2 <FusionCompassCalculateHeading+0x436>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <FusionCompassCalculateHeading+0x54>
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f000 8094 	beq.w	8003416 <FusionCompassCalculateHeading+0x17a>
 80032ee:	e1f0      	b.n	80036d2 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80032f0:	ed97 5a01 	vldr	s10, [r7, #4]
 80032f4:	edd7 5a02 	vldr	s11, [r7, #8]
 80032f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80032fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8003300:	ed97 7a05 	vldr	s14, [r7, #20]
 8003304:	edd7 7a06 	vldr	s15, [r7, #24]
 8003308:	eef0 1a45 	vmov.f32	s3, s10
 800330c:	eeb0 2a65 	vmov.f32	s4, s11
 8003310:	eef0 2a46 	vmov.f32	s5, s12
 8003314:	eeb0 0a66 	vmov.f32	s0, s13
 8003318:	eef0 0a47 	vmov.f32	s1, s14
 800331c:	eeb0 1a67 	vmov.f32	s2, s15
 8003320:	f7ff feb8 	bl	8003094 <FusionVectorCrossProduct>
 8003324:	eef0 6a40 	vmov.f32	s13, s0
 8003328:	eeb0 7a60 	vmov.f32	s14, s1
 800332c:	eef0 7a41 	vmov.f32	s15, s2
 8003330:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003334:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8003338:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800333c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003340:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003344:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003348:	eeb0 0a66 	vmov.f32	s0, s13
 800334c:	eef0 0a47 	vmov.f32	s1, s14
 8003350:	eeb0 1a67 	vmov.f32	s2, s15
 8003354:	f7ff ff4e 	bl	80031f4 <FusionVectorNormalise>
 8003358:	eef0 6a40 	vmov.f32	s13, s0
 800335c:	eeb0 7a60 	vmov.f32	s14, s1
 8003360:	eef0 7a41 	vmov.f32	s15, s2
 8003364:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 8003368:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 800336c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003370:	ed97 5a04 	vldr	s10, [r7, #16]
 8003374:	edd7 5a05 	vldr	s11, [r7, #20]
 8003378:	ed97 6a06 	vldr	s12, [r7, #24]
 800337c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8003380:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003384:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003388:	eef0 1a45 	vmov.f32	s3, s10
 800338c:	eeb0 2a65 	vmov.f32	s4, s11
 8003390:	eef0 2a46 	vmov.f32	s5, s12
 8003394:	eeb0 0a66 	vmov.f32	s0, s13
 8003398:	eef0 0a47 	vmov.f32	s1, s14
 800339c:	eeb0 1a67 	vmov.f32	s2, s15
 80033a0:	f7ff fe78 	bl	8003094 <FusionVectorCrossProduct>
 80033a4:	eef0 6a40 	vmov.f32	s13, s0
 80033a8:	eeb0 7a60 	vmov.f32	s14, s1
 80033ac:	eef0 7a41 	vmov.f32	s15, s2
 80033b0:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80033b4:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80033b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80033bc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80033c0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80033c4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80033c8:	eeb0 0a66 	vmov.f32	s0, s13
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 1a67 	vmov.f32	s2, s15
 80033d4:	f7ff ff0e 	bl	80031f4 <FusionVectorNormalise>
 80033d8:	eef0 6a40 	vmov.f32	s13, s0
 80033dc:	eeb0 7a60 	vmov.f32	s14, s1
 80033e0:	eef0 7a41 	vmov.f32	s15, s2
 80033e4:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 80033e8:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 80033ec:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80033f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80033f4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80033f8:	eef0 0a47 	vmov.f32	s1, s14
 80033fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003400:	f00f ffc6 	bl	8013390 <atan2f>
 8003404:	eef0 7a40 	vmov.f32	s15, s0
 8003408:	eeb0 0a67 	vmov.f32	s0, s15
 800340c:	f7ff fd4c 	bl	8002ea8 <FusionRadiansToDegrees>
 8003410:	eef0 7a40 	vmov.f32	s15, s0
 8003414:	e15f      	b.n	80036d6 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003416:	ed97 5a01 	vldr	s10, [r7, #4]
 800341a:	edd7 5a02 	vldr	s11, [r7, #8]
 800341e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003422:	edd7 6a04 	vldr	s13, [r7, #16]
 8003426:	ed97 7a05 	vldr	s14, [r7, #20]
 800342a:	edd7 7a06 	vldr	s15, [r7, #24]
 800342e:	eef0 1a45 	vmov.f32	s3, s10
 8003432:	eeb0 2a65 	vmov.f32	s4, s11
 8003436:	eef0 2a46 	vmov.f32	s5, s12
 800343a:	eeb0 0a66 	vmov.f32	s0, s13
 800343e:	eef0 0a47 	vmov.f32	s1, s14
 8003442:	eeb0 1a67 	vmov.f32	s2, s15
 8003446:	f7ff fe25 	bl	8003094 <FusionVectorCrossProduct>
 800344a:	eef0 6a40 	vmov.f32	s13, s0
 800344e:	eeb0 7a60 	vmov.f32	s14, s1
 8003452:	eef0 7a41 	vmov.f32	s15, s2
 8003456:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800345a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800345e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8003462:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003466:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800346a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800346e:	eeb0 0a66 	vmov.f32	s0, s13
 8003472:	eef0 0a47 	vmov.f32	s1, s14
 8003476:	eeb0 1a67 	vmov.f32	s2, s15
 800347a:	f7ff febb 	bl	80031f4 <FusionVectorNormalise>
 800347e:	eef0 6a40 	vmov.f32	s13, s0
 8003482:	eeb0 7a60 	vmov.f32	s14, s1
 8003486:	eef0 7a41 	vmov.f32	s15, s2
 800348a:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800348e:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8003492:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003496:	ed97 5a04 	vldr	s10, [r7, #16]
 800349a:	edd7 5a05 	vldr	s11, [r7, #20]
 800349e:	ed97 6a06 	vldr	s12, [r7, #24]
 80034a2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80034a6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80034aa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80034ae:	eef0 1a45 	vmov.f32	s3, s10
 80034b2:	eeb0 2a65 	vmov.f32	s4, s11
 80034b6:	eef0 2a46 	vmov.f32	s5, s12
 80034ba:	eeb0 0a66 	vmov.f32	s0, s13
 80034be:	eef0 0a47 	vmov.f32	s1, s14
 80034c2:	eeb0 1a67 	vmov.f32	s2, s15
 80034c6:	f7ff fde5 	bl	8003094 <FusionVectorCrossProduct>
 80034ca:	eef0 6a40 	vmov.f32	s13, s0
 80034ce:	eeb0 7a60 	vmov.f32	s14, s1
 80034d2:	eef0 7a41 	vmov.f32	s15, s2
 80034d6:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 80034da:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 80034de:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 80034e2:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80034e6:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80034ea:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80034ee:	eeb0 0a66 	vmov.f32	s0, s13
 80034f2:	eef0 0a47 	vmov.f32	s1, s14
 80034f6:	eeb0 1a67 	vmov.f32	s2, s15
 80034fa:	f7ff fe7b 	bl	80031f4 <FusionVectorNormalise>
 80034fe:	eef0 6a40 	vmov.f32	s13, s0
 8003502:	eeb0 7a60 	vmov.f32	s14, s1
 8003506:	eef0 7a41 	vmov.f32	s15, s2
 800350a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800350e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8003512:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 8003516:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800351a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800351e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003522:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003526:	eeb0 0a66 	vmov.f32	s0, s13
 800352a:	eef0 0a47 	vmov.f32	s1, s14
 800352e:	eeb0 1a67 	vmov.f32	s2, s15
 8003532:	f7ff fd1d 	bl	8002f70 <FusionVectorMultiplyScalar>
 8003536:	eef0 6a40 	vmov.f32	s13, s0
 800353a:	eeb0 7a60 	vmov.f32	s14, s1
 800353e:	eef0 7a41 	vmov.f32	s15, s2
 8003542:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8003546:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800354a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800354e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003552:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003556:	eef0 0a47 	vmov.f32	s1, s14
 800355a:	eeb0 0a67 	vmov.f32	s0, s15
 800355e:	f00f ff17 	bl	8013390 <atan2f>
 8003562:	eef0 7a40 	vmov.f32	s15, s0
 8003566:	eeb0 0a67 	vmov.f32	s0, s15
 800356a:	f7ff fc9d 	bl	8002ea8 <FusionRadiansToDegrees>
 800356e:	eef0 7a40 	vmov.f32	s15, s0
 8003572:	e0b0      	b.n	80036d6 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8003574:	edd7 6a04 	vldr	s13, [r7, #16]
 8003578:	ed97 7a05 	vldr	s14, [r7, #20]
 800357c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003580:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003584:	eeb0 0a66 	vmov.f32	s0, s13
 8003588:	eef0 0a47 	vmov.f32	s1, s14
 800358c:	eeb0 1a67 	vmov.f32	s2, s15
 8003590:	f7ff fcee 	bl	8002f70 <FusionVectorMultiplyScalar>
 8003594:	eef0 6a40 	vmov.f32	s13, s0
 8003598:	eeb0 7a60 	vmov.f32	s14, s1
 800359c:	eef0 7a41 	vmov.f32	s15, s2
 80035a0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80035a4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80035a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 80035ac:	ed97 5a01 	vldr	s10, [r7, #4]
 80035b0:	edd7 5a02 	vldr	s11, [r7, #8]
 80035b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80035b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80035bc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035c0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80035c4:	eef0 1a45 	vmov.f32	s3, s10
 80035c8:	eeb0 2a65 	vmov.f32	s4, s11
 80035cc:	eef0 2a46 	vmov.f32	s5, s12
 80035d0:	eeb0 0a66 	vmov.f32	s0, s13
 80035d4:	eef0 0a47 	vmov.f32	s1, s14
 80035d8:	eeb0 1a67 	vmov.f32	s2, s15
 80035dc:	f7ff fd5a 	bl	8003094 <FusionVectorCrossProduct>
 80035e0:	eef0 6a40 	vmov.f32	s13, s0
 80035e4:	eeb0 7a60 	vmov.f32	s14, s1
 80035e8:	eef0 7a41 	vmov.f32	s15, s2
 80035ec:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 80035f0:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 80035f4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 80035f8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80035fc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003600:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003604:	eeb0 0a66 	vmov.f32	s0, s13
 8003608:	eef0 0a47 	vmov.f32	s1, s14
 800360c:	eeb0 1a67 	vmov.f32	s2, s15
 8003610:	f7ff fdf0 	bl	80031f4 <FusionVectorNormalise>
 8003614:	eef0 6a40 	vmov.f32	s13, s0
 8003618:	eeb0 7a60 	vmov.f32	s14, s1
 800361c:	eef0 7a41 	vmov.f32	s15, s2
 8003620:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003624:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003628:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 800362c:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003630:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003634:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8003638:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800363c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003640:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003644:	eef0 1a45 	vmov.f32	s3, s10
 8003648:	eeb0 2a65 	vmov.f32	s4, s11
 800364c:	eef0 2a46 	vmov.f32	s5, s12
 8003650:	eeb0 0a66 	vmov.f32	s0, s13
 8003654:	eef0 0a47 	vmov.f32	s1, s14
 8003658:	eeb0 1a67 	vmov.f32	s2, s15
 800365c:	f7ff fd1a 	bl	8003094 <FusionVectorCrossProduct>
 8003660:	eef0 6a40 	vmov.f32	s13, s0
 8003664:	eeb0 7a60 	vmov.f32	s14, s1
 8003668:	eef0 7a41 	vmov.f32	s15, s2
 800366c:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8003670:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8003674:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8003678:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800367c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003680:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003684:	eeb0 0a66 	vmov.f32	s0, s13
 8003688:	eef0 0a47 	vmov.f32	s1, s14
 800368c:	eeb0 1a67 	vmov.f32	s2, s15
 8003690:	f7ff fdb0 	bl	80031f4 <FusionVectorNormalise>
 8003694:	eef0 6a40 	vmov.f32	s13, s0
 8003698:	eeb0 7a60 	vmov.f32	s14, s1
 800369c:	eef0 7a41 	vmov.f32	s15, s2
 80036a0:	edc7 6a08 	vstr	s13, [r7, #32]
 80036a4:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80036a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80036ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80036b4:	eef0 0a47 	vmov.f32	s1, s14
 80036b8:	eeb0 0a67 	vmov.f32	s0, s15
 80036bc:	f00f fe68 	bl	8013390 <atan2f>
 80036c0:	eef0 7a40 	vmov.f32	s15, s0
 80036c4:	eeb0 0a67 	vmov.f32	s0, s15
 80036c8:	f7ff fbee 	bl	8002ea8 <FusionRadiansToDegrees>
 80036cc:	eef0 7a40 	vmov.f32	s15, s0
 80036d0:	e001      	b.n	80036d6 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 80036d2:	eddf 7a03 	vldr	s15, [pc, #12]	; 80036e0 <FusionCompassCalculateHeading+0x444>
}
 80036d6:	eeb0 0a67 	vmov.f32	s0, s15
 80036da:	37c8      	adds	r7, #200	; 0xc8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	00000000 	.word	0x00000000

080036e4 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003700:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003744 <FusionOffsetInitialise+0x60>
 8003704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	615a      	str	r2, [r3, #20]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	3e00adfd 	.word	0x3e00adfd

08003748 <GetPage>:




static uint32_t GetPage(uint32_t Address)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<256; indx++)
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e016      	b.n	8003784 <GetPage+0x3c>
  {
	  if((Address < (FLASH_BASE + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (FLASH_BASE + FLASH_PAGE_SIZE*indx)))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800375c:	3301      	adds	r3, #1
 800375e:	031b      	lsls	r3, r3, #12
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20b      	bcs.n	800377e <GetPage+0x36>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800376c:	031b      	lsls	r3, r3, #12
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d304      	bcc.n	800377e <GetPage+0x36>
	  {
		  return (FLASH_BASE + FLASH_PAGE_SIZE*indx);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800377a:	031b      	lsls	r3, r3, #12
 800377c:	e006      	b.n	800378c <GetPage+0x44>
  for (int indx=0; indx<256; indx++)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2bff      	cmp	r3, #255	; 0xff
 8003788:	dde5      	ble.n	8003756 <GetPage+0xe>
	  }
  }
  return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e00b      	b.n	80037c6 <float2Bytes+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	440b      	add	r3, r1
 80037b6:	3210      	adds	r2, #16
 80037b8:	443a      	add	r2, r7
 80037ba:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80037be:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	3301      	adds	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d9f0      	bls.n	80037ae <float2Bytes+0x16>
    }

}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 80037da:	b480      	push	{r7}
 80037dc:	b087      	sub	sp, #28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
 80037e6:	e00b      	b.n	8003800 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	441a      	add	r2, r3
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	3318      	adds	r3, #24
 80037f4:	443b      	add	r3, r7
 80037f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	3301      	adds	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d9f0      	bls.n	80037e8 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	613b      	str	r3, [r7, #16]
   return float_variable;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	ee07 3a90 	vmov	s15, r3
}
 8003810:	eeb0 0a67 	vmov.f32	s0, s15
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <FlashReadData>:



void FlashReadData (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	4613      	mov	r3, r2
 800382a:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	601a      	str	r2, [r3, #0]
		StartPageAddress += 8;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3308      	adds	r3, #8
 800383a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	3304      	adds	r3, #4
 8003840:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	1e5a      	subs	r2, r3, #1
 8003846:	80fa      	strh	r2, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d000      	beq.n	800384e <FlashReadData+0x30>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 800384c:	e7ee      	b.n	800382c <FlashReadData+0xe>
		if (!(numberofwords--)) break;
 800384e:	bf00      	nop
	}
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <FlashWriteData>:


uint32_t FlashWriteData (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800385c:	b5b0      	push	{r4, r5, r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800386e:	f003 f843 	bl	80068f8 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff ff68 	bl	8003748 <GetPage>
 8003878:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords * 8;
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8003886:	69f8      	ldr	r0, [r7, #28]
 8003888:	f7ff ff5e 	bl	8003748 <GetPage>
 800388c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <FlashWriteData+0xb4>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = StartPage;
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <FlashWriteData+0xb4>)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	0b1b      	lsrs	r3, r3, #12
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <FlashWriteData+0xb4>)
 80038a6:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	4818      	ldr	r0, [pc, #96]	; (8003910 <FlashWriteData+0xb4>)
 80038b0:	f003 f914 	bl	8006adc <HAL_FLASHEx_Erase>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01f      	beq.n	80038fa <FlashWriteData+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80038ba:	f003 f84f 	bl	800695c <HAL_FLASH_GetError>
 80038be:	4603      	mov	r3, r0
 80038c0:	e022      	b.n	8003908 <FlashWriteData+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data[sofar]) == HAL_OK)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4413      	add	r3, r2
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2200      	movs	r2, #0
 80038ce:	461c      	mov	r4, r3
 80038d0:	4615      	mov	r5, r2
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	68f9      	ldr	r1, [r7, #12]
 80038d8:	2000      	movs	r0, #0
 80038da:	f002 ffa1 	bl	8006820 <HAL_FLASH_Program>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <FlashWriteData+0x96>
	     {
	    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3308      	adds	r3, #8
 80038e8:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	3301      	adds	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	e003      	b.n	80038fa <FlashWriteData+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80038f2:	f003 f833 	bl	800695c <HAL_FLASH_GetError>
 80038f6:	4603      	mov	r3, r0
 80038f8:	e006      	b.n	8003908 <FlashWriteData+0xac>
	   while (sofar<numberofwords)
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	429a      	cmp	r2, r3
 8003900:	dbdf      	blt.n	80038c2 <FlashWriteData+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8003902:	f003 f81b 	bl	800693c <HAL_FLASH_Lock>

	   return 0;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bdb0      	pop	{r4, r5, r7, pc}
 8003910:	200002ec 	.word	0x200002ec

08003914 <Flash_Write_NUM>:

void Flash_Write_NUM (uint32_t StartSectorAddress, float Num)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	ed87 0a00 	vstr	s0, [r7]
	float2Bytes(bytes_temp, Num);
 8003920:	ed97 0a00 	vldr	s0, [r7]
 8003924:	4805      	ldr	r0, [pc, #20]	; (800393c <Flash_Write_NUM+0x28>)
 8003926:	f7ff ff37 	bl	8003798 <float2Bytes>

	FlashWriteData (StartSectorAddress, (uint32_t *)bytes_temp, 1);
 800392a:	2201      	movs	r2, #1
 800392c:	4903      	ldr	r1, [pc, #12]	; (800393c <Flash_Write_NUM+0x28>)
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff94 	bl	800385c <FlashWriteData>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200002e8 	.word	0x200002e8

08003940 <Flash_Read_NUM>:


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	FlashReadData(StartSectorAddress, (uint32_t *)buffer, 1);
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	2201      	movs	r2, #1
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff64 	bl	800381e <FlashReadData>
	value = Bytes2float(buffer);
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff3d 	bl	80037da <Bytes2float>
 8003960:	ed87 0a03 	vstr	s0, [r7, #12]
	return value;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	ee07 3a90 	vmov	s15, r3
}
 800396a:	eeb0 0a67 	vmov.f32	s0, s15
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <ublox_i2c_bus_init+0x78>)
 800397c:	601a      	str	r2, [r3, #0]
//	hi2c1.Init.Timing = 0x00B03FDB; 400KB i2c speed
	hi2c1.Init.Timing = 0x307075B1;	//100KB i2c speed
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 8003980:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <ublox_i2c_bus_init+0x7c>)
 8003982:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003984:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 800398c:	2201      	movs	r2, #1
 800398e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003990:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003996:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 8003998:	2200      	movs	r2, #0
 800399a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039ae:	480e      	ldr	r0, [pc, #56]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 80039b0:	f003 fbdd 	bl	800716e <HAL_I2C_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e012      	b.n	80039e4 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039be:	2100      	movs	r1, #0
 80039c0:	4809      	ldr	r0, [pc, #36]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 80039c2:	f004 fbb5 	bl	8008130 <HAL_I2CEx_ConfigAnalogFilter>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 80039cc:	2302      	movs	r3, #2
 80039ce:	e009      	b.n	80039e4 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039d0:	2100      	movs	r1, #0
 80039d2:	4805      	ldr	r0, [pc, #20]	; (80039e8 <ublox_i2c_bus_init+0x74>)
 80039d4:	f004 fbf7 	bl	80081c6 <HAL_I2CEx_ConfigDigitalFilter>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 80039de:	2303      	movs	r3, #3
 80039e0:	e000      	b.n	80039e4 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200002fc 	.word	0x200002fc
 80039ec:	40005400 	.word	0x40005400
 80039f0:	307075b1 	.word	0x307075b1

080039f4 <ublox_transmit_rtc>:
    else{
        parseNMEA();
    }
}

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	460a      	mov	r2, r1
 80039fe:	71fb      	strb	r3, [r7, #7]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 8003a04:	79fa      	ldrb	r2, [r7, #7]
 8003a06:	79bb      	ldrb	r3, [r7, #6]
 8003a08:	2109      	movs	r1, #9
 8003a0a:	4803      	ldr	r0, [pc, #12]	; (8003a18 <ublox_transmit_rtc+0x24>)
 8003a0c:	f001 fac2 	bl	8004f94 <transmitMessage>
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000039b 	.word	0x2000039b

08003a1c <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	460a      	mov	r2, r1
 8003a26:	71fb      	strb	r3, [r7, #7]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	f107 0310 	add.w	r3, r7, #16
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	0e1b      	lsrs	r3, r3, #24
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	141b      	asrs	r3, r3, #16
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	121b      	asrs	r3, r3, #8
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	0e1b      	lsrs	r3, r3, #24
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	141b      	asrs	r3, r3, #16
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	121b      	asrs	r3, r3, #8
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8a:	0e1b      	lsrs	r3, r3, #24
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a94:	141b      	asrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	121b      	asrs	r3, r3, #8
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <ublox_transmit_message+0xa8>)
 8003aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 8003aac:	79fa      	ldrb	r2, [r7, #7]
 8003aae:	79bb      	ldrb	r3, [r7, #6]
 8003ab0:	f107 000c 	add.w	r0, r7, #12
 8003ab4:	210c      	movs	r1, #12
 8003ab6:	f001 fa6d 	bl	8004f94 <transmitMessage>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000350 	.word	0x20000350

08003ac8 <ubloxInit>:

UBLOX_transResult ubloxInit(void){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
	UBLOX_transResult ret;
	uint8_t res[10] = {0};
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	809a      	strh	r2, [r3, #4]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 8003adc:	2102      	movs	r1, #2
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f000 f9e0 	bl	8003ea4 <setPortOutput>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d00a      	beq.n	8003b04 <ubloxInit+0x3c>
    	sprintf(res, " POUT:%d\r\n,", ret);
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	495d      	ldr	r1, [pc, #372]	; (8003c68 <ubloxInit+0x1a0>)
 8003af4:	4618      	mov	r0, r3
 8003af6:	f00d fa23 	bl	8010f40 <siprintf>
		uart_write_debug(res, 50);
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	2132      	movs	r1, #50	; 0x32
 8003afe:	4618      	mov	r0, r3
 8003b00:	f002 fb02 	bl	8006108 <uart_write_debug>
    }
    HAL_Delay(10);
 8003b04:	200a      	movs	r0, #10
 8003b06:	f002 fcc9 	bl	800649c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2101      	movs	r1, #1
 8003b10:	20f0      	movs	r0, #240	; 0xf0
 8003b12:	f000 f9f7 	bl	8003f04 <configureNMEA>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d00a      	beq.n	8003b36 <ubloxInit+0x6e>
    	sprintf(res, " GGL:%d\r\n,", ret);
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	4951      	ldr	r1, [pc, #324]	; (8003c6c <ubloxInit+0x1a4>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	f00d fa0a 	bl	8010f40 <siprintf>
    	uart_write_debug(res, 50);
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	2132      	movs	r1, #50	; 0x32
 8003b30:	4618      	mov	r0, r3
 8003b32:	f002 fae9 	bl	8006108 <uart_write_debug>
    }
    HAL_Delay(10);
 8003b36:	200a      	movs	r0, #10
 8003b38:	f002 fcb0 	bl	800649c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2102      	movs	r1, #2
 8003b42:	20f0      	movs	r0, #240	; 0xf0
 8003b44:	f000 f9de 	bl	8003f04 <configureNMEA>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d00a      	beq.n	8003b68 <ubloxInit+0xa0>
    	sprintf(res, " GSA:%d\r\n,", ret);
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	4946      	ldr	r1, [pc, #280]	; (8003c70 <ubloxInit+0x1a8>)
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f00d f9f1 	bl	8010f40 <siprintf>
		uart_write_debug(res, 50);
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	2132      	movs	r1, #50	; 0x32
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 fad0 	bl	8006108 <uart_write_debug>
    }
    HAL_Delay(10);
 8003b68:	200a      	movs	r0, #10
 8003b6a:	f002 fc97 	bl	800649c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2200      	movs	r2, #0
 8003b72:	2103      	movs	r1, #3
 8003b74:	20f0      	movs	r0, #240	; 0xf0
 8003b76:	f000 f9c5 	bl	8003f04 <configureNMEA>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d00a      	beq.n	8003b9a <ubloxInit+0xd2>
    	sprintf(res, " GSV:%d\r\n,", ret);
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	493a      	ldr	r1, [pc, #232]	; (8003c74 <ubloxInit+0x1ac>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f00d f9d8 	bl	8010f40 <siprintf>
		uart_write_debug(res, 50);
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	2132      	movs	r1, #50	; 0x32
 8003b94:	4618      	mov	r0, r3
 8003b96:	f002 fab7 	bl	8006108 <uart_write_debug>
    }
    HAL_Delay(10);
 8003b9a:	200a      	movs	r0, #10
 8003b9c:	f002 fc7e 	bl	800649c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	20f0      	movs	r0, #240	; 0xf0
 8003ba8:	f000 f9ac 	bl	8003f04 <configureNMEA>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d00a      	beq.n	8003bcc <ubloxInit+0x104>
    	sprintf(res, " RMC:%d\r\n,", ret);
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	492f      	ldr	r1, [pc, #188]	; (8003c78 <ubloxInit+0x1b0>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00d f9bf 	bl	8010f40 <siprintf>
		uart_write_debug(res, 50);
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	2132      	movs	r1, #50	; 0x32
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fa9e 	bl	8006108 <uart_write_debug>
    }
    HAL_Delay(10);
 8003bcc:	200a      	movs	r0, #10
 8003bce:	f002 fc65 	bl	800649c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2105      	movs	r1, #5
 8003bd8:	20f0      	movs	r0, #240	; 0xf0
 8003bda:	f000 f993 	bl	8003f04 <configureNMEA>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d00a      	beq.n	8003bfe <ubloxInit+0x136>
    	sprintf(res, " VTG:%d\r\n,", ret);
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	4923      	ldr	r1, [pc, #140]	; (8003c7c <ubloxInit+0x1b4>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f00d f9a6 	bl	8010f40 <siprintf>
		uart_write_debug(res, 50);
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	2132      	movs	r1, #50	; 0x32
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f002 fa85 	bl	8006108 <uart_write_debug>
    }
    HAL_Delay(10);
 8003bfe:	200a      	movs	r0, #10
 8003c00:	f002 fc4c 	bl	800649c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8003c04:	2300      	movs	r3, #0
 8003c06:	2202      	movs	r2, #2
 8003c08:	2100      	movs	r1, #0
 8003c0a:	20f0      	movs	r0, #240	; 0xf0
 8003c0c:	f000 f97a 	bl	8003f04 <configureNMEA>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d00a      	beq.n	8003c30 <ubloxInit+0x168>
    	sprintf(res, " GGA:%d\r\n,", ret);
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	4918      	ldr	r1, [pc, #96]	; (8003c80 <ubloxInit+0x1b8>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f00d f98d 	bl	8010f40 <siprintf>
		uart_write_debug(res, 50);
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	2132      	movs	r1, #50	; 0x32
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 fa6c 	bl	8006108 <uart_write_debug>
    }
    HAL_Delay(10);
 8003c30:	200a      	movs	r0, #10
 8003c32:	f002 fc33 	bl	800649c <HAL_Delay>
    ret = powerManageCfgSet(120);
 8003c36:	2078      	movs	r0, #120	; 0x78
 8003c38:	f000 f996 	bl	8003f68 <powerManageCfgSet>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d00a      	beq.n	8003c5c <ubloxInit+0x194>
		sprintf(res, " PM2:%d\r\n,", ret);
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	490e      	ldr	r1, [pc, #56]	; (8003c84 <ubloxInit+0x1bc>)
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00d f977 	bl	8010f40 <siprintf>
		uart_write_debug(res, 50);
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	2132      	movs	r1, #50	; 0x32
 8003c56:	4618      	mov	r0, r3
 8003c58:	f002 fa56 	bl	8006108 <uart_write_debug>
    }
	return ret;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	08014970 	.word	0x08014970
 8003c6c:	0801497c 	.word	0x0801497c
 8003c70:	08014988 	.word	0x08014988
 8003c74:	08014994 	.word	0x08014994
 8003c78:	080149a0 	.word	0x080149a0
 8003c7c:	080149ac 	.word	0x080149ac
 8003c80:	080149b8 	.word	0x080149b8
 8003c84:	080149c4 	.word	0x080149c4

08003c88 <calcChecksum>:
    memset(gps_data.sentence, 0, 75);
    return 0;
}


static void calcChecksum(messageCFG_t *msg){
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7b1a      	ldrb	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7b5a      	ldrb	r2, [r3, #13]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7b1b      	ldrb	r3, [r3, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7b1a      	ldrb	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7b5a      	ldrb	r2, [r3, #13]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	7b1b      	ldrb	r3, [r3, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7b1a      	ldrb	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	885b      	ldrh	r3, [r3, #2]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7b5a      	ldrb	r2, [r3, #13]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7b1b      	ldrb	r3, [r3, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7b1a      	ldrb	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	885b      	ldrh	r3, [r3, #2]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7b5a      	ldrb	r2, [r3, #13]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7b1b      	ldrb	r3, [r3, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e015      	b.n	8003d56 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7b1a      	ldrb	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6899      	ldr	r1, [r3, #8]
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	440b      	add	r3, r1
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7b5a      	ldrb	r2, [r3, #13]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7b1b      	ldrb	r3, [r3, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	885b      	ldrh	r3, [r3, #2]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d3e3      	bcc.n	8003d2a <calcChecksum+0xa2>
    }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <sendI2Cmessage>:

UBLOX_transResult sendI2Cmessage(void){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b098      	sub	sp, #96	; 0x60
 8003d74:	af02      	add	r7, sp, #8
	UBLOX_transResult res;
    uint8_t message[60] = {0};
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	f107 031c 	add.w	r3, r7, #28
 8003d7e:	2238      	movs	r2, #56	; 0x38
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f00c fb7a 	bl	801047c <memset>
    uint8_t rx_message[20] = {0};
 8003d88:	2300      	movs	r3, #0
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	f107 0308 	add.w	r3, r7, #8
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	60da      	str	r2, [r3, #12]
    uint8_t len = config_message.len + 8;
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003d9c:	885b      	ldrh	r3, [r3, #2]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3308      	adds	r3, #8
 8003da2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    message[0] = UBX_SYNCH_1;
 8003da6:	23b5      	movs	r3, #181	; 0xb5
 8003da8:	763b      	strb	r3, [r7, #24]
    message[1] = UBX_SYNCH_2;
 8003daa:	2362      	movs	r3, #98	; 0x62
 8003dac:	767b      	strb	r3, [r7, #25]
    message[2] = config_message.cls;
 8003dae:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	76bb      	strb	r3, [r7, #26]
    message[3] = config_message.id;
 8003db4:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	76fb      	strb	r3, [r7, #27]
    message[4] = (config_message.len & 0xFF);
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003dbc:	885b      	ldrh	r3, [r3, #2]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	773b      	strb	r3, [r7, #28]
    message[5] = (config_message.len >> 8);
 8003dc2:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003dc4:	885b      	ldrh	r3, [r3, #2]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	777b      	strb	r3, [r7, #29]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003dd4:	e011      	b.n	8003dfa <sendI2Cmessage+0x8a>
        message[6+i] = config_message.payload[i];
 8003dd6:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003dde:	441a      	add	r2, r3
 8003de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003de4:	3306      	adds	r3, #6
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	3358      	adds	r3, #88	; 0x58
 8003dea:	443b      	add	r3, r7
 8003dec:	f803 2c40 	strb.w	r2, [r3, #-64]
    for ( i=0 ; i < config_message.len ; i++){
 8003df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003df4:	3301      	adds	r3, #1
 8003df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003e02:	885b      	ldrh	r3, [r3, #2]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d3e6      	bcc.n	8003dd6 <sendI2Cmessage+0x66>
    }
    message[6+i] = config_message.checksumA;
 8003e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e0c:	3306      	adds	r3, #6
 8003e0e:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003e10:	7b12      	ldrb	r2, [r2, #12]
 8003e12:	3358      	adds	r3, #88	; 0x58
 8003e14:	443b      	add	r3, r7
 8003e16:	f803 2c40 	strb.w	r2, [r3, #-64]
    message[7+i] = config_message.checksumB;
 8003e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e1e:	3307      	adds	r3, #7
 8003e20:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <sendI2Cmessage+0x130>)
 8003e22:	7b52      	ldrb	r2, [r2, #13]
 8003e24:	3358      	adds	r3, #88	; 0x58
 8003e26:	443b      	add	r3, r7
 8003e28:	f803 2c40 	strb.w	r2, [r3, #-64]
    res = UbloxI2CWriteReadPolling(UBLOX_M9N, message, len, rx_message, 20, 50);
 8003e2c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	f107 0118 	add.w	r1, r7, #24
 8003e38:	2032      	movs	r0, #50	; 0x32
 8003e3a:	9001      	str	r0, [sp, #4]
 8003e3c:	2014      	movs	r0, #20
 8003e3e:	9000      	str	r0, [sp, #0]
 8003e40:	2084      	movs	r0, #132	; 0x84
 8003e42:	f000 f8b1 	bl	8003fa8 <UbloxI2CWriteReadPolling>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    if (res == TRANS_OK){
 8003e4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11e      	bne.n	8003e92 <sendI2Cmessage+0x122>
    	for(i=0; i<20;i++){
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003e5a:	e00c      	b.n	8003e76 <sendI2Cmessage+0x106>
    		if(rx_message[i] == UBX_SYNCH_1){
 8003e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e60:	3358      	adds	r3, #88	; 0x58
 8003e62:	443b      	add	r3, r7
 8003e64:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8003e68:	2bb5      	cmp	r3, #181	; 0xb5
 8003e6a:	d009      	beq.n	8003e80 <sendI2Cmessage+0x110>
    	for(i=0; i<20;i++){
 8003e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e70:	3301      	adds	r3, #1
 8003e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e7a:	2b13      	cmp	r3, #19
 8003e7c:	d9ee      	bls.n	8003e5c <sendI2Cmessage+0xec>
 8003e7e:	e000      	b.n	8003e82 <sendI2Cmessage+0x112>
    			break;
 8003e80:	bf00      	nop
    		}
    	}
    	return rx_message[i+3];  //UBLOX returns 1 for ACK and 0 for NACK
 8003e82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e86:	3303      	adds	r3, #3
 8003e88:	3358      	adds	r3, #88	; 0x58
 8003e8a:	443b      	add	r3, r7
 8003e8c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8003e90:	e001      	b.n	8003e96 <sendI2Cmessage+0x126>
    }
    return res;
 8003e92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3758      	adds	r7, #88	; 0x58
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000002c 	.word	0x2000002c

08003ea4 <setPortOutput>:

UBLOX_transResult setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	460a      	mov	r2, r1
 8003eae:	71fb      	strb	r3, [r7, #7]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <setPortOutput+0x5c>)
 8003eb6:	2206      	movs	r2, #6
 8003eb8:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <setPortOutput+0x5c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <setPortOutput+0x5c>)
 8003ec2:	2214      	movs	r2, #20
 8003ec4:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	f107 0310 	add.w	r3, r7, #16
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8003ed8:	2384      	movs	r3, #132	; 0x84
 8003eda:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 8003edc:	2323      	movs	r3, #35	; 0x23
 8003ede:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8003ee0:	79bb      	ldrb	r3, [r7, #6]
 8003ee2:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <setPortOutput+0x5c>)
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003eec:	4804      	ldr	r0, [pc, #16]	; (8003f00 <setPortOutput+0x5c>)
 8003eee:	f7ff fecb 	bl	8003c88 <calcChecksum>
    return sendI2Cmessage();
 8003ef2:	f7ff ff3d 	bl	8003d70 <sendI2Cmessage>
 8003ef6:	4603      	mov	r3, r0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	2000002c 	.word	0x2000002c

08003f04 <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

UBLOX_transResult configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	71fb      	strb	r3, [r7, #7]
 8003f16:	4603      	mov	r3, r0
 8003f18:	71bb      	strb	r3, [r7, #6]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	717b      	strb	r3, [r7, #5]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <configureNMEA+0x60>)
 8003f24:	2206      	movs	r2, #6
 8003f26:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8003f28:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <configureNMEA+0x60>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <configureNMEA+0x60>)
 8003f30:	2208      	movs	r2, #8
 8003f32:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8003f40:	79bb      	ldrb	r3, [r7, #6]
 8003f42:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 8003f44:	797b      	ldrb	r3, [r7, #5]
 8003f46:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8003f48:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <configureNMEA+0x60>)
 8003f4a:	f107 0308 	add.w	r3, r7, #8
 8003f4e:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003f50:	4804      	ldr	r0, [pc, #16]	; (8003f64 <configureNMEA+0x60>)
 8003f52:	f7ff fe99 	bl	8003c88 <calcChecksum>
    return sendI2Cmessage();
 8003f56:	f7ff ff0b 	bl	8003d70 <sendI2Cmessage>
 8003f5a:	4603      	mov	r3, r0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd90      	pop	{r4, r7, pc}
 8003f64:	2000002c 	.word	0x2000002c

08003f68 <powerManageCfgSet>:
    message[7] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 8, payload, 56, 200);
}


UBLOX_transResult powerManageCfgSet(uint8_t maxAckTime){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
    config_message.cls = UBX_CLASS_CFG;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <powerManageCfgSet+0x38>)
 8003f74:	2206      	movs	r2, #6
 8003f76:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PM2;
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <powerManageCfgSet+0x38>)
 8003f7a:	223b      	movs	r2, #59	; 0x3b
 8003f7c:	705a      	strb	r2, [r3, #1]
    config_message.len = 44;
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <powerManageCfgSet+0x38>)
 8003f80:	222c      	movs	r2, #44	; 0x2c
 8003f82:	805a      	strh	r2, [r3, #2]
    config_message.payload = powerModesetPld;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <powerManageCfgSet+0x38>)
 8003f86:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <powerManageCfgSet+0x3c>)
 8003f88:	609a      	str	r2, [r3, #8]
    calcChecksum(&config_message);
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <powerManageCfgSet+0x38>)
 8003f8c:	f7ff fe7c 	bl	8003c88 <calcChecksum>
    return sendI2Cmessage();
 8003f90:	f7ff feee 	bl	8003d70 <sendI2Cmessage>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2000002c 	.word	0x2000002c
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <UbloxI2CWriteReadPolling>:
}


UBLOX_transResult UbloxI2CWriteReadPolling(uint16_t DevAddress, uint8_t *TData, uint16_t TDataLen,
										uint8_t *RData, uint16_t RDataLen, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	81fb      	strh	r3, [r7, #14]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0x00;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit(&hi2c1, DevAddress, TData, TDataLen, Timeout)!= HAL_OK ){
 8003fbe:	89ba      	ldrh	r2, [r7, #12]
 8003fc0:	89f9      	ldrh	r1, [r7, #14]
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	480d      	ldr	r0, [pc, #52]	; (8004000 <UbloxI2CWriteReadPolling+0x58>)
 8003fcc:	f003 f95e 	bl	800728c <HAL_I2C_Master_Transmit>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <UbloxI2CWriteReadPolling+0x32>
		return TRANS_ERROR;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e00e      	b.n	8003ff8 <UbloxI2CWriteReadPolling+0x50>
	}
	// Read Response
	if (HAL_I2C_Master_Receive(&hi2c1, DevAddress, RData, RDataLen, Timeout) != HAL_OK){
 8003fda:	8c3a      	ldrh	r2, [r7, #32]
 8003fdc:	89f9      	ldrh	r1, [r7, #14]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4806      	ldr	r0, [pc, #24]	; (8004000 <UbloxI2CWriteReadPolling+0x58>)
 8003fe8:	f003 fa44 	bl	8007474 <HAL_I2C_Master_Receive>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <UbloxI2CWriteReadPolling+0x4e>
		return RECEIVE_ERROR;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e000      	b.n	8003ff8 <UbloxI2CWriteReadPolling+0x50>
	}
	return TRANS_OK;
 8003ff6:	2304      	movs	r3, #4
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200002fc 	.word	0x200002fc

08004004 <tick_gyro>:

uint16_t gyro_offset_counter = 0;
gyro_data_t gyro_sum;
gyro_data_t gyro_mean;

void tick_gyro(mems_data_t * mems_data){
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
    gyro_read(mems_data);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8f3 	bl	80041f8 <gyro_read>
    lsm6_acc_read(mems_data);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f974 	bl	8004300 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f9d7 	bl	80043cc <lis3_magn_read>
//    osDelay(5);
//    debugPrintMEMS(mems_data);
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <lsm6_bus_init+0x74>)
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <lsm6_bus_init+0x78>)
 8004030:	601a      	str	r2, [r3, #0]
//hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.Timing = 0x307075B1;
 8004032:	4b1a      	ldr	r3, [pc, #104]	; (800409c <lsm6_bus_init+0x74>)
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <lsm6_bus_init+0x7c>)
 8004036:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <lsm6_bus_init+0x74>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <lsm6_bus_init+0x74>)
 8004040:	2201      	movs	r2, #1
 8004042:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <lsm6_bus_init+0x74>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <lsm6_bus_init+0x74>)
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <lsm6_bus_init+0x74>)
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <lsm6_bus_init+0x74>)
 8004058:	2200      	movs	r2, #0
 800405a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <lsm6_bus_init+0x74>)
 800405e:	2200      	movs	r2, #0
 8004060:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <lsm6_bus_init+0x74>)
 8004064:	f003 f883 	bl	800716e <HAL_I2C_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <lsm6_bus_init+0x4a>
  {
    return 1;
 800406e:	2301      	movs	r3, #1
 8004070:	e012      	b.n	8004098 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004072:	2100      	movs	r1, #0
 8004074:	4809      	ldr	r0, [pc, #36]	; (800409c <lsm6_bus_init+0x74>)
 8004076:	f004 f85b 	bl	8008130 <HAL_I2CEx_ConfigAnalogFilter>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <lsm6_bus_init+0x5c>
  {
    return 2;
 8004080:	2302      	movs	r3, #2
 8004082:	e009      	b.n	8004098 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004084:	2100      	movs	r1, #0
 8004086:	4805      	ldr	r0, [pc, #20]	; (800409c <lsm6_bus_init+0x74>)
 8004088:	f004 f89d 	bl	80081c6 <HAL_I2CEx_ConfigDigitalFilter>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <lsm6_bus_init+0x6e>
  {
    return 3;
 8004092:	2303      	movs	r3, #3
 8004094:	e000      	b.n	8004098 <lsm6_bus_init+0x70>
  }
  return 0;
 8004096:	2300      	movs	r3, #0

}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200003c8 	.word	0x200003c8
 80040a0:	40005800 	.word	0x40005800
 80040a4:	307075b1 	.word	0x307075b1

080040a8 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 80040ae:	2350      	movs	r3, #80	; 0x50
 80040b0:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x44;   // block data update - reg addr auto incr
 80040b2:	2344      	movs	r3, #68	; 0x44
 80040b4:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 80040b6:	2314      	movs	r3, #20
 80040b8:	9302      	str	r3, [sp, #8]
 80040ba:	2301      	movs	r3, #1
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	1dfb      	adds	r3, r7, #7
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2301      	movs	r3, #1
 80040c4:	2211      	movs	r2, #17
 80040c6:	21d4      	movs	r1, #212	; 0xd4
 80040c8:	4809      	ldr	r0, [pc, #36]	; (80040f0 <gyro_init+0x48>)
 80040ca:	f003 fac9 	bl	8007660 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 80040ce:	2314      	movs	r3, #20
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	2301      	movs	r3, #1
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	1dbb      	adds	r3, r7, #6
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2301      	movs	r3, #1
 80040dc:	2212      	movs	r2, #18
 80040de:	21d4      	movs	r1, #212	; 0xd4
 80040e0:	4803      	ldr	r0, [pc, #12]	; (80040f0 <gyro_init+0x48>)
 80040e2:	f003 fabd 	bl	8007660 <HAL_I2C_Mem_Write>
 80040e6:	4603      	mov	r3, r0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200003c8 	.word	0x200003c8

080040f4 <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 80040fa:	2350      	movs	r3, #80	; 0x50
 80040fc:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 80040fe:	2320      	movs	r3, #32
 8004100:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8004102:	2314      	movs	r3, #20
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	2301      	movs	r3, #1
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2301      	movs	r3, #1
 8004110:	2210      	movs	r2, #16
 8004112:	21d4      	movs	r1, #212	; 0xd4
 8004114:	4809      	ldr	r0, [pc, #36]	; (800413c <lsm6_acc_init+0x48>)
 8004116:	f003 faa3 	bl	8007660 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 800411a:	2314      	movs	r3, #20
 800411c:	9302      	str	r3, [sp, #8]
 800411e:	2301      	movs	r3, #1
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	1dbb      	adds	r3, r7, #6
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2301      	movs	r3, #1
 8004128:	2219      	movs	r2, #25
 800412a:	21d4      	movs	r1, #212	; 0xd4
 800412c:	4803      	ldr	r0, [pc, #12]	; (800413c <lsm6_acc_init+0x48>)
 800412e:	f003 fa97 	bl	8007660 <HAL_I2C_Mem_Write>
 8004132:	4603      	mov	r3, r0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200003c8 	.word	0x200003c8

08004140 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 800414a:	2342      	movs	r3, #66	; 0x42
 800414c:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 800414e:	2300      	movs	r3, #0
 8004150:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 8004152:	2308      	movs	r3, #8
 8004154:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 8004156:	2340      	movs	r3, #64	; 0x40
 8004158:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 50);
 800415a:	2332      	movs	r3, #50	; 0x32
 800415c:	9302      	str	r3, [sp, #8]
 800415e:	2301      	movs	r3, #1
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	1dbb      	adds	r3, r7, #6
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2301      	movs	r3, #1
 8004168:	2220      	movs	r2, #32
 800416a:	213c      	movs	r1, #60	; 0x3c
 800416c:	4821      	ldr	r0, [pc, #132]	; (80041f4 <magn_init+0xb4>)
 800416e:	f003 fa77 	bl	8007660 <HAL_I2C_Mem_Write>
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <magn_init+0x40>
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	e034      	b.n	80041ea <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 50);
 8004180:	2332      	movs	r3, #50	; 0x32
 8004182:	9302      	str	r3, [sp, #8]
 8004184:	2301      	movs	r3, #1
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	1d7b      	adds	r3, r7, #5
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2301      	movs	r3, #1
 800418e:	2222      	movs	r2, #34	; 0x22
 8004190:	213c      	movs	r1, #60	; 0x3c
 8004192:	4818      	ldr	r0, [pc, #96]	; (80041f4 <magn_init+0xb4>)
 8004194:	f003 fa64 	bl	8007660 <HAL_I2C_Mem_Write>
 8004198:	4603      	mov	r3, r0
 800419a:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <magn_init+0x66>
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	e021      	b.n	80041ea <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 50);
 80041a6:	2332      	movs	r3, #50	; 0x32
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	2301      	movs	r3, #1
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2301      	movs	r3, #1
 80041b4:	2223      	movs	r2, #35	; 0x23
 80041b6:	213c      	movs	r1, #60	; 0x3c
 80041b8:	480e      	ldr	r0, [pc, #56]	; (80041f4 <magn_init+0xb4>)
 80041ba:	f003 fa51 	bl	8007660 <HAL_I2C_Mem_Write>
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <magn_init+0x8c>
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	e00e      	b.n	80041ea <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 50);
 80041cc:	2332      	movs	r3, #50	; 0x32
 80041ce:	9302      	str	r3, [sp, #8]
 80041d0:	2301      	movs	r3, #1
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	1cfb      	adds	r3, r7, #3
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2301      	movs	r3, #1
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	213c      	movs	r1, #60	; 0x3c
 80041de:	4805      	ldr	r0, [pc, #20]	; (80041f4 <magn_init+0xb4>)
 80041e0:	f003 fa3e 	bl	8007660 <HAL_I2C_Mem_Write>
 80041e4:	4603      	mov	r3, r0
 80041e6:	71fb      	strb	r3, [r7, #7]
    return res;
 80041e8:	79fb      	ldrb	r3, [r7, #7]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200003c8 	.word	0x200003c8

080041f8 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08c      	sub	sp, #48	; 0x30
 80041fc:	af04      	add	r7, sp, #16
 80041fe:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	2300      	movs	r3, #0
 8004206:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004210:	2332      	movs	r3, #50	; 0x32
 8004212:	9302      	str	r3, [sp, #8]
 8004214:	2306      	movs	r3, #6
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	f107 0310 	add.w	r3, r7, #16
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2301      	movs	r3, #1
 8004220:	2222      	movs	r2, #34	; 0x22
 8004222:	21d4      	movs	r1, #212	; 0xd4
 8004224:	4833      	ldr	r0, [pc, #204]	; (80042f4 <gyro_read+0xfc>)
 8004226:	f003 fb2f 	bl	8007888 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <gyro_read+0x3c>
		return res;
 8004230:	7ffb      	ldrb	r3, [r7, #31]
 8004232:	e05a      	b.n	80042ea <gyro_read+0xf2>
	}
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 4, 50);
 8004234:	2332      	movs	r3, #50	; 0x32
 8004236:	9302      	str	r3, [sp, #8]
 8004238:	2304      	movs	r3, #4
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	2301      	movs	r3, #1
 8004244:	2240      	movs	r2, #64	; 0x40
 8004246:	21d4      	movs	r1, #212	; 0xd4
 8004248:	482a      	ldr	r0, [pc, #168]	; (80042f4 <gyro_read+0xfc>)
 800424a:	f003 fb1d 	bl	8007888 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 800424e:	7ffb      	ldrb	r3, [r7, #31]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <gyro_read+0x60>
		return res;
 8004254:	7ffb      	ldrb	r3, [r7, #31]
 8004256:	e048      	b.n	80042ea <gyro_read+0xf2>
	}
    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 8004258:	7c7b      	ldrb	r3, [r7, #17]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	b21a      	sxth	r2, r3
 800425e:	7c3b      	ldrb	r3, [r7, #16]
 8004260:	b21b      	sxth	r3, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	b21a      	sxth	r2, r3
 800426c:	7cbb      	ldrb	r3, [r7, #18]
 800426e:	b21b      	sxth	r3, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 8004274:	7d7b      	ldrb	r3, [r7, #21]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	b21a      	sxth	r2, r3
 800427a:	7d3b      	ldrb	r3, [r7, #20]
 800427c:	b21b      	sxth	r3, r3
 800427e:	4313      	orrs	r3, r2
 8004280:	833b      	strh	r3, [r7, #24]
    mems_data->gyro.gyro_x = (gyro_x / -131.1f);// * -1.0f;
 8004282:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800428e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80042f8 <gyro_read+0x100>
 8004292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro.gyro_y = (gyro_y / -131.1f);// * -1.0f;
 800429c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042a8:	eddf 6a13 	vldr	s13, [pc, #76]	; 80042f8 <gyro_read+0x100>
 80042ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro.gyro_z = (gyro_z / 131.1f);// * -1.0f;
 80042b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042c2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80042fc <gyro_read+0x104>
 80042c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = ((int)((ts_data[3]<<24)|(ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0])));
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	061a      	lsls	r2, r3, #24
 80042d4:	7bbb      	ldrb	r3, [r7, #14]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	7b7b      	ldrb	r3, [r7, #13]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4313      	orrs	r3, r2
 80042e0:	7b3a      	ldrb	r2, [r7, #12]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 80042e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200003c8 	.word	0x200003c8
 80042f8:	c303199a 	.word	0xc303199a
 80042fc:	4303199a 	.word	0x4303199a

08004300 <lsm6_acc_read>:

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af04      	add	r7, sp, #16
 8004306:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	2300      	movs	r3, #0
 800430e:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
	res = HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004314:	2332      	movs	r3, #50	; 0x32
 8004316:	9302      	str	r3, [sp, #8]
 8004318:	2306      	movs	r3, #6
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	f107 0308 	add.w	r3, r7, #8
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2301      	movs	r3, #1
 8004324:	2228      	movs	r2, #40	; 0x28
 8004326:	21d4      	movs	r1, #212	; 0xd4
 8004328:	4825      	ldr	r0, [pc, #148]	; (80043c0 <lsm6_acc_read+0xc0>)
 800432a:	f003 faad 	bl	8007888 <HAL_I2C_Mem_Read>
 800432e:	4603      	mov	r3, r0
 8004330:	75fb      	strb	r3, [r7, #23]
	if (res != HAL_OK){
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <lsm6_acc_read+0x3c>
		return res;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	e03c      	b.n	80043b6 <lsm6_acc_read+0xb6>
	}
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 800433c:	7a7b      	ldrb	r3, [r7, #9]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	b21a      	sxth	r2, r3
 8004342:	7a3b      	ldrb	r3, [r7, #8]
 8004344:	b21b      	sxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	b21a      	sxth	r2, r3
 8004350:	7abb      	ldrb	r3, [r7, #10]
 8004352:	b21b      	sxth	r3, r3
 8004354:	4313      	orrs	r3, r2
 8004356:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 8004358:	7b7b      	ldrb	r3, [r7, #13]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	b21a      	sxth	r2, r3
 800435e:	7b3b      	ldrb	r3, [r7, #12]
 8004360:	b21b      	sxth	r3, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	823b      	strh	r3, [r7, #16]
    mems_data->acc.acc_x = (acc_x / -16384.0f);//  * -1.0f;
 8004366:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004372:	eddf 6a14 	vldr	s13, [pc, #80]	; 80043c4 <lsm6_acc_read+0xc4>
 8004376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc.acc_y = (acc_y / -16384.0f);// * -1.0f;
 8004380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800438c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80043c4 <lsm6_acc_read+0xc4>
 8004390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc.acc_z = (acc_z / 16384.0f);// * -1.0f;
 800439a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80043c8 <lsm6_acc_read+0xc8>
 80043aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200003c8 	.word	0x200003c8
 80043c4:	c6800000 	.word	0xc6800000
 80043c8:	46800000 	.word	0x46800000

080043cc <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af04      	add	r7, sp, #16
 80043d2:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 80043d4:	2300      	movs	r3, #0
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	2300      	movs	r3, #0
 80043da:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 80043e0:	2332      	movs	r3, #50	; 0x32
 80043e2:	9302      	str	r3, [sp, #8]
 80043e4:	2306      	movs	r3, #6
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	f107 0308 	add.w	r3, r7, #8
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2301      	movs	r3, #1
 80043f0:	2228      	movs	r2, #40	; 0x28
 80043f2:	213c      	movs	r1, #60	; 0x3c
 80043f4:	4824      	ldr	r0, [pc, #144]	; (8004488 <lis3_magn_read+0xbc>)
 80043f6:	f003 fa47 	bl	8007888 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <lis3_magn_read+0x38>
    	return res;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	e03c      	b.n	800447e <lis3_magn_read+0xb2>
	}
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004404:	7a7b      	ldrb	r3, [r7, #9]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	b21a      	sxth	r2, r3
 800440a:	7a3b      	ldrb	r3, [r7, #8]
 800440c:	b21b      	sxth	r3, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	b21a      	sxth	r2, r3
 8004418:	7abb      	ldrb	r3, [r7, #10]
 800441a:	b21b      	sxth	r3, r3
 800441c:	4313      	orrs	r3, r2
 800441e:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 8004420:	7b7b      	ldrb	r3, [r7, #13]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	b21a      	sxth	r2, r3
 8004426:	7b3b      	ldrb	r3, [r7, #12]
 8004428:	b21b      	sxth	r3, r3
 800442a:	4313      	orrs	r3, r2
 800442c:	823b      	strh	r3, [r7, #16]
    mems_data->magn.magn_x = magn_x / 10.0f;
 800442e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800443a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800443e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn.magn_y = magn_y / 10.0f;
 8004448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004454:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn.magn_z = magn_z / 10.0f;
 8004462:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800446e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 800447c:	7dfb      	ldrb	r3, [r7, #23]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200003c8 	.word	0x200003c8

0800448c <gyro_offset_calculation>:


uint8_t gyro_offset_calculation(mems_data_t *mems_data){
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	gyro_read(mems_data);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff feaf 	bl	80041f8 <gyro_read>
	gyro_sum.gyro_x += mems_data->gyro.gyro_x;
 800449a:	4b46      	ldr	r3, [pc, #280]	; (80045b4 <gyro_offset_calculation+0x128>)
 800449c:	ed93 7a00 	vldr	s14, [r3]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044aa:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <gyro_offset_calculation+0x128>)
 80044ac:	edc3 7a00 	vstr	s15, [r3]
	gyro_sum.gyro_y += mems_data->gyro.gyro_y;
 80044b0:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <gyro_offset_calculation+0x128>)
 80044b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80044bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c0:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <gyro_offset_calculation+0x128>)
 80044c2:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_sum.gyro_z += mems_data->gyro.gyro_z;
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <gyro_offset_calculation+0x128>)
 80044c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80044d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <gyro_offset_calculation+0x128>)
 80044d8:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_offset_counter++;
 80044dc:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <gyro_offset_calculation+0x12c>)
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <gyro_offset_calculation+0x12c>)
 80044e6:	801a      	strh	r2, [r3, #0]
	if (gyro_offset_counter >= 1400){
 80044e8:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <gyro_offset_calculation+0x12c>)
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80044f0:	d35a      	bcc.n	80045a8 <gyro_offset_calculation+0x11c>
		gyro_mean.gyro_x = gyro_sum.gyro_x / gyro_offset_counter;
 80044f2:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <gyro_offset_calculation+0x128>)
 80044f4:	edd3 6a00 	vldr	s13, [r3]
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <gyro_offset_calculation+0x12c>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004508:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <gyro_offset_calculation+0x130>)
 800450a:	edc3 7a00 	vstr	s15, [r3]
		gyro_mean.gyro_y = gyro_sum.gyro_y / gyro_offset_counter;
 800450e:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <gyro_offset_calculation+0x128>)
 8004510:	edd3 6a01 	vldr	s13, [r3, #4]
 8004514:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <gyro_offset_calculation+0x12c>)
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <gyro_offset_calculation+0x130>)
 8004526:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_mean.gyro_z = gyro_sum.gyro_z / gyro_offset_counter;
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <gyro_offset_calculation+0x128>)
 800452c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004530:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <gyro_offset_calculation+0x12c>)
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800453c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <gyro_offset_calculation+0x130>)
 8004542:	edc3 7a02 	vstr	s15, [r3, #8]
		setGyroOffset(gyro_mean);
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <gyro_offset_calculation+0x130>)
 8004548:	edd3 6a00 	vldr	s13, [r3]
 800454c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004550:	edd3 7a02 	vldr	s15, [r3, #8]
 8004554:	eeb0 0a66 	vmov.f32	s0, s13
 8004558:	eef0 0a47 	vmov.f32	s1, s14
 800455c:	eeb0 1a67 	vmov.f32	s2, s15
 8004560:	f7fc ff64 	bl	800142c <setGyroOffset>
		gyro_offset_counter = 0;
 8004564:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <gyro_offset_calculation+0x12c>)
 8004566:	2200      	movs	r2, #0
 8004568:	801a      	strh	r2, [r3, #0]
		Flash_Write_NUM(GYRO_OFFSET_X_ADDR, gyro_mean.gyro_x);
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <gyro_offset_calculation+0x130>)
 800456c:	edd3 7a00 	vldr	s15, [r3]
 8004570:	eeb0 0a67 	vmov.f32	s0, s15
 8004574:	4812      	ldr	r0, [pc, #72]	; (80045c0 <gyro_offset_calculation+0x134>)
 8004576:	f7ff f9cd 	bl	8003914 <Flash_Write_NUM>
		Flash_Write_NUM(GYRO_OFFSET_Y_ADDR, gyro_mean.gyro_y);
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <gyro_offset_calculation+0x130>)
 800457c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004580:	eeb0 0a67 	vmov.f32	s0, s15
 8004584:	480f      	ldr	r0, [pc, #60]	; (80045c4 <gyro_offset_calculation+0x138>)
 8004586:	f7ff f9c5 	bl	8003914 <Flash_Write_NUM>
		Flash_Write_NUM(GYRO_OFFSET_Z_ADDR, gyro_mean.gyro_z);
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <gyro_offset_calculation+0x130>)
 800458c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004590:	eeb0 0a67 	vmov.f32	s0, s15
 8004594:	480c      	ldr	r0, [pc, #48]	; (80045c8 <gyro_offset_calculation+0x13c>)
 8004596:	f7ff f9bd 	bl	8003914 <Flash_Write_NUM>
		float temp = Flash_Read_NUM(GYRO_OFFSET_X_ADDR);
 800459a:	4809      	ldr	r0, [pc, #36]	; (80045c0 <gyro_offset_calculation+0x134>)
 800459c:	f7ff f9d0 	bl	8003940 <Flash_Read_NUM>
 80045a0:	ed87 0a03 	vstr	s0, [r7, #12]
		return 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <gyro_offset_calculation+0x11e>
	}
	return 1;
 80045a8:	2301      	movs	r3, #1
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000420 	.word	0x20000420
 80045b8:	2000041c 	.word	0x2000041c
 80045bc:	2000042c 	.word	0x2000042c
 80045c0:	08010000 	.word	0x08010000
 80045c4:	08101000 	.word	0x08101000
 80045c8:	08102000 	.word	0x08102000

080045cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045cc:	b5b0      	push	{r4, r5, r7, lr}
 80045ce:	b09c      	sub	sp, #112	; 0x70
 80045d0:	af00      	add	r7, sp, #0

  HAL_Init();
 80045d2:	f001 ff2a 	bl	800642a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80045d6:	f000 fa0b 	bl	80049f0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045da:	f000 fa5b 	bl	8004a94 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 80045de:	f001 fcb7 	bl	8005f50 <MX_USART1_UART_Init>

  MX_UART4_Init();
 80045e2:	f001 fd07 	bl	8005ff4 <MX_UART4_Init>


  if (lsm6_bus_init() != 0){
 80045e6:	f7ff fd1f 	bl	8004028 <lsm6_bus_init>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d010      	beq.n	8004612 <main+0x46>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 80045f0:	4b65      	ldr	r3, [pc, #404]	; (8004788 <main+0x1bc>)
 80045f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80045f6:	461d      	mov	r5, r3
 80045f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004600:	c403      	stmia	r4!, {r0, r1}
 8004602:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8004604:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004608:	210a      	movs	r1, #10
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fd7c 	bl	8006108 <uart_write_debug>
 8004610:	e042      	b.n	8004698 <main+0xcc>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 8004612:	f7ff fd6f 	bl	80040f4 <lsm6_acc_init>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00f      	beq.n	800463c <main+0x70>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 800461c:	4b5b      	ldr	r3, [pc, #364]	; (800478c <main+0x1c0>)
 800461e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004622:	461d      	mov	r5, r3
 8004624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800462c:	c403      	stmia	r4!, {r0, r1}
 800462e:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004634:	210a      	movs	r1, #10
 8004636:	4618      	mov	r0, r3
 8004638:	f001 fd66 	bl	8006108 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 800463c:	f7ff fd34 	bl	80040a8 <gyro_init>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d012      	beq.n	800466c <main+0xa0>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 8004646:	4b52      	ldr	r3, [pc, #328]	; (8004790 <main+0x1c4>)
 8004648:	f107 041c 	add.w	r4, r7, #28
 800464c:	461d      	mov	r5, r3
 800464e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004656:	c403      	stmia	r4!, {r0, r1}
 8004658:	8022      	strh	r2, [r4, #0]
 800465a:	3402      	adds	r4, #2
 800465c:	0c13      	lsrs	r3, r2, #16
 800465e:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	210a      	movs	r1, #10
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fd4e 	bl	8006108 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 800466c:	f7ff fd68 	bl	8004140 <magn_init>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <main+0xcc>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 8004676:	4b47      	ldr	r3, [pc, #284]	; (8004794 <main+0x1c8>)
 8004678:	463c      	mov	r4, r7
 800467a:	461d      	mov	r5, r3
 800467c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800467e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004684:	c403      	stmia	r4!, {r0, r1}
 8004686:	8022      	strh	r2, [r4, #0]
 8004688:	3402      	adds	r4, #2
 800468a:	0c13      	lsrs	r3, r2, #16
 800468c:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 800468e:	463b      	mov	r3, r7
 8004690:	210a      	movs	r1, #10
 8004692:	4618      	mov	r0, r3
 8004694:	f001 fd38 	bl	8006108 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 8004698:	f7ff f96c 	bl	8003974 <ublox_i2c_bus_init>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <main+0xe0>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 80046a2:	210a      	movs	r1, #10
 80046a4:	483c      	ldr	r0, [pc, #240]	; (8004798 <main+0x1cc>)
 80046a6:	f001 fd2f 	bl	8006108 <uart_write_debug>
 80046aa:	e011      	b.n	80046d0 <main+0x104>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 80046ac:	f7ff fa0c 	bl	8003ac8 <ubloxInit>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 80046b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <main+0xfc>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 80046be:	210a      	movs	r1, #10
 80046c0:	4836      	ldr	r0, [pc, #216]	; (800479c <main+0x1d0>)
 80046c2:	f001 fd21 	bl	8006108 <uart_write_debug>
 80046c6:	e003      	b.n	80046d0 <main+0x104>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 80046c8:	210a      	movs	r1, #10
 80046ca:	4835      	ldr	r0, [pc, #212]	; (80047a0 <main+0x1d4>)
 80046cc:	f001 fd1c 	bl	8006108 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 80046d0:	f007 fe42 	bl	800c358 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 80046d4:	4833      	ldr	r0, [pc, #204]	; (80047a4 <main+0x1d8>)
 80046d6:	f008 f877 	bl	800c7c8 <osMutexNew>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a32      	ldr	r2, [pc, #200]	; (80047a8 <main+0x1dc>)
 80046de:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 80046e0:	4832      	ldr	r0, [pc, #200]	; (80047ac <main+0x1e0>)
 80046e2:	f008 f871 	bl	800c7c8 <osMutexNew>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4a31      	ldr	r2, [pc, #196]	; (80047b0 <main+0x1e4>)
 80046ea:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (8, sizeof(mems_data_t), &memsQueue_attributes);
 80046ec:	4a31      	ldr	r2, [pc, #196]	; (80047b4 <main+0x1e8>)
 80046ee:	2128      	movs	r1, #40	; 0x28
 80046f0:	2008      	movs	r0, #8
 80046f2:	f008 f977 	bl	800c9e4 <osMessageQueueNew>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <main+0x1ec>)
 80046fa:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 80046fc:	4a2f      	ldr	r2, [pc, #188]	; (80047bc <main+0x1f0>)
 80046fe:	210c      	movs	r1, #12
 8004700:	2004      	movs	r0, #4
 8004702:	f008 f96f 	bl	800c9e4 <osMessageQueueNew>
 8004706:	4603      	mov	r3, r0
 8004708:	4a2d      	ldr	r2, [pc, #180]	; (80047c0 <main+0x1f4>)
 800470a:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 800470c:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <main+0x1f8>)
 800470e:	2128      	movs	r1, #40	; 0x28
 8004710:	2008      	movs	r0, #8
 8004712:	f008 f967 	bl	800c9e4 <osMessageQueueNew>
 8004716:	4603      	mov	r3, r0
 8004718:	4a2b      	ldr	r2, [pc, #172]	; (80047c8 <main+0x1fc>)
 800471a:	6013      	str	r3, [r2, #0]
  /* EVENT FLAG FOR ACK RECEIVE */
  ack_rcvd = osEventFlagsNew(NULL);
 800471c:	2000      	movs	r0, #0
 800471e:	f007 ff69 	bl	800c5f4 <osEventFlagsNew>
 8004722:	4603      	mov	r3, r0
 8004724:	4a29      	ldr	r2, [pc, #164]	; (80047cc <main+0x200>)
 8004726:	6013      	str	r3, [r2, #0]
  //							//

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004728:	4a29      	ldr	r2, [pc, #164]	; (80047d0 <main+0x204>)
 800472a:	2100      	movs	r1, #0
 800472c:	4829      	ldr	r0, [pc, #164]	; (80047d4 <main+0x208>)
 800472e:	f007 fe72 	bl	800c416 <osThreadNew>
 8004732:	4603      	mov	r3, r0
 8004734:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <main+0x20c>)
 8004736:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 8004738:	4a28      	ldr	r2, [pc, #160]	; (80047dc <main+0x210>)
 800473a:	2100      	movs	r1, #0
 800473c:	4828      	ldr	r0, [pc, #160]	; (80047e0 <main+0x214>)
 800473e:	f007 fe6a 	bl	800c416 <osThreadNew>
 8004742:	4603      	mov	r3, r0
 8004744:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <main+0x218>)
 8004746:	6013      	str	r3, [r2, #0]

//  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 8004748:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <main+0x21c>)
 800474a:	2100      	movs	r1, #0
 800474c:	4827      	ldr	r0, [pc, #156]	; (80047ec <main+0x220>)
 800474e:	f007 fe62 	bl	800c416 <osThreadNew>
 8004752:	4603      	mov	r3, r0
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <main+0x224>)
 8004756:	6013      	str	r3, [r2, #0]

//  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);

//  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 8004758:	4a26      	ldr	r2, [pc, #152]	; (80047f4 <main+0x228>)
 800475a:	2100      	movs	r1, #0
 800475c:	4826      	ldr	r0, [pc, #152]	; (80047f8 <main+0x22c>)
 800475e:	f007 fe5a 	bl	800c416 <osThreadNew>
 8004762:	4603      	mov	r3, r0
 8004764:	4a25      	ldr	r2, [pc, #148]	; (80047fc <main+0x230>)
 8004766:	6013      	str	r3, [r2, #0]

  gyroCalibrationTaskHandle = osThreadNew(gyroCalibrationTask, NULL, &gyroCalibrationTaskHandle_attributes);
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <main+0x234>)
 800476a:	2100      	movs	r1, #0
 800476c:	4825      	ldr	r0, [pc, #148]	; (8004804 <main+0x238>)
 800476e:	f007 fe52 	bl	800c416 <osThreadNew>
 8004772:	4603      	mov	r3, r0
 8004774:	4a24      	ldr	r2, [pc, #144]	; (8004808 <main+0x23c>)
 8004776:	6013      	str	r3, [r2, #0]

  /*Suspend the gyro-calibration task*/
  osThreadSuspend(gyroCalibrationTaskHandle);
 8004778:	4b23      	ldr	r3, [pc, #140]	; (8004808 <main+0x23c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f007 fedc 	bl	800c53a <osThreadSuspend>

  /* Start scheduler */
  osKernelStart();
 8004782:	f007 fe0d 	bl	800c3a0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004786:	e7fe      	b.n	8004786 <main+0x1ba>
 8004788:	08014ae8 	.word	0x08014ae8
 800478c:	08014b04 	.word	0x08014b04
 8004790:	08014b20 	.word	0x08014b20
 8004794:	08014b3c 	.word	0x08014b3c
 8004798:	08014a8c 	.word	0x08014a8c
 800479c:	08014ab0 	.word	0x08014ab0
 80047a0:	08014ad0 	.word	0x08014ad0
 80047a4:	08014cd4 	.word	0x08014cd4
 80047a8:	2000044c 	.word	0x2000044c
 80047ac:	08014ce4 	.word	0x08014ce4
 80047b0:	20000450 	.word	0x20000450
 80047b4:	08014cf4 	.word	0x08014cf4
 80047b8:	20000454 	.word	0x20000454
 80047bc:	08014d0c 	.word	0x08014d0c
 80047c0:	20000458 	.word	0x20000458
 80047c4:	08014d24 	.word	0x08014d24
 80047c8:	2000045c 	.word	0x2000045c
 80047cc:	20000460 	.word	0x20000460
 80047d0:	08014c20 	.word	0x08014c20
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	20000438 	.word	0x20000438
 80047dc:	08014c68 	.word	0x08014c68
 80047e0:	08004835 	.word	0x08004835
 80047e4:	2000043c 	.word	0x2000043c
 80047e8:	08014c44 	.word	0x08014c44
 80047ec:	08004879 	.word	0x08004879
 80047f0:	20000440 	.word	0x20000440
 80047f4:	08014c8c 	.word	0x08014c8c
 80047f8:	08004905 	.word	0x08004905
 80047fc:	20000444 	.word	0x20000444
 8004800:	08014cb0 	.word	0x08014cb0
 8004804:	08004975 	.word	0x08004975
 8004808:	20000448 	.word	0x20000448

0800480c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004818:	4805      	ldr	r0, [pc, #20]	; (8004830 <StartDefaultTask+0x24>)
 800481a:	f002 fc6b 	bl	80070f4 <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 800481e:	2001      	movs	r0, #1
 8004820:	f001 fc4a 	bl	80060b8 <uart_receive_it>
    osDelay(500);
 8004824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004828:	f007 fec9 	bl	800c5be <osDelay>
  {
 800482c:	e7f2      	b.n	8004814 <StartDefaultTask+0x8>
 800482e:	bf00      	nop
 8004830:	48000400 	.word	0x48000400

08004834 <readMemsTask>:
		osDelay(30);
	}
}

void readMemsTask(void *argument)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b090      	sub	sp, #64	; 0x40
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	FusionInit();
 800483c:	f7fc fe16 	bl	800146c <FusionInit>
	for(;;)
	{
//		osMutexAcquire(i2cMutex, osWaitForever);
		tick_gyro(&mems_data);
 8004840:	f107 0318 	add.w	r3, r7, #24
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fbdd 	bl	8004004 <tick_gyro>
		FusionCalcAngle(&mems_data, &euler);
 800484a:	f107 020c 	add.w	r2, r7, #12
 800484e:	f107 0318 	add.w	r3, r7, #24
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc fe29 	bl	80014ac <FusionCalcAngle>
//		osMutexRelease(i2cMutex);
		osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <readMemsTask+0x40>)
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f107 010c 	add.w	r1, r7, #12
 8004862:	2300      	movs	r3, #0
 8004864:	2200      	movs	r2, #0
 8004866:	f008 f931 	bl	800cacc <osMessageQueuePut>
//		osMessageQueuePut(memsQueueHandle, &mems_data, 0U, 5U);
		osDelay(20);
 800486a:	2014      	movs	r0, #20
 800486c:	f007 fea7 	bl	800c5be <osDelay>
		tick_gyro(&mems_data);
 8004870:	e7e6      	b.n	8004840 <readMemsTask+0xc>
 8004872:	bf00      	nop
 8004874:	20000458 	.word	0x20000458

08004878 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b094      	sub	sp, #80	; 0x50
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 800488e:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <printOutTask+0x80>)
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f107 0118 	add.w	r1, r7, #24
 8004896:	2305      	movs	r3, #5
 8004898:	2200      	movs	r2, #0
 800489a:	f008 f977 	bl	800cb8c <osMessageQueueGet>
 800489e:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 80048a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d123      	bne.n	80048ee <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fb fe65 	bl	8000578 <__aeabi_f2d>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	f107 000c 	add.w	r0, r7, #12
 80048b6:	4911      	ldr	r1, [pc, #68]	; (80048fc <printOutTask+0x84>)
 80048b8:	f00c fb42 	bl	8010f40 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <printOutTask+0x88>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295
 80048c4:	4618      	mov	r0, r3
 80048c6:	f008 f805 	bl	800c8d4 <osMutexAcquire>
			uart_write_debug(text,50);
 80048ca:	f107 030c 	add.w	r3, r7, #12
 80048ce:	2132      	movs	r1, #50	; 0x32
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 fc19 	bl	8006108 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <printOutTask+0x88>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f008 f845 	bl	800c96a <osMutexRelease>
			memset(text,0,sizeof(text));
 80048e0:	f107 030c 	add.w	r3, r7, #12
 80048e4:	220a      	movs	r2, #10
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f00b fdc7 	bl	801047c <memset>
		}
		osDelay(70);
 80048ee:	2046      	movs	r0, #70	; 0x46
 80048f0:	f007 fe65 	bl	800c5be <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 80048f4:	e7cb      	b.n	800488e <printOutTask+0x16>
 80048f6:	bf00      	nop
 80048f8:	20000458 	.word	0x20000458
 80048fc:	08014b58 	.word	0x08014b58
 8004900:	2000044c 	.word	0x2000044c

08004904 <readMessageTask>:
//		osMutexRelease(debugUartMutex);
		osDelay(1700);
	}
}

void readMessageTask(void *argument){
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint32_t ack_flag;
	uint8_t message_buffer[RB_SIZE] = {0};
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	2224      	movs	r2, #36	; 0x24
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f00b fdaf 	bl	801047c <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <readMessageTask+0x68>)
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	f107 0108 	add.w	r1, r7, #8
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	2200      	movs	r2, #0
 800492c:	f008 f92e 	bl	800cb8c <osMessageQueueGet>
 8004930:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d114      	bne.n	8004962 <readMessageTask+0x5e>
			tick_Handler(message_buffer);
 8004938:	f107 0308 	add.w	r3, r7, #8
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fa75 	bl	8004e2c <tick_Handler>
			ack_flag = osEventFlagsWait(ack_rcvd, ACK_FLAG, osFlagsWaitAny, 150);
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <readMessageTask+0x6c>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	2396      	movs	r3, #150	; 0x96
 8004948:	2200      	movs	r2, #0
 800494a:	2101      	movs	r1, #1
 800494c:	f007 fed6 	bl	800c6fc <osEventFlagsWait>
 8004950:	6338      	str	r0, [r7, #48]	; 0x30
			if (ack_flag != 1){
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2b01      	cmp	r3, #1
 8004956:	d004      	beq.n	8004962 <readMessageTask+0x5e>
				tick_Handler(message_buffer);
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fa65 	bl	8004e2c <tick_Handler>
			}
		}
		osDelay(200);
 8004962:	20c8      	movs	r0, #200	; 0xc8
 8004964:	f007 fe2b 	bl	800c5be <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004968:	e7d9      	b.n	800491e <readMessageTask+0x1a>
 800496a:	bf00      	nop
 800496c:	2000045c 	.word	0x2000045c
 8004970:	20000460 	.word	0x20000460

08004974 <gyroCalibrationTask>:
	}
}

void gyroCalibrationTask(void *argument){
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	; 0x30
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	osThreadSuspend(readMemsTaskHandle);
 800497c:	4b17      	ldr	r3, [pc, #92]	; (80049dc <gyroCalibrationTask+0x68>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f007 fdda 	bl	800c53a <osThreadSuspend>
	osThreadSuspend(printOutTaskHandle);
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <gyroCalibrationTask+0x6c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f007 fdd5 	bl	800c53a <osThreadSuspend>
	osDelay(100);
 8004990:	2064      	movs	r0, #100	; 0x64
 8004992:	f007 fe14 	bl	800c5be <osDelay>
	uart_write_debug("Gyro Calibration: Hold the device still\r\n", 50);
 8004996:	2132      	movs	r1, #50	; 0x32
 8004998:	4812      	ldr	r0, [pc, #72]	; (80049e4 <gyroCalibrationTask+0x70>)
 800499a:	f001 fbb5 	bl	8006108 <uart_write_debug>
	for(;;){
		if (gyro_offset_calculation(&mems_data) == 0){
 800499e:	f107 0308 	add.w	r3, r7, #8
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fd72 	bl	800448c <gyro_offset_calculation>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d112      	bne.n	80049d4 <gyroCalibrationTask+0x60>
			uart_write_debug("Gyro Calibration: Finished!\r\n", 50);
 80049ae:	2132      	movs	r1, #50	; 0x32
 80049b0:	480d      	ldr	r0, [pc, #52]	; (80049e8 <gyroCalibrationTask+0x74>)
 80049b2:	f001 fba9 	bl	8006108 <uart_write_debug>
			osThreadResume(readMemsTaskHandle);
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <gyroCalibrationTask+0x68>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f007 fdde 	bl	800c57c <osThreadResume>
			osThreadResume(printOutTaskHandle);
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <gyroCalibrationTask+0x6c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f007 fdd9 	bl	800c57c <osThreadResume>
			osThreadSuspend(gyroCalibrationTaskHandle);
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <gyroCalibrationTask+0x78>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f007 fdb3 	bl	800c53a <osThreadSuspend>
		}
		osDelay(20);
 80049d4:	2014      	movs	r0, #20
 80049d6:	f007 fdf2 	bl	800c5be <osDelay>
		if (gyro_offset_calculation(&mems_data) == 0){
 80049da:	e7e0      	b.n	800499e <gyroCalibrationTask+0x2a>
 80049dc:	2000043c 	.word	0x2000043c
 80049e0:	20000440 	.word	0x20000440
 80049e4:	08014b60 	.word	0x08014b60
 80049e8:	08014b8c 	.word	0x08014b8c
 80049ec:	20000448 	.word	0x20000448

080049f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b096      	sub	sp, #88	; 0x58
 80049f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	2244      	movs	r2, #68	; 0x44
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f00b fd3c 	bl	801047c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a04:	463b      	mov	r3, r7
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004a12:	2000      	movs	r0, #0
 8004a14:	f003 fc44 	bl	80082a0 <HAL_PWREx_ControlVoltageScaling>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004a1e:	f000 f9f5 	bl	8004e0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004a22:	2310      	movs	r3, #16
 8004a24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004a26:	2301      	movs	r3, #1
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004a2e:	2360      	movs	r3, #96	; 0x60
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a32:	2302      	movs	r3, #2
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004a36:	2301      	movs	r3, #1
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004a3e:	233c      	movs	r3, #60	; 0x3c
 8004a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a42:	2302      	movs	r3, #2
 8004a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a46:	2302      	movs	r3, #2
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a4e:	f107 0314 	add.w	r3, r7, #20
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 fcc8 	bl	80083e8 <HAL_RCC_OscConfig>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004a5e:	f000 f9d5 	bl	8004e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a62:	230f      	movs	r3, #15
 8004a64:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a66:	2303      	movs	r3, #3
 8004a68:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a76:	463b      	mov	r3, r7
 8004a78:	2105      	movs	r1, #5
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 f8ce 	bl	8008c1c <HAL_RCC_ClockConfig>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004a86:	f000 f9c1 	bl	8004e0c <Error_Handler>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3758      	adds	r7, #88	; 0x58
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a9a:	f107 0314 	add.w	r3, r7, #20
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
 8004aa6:	60da      	str	r2, [r3, #12]
 8004aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004aaa:	4bbb      	ldr	r3, [pc, #748]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	4aba      	ldr	r2, [pc, #744]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004ab0:	f043 0310 	orr.w	r3, r3, #16
 8004ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ab6:	4bb8      	ldr	r3, [pc, #736]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ac2:	4bb5      	ldr	r3, [pc, #724]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac6:	4ab4      	ldr	r2, [pc, #720]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004ac8:	f043 0304 	orr.w	r3, r3, #4
 8004acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ace:	4bb2      	ldr	r3, [pc, #712]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ada:	4baf      	ldr	r3, [pc, #700]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	4aae      	ldr	r2, [pc, #696]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae6:	4bac      	ldr	r3, [pc, #688]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004af2:	4ba9      	ldr	r3, [pc, #676]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	4aa8      	ldr	r2, [pc, #672]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004af8:	f043 0302 	orr.w	r3, r3, #2
 8004afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004afe:	4ba6      	ldr	r3, [pc, #664]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b0a:	4ba3      	ldr	r3, [pc, #652]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	4aa2      	ldr	r2, [pc, #648]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b16:	4ba0      	ldr	r3, [pc, #640]	; (8004d98 <MX_GPIO_Init+0x304>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004b22:	2200      	movs	r2, #0
 8004b24:	f240 1105 	movw	r1, #261	; 0x105
 8004b28:	489c      	ldr	r0, [pc, #624]	; (8004d9c <MX_GPIO_Init+0x308>)
 8004b2a:	f002 facb 	bl	80070c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f248 111c 	movw	r1, #33052	; 0x811c
 8004b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b38:	f002 fac4 	bl	80070c4 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8004b42:	4897      	ldr	r0, [pc, #604]	; (8004da0 <MX_GPIO_Init+0x30c>)
 8004b44:	f002 fabe 	bl	80070c4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f242 0183 	movw	r1, #8323	; 0x2083
 8004b4e:	4895      	ldr	r0, [pc, #596]	; (8004da4 <MX_GPIO_Init+0x310>)
 8004b50:	f002 fab8 	bl	80070c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004b5a:	4893      	ldr	r0, [pc, #588]	; (8004da8 <MX_GPIO_Init+0x314>)
 8004b5c:	f002 fab2 	bl	80070c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004b60:	f240 1305 	movw	r3, #261	; 0x105
 8004b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b66:	2301      	movs	r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4619      	mov	r1, r3
 8004b78:	4888      	ldr	r0, [pc, #544]	; (8004d9c <MX_GPIO_Init+0x308>)
 8004b7a:	f002 f911 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8004b7e:	237a      	movs	r3, #122	; 0x7a
 8004b80:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b8c:	f107 0314 	add.w	r3, r7, #20
 8004b90:	4619      	mov	r1, r3
 8004b92:	4882      	ldr	r0, [pc, #520]	; (8004d9c <MX_GPIO_Init+0x308>)
 8004b94:	f002 f904 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004b98:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8004b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	4619      	mov	r1, r3
 8004bae:	487e      	ldr	r0, [pc, #504]	; (8004da8 <MX_GPIO_Init+0x314>)
 8004bb0:	f002 f8f6 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004bb4:	233f      	movs	r3, #63	; 0x3f
 8004bb6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004bb8:	230b      	movs	r3, #11
 8004bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4878      	ldr	r0, [pc, #480]	; (8004da8 <MX_GPIO_Init+0x314>)
 8004bc8:	f002 f8ea 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004bdc:	2308      	movs	r3, #8
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	4619      	mov	r1, r3
 8004be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bea:	f002 f8d9 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004bee:	f248 131c 	movw	r3, #33052	; 0x811c
 8004bf2:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	4619      	mov	r1, r3
 8004c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c0a:	f002 f8c9 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004c0e:	23e0      	movs	r3, #224	; 0xe0
 8004c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c12:	2302      	movs	r3, #2
 8004c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c1e:	2305      	movs	r3, #5
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c22:	f107 0314 	add.w	r3, r7, #20
 8004c26:	4619      	mov	r1, r3
 8004c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c2c:	f002 f8b8 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4856      	ldr	r0, [pc, #344]	; (8004da0 <MX_GPIO_Init+0x30c>)
 8004c46:	f002 f8ab 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	4619      	mov	r1, r3
 8004c64:	484e      	ldr	r0, [pc, #312]	; (8004da0 <MX_GPIO_Init+0x30c>)
 8004c66:	f002 f89b 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004c6a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8004c6e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c70:	2301      	movs	r3, #1
 8004c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4619      	mov	r1, r3
 8004c82:	4847      	ldr	r0, [pc, #284]	; (8004da0 <MX_GPIO_Init+0x30c>)
 8004c84:	f002 f88c 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004c88:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c96:	2300      	movs	r3, #0
 8004c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004c9a:	2306      	movs	r3, #6
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c9e:	f107 0314 	add.w	r3, r7, #20
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	483d      	ldr	r0, [pc, #244]	; (8004d9c <MX_GPIO_Init+0x308>)
 8004ca6:	f002 f87b 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8004caa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004cae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8004cbc:	230a      	movs	r3, #10
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4835      	ldr	r0, [pc, #212]	; (8004d9c <MX_GPIO_Init+0x308>)
 8004cc8:	f002 f86a 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8004ccc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004cde:	2307      	movs	r3, #7
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ce2:	f107 0314 	add.w	r3, r7, #20
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	482e      	ldr	r0, [pc, #184]	; (8004da4 <MX_GPIO_Init+0x310>)
 8004cea:	f002 f859 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8004cee:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8004cf2:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cf4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cfe:	f107 0314 	add.w	r3, r7, #20
 8004d02:	4619      	mov	r1, r3
 8004d04:	4827      	ldr	r0, [pc, #156]	; (8004da4 <MX_GPIO_Init+0x310>)
 8004d06:	f002 f84b 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8004d0a:	f242 0383 	movw	r3, #8323	; 0x2083
 8004d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d10:	2301      	movs	r3, #1
 8004d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	4619      	mov	r1, r3
 8004d22:	4820      	ldr	r0, [pc, #128]	; (8004da4 <MX_GPIO_Init+0x310>)
 8004d24:	f002 f83c 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004d28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d36:	2300      	movs	r3, #0
 8004d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4819      	ldr	r0, [pc, #100]	; (8004da8 <MX_GPIO_Init+0x314>)
 8004d42:	f002 f82d 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d5e:	f002 f81f 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004d62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d74:	2306      	movs	r3, #6
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	480a      	ldr	r0, [pc, #40]	; (8004da8 <MX_GPIO_Init+0x314>)
 8004d80:	f002 f80e 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004d84:	2378      	movs	r3, #120	; 0x78
 8004d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d90:	2303      	movs	r3, #3
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	e00a      	b.n	8004dac <MX_GPIO_Init+0x318>
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	48001000 	.word	0x48001000
 8004da0:	48000400 	.word	0x48000400
 8004da4:	48000c00 	.word	0x48000c00
 8004da8:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dac:	2307      	movs	r3, #7
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	4619      	mov	r1, r3
 8004db6:	480b      	ldr	r0, [pc, #44]	; (8004de4 <MX_GPIO_Init+0x350>)
 8004db8:	f001 fff2 	bl	8006da0 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2105      	movs	r1, #5
 8004dc0:	2017      	movs	r0, #23
 8004dc2:	f001 fc47 	bl	8006654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004dc6:	2017      	movs	r0, #23
 8004dc8:	f001 fc60 	bl	800668c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2105      	movs	r1, #5
 8004dd0:	2028      	movs	r0, #40	; 0x28
 8004dd2:	f001 fc3f 	bl	8006654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004dd6:	2028      	movs	r0, #40	; 0x28
 8004dd8:	f001 fc58 	bl	800668c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ddc:	bf00      	nop
 8004dde:	3728      	adds	r7, #40	; 0x28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	48000c00 	.word	0x48000c00

08004de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004dfa:	f001 fb2f 	bl	800645c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40012c00 	.word	0x40012c00

08004e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e10:	b672      	cpsid	i
}
 8004e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e18:	4803      	ldr	r0, [pc, #12]	; (8004e28 <Error_Handler+0x1c>)
 8004e1a:	f002 f96b 	bl	80070f4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8004e1e:	2064      	movs	r0, #100	; 0x64
 8004e20:	f001 fb3c 	bl	800649c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004e24:	e7f6      	b.n	8004e14 <Error_Handler+0x8>
 8004e26:	bf00      	nop
 8004e28:	48000400 	.word	0x48000400

08004e2c <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 8004e38:	f000 fbac 	bl	8005594 <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa9a 	bl	8005378 <parseMessage>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <tick_Handler+0x24>
		handler(UART_NYX);
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f000 fb1e 	bl	800548c <handler>
	}
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8004e62:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <sendNack+0x64>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b1b      	cmp	r3, #27
 8004e68:	d007      	beq.n	8004e7a <sendNack+0x22>
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <sendNack+0x64>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d003      	beq.n	8004e7a <sendNack+0x22>
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <sendNack+0x64>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d10f      	bne.n	8004e9a <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 8004e7a:	2315      	movs	r3, #21
 8004e7c:	733b      	strb	r3, [r7, #12]
 8004e7e:	231b      	movs	r3, #27
 8004e80:	737b      	strb	r3, [r7, #13]
 8004e82:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <sendNack+0x64>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8004e88:	79fa      	ldrb	r2, [r7, #7]
 8004e8a:	f107 000c 	add.w	r0, r7, #12
 8004e8e:	2305      	movs	r3, #5
 8004e90:	2103      	movs	r1, #3
 8004e92:	f001 f94f 	bl	8006134 <uart_write>
 8004e96:	4603      	mov	r3, r0
 8004e98:	e00c      	b.n	8004eb4 <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 8004e9a:	2315      	movs	r3, #21
 8004e9c:	723b      	strb	r3, [r7, #8]
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <sendNack+0x64>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8004ea4:	79fa      	ldrb	r2, [r7, #7]
 8004ea6:	f107 0008 	add.w	r0, r7, #8
 8004eaa:	2305      	movs	r3, #5
 8004eac:	2102      	movs	r1, #2
 8004eae:	f001 f941 	bl	8006134 <uart_write>
 8004eb2:	4603      	mov	r3, r0
    }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000464 	.word	0x20000464

08004ec0 <sendAck>:

uint8_t sendAck(UART_select device){
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <sendAck+0x64>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b1b      	cmp	r3, #27
 8004ed0:	d007      	beq.n	8004ee2 <sendAck+0x22>
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <sendAck+0x64>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d003      	beq.n	8004ee2 <sendAck+0x22>
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <sendAck+0x64>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d10f      	bne.n	8004f02 <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	733b      	strb	r3, [r7, #12]
 8004ee6:	231b      	movs	r3, #27
 8004ee8:	737b      	strb	r3, [r7, #13]
 8004eea:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <sendAck+0x64>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8004ef0:	79fa      	ldrb	r2, [r7, #7]
 8004ef2:	f107 000c 	add.w	r0, r7, #12
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	2103      	movs	r1, #3
 8004efa:	f001 f91b 	bl	8006134 <uart_write>
 8004efe:	4603      	mov	r3, r0
 8004f00:	e00c      	b.n	8004f1c <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 8004f02:	2306      	movs	r3, #6
 8004f04:	723b      	strb	r3, [r7, #8]
 8004f06:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <sendAck+0x64>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8004f0c:	79fa      	ldrb	r2, [r7, #7]
 8004f0e:	f107 0008 	add.w	r0, r7, #8
 8004f12:	2305      	movs	r3, #5
 8004f14:	2102      	movs	r1, #2
 8004f16:	f001 f90d 	bl	8006134 <uart_write>
 8004f1a:	4603      	mov	r3, r0
    }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000464 	.word	0x20000464

08004f28 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73bb      	strb	r3, [r7, #14]
 8004f3c:	e01e      	b.n	8004f7c <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4413      	add	r3, r2
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d00b      	beq.n	8004f62 <calcDataSize+0x3a>
 8004f4a:	7bbb      	ldrb	r3, [r7, #14]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d005      	beq.n	8004f62 <calcDataSize+0x3a>
 8004f56:	7bbb      	ldrb	r3, [r7, #14]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b1b      	cmp	r3, #27
 8004f60:	d106      	bne.n	8004f70 <calcDataSize+0x48>
           j++;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	3301      	adds	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
           j++;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e002      	b.n	8004f76 <calcDataSize+0x4e>
       }
       else j++;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	3301      	adds	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8004f76:	7bbb      	ldrb	r3, [r7, #14]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	73bb      	strb	r3, [r7, #14]
 8004f7c:	7bba      	ldrb	r2, [r7, #14]
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d3dc      	bcc.n	8004f3e <calcDataSize+0x16>
    }
    return j;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08c      	sub	sp, #48	; 0x30
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	70fb      	strb	r3, [r7, #3]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	70bb      	strb	r3, [r7, #2]
 8004faa:	4613      	mov	r3, r2
 8004fac:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ffb5 	bl	8004f28 <calcDataSize>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	4bc1      	ldr	r3, [pc, #772]	; (80052d0 <transmitMessage+0x33c>)
 8004fca:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 8004fcc:	4bc0      	ldr	r3, [pc, #768]	; (80052d0 <transmitMessage+0x33c>)
 8004fce:	88db      	ldrh	r3, [r3, #6]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	48bf      	ldr	r0, [pc, #764]	; (80052d4 <transmitMessage+0x340>)
 8004fd6:	f00b fa43 	bl	8010460 <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 8004fda:	4bbd      	ldr	r3, [pc, #756]	; (80052d0 <transmitMessage+0x33c>)
 8004fdc:	22fe      	movs	r2, #254	; 0xfe
 8004fde:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 8004fe0:	4bbb      	ldr	r3, [pc, #748]	; (80052d0 <transmitMessage+0x33c>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 8004fe6:	4bbc      	ldr	r3, [pc, #752]	; (80052d8 <transmitMessage+0x344>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2bff      	cmp	r3, #255	; 0xff
 8004fec:	d103      	bne.n	8004ff6 <transmitMessage+0x62>
        TOKEN=0;
 8004fee:	4bba      	ldr	r3, [pc, #744]	; (80052d8 <transmitMessage+0x344>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e005      	b.n	8005002 <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 8004ff6:	4bb8      	ldr	r3, [pc, #736]	; (80052d8 <transmitMessage+0x344>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4bb6      	ldr	r3, [pc, #728]	; (80052d8 <transmitMessage+0x344>)
 8005000:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 8005002:	4bb5      	ldr	r3, [pc, #724]	; (80052d8 <transmitMessage+0x344>)
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	4bb2      	ldr	r3, [pc, #712]	; (80052d0 <transmitMessage+0x33c>)
 8005008:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 800500a:	4ab1      	ldr	r2, [pc, #708]	; (80052d0 <transmitMessage+0x33c>)
 800500c:	78bb      	ldrb	r3, [r7, #2]
 800500e:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 8005010:	4baf      	ldr	r3, [pc, #700]	; (80052d0 <transmitMessage+0x33c>)
 8005012:	221b      	movs	r2, #27
 8005014:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 8005016:	4bae      	ldr	r3, [pc, #696]	; (80052d0 <transmitMessage+0x33c>)
 8005018:	2232      	movs	r2, #50	; 0x32
 800501a:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 800501c:	f000 f95e 	bl	80052dc <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 8005026:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800502a:	3330      	adds	r3, #48	; 0x30
 800502c:	443b      	add	r3, r7
 800502e:	2202      	movs	r2, #2
 8005030:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005034:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005038:	3301      	adds	r3, #1
 800503a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 800503e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005042:	4aa3      	ldr	r2, [pc, #652]	; (80052d0 <transmitMessage+0x33c>)
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	3330      	adds	r3, #48	; 0x30
 8005048:	443b      	add	r3, r7
 800504a:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800504e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005052:	3301      	adds	r3, #1
 8005054:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 8005058:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800505c:	4a9c      	ldr	r2, [pc, #624]	; (80052d0 <transmitMessage+0x33c>)
 800505e:	7852      	ldrb	r2, [r2, #1]
 8005060:	3330      	adds	r3, #48	; 0x30
 8005062:	443b      	add	r3, r7
 8005064:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005068:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800506c:	3301      	adds	r3, #1
 800506e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 8005072:	4b97      	ldr	r3, [pc, #604]	; (80052d0 <transmitMessage+0x33c>)
 8005074:	789b      	ldrb	r3, [r3, #2]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d007      	beq.n	800508a <transmitMessage+0xf6>
 800507a:	4b95      	ldr	r3, [pc, #596]	; (80052d0 <transmitMessage+0x33c>)
 800507c:	789b      	ldrb	r3, [r3, #2]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d003      	beq.n	800508a <transmitMessage+0xf6>
 8005082:	4b93      	ldr	r3, [pc, #588]	; (80052d0 <transmitMessage+0x33c>)
 8005084:	789b      	ldrb	r3, [r3, #2]
 8005086:	2b1b      	cmp	r3, #27
 8005088:	d119      	bne.n	80050be <transmitMessage+0x12a>
        message[index] = ESC;
 800508a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800508e:	3330      	adds	r3, #48	; 0x30
 8005090:	443b      	add	r3, r7
 8005092:	221b      	movs	r2, #27
 8005094:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005098:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800509c:	3301      	adds	r3, #1
 800509e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 80050a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050a6:	4a8a      	ldr	r2, [pc, #552]	; (80052d0 <transmitMessage+0x33c>)
 80050a8:	7892      	ldrb	r2, [r2, #2]
 80050aa:	3330      	adds	r3, #48	; 0x30
 80050ac:	443b      	add	r3, r7
 80050ae:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80050b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050b6:	3301      	adds	r3, #1
 80050b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80050bc:	e00c      	b.n	80050d8 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 80050be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050c2:	4a83      	ldr	r2, [pc, #524]	; (80052d0 <transmitMessage+0x33c>)
 80050c4:	7892      	ldrb	r2, [r2, #2]
 80050c6:	3330      	adds	r3, #48	; 0x30
 80050c8:	443b      	add	r3, r7
 80050ca:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80050ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050d2:	3301      	adds	r3, #1
 80050d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 80050d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050dc:	4a7c      	ldr	r2, [pc, #496]	; (80052d0 <transmitMessage+0x33c>)
 80050de:	78d2      	ldrb	r2, [r2, #3]
 80050e0:	3330      	adds	r3, #48	; 0x30
 80050e2:	443b      	add	r3, r7
 80050e4:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80050e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050ec:	3301      	adds	r3, #1
 80050ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 80050f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050f6:	4a76      	ldr	r2, [pc, #472]	; (80052d0 <transmitMessage+0x33c>)
 80050f8:	7912      	ldrb	r2, [r2, #4]
 80050fa:	3330      	adds	r3, #48	; 0x30
 80050fc:	443b      	add	r3, r7
 80050fe:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005102:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005106:	3301      	adds	r3, #1
 8005108:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 800510c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005110:	4a6f      	ldr	r2, [pc, #444]	; (80052d0 <transmitMessage+0x33c>)
 8005112:	7952      	ldrb	r2, [r2, #5]
 8005114:	3330      	adds	r3, #48	; 0x30
 8005116:	443b      	add	r3, r7
 8005118:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800511c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005120:	3301      	adds	r3, #1
 8005122:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8005126:	2300      	movs	r3, #0
 8005128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800512c:	e046      	b.n	80051bc <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 800512e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005132:	4a67      	ldr	r2, [pc, #412]	; (80052d0 <transmitMessage+0x33c>)
 8005134:	4413      	add	r3, r2
 8005136:	7a1b      	ldrb	r3, [r3, #8]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d00d      	beq.n	8005158 <transmitMessage+0x1c4>
 800513c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005140:	4a63      	ldr	r2, [pc, #396]	; (80052d0 <transmitMessage+0x33c>)
 8005142:	4413      	add	r3, r2
 8005144:	7a1b      	ldrb	r3, [r3, #8]
 8005146:	2b03      	cmp	r3, #3
 8005148:	d006      	beq.n	8005158 <transmitMessage+0x1c4>
 800514a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800514e:	4a60      	ldr	r2, [pc, #384]	; (80052d0 <transmitMessage+0x33c>)
 8005150:	4413      	add	r3, r2
 8005152:	7a1b      	ldrb	r3, [r3, #8]
 8005154:	2b1b      	cmp	r3, #27
 8005156:	d11c      	bne.n	8005192 <transmitMessage+0x1fe>
            message[index] = ESC;
 8005158:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800515c:	3330      	adds	r3, #48	; 0x30
 800515e:	443b      	add	r3, r7
 8005160:	221b      	movs	r2, #27
 8005162:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005166:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800516a:	3301      	adds	r3, #1
 800516c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 8005170:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005174:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005178:	4955      	ldr	r1, [pc, #340]	; (80052d0 <transmitMessage+0x33c>)
 800517a:	440a      	add	r2, r1
 800517c:	7a12      	ldrb	r2, [r2, #8]
 800517e:	3330      	adds	r3, #48	; 0x30
 8005180:	443b      	add	r3, r7
 8005182:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005186:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800518a:	3301      	adds	r3, #1
 800518c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005190:	e00f      	b.n	80051b2 <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 8005192:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005196:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800519a:	494d      	ldr	r1, [pc, #308]	; (80052d0 <transmitMessage+0x33c>)
 800519c:	440a      	add	r2, r1
 800519e:	7a12      	ldrb	r2, [r2, #8]
 80051a0:	3330      	adds	r3, #48	; 0x30
 80051a2:	443b      	add	r3, r7
 80051a4:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 80051a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051ac:	3301      	adds	r3, #1
 80051ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 80051b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051b6:	3301      	adds	r3, #1
 80051b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80051bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <transmitMessage+0x33c>)
 80051c4:	88db      	ldrh	r3, [r3, #6]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3b1      	bcc.n	800512e <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 80051ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051ce:	4a40      	ldr	r2, [pc, #256]	; (80052d0 <transmitMessage+0x33c>)
 80051d0:	7fd2      	ldrb	r2, [r2, #31]
 80051d2:	3330      	adds	r3, #48	; 0x30
 80051d4:	443b      	add	r3, r7
 80051d6:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80051da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051de:	3301      	adds	r3, #1
 80051e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 80051e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051e8:	4a39      	ldr	r2, [pc, #228]	; (80052d0 <transmitMessage+0x33c>)
 80051ea:	7f92      	ldrb	r2, [r2, #30]
 80051ec:	3330      	adds	r3, #48	; 0x30
 80051ee:	443b      	add	r3, r7
 80051f0:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80051f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051f8:	3301      	adds	r3, #1
 80051fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 80051fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005202:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <transmitMessage+0x33c>)
 8005204:	7f52      	ldrb	r2, [r2, #29]
 8005206:	3330      	adds	r3, #48	; 0x30
 8005208:	443b      	add	r3, r7
 800520a:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800520e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005212:	3301      	adds	r3, #1
 8005214:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 8005218:	4b2d      	ldr	r3, [pc, #180]	; (80052d0 <transmitMessage+0x33c>)
 800521a:	7f1b      	ldrb	r3, [r3, #28]
 800521c:	2b1b      	cmp	r3, #27
 800521e:	d12a      	bne.n	8005276 <transmitMessage+0x2e2>
        message[index] = ESC;
 8005220:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005224:	3330      	adds	r3, #48	; 0x30
 8005226:	443b      	add	r3, r7
 8005228:	221b      	movs	r2, #27
 800522a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800522e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005232:	3301      	adds	r3, #1
 8005234:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 8005238:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <transmitMessage+0x33c>)
 800523e:	7f12      	ldrb	r2, [r2, #28]
 8005240:	3330      	adds	r3, #48	; 0x30
 8005242:	443b      	add	r3, r7
 8005244:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005248:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800524c:	3301      	adds	r3, #1
 800524e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8005252:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005256:	3330      	adds	r3, #48	; 0x30
 8005258:	443b      	add	r3, r7
 800525a:	2203      	movs	r2, #3
 800525c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005260:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005264:	3301      	adds	r3, #1
 8005266:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 800526a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800526e:	b29a      	uxth	r2, r3
 8005270:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <transmitMessage+0x33c>)
 8005272:	80da      	strh	r2, [r3, #6]
 8005274:	e01d      	b.n	80052b2 <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 8005276:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <transmitMessage+0x33c>)
 800527c:	7f12      	ldrb	r2, [r2, #28]
 800527e:	3330      	adds	r3, #48	; 0x30
 8005280:	443b      	add	r3, r7
 8005282:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005286:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800528a:	3301      	adds	r3, #1
 800528c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8005290:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005294:	3330      	adds	r3, #48	; 0x30
 8005296:	443b      	add	r3, r7
 8005298:	2203      	movs	r2, #3
 800529a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800529e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052a2:	3301      	adds	r3, #1
 80052a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 80052a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <transmitMessage+0x33c>)
 80052b0:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <transmitMessage+0x33c>)
 80052b4:	88db      	ldrh	r3, [r3, #6]
 80052b6:	b2d9      	uxtb	r1, r3
 80052b8:	787a      	ldrb	r2, [r7, #1]
 80052ba:	f107 0008 	add.w	r0, r7, #8
 80052be:	230a      	movs	r3, #10
 80052c0:	f000 ff38 	bl	8006134 <uart_write>
    return 1;
 80052c4:	2301      	movs	r3, #1
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3730      	adds	r7, #48	; 0x30
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000468 	.word	0x20000468
 80052d4:	20000470 	.word	0x20000470
 80052d8:	20000464 	.word	0x20000464

080052dc <calcChecksum>:

static void calcChecksum(void){
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <calcChecksum+0x98>)
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	4b23      	ldr	r3, [pc, #140]	; (8005374 <calcChecksum+0x98>)
 80052e8:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 80052ea:	4b22      	ldr	r3, [pc, #136]	; (8005374 <calcChecksum+0x98>)
 80052ec:	7f1a      	ldrb	r2, [r3, #28]
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <calcChecksum+0x98>)
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	4053      	eors	r3, r2
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <calcChecksum+0x98>)
 80052f8:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 80052fa:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <calcChecksum+0x98>)
 80052fc:	7f1a      	ldrb	r2, [r3, #28]
 80052fe:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <calcChecksum+0x98>)
 8005300:	789b      	ldrb	r3, [r3, #2]
 8005302:	4053      	eors	r3, r2
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <calcChecksum+0x98>)
 8005308:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <calcChecksum+0x98>)
 800530c:	7f1a      	ldrb	r2, [r3, #28]
 800530e:	4b19      	ldr	r3, [pc, #100]	; (8005374 <calcChecksum+0x98>)
 8005310:	78db      	ldrb	r3, [r3, #3]
 8005312:	4053      	eors	r3, r2
 8005314:	b2da      	uxtb	r2, r3
 8005316:	4b17      	ldr	r3, [pc, #92]	; (8005374 <calcChecksum+0x98>)
 8005318:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 800531a:	4b16      	ldr	r3, [pc, #88]	; (8005374 <calcChecksum+0x98>)
 800531c:	7f1a      	ldrb	r2, [r3, #28]
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <calcChecksum+0x98>)
 8005320:	791b      	ldrb	r3, [r3, #4]
 8005322:	4053      	eors	r3, r2
 8005324:	b2da      	uxtb	r2, r3
 8005326:	4b13      	ldr	r3, [pc, #76]	; (8005374 <calcChecksum+0x98>)
 8005328:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <calcChecksum+0x98>)
 800532c:	7f1a      	ldrb	r2, [r3, #28]
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <calcChecksum+0x98>)
 8005330:	795b      	ldrb	r3, [r3, #5]
 8005332:	4053      	eors	r3, r2
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <calcChecksum+0x98>)
 8005338:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 800533a:	2300      	movs	r3, #0
 800533c:	71fb      	strb	r3, [r7, #7]
 800533e:	e00c      	b.n	800535a <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <calcChecksum+0x98>)
 8005342:	7f1a      	ldrb	r2, [r3, #28]
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	490b      	ldr	r1, [pc, #44]	; (8005374 <calcChecksum+0x98>)
 8005348:	440b      	add	r3, r1
 800534a:	7a1b      	ldrb	r3, [r3, #8]
 800534c:	4053      	eors	r3, r2
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b08      	ldr	r3, [pc, #32]	; (8005374 <calcChecksum+0x98>)
 8005352:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	3301      	adds	r3, #1
 8005358:	71fb      	strb	r3, [r7, #7]
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	b29a      	uxth	r2, r3
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <calcChecksum+0x98>)
 8005360:	88db      	ldrh	r3, [r3, #6]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3ec      	bcc.n	8005340 <calcChecksum+0x64>
    }
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	20000468 	.word	0x20000468

08005378 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 800538e:	7b7b      	ldrb	r3, [r7, #13]
 8005390:	2b0a      	cmp	r3, #10
 8005392:	d805      	bhi.n	80053a0 <parseMessage+0x28>
        sendNack(device);
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fd5e 	bl	8004e58 <sendNack>
        return 1;
 800539c:	2301      	movs	r3, #1
 800539e:	e06d      	b.n	800547c <parseMessage+0x104>
    }
    msg.len = len-10;
 80053a0:	7b7b      	ldrb	r3, [r7, #13]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b0a      	subs	r3, #10
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <parseMessage+0x10c>)
 80053aa:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	785a      	ldrb	r2, [r3, #1]
 80053b0:	4b34      	ldr	r3, [pc, #208]	; (8005484 <parseMessage+0x10c>)
 80053b2:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	789a      	ldrb	r2, [r3, #2]
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <parseMessage+0x10c>)
 80053ba:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	78da      	ldrb	r2, [r3, #3]
 80053c0:	4b30      	ldr	r3, [pc, #192]	; (8005484 <parseMessage+0x10c>)
 80053c2:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 80053c4:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <parseMessage+0x10c>)
 80053c6:	789a      	ldrb	r2, [r3, #2]
 80053c8:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <parseMessage+0x110>)
 80053ca:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	791a      	ldrb	r2, [r3, #4]
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <parseMessage+0x10c>)
 80053d2:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	795a      	ldrb	r2, [r3, #5]
 80053d8:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <parseMessage+0x10c>)
 80053da:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	799a      	ldrb	r2, [r3, #6]
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <parseMessage+0x10c>)
 80053e2:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 80053e4:	2300      	movs	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	e00d      	b.n	8005406 <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	3307      	adds	r3, #7
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	441a      	add	r2, r3
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	7811      	ldrb	r1, [r2, #0]
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <parseMessage+0x10c>)
 80053fa:	4413      	add	r3, r2
 80053fc:	460a      	mov	r2, r1
 80053fe:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	3301      	adds	r3, #1
 8005404:	73fb      	strb	r3, [r7, #15]
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	b29a      	uxth	r2, r3
 800540a:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <parseMessage+0x10c>)
 800540c:	88db      	ldrh	r3, [r3, #6]
 800540e:	429a      	cmp	r2, r3
 8005410:	d3eb      	bcc.n	80053ea <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	3307      	adds	r3, #7
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	4b19      	ldr	r3, [pc, #100]	; (8005484 <parseMessage+0x10c>)
 8005420:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	3308      	adds	r3, #8
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4413      	add	r3, r2
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <parseMessage+0x10c>)
 8005430:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	3309      	adds	r3, #9
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <parseMessage+0x10c>)
 8005440:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	330a      	adds	r3, #10
 8005446:	461a      	mov	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <parseMessage+0x10c>)
 8005450:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 8005452:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <parseMessage+0x10c>)
 8005454:	7f1b      	ldrb	r3, [r3, #28]
 8005456:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 8005458:	f7ff ff40 	bl	80052dc <calcChecksum>
    if (chsum != msg.checksum[0]){
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <parseMessage+0x10c>)
 800545e:	7f1b      	ldrb	r3, [r3, #28]
 8005460:	7bba      	ldrb	r2, [r7, #14]
 8005462:	429a      	cmp	r2, r3
 8005464:	d005      	beq.n	8005472 <parseMessage+0xfa>
        sendNack(device);
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fcf5 	bl	8004e58 <sendNack>
        return 1;
 800546e:	2301      	movs	r3, #1
 8005470:	e004      	b.n	800547c <parseMessage+0x104>
    }
    sendAck(device);
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fd23 	bl	8004ec0 <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000468 	.word	0x20000468
 8005488:	20000464 	.word	0x20000464

0800548c <handler>:



void handler(UART_select device){
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 8005496:	4b3c      	ldr	r3, [pc, #240]	; (8005588 <handler+0xfc>)
 8005498:	795b      	ldrb	r3, [r3, #5]
 800549a:	2bc0      	cmp	r3, #192	; 0xc0
 800549c:	d068      	beq.n	8005570 <handler+0xe4>
 800549e:	2bc0      	cmp	r3, #192	; 0xc0
 80054a0:	dc6c      	bgt.n	800557c <handler+0xf0>
 80054a2:	2ba0      	cmp	r3, #160	; 0xa0
 80054a4:	d05f      	beq.n	8005566 <handler+0xda>
 80054a6:	2ba0      	cmp	r3, #160	; 0xa0
 80054a8:	dc68      	bgt.n	800557c <handler+0xf0>
 80054aa:	2b80      	cmp	r3, #128	; 0x80
 80054ac:	d053      	beq.n	8005556 <handler+0xca>
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	dc64      	bgt.n	800557c <handler+0xf0>
 80054b2:	2b65      	cmp	r3, #101	; 0x65
 80054b4:	dc34      	bgt.n	8005520 <handler+0x94>
 80054b6:	2b50      	cmp	r3, #80	; 0x50
 80054b8:	db60      	blt.n	800557c <handler+0xf0>
 80054ba:	3b50      	subs	r3, #80	; 0x50
 80054bc:	2b15      	cmp	r3, #21
 80054be:	d85d      	bhi.n	800557c <handler+0xf0>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <handler+0x3c>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	08005527 	.word	0x08005527
 80054cc:	0800557d 	.word	0x0800557d
 80054d0:	0800557d 	.word	0x0800557d
 80054d4:	0800557d 	.word	0x0800557d
 80054d8:	0800557d 	.word	0x0800557d
 80054dc:	0800557d 	.word	0x0800557d
 80054e0:	0800552f 	.word	0x0800552f
 80054e4:	0800557d 	.word	0x0800557d
 80054e8:	0800557d 	.word	0x0800557d
 80054ec:	0800557d 	.word	0x0800557d
 80054f0:	0800557d 	.word	0x0800557d
 80054f4:	0800557d 	.word	0x0800557d
 80054f8:	0800557d 	.word	0x0800557d
 80054fc:	0800557d 	.word	0x0800557d
 8005500:	0800557d 	.word	0x0800557d
 8005504:	0800557d 	.word	0x0800557d
 8005508:	0800557d 	.word	0x0800557d
 800550c:	0800557d 	.word	0x0800557d
 8005510:	0800557d 	.word	0x0800557d
 8005514:	0800557d 	.word	0x0800557d
 8005518:	0800557d 	.word	0x0800557d
 800551c:	0800553f 	.word	0x0800553f
 8005520:	2b78      	cmp	r3, #120	; 0x78
 8005522:	d014      	beq.n	800554e <handler+0xc2>
        break;
    case 0xC0:
    	osThreadResume(gyroCalibrationTaskHandle);
    	break;
    default:
        break;
 8005524:	e02a      	b.n	800557c <handler+0xf0>
        flag_connected_toIris = 1;
 8005526:	4b19      	ldr	r3, [pc, #100]	; (800558c <handler+0x100>)
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
        break;
 800552c:	e027      	b.n	800557e <handler+0xf2>
        ublox_transmit_message(msg.cmd, device);
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <handler+0xfc>)
 8005530:	795b      	ldrb	r3, [r3, #5]
 8005532:	79fa      	ldrb	r2, [r7, #7]
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe fa70 	bl	8003a1c <ublox_transmit_message>
        break;
 800553c:	e01f      	b.n	800557e <handler+0xf2>
        reportFW(msg.cmd, device);
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <handler+0xfc>)
 8005540:	795b      	ldrb	r3, [r3, #5]
 8005542:	79fa      	ldrb	r2, [r7, #7]
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f850 	bl	80055ec <reportFW>
        break;
 800554c:	e017      	b.n	800557e <handler+0xf2>
    	powerManageCfgSet(0x78);
 800554e:	2078      	movs	r0, #120	; 0x78
 8005550:	f7fe fd0a 	bl	8003f68 <powerManageCfgSet>
        break;
 8005554:	e013      	b.n	800557e <handler+0xf2>
        ublox_transmit_rtc(msg.cmd, device);
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <handler+0xfc>)
 8005558:	795b      	ldrb	r3, [r3, #5]
 800555a:	79fa      	ldrb	r2, [r7, #7]
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fa48 	bl	80039f4 <ublox_transmit_rtc>
        break;
 8005564:	e00b      	b.n	800557e <handler+0xf2>
        HAL_Delay(500);
 8005566:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800556a:	f000 ff97 	bl	800649c <HAL_Delay>
        break;
 800556e:	e006      	b.n	800557e <handler+0xf2>
    	osThreadResume(gyroCalibrationTaskHandle);
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <handler+0x104>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f007 f801 	bl	800c57c <osThreadResume>
    	break;
 800557a:	e000      	b.n	800557e <handler+0xf2>
        break;
 800557c:	bf00      	nop
    }
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000468 	.word	0x20000468
 800558c:	20000465 	.word	0x20000465
 8005590:	20000448 	.word	0x20000448

08005594 <init_message_t>:

void init_message_t(void){
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <init_message_t+0x50>)
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <init_message_t+0x50>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <init_message_t+0x50>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <init_message_t+0x50>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <init_message_t+0x50>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <init_message_t+0x50>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 80055bc:	2214      	movs	r2, #20
 80055be:	2100      	movs	r1, #0
 80055c0:	4809      	ldr	r0, [pc, #36]	; (80055e8 <init_message_t+0x54>)
 80055c2:	f00a ff5b 	bl	801047c <memset>
    msg.checksum[0] = 0;
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <init_message_t+0x50>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <init_message_t+0x50>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 80055d2:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <init_message_t+0x50>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 80055d8:	4b02      	ldr	r3, [pc, #8]	; (80055e4 <init_message_t+0x50>)
 80055da:	2200      	movs	r2, #0
 80055dc:	77da      	strb	r2, [r3, #31]
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000468 	.word	0x20000468
 80055e8:	20000470 	.word	0x20000470

080055ec <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	460a      	mov	r2, r1
 80055f6:	71fb      	strb	r3, [r7, #7]
 80055f8:	4613      	mov	r3, r2
 80055fa:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 80055fc:	236e      	movs	r3, #110	; 0x6e
 80055fe:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 8005600:	79bb      	ldrb	r3, [r7, #6]
 8005602:	79fa      	ldrb	r2, [r7, #7]
 8005604:	f107 000c 	add.w	r0, r7, #12
 8005608:	2101      	movs	r1, #1
 800560a:	f7ff fcc3 	bl	8004f94 <transmitMessage>
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f00a ff27 	bl	801047c <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <RB_init+0x22>
    return 0;
 8005634:	2300      	movs	r3, #0
 8005636:	e00a      	b.n	800564e <RB_init+0x38>
  }
  rb->rdpos = 0;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 800564c:	2301      	movs	r3, #1
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	3301      	adds	r3, #1
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800566e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005672:	fb01 f202 	mul.w	r2, r1, r2
 8005676:	1a9a      	subs	r2, r3, r2
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	429a      	cmp	r2, r3
 800567e:	d012      	beq.n	80056a6 <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	78f9      	ldrb	r1, [r7, #3]
 8005688:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	3301      	adds	r3, #1
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005696:	fb93 f1f2 	sdiv	r1, r3, r2
 800569a:	fb01 f202 	mul.w	r2, r1, r2
 800569e:	1a9a      	subs	r2, r3, r2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80056a4:	e000      	b.n	80056a8 <RB_push+0x52>
    return;
 80056a6:	bf00      	nop
}
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d101      	bne.n	80056ca <RB_pop+0x18>
 80056c6:	23ff      	movs	r3, #255	; 0xff
 80056c8:	e012      	b.n	80056f0 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	5cd3      	ldrb	r3, [r2, r3]
 80056d2:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	3301      	adds	r3, #1
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80056e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80056e4:	fb01 f202 	mul.w	r2, r1, r2
 80056e8:	1a9a      	subs	r2, r3, r2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	2b00      	cmp	r3, #0
 800570e:	dc05      	bgt.n	800571c <RB_pushFront+0x20>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005716:	3b01      	subs	r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e004      	b.n	8005726 <RB_pushFront+0x2a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	b2db      	uxtb	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	429a      	cmp	r2, r3
 8005730:	d008      	beq.n	8005744 <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	78f9      	ldrb	r1, [r7, #3]
 8005740:	54d1      	strb	r1, [r2, r3]
 8005742:	e000      	b.n	8005746 <RB_pushFront+0x4a>
    return;
 8005744:	bf00      	nop
}
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005770:	fb93 f1f2 	sdiv	r1, r3, r2
 8005774:	fb01 f202 	mul.w	r2, r1, r2
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	b2db      	uxtb	r3, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2228      	movs	r2, #40	; 0x28
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f00a fe70 	bl	801047c <memset>
  rb->rdpos = 0;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <HAL_MspInit+0x4c>)
 80057b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <HAL_MspInit+0x4c>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6613      	str	r3, [r2, #96]	; 0x60
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <HAL_MspInit+0x4c>)
 80057c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_MspInit+0x4c>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <HAL_MspInit+0x4c>)
 80057d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d8:	6593      	str	r3, [r2, #88]	; 0x58
 80057da:	4b08      	ldr	r3, [pc, #32]	; (80057fc <HAL_MspInit+0x4c>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80057e6:	2200      	movs	r2, #0
 80057e8:	210f      	movs	r1, #15
 80057ea:	f06f 0001 	mvn.w	r0, #1
 80057ee:	f000 ff31 	bl	8006654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000

08005800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b0b0      	sub	sp, #192	; 0xc0
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005808:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005818:	f107 0318 	add.w	r3, r7, #24
 800581c:	2294      	movs	r2, #148	; 0x94
 800581e:	2100      	movs	r1, #0
 8005820:	4618      	mov	r0, r3
 8005822:	f00a fe2b 	bl	801047c <memset>
  if(hi2c->Instance==I2C2)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a4a      	ldr	r2, [pc, #296]	; (8005954 <HAL_I2C_MspInit+0x154>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d144      	bne.n	80058ba <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005834:	2300      	movs	r3, #0
 8005836:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005838:	f107 0318 	add.w	r3, r7, #24
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fcdd 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005848:	f7ff fae0 	bl	8004e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800584c:	4b42      	ldr	r3, [pc, #264]	; (8005958 <HAL_I2C_MspInit+0x158>)
 800584e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005850:	4a41      	ldr	r2, [pc, #260]	; (8005958 <HAL_I2C_MspInit+0x158>)
 8005852:	f043 0302 	orr.w	r3, r3, #2
 8005856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005858:	4b3f      	ldr	r3, [pc, #252]	; (8005958 <HAL_I2C_MspInit+0x158>)
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8005864:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800586c:	2312      	movs	r3, #18
 800586e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005872:	2300      	movs	r3, #0
 8005874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005878:	2303      	movs	r3, #3
 800587a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800587e:	2304      	movs	r3, #4
 8005880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005888:	4619      	mov	r1, r3
 800588a:	4834      	ldr	r0, [pc, #208]	; (800595c <HAL_I2C_MspInit+0x15c>)
 800588c:	f001 fa88 	bl	8006da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005890:	4b31      	ldr	r3, [pc, #196]	; (8005958 <HAL_I2C_MspInit+0x158>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	4a30      	ldr	r2, [pc, #192]	; (8005958 <HAL_I2C_MspInit+0x158>)
 8005896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800589a:	6593      	str	r3, [r2, #88]	; 0x58
 800589c:	4b2e      	ldr	r3, [pc, #184]	; (8005958 <HAL_I2C_MspInit+0x158>)
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80058a8:	2200      	movs	r2, #0
 80058aa:	2105      	movs	r1, #5
 80058ac:	2021      	movs	r0, #33	; 0x21
 80058ae:	f000 fed1 	bl	8006654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80058b2:	2021      	movs	r0, #33	; 0x21
 80058b4:	f000 feea 	bl	800668c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80058b8:	e048      	b.n	800594c <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a28      	ldr	r2, [pc, #160]	; (8005960 <HAL_I2C_MspInit+0x160>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d143      	bne.n	800594c <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80058c4:	2340      	movs	r3, #64	; 0x40
 80058c6:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80058c8:	2300      	movs	r3, #0
 80058ca:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f003 fc93 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 80058dc:	f7ff fa96 	bl	8004e0c <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80058e0:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <HAL_I2C_MspInit+0x158>)
 80058e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_I2C_MspInit+0x158>)
 80058e6:	f043 0302 	orr.w	r3, r3, #2
 80058ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_I2C_MspInit+0x158>)
 80058ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80058f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005900:	2312      	movs	r3, #18
 8005902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005906:	2301      	movs	r3, #1
 8005908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800590c:	2303      	movs	r3, #3
 800590e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005912:	2304      	movs	r3, #4
 8005914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005918:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800591c:	4619      	mov	r1, r3
 800591e:	480f      	ldr	r0, [pc, #60]	; (800595c <HAL_I2C_MspInit+0x15c>)
 8005920:	f001 fa3e 	bl	8006da0 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005924:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <HAL_I2C_MspInit+0x158>)
 8005926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005928:	4a0b      	ldr	r2, [pc, #44]	; (8005958 <HAL_I2C_MspInit+0x158>)
 800592a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800592e:	6593      	str	r3, [r2, #88]	; 0x58
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <HAL_I2C_MspInit+0x158>)
 8005932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800593c:	2200      	movs	r2, #0
 800593e:	2105      	movs	r1, #5
 8005940:	201f      	movs	r0, #31
 8005942:	f000 fe87 	bl	8006654 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005946:	201f      	movs	r0, #31
 8005948:	f000 fea0 	bl	800668c <HAL_NVIC_EnableIRQ>
}
 800594c:	bf00      	nop
 800594e:	37c0      	adds	r7, #192	; 0xc0
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40005800 	.word	0x40005800
 8005958:	40021000 	.word	0x40021000
 800595c:	48000400 	.word	0x48000400
 8005960:	40005400 	.word	0x40005400

08005964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b0b4      	sub	sp, #208	; 0xd0
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800596c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800597c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005980:	2294      	movs	r2, #148	; 0x94
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f00a fd79 	bl	801047c <memset>
  if(huart->Instance==UART4)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a8b      	ldr	r2, [pc, #556]	; (8005bbc <HAL_UART_MspInit+0x258>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d144      	bne.n	8005a1e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005994:	2308      	movs	r3, #8
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005998:	2300      	movs	r3, #0
 800599a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800599c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059a0:	4618      	mov	r0, r3
 80059a2:	f003 fc2b 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80059ac:	f7ff fa2e 	bl	8004e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80059b0:	4b83      	ldr	r3, [pc, #524]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 80059b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b4:	4a82      	ldr	r2, [pc, #520]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 80059b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ba:	6593      	str	r3, [r2, #88]	; 0x58
 80059bc:	4b80      	ldr	r3, [pc, #512]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c8:	4b7d      	ldr	r3, [pc, #500]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 80059ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059cc:	4a7c      	ldr	r2, [pc, #496]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059d4:	4b7a      	ldr	r3, [pc, #488]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 80059d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80059e0:	2303      	movs	r3, #3
 80059e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e6:	2302      	movs	r3, #2
 80059e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f2:	2303      	movs	r3, #3
 80059f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80059f8:	2308      	movs	r3, #8
 80059fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005a02:	4619      	mov	r1, r3
 8005a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a08:	f001 f9ca 	bl	8006da0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2105      	movs	r1, #5
 8005a10:	2034      	movs	r0, #52	; 0x34
 8005a12:	f000 fe1f 	bl	8006654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005a16:	2034      	movs	r0, #52	; 0x34
 8005a18:	f000 fe38 	bl	800668c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005a1c:	e0ca      	b.n	8005bb4 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a68      	ldr	r2, [pc, #416]	; (8005bc4 <HAL_UART_MspInit+0x260>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d143      	bne.n	8005ab0 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a34:	4618      	mov	r0, r3
 8005a36:	f003 fbe1 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005a40:	f7ff f9e4 	bl	8004e0c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a44:	4b5e      	ldr	r3, [pc, #376]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a48:	4a5d      	ldr	r2, [pc, #372]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a4e:	6613      	str	r3, [r2, #96]	; 0x60
 8005a50:	4b5b      	ldr	r3, [pc, #364]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a5c:	4b58      	ldr	r3, [pc, #352]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a60:	4a57      	ldr	r2, [pc, #348]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005a62:	f043 0302 	orr.w	r3, r3, #2
 8005a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a68:	4b55      	ldr	r3, [pc, #340]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8005a74:	23c0      	movs	r3, #192	; 0xc0
 8005a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a86:	2303      	movs	r3, #3
 8005a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a8c:	2307      	movs	r3, #7
 8005a8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a92:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005a96:	4619      	mov	r1, r3
 8005a98:	484b      	ldr	r0, [pc, #300]	; (8005bc8 <HAL_UART_MspInit+0x264>)
 8005a9a:	f001 f981 	bl	8006da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2105      	movs	r1, #5
 8005aa2:	2025      	movs	r0, #37	; 0x25
 8005aa4:	f000 fdd6 	bl	8006654 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005aa8:	2025      	movs	r0, #37	; 0x25
 8005aaa:	f000 fdef 	bl	800668c <HAL_NVIC_EnableIRQ>
}
 8005aae:	e081      	b.n	8005bb4 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a45      	ldr	r2, [pc, #276]	; (8005bcc <HAL_UART_MspInit+0x268>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d13b      	bne.n	8005b32 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005aba:	2302      	movs	r3, #2
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f003 fb98 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8005ad2:	f7ff f99b 	bl	8004e0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ada:	4a39      	ldr	r2, [pc, #228]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ae2:	4b37      	ldr	r3, [pc, #220]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005aee:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af2:	4a33      	ldr	r2, [pc, #204]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005af4:	f043 0308 	orr.w	r3, r3, #8
 8005af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005afa:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8005b06:	2378      	movs	r3, #120	; 0x78
 8005b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b1e:	2307      	movs	r3, #7
 8005b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4829      	ldr	r0, [pc, #164]	; (8005bd0 <HAL_UART_MspInit+0x26c>)
 8005b2c:	f001 f938 	bl	8006da0 <HAL_GPIO_Init>
}
 8005b30:	e040      	b.n	8005bb4 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <HAL_UART_MspInit+0x270>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d13b      	bne.n	8005bb4 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005b40:	2300      	movs	r3, #0
 8005b42:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f003 fb57 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8005b54:	f7ff f95a 	bl	8004e0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005b58:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b62:	6593      	str	r3, [r2, #88]	; 0x58
 8005b64:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b74:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005b76:	f043 0308 	orr.w	r3, r3, #8
 8005b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <HAL_UART_MspInit+0x25c>)
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	60bb      	str	r3, [r7, #8]
 8005b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005b88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b90:	2302      	movs	r3, #2
 8005b92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ba2:	2307      	movs	r3, #7
 8005ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ba8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005bac:	4619      	mov	r1, r3
 8005bae:	4808      	ldr	r0, [pc, #32]	; (8005bd0 <HAL_UART_MspInit+0x26c>)
 8005bb0:	f001 f8f6 	bl	8006da0 <HAL_GPIO_Init>
}
 8005bb4:	bf00      	nop
 8005bb6:	37d0      	adds	r7, #208	; 0xd0
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40004c00 	.word	0x40004c00
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40013800 	.word	0x40013800
 8005bc8:	48000400 	.word	0x48000400
 8005bcc:	40004400 	.word	0x40004400
 8005bd0:	48000c00 	.word	0x48000c00
 8005bd4:	40004800 	.word	0x40004800

08005bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08c      	sub	sp, #48	; 0x30
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005be6:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <HAL_InitTick+0xc8>)
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	4a2d      	ldr	r2, [pc, #180]	; (8005ca0 <HAL_InitTick+0xc8>)
 8005bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8005bf2:	4b2b      	ldr	r3, [pc, #172]	; (8005ca0 <HAL_InitTick+0xc8>)
 8005bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005bfe:	f107 020c 	add.w	r2, r7, #12
 8005c02:	f107 0310 	add.w	r3, r7, #16
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f003 fa05 	bl	8009018 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005c0e:	f003 f9ed 	bl	8008fec <HAL_RCC_GetPCLK2Freq>
 8005c12:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	4a23      	ldr	r2, [pc, #140]	; (8005ca4 <HAL_InitTick+0xcc>)
 8005c18:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1c:	0c9b      	lsrs	r3, r3, #18
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005c22:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <HAL_InitTick+0xd4>)
 8005c26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005c28:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c2e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005c30:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005c36:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c42:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005c48:	4817      	ldr	r0, [pc, #92]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c4a:	f003 ffef 	bl	8009c2c <HAL_TIM_Base_Init>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11b      	bne.n	8005c94 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005c5c:	4812      	ldr	r0, [pc, #72]	; (8005ca8 <HAL_InitTick+0xd0>)
 8005c5e:	f004 f847 	bl	8009cf0 <HAL_TIM_Base_Start_IT>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d111      	bne.n	8005c94 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005c70:	2019      	movs	r0, #25
 8005c72:	f000 fd0b 	bl	800668c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b0f      	cmp	r3, #15
 8005c7a:	d808      	bhi.n	8005c8e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	2019      	movs	r0, #25
 8005c82:	f000 fce7 	bl	8006654 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c86:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <HAL_InitTick+0xd8>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	e002      	b.n	8005c94 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3730      	adds	r7, #48	; 0x30
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	431bde83 	.word	0x431bde83
 8005ca8:	20000488 	.word	0x20000488
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	20000040 	.word	0x20000040

08005cb4 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cb8:	e7fe      	b.n	8005cb8 <NMI_Handler+0x4>

08005cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cbe:	e7fe      	b.n	8005cbe <HardFault_Handler+0x4>

08005cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <MemManage_Handler+0x4>

08005cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cca:	e7fe      	b.n	8005cca <BusFault_Handler+0x4>

08005ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cd0:	e7fe      	b.n	8005cd0 <UsageFault_Handler+0x4>

08005cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cd6:	bf00      	nop
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8005ce4:	2020      	movs	r0, #32
 8005ce6:	f001 fa1f 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8005cea:	2040      	movs	r0, #64	; 0x40
 8005cec:	f001 fa1c 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8005cf0:	2080      	movs	r0, #128	; 0x80
 8005cf2:	f001 fa19 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8005cf6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005cfa:	f001 fa15 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005cfe:	bf00      	nop
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d08:	4802      	ldr	r0, [pc, #8]	; (8005d14 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005d0a:	f004 f861 	bl	8009dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000488 	.word	0x20000488

08005d18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005d1c:	4802      	ldr	r0, [pc, #8]	; (8005d28 <I2C1_EV_IRQHandler+0x10>)
 8005d1e:	f001 fecd 	bl	8007abc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	200002fc 	.word	0x200002fc

08005d2c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005d30:	4802      	ldr	r0, [pc, #8]	; (8005d3c <I2C2_EV_IRQHandler+0x10>)
 8005d32:	f001 fec3 	bl	8007abc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005d36:	bf00      	nop
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200003c8 	.word	0x200003c8

08005d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005d44:	4802      	ldr	r0, [pc, #8]	; (8005d50 <USART1_IRQHandler+0x10>)
 8005d46:	f004 fb81 	bl	800a44c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005d4a:	bf00      	nop
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200004d8 	.word	0x200004d8

08005d54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005d58:	4802      	ldr	r0, [pc, #8]	; (8005d64 <UART4_IRQHandler+0x10>)
 8005d5a:	f004 fb77 	bl	800a44c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005d5e:	bf00      	nop
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000568 	.word	0x20000568

08005d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8005d6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005d70:	f001 f9da 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8005d74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d78:	f001 f9d6 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8005d7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d80:	f001 f9d2 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8005d84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d88:	f001 f9ce 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8005d8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005d90:	f001 f9ca 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8005d94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005d98:	f001 f9c6 	bl	8007128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d9c:	bf00      	nop
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  return 1;
 8005da4:	2301      	movs	r3, #1
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <_kill>:

int _kill(int pid, int sig)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005dba:	f00a fb1f 	bl	80103fc <__errno>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2216      	movs	r2, #22
 8005dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <_exit>:

void _exit (int status)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ffe7 	bl	8005db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005de2:	e7fe      	b.n	8005de2 <_exit+0x12>

08005de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e00a      	b.n	8005e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005df6:	f3af 8000 	nop.w
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	60ba      	str	r2, [r7, #8]
 8005e02:	b2ca      	uxtb	r2, r1
 8005e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	dbf0      	blt.n	8005df6 <_read+0x12>
  }

  return len;
 8005e14:	687b      	ldr	r3, [r7, #4]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e009      	b.n	8005e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	60ba      	str	r2, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	3301      	adds	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	dbf1      	blt.n	8005e30 <_write+0x12>
  }
  return len;
 8005e4c:	687b      	ldr	r3, [r7, #4]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_close>:

int _close(int file)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <_isatty>:

int _isatty(int file)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005e96:	2301      	movs	r3, #1
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ec8:	4a14      	ldr	r2, [pc, #80]	; (8005f1c <_sbrk+0x5c>)
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <_sbrk+0x60>)
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ed4:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <_sbrk+0x64>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <_sbrk+0x64>)
 8005ede:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <_sbrk+0x68>)
 8005ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ee2:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <_sbrk+0x64>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4413      	add	r3, r2
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d207      	bcs.n	8005f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ef0:	f00a fa84 	bl	80103fc <__errno>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	220c      	movs	r2, #12
 8005ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005efa:	f04f 33ff 	mov.w	r3, #4294967295
 8005efe:	e009      	b.n	8005f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f00:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <_sbrk+0x64>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <_sbrk+0x64>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4a05      	ldr	r2, [pc, #20]	; (8005f24 <_sbrk+0x64>)
 8005f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f12:	68fb      	ldr	r3, [r7, #12]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	200a0000 	.word	0x200a0000
 8005f20:	00000400 	.word	0x00000400
 8005f24:	200004d4 	.word	0x200004d4
 8005f28:	200063c8 	.word	0x200063c8

08005f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <SystemInit+0x20>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	4a05      	ldr	r2, [pc, #20]	; (8005f4c <SystemInit+0x20>)
 8005f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f56:	4a25      	ldr	r2, [pc, #148]	; (8005fec <MX_USART1_UART_Init+0x9c>)
 8005f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f5c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f62:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f68:	4b1f      	ldr	r3, [pc, #124]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f74:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f76:	220c      	movs	r2, #12
 8005f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f80:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f98:	4813      	ldr	r0, [pc, #76]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005f9a:	f004 f919 	bl	800a1d0 <HAL_UART_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005fa4:	f7fe ff32 	bl	8004e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005fa8:	2100      	movs	r1, #0
 8005faa:	480f      	ldr	r0, [pc, #60]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005fac:	f006 f8c5 	bl	800c13a <HAL_UARTEx_SetTxFifoThreshold>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005fb6:	f7fe ff29 	bl	8004e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005fba:	2100      	movs	r1, #0
 8005fbc:	480a      	ldr	r0, [pc, #40]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005fbe:	f006 f8fa 	bl	800c1b6 <HAL_UARTEx_SetRxFifoThreshold>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005fc8:	f7fe ff20 	bl	8004e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005fcc:	4806      	ldr	r0, [pc, #24]	; (8005fe8 <MX_USART1_UART_Init+0x98>)
 8005fce:	f006 f87b 	bl	800c0c8 <HAL_UARTEx_DisableFifoMode>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005fd8:	f7fe ff18 	bl	8004e0c <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 8005fdc:	2128      	movs	r1, #40	; 0x28
 8005fde:	4804      	ldr	r0, [pc, #16]	; (8005ff0 <MX_USART1_UART_Init+0xa0>)
 8005fe0:	f7ff fb19 	bl	8005616 <RB_init>

}
 8005fe4:	bf00      	nop
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200004d8 	.word	0x200004d8
 8005fec:	40013800 	.word	0x40013800
 8005ff0:	2000062c 	.word	0x2000062c

08005ff4 <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8005ff8:	4b26      	ldr	r3, [pc, #152]	; (8006094 <MX_UART4_Init+0xa0>)
 8005ffa:	4a27      	ldr	r2, [pc, #156]	; (8006098 <MX_UART4_Init+0xa4>)
 8005ffc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8005ffe:	4b25      	ldr	r3, [pc, #148]	; (8006094 <MX_UART4_Init+0xa0>)
 8006000:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006004:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006006:	4b23      	ldr	r3, [pc, #140]	; (8006094 <MX_UART4_Init+0xa0>)
 8006008:	2200      	movs	r2, #0
 800600a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800600c:	4b21      	ldr	r3, [pc, #132]	; (8006094 <MX_UART4_Init+0xa0>)
 800600e:	2200      	movs	r2, #0
 8006010:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006012:	4b20      	ldr	r3, [pc, #128]	; (8006094 <MX_UART4_Init+0xa0>)
 8006014:	2200      	movs	r2, #0
 8006016:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <MX_UART4_Init+0xa0>)
 800601a:	220c      	movs	r2, #12
 800601c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800601e:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <MX_UART4_Init+0xa0>)
 8006020:	2200      	movs	r2, #0
 8006022:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006024:	4b1b      	ldr	r3, [pc, #108]	; (8006094 <MX_UART4_Init+0xa0>)
 8006026:	2200      	movs	r2, #0
 8006028:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800602a:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <MX_UART4_Init+0xa0>)
 800602c:	2200      	movs	r2, #0
 800602e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006030:	4b18      	ldr	r3, [pc, #96]	; (8006094 <MX_UART4_Init+0xa0>)
 8006032:	2200      	movs	r2, #0
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006036:	4b17      	ldr	r3, [pc, #92]	; (8006094 <MX_UART4_Init+0xa0>)
 8006038:	2200      	movs	r2, #0
 800603a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800603c:	4815      	ldr	r0, [pc, #84]	; (8006094 <MX_UART4_Init+0xa0>)
 800603e:	f004 f8c7 	bl	800a1d0 <HAL_UART_Init>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <MX_UART4_Init+0x58>
  {
    error_Handler();
 8006048:	f000 f82c 	bl	80060a4 <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800604c:	2100      	movs	r1, #0
 800604e:	4811      	ldr	r0, [pc, #68]	; (8006094 <MX_UART4_Init+0xa0>)
 8006050:	f006 f873 	bl	800c13a <HAL_UARTEx_SetTxFifoThreshold>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <MX_UART4_Init+0x6a>
  {
    error_Handler();
 800605a:	f000 f823 	bl	80060a4 <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800605e:	2100      	movs	r1, #0
 8006060:	480c      	ldr	r0, [pc, #48]	; (8006094 <MX_UART4_Init+0xa0>)
 8006062:	f006 f8a8 	bl	800c1b6 <HAL_UARTEx_SetRxFifoThreshold>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 800606c:	f000 f81a 	bl	80060a4 <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8006070:	4808      	ldr	r0, [pc, #32]	; (8006094 <MX_UART4_Init+0xa0>)
 8006072:	f006 f829 	bl	800c0c8 <HAL_UARTEx_DisableFifoMode>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 800607c:	f000 f812 	bl	80060a4 <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 8006080:	2128      	movs	r1, #40	; 0x28
 8006082:	4806      	ldr	r0, [pc, #24]	; (800609c <MX_UART4_Init+0xa8>)
 8006084:	f7ff fac7 	bl	8005616 <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 8006088:	210a      	movs	r1, #10
 800608a:	4805      	ldr	r0, [pc, #20]	; (80060a0 <MX_UART4_Init+0xac>)
 800608c:	f000 f83c 	bl	8006108 <uart_write_debug>

}
 8006090:	bf00      	nop
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000568 	.word	0x20000568
 8006098:	40004c00 	.word	0x40004c00
 800609c:	200005f8 	.word	0x200005f8
 80060a0:	08014bac 	.word	0x08014bac

080060a4 <error_Handler>:

void error_Handler(void){
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 80060a8:	210a      	movs	r1, #10
 80060aa:	4802      	ldr	r0, [pc, #8]	; (80060b4 <error_Handler+0x10>)
 80060ac:	f000 f82c 	bl	8006108 <uart_write_debug>
}
 80060b0:	bf00      	nop
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	08014bc0 	.word	0x08014bc0

080060b8 <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d00c      	beq.n	80060e2 <uart_receive_it+0x2a>
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	dc0d      	bgt.n	80060e8 <uart_receive_it+0x30>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <uart_receive_it+0x1e>
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d003      	beq.n	80060dc <uart_receive_it+0x24>
 80060d4:	e008      	b.n	80060e8 <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <uart_receive_it+0x44>)
 80060d8:	60fb      	str	r3, [r7, #12]
		break;
 80060da:	e005      	b.n	80060e8 <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 80060dc:	4b08      	ldr	r3, [pc, #32]	; (8006100 <uart_receive_it+0x48>)
 80060de:	60fb      	str	r3, [r7, #12]
		break;
 80060e0:	e002      	b.n	80060e8 <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <uart_receive_it+0x44>)
 80060e4:	60fb      	str	r3, [r7, #12]
		break;
 80060e6:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 80060e8:	2201      	movs	r2, #1
 80060ea:	4906      	ldr	r1, [pc, #24]	; (8006104 <uart_receive_it+0x4c>)
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f004 f957 	bl	800a3a0 <HAL_UART_Receive_IT>
 80060f2:	4603      	mov	r3, r0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200004d8 	.word	0x200004d8
 8006100:	20000568 	.word	0x20000568
 8006104:	20000660 	.word	0x20000660

08006108 <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fa f874 	bl	8000200 <strlen>
 8006118:	4603      	mov	r3, r0
 800611a:	b29a      	uxth	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	4803      	ldr	r0, [pc, #12]	; (8006130 <uart_write_debug+0x28>)
 8006122:	f004 f8a5 	bl	800a270 <HAL_UART_Transmit>
 8006126:	4603      	mov	r3, r0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200004d8 	.word	0x200004d8

08006134 <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	72fb      	strb	r3, [r7, #11]
 8006142:	4613      	mov	r3, r2
 8006144:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 8006146:	7abb      	ldrb	r3, [r7, #10]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d00c      	beq.n	8006166 <uart_write+0x32>
 800614c:	2b02      	cmp	r3, #2
 800614e:	dc0d      	bgt.n	800616c <uart_write+0x38>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <uart_write+0x26>
 8006154:	2b01      	cmp	r3, #1
 8006156:	d003      	beq.n	8006160 <uart_write+0x2c>
 8006158:	e008      	b.n	800616c <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <uart_write+0x70>)
 800615c:	617b      	str	r3, [r7, #20]
		break;
 800615e:	e005      	b.n	800616c <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <uart_write+0x74>)
 8006162:	617b      	str	r3, [r7, #20]
		break;
 8006164:	e002      	b.n	800616c <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <uart_write+0x70>)
 8006168:	617b      	str	r3, [r7, #20]
		break;
 800616a:	bf00      	nop
	}
	if (len == 0){
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7fa f844 	bl	8000200 <strlen>
 8006178:	4603      	mov	r3, r0
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	6978      	ldr	r0, [r7, #20]
 8006182:	f004 f875 	bl	800a270 <HAL_UART_Transmit>
 8006186:	4603      	mov	r3, r0
 8006188:	e007      	b.n	800619a <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	6978      	ldr	r0, [r7, #20]
 8006194:	f004 f86c 	bl	800a270 <HAL_UART_Transmit>
 8006198:	4603      	mov	r3, r0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200004d8 	.word	0x200004d8
 80061a8:	20000568 	.word	0x20000568

080061ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a7c      	ldr	r2, [pc, #496]	; (80063ac <HAL_UART_RxCpltCallback+0x200>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f040 80a2 	bne.w	8006304 <HAL_UART_RxCpltCallback+0x158>
	{
		if (ack_rcv_flag == 1){
 80061c0:	4b7b      	ldr	r3, [pc, #492]	; (80063b0 <HAL_UART_RxCpltCallback+0x204>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d129      	bne.n	800621c <HAL_UART_RxCpltCallback+0x70>
			if ((rxChar != ESC) && (prvRxChar == ACK)){
 80061c8:	4b7a      	ldr	r3, [pc, #488]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b1b      	cmp	r3, #27
 80061ce:	d010      	beq.n	80061f2 <HAL_UART_RxCpltCallback+0x46>
 80061d0:	4b79      	ldr	r3, [pc, #484]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d10c      	bne.n	80061f2 <HAL_UART_RxCpltCallback+0x46>
				osEventFlagsSet(ack_rcvd, ACK_FLAG);
 80061d8:	4b78      	ldr	r3, [pc, #480]	; (80063bc <HAL_UART_RxCpltCallback+0x210>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2101      	movs	r1, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f006 fa48 	bl	800c674 <osEventFlagsSet>
				prvRxChar = 0x00;
 80061e4:	4b74      	ldr	r3, [pc, #464]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 80061ea:	4b71      	ldr	r3, [pc, #452]	; (80063b0 <HAL_UART_RxCpltCallback+0x204>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	e082      	b.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar != ESC) && (prvRxChar == NACK)){
 80061f2:	4b70      	ldr	r3, [pc, #448]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b1b      	cmp	r3, #27
 80061f8:	d07e      	beq.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
 80061fa:	4b6f      	ldr	r3, [pc, #444]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b15      	cmp	r3, #21
 8006200:	d17a      	bne.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
				osEventFlagsSet(ack_rcvd, NACK_FLAG);
 8006202:	4b6e      	ldr	r3, [pc, #440]	; (80063bc <HAL_UART_RxCpltCallback+0x210>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2100      	movs	r1, #0
 8006208:	4618      	mov	r0, r3
 800620a:	f006 fa33 	bl	800c674 <osEventFlagsSet>
				prvRxChar = 0x00;
 800620e:	4b6a      	ldr	r3, [pc, #424]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 8006214:	4b66      	ldr	r3, [pc, #408]	; (80063b0 <HAL_UART_RxCpltCallback+0x204>)
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	e06d      	b.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
			}
		}
		else{
			if (((rxChar == ACK) || (rxChar == NACK)) && (prvRxChar == 0xFF)){
 800621c:	4b65      	ldr	r3, [pc, #404]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b06      	cmp	r3, #6
 8006222:	d003      	beq.n	800622c <HAL_UART_RxCpltCallback+0x80>
 8006224:	4b63      	ldr	r3, [pc, #396]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b15      	cmp	r3, #21
 800622a:	d10b      	bne.n	8006244 <HAL_UART_RxCpltCallback+0x98>
 800622c:	4b62      	ldr	r3, [pc, #392]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2bff      	cmp	r3, #255	; 0xff
 8006232:	d107      	bne.n	8006244 <HAL_UART_RxCpltCallback+0x98>
				ack_rcv_flag = 1;
 8006234:	4b5e      	ldr	r3, [pc, #376]	; (80063b0 <HAL_UART_RxCpltCallback+0x204>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
				prvRxChar = rxChar;
 800623a:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	4b5e      	ldr	r3, [pc, #376]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	e059      	b.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006244:	4b5b      	ldr	r3, [pc, #364]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d125      	bne.n	8006298 <HAL_UART_RxCpltCallback+0xec>
 800624c:	4b5a      	ldr	r3, [pc, #360]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b1b      	cmp	r3, #27
 8006252:	d021      	beq.n	8006298 <HAL_UART_RxCpltCallback+0xec>
				uint8_t start_ch = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	73bb      	strb	r3, [r7, #14]
				start_ch = RB_pop(&uart4RXrb);
 8006258:	4859      	ldr	r0, [pc, #356]	; (80063c0 <HAL_UART_RxCpltCallback+0x214>)
 800625a:	f7ff fa2a 	bl	80056b2 <RB_pop>
 800625e:	4603      	mov	r3, r0
 8006260:	73bb      	strb	r3, [r7, #14]
				if (start_ch == STX){
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d113      	bne.n	8006290 <HAL_UART_RxCpltCallback+0xe4>
					uint8_t rb_len = RB_size(&uart4RXrb);
 8006268:	4855      	ldr	r0, [pc, #340]	; (80063c0 <HAL_UART_RxCpltCallback+0x214>)
 800626a:	f7ff fa71 	bl	8005750 <RB_size>
 800626e:	4603      	mov	r3, r0
 8006270:	737b      	strb	r3, [r7, #13]
					RB_pushFront(&uart4RXrb, rb_len);
 8006272:	7b7b      	ldrb	r3, [r7, #13]
 8006274:	4619      	mov	r1, r3
 8006276:	4852      	ldr	r0, [pc, #328]	; (80063c0 <HAL_UART_RxCpltCallback+0x214>)
 8006278:	f7ff fa40 	bl	80056fc <RB_pushFront>
					osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 800627c:	4b51      	ldr	r3, [pc, #324]	; (80063c4 <HAL_UART_RxCpltCallback+0x218>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	2200      	movs	r2, #0
 8006284:	494e      	ldr	r1, [pc, #312]	; (80063c0 <HAL_UART_RxCpltCallback+0x214>)
 8006286:	f006 fc21 	bl	800cacc <osMessageQueuePut>
					prvRxChar = 0xFF;
 800628a:	4b4b      	ldr	r3, [pc, #300]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 800628c:	22ff      	movs	r2, #255	; 0xff
 800628e:	701a      	strb	r2, [r3, #0]
				}
				RB_clear(&uart4RXrb);
 8006290:	484b      	ldr	r0, [pc, #300]	; (80063c0 <HAL_UART_RxCpltCallback+0x214>)
 8006292:	f7ff fa79 	bl	8005788 <RB_clear>
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006296:	e02f      	b.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8006298:	4b46      	ldr	r3, [pc, #280]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b1b      	cmp	r3, #27
 800629e:	d108      	bne.n	80062b2 <HAL_UART_RxCpltCallback+0x106>
 80062a0:	4b45      	ldr	r3, [pc, #276]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b1b      	cmp	r3, #27
 80062a6:	d004      	beq.n	80062b2 <HAL_UART_RxCpltCallback+0x106>
				 prvRxChar = rxChar;
 80062a8:	4b42      	ldr	r3, [pc, #264]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	4b42      	ldr	r3, [pc, #264]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e022      	b.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar == ESC)){
 80062b2:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b1b      	cmp	r3, #27
 80062b8:	d10d      	bne.n	80062d6 <HAL_UART_RxCpltCallback+0x12a>
 80062ba:	4b3f      	ldr	r3, [pc, #252]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b1b      	cmp	r3, #27
 80062c0:	d109      	bne.n	80062d6 <HAL_UART_RxCpltCallback+0x12a>
				RB_push(&uart4RXrb, rxChar);
 80062c2:	4b3c      	ldr	r3, [pc, #240]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	4619      	mov	r1, r3
 80062c8:	483d      	ldr	r0, [pc, #244]	; (80063c0 <HAL_UART_RxCpltCallback+0x214>)
 80062ca:	f7ff f9c4 	bl	8005656 <RB_push>
				prvRxChar = 0x00;
 80062ce:	4b3a      	ldr	r3, [pc, #232]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e010      	b.n	80062f8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else {
			  RB_push(&uart4RXrb, rxChar);
 80062d6:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	4838      	ldr	r0, [pc, #224]	; (80063c0 <HAL_UART_RxCpltCallback+0x214>)
 80062de:	f7ff f9ba 	bl	8005656 <RB_push>
			  if (rxChar == 0xFF) prvRxChar = 0x00;
 80062e2:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2bff      	cmp	r3, #255	; 0xff
 80062e8:	d102      	bne.n	80062f0 <HAL_UART_RxCpltCallback+0x144>
 80062ea:	4b33      	ldr	r3, [pc, #204]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
			  prvRxChar = rxChar;
 80062f0:	4b30      	ldr	r3, [pc, #192]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	4b30      	ldr	r3, [pc, #192]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 80062f6:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 80062f8:	2201      	movs	r2, #1
 80062fa:	492e      	ldr	r1, [pc, #184]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 80062fc:	4832      	ldr	r0, [pc, #200]	; (80063c8 <HAL_UART_RxCpltCallback+0x21c>)
 80062fe:	f004 f84f 	bl	800a3a0 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 8006302:	e04f      	b.n	80063a4 <HAL_UART_RxCpltCallback+0x1f8>
	else if (UartHandle->Instance == USART1){
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a30      	ldr	r2, [pc, #192]	; (80063cc <HAL_UART_RxCpltCallback+0x220>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d14a      	bne.n	80063a4 <HAL_UART_RxCpltCallback+0x1f8>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 800630e:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d118      	bne.n	8006348 <HAL_UART_RxCpltCallback+0x19c>
 8006316:	4b28      	ldr	r3, [pc, #160]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b1b      	cmp	r3, #27
 800631c:	d014      	beq.n	8006348 <HAL_UART_RxCpltCallback+0x19c>
		uint8_t start_ch = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 8006322:	482b      	ldr	r0, [pc, #172]	; (80063d0 <HAL_UART_RxCpltCallback+0x224>)
 8006324:	f7ff f9c5 	bl	80056b2 <RB_pop>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d106      	bne.n	8006340 <HAL_UART_RxCpltCallback+0x194>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <HAL_UART_RxCpltCallback+0x218>)
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	2300      	movs	r3, #0
 8006338:	2200      	movs	r2, #0
 800633a:	4925      	ldr	r1, [pc, #148]	; (80063d0 <HAL_UART_RxCpltCallback+0x224>)
 800633c:	f006 fbc6 	bl	800cacc <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 8006340:	4823      	ldr	r0, [pc, #140]	; (80063d0 <HAL_UART_RxCpltCallback+0x224>)
 8006342:	f7ff fa21 	bl	8005788 <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006346:	e028      	b.n	800639a <HAL_UART_RxCpltCallback+0x1ee>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8006348:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b1b      	cmp	r3, #27
 800634e:	d108      	bne.n	8006362 <HAL_UART_RxCpltCallback+0x1b6>
 8006350:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b1b      	cmp	r3, #27
 8006356:	d004      	beq.n	8006362 <HAL_UART_RxCpltCallback+0x1b6>
			 prvRxChar = rxChar;
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e01b      	b.n	800639a <HAL_UART_RxCpltCallback+0x1ee>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8006362:	4b14      	ldr	r3, [pc, #80]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b1b      	cmp	r3, #27
 8006368:	d10d      	bne.n	8006386 <HAL_UART_RxCpltCallback+0x1da>
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b1b      	cmp	r3, #27
 8006370:	d109      	bne.n	8006386 <HAL_UART_RxCpltCallback+0x1da>
			RB_push(&uart1RXrb, rxChar);
 8006372:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	4815      	ldr	r0, [pc, #84]	; (80063d0 <HAL_UART_RxCpltCallback+0x224>)
 800637a:	f7ff f96c 	bl	8005656 <RB_push>
			prvRxChar = 0x00;
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e009      	b.n	800639a <HAL_UART_RxCpltCallback+0x1ee>
		  RB_push(&uart1RXrb, rxChar);
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	4810      	ldr	r0, [pc, #64]	; (80063d0 <HAL_UART_RxCpltCallback+0x224>)
 800638e:	f7ff f962 	bl	8005656 <RB_push>
		  prvRxChar = rxChar;
 8006392:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <HAL_UART_RxCpltCallback+0x20c>)
 8006398:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 800639a:	2201      	movs	r2, #1
 800639c:	4905      	ldr	r1, [pc, #20]	; (80063b4 <HAL_UART_RxCpltCallback+0x208>)
 800639e:	480d      	ldr	r0, [pc, #52]	; (80063d4 <HAL_UART_RxCpltCallback+0x228>)
 80063a0:	f003 fffe 	bl	800a3a0 <HAL_UART_Receive_IT>
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40004c00 	.word	0x40004c00
 80063b0:	20000662 	.word	0x20000662
 80063b4:	20000660 	.word	0x20000660
 80063b8:	20000661 	.word	0x20000661
 80063bc:	20000460 	.word	0x20000460
 80063c0:	200005f8 	.word	0x200005f8
 80063c4:	2000045c 	.word	0x2000045c
 80063c8:	20000568 	.word	0x20000568
 80063cc:	40013800 	.word	0x40013800
 80063d0:	2000062c 	.word	0x2000062c
 80063d4:	200004d8 	.word	0x200004d8

080063d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80063d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006410 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80063dc:	f7ff fda6 	bl	8005f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063e0:	480c      	ldr	r0, [pc, #48]	; (8006414 <LoopForever+0x6>)
  ldr r1, =_edata
 80063e2:	490d      	ldr	r1, [pc, #52]	; (8006418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80063e4:	4a0d      	ldr	r2, [pc, #52]	; (800641c <LoopForever+0xe>)
  movs r3, #0
 80063e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063e8:	e002      	b.n	80063f0 <LoopCopyDataInit>

080063ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063ee:	3304      	adds	r3, #4

080063f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063f4:	d3f9      	bcc.n	80063ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80063f8:	4c0a      	ldr	r4, [pc, #40]	; (8006424 <LoopForever+0x16>)
  movs r3, #0
 80063fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063fc:	e001      	b.n	8006402 <LoopFillZerobss>

080063fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006400:	3204      	adds	r2, #4

08006402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006404:	d3fb      	bcc.n	80063fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006406:	f009 ffff 	bl	8010408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800640a:	f7fe f8df 	bl	80045cc <main>

0800640e <LoopForever>:

LoopForever:
    b LoopForever
 800640e:	e7fe      	b.n	800640e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006410:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8006414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006418:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 800641c:	080155b4 	.word	0x080155b4
  ldr r2, =_sbss
 8006420:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8006424:	200063c8 	.word	0x200063c8

08006428 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006428:	e7fe      	b.n	8006428 <ADC1_IRQHandler>

0800642a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006434:	2003      	movs	r0, #3
 8006436:	f000 f902 	bl	800663e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800643a:	200f      	movs	r0, #15
 800643c:	f7ff fbcc 	bl	8005bd8 <HAL_InitTick>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	71fb      	strb	r3, [r7, #7]
 800644a:	e001      	b.n	8006450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800644c:	f7ff f9b0 	bl	80057b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006450:	79fb      	ldrb	r3, [r7, #7]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <HAL_IncTick+0x20>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <HAL_IncTick+0x24>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4413      	add	r3, r2
 800646c:	4a04      	ldr	r2, [pc, #16]	; (8006480 <HAL_IncTick+0x24>)
 800646e:	6013      	str	r3, [r2, #0]
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000044 	.word	0x20000044
 8006480:	20000664 	.word	0x20000664

08006484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return uwTick;
 8006488:	4b03      	ldr	r3, [pc, #12]	; (8006498 <HAL_GetTick+0x14>)
 800648a:	681b      	ldr	r3, [r3, #0]
}
 800648c:	4618      	mov	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20000664 	.word	0x20000664

0800649c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064a4:	f7ff ffee 	bl	8006484 <HAL_GetTick>
 80064a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d005      	beq.n	80064c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <HAL_Delay+0x44>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80064c2:	bf00      	nop
 80064c4:	f7ff ffde 	bl	8006484 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d8f7      	bhi.n	80064c4 <HAL_Delay+0x28>
  {
  }
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000044 	.word	0x20000044

080064e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <__NVIC_SetPriorityGrouping+0x44>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006500:	4013      	ands	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800650c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006516:	4a04      	ldr	r2, [pc, #16]	; (8006528 <__NVIC_SetPriorityGrouping+0x44>)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	60d3      	str	r3, [r2, #12]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	e000ed00 	.word	0xe000ed00

0800652c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006530:	4b04      	ldr	r3, [pc, #16]	; (8006544 <__NVIC_GetPriorityGrouping+0x18>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	f003 0307 	and.w	r3, r3, #7
}
 800653a:	4618      	mov	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	e000ed00 	.word	0xe000ed00

08006548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006556:	2b00      	cmp	r3, #0
 8006558:	db0b      	blt.n	8006572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	f003 021f 	and.w	r2, r3, #31
 8006560:	4907      	ldr	r1, [pc, #28]	; (8006580 <__NVIC_EnableIRQ+0x38>)
 8006562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2001      	movs	r0, #1
 800656a:	fa00 f202 	lsl.w	r2, r0, r2
 800656e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000e100 	.word	0xe000e100

08006584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	6039      	str	r1, [r7, #0]
 800658e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006594:	2b00      	cmp	r3, #0
 8006596:	db0a      	blt.n	80065ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	b2da      	uxtb	r2, r3
 800659c:	490c      	ldr	r1, [pc, #48]	; (80065d0 <__NVIC_SetPriority+0x4c>)
 800659e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a2:	0112      	lsls	r2, r2, #4
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	440b      	add	r3, r1
 80065a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065ac:	e00a      	b.n	80065c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4908      	ldr	r1, [pc, #32]	; (80065d4 <__NVIC_SetPriority+0x50>)
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	3b04      	subs	r3, #4
 80065bc:	0112      	lsls	r2, r2, #4
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	440b      	add	r3, r1
 80065c2:	761a      	strb	r2, [r3, #24]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	e000e100 	.word	0xe000e100
 80065d4:	e000ed00 	.word	0xe000ed00

080065d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065d8:	b480      	push	{r7}
 80065da:	b089      	sub	sp, #36	; 0x24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f1c3 0307 	rsb	r3, r3, #7
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	bf28      	it	cs
 80065f6:	2304      	movcs	r3, #4
 80065f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	3304      	adds	r3, #4
 80065fe:	2b06      	cmp	r3, #6
 8006600:	d902      	bls.n	8006608 <NVIC_EncodePriority+0x30>
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	3b03      	subs	r3, #3
 8006606:	e000      	b.n	800660a <NVIC_EncodePriority+0x32>
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	43da      	mvns	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	401a      	ands	r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006620:	f04f 31ff 	mov.w	r1, #4294967295
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	fa01 f303 	lsl.w	r3, r1, r3
 800662a:	43d9      	mvns	r1, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006630:	4313      	orrs	r3, r2
         );
}
 8006632:	4618      	mov	r0, r3
 8006634:	3724      	adds	r7, #36	; 0x24
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff4c 	bl	80064e4 <__NVIC_SetPriorityGrouping>
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006666:	f7ff ff61 	bl	800652c <__NVIC_GetPriorityGrouping>
 800666a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	6978      	ldr	r0, [r7, #20]
 8006672:	f7ff ffb1 	bl	80065d8 <NVIC_EncodePriority>
 8006676:	4602      	mov	r2, r0
 8006678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff ff80 	bl	8006584 <__NVIC_SetPriority>
}
 8006684:	bf00      	nop
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff ff54 	bl	8006548 <__NVIC_EnableIRQ>
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d008      	beq.n	80066d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2204      	movs	r2, #4
 80066c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e040      	b.n	8006754 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 020e 	bic.w	r2, r2, #14
 80066e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f003 021c 	and.w	r2, r3, #28
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	2101      	movs	r1, #1
 8006710:	fa01 f202 	lsl.w	r2, r1, r2
 8006714:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800671e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00c      	beq.n	8006742 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006736:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006740:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d005      	beq.n	8006784 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2204      	movs	r2, #4
 800677c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
 8006782:	e047      	b.n	8006814 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 020e 	bic.w	r2, r2, #14
 8006792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b8:	f003 021c 	and.w	r2, r3, #28
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f202 	lsl.w	r2, r1, r2
 80067c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80067f2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
    }
  }
  return status;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006832:	4b2f      	ldr	r3, [pc, #188]	; (80068f0 <HAL_FLASH_Program+0xd0>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_FLASH_Program+0x1e>
 800683a:	2302      	movs	r3, #2
 800683c:	e053      	b.n	80068e6 <HAL_FLASH_Program+0xc6>
 800683e:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <HAL_FLASH_Program+0xd0>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006844:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006848:	f000 f894 	bl	8006974 <FLASH_WaitForLastOperation>
 800684c:	4603      	mov	r3, r0
 800684e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d143      	bne.n	80068de <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006856:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <HAL_FLASH_Program+0xd0>)
 8006858:	2200      	movs	r2, #0
 800685a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800685c:	4b25      	ldr	r3, [pc, #148]	; (80068f4 <HAL_FLASH_Program+0xd4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006868:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <HAL_FLASH_Program+0xd4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <HAL_FLASH_Program+0xd4>)
 800686e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006872:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006874:	4b1e      	ldr	r3, [pc, #120]	; (80068f0 <HAL_FLASH_Program+0xd0>)
 8006876:	2202      	movs	r2, #2
 8006878:	771a      	strb	r2, [r3, #28]
 800687a:	e002      	b.n	8006882 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800687c:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <HAL_FLASH_Program+0xd0>)
 800687e:	2200      	movs	r2, #0
 8006880:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d107      	bne.n	8006898 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f000 f8c9 	bl	8006a24 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006892:	2301      	movs	r3, #1
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	e010      	b.n	80068ba <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d002      	beq.n	80068a4 <HAL_FLASH_Program+0x84>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d10a      	bne.n	80068ba <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4619      	mov	r1, r3
 80068a8:	68b8      	ldr	r0, [r7, #8]
 80068aa:	f000 f8e1 	bl	8006a70 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d102      	bne.n	80068ba <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80068b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068b8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068be:	f000 f859 	bl	8006974 <FLASH_WaitForLastOperation>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <HAL_FLASH_Program+0xd4>)
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	43db      	mvns	r3, r3
 80068d4:	4907      	ldr	r1, [pc, #28]	; (80068f4 <HAL_FLASH_Program+0xd4>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80068da:	f000 fa17 	bl	8006d0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <HAL_FLASH_Program+0xd0>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	701a      	strb	r2, [r3, #0]

  return status;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000048 	.word	0x20000048
 80068f4:	40022000 	.word	0x40022000

080068f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_FLASH_Unlock+0x38>)
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	da0b      	bge.n	8006922 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <HAL_FLASH_Unlock+0x38>)
 800690c:	4a09      	ldr	r2, [pc, #36]	; (8006934 <HAL_FLASH_Unlock+0x3c>)
 800690e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <HAL_FLASH_Unlock+0x38>)
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <HAL_FLASH_Unlock+0x40>)
 8006914:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_FLASH_Unlock+0x38>)
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da01      	bge.n	8006922 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006922:	79fb      	ldrb	r3, [r7, #7]
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	40022000 	.word	0x40022000
 8006934:	45670123 	.word	0x45670123
 8006938:	cdef89ab 	.word	0xcdef89ab

0800693c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <HAL_FLASH_Lock+0x1c>)
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	4a04      	ldr	r2, [pc, #16]	; (8006958 <HAL_FLASH_Lock+0x1c>)
 8006946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800694a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40022000 	.word	0x40022000

0800695c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006960:	4b03      	ldr	r3, [pc, #12]	; (8006970 <HAL_FLASH_GetError+0x14>)
 8006962:	685b      	ldr	r3, [r3, #4]
}
 8006964:	4618      	mov	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20000048 	.word	0x20000048

08006974 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800697c:	f7ff fd82 	bl	8006484 <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006982:	e00d      	b.n	80069a0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d009      	beq.n	80069a0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800698c:	f7ff fd7a 	bl	8006484 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d801      	bhi.n	80069a0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e036      	b.n	8006a0e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80069a0:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <FLASH_WaitForLastOperation+0xa4>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1eb      	bne.n	8006984 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80069ac:	4b1a      	ldr	r3, [pc, #104]	; (8006a18 <FLASH_WaitForLastOperation+0xa4>)
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01e      	beq.n	80069fa <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80069bc:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <FLASH_WaitForLastOperation+0xac>)
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <FLASH_WaitForLastOperation+0xac>)
 80069c6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <FLASH_WaitForLastOperation+0x6e>
 80069d2:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <FLASH_WaitForLastOperation+0xa4>)
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069dc:	490e      	ldr	r1, [pc, #56]	; (8006a18 <FLASH_WaitForLastOperation+0xa4>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	618b      	str	r3, [r1, #24]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <FLASH_WaitForLastOperation+0x82>
 80069ec:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <FLASH_WaitForLastOperation+0xa4>)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069f4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e009      	b.n	8006a0e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <FLASH_WaitForLastOperation+0xa4>)
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a06:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <FLASH_WaitForLastOperation+0xa4>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40022000 	.word	0x40022000
 8006a1c:	0002c3fa 	.word	0x0002c3fa
 8006a20:	20000048 	.word	0x20000048

08006a24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a30:	4b0e      	ldr	r3, [pc, #56]	; (8006a6c <FLASH_Program_DoubleWord+0x48>)
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	4a0d      	ldr	r2, [pc, #52]	; (8006a6c <FLASH_Program_DoubleWord+0x48>)
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006a42:	f3bf 8f6f 	isb	sy
}
 8006a46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	000a      	movs	r2, r1
 8006a56:	2300      	movs	r3, #0
 8006a58:	68f9      	ldr	r1, [r7, #12]
 8006a5a:	3104      	adds	r1, #4
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	600b      	str	r3, [r1, #0]
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40022000 	.word	0x40022000

08006a70 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b089      	sub	sp, #36	; 0x24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006a7a:	2380      	movs	r3, #128	; 0x80
 8006a7c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <FLASH_Program_Fast+0x68>)
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <FLASH_Program_Fast+0x68>)
 8006a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a92:	f3ef 8310 	mrs	r3, PRIMASK
 8006a96:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a98:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a9c:	b672      	cpsid	i
}
 8006a9e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	617b      	str	r3, [r7, #20]
    row_index--;
 8006ab4:	7ffb      	ldrb	r3, [r7, #31]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006aba:	7ffb      	ldrb	r3, [r7, #31]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ef      	bne.n	8006aa0 <FLASH_Program_Fast+0x30>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f383 8810 	msr	PRIMASK, r3
}
 8006aca:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006acc:	bf00      	nop
 8006ace:	3724      	adds	r7, #36	; 0x24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40022000 	.word	0x40022000

08006adc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006ae6:	4b49      	ldr	r3, [pc, #292]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_FLASHEx_Erase+0x16>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e087      	b.n	8006c02 <HAL_FLASHEx_Erase+0x126>
 8006af2:	4b46      	ldr	r3, [pc, #280]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006af8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006afc:	f7ff ff3a 	bl	8006974 <FLASH_WaitForLastOperation>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d177      	bne.n	8006bfa <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b0a:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006b10:	4b3f      	ldr	r3, [pc, #252]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d013      	beq.n	8006b44 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b1c:	4b3c      	ldr	r3, [pc, #240]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a38      	ldr	r2, [pc, #224]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b32:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006b34:	4b35      	ldr	r3, [pc, #212]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006b36:	2203      	movs	r2, #3
 8006b38:	771a      	strb	r2, [r3, #28]
 8006b3a:	e016      	b.n	8006b6a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006b3c:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	771a      	strb	r2, [r3, #28]
 8006b42:	e012      	b.n	8006b6a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b44:	4b32      	ldr	r3, [pc, #200]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b50:	4b2f      	ldr	r3, [pc, #188]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a2e      	ldr	r2, [pc, #184]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b5a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006b5e:	2202      	movs	r2, #2
 8006b60:	771a      	strb	r2, [r3, #28]
 8006b62:	e002      	b.n	8006b6a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006b64:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d113      	bne.n	8006b9a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f84c 	bl	8006c14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b80:	f7ff fef8 	bl	8006974 <FLASH_WaitForLastOperation>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006b88:	4b21      	ldr	r3, [pc, #132]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	4a20      	ldr	r2, [pc, #128]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006b8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b92:	f023 0304 	bic.w	r3, r3, #4
 8006b96:	6153      	str	r3, [r2, #20]
 8006b98:	e02d      	b.n	8006bf6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	e01d      	b.n	8006be6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68b8      	ldr	r0, [r7, #8]
 8006bb2:	f000 f867 	bl	8006c84 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006bb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bba:	f7ff fedb 	bl	8006974 <FLASH_WaitForLastOperation>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4a12      	ldr	r2, [pc, #72]	; (8006c10 <HAL_FLASHEx_Erase+0x134>)
 8006bc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bcc:	f023 0302 	bic.w	r3, r3, #2
 8006bd0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	601a      	str	r2, [r3, #0]
          break;
 8006bde:	e00a      	b.n	8006bf6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d3d9      	bcc.n	8006baa <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006bf6:	f000 f889 	bl	8006d0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <HAL_FLASHEx_Erase+0x130>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]

  return status;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000048 	.word	0x20000048
 8006c10:	40022000 	.word	0x40022000

08006c14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8006c1c:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d016      	beq.n	8006c56 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006c32:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c38:	f043 0304 	orr.w	r3, r3, #4
 8006c3c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00e      	beq.n	8006c66 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c52:	6153      	str	r3, [r2, #20]
 8006c54:	e007      	b.n	8006c66 <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c60:	f043 0304 	orr.w	r3, r3, #4
 8006c64:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	4a05      	ldr	r2, [pc, #20]	; (8006c80 <FLASH_MassErase+0x6c>)
 8006c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c70:	6153      	str	r3, [r2, #20]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40022000 	.word	0x40022000

08006c84 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <FLASH_PageErase+0x84>)
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006c9a:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <FLASH_PageErase+0x84>)
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	4a1a      	ldr	r2, [pc, #104]	; (8006d08 <FLASH_PageErase+0x84>)
 8006ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca4:	6153      	str	r3, [r2, #20]
 8006ca6:	e011      	b.n	8006ccc <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d006      	beq.n	8006cc0 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	4a14      	ldr	r2, [pc, #80]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cbc:	6153      	str	r3, [r2, #20]
 8006cbe:	e005      	b.n	8006ccc <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006cc0:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cca:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006cdc:	490a      	ldr	r1, [pc, #40]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <FLASH_PageErase+0x84>)
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <FLASH_PageErase+0x84>)
 8006ce8:	f043 0302 	orr.w	r3, r3, #2
 8006cec:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	4a05      	ldr	r2, [pc, #20]	; (8006d08 <FLASH_PageErase+0x84>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf8:	6153      	str	r3, [r2, #20]
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40022000 	.word	0x40022000

08006d0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006d12:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <FLASH_FlushCaches+0x8c>)
 8006d14:	7f1b      	ldrb	r3, [r3, #28]
 8006d16:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d002      	beq.n	8006d24 <FLASH_FlushCaches+0x18>
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d117      	bne.n	8006d54 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006d24:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006d30:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a19      	ldr	r2, [pc, #100]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a16      	ldr	r2, [pc, #88]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d52:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d002      	beq.n	8006d60 <FLASH_FlushCaches+0x54>
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d111      	bne.n	8006d84 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006d60:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0d      	ldr	r2, [pc, #52]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d76:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d78:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a07      	ldr	r2, [pc, #28]	; (8006d9c <FLASH_FlushCaches+0x90>)
 8006d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d82:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006d84:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <FLASH_FlushCaches+0x8c>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	771a      	strb	r2, [r3, #28]
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000048 	.word	0x20000048
 8006d9c:	40022000 	.word	0x40022000

08006da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dae:	e166      	b.n	800707e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	2101      	movs	r1, #1
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 8158 	beq.w	8007078 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d005      	beq.n	8006de0 <HAL_GPIO_Init+0x40>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d130      	bne.n	8006e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	2203      	movs	r2, #3
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	43db      	mvns	r3, r3
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4013      	ands	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e16:	2201      	movs	r2, #1
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4013      	ands	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	091b      	lsrs	r3, r3, #4
 8006e2c:	f003 0201 	and.w	r2, r3, #1
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d017      	beq.n	8006e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	2203      	movs	r2, #3
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	43db      	mvns	r3, r3
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4013      	ands	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d123      	bne.n	8006ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	08da      	lsrs	r2, r3, #3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3208      	adds	r2, #8
 8006e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	220f      	movs	r2, #15
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	43db      	mvns	r3, r3
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	08da      	lsrs	r2, r3, #3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3208      	adds	r2, #8
 8006ecc:	6939      	ldr	r1, [r7, #16]
 8006ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	2203      	movs	r2, #3
 8006ede:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f003 0203 	and.w	r2, r3, #3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80b2 	beq.w	8007078 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <HAL_GPIO_Init+0x2fc>)
 8006f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f18:	4a60      	ldr	r2, [pc, #384]	; (800709c <HAL_GPIO_Init+0x2fc>)
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8006f20:	4b5e      	ldr	r3, [pc, #376]	; (800709c <HAL_GPIO_Init+0x2fc>)
 8006f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006f2c:	4a5c      	ldr	r2, [pc, #368]	; (80070a0 <HAL_GPIO_Init+0x300>)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	089b      	lsrs	r3, r3, #2
 8006f32:	3302      	adds	r3, #2
 8006f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	220f      	movs	r2, #15
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f56:	d02b      	beq.n	8006fb0 <HAL_GPIO_Init+0x210>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a52      	ldr	r2, [pc, #328]	; (80070a4 <HAL_GPIO_Init+0x304>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d025      	beq.n	8006fac <HAL_GPIO_Init+0x20c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a51      	ldr	r2, [pc, #324]	; (80070a8 <HAL_GPIO_Init+0x308>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d01f      	beq.n	8006fa8 <HAL_GPIO_Init+0x208>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a50      	ldr	r2, [pc, #320]	; (80070ac <HAL_GPIO_Init+0x30c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d019      	beq.n	8006fa4 <HAL_GPIO_Init+0x204>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a4f      	ldr	r2, [pc, #316]	; (80070b0 <HAL_GPIO_Init+0x310>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <HAL_GPIO_Init+0x200>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a4e      	ldr	r2, [pc, #312]	; (80070b4 <HAL_GPIO_Init+0x314>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00d      	beq.n	8006f9c <HAL_GPIO_Init+0x1fc>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a4d      	ldr	r2, [pc, #308]	; (80070b8 <HAL_GPIO_Init+0x318>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d007      	beq.n	8006f98 <HAL_GPIO_Init+0x1f8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a4c      	ldr	r2, [pc, #304]	; (80070bc <HAL_GPIO_Init+0x31c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d101      	bne.n	8006f94 <HAL_GPIO_Init+0x1f4>
 8006f90:	2307      	movs	r3, #7
 8006f92:	e00e      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006f94:	2308      	movs	r3, #8
 8006f96:	e00c      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006f98:	2306      	movs	r3, #6
 8006f9a:	e00a      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006f9c:	2305      	movs	r3, #5
 8006f9e:	e008      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	e006      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e004      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e002      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	f002 0203 	and.w	r2, r2, #3
 8006fb8:	0092      	lsls	r2, r2, #2
 8006fba:	4093      	lsls	r3, r2
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006fc2:	4937      	ldr	r1, [pc, #220]	; (80070a0 <HAL_GPIO_Init+0x300>)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	3302      	adds	r3, #2
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fd0:	4b3b      	ldr	r3, [pc, #236]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ff4:	4a32      	ldr	r2, [pc, #200]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ffa:	4b31      	ldr	r3, [pc, #196]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	43db      	mvns	r3, r3
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4013      	ands	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800701e:	4a28      	ldr	r2, [pc, #160]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007024:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	43db      	mvns	r3, r3
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4013      	ands	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007048:	4a1d      	ldr	r2, [pc, #116]	; (80070c0 <HAL_GPIO_Init+0x320>)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800704e:	4b1c      	ldr	r3, [pc, #112]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	43db      	mvns	r3, r3
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4013      	ands	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007072:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	3301      	adds	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	f47f ae91 	bne.w	8006db0 <HAL_GPIO_Init+0x10>
  }
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40021000 	.word	0x40021000
 80070a0:	40010000 	.word	0x40010000
 80070a4:	48000400 	.word	0x48000400
 80070a8:	48000800 	.word	0x48000800
 80070ac:	48000c00 	.word	0x48000c00
 80070b0:	48001000 	.word	0x48001000
 80070b4:	48001400 	.word	0x48001400
 80070b8:	48001800 	.word	0x48001800
 80070bc:	48001c00 	.word	0x48001c00
 80070c0:	40010400 	.word	0x40010400

080070c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	807b      	strh	r3, [r7, #2]
 80070d0:	4613      	mov	r3, r2
 80070d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070d4:	787b      	ldrb	r3, [r7, #1]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070e0:	e002      	b.n	80070e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070e2:	887a      	ldrh	r2, [r7, #2]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007106:	887a      	ldrh	r2, [r7, #2]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4013      	ands	r3, r2
 800710c:	041a      	lsls	r2, r3, #16
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	43d9      	mvns	r1, r3
 8007112:	887b      	ldrh	r3, [r7, #2]
 8007114:	400b      	ands	r3, r1
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	619a      	str	r2, [r3, #24]
}
 800711c:	bf00      	nop
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007132:	4b08      	ldr	r3, [pc, #32]	; (8007154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007134:	695a      	ldr	r2, [r3, #20]
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	4013      	ands	r3, r2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d006      	beq.n	800714c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800713e:	4a05      	ldr	r2, [pc, #20]	; (8007154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007140:	88fb      	ldrh	r3, [r7, #6]
 8007142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f806 	bl	8007158 <HAL_GPIO_EXTI_Callback>
  }
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40010400 	.word	0x40010400

08007158 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e081      	b.n	8007284 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fe fb33 	bl	8005800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2224      	movs	r2, #36	; 0x24
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0201 	bic.w	r2, r2, #1
 80071b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d107      	bne.n	80071e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071e4:	609a      	str	r2, [r3, #8]
 80071e6:	e006      	b.n	80071f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d104      	bne.n	8007208 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007206:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800722a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69d9      	ldr	r1, [r3, #28]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1a      	ldr	r2, [r3, #32]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	461a      	mov	r2, r3
 8007298:	460b      	mov	r3, r1
 800729a:	817b      	strh	r3, [r7, #10]
 800729c:	4613      	mov	r3, r2
 800729e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	f040 80da 	bne.w	8007462 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_I2C_Master_Transmit+0x30>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e0d3      	b.n	8007464 <HAL_I2C_Master_Transmit+0x1d8>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072c4:	f7ff f8de 	bl	8006484 <HAL_GetTick>
 80072c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2319      	movs	r3, #25
 80072d0:	2201      	movs	r2, #1
 80072d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fcd6 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e0be      	b.n	8007464 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2221      	movs	r2, #33	; 0x21
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2210      	movs	r2, #16
 80072f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	893a      	ldrh	r2, [r7, #8]
 8007306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007312:	b29b      	uxth	r3, r3
 8007314:	2bff      	cmp	r3, #255	; 0xff
 8007316:	d90e      	bls.n	8007336 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	22ff      	movs	r2, #255	; 0xff
 800731c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007322:	b2da      	uxtb	r2, r3
 8007324:	8979      	ldrh	r1, [r7, #10]
 8007326:	4b51      	ldr	r3, [pc, #324]	; (800746c <HAL_I2C_Master_Transmit+0x1e0>)
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fecc 	bl	80080cc <I2C_TransferConfig>
 8007334:	e06c      	b.n	8007410 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	b2da      	uxtb	r2, r3
 8007346:	8979      	ldrh	r1, [r7, #10]
 8007348:	4b48      	ldr	r3, [pc, #288]	; (800746c <HAL_I2C_Master_Transmit+0x1e0>)
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 febb 	bl	80080cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007356:	e05b      	b.n	8007410 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	6a39      	ldr	r1, [r7, #32]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fcd3 	bl	8007d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e07b      	b.n	8007464 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d034      	beq.n	8007410 <HAL_I2C_Master_Transmit+0x184>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d130      	bne.n	8007410 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	2200      	movs	r2, #0
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 fc65 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e04d      	b.n	8007464 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2bff      	cmp	r3, #255	; 0xff
 80073d0:	d90e      	bls.n	80073f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	22ff      	movs	r2, #255	; 0xff
 80073d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	8979      	ldrh	r1, [r7, #10]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fe6f 	bl	80080cc <I2C_TransferConfig>
 80073ee:	e00f      	b.n	8007410 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	8979      	ldrh	r1, [r7, #10]
 8007402:	2300      	movs	r3, #0
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fe5e 	bl	80080cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d19e      	bne.n	8007358 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	6a39      	ldr	r1, [r7, #32]
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fcb2 	bl	8007d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e01a      	b.n	8007464 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2220      	movs	r2, #32
 8007434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6859      	ldr	r1, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <HAL_I2C_Master_Transmit+0x1e4>)
 8007442:	400b      	ands	r3, r1
 8007444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	e000      	b.n	8007464 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007462:	2302      	movs	r3, #2
  }
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	80002000 	.word	0x80002000
 8007470:	fe00e800 	.word	0xfe00e800

08007474 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af02      	add	r7, sp, #8
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	461a      	mov	r2, r3
 8007480:	460b      	mov	r3, r1
 8007482:	817b      	strh	r3, [r7, #10]
 8007484:	4613      	mov	r3, r2
 8007486:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b20      	cmp	r3, #32
 8007492:	f040 80db 	bne.w	800764c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_I2C_Master_Receive+0x30>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e0d4      	b.n	800764e <HAL_I2C_Master_Receive+0x1da>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074ac:	f7fe ffea 	bl	8006484 <HAL_GetTick>
 80074b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2319      	movs	r3, #25
 80074b8:	2201      	movs	r2, #1
 80074ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fbe2 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e0bf      	b.n	800764e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2222      	movs	r2, #34	; 0x22
 80074d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2210      	movs	r2, #16
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	893a      	ldrh	r2, [r7, #8]
 80074ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2bff      	cmp	r3, #255	; 0xff
 80074fe:	d90e      	bls.n	800751e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	22ff      	movs	r2, #255	; 0xff
 8007504:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750a:	b2da      	uxtb	r2, r3
 800750c:	8979      	ldrh	r1, [r7, #10]
 800750e:	4b52      	ldr	r3, [pc, #328]	; (8007658 <HAL_I2C_Master_Receive+0x1e4>)
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fdd8 	bl	80080cc <I2C_TransferConfig>
 800751c:	e06d      	b.n	80075fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007522:	b29a      	uxth	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	b2da      	uxtb	r2, r3
 800752e:	8979      	ldrh	r1, [r7, #10]
 8007530:	4b49      	ldr	r3, [pc, #292]	; (8007658 <HAL_I2C_Master_Receive+0x1e4>)
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 fdc7 	bl	80080cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800753e:	e05c      	b.n	80075fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	6a39      	ldr	r1, [r7, #32]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fc5b 	bl	8007e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e07c      	b.n	800764e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d034      	beq.n	80075fa <HAL_I2C_Master_Receive+0x186>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d130      	bne.n	80075fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	2200      	movs	r2, #0
 80075a0:	2180      	movs	r1, #128	; 0x80
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fb70 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e04d      	b.n	800764e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2bff      	cmp	r3, #255	; 0xff
 80075ba:	d90e      	bls.n	80075da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	22ff      	movs	r2, #255	; 0xff
 80075c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	8979      	ldrh	r1, [r7, #10]
 80075ca:	2300      	movs	r3, #0
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fd7a 	bl	80080cc <I2C_TransferConfig>
 80075d8:	e00f      	b.n	80075fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	8979      	ldrh	r1, [r7, #10]
 80075ec:	2300      	movs	r3, #0
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fd69 	bl	80080cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d19d      	bne.n	8007540 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	6a39      	ldr	r1, [r7, #32]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fbbd 	bl	8007d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e01a      	b.n	800764e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2220      	movs	r2, #32
 800761e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6859      	ldr	r1, [r3, #4]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4b0c      	ldr	r3, [pc, #48]	; (800765c <HAL_I2C_Master_Receive+0x1e8>)
 800762c:	400b      	ands	r3, r1
 800762e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e000      	b.n	800764e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	80002400 	.word	0x80002400
 800765c:	fe00e800 	.word	0xfe00e800

08007660 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af02      	add	r7, sp, #8
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	4608      	mov	r0, r1
 800766a:	4611      	mov	r1, r2
 800766c:	461a      	mov	r2, r3
 800766e:	4603      	mov	r3, r0
 8007670:	817b      	strh	r3, [r7, #10]
 8007672:	460b      	mov	r3, r1
 8007674:	813b      	strh	r3, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b20      	cmp	r3, #32
 8007684:	f040 80f9 	bne.w	800787a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_I2C_Mem_Write+0x34>
 800768e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800769a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e0ed      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_I2C_Mem_Write+0x4e>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e0e6      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076b6:	f7fe fee5 	bl	8006484 <HAL_GetTick>
 80076ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	2319      	movs	r3, #25
 80076c2:	2201      	movs	r2, #1
 80076c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fadd 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0d1      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2221      	movs	r2, #33	; 0x21
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2240      	movs	r2, #64	; 0x40
 80076e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a3a      	ldr	r2, [r7, #32]
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007700:	88f8      	ldrh	r0, [r7, #6]
 8007702:	893a      	ldrh	r2, [r7, #8]
 8007704:	8979      	ldrh	r1, [r7, #10]
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4603      	mov	r3, r0
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f9ed 	bl	8007af0 <I2C_RequestMemoryWrite>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e0a9      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	2bff      	cmp	r3, #255	; 0xff
 8007730:	d90e      	bls.n	8007750 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	22ff      	movs	r2, #255	; 0xff
 8007736:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773c:	b2da      	uxtb	r2, r3
 800773e:	8979      	ldrh	r1, [r7, #10]
 8007740:	2300      	movs	r3, #0
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fcbf 	bl	80080cc <I2C_TransferConfig>
 800774e:	e00f      	b.n	8007770 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775e:	b2da      	uxtb	r2, r3
 8007760:	8979      	ldrh	r1, [r7, #10]
 8007762:	2300      	movs	r3, #0
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fcae 	bl	80080cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fac7 	bl	8007d08 <I2C_WaitOnTXISFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e07b      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d034      	beq.n	8007828 <HAL_I2C_Mem_Write+0x1c8>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d130      	bne.n	8007828 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	2200      	movs	r2, #0
 80077ce:	2180      	movs	r1, #128	; 0x80
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fa59 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e04d      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2bff      	cmp	r3, #255	; 0xff
 80077e8:	d90e      	bls.n	8007808 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	22ff      	movs	r2, #255	; 0xff
 80077ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	8979      	ldrh	r1, [r7, #10]
 80077f8:	2300      	movs	r3, #0
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fc63 	bl	80080cc <I2C_TransferConfig>
 8007806:	e00f      	b.n	8007828 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007816:	b2da      	uxtb	r2, r3
 8007818:	8979      	ldrh	r1, [r7, #10]
 800781a:	2300      	movs	r3, #0
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fc52 	bl	80080cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d19e      	bne.n	8007770 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 faa6 	bl	8007d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e01a      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2220      	movs	r2, #32
 800784c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6859      	ldr	r1, [r3, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <HAL_I2C_Mem_Write+0x224>)
 800785a:	400b      	ands	r3, r1
 800785c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e000      	b.n	800787c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	fe00e800 	.word	0xfe00e800

08007888 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	4603      	mov	r3, r0
 8007898:	817b      	strh	r3, [r7, #10]
 800789a:	460b      	mov	r3, r1
 800789c:	813b      	strh	r3, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	f040 80fd 	bne.w	8007aaa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <HAL_I2C_Mem_Read+0x34>
 80078b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d105      	bne.n	80078c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e0f1      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <HAL_I2C_Mem_Read+0x4e>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e0ea      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078de:	f7fe fdd1 	bl	8006484 <HAL_GetTick>
 80078e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	2319      	movs	r3, #25
 80078ea:	2201      	movs	r2, #1
 80078ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f9c9 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0d5      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2222      	movs	r2, #34	; 0x22
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2240      	movs	r2, #64	; 0x40
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007928:	88f8      	ldrh	r0, [r7, #6]
 800792a:	893a      	ldrh	r2, [r7, #8]
 800792c:	8979      	ldrh	r1, [r7, #10]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	4603      	mov	r3, r0
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f92d 	bl	8007b98 <I2C_RequestMemoryRead>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0ad      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007954:	b29b      	uxth	r3, r3
 8007956:	2bff      	cmp	r3, #255	; 0xff
 8007958:	d90e      	bls.n	8007978 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007964:	b2da      	uxtb	r2, r3
 8007966:	8979      	ldrh	r1, [r7, #10]
 8007968:	4b52      	ldr	r3, [pc, #328]	; (8007ab4 <HAL_I2C_Mem_Read+0x22c>)
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fbab 	bl	80080cc <I2C_TransferConfig>
 8007976:	e00f      	b.n	8007998 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007986:	b2da      	uxtb	r2, r3
 8007988:	8979      	ldrh	r1, [r7, #10]
 800798a:	4b4a      	ldr	r3, [pc, #296]	; (8007ab4 <HAL_I2C_Mem_Read+0x22c>)
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fb9a 	bl	80080cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	2200      	movs	r2, #0
 80079a0:	2104      	movs	r1, #4
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f970 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e07c      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d034      	beq.n	8007a58 <HAL_I2C_Mem_Read+0x1d0>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d130      	bne.n	8007a58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	2200      	movs	r2, #0
 80079fe:	2180      	movs	r1, #128	; 0x80
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f941 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e04d      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2bff      	cmp	r3, #255	; 0xff
 8007a18:	d90e      	bls.n	8007a38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	22ff      	movs	r2, #255	; 0xff
 8007a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	8979      	ldrh	r1, [r7, #10]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fb4b 	bl	80080cc <I2C_TransferConfig>
 8007a36:	e00f      	b.n	8007a58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	8979      	ldrh	r1, [r7, #10]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fb3a 	bl	80080cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d19a      	bne.n	8007998 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f98e 	bl	8007d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e01a      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6859      	ldr	r1, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <HAL_I2C_Mem_Read+0x230>)
 8007a8a:	400b      	ands	r3, r1
 8007a8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e000      	b.n	8007aac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007aaa:	2302      	movs	r3, #2
  }
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	80002400 	.word	0x80002400
 8007ab8:	fe00e800 	.word	0xfe00e800

08007abc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	4608      	mov	r0, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	817b      	strh	r3, [r7, #10]
 8007b02:	460b      	mov	r3, r1
 8007b04:	813b      	strh	r3, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b0a:	88fb      	ldrh	r3, [r7, #6]
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	8979      	ldrh	r1, [r7, #10]
 8007b10:	4b20      	ldr	r3, [pc, #128]	; (8007b94 <I2C_RequestMemoryWrite+0xa4>)
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fad7 	bl	80080cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	69b9      	ldr	r1, [r7, #24]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f8f0 	bl	8007d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e02c      	b.n	8007b8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d105      	bne.n	8007b44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	629a      	str	r2, [r3, #40]	; 0x28
 8007b42:	e015      	b.n	8007b70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b44:	893b      	ldrh	r3, [r7, #8]
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	69b9      	ldr	r1, [r7, #24]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f8d6 	bl	8007d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e012      	b.n	8007b8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b66:	893b      	ldrh	r3, [r7, #8]
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2200      	movs	r2, #0
 8007b78:	2180      	movs	r1, #128	; 0x80
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f884 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	80002000 	.word	0x80002000

08007b98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	817b      	strh	r3, [r7, #10]
 8007baa:	460b      	mov	r3, r1
 8007bac:	813b      	strh	r3, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	8979      	ldrh	r1, [r7, #10]
 8007bb8:	4b20      	ldr	r3, [pc, #128]	; (8007c3c <I2C_RequestMemoryRead+0xa4>)
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fa84 	bl	80080cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	69b9      	ldr	r1, [r7, #24]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f89d 	bl	8007d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e02c      	b.n	8007c32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d105      	bne.n	8007bea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bde:	893b      	ldrh	r3, [r7, #8]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	629a      	str	r2, [r3, #40]	; 0x28
 8007be8:	e015      	b.n	8007c16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bea:	893b      	ldrh	r3, [r7, #8]
 8007bec:	0a1b      	lsrs	r3, r3, #8
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	69b9      	ldr	r1, [r7, #24]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f883 	bl	8007d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e012      	b.n	8007c32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c0c:	893b      	ldrh	r3, [r7, #8]
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2140      	movs	r1, #64	; 0x40
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f831 	bl	8007c88 <I2C_WaitOnFlagUntilTimeout>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	80002000 	.word	0x80002000

08007c40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d103      	bne.n	8007c5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d007      	beq.n	8007c7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	619a      	str	r2, [r3, #24]
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c98:	e022      	b.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d01e      	beq.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca2:	f7fe fbef 	bl	8006484 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d113      	bne.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbc:	f043 0220 	orr.w	r2, r3, #32
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e00f      	b.n	8007d00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699a      	ldr	r2, [r3, #24]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d0cd      	beq.n	8007c9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d14:	e02c      	b.n	8007d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f8ea 	bl	8007ef4 <I2C_IsErrorOccurred>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e02a      	b.n	8007d80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d30:	d01e      	beq.n	8007d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7fe fba7 	bl	8006484 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d113      	bne.n	8007d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4c:	f043 0220 	orr.w	r2, r3, #32
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e007      	b.n	8007d80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d1cb      	bne.n	8007d16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d94:	e028      	b.n	8007de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 f8aa 	bl	8007ef4 <I2C_IsErrorOccurred>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e026      	b.n	8007df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007daa:	f7fe fb6b 	bl	8006484 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d302      	bcc.n	8007dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d113      	bne.n	8007de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e007      	b.n	8007df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d1cf      	bne.n	8007d96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e0c:	e064      	b.n	8007ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f86e 	bl	8007ef4 <I2C_IsErrorOccurred>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e062      	b.n	8007ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d138      	bne.n	8007ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d105      	bne.n	8007e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e04e      	b.n	8007ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d107      	bne.n	8007e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2210      	movs	r2, #16
 8007e5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2204      	movs	r2, #4
 8007e64:	645a      	str	r2, [r3, #68]	; 0x44
 8007e66:	e002      	b.n	8007e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2220      	movs	r2, #32
 8007e74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6859      	ldr	r1, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	4b1b      	ldr	r3, [pc, #108]	; (8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007e82:	400b      	ands	r3, r1
 8007e84:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e022      	b.n	8007ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea2:	f7fe faef 	bl	8006484 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d302      	bcc.n	8007eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10f      	bne.n	8007ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e007      	b.n	8007ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d193      	bne.n	8007e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	fe00e800 	.word	0xfe00e800

08007ef4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f003 0310 	and.w	r3, r3, #16
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d075      	beq.n	800800c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2210      	movs	r2, #16
 8007f26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f28:	e056      	b.n	8007fd8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d052      	beq.n	8007fd8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f32:	f7fe faa7 	bl	8006484 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d302      	bcc.n	8007f48 <I2C_IsErrorOccurred+0x54>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d147      	bne.n	8007fd8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f6a:	d12e      	bne.n	8007fca <I2C_IsErrorOccurred+0xd6>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f72:	d02a      	beq.n	8007fca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007f74:	7cfb      	ldrb	r3, [r7, #19]
 8007f76:	2b20      	cmp	r3, #32
 8007f78:	d027      	beq.n	8007fca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f8a:	f7fe fa7b 	bl	8006484 <HAL_GetTick>
 8007f8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f90:	e01b      	b.n	8007fca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f92:	f7fe fa77 	bl	8006484 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b19      	cmp	r3, #25
 8007f9e:	d914      	bls.n	8007fca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa4:	f043 0220 	orr.w	r2, r3, #32
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d1dc      	bne.n	8007f92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f003 0320 	and.w	r3, r3, #32
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d003      	beq.n	8007fee <I2C_IsErrorOccurred+0xfa>
 8007fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d09d      	beq.n	8007f2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d103      	bne.n	8007ffe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	f043 0304 	orr.w	r3, r3, #4
 8008004:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800802e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	f043 0308 	orr.w	r3, r3, #8
 8008046:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	f043 0302 	orr.w	r3, r3, #2
 8008068:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008072:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800807a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800807e:	2b00      	cmp	r3, #0
 8008080:	d01c      	beq.n	80080bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff fddc 	bl	8007c40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6859      	ldr	r1, [r3, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <I2C_IsErrorOccurred+0x1d4>)
 8008094:	400b      	ands	r3, r1
 8008096:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	431a      	orrs	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80080bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3728      	adds	r7, #40	; 0x28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	fe00e800 	.word	0xfe00e800

080080cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	607b      	str	r3, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	817b      	strh	r3, [r7, #10]
 80080da:	4613      	mov	r3, r2
 80080dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080de:	897b      	ldrh	r3, [r7, #10]
 80080e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080e4:	7a7b      	ldrb	r3, [r7, #9]
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	0d5b      	lsrs	r3, r3, #21
 8008106:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800810a:	4b08      	ldr	r3, [pc, #32]	; (800812c <I2C_TransferConfig+0x60>)
 800810c:	430b      	orrs	r3, r1
 800810e:	43db      	mvns	r3, r3
 8008110:	ea02 0103 	and.w	r1, r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800811e:	bf00      	nop
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	03ff63ff 	.word	0x03ff63ff

08008130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b20      	cmp	r3, #32
 8008144:	d138      	bne.n	80081b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008150:	2302      	movs	r3, #2
 8008152:	e032      	b.n	80081ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2224      	movs	r2, #36	; 0x24
 8008160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6819      	ldr	r1, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0201 	orr.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e000      	b.n	80081ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d139      	bne.n	8008250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e033      	b.n	8008252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2224      	movs	r2, #36	; 0x24
 80081f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008218:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0201 	orr.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	e000      	b.n	8008252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008250:	2302      	movs	r3, #2
  }
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
	...

08008260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <HAL_PWREx_GetVoltageRange+0x3c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800826c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008270:	d102      	bne.n	8008278 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008276:	e00b      	b.n	8008290 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008278:	4b08      	ldr	r3, [pc, #32]	; (800829c <HAL_PWREx_GetVoltageRange+0x3c>)
 800827a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008286:	d102      	bne.n	800828e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800828c:	e000      	b.n	8008290 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800828e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008290:	4618      	mov	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40007000 	.word	0x40007000

080082a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d141      	bne.n	8008332 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80082ae:	4b4b      	ldr	r3, [pc, #300]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ba:	d131      	bne.n	8008320 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082bc:	4b47      	ldr	r3, [pc, #284]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082c2:	4a46      	ldr	r2, [pc, #280]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082cc:	4b43      	ldr	r3, [pc, #268]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082d4:	4a41      	ldr	r2, [pc, #260]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80082dc:	4b40      	ldr	r3, [pc, #256]	; (80083e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2232      	movs	r2, #50	; 0x32
 80082e2:	fb02 f303 	mul.w	r3, r2, r3
 80082e6:	4a3f      	ldr	r2, [pc, #252]	; (80083e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80082e8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ec:	0c9b      	lsrs	r3, r3, #18
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082f2:	e002      	b.n	80082fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082fa:	4b38      	ldr	r3, [pc, #224]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008306:	d102      	bne.n	800830e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f2      	bne.n	80082f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800830e:	4b33      	ldr	r3, [pc, #204]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800831a:	d158      	bne.n	80083ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e057      	b.n	80083d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008320:	4b2e      	ldr	r3, [pc, #184]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008326:	4a2d      	ldr	r2, [pc, #180]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800832c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008330:	e04d      	b.n	80083ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008338:	d141      	bne.n	80083be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800833a:	4b28      	ldr	r3, [pc, #160]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008346:	d131      	bne.n	80083ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008348:	4b24      	ldr	r3, [pc, #144]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800834a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800834e:	4a23      	ldr	r2, [pc, #140]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008354:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008358:	4b20      	ldr	r3, [pc, #128]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008360:	4a1e      	ldr	r2, [pc, #120]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008366:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008368:	4b1d      	ldr	r3, [pc, #116]	; (80083e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2232      	movs	r2, #50	; 0x32
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	4a1c      	ldr	r2, [pc, #112]	; (80083e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008374:	fba2 2303 	umull	r2, r3, r2, r3
 8008378:	0c9b      	lsrs	r3, r3, #18
 800837a:	3301      	adds	r3, #1
 800837c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800837e:	e002      	b.n	8008386 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3b01      	subs	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008386:	4b15      	ldr	r3, [pc, #84]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008392:	d102      	bne.n	800839a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f2      	bne.n	8008380 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800839a:	4b10      	ldr	r3, [pc, #64]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a6:	d112      	bne.n	80083ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e011      	b.n	80083d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b2:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80083bc:	e007      	b.n	80083ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083c6:	4a05      	ldr	r2, [pc, #20]	; (80083dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	40007000 	.word	0x40007000
 80083e0:	2000003c 	.word	0x2000003c
 80083e4:	431bde83 	.word	0x431bde83

080083e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d102      	bne.n	80083fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f000 bc08 	b.w	8008c0c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083fc:	4b96      	ldr	r3, [pc, #600]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 030c 	and.w	r3, r3, #12
 8008404:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008406:	4b94      	ldr	r3, [pc, #592]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80e4 	beq.w	80085e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d007      	beq.n	8008434 <HAL_RCC_OscConfig+0x4c>
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	2b0c      	cmp	r3, #12
 8008428:	f040 808b 	bne.w	8008542 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2b01      	cmp	r3, #1
 8008430:	f040 8087 	bne.w	8008542 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008434:	4b88      	ldr	r3, [pc, #544]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_RCC_OscConfig+0x64>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e3df      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1a      	ldr	r2, [r3, #32]
 8008450:	4b81      	ldr	r3, [pc, #516]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0308 	and.w	r3, r3, #8
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <HAL_RCC_OscConfig+0x7e>
 800845c:	4b7e      	ldr	r3, [pc, #504]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008464:	e005      	b.n	8008472 <HAL_RCC_OscConfig+0x8a>
 8008466:	4b7c      	ldr	r3, [pc, #496]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008472:	4293      	cmp	r3, r2
 8008474:	d223      	bcs.n	80084be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fdfe 	bl	800907c <RCC_SetFlashLatencyFromMSIRange>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e3c0      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800848a:	4b73      	ldr	r3, [pc, #460]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a72      	ldr	r2, [pc, #456]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008490:	f043 0308 	orr.w	r3, r3, #8
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	4b70      	ldr	r3, [pc, #448]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	496d      	ldr	r1, [pc, #436]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084a8:	4b6b      	ldr	r3, [pc, #428]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	4968      	ldr	r1, [pc, #416]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	604b      	str	r3, [r1, #4]
 80084bc:	e025      	b.n	800850a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084be:	4b66      	ldr	r3, [pc, #408]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a65      	ldr	r2, [pc, #404]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084c4:	f043 0308 	orr.w	r3, r3, #8
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	4b63      	ldr	r3, [pc, #396]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	4960      	ldr	r1, [pc, #384]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084dc:	4b5e      	ldr	r3, [pc, #376]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	495b      	ldr	r1, [pc, #364]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fdbe 	bl	800907c <RCC_SetFlashLatencyFromMSIRange>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e380      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800850a:	f000 fcc1 	bl	8008e90 <HAL_RCC_GetSysClockFreq>
 800850e:	4602      	mov	r2, r0
 8008510:	4b51      	ldr	r3, [pc, #324]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	091b      	lsrs	r3, r3, #4
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	4950      	ldr	r1, [pc, #320]	; (800865c <HAL_RCC_OscConfig+0x274>)
 800851c:	5ccb      	ldrb	r3, [r1, r3]
 800851e:	f003 031f 	and.w	r3, r3, #31
 8008522:	fa22 f303 	lsr.w	r3, r2, r3
 8008526:	4a4e      	ldr	r2, [pc, #312]	; (8008660 <HAL_RCC_OscConfig+0x278>)
 8008528:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800852a:	4b4e      	ldr	r3, [pc, #312]	; (8008664 <HAL_RCC_OscConfig+0x27c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd fb52 	bl	8005bd8 <HAL_InitTick>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d052      	beq.n	80085e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	e364      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d032      	beq.n	80085b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800854a:	4b43      	ldr	r3, [pc, #268]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a42      	ldr	r2, [pc, #264]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008556:	f7fd ff95 	bl	8006484 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800855e:	f7fd ff91 	bl	8006484 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e34d      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008570:	4b39      	ldr	r3, [pc, #228]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800857c:	4b36      	ldr	r3, [pc, #216]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a35      	ldr	r2, [pc, #212]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008582:	f043 0308 	orr.w	r3, r3, #8
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4b33      	ldr	r3, [pc, #204]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	4930      	ldr	r1, [pc, #192]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008596:	4313      	orrs	r3, r2
 8008598:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800859a:	4b2f      	ldr	r3, [pc, #188]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	492b      	ldr	r1, [pc, #172]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	604b      	str	r3, [r1, #4]
 80085ae:	e01a      	b.n	80085e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085b0:	4b29      	ldr	r3, [pc, #164]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a28      	ldr	r2, [pc, #160]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085bc:	f7fd ff62 	bl	8006484 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085c4:	f7fd ff5e 	bl	8006484 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e31a      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085d6:	4b20      	ldr	r3, [pc, #128]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <HAL_RCC_OscConfig+0x1dc>
 80085e2:	e000      	b.n	80085e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d073      	beq.n	80086da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d005      	beq.n	8008604 <HAL_RCC_OscConfig+0x21c>
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b0c      	cmp	r3, #12
 80085fc:	d10e      	bne.n	800861c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b03      	cmp	r3, #3
 8008602:	d10b      	bne.n	800861c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008604:	4b14      	ldr	r3, [pc, #80]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d063      	beq.n	80086d8 <HAL_RCC_OscConfig+0x2f0>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d15f      	bne.n	80086d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e2f7      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008624:	d106      	bne.n	8008634 <HAL_RCC_OscConfig+0x24c>
 8008626:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a0b      	ldr	r2, [pc, #44]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800862c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e025      	b.n	8008680 <HAL_RCC_OscConfig+0x298>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800863c:	d114      	bne.n	8008668 <HAL_RCC_OscConfig+0x280>
 800863e:	4b06      	ldr	r3, [pc, #24]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a05      	ldr	r2, [pc, #20]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4b03      	ldr	r3, [pc, #12]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a02      	ldr	r2, [pc, #8]	; (8008658 <HAL_RCC_OscConfig+0x270>)
 8008650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e013      	b.n	8008680 <HAL_RCC_OscConfig+0x298>
 8008658:	40021000 	.word	0x40021000
 800865c:	08014d3c 	.word	0x08014d3c
 8008660:	2000003c 	.word	0x2000003c
 8008664:	20000040 	.word	0x20000040
 8008668:	4ba0      	ldr	r3, [pc, #640]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a9f      	ldr	r2, [pc, #636]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 800866e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	4b9d      	ldr	r3, [pc, #628]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a9c      	ldr	r2, [pc, #624]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 800867a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800867e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d013      	beq.n	80086b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008688:	f7fd fefc 	bl	8006484 <HAL_GetTick>
 800868c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800868e:	e008      	b.n	80086a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008690:	f7fd fef8 	bl	8006484 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b64      	cmp	r3, #100	; 0x64
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e2b4      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086a2:	4b92      	ldr	r3, [pc, #584]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0f0      	beq.n	8008690 <HAL_RCC_OscConfig+0x2a8>
 80086ae:	e014      	b.n	80086da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b0:	f7fd fee8 	bl	8006484 <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086b8:	f7fd fee4 	bl	8006484 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b64      	cmp	r3, #100	; 0x64
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e2a0      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086ca:	4b88      	ldr	r3, [pc, #544]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f0      	bne.n	80086b8 <HAL_RCC_OscConfig+0x2d0>
 80086d6:	e000      	b.n	80086da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d060      	beq.n	80087a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d005      	beq.n	80086f8 <HAL_RCC_OscConfig+0x310>
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	d119      	bne.n	8008726 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d116      	bne.n	8008726 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086f8:	4b7c      	ldr	r3, [pc, #496]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_RCC_OscConfig+0x328>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e27d      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008710:	4b76      	ldr	r3, [pc, #472]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	4973      	ldr	r1, [pc, #460]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008720:	4313      	orrs	r3, r2
 8008722:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008724:	e040      	b.n	80087a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d023      	beq.n	8008776 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800872e:	4b6f      	ldr	r3, [pc, #444]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a6e      	ldr	r2, [pc, #440]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873a:	f7fd fea3 	bl	8006484 <HAL_GetTick>
 800873e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008742:	f7fd fe9f 	bl	8006484 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e25b      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008754:	4b65      	ldr	r3, [pc, #404]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0f0      	beq.n	8008742 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008760:	4b62      	ldr	r3, [pc, #392]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	495f      	ldr	r1, [pc, #380]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008770:	4313      	orrs	r3, r2
 8008772:	604b      	str	r3, [r1, #4]
 8008774:	e018      	b.n	80087a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008776:	4b5d      	ldr	r3, [pc, #372]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a5c      	ldr	r2, [pc, #368]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 800877c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008782:	f7fd fe7f 	bl	8006484 <HAL_GetTick>
 8008786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800878a:	f7fd fe7b 	bl	8006484 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e237      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800879c:	4b53      	ldr	r3, [pc, #332]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0308 	and.w	r3, r3, #8
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d03c      	beq.n	800882e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01c      	beq.n	80087f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087bc:	4b4b      	ldr	r3, [pc, #300]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80087be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087c2:	4a4a      	ldr	r2, [pc, #296]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80087c4:	f043 0301 	orr.w	r3, r3, #1
 80087c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087cc:	f7fd fe5a 	bl	8006484 <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087d4:	f7fd fe56 	bl	8006484 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e212      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087e6:	4b41      	ldr	r3, [pc, #260]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80087e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0ef      	beq.n	80087d4 <HAL_RCC_OscConfig+0x3ec>
 80087f4:	e01b      	b.n	800882e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087f6:	4b3d      	ldr	r3, [pc, #244]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80087f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087fc:	4a3b      	ldr	r2, [pc, #236]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80087fe:	f023 0301 	bic.w	r3, r3, #1
 8008802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008806:	f7fd fe3d 	bl	8006484 <HAL_GetTick>
 800880a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800880c:	e008      	b.n	8008820 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800880e:	f7fd fe39 	bl	8006484 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e1f5      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008820:	4b32      	ldr	r3, [pc, #200]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1ef      	bne.n	800880e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0304 	and.w	r3, r3, #4
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 80a6 	beq.w	8008988 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800883c:	2300      	movs	r3, #0
 800883e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008840:	4b2a      	ldr	r3, [pc, #168]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10d      	bne.n	8008868 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800884c:	4b27      	ldr	r3, [pc, #156]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	4a26      	ldr	r2, [pc, #152]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 8008852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008856:	6593      	str	r3, [r2, #88]	; 0x58
 8008858:	4b24      	ldr	r3, [pc, #144]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 800885a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008860:	60bb      	str	r3, [r7, #8]
 8008862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008864:	2301      	movs	r3, #1
 8008866:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008868:	4b21      	ldr	r3, [pc, #132]	; (80088f0 <HAL_RCC_OscConfig+0x508>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008870:	2b00      	cmp	r3, #0
 8008872:	d118      	bne.n	80088a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008874:	4b1e      	ldr	r3, [pc, #120]	; (80088f0 <HAL_RCC_OscConfig+0x508>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1d      	ldr	r2, [pc, #116]	; (80088f0 <HAL_RCC_OscConfig+0x508>)
 800887a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008880:	f7fd fe00 	bl	8006484 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008888:	f7fd fdfc 	bl	8006484 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1b8      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800889a:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <HAL_RCC_OscConfig+0x508>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d108      	bne.n	80088c0 <HAL_RCC_OscConfig+0x4d8>
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b4:	4a0d      	ldr	r2, [pc, #52]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088be:	e029      	b.n	8008914 <HAL_RCC_OscConfig+0x52c>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b05      	cmp	r3, #5
 80088c6:	d115      	bne.n	80088f4 <HAL_RCC_OscConfig+0x50c>
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80088ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ce:	4a07      	ldr	r2, [pc, #28]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80088d0:	f043 0304 	orr.w	r3, r3, #4
 80088d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80088da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088de:	4a03      	ldr	r2, [pc, #12]	; (80088ec <HAL_RCC_OscConfig+0x504>)
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088e8:	e014      	b.n	8008914 <HAL_RCC_OscConfig+0x52c>
 80088ea:	bf00      	nop
 80088ec:	40021000 	.word	0x40021000
 80088f0:	40007000 	.word	0x40007000
 80088f4:	4b9d      	ldr	r3, [pc, #628]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 80088f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fa:	4a9c      	ldr	r2, [pc, #624]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008904:	4b99      	ldr	r3, [pc, #612]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890a:	4a98      	ldr	r2, [pc, #608]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 800890c:	f023 0304 	bic.w	r3, r3, #4
 8008910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d016      	beq.n	800894a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800891c:	f7fd fdb2 	bl	8006484 <HAL_GetTick>
 8008920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008922:	e00a      	b.n	800893a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008924:	f7fd fdae 	bl	8006484 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008932:	4293      	cmp	r3, r2
 8008934:	d901      	bls.n	800893a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e168      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800893a:	4b8c      	ldr	r3, [pc, #560]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 800893c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0ed      	beq.n	8008924 <HAL_RCC_OscConfig+0x53c>
 8008948:	e015      	b.n	8008976 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800894a:	f7fd fd9b 	bl	8006484 <HAL_GetTick>
 800894e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008950:	e00a      	b.n	8008968 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008952:	f7fd fd97 	bl	8006484 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e151      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008968:	4b80      	ldr	r3, [pc, #512]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 800896a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1ed      	bne.n	8008952 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008976:	7ffb      	ldrb	r3, [r7, #31]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d105      	bne.n	8008988 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800897c:	4b7b      	ldr	r3, [pc, #492]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 800897e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008980:	4a7a      	ldr	r2, [pc, #488]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008986:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d03c      	beq.n	8008a0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01c      	beq.n	80089d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800899c:	4b73      	ldr	r3, [pc, #460]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 800899e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089a2:	4a72      	ldr	r2, [pc, #456]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ac:	f7fd fd6a 	bl	8006484 <HAL_GetTick>
 80089b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089b4:	f7fd fd66 	bl	8006484 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e122      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089c6:	4b69      	ldr	r3, [pc, #420]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 80089c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0ef      	beq.n	80089b4 <HAL_RCC_OscConfig+0x5cc>
 80089d4:	e01b      	b.n	8008a0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089d6:	4b65      	ldr	r3, [pc, #404]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 80089d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089dc:	4a63      	ldr	r2, [pc, #396]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 80089de:	f023 0301 	bic.w	r3, r3, #1
 80089e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e6:	f7fd fd4d 	bl	8006484 <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089ee:	f7fd fd49 	bl	8006484 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e105      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a00:	4b5a      	ldr	r3, [pc, #360]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1ef      	bne.n	80089ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80f9 	beq.w	8008c0a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	f040 80cf 	bne.w	8008bc0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008a22:	4b52      	ldr	r3, [pc, #328]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f003 0203 	and.w	r2, r3, #3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d12c      	bne.n	8008a90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	3b01      	subs	r3, #1
 8008a42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d123      	bne.n	8008a90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d11b      	bne.n	8008a90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d113      	bne.n	8008a90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	3b01      	subs	r3, #1
 8008a76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d109      	bne.n	8008a90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d071      	beq.n	8008b74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	2b0c      	cmp	r3, #12
 8008a94:	d068      	beq.n	8008b68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008a96:	4b35      	ldr	r3, [pc, #212]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d105      	bne.n	8008aae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008aa2:	4b32      	ldr	r3, [pc, #200]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e0ac      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008ab2:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a2d      	ldr	r2, [pc, #180]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008ab8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008abc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008abe:	f7fd fce1 	bl	8006484 <HAL_GetTick>
 8008ac2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ac4:	e008      	b.n	8008ad8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ac6:	f7fd fcdd 	bl	8006484 <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d901      	bls.n	8008ad8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e099      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ad8:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1f0      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ae4:	4b21      	ldr	r3, [pc, #132]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	4b21      	ldr	r3, [pc, #132]	; (8008b70 <HAL_RCC_OscConfig+0x788>)
 8008aea:	4013      	ands	r3, r2
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008af4:	3a01      	subs	r2, #1
 8008af6:	0112      	lsls	r2, r2, #4
 8008af8:	4311      	orrs	r1, r2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008afe:	0212      	lsls	r2, r2, #8
 8008b00:	4311      	orrs	r1, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b06:	0852      	lsrs	r2, r2, #1
 8008b08:	3a01      	subs	r2, #1
 8008b0a:	0552      	lsls	r2, r2, #21
 8008b0c:	4311      	orrs	r1, r2
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008b12:	0852      	lsrs	r2, r2, #1
 8008b14:	3a01      	subs	r2, #1
 8008b16:	0652      	lsls	r2, r2, #25
 8008b18:	4311      	orrs	r1, r2
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b1e:	06d2      	lsls	r2, r2, #27
 8008b20:	430a      	orrs	r2, r1
 8008b22:	4912      	ldr	r1, [pc, #72]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b28:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a0f      	ldr	r2, [pc, #60]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b34:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b40:	f7fd fca0 	bl	8006484 <HAL_GetTick>
 8008b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b46:	e008      	b.n	8008b5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b48:	f7fd fc9c 	bl	8006484 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d901      	bls.n	8008b5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e058      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b5a:	4b04      	ldr	r3, [pc, #16]	; (8008b6c <HAL_RCC_OscConfig+0x784>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0f0      	beq.n	8008b48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b66:	e050      	b.n	8008c0a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e04f      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
 8008b6c:	40021000 	.word	0x40021000
 8008b70:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b74:	4b27      	ldr	r3, [pc, #156]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d144      	bne.n	8008c0a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008b80:	4b24      	ldr	r3, [pc, #144]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a23      	ldr	r2, [pc, #140]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b8c:	4b21      	ldr	r3, [pc, #132]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	4a20      	ldr	r2, [pc, #128]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b98:	f7fd fc74 	bl	8006484 <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba0:	f7fd fc70 	bl	8006484 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e02c      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bb2:	4b18      	ldr	r3, [pc, #96]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x7b8>
 8008bbe:	e024      	b.n	8008c0a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b0c      	cmp	r3, #12
 8008bc4:	d01f      	beq.n	8008c06 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc6:	4b13      	ldr	r3, [pc, #76]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a12      	ldr	r2, [pc, #72]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd2:	f7fd fc57 	bl	8006484 <HAL_GetTick>
 8008bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bd8:	e008      	b.n	8008bec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bda:	f7fd fc53 	bl	8006484 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e00f      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1f0      	bne.n	8008bda <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	4905      	ldr	r1, [pc, #20]	; (8008c14 <HAL_RCC_OscConfig+0x82c>)
 8008bfe:	4b06      	ldr	r3, [pc, #24]	; (8008c18 <HAL_RCC_OscConfig+0x830>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	60cb      	str	r3, [r1, #12]
 8008c04:	e001      	b.n	8008c0a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	40021000 	.word	0x40021000
 8008c18:	feeefffc 	.word	0xfeeefffc

08008c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e11d      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c34:	4b90      	ldr	r3, [pc, #576]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d910      	bls.n	8008c64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c42:	4b8d      	ldr	r3, [pc, #564]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f023 020f 	bic.w	r2, r3, #15
 8008c4a:	498b      	ldr	r1, [pc, #556]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c52:	4b89      	ldr	r3, [pc, #548]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d001      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e105      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d010      	beq.n	8008c92 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	4b81      	ldr	r3, [pc, #516]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d908      	bls.n	8008c92 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c80:	4b7e      	ldr	r3, [pc, #504]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	497b      	ldr	r1, [pc, #492]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d079      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d11e      	bne.n	8008ce4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ca6:	4b75      	ldr	r3, [pc, #468]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e0dc      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008cb6:	f000 fa3b 	bl	8009130 <RCC_GetSysClockFreqFromPLLSource>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4a70      	ldr	r2, [pc, #448]	; (8008e80 <HAL_RCC_ClockConfig+0x264>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d946      	bls.n	8008d50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008cc2:	4b6e      	ldr	r3, [pc, #440]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d140      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008cce:	4b6b      	ldr	r3, [pc, #428]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cd6:	4a69      	ldr	r2, [pc, #420]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008cde:	2380      	movs	r3, #128	; 0x80
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e035      	b.n	8008d50 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d107      	bne.n	8008cfc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cec:	4b63      	ldr	r3, [pc, #396]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d115      	bne.n	8008d24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e0b9      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d107      	bne.n	8008d14 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d04:	4b5d      	ldr	r3, [pc, #372]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e0ad      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d14:	4b59      	ldr	r3, [pc, #356]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0a5      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008d24:	f000 f8b4 	bl	8008e90 <HAL_RCC_GetSysClockFreq>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	4a55      	ldr	r2, [pc, #340]	; (8008e80 <HAL_RCC_ClockConfig+0x264>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d90f      	bls.n	8008d50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008d30:	4b52      	ldr	r3, [pc, #328]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d3c:	4b4f      	ldr	r3, [pc, #316]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d44:	4a4d      	ldr	r2, [pc, #308]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008d4c:	2380      	movs	r3, #128	; 0x80
 8008d4e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d50:	4b4a      	ldr	r3, [pc, #296]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f023 0203 	bic.w	r2, r3, #3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4947      	ldr	r1, [pc, #284]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d62:	f7fd fb8f 	bl	8006484 <HAL_GetTick>
 8008d66:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d68:	e00a      	b.n	8008d80 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d6a:	f7fd fb8b 	bl	8006484 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e077      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d80:	4b3e      	ldr	r3, [pc, #248]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f003 020c 	and.w	r2, r3, #12
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d1eb      	bne.n	8008d6a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b80      	cmp	r3, #128	; 0x80
 8008d96:	d105      	bne.n	8008da4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008d98:	4b38      	ldr	r3, [pc, #224]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008da2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d010      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	4b31      	ldr	r3, [pc, #196]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d208      	bcs.n	8008dd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dc0:	4b2e      	ldr	r3, [pc, #184]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	492b      	ldr	r1, [pc, #172]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dd2:	4b29      	ldr	r3, [pc, #164]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d210      	bcs.n	8008e02 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008de0:	4b25      	ldr	r3, [pc, #148]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f023 020f 	bic.w	r2, r3, #15
 8008de8:	4923      	ldr	r1, [pc, #140]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008df0:	4b21      	ldr	r3, [pc, #132]	; (8008e78 <HAL_RCC_ClockConfig+0x25c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d001      	beq.n	8008e02 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e036      	b.n	8008e70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d008      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e0e:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	4918      	ldr	r1, [pc, #96]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d009      	beq.n	8008e40 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e2c:	4b13      	ldr	r3, [pc, #76]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	4910      	ldr	r1, [pc, #64]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e40:	f000 f826 	bl	8008e90 <HAL_RCC_GetSysClockFreq>
 8008e44:	4602      	mov	r2, r0
 8008e46:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <HAL_RCC_ClockConfig+0x260>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	091b      	lsrs	r3, r3, #4
 8008e4c:	f003 030f 	and.w	r3, r3, #15
 8008e50:	490c      	ldr	r1, [pc, #48]	; (8008e84 <HAL_RCC_ClockConfig+0x268>)
 8008e52:	5ccb      	ldrb	r3, [r1, r3]
 8008e54:	f003 031f 	and.w	r3, r3, #31
 8008e58:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5c:	4a0a      	ldr	r2, [pc, #40]	; (8008e88 <HAL_RCC_ClockConfig+0x26c>)
 8008e5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <HAL_RCC_ClockConfig+0x270>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fc feb7 	bl	8005bd8 <HAL_InitTick>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40022000 	.word	0x40022000
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	04c4b400 	.word	0x04c4b400
 8008e84:	08014d3c 	.word	0x08014d3c
 8008e88:	2000003c 	.word	0x2000003c
 8008e8c:	20000040 	.word	0x20000040

08008e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b089      	sub	sp, #36	; 0x24
 8008e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e9e:	4b3e      	ldr	r3, [pc, #248]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 030c 	and.w	r3, r3, #12
 8008ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ea8:	4b3b      	ldr	r3, [pc, #236]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2b0c      	cmp	r3, #12
 8008ebc:	d121      	bne.n	8008f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d11e      	bne.n	8008f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ec4:	4b34      	ldr	r3, [pc, #208]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d107      	bne.n	8008ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ed0:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	e005      	b.n	8008eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008ee0:	4b2d      	ldr	r3, [pc, #180]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	091b      	lsrs	r3, r3, #4
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008eec:	4a2b      	ldr	r2, [pc, #172]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10d      	bne.n	8008f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f00:	e00a      	b.n	8008f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d102      	bne.n	8008f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f08:	4b25      	ldr	r3, [pc, #148]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e004      	b.n	8008f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d101      	bne.n	8008f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f14:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	2b0c      	cmp	r3, #12
 8008f1c:	d134      	bne.n	8008f88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f1e:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d003      	beq.n	8008f36 <HAL_RCC_GetSysClockFreq+0xa6>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d003      	beq.n	8008f3c <HAL_RCC_GetSysClockFreq+0xac>
 8008f34:	e005      	b.n	8008f42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008f36:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008f38:	617b      	str	r3, [r7, #20]
      break;
 8008f3a:	e005      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008f3c:	4b19      	ldr	r3, [pc, #100]	; (8008fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008f3e:	617b      	str	r3, [r7, #20]
      break;
 8008f40:	e002      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	617b      	str	r3, [r7, #20]
      break;
 8008f46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f48:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	3301      	adds	r3, #1
 8008f54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f56:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	0a1b      	lsrs	r3, r3, #8
 8008f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	fb03 f202 	mul.w	r2, r3, r2
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f6e:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	0e5b      	lsrs	r3, r3, #25
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	3301      	adds	r3, #1
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008f88:	69bb      	ldr	r3, [r7, #24]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3724      	adds	r7, #36	; 0x24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	08014d54 	.word	0x08014d54
 8008fa0:	00f42400 	.word	0x00f42400
 8008fa4:	007a1200 	.word	0x007a1200

08008fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fac:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8008fae:	681b      	ldr	r3, [r3, #0]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	2000003c 	.word	0x2000003c

08008fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008fc4:	f7ff fff0 	bl	8008fa8 <HAL_RCC_GetHCLKFreq>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	0a1b      	lsrs	r3, r3, #8
 8008fd0:	f003 0307 	and.w	r3, r3, #7
 8008fd4:	4904      	ldr	r1, [pc, #16]	; (8008fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fd6:	5ccb      	ldrb	r3, [r1, r3]
 8008fd8:	f003 031f 	and.w	r3, r3, #31
 8008fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	08014d4c 	.word	0x08014d4c

08008fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ff0:	f7ff ffda 	bl	8008fa8 <HAL_RCC_GetHCLKFreq>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	4b06      	ldr	r3, [pc, #24]	; (8009010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	0adb      	lsrs	r3, r3, #11
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	4904      	ldr	r1, [pc, #16]	; (8009014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009002:	5ccb      	ldrb	r3, [r1, r3]
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800900c:	4618      	mov	r0, r3
 800900e:	bd80      	pop	{r7, pc}
 8009010:	40021000 	.word	0x40021000
 8009014:	08014d4c 	.word	0x08014d4c

08009018 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	220f      	movs	r2, #15
 8009026:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009028:	4b12      	ldr	r3, [pc, #72]	; (8009074 <HAL_RCC_GetClockConfig+0x5c>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f003 0203 	and.w	r2, r3, #3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <HAL_RCC_GetClockConfig+0x5c>)
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <HAL_RCC_GetClockConfig+0x5c>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <HAL_RCC_GetClockConfig+0x5c>)
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	08db      	lsrs	r3, r3, #3
 8009052:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <HAL_RCC_GetClockConfig+0x60>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 020f 	and.w	r2, r3, #15
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	601a      	str	r2, [r3, #0]
}
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40021000 	.word	0x40021000
 8009078:	40022000 	.word	0x40022000

0800907c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009084:	2300      	movs	r3, #0
 8009086:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009088:	4b27      	ldr	r3, [pc, #156]	; (8009128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800908a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009094:	f7ff f8e4 	bl	8008260 <HAL_PWREx_GetVoltageRange>
 8009098:	6178      	str	r0, [r7, #20]
 800909a:	e014      	b.n	80090c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800909c:	4b22      	ldr	r3, [pc, #136]	; (8009128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800909e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a0:	4a21      	ldr	r2, [pc, #132]	; (8009128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80090a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090a6:	6593      	str	r3, [r2, #88]	; 0x58
 80090a8:	4b1f      	ldr	r3, [pc, #124]	; (8009128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80090aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80090b4:	f7ff f8d4 	bl	8008260 <HAL_PWREx_GetVoltageRange>
 80090b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80090ba:	4b1b      	ldr	r3, [pc, #108]	; (8009128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80090bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090be:	4a1a      	ldr	r2, [pc, #104]	; (8009128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80090c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090cc:	d10b      	bne.n	80090e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b80      	cmp	r3, #128	; 0x80
 80090d2:	d913      	bls.n	80090fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2ba0      	cmp	r3, #160	; 0xa0
 80090d8:	d902      	bls.n	80090e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80090da:	2302      	movs	r3, #2
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	e00d      	b.n	80090fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80090e0:	2301      	movs	r3, #1
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	e00a      	b.n	80090fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b7f      	cmp	r3, #127	; 0x7f
 80090ea:	d902      	bls.n	80090f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80090ec:	2302      	movs	r3, #2
 80090ee:	613b      	str	r3, [r7, #16]
 80090f0:	e004      	b.n	80090fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b70      	cmp	r3, #112	; 0x70
 80090f6:	d101      	bne.n	80090fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80090f8:	2301      	movs	r3, #1
 80090fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80090fc:	4b0b      	ldr	r3, [pc, #44]	; (800912c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f023 020f 	bic.w	r2, r3, #15
 8009104:	4909      	ldr	r1, [pc, #36]	; (800912c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800910c:	4b07      	ldr	r3, [pc, #28]	; (800912c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 030f 	and.w	r3, r3, #15
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	d001      	beq.n	800911e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	40021000 	.word	0x40021000
 800912c:	40022000 	.word	0x40022000

08009130 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009136:	4b2d      	ldr	r3, [pc, #180]	; (80091ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b03      	cmp	r3, #3
 8009144:	d00b      	beq.n	800915e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b03      	cmp	r3, #3
 800914a:	d825      	bhi.n	8009198 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d008      	beq.n	8009164 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d11f      	bne.n	8009198 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009158:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800915a:	613b      	str	r3, [r7, #16]
    break;
 800915c:	e01f      	b.n	800919e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800915e:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009160:	613b      	str	r3, [r7, #16]
    break;
 8009162:	e01c      	b.n	800919e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009164:	4b21      	ldr	r3, [pc, #132]	; (80091ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0308 	and.w	r3, r3, #8
 800916c:	2b00      	cmp	r3, #0
 800916e:	d107      	bne.n	8009180 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009170:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009176:	0a1b      	lsrs	r3, r3, #8
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e005      	b.n	800918c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009180:	4b1a      	ldr	r3, [pc, #104]	; (80091ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	091b      	lsrs	r3, r3, #4
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800918c:	4a1a      	ldr	r2, [pc, #104]	; (80091f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009194:	613b      	str	r3, [r7, #16]
    break;
 8009196:	e002      	b.n	800919e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]
    break;
 800919c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800919e:	4b13      	ldr	r3, [pc, #76]	; (80091ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	091b      	lsrs	r3, r3, #4
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	3301      	adds	r3, #1
 80091aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	0a1b      	lsrs	r3, r3, #8
 80091b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	fb03 f202 	mul.w	r2, r3, r2
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091c4:	4b09      	ldr	r3, [pc, #36]	; (80091ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	0e5b      	lsrs	r3, r3, #25
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	3301      	adds	r3, #1
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80091de:	683b      	ldr	r3, [r7, #0]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	371c      	adds	r7, #28
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	40021000 	.word	0x40021000
 80091f0:	00f42400 	.word	0x00f42400
 80091f4:	007a1200 	.word	0x007a1200
 80091f8:	08014d54 	.word	0x08014d54

080091fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009204:	2300      	movs	r3, #0
 8009206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009208:	2300      	movs	r3, #0
 800920a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009214:	2b00      	cmp	r3, #0
 8009216:	d040      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921c:	2b80      	cmp	r3, #128	; 0x80
 800921e:	d02a      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009220:	2b80      	cmp	r3, #128	; 0x80
 8009222:	d825      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009224:	2b60      	cmp	r3, #96	; 0x60
 8009226:	d026      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009228:	2b60      	cmp	r3, #96	; 0x60
 800922a:	d821      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800922c:	2b40      	cmp	r3, #64	; 0x40
 800922e:	d006      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009230:	2b40      	cmp	r3, #64	; 0x40
 8009232:	d81d      	bhi.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d009      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009238:	2b20      	cmp	r3, #32
 800923a:	d010      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800923c:	e018      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800923e:	4b89      	ldr	r3, [pc, #548]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	4a88      	ldr	r2, [pc, #544]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009248:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800924a:	e015      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3304      	adds	r3, #4
 8009250:	2100      	movs	r1, #0
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fb02 	bl	800985c <RCCEx_PLLSAI1_Config>
 8009258:	4603      	mov	r3, r0
 800925a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800925c:	e00c      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3320      	adds	r3, #32
 8009262:	2100      	movs	r1, #0
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fbed 	bl	8009a44 <RCCEx_PLLSAI2_Config>
 800926a:	4603      	mov	r3, r0
 800926c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800926e:	e003      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	74fb      	strb	r3, [r7, #19]
      break;
 8009274:	e000      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009278:	7cfb      	ldrb	r3, [r7, #19]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10b      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800927e:	4b79      	ldr	r3, [pc, #484]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009284:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928c:	4975      	ldr	r1, [pc, #468]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800928e:	4313      	orrs	r3, r2
 8009290:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009294:	e001      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009296:	7cfb      	ldrb	r3, [r7, #19]
 8009298:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d047      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ae:	d030      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80092b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b4:	d82a      	bhi.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80092b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092ba:	d02a      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80092bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092c0:	d824      	bhi.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80092c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c6:	d008      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80092c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092cc:	d81e      	bhi.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80092d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d6:	d010      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80092d8:	e018      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80092da:	4b62      	ldr	r3, [pc, #392]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	4a61      	ldr	r2, [pc, #388]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80092e6:	e015      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3304      	adds	r3, #4
 80092ec:	2100      	movs	r1, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fab4 	bl	800985c <RCCEx_PLLSAI1_Config>
 80092f4:	4603      	mov	r3, r0
 80092f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80092f8:	e00c      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3320      	adds	r3, #32
 80092fe:	2100      	movs	r1, #0
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fb9f 	bl	8009a44 <RCCEx_PLLSAI2_Config>
 8009306:	4603      	mov	r3, r0
 8009308:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800930a:	e003      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	74fb      	strb	r3, [r7, #19]
      break;
 8009310:	e000      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009314:	7cfb      	ldrb	r3, [r7, #19]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10b      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800931a:	4b52      	ldr	r3, [pc, #328]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800931c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009328:	494e      	ldr	r1, [pc, #312]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800932a:	4313      	orrs	r3, r2
 800932c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009330:	e001      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009332:	7cfb      	ldrb	r3, [r7, #19]
 8009334:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 809f 	beq.w	8009482 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009344:	2300      	movs	r3, #0
 8009346:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009348:	4b46      	ldr	r3, [pc, #280]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800934a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009354:	2301      	movs	r3, #1
 8009356:	e000      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009358:	2300      	movs	r3, #0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800935e:	4b41      	ldr	r3, [pc, #260]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009362:	4a40      	ldr	r2, [pc, #256]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009368:	6593      	str	r3, [r2, #88]	; 0x58
 800936a:	4b3e      	ldr	r3, [pc, #248]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800936c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009372:	60bb      	str	r3, [r7, #8]
 8009374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009376:	2301      	movs	r3, #1
 8009378:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800937a:	4b3b      	ldr	r3, [pc, #236]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a3a      	ldr	r2, [pc, #232]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009386:	f7fd f87d 	bl	8006484 <HAL_GetTick>
 800938a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800938c:	e009      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800938e:	f7fd f879 	bl	8006484 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b02      	cmp	r3, #2
 800939a:	d902      	bls.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	74fb      	strb	r3, [r7, #19]
        break;
 80093a0:	e005      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80093a2:	4b31      	ldr	r3, [pc, #196]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0ef      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80093ae:	7cfb      	ldrb	r3, [r7, #19]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d15b      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80093b4:	4b2b      	ldr	r3, [pc, #172]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d01f      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d019      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80093d2:	4b24      	ldr	r3, [pc, #144]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093de:	4b21      	ldr	r3, [pc, #132]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e4:	4a1f      	ldr	r2, [pc, #124]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093ee:	4b1d      	ldr	r3, [pc, #116]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f4:	4a1b      	ldr	r2, [pc, #108]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093fe:	4a19      	ldr	r2, [pc, #100]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d016      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009410:	f7fd f838 	bl	8006484 <HAL_GetTick>
 8009414:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009416:	e00b      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009418:	f7fd f834 	bl	8006484 <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	f241 3288 	movw	r2, #5000	; 0x1388
 8009426:	4293      	cmp	r3, r2
 8009428:	d902      	bls.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	74fb      	strb	r3, [r7, #19]
            break;
 800942e:	e006      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009430:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ec      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800943e:	7cfb      	ldrb	r3, [r7, #19]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10c      	bne.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009444:	4b07      	ldr	r3, [pc, #28]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009454:	4903      	ldr	r1, [pc, #12]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009456:	4313      	orrs	r3, r2
 8009458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800945c:	e008      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800945e:	7cfb      	ldrb	r3, [r7, #19]
 8009460:	74bb      	strb	r3, [r7, #18]
 8009462:	e005      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009464:	40021000 	.word	0x40021000
 8009468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946c:	7cfb      	ldrb	r3, [r7, #19]
 800946e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009470:	7c7b      	ldrb	r3, [r7, #17]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d105      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009476:	4ba0      	ldr	r3, [pc, #640]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947a:	4a9f      	ldr	r2, [pc, #636]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800947c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009480:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800948e:	4b9a      	ldr	r3, [pc, #616]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009494:	f023 0203 	bic.w	r2, r3, #3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949c:	4996      	ldr	r1, [pc, #600]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00a      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094b0:	4b91      	ldr	r3, [pc, #580]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b6:	f023 020c 	bic.w	r2, r3, #12
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	498e      	ldr	r1, [pc, #568]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094d2:	4b89      	ldr	r3, [pc, #548]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e0:	4985      	ldr	r1, [pc, #532]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0308 	and.w	r3, r3, #8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00a      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094f4:	4b80      	ldr	r3, [pc, #512]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009502:	497d      	ldr	r1, [pc, #500]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009504:	4313      	orrs	r3, r2
 8009506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0310 	and.w	r3, r3, #16
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009516:	4b78      	ldr	r3, [pc, #480]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009524:	4974      	ldr	r1, [pc, #464]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009526:	4313      	orrs	r3, r2
 8009528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0320 	and.w	r3, r3, #32
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00a      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009538:	4b6f      	ldr	r3, [pc, #444]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800953a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009546:	496c      	ldr	r1, [pc, #432]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009548:	4313      	orrs	r3, r2
 800954a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800955a:	4b67      	ldr	r3, [pc, #412]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800955c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009568:	4963      	ldr	r1, [pc, #396]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800956a:	4313      	orrs	r3, r2
 800956c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800957c:	4b5e      	ldr	r3, [pc, #376]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800957e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800958a:	495b      	ldr	r1, [pc, #364]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800959e:	4b56      	ldr	r3, [pc, #344]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ac:	4952      	ldr	r1, [pc, #328]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80095c0:	4b4d      	ldr	r3, [pc, #308]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ce:	494a      	ldr	r1, [pc, #296]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095e2:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f0:	4941      	ldr	r1, [pc, #260]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00a      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009604:	4b3c      	ldr	r3, [pc, #240]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800960a:	f023 0203 	bic.w	r2, r3, #3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009612:	4939      	ldr	r1, [pc, #228]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009614:	4313      	orrs	r3, r2
 8009616:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d028      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009626:	4b34      	ldr	r3, [pc, #208]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009634:	4930      	ldr	r1, [pc, #192]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009636:	4313      	orrs	r3, r2
 8009638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009644:	d106      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009646:	4b2c      	ldr	r3, [pc, #176]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	4a2b      	ldr	r2, [pc, #172]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800964c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009650:	60d3      	str	r3, [r2, #12]
 8009652:	e011      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800965c:	d10c      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3304      	adds	r3, #4
 8009662:	2101      	movs	r1, #1
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f8f9 	bl	800985c <RCCEx_PLLSAI1_Config>
 800966a:	4603      	mov	r3, r0
 800966c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800966e:	7cfb      	ldrb	r3, [r7, #19]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009674:	7cfb      	ldrb	r3, [r7, #19]
 8009676:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d04d      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800968c:	d108      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800968e:	4b1a      	ldr	r3, [pc, #104]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009694:	4a18      	ldr	r2, [pc, #96]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800969a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800969e:	e012      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80096a0:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096a6:	4a14      	ldr	r2, [pc, #80]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80096b0:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096be:	490e      	ldr	r1, [pc, #56]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ce:	d106      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096d0:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	4a08      	ldr	r2, [pc, #32]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096da:	60d3      	str	r3, [r2, #12]
 80096dc:	e020      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e6:	d109      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80096e8:	4b03      	ldr	r3, [pc, #12]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	4a02      	ldr	r2, [pc, #8]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096f2:	60d3      	str	r3, [r2, #12]
 80096f4:	e014      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80096f6:	bf00      	nop
 80096f8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009704:	d10c      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	2101      	movs	r1, #1
 800970c:	4618      	mov	r0, r3
 800970e:	f000 f8a5 	bl	800985c <RCCEx_PLLSAI1_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009716:	7cfb      	ldrb	r3, [r7, #19]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800971c:	7cfb      	ldrb	r3, [r7, #19]
 800971e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d028      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800972c:	4b4a      	ldr	r3, [pc, #296]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800972e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800973a:	4947      	ldr	r1, [pc, #284]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800973c:	4313      	orrs	r3, r2
 800973e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800974a:	d106      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800974c:	4b42      	ldr	r3, [pc, #264]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	4a41      	ldr	r2, [pc, #260]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009756:	60d3      	str	r3, [r2, #12]
 8009758:	e011      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800975e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009762:	d10c      	bne.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3304      	adds	r3, #4
 8009768:	2101      	movs	r1, #1
 800976a:	4618      	mov	r0, r3
 800976c:	f000 f876 	bl	800985c <RCCEx_PLLSAI1_Config>
 8009770:	4603      	mov	r3, r0
 8009772:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009774:	7cfb      	ldrb	r3, [r7, #19]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800977a:	7cfb      	ldrb	r3, [r7, #19]
 800977c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d01e      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800978a:	4b33      	ldr	r3, [pc, #204]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800978c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009790:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800979a:	492f      	ldr	r1, [pc, #188]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800979c:	4313      	orrs	r3, r2
 800979e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ac:	d10c      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3304      	adds	r3, #4
 80097b2:	2102      	movs	r1, #2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f851 	bl	800985c <RCCEx_PLLSAI1_Config>
 80097ba:	4603      	mov	r3, r0
 80097bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80097be:	7cfb      	ldrb	r3, [r7, #19]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80097c4:	7cfb      	ldrb	r3, [r7, #19]
 80097c6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097d4:	4b20      	ldr	r3, [pc, #128]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097da:	f023 0204 	bic.w	r2, r3, #4
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e4:	491c      	ldr	r1, [pc, #112]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80097f8:	4b17      	ldr	r3, [pc, #92]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097fe:	f023 0218 	bic.w	r2, r3, #24
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009808:	4913      	ldr	r1, [pc, #76]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800980a:	4313      	orrs	r3, r2
 800980c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d017      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800981c:	4b0e      	ldr	r3, [pc, #56]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800981e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800982c:	490a      	ldr	r1, [pc, #40]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800982e:	4313      	orrs	r3, r2
 8009830:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800983a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800983e:	d105      	bne.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009840:	4b05      	ldr	r3, [pc, #20]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	4a04      	ldr	r2, [pc, #16]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800984a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800984c:	7cbb      	ldrb	r3, [r7, #18]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	40021000 	.word	0x40021000

0800985c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800986a:	4b72      	ldr	r3, [pc, #456]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00e      	beq.n	8009894 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009876:	4b6f      	ldr	r3, [pc, #444]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f003 0203 	and.w	r2, r3, #3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d103      	bne.n	800988e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
       ||
 800988a:	2b00      	cmp	r3, #0
 800988c:	d142      	bne.n	8009914 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	73fb      	strb	r3, [r7, #15]
 8009892:	e03f      	b.n	8009914 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b03      	cmp	r3, #3
 800989a:	d018      	beq.n	80098ce <RCCEx_PLLSAI1_Config+0x72>
 800989c:	2b03      	cmp	r3, #3
 800989e:	d825      	bhi.n	80098ec <RCCEx_PLLSAI1_Config+0x90>
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d002      	beq.n	80098aa <RCCEx_PLLSAI1_Config+0x4e>
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d009      	beq.n	80098bc <RCCEx_PLLSAI1_Config+0x60>
 80098a8:	e020      	b.n	80098ec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80098aa:	4b62      	ldr	r3, [pc, #392]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d11d      	bne.n	80098f2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098ba:	e01a      	b.n	80098f2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80098bc:	4b5d      	ldr	r3, [pc, #372]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d116      	bne.n	80098f6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098cc:	e013      	b.n	80098f6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80098ce:	4b59      	ldr	r3, [pc, #356]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10f      	bne.n	80098fa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80098da:	4b56      	ldr	r3, [pc, #344]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d109      	bne.n	80098fa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098ea:	e006      	b.n	80098fa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
      break;
 80098f0:	e004      	b.n	80098fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80098f2:	bf00      	nop
 80098f4:	e002      	b.n	80098fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80098f6:	bf00      	nop
 80098f8:	e000      	b.n	80098fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80098fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d108      	bne.n	8009914 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009902:	4b4c      	ldr	r3, [pc, #304]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f023 0203 	bic.w	r2, r3, #3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4949      	ldr	r1, [pc, #292]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009910:	4313      	orrs	r3, r2
 8009912:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f040 8086 	bne.w	8009a28 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800991c:	4b45      	ldr	r3, [pc, #276]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a44      	ldr	r2, [pc, #272]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009928:	f7fc fdac 	bl	8006484 <HAL_GetTick>
 800992c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800992e:	e009      	b.n	8009944 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009930:	f7fc fda8 	bl	8006484 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d902      	bls.n	8009944 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	73fb      	strb	r3, [r7, #15]
        break;
 8009942:	e005      	b.n	8009950 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009944:	4b3b      	ldr	r3, [pc, #236]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1ef      	bne.n	8009930 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d168      	bne.n	8009a28 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d113      	bne.n	8009984 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800995c:	4b35      	ldr	r3, [pc, #212]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800995e:	691a      	ldr	r2, [r3, #16]
 8009960:	4b35      	ldr	r3, [pc, #212]	; (8009a38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009962:	4013      	ands	r3, r2
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	6892      	ldr	r2, [r2, #8]
 8009968:	0211      	lsls	r1, r2, #8
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	68d2      	ldr	r2, [r2, #12]
 800996e:	06d2      	lsls	r2, r2, #27
 8009970:	4311      	orrs	r1, r2
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	6852      	ldr	r2, [r2, #4]
 8009976:	3a01      	subs	r2, #1
 8009978:	0112      	lsls	r2, r2, #4
 800997a:	430a      	orrs	r2, r1
 800997c:	492d      	ldr	r1, [pc, #180]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800997e:	4313      	orrs	r3, r2
 8009980:	610b      	str	r3, [r1, #16]
 8009982:	e02d      	b.n	80099e0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d115      	bne.n	80099b6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800998a:	4b2a      	ldr	r3, [pc, #168]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 800998c:	691a      	ldr	r2, [r3, #16]
 800998e:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009990:	4013      	ands	r3, r2
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6892      	ldr	r2, [r2, #8]
 8009996:	0211      	lsls	r1, r2, #8
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	6912      	ldr	r2, [r2, #16]
 800999c:	0852      	lsrs	r2, r2, #1
 800999e:	3a01      	subs	r2, #1
 80099a0:	0552      	lsls	r2, r2, #21
 80099a2:	4311      	orrs	r1, r2
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6852      	ldr	r2, [r2, #4]
 80099a8:	3a01      	subs	r2, #1
 80099aa:	0112      	lsls	r2, r2, #4
 80099ac:	430a      	orrs	r2, r1
 80099ae:	4921      	ldr	r1, [pc, #132]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	610b      	str	r3, [r1, #16]
 80099b4:	e014      	b.n	80099e0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80099b6:	4b1f      	ldr	r3, [pc, #124]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	4b21      	ldr	r3, [pc, #132]	; (8009a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099bc:	4013      	ands	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	6892      	ldr	r2, [r2, #8]
 80099c2:	0211      	lsls	r1, r2, #8
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6952      	ldr	r2, [r2, #20]
 80099c8:	0852      	lsrs	r2, r2, #1
 80099ca:	3a01      	subs	r2, #1
 80099cc:	0652      	lsls	r2, r2, #25
 80099ce:	4311      	orrs	r1, r2
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6852      	ldr	r2, [r2, #4]
 80099d4:	3a01      	subs	r2, #1
 80099d6:	0112      	lsls	r2, r2, #4
 80099d8:	430a      	orrs	r2, r1
 80099da:	4916      	ldr	r1, [pc, #88]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80099e0:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 80099e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ec:	f7fc fd4a 	bl	8006484 <HAL_GetTick>
 80099f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80099f2:	e009      	b.n	8009a08 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099f4:	f7fc fd46 	bl	8006484 <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d902      	bls.n	8009a08 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	73fb      	strb	r3, [r7, #15]
          break;
 8009a06:	e005      	b.n	8009a14 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0ef      	beq.n	80099f4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a1c:	691a      	ldr	r2, [r3, #16]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	4904      	ldr	r1, [pc, #16]	; (8009a34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	40021000 	.word	0x40021000
 8009a38:	07ff800f 	.word	0x07ff800f
 8009a3c:	ff9f800f 	.word	0xff9f800f
 8009a40:	f9ff800f 	.word	0xf9ff800f

08009a44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009a52:	4b72      	ldr	r3, [pc, #456]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00e      	beq.n	8009a7c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009a5e:	4b6f      	ldr	r3, [pc, #444]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f003 0203 	and.w	r2, r3, #3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d103      	bne.n	8009a76 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
       ||
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d142      	bne.n	8009afc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	73fb      	strb	r3, [r7, #15]
 8009a7a:	e03f      	b.n	8009afc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d018      	beq.n	8009ab6 <RCCEx_PLLSAI2_Config+0x72>
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d825      	bhi.n	8009ad4 <RCCEx_PLLSAI2_Config+0x90>
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d002      	beq.n	8009a92 <RCCEx_PLLSAI2_Config+0x4e>
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d009      	beq.n	8009aa4 <RCCEx_PLLSAI2_Config+0x60>
 8009a90:	e020      	b.n	8009ad4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a92:	4b62      	ldr	r3, [pc, #392]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d11d      	bne.n	8009ada <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009aa2:	e01a      	b.n	8009ada <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009aa4:	4b5d      	ldr	r3, [pc, #372]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d116      	bne.n	8009ade <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ab4:	e013      	b.n	8009ade <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009ab6:	4b59      	ldr	r3, [pc, #356]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10f      	bne.n	8009ae2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009ac2:	4b56      	ldr	r3, [pc, #344]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009ad2:	e006      	b.n	8009ae2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad8:	e004      	b.n	8009ae4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009ada:	bf00      	nop
 8009adc:	e002      	b.n	8009ae4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009ade:	bf00      	nop
 8009ae0:	e000      	b.n	8009ae4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d108      	bne.n	8009afc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009aea:	4b4c      	ldr	r3, [pc, #304]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f023 0203 	bic.w	r2, r3, #3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4949      	ldr	r1, [pc, #292]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f040 8086 	bne.w	8009c10 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009b04:	4b45      	ldr	r3, [pc, #276]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a44      	ldr	r2, [pc, #272]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b10:	f7fc fcb8 	bl	8006484 <HAL_GetTick>
 8009b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b16:	e009      	b.n	8009b2c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b18:	f7fc fcb4 	bl	8006484 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d902      	bls.n	8009b2c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	73fb      	strb	r3, [r7, #15]
        break;
 8009b2a:	e005      	b.n	8009b38 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b2c:	4b3b      	ldr	r3, [pc, #236]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1ef      	bne.n	8009b18 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d168      	bne.n	8009c10 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d113      	bne.n	8009b6c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b44:	4b35      	ldr	r3, [pc, #212]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b46:	695a      	ldr	r2, [r3, #20]
 8009b48:	4b35      	ldr	r3, [pc, #212]	; (8009c20 <RCCEx_PLLSAI2_Config+0x1dc>)
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6892      	ldr	r2, [r2, #8]
 8009b50:	0211      	lsls	r1, r2, #8
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	68d2      	ldr	r2, [r2, #12]
 8009b56:	06d2      	lsls	r2, r2, #27
 8009b58:	4311      	orrs	r1, r2
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6852      	ldr	r2, [r2, #4]
 8009b5e:	3a01      	subs	r2, #1
 8009b60:	0112      	lsls	r2, r2, #4
 8009b62:	430a      	orrs	r2, r1
 8009b64:	492d      	ldr	r1, [pc, #180]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	614b      	str	r3, [r1, #20]
 8009b6a:	e02d      	b.n	8009bc8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d115      	bne.n	8009b9e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b72:	4b2a      	ldr	r3, [pc, #168]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	4b2b      	ldr	r3, [pc, #172]	; (8009c24 <RCCEx_PLLSAI2_Config+0x1e0>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6892      	ldr	r2, [r2, #8]
 8009b7e:	0211      	lsls	r1, r2, #8
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6912      	ldr	r2, [r2, #16]
 8009b84:	0852      	lsrs	r2, r2, #1
 8009b86:	3a01      	subs	r2, #1
 8009b88:	0552      	lsls	r2, r2, #21
 8009b8a:	4311      	orrs	r1, r2
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6852      	ldr	r2, [r2, #4]
 8009b90:	3a01      	subs	r2, #1
 8009b92:	0112      	lsls	r2, r2, #4
 8009b94:	430a      	orrs	r2, r1
 8009b96:	4921      	ldr	r1, [pc, #132]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	614b      	str	r3, [r1, #20]
 8009b9c:	e014      	b.n	8009bc8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b9e:	4b1f      	ldr	r3, [pc, #124]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ba0:	695a      	ldr	r2, [r3, #20]
 8009ba2:	4b21      	ldr	r3, [pc, #132]	; (8009c28 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6892      	ldr	r2, [r2, #8]
 8009baa:	0211      	lsls	r1, r2, #8
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6952      	ldr	r2, [r2, #20]
 8009bb0:	0852      	lsrs	r2, r2, #1
 8009bb2:	3a01      	subs	r2, #1
 8009bb4:	0652      	lsls	r2, r2, #25
 8009bb6:	4311      	orrs	r1, r2
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6852      	ldr	r2, [r2, #4]
 8009bbc:	3a01      	subs	r2, #1
 8009bbe:	0112      	lsls	r2, r2, #4
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	4916      	ldr	r1, [pc, #88]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009bc8:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a13      	ldr	r2, [pc, #76]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bd4:	f7fc fc56 	bl	8006484 <HAL_GetTick>
 8009bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bda:	e009      	b.n	8009bf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009bdc:	f7fc fc52 	bl	8006484 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d902      	bls.n	8009bf0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	73fb      	strb	r3, [r7, #15]
          break;
 8009bee:	e005      	b.n	8009bfc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0ef      	beq.n	8009bdc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009c02:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c04:	695a      	ldr	r2, [r3, #20]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	4904      	ldr	r1, [pc, #16]	; (8009c1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	40021000 	.word	0x40021000
 8009c20:	07ff800f 	.word	0x07ff800f
 8009c24:	ff9f800f 	.word	0xff9f800f
 8009c28:	f9ff800f 	.word	0xf9ff800f

08009c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e049      	b.n	8009cd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f841 	bl	8009cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f000 f9f8 	bl	800a060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
	...

08009cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d001      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e04f      	b.n	8009da8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0201 	orr.w	r2, r2, #1
 8009d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a23      	ldr	r2, [pc, #140]	; (8009db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d01d      	beq.n	8009d66 <HAL_TIM_Base_Start_IT+0x76>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d32:	d018      	beq.n	8009d66 <HAL_TIM_Base_Start_IT+0x76>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a1f      	ldr	r2, [pc, #124]	; (8009db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d013      	beq.n	8009d66 <HAL_TIM_Base_Start_IT+0x76>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a1e      	ldr	r2, [pc, #120]	; (8009dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d00e      	beq.n	8009d66 <HAL_TIM_Base_Start_IT+0x76>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a1c      	ldr	r2, [pc, #112]	; (8009dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d009      	beq.n	8009d66 <HAL_TIM_Base_Start_IT+0x76>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a1b      	ldr	r2, [pc, #108]	; (8009dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d004      	beq.n	8009d66 <HAL_TIM_Base_Start_IT+0x76>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a19      	ldr	r2, [pc, #100]	; (8009dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d115      	bne.n	8009d92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689a      	ldr	r2, [r3, #8]
 8009d6c:	4b17      	ldr	r3, [pc, #92]	; (8009dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8009d6e:	4013      	ands	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b06      	cmp	r3, #6
 8009d76:	d015      	beq.n	8009da4 <HAL_TIM_Base_Start_IT+0xb4>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d7e:	d011      	beq.n	8009da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f042 0201 	orr.w	r2, r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d90:	e008      	b.n	8009da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f042 0201 	orr.w	r2, r2, #1
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	e000      	b.n	8009da6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	40012c00 	.word	0x40012c00
 8009db8:	40000400 	.word	0x40000400
 8009dbc:	40000800 	.word	0x40000800
 8009dc0:	40000c00 	.word	0x40000c00
 8009dc4:	40013400 	.word	0x40013400
 8009dc8:	40014000 	.word	0x40014000
 8009dcc:	00010007 	.word	0x00010007

08009dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d122      	bne.n	8009e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d11b      	bne.n	8009e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f06f 0202 	mvn.w	r2, #2
 8009dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	f003 0303 	and.w	r3, r3, #3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f905 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009e18:	e005      	b.n	8009e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f8f7 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f908 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	f003 0304 	and.w	r3, r3, #4
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d122      	bne.n	8009e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d11b      	bne.n	8009e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f06f 0204 	mvn.w	r2, #4
 8009e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f8db 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009e6c:	e005      	b.n	8009e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f8cd 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f8de 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f003 0308 	and.w	r3, r3, #8
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	d122      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d11b      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f06f 0208 	mvn.w	r2, #8
 8009ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f8b1 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009ec0:	e005      	b.n	8009ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f8a3 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8b4 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b10      	cmp	r3, #16
 8009ee0:	d122      	bne.n	8009f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b10      	cmp	r3, #16
 8009eee:	d11b      	bne.n	8009f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f06f 0210 	mvn.w	r2, #16
 8009ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2208      	movs	r2, #8
 8009efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f887 	bl	800a022 <HAL_TIM_IC_CaptureCallback>
 8009f14:	e005      	b.n	8009f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f879 	bl	800a00e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f88a 	bl	800a036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d10e      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d107      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f06f 0201 	mvn.w	r2, #1
 8009f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7fa ff4a 	bl	8004de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5e:	2b80      	cmp	r3, #128	; 0x80
 8009f60:	d10e      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6c:	2b80      	cmp	r3, #128	; 0x80
 8009f6e:	d107      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f914 	bl	800a1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8e:	d10e      	bne.n	8009fae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9a:	2b80      	cmp	r3, #128	; 0x80
 8009f9c:	d107      	bne.n	8009fae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f907 	bl	800a1bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb8:	2b40      	cmp	r3, #64	; 0x40
 8009fba:	d10e      	bne.n	8009fda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc6:	2b40      	cmp	r3, #64	; 0x40
 8009fc8:	d107      	bne.n	8009fda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f838 	bl	800a04a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	f003 0320 	and.w	r3, r3, #32
 8009fe4:	2b20      	cmp	r3, #32
 8009fe6:	d10e      	bne.n	800a006 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f003 0320 	and.w	r3, r3, #32
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d107      	bne.n	800a006 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f06f 0220 	mvn.w	r2, #32
 8009ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f8c7 	bl	800a194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
	...

0800a060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a40      	ldr	r2, [pc, #256]	; (800a174 <TIM_Base_SetConfig+0x114>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d013      	beq.n	800a0a0 <TIM_Base_SetConfig+0x40>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a07e:	d00f      	beq.n	800a0a0 <TIM_Base_SetConfig+0x40>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a3d      	ldr	r2, [pc, #244]	; (800a178 <TIM_Base_SetConfig+0x118>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d00b      	beq.n	800a0a0 <TIM_Base_SetConfig+0x40>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a3c      	ldr	r2, [pc, #240]	; (800a17c <TIM_Base_SetConfig+0x11c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d007      	beq.n	800a0a0 <TIM_Base_SetConfig+0x40>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a3b      	ldr	r2, [pc, #236]	; (800a180 <TIM_Base_SetConfig+0x120>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d003      	beq.n	800a0a0 <TIM_Base_SetConfig+0x40>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a3a      	ldr	r2, [pc, #232]	; (800a184 <TIM_Base_SetConfig+0x124>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d108      	bne.n	800a0b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a2f      	ldr	r2, [pc, #188]	; (800a174 <TIM_Base_SetConfig+0x114>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d01f      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0c0:	d01b      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a2c      	ldr	r2, [pc, #176]	; (800a178 <TIM_Base_SetConfig+0x118>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d017      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a2b      	ldr	r2, [pc, #172]	; (800a17c <TIM_Base_SetConfig+0x11c>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d013      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a2a      	ldr	r2, [pc, #168]	; (800a180 <TIM_Base_SetConfig+0x120>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00f      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a29      	ldr	r2, [pc, #164]	; (800a184 <TIM_Base_SetConfig+0x124>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00b      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a28      	ldr	r2, [pc, #160]	; (800a188 <TIM_Base_SetConfig+0x128>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d007      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a27      	ldr	r2, [pc, #156]	; (800a18c <TIM_Base_SetConfig+0x12c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d003      	beq.n	800a0fa <TIM_Base_SetConfig+0x9a>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a26      	ldr	r2, [pc, #152]	; (800a190 <TIM_Base_SetConfig+0x130>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d108      	bne.n	800a10c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	4313      	orrs	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	689a      	ldr	r2, [r3, #8]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a10      	ldr	r2, [pc, #64]	; (800a174 <TIM_Base_SetConfig+0x114>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d00f      	beq.n	800a158 <TIM_Base_SetConfig+0xf8>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a12      	ldr	r2, [pc, #72]	; (800a184 <TIM_Base_SetConfig+0x124>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d00b      	beq.n	800a158 <TIM_Base_SetConfig+0xf8>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a11      	ldr	r2, [pc, #68]	; (800a188 <TIM_Base_SetConfig+0x128>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d007      	beq.n	800a158 <TIM_Base_SetConfig+0xf8>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a10      	ldr	r2, [pc, #64]	; (800a18c <TIM_Base_SetConfig+0x12c>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d003      	beq.n	800a158 <TIM_Base_SetConfig+0xf8>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a0f      	ldr	r2, [pc, #60]	; (800a190 <TIM_Base_SetConfig+0x130>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d103      	bne.n	800a160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	691a      	ldr	r2, [r3, #16]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	615a      	str	r2, [r3, #20]
}
 800a166:	bf00      	nop
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	40012c00 	.word	0x40012c00
 800a178:	40000400 	.word	0x40000400
 800a17c:	40000800 	.word	0x40000800
 800a180:	40000c00 	.word	0x40000c00
 800a184:	40013400 	.word	0x40013400
 800a188:	40014000 	.word	0x40014000
 800a18c:	40014400 	.word	0x40014400
 800a190:	40014800 	.word	0x40014800

0800a194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e042      	b.n	800a268 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7fb fbb5 	bl	8005964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2224      	movs	r2, #36	; 0x24
 800a1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f022 0201 	bic.w	r2, r2, #1
 800a210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fc52 	bl	800aabc <UART_SetConfig>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e022      	b.n	800a268 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 ff42 	bl	800b0b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a23e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a24e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f042 0201 	orr.w	r2, r2, #1
 800a25e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 ffc9 	bl	800b1f8 <UART_CheckIdleState>
 800a266:	4603      	mov	r3, r0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	; 0x28
 800a274:	af02      	add	r7, sp, #8
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	4613      	mov	r3, r2
 800a27e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a286:	2b20      	cmp	r3, #32
 800a288:	f040 8084 	bne.w	800a394 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <HAL_UART_Transmit+0x28>
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e07c      	b.n	800a396 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_UART_Transmit+0x3a>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e075      	b.n	800a396 <HAL_UART_Transmit+0x126>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2221      	movs	r2, #33	; 0x21
 800a2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2c2:	f7fc f8df 	bl	8006484 <HAL_GetTick>
 800a2c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	88fa      	ldrh	r2, [r7, #6]
 800a2cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	88fa      	ldrh	r2, [r7, #6]
 800a2d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e0:	d108      	bne.n	800a2f4 <HAL_UART_Transmit+0x84>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d104      	bne.n	800a2f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	61bb      	str	r3, [r7, #24]
 800a2f2:	e003      	b.n	800a2fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a304:	e02d      	b.n	800a362 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2200      	movs	r2, #0
 800a30e:	2180      	movs	r1, #128	; 0x80
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 ffbc 	bl	800b28e <UART_WaitOnFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e03a      	b.n	800a396 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10b      	bne.n	800a33e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	881a      	ldrh	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a332:	b292      	uxth	r2, r2
 800a334:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	3302      	adds	r3, #2
 800a33a:	61bb      	str	r3, [r7, #24]
 800a33c:	e008      	b.n	800a350 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	781a      	ldrb	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	b292      	uxth	r2, r2
 800a348:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3301      	adds	r3, #1
 800a34e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a356:	b29b      	uxth	r3, r3
 800a358:	3b01      	subs	r3, #1
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a368:	b29b      	uxth	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1cb      	bne.n	800a306 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2200      	movs	r2, #0
 800a376:	2140      	movs	r1, #64	; 0x40
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 ff88 	bl	800b28e <UART_WaitOnFlagUntilTimeout>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e006      	b.n	800a396 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	e000      	b.n	800a396 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a394:	2302      	movs	r3, #2
  }
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	; 0x28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	d142      	bne.n	800a43e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <HAL_UART_Receive_IT+0x24>
 800a3be:	88fb      	ldrh	r3, [r7, #6]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e03b      	b.n	800a440 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d101      	bne.n	800a3d6 <HAL_UART_Receive_IT+0x36>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e034      	b.n	800a440 <HAL_UART_Receive_IT+0xa0>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a17      	ldr	r2, [pc, #92]	; (800a448 <HAL_UART_Receive_IT+0xa8>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d01f      	beq.n	800a42e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d018      	beq.n	800a42e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	613b      	str	r3, [r7, #16]
   return(result);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	623b      	str	r3, [r7, #32]
 800a41c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41e:	69f9      	ldr	r1, [r7, #28]
 800a420:	6a3a      	ldr	r2, [r7, #32]
 800a422:	e841 2300 	strex	r3, r2, [r1]
 800a426:	61bb      	str	r3, [r7, #24]
   return(result);
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e6      	bne.n	800a3fc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	461a      	mov	r2, r3
 800a432:	68b9      	ldr	r1, [r7, #8]
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 fff3 	bl	800b420 <UART_Start_Receive_IT>
 800a43a:	4603      	mov	r3, r0
 800a43c:	e000      	b.n	800a440 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a43e:	2302      	movs	r3, #2
  }
}
 800a440:	4618      	mov	r0, r3
 800a442:	3728      	adds	r7, #40	; 0x28
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	40008000 	.word	0x40008000

0800a44c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b0ba      	sub	sp, #232	; 0xe8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a472:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a476:	f640 030f 	movw	r3, #2063	; 0x80f
 800a47a:	4013      	ands	r3, r2
 800a47c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d11b      	bne.n	800a4c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a48c:	f003 0320 	and.w	r3, r3, #32
 800a490:	2b00      	cmp	r3, #0
 800a492:	d015      	beq.n	800a4c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a498:	f003 0320 	and.w	r3, r3, #32
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d105      	bne.n	800a4ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d009      	beq.n	800a4c0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 82d6 	beq.w	800aa62 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	4798      	blx	r3
      }
      return;
 800a4be:	e2d0      	b.n	800aa62 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a4c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 811f 	beq.w	800a708 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a4ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a4ce:	4b8b      	ldr	r3, [pc, #556]	; (800a6fc <HAL_UART_IRQHandler+0x2b0>)
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a4d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a4da:	4b89      	ldr	r3, [pc, #548]	; (800a700 <HAL_UART_IRQHandler+0x2b4>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 8112 	beq.w	800a708 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d011      	beq.n	800a514 <HAL_UART_IRQHandler+0xc8>
 800a4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00b      	beq.n	800a514 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2201      	movs	r2, #1
 800a502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50a:	f043 0201 	orr.w	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d011      	beq.n	800a544 <HAL_UART_IRQHandler+0xf8>
 800a520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2202      	movs	r2, #2
 800a532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53a:	f043 0204 	orr.w	r2, r3, #4
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d011      	beq.n	800a574 <HAL_UART_IRQHandler+0x128>
 800a550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00b      	beq.n	800a574 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2204      	movs	r2, #4
 800a562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a56a:	f043 0202 	orr.w	r2, r3, #2
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d017      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d105      	bne.n	800a598 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a58c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a590:	4b5a      	ldr	r3, [pc, #360]	; (800a6fc <HAL_UART_IRQHandler+0x2b0>)
 800a592:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00b      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2208      	movs	r2, #8
 800a59e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5a6:	f043 0208 	orr.w	r2, r3, #8
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d012      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x196>
 800a5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00c      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5d8:	f043 0220 	orr.w	r2, r3, #32
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 823c 	beq.w	800aa66 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f2:	f003 0320 	and.w	r3, r3, #32
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d013      	beq.n	800a622 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5fe:	f003 0320 	and.w	r3, r3, #32
 800a602:	2b00      	cmp	r3, #0
 800a604:	d105      	bne.n	800a612 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a60a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d007      	beq.n	800a622 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a636:	2b40      	cmp	r3, #64	; 0x40
 800a638:	d005      	beq.n	800a646 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a63a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a63e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a642:	2b00      	cmp	r3, #0
 800a644:	d04f      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 f814 	bl	800b674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a656:	2b40      	cmp	r3, #64	; 0x40
 800a658:	d141      	bne.n	800a6de <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3308      	adds	r3, #8
 800a660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a668:	e853 3f00 	ldrex	r3, [r3]
 800a66c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3308      	adds	r3, #8
 800a682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a68a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a696:	e841 2300 	strex	r3, r2, [r1]
 800a69a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a69e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1d9      	bne.n	800a65a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d013      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b2:	4a14      	ldr	r2, [pc, #80]	; (800a704 <HAL_UART_IRQHandler+0x2b8>)
 800a6b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fc f850 	bl	8006760 <HAL_DMA_Abort_IT>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d017      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d4:	e00f      	b.n	800a6f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f9da 	bl	800aa90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6dc:	e00b      	b.n	800a6f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f9d6 	bl	800aa90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e4:	e007      	b.n	800a6f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f9d2 	bl	800aa90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a6f4:	e1b7      	b.n	800aa66 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f6:	bf00      	nop
    return;
 800a6f8:	e1b5      	b.n	800aa66 <HAL_UART_IRQHandler+0x61a>
 800a6fa:	bf00      	nop
 800a6fc:	10000001 	.word	0x10000001
 800a700:	04000120 	.word	0x04000120
 800a704:	0800b741 	.word	0x0800b741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	f040 814a 	bne.w	800a9a6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a716:	f003 0310 	and.w	r3, r3, #16
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 8143 	beq.w	800a9a6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a724:	f003 0310 	and.w	r3, r3, #16
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 813c 	beq.w	800a9a6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2210      	movs	r2, #16
 800a734:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a740:	2b40      	cmp	r3, #64	; 0x40
 800a742:	f040 80b5 	bne.w	800a8b0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a752:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 8187 	beq.w	800aa6a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a766:	429a      	cmp	r2, r3
 800a768:	f080 817f 	bcs.w	800aa6a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0320 	and.w	r3, r3, #32
 800a782:	2b00      	cmp	r3, #0
 800a784:	f040 8086 	bne.w	800a894 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a79c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a7b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a7be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a7ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1da      	bne.n	800a788 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a7e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7e4:	f023 0301 	bic.w	r3, r3, #1
 800a7e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1e1      	bne.n	800a7d2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3308      	adds	r3, #8
 800a814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a81e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3308      	adds	r3, #8
 800a82e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a832:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a834:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e3      	bne.n	800a80e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a864:	f023 0310 	bic.w	r3, r3, #16
 800a868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	461a      	mov	r2, r3
 800a872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a876:	65bb      	str	r3, [r7, #88]	; 0x58
 800a878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a87c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1e4      	bne.n	800a854 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fb ff0a 	bl	80066a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8fb 	bl	800aaa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8ae:	e0dc      	b.n	800aa6a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 80ce 	beq.w	800aa6e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a8d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 80c9 	beq.w	800aa6e <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	e853 3f00 	ldrex	r3, [r3]
 800a8e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a900:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e4      	bne.n	800a8dc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3308      	adds	r3, #8
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	623b      	str	r3, [r7, #32]
   return(result);
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a928:	f023 0301 	bic.w	r3, r3, #1
 800a92c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a93a:	633a      	str	r2, [r7, #48]	; 0x30
 800a93c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e1      	bne.n	800a912 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	e853 3f00 	ldrex	r3, [r3]
 800a96e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f023 0310 	bic.w	r3, r3, #16
 800a976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a984:	61fb      	str	r3, [r7, #28]
 800a986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	69b9      	ldr	r1, [r7, #24]
 800a98a:	69fa      	ldr	r2, [r7, #28]
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	617b      	str	r3, [r7, #20]
   return(result);
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e4      	bne.n	800a962 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f880 	bl	800aaa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9a4:	e063      	b.n	800aa6e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00e      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x584>
 800a9b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d008      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a9c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 fb5f 	bl	800c08c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9ce:	e051      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d014      	beq.n	800aa06 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d105      	bne.n	800a9f4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d03a      	beq.n	800aa72 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
    }
    return;
 800aa04:	e035      	b.n	800aa72 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d009      	beq.n	800aa26 <HAL_UART_IRQHandler+0x5da>
 800aa12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fea4 	bl	800b76c <UART_EndTransmit_IT>
    return;
 800aa24:	e026      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <HAL_UART_IRQHandler+0x5fa>
 800aa32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 fb38 	bl	800c0b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa44:	e016      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d010      	beq.n	800aa74 <HAL_UART_IRQHandler+0x628>
 800aa52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da0c      	bge.n	800aa74 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 fb20 	bl	800c0a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa60:	e008      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
      return;
 800aa62:	bf00      	nop
 800aa64:	e006      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
    return;
 800aa66:	bf00      	nop
 800aa68:	e004      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
      return;
 800aa6a:	bf00      	nop
 800aa6c:	e002      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
      return;
 800aa6e:	bf00      	nop
 800aa70:	e000      	b.n	800aa74 <HAL_UART_IRQHandler+0x628>
    return;
 800aa72:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800aa74:	37e8      	adds	r7, #232	; 0xe8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop

0800aa7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aabc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aac0:	b08c      	sub	sp, #48	; 0x30
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	431a      	orrs	r2, r3
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	431a      	orrs	r2, r3
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	4baa      	ldr	r3, [pc, #680]	; (800ad94 <UART_SetConfig+0x2d8>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	6812      	ldr	r2, [r2, #0]
 800aaf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaf4:	430b      	orrs	r3, r1
 800aaf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	430a      	orrs	r2, r1
 800ab0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a9f      	ldr	r2, [pc, #636]	; (800ad98 <UART_SetConfig+0x2dc>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d004      	beq.n	800ab28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab24:	4313      	orrs	r3, r2
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ab32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	6812      	ldr	r2, [r2, #0]
 800ab3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab3c:	430b      	orrs	r3, r1
 800ab3e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	f023 010f 	bic.w	r1, r3, #15
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a90      	ldr	r2, [pc, #576]	; (800ad9c <UART_SetConfig+0x2e0>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d125      	bne.n	800abac <UART_SetConfig+0xf0>
 800ab60:	4b8f      	ldr	r3, [pc, #572]	; (800ada0 <UART_SetConfig+0x2e4>)
 800ab62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab66:	f003 0303 	and.w	r3, r3, #3
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d81a      	bhi.n	800aba4 <UART_SetConfig+0xe8>
 800ab6e:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <UART_SetConfig+0xb8>)
 800ab70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800ab95 	.word	0x0800ab95
 800ab7c:	0800ab8d 	.word	0x0800ab8d
 800ab80:	0800ab9d 	.word	0x0800ab9d
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab8a:	e116      	b.n	800adba <UART_SetConfig+0x2fe>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab92:	e112      	b.n	800adba <UART_SetConfig+0x2fe>
 800ab94:	2304      	movs	r3, #4
 800ab96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab9a:	e10e      	b.n	800adba <UART_SetConfig+0x2fe>
 800ab9c:	2308      	movs	r3, #8
 800ab9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aba2:	e10a      	b.n	800adba <UART_SetConfig+0x2fe>
 800aba4:	2310      	movs	r3, #16
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abaa:	e106      	b.n	800adba <UART_SetConfig+0x2fe>
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a7c      	ldr	r2, [pc, #496]	; (800ada4 <UART_SetConfig+0x2e8>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d138      	bne.n	800ac28 <UART_SetConfig+0x16c>
 800abb6:	4b7a      	ldr	r3, [pc, #488]	; (800ada0 <UART_SetConfig+0x2e4>)
 800abb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abbc:	f003 030c 	and.w	r3, r3, #12
 800abc0:	2b0c      	cmp	r3, #12
 800abc2:	d82d      	bhi.n	800ac20 <UART_SetConfig+0x164>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <UART_SetConfig+0x110>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800ac01 	.word	0x0800ac01
 800abd0:	0800ac21 	.word	0x0800ac21
 800abd4:	0800ac21 	.word	0x0800ac21
 800abd8:	0800ac21 	.word	0x0800ac21
 800abdc:	0800ac11 	.word	0x0800ac11
 800abe0:	0800ac21 	.word	0x0800ac21
 800abe4:	0800ac21 	.word	0x0800ac21
 800abe8:	0800ac21 	.word	0x0800ac21
 800abec:	0800ac09 	.word	0x0800ac09
 800abf0:	0800ac21 	.word	0x0800ac21
 800abf4:	0800ac21 	.word	0x0800ac21
 800abf8:	0800ac21 	.word	0x0800ac21
 800abfc:	0800ac19 	.word	0x0800ac19
 800ac00:	2300      	movs	r3, #0
 800ac02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac06:	e0d8      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac0e:	e0d4      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac10:	2304      	movs	r3, #4
 800ac12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac16:	e0d0      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac18:	2308      	movs	r3, #8
 800ac1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac1e:	e0cc      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac26:	e0c8      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a5e      	ldr	r2, [pc, #376]	; (800ada8 <UART_SetConfig+0x2ec>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d125      	bne.n	800ac7e <UART_SetConfig+0x1c2>
 800ac32:	4b5b      	ldr	r3, [pc, #364]	; (800ada0 <UART_SetConfig+0x2e4>)
 800ac34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ac3c:	2b30      	cmp	r3, #48	; 0x30
 800ac3e:	d016      	beq.n	800ac6e <UART_SetConfig+0x1b2>
 800ac40:	2b30      	cmp	r3, #48	; 0x30
 800ac42:	d818      	bhi.n	800ac76 <UART_SetConfig+0x1ba>
 800ac44:	2b20      	cmp	r3, #32
 800ac46:	d00a      	beq.n	800ac5e <UART_SetConfig+0x1a2>
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d814      	bhi.n	800ac76 <UART_SetConfig+0x1ba>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <UART_SetConfig+0x19a>
 800ac50:	2b10      	cmp	r3, #16
 800ac52:	d008      	beq.n	800ac66 <UART_SetConfig+0x1aa>
 800ac54:	e00f      	b.n	800ac76 <UART_SetConfig+0x1ba>
 800ac56:	2300      	movs	r3, #0
 800ac58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac5c:	e0ad      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac64:	e0a9      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac66:	2304      	movs	r3, #4
 800ac68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6c:	e0a5      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac6e:	2308      	movs	r3, #8
 800ac70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac74:	e0a1      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac76:	2310      	movs	r3, #16
 800ac78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac7c:	e09d      	b.n	800adba <UART_SetConfig+0x2fe>
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a4a      	ldr	r2, [pc, #296]	; (800adac <UART_SetConfig+0x2f0>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d125      	bne.n	800acd4 <UART_SetConfig+0x218>
 800ac88:	4b45      	ldr	r3, [pc, #276]	; (800ada0 <UART_SetConfig+0x2e4>)
 800ac8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac92:	2bc0      	cmp	r3, #192	; 0xc0
 800ac94:	d016      	beq.n	800acc4 <UART_SetConfig+0x208>
 800ac96:	2bc0      	cmp	r3, #192	; 0xc0
 800ac98:	d818      	bhi.n	800accc <UART_SetConfig+0x210>
 800ac9a:	2b80      	cmp	r3, #128	; 0x80
 800ac9c:	d00a      	beq.n	800acb4 <UART_SetConfig+0x1f8>
 800ac9e:	2b80      	cmp	r3, #128	; 0x80
 800aca0:	d814      	bhi.n	800accc <UART_SetConfig+0x210>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <UART_SetConfig+0x1f0>
 800aca6:	2b40      	cmp	r3, #64	; 0x40
 800aca8:	d008      	beq.n	800acbc <UART_SetConfig+0x200>
 800acaa:	e00f      	b.n	800accc <UART_SetConfig+0x210>
 800acac:	2300      	movs	r3, #0
 800acae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acb2:	e082      	b.n	800adba <UART_SetConfig+0x2fe>
 800acb4:	2302      	movs	r3, #2
 800acb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acba:	e07e      	b.n	800adba <UART_SetConfig+0x2fe>
 800acbc:	2304      	movs	r3, #4
 800acbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acc2:	e07a      	b.n	800adba <UART_SetConfig+0x2fe>
 800acc4:	2308      	movs	r3, #8
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acca:	e076      	b.n	800adba <UART_SetConfig+0x2fe>
 800accc:	2310      	movs	r3, #16
 800acce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acd2:	e072      	b.n	800adba <UART_SetConfig+0x2fe>
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a35      	ldr	r2, [pc, #212]	; (800adb0 <UART_SetConfig+0x2f4>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d12a      	bne.n	800ad34 <UART_SetConfig+0x278>
 800acde:	4b30      	ldr	r3, [pc, #192]	; (800ada0 <UART_SetConfig+0x2e4>)
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ace8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acec:	d01a      	beq.n	800ad24 <UART_SetConfig+0x268>
 800acee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acf2:	d81b      	bhi.n	800ad2c <UART_SetConfig+0x270>
 800acf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf8:	d00c      	beq.n	800ad14 <UART_SetConfig+0x258>
 800acfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acfe:	d815      	bhi.n	800ad2c <UART_SetConfig+0x270>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <UART_SetConfig+0x250>
 800ad04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad08:	d008      	beq.n	800ad1c <UART_SetConfig+0x260>
 800ad0a:	e00f      	b.n	800ad2c <UART_SetConfig+0x270>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad12:	e052      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad14:	2302      	movs	r3, #2
 800ad16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad1a:	e04e      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad22:	e04a      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad2a:	e046      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad32:	e042      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a17      	ldr	r2, [pc, #92]	; (800ad98 <UART_SetConfig+0x2dc>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d13a      	bne.n	800adb4 <UART_SetConfig+0x2f8>
 800ad3e:	4b18      	ldr	r3, [pc, #96]	; (800ada0 <UART_SetConfig+0x2e4>)
 800ad40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad4c:	d01a      	beq.n	800ad84 <UART_SetConfig+0x2c8>
 800ad4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad52:	d81b      	bhi.n	800ad8c <UART_SetConfig+0x2d0>
 800ad54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad58:	d00c      	beq.n	800ad74 <UART_SetConfig+0x2b8>
 800ad5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad5e:	d815      	bhi.n	800ad8c <UART_SetConfig+0x2d0>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <UART_SetConfig+0x2b0>
 800ad64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad68:	d008      	beq.n	800ad7c <UART_SetConfig+0x2c0>
 800ad6a:	e00f      	b.n	800ad8c <UART_SetConfig+0x2d0>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad72:	e022      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad74:	2302      	movs	r3, #2
 800ad76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad7a:	e01e      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad82:	e01a      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad84:	2308      	movs	r3, #8
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad8a:	e016      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad92:	e012      	b.n	800adba <UART_SetConfig+0x2fe>
 800ad94:	cfff69f3 	.word	0xcfff69f3
 800ad98:	40008000 	.word	0x40008000
 800ad9c:	40013800 	.word	0x40013800
 800ada0:	40021000 	.word	0x40021000
 800ada4:	40004400 	.word	0x40004400
 800ada8:	40004800 	.word	0x40004800
 800adac:	40004c00 	.word	0x40004c00
 800adb0:	40005000 	.word	0x40005000
 800adb4:	2310      	movs	r3, #16
 800adb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4aae      	ldr	r2, [pc, #696]	; (800b078 <UART_SetConfig+0x5bc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	f040 8097 	bne.w	800aef4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d823      	bhi.n	800ae16 <UART_SetConfig+0x35a>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0x318>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800adf9 	.word	0x0800adf9
 800add8:	0800ae17 	.word	0x0800ae17
 800addc:	0800ae01 	.word	0x0800ae01
 800ade0:	0800ae17 	.word	0x0800ae17
 800ade4:	0800ae07 	.word	0x0800ae07
 800ade8:	0800ae17 	.word	0x0800ae17
 800adec:	0800ae17 	.word	0x0800ae17
 800adf0:	0800ae17 	.word	0x0800ae17
 800adf4:	0800ae0f 	.word	0x0800ae0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adf8:	f7fe f8e2 	bl	8008fc0 <HAL_RCC_GetPCLK1Freq>
 800adfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adfe:	e010      	b.n	800ae22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae00:	4b9e      	ldr	r3, [pc, #632]	; (800b07c <UART_SetConfig+0x5c0>)
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae04:	e00d      	b.n	800ae22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae06:	f7fe f843 	bl	8008e90 <HAL_RCC_GetSysClockFreq>
 800ae0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae0c:	e009      	b.n	800ae22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae14:	e005      	b.n	800ae22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 8130 	beq.w	800b08a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	4a94      	ldr	r2, [pc, #592]	; (800b080 <UART_SetConfig+0x5c4>)
 800ae30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae34:	461a      	mov	r2, r3
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	4613      	mov	r3, r2
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	4413      	add	r3, r2
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d305      	bcc.n	800ae5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d903      	bls.n	800ae62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae60:	e113      	b.n	800b08a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	2200      	movs	r2, #0
 800ae66:	60bb      	str	r3, [r7, #8]
 800ae68:	60fa      	str	r2, [r7, #12]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	4a84      	ldr	r2, [pc, #528]	; (800b080 <UART_SetConfig+0x5c4>)
 800ae70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	2200      	movs	r2, #0
 800ae78:	603b      	str	r3, [r7, #0]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae84:	f7f5 fea8 	bl	8000bd8 <__aeabi_uldivmod>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	f04f 0200 	mov.w	r2, #0
 800ae94:	f04f 0300 	mov.w	r3, #0
 800ae98:	020b      	lsls	r3, r1, #8
 800ae9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae9e:	0202      	lsls	r2, r0, #8
 800aea0:	6979      	ldr	r1, [r7, #20]
 800aea2:	6849      	ldr	r1, [r1, #4]
 800aea4:	0849      	lsrs	r1, r1, #1
 800aea6:	2000      	movs	r0, #0
 800aea8:	460c      	mov	r4, r1
 800aeaa:	4605      	mov	r5, r0
 800aeac:	eb12 0804 	adds.w	r8, r2, r4
 800aeb0:	eb43 0905 	adc.w	r9, r3, r5
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	469a      	mov	sl, r3
 800aebc:	4693      	mov	fp, r2
 800aebe:	4652      	mov	r2, sl
 800aec0:	465b      	mov	r3, fp
 800aec2:	4640      	mov	r0, r8
 800aec4:	4649      	mov	r1, r9
 800aec6:	f7f5 fe87 	bl	8000bd8 <__aeabi_uldivmod>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4613      	mov	r3, r2
 800aed0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aed8:	d308      	bcc.n	800aeec <UART_SetConfig+0x430>
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aee0:	d204      	bcs.n	800aeec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6a3a      	ldr	r2, [r7, #32]
 800aee8:	60da      	str	r2, [r3, #12]
 800aeea:	e0ce      	b.n	800b08a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aef2:	e0ca      	b.n	800b08a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aefc:	d166      	bne.n	800afcc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aefe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af02:	2b08      	cmp	r3, #8
 800af04:	d827      	bhi.n	800af56 <UART_SetConfig+0x49a>
 800af06:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <UART_SetConfig+0x450>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af39 	.word	0x0800af39
 800af14:	0800af41 	.word	0x0800af41
 800af18:	0800af57 	.word	0x0800af57
 800af1c:	0800af47 	.word	0x0800af47
 800af20:	0800af57 	.word	0x0800af57
 800af24:	0800af57 	.word	0x0800af57
 800af28:	0800af57 	.word	0x0800af57
 800af2c:	0800af4f 	.word	0x0800af4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af30:	f7fe f846 	bl	8008fc0 <HAL_RCC_GetPCLK1Freq>
 800af34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af36:	e014      	b.n	800af62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af38:	f7fe f858 	bl	8008fec <HAL_RCC_GetPCLK2Freq>
 800af3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af3e:	e010      	b.n	800af62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af40:	4b4e      	ldr	r3, [pc, #312]	; (800b07c <UART_SetConfig+0x5c0>)
 800af42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af44:	e00d      	b.n	800af62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af46:	f7fd ffa3 	bl	8008e90 <HAL_RCC_GetSysClockFreq>
 800af4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af4c:	e009      	b.n	800af62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af54:	e005      	b.n	800af62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af56:	2300      	movs	r3, #0
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 8090 	beq.w	800b08a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	4a44      	ldr	r2, [pc, #272]	; (800b080 <UART_SetConfig+0x5c4>)
 800af70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af74:	461a      	mov	r2, r3
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	fbb3 f3f2 	udiv	r3, r3, r2
 800af7c:	005a      	lsls	r2, r3, #1
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	085b      	lsrs	r3, r3, #1
 800af84:	441a      	add	r2, r3
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	2b0f      	cmp	r3, #15
 800af94:	d916      	bls.n	800afc4 <UART_SetConfig+0x508>
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af9c:	d212      	bcs.n	800afc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	f023 030f 	bic.w	r3, r3, #15
 800afa6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	085b      	lsrs	r3, r3, #1
 800afac:	b29b      	uxth	r3, r3
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	8bfb      	ldrh	r3, [r7, #30]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	8bfa      	ldrh	r2, [r7, #30]
 800afc0:	60da      	str	r2, [r3, #12]
 800afc2:	e062      	b.n	800b08a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800afca:	e05e      	b.n	800b08a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d828      	bhi.n	800b026 <UART_SetConfig+0x56a>
 800afd4:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <UART_SetConfig+0x520>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b009 	.word	0x0800b009
 800afe4:	0800b011 	.word	0x0800b011
 800afe8:	0800b027 	.word	0x0800b027
 800afec:	0800b017 	.word	0x0800b017
 800aff0:	0800b027 	.word	0x0800b027
 800aff4:	0800b027 	.word	0x0800b027
 800aff8:	0800b027 	.word	0x0800b027
 800affc:	0800b01f 	.word	0x0800b01f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b000:	f7fd ffde 	bl	8008fc0 <HAL_RCC_GetPCLK1Freq>
 800b004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b006:	e014      	b.n	800b032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b008:	f7fd fff0 	bl	8008fec <HAL_RCC_GetPCLK2Freq>
 800b00c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b00e:	e010      	b.n	800b032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b010:	4b1a      	ldr	r3, [pc, #104]	; (800b07c <UART_SetConfig+0x5c0>)
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b014:	e00d      	b.n	800b032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b016:	f7fd ff3b 	bl	8008e90 <HAL_RCC_GetSysClockFreq>
 800b01a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b01c:	e009      	b.n	800b032 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b01e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b024:	e005      	b.n	800b032 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b030:	bf00      	nop
    }

    if (pclk != 0U)
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d028      	beq.n	800b08a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	4a10      	ldr	r2, [pc, #64]	; (800b080 <UART_SetConfig+0x5c4>)
 800b03e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b042:	461a      	mov	r2, r3
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	fbb3 f2f2 	udiv	r2, r3, r2
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	085b      	lsrs	r3, r3, #1
 800b050:	441a      	add	r2, r3
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	fbb2 f3f3 	udiv	r3, r2, r3
 800b05a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	2b0f      	cmp	r3, #15
 800b060:	d910      	bls.n	800b084 <UART_SetConfig+0x5c8>
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b068:	d20c      	bcs.n	800b084 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	60da      	str	r2, [r3, #12]
 800b074:	e009      	b.n	800b08a <UART_SetConfig+0x5ce>
 800b076:	bf00      	nop
 800b078:	40008000 	.word	0x40008000
 800b07c:	00f42400 	.word	0x00f42400
 800b080:	08014d84 	.word	0x08014d84
      }
      else
      {
        ret = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	2201      	movs	r2, #1
 800b096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2200      	movs	r2, #0
 800b09e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b0a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3730      	adds	r7, #48	; 0x30
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b0b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00a      	beq.n	800b0de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	430a      	orrs	r2, r1
 800b120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	f003 0308 	and.w	r3, r3, #8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	f003 0310 	and.w	r3, r3, #16
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01a      	beq.n	800b1ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1b2:	d10a      	bne.n	800b1ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	605a      	str	r2, [r3, #4]
  }
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af02      	add	r7, sp, #8
 800b1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b208:	f7fb f93c 	bl	8006484 <HAL_GetTick>
 800b20c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0308 	and.w	r3, r3, #8
 800b218:	2b08      	cmp	r3, #8
 800b21a:	d10e      	bne.n	800b23a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b21c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f82f 	bl	800b28e <UART_WaitOnFlagUntilTimeout>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b236:	2303      	movs	r3, #3
 800b238:	e025      	b.n	800b286 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b04      	cmp	r3, #4
 800b246:	d10e      	bne.n	800b266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f819 	bl	800b28e <UART_WaitOnFlagUntilTimeout>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e00f      	b.n	800b286 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2220      	movs	r2, #32
 800b26a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2220      	movs	r2, #32
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b09c      	sub	sp, #112	; 0x70
 800b292:	af00      	add	r7, sp, #0
 800b294:	60f8      	str	r0, [r7, #12]
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	603b      	str	r3, [r7, #0]
 800b29a:	4613      	mov	r3, r2
 800b29c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b29e:	e0a9      	b.n	800b3f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	f000 80a5 	beq.w	800b3f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2aa:	f7fb f8eb 	bl	8006484 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d302      	bcc.n	800b2c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b2ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d140      	bne.n	800b342 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2c8:	e853 3f00 	ldrex	r3, [r3]
 800b2cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2d4:	667b      	str	r3, [r7, #100]	; 0x64
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2e6:	e841 2300 	strex	r3, r2, [r1]
 800b2ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1e6      	bne.n	800b2c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	f023 0301 	bic.w	r3, r3, #1
 800b308:	663b      	str	r3, [r7, #96]	; 0x60
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3308      	adds	r3, #8
 800b310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b312:	64ba      	str	r2, [r7, #72]	; 0x48
 800b314:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e5      	bne.n	800b2f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2220      	movs	r2, #32
 800b32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b33e:	2303      	movs	r3, #3
 800b340:	e069      	b.n	800b416 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d051      	beq.n	800b3f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	69db      	ldr	r3, [r3, #28]
 800b356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b35a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b35e:	d149      	bne.n	800b3f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b368:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	e853 3f00 	ldrex	r3, [r3]
 800b376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b37e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	461a      	mov	r2, r3
 800b386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b388:	637b      	str	r3, [r7, #52]	; 0x34
 800b38a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b38e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b390:	e841 2300 	strex	r3, r2, [r1]
 800b394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e6      	bne.n	800b36a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f023 0301 	bic.w	r3, r3, #1
 800b3b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3bc:	623a      	str	r2, [r7, #32]
 800b3be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	69f9      	ldr	r1, [r7, #28]
 800b3c2:	6a3a      	ldr	r2, [r7, #32]
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e5      	bne.n	800b39c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2220      	movs	r2, #32
 800b3dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e010      	b.n	800b416 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	69da      	ldr	r2, [r3, #28]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	429a      	cmp	r2, r3
 800b402:	bf0c      	ite	eq
 800b404:	2301      	moveq	r3, #1
 800b406:	2300      	movne	r3, #0
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	461a      	mov	r2, r3
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	429a      	cmp	r2, r3
 800b410:	f43f af46 	beq.w	800b2a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3770      	adds	r7, #112	; 0x70
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b420:	b480      	push	{r7}
 800b422:	b0a3      	sub	sp, #140	; 0x8c
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	88fa      	ldrh	r2, [r7, #6]
 800b438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	88fa      	ldrh	r2, [r7, #6]
 800b440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b452:	d10e      	bne.n	800b472 <UART_Start_Receive_IT+0x52>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d105      	bne.n	800b468 <UART_Start_Receive_IT+0x48>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b466:	e02d      	b.n	800b4c4 <UART_Start_Receive_IT+0xa4>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	22ff      	movs	r2, #255	; 0xff
 800b46c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b470:	e028      	b.n	800b4c4 <UART_Start_Receive_IT+0xa4>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10d      	bne.n	800b496 <UART_Start_Receive_IT+0x76>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d104      	bne.n	800b48c <UART_Start_Receive_IT+0x6c>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	22ff      	movs	r2, #255	; 0xff
 800b486:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b48a:	e01b      	b.n	800b4c4 <UART_Start_Receive_IT+0xa4>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	227f      	movs	r2, #127	; 0x7f
 800b490:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b494:	e016      	b.n	800b4c4 <UART_Start_Receive_IT+0xa4>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b49e:	d10d      	bne.n	800b4bc <UART_Start_Receive_IT+0x9c>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d104      	bne.n	800b4b2 <UART_Start_Receive_IT+0x92>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	227f      	movs	r2, #127	; 0x7f
 800b4ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b4b0:	e008      	b.n	800b4c4 <UART_Start_Receive_IT+0xa4>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	223f      	movs	r2, #63	; 0x3f
 800b4b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b4ba:	e003      	b.n	800b4c4 <UART_Start_Receive_IT+0xa4>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2222      	movs	r2, #34	; 0x22
 800b4d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	3308      	adds	r3, #8
 800b4da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4de:	e853 3f00 	ldrex	r3, [r3]
 800b4e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b4e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4e6:	f043 0301 	orr.w	r3, r3, #1
 800b4ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b4f8:	673a      	str	r2, [r7, #112]	; 0x70
 800b4fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b4fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b500:	e841 2300 	strex	r3, r2, [r1]
 800b504:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e3      	bne.n	800b4d4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b514:	d153      	bne.n	800b5be <UART_Start_Receive_IT+0x19e>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b51c:	88fa      	ldrh	r2, [r7, #6]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d34d      	bcc.n	800b5be <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b52a:	d107      	bne.n	800b53c <UART_Start_Receive_IT+0x11c>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d103      	bne.n	800b53c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	4a4b      	ldr	r2, [pc, #300]	; (800b664 <UART_Start_Receive_IT+0x244>)
 800b538:	671a      	str	r2, [r3, #112]	; 0x70
 800b53a:	e002      	b.n	800b542 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4a4a      	ldr	r2, [pc, #296]	; (800b668 <UART_Start_Receive_IT+0x248>)
 800b540:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d01a      	beq.n	800b588 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b55a:	e853 3f00 	ldrex	r3, [r3]
 800b55e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b574:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b576:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b578:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b57a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b57c:	e841 2300 	strex	r3, r2, [r1]
 800b580:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1e4      	bne.n	800b552 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3308      	adds	r3, #8
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b59e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b5a8:	64ba      	str	r2, [r7, #72]	; 0x48
 800b5aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e5      	bne.n	800b588 <UART_Start_Receive_IT+0x168>
 800b5bc:	e04a      	b.n	800b654 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c6:	d107      	bne.n	800b5d8 <UART_Start_Receive_IT+0x1b8>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d103      	bne.n	800b5d8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4a26      	ldr	r2, [pc, #152]	; (800b66c <UART_Start_Receive_IT+0x24c>)
 800b5d4:	671a      	str	r2, [r3, #112]	; 0x70
 800b5d6:	e002      	b.n	800b5de <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4a25      	ldr	r2, [pc, #148]	; (800b670 <UART_Start_Receive_IT+0x250>)
 800b5dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d019      	beq.n	800b622 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	e853 3f00 	ldrex	r3, [r3]
 800b5fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b602:	677b      	str	r3, [r7, #116]	; 0x74
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b60c:	637b      	str	r3, [r7, #52]	; 0x34
 800b60e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b614:	e841 2300 	strex	r3, r2, [r1]
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1e6      	bne.n	800b5ee <UART_Start_Receive_IT+0x1ce>
 800b620:	e018      	b.n	800b654 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	e853 3f00 	ldrex	r3, [r3]
 800b62e:	613b      	str	r3, [r7, #16]
   return(result);
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f043 0320 	orr.w	r3, r3, #32
 800b636:	67bb      	str	r3, [r7, #120]	; 0x78
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	461a      	mov	r2, r3
 800b63e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b640:	623b      	str	r3, [r7, #32]
 800b642:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b644:	69f9      	ldr	r1, [r7, #28]
 800b646:	6a3a      	ldr	r2, [r7, #32]
 800b648:	e841 2300 	strex	r3, r2, [r1]
 800b64c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1e6      	bne.n	800b622 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	378c      	adds	r7, #140	; 0x8c
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	0800bd89 	.word	0x0800bd89
 800b668:	0800ba8d 	.word	0x0800ba8d
 800b66c:	0800b927 	.word	0x0800b927
 800b670:	0800b7c3 	.word	0x0800b7c3

0800b674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b095      	sub	sp, #84	; 0x54
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b690:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69a:	643b      	str	r3, [r7, #64]	; 0x40
 800b69c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e6      	bne.n	800b67c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6c4:	f023 0301 	bic.w	r3, r3, #1
 800b6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6da:	e841 2300 	strex	r3, r2, [r1]
 800b6de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e3      	bne.n	800b6ae <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d118      	bne.n	800b720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	e853 3f00 	ldrex	r3, [r3]
 800b6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f023 0310 	bic.w	r3, r3, #16
 800b702:	647b      	str	r3, [r7, #68]	; 0x44
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	461a      	mov	r2, r3
 800b70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b70c:	61bb      	str	r3, [r7, #24]
 800b70e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b710:	6979      	ldr	r1, [r7, #20]
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	e841 2300 	strex	r3, r2, [r1]
 800b718:	613b      	str	r3, [r7, #16]
   return(result);
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e6      	bne.n	800b6ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2220      	movs	r2, #32
 800b724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b734:	bf00      	nop
 800b736:	3754      	adds	r7, #84	; 0x54
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff f996 	bl	800aa90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	60bb      	str	r3, [r7, #8]
   return(result);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b788:	61fb      	str	r3, [r7, #28]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	61bb      	str	r3, [r7, #24]
 800b794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b796:	6979      	ldr	r1, [r7, #20]
 800b798:	69ba      	ldr	r2, [r7, #24]
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	613b      	str	r3, [r7, #16]
   return(result);
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e6      	bne.n	800b774 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff f961 	bl	800aa7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ba:	bf00      	nop
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b096      	sub	sp, #88	; 0x58
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7da:	2b22      	cmp	r3, #34	; 0x22
 800b7dc:	f040 8095 	bne.w	800b90a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b7e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b7ee:	b2d9      	uxtb	r1, r3
 800b7f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fa:	400a      	ands	r2, r1
 800b7fc:	b2d2      	uxtb	r2, r2
 800b7fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b810:	b29b      	uxth	r3, r3
 800b812:	3b01      	subs	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b822:	b29b      	uxth	r3, r3
 800b824:	2b00      	cmp	r3, #0
 800b826:	d17a      	bne.n	800b91e <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b83c:	653b      	str	r3, [r7, #80]	; 0x50
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b846:	647b      	str	r3, [r7, #68]	; 0x44
 800b848:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b84e:	e841 2300 	strex	r3, r2, [r1]
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1e6      	bne.n	800b828 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	3308      	adds	r3, #8
 800b860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	e853 3f00 	ldrex	r3, [r3]
 800b868:	623b      	str	r3, [r7, #32]
   return(result);
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	f023 0301 	bic.w	r3, r3, #1
 800b870:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3308      	adds	r3, #8
 800b878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b87a:	633a      	str	r2, [r7, #48]	; 0x30
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b882:	e841 2300 	strex	r3, r2, [r1]
 800b886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1e5      	bne.n	800b85a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2220      	movs	r2, #32
 800b892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d12e      	bne.n	800b902 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	e853 3f00 	ldrex	r3, [r3]
 800b8b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 0310 	bic.w	r3, r3, #16
 800b8be:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c8:	61fb      	str	r3, [r7, #28]
 800b8ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8cc:	69b9      	ldr	r1, [r7, #24]
 800b8ce:	69fa      	ldr	r2, [r7, #28]
 800b8d0:	e841 2300 	strex	r3, r2, [r1]
 800b8d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1e6      	bne.n	800b8aa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	69db      	ldr	r3, [r3, #28]
 800b8e2:	f003 0310 	and.w	r3, r3, #16
 800b8e6:	2b10      	cmp	r3, #16
 800b8e8:	d103      	bne.n	800b8f2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2210      	movs	r2, #16
 800b8f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7ff f8d2 	bl	800aaa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b900:	e00d      	b.n	800b91e <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7fa fc52 	bl	80061ac <HAL_UART_RxCpltCallback>
}
 800b908:	e009      	b.n	800b91e <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	8b1b      	ldrh	r3, [r3, #24]
 800b910:	b29a      	uxth	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f042 0208 	orr.w	r2, r2, #8
 800b91a:	b292      	uxth	r2, r2
 800b91c:	831a      	strh	r2, [r3, #24]
}
 800b91e:	bf00      	nop
 800b920:	3758      	adds	r7, #88	; 0x58
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b096      	sub	sp, #88	; 0x58
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b934:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b93e:	2b22      	cmp	r3, #34	; 0x22
 800b940:	f040 8095 	bne.w	800ba6e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b94a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b952:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b954:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b958:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b95c:	4013      	ands	r3, r2
 800b95e:	b29a      	uxth	r2, r3
 800b960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b962:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b968:	1c9a      	adds	r2, r3, #2
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b974:	b29b      	uxth	r3, r3
 800b976:	3b01      	subs	r3, #1
 800b978:	b29a      	uxth	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b986:	b29b      	uxth	r3, r3
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d17a      	bne.n	800ba82 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b994:	e853 3f00 	ldrex	r3, [r3]
 800b998:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e6      	bne.n	800b98c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	f023 0301 	bic.w	r3, r3, #1
 800b9d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3308      	adds	r3, #8
 800b9dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9e6:	e841 2300 	strex	r3, r2, [r1]
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e5      	bne.n	800b9be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2220      	movs	r2, #32
 800b9f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d12e      	bne.n	800ba66 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	e853 3f00 	ldrex	r3, [r3]
 800ba1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f023 0310 	bic.w	r3, r3, #16
 800ba22:	647b      	str	r3, [r7, #68]	; 0x44
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba2c:	61bb      	str	r3, [r7, #24]
 800ba2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba30:	6979      	ldr	r1, [r7, #20]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	e841 2300 	strex	r3, r2, [r1]
 800ba38:	613b      	str	r3, [r7, #16]
   return(result);
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e6      	bne.n	800ba0e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	69db      	ldr	r3, [r3, #28]
 800ba46:	f003 0310 	and.w	r3, r3, #16
 800ba4a:	2b10      	cmp	r3, #16
 800ba4c:	d103      	bne.n	800ba56 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2210      	movs	r2, #16
 800ba54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff f820 	bl	800aaa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba64:	e00d      	b.n	800ba82 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7fa fba0 	bl	80061ac <HAL_UART_RxCpltCallback>
}
 800ba6c:	e009      	b.n	800ba82 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	8b1b      	ldrh	r3, [r3, #24]
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0208 	orr.w	r2, r2, #8
 800ba7e:	b292      	uxth	r2, r2
 800ba80:	831a      	strh	r2, [r3, #24]
}
 800ba82:	bf00      	nop
 800ba84:	3758      	adds	r7, #88	; 0x58
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b0a6      	sub	sp, #152	; 0x98
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba9a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	69db      	ldr	r3, [r3, #28]
 800baa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac2:	2b22      	cmp	r3, #34	; 0x22
 800bac4:	f040 814f 	bne.w	800bd66 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bace:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bad2:	e0f6      	b.n	800bcc2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bada:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bade:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bae2:	b2d9      	uxtb	r1, r3
 800bae4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baee:	400a      	ands	r2, r1
 800baf0:	b2d2      	uxtb	r2, r2
 800baf2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	3b01      	subs	r3, #1
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bb1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d053      	beq.n	800bbce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d011      	beq.n	800bb56 <UART_RxISR_8BIT_FIFOEN+0xca>
 800bb32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2201      	movs	r2, #1
 800bb44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb4c:	f043 0201 	orr.w	r2, r3, #1
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb5a:	f003 0302 	and.w	r3, r3, #2
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d011      	beq.n	800bb86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bb62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00b      	beq.n	800bb86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2202      	movs	r2, #2
 800bb74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb7c:	f043 0204 	orr.w	r2, r3, #4
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb8a:	f003 0304 	and.w	r3, r3, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d011      	beq.n	800bbb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bb92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00b      	beq.n	800bbb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2204      	movs	r2, #4
 800bba4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbac:	f043 0202 	orr.w	r2, r3, #2
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d006      	beq.n	800bbce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7fe ff65 	bl	800aa90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d173      	bne.n	800bcc2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbe2:	e853 3f00 	ldrex	r3, [r3]
 800bbe6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bbe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbfc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbfe:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc00:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bc02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc04:	e841 2300 	strex	r3, r2, [r1]
 800bc08:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bc0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1e4      	bne.n	800bbda <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3308      	adds	r3, #8
 800bc16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc26:	f023 0301 	bic.w	r3, r3, #1
 800bc2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3308      	adds	r3, #8
 800bc32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bc34:	657a      	str	r2, [r7, #84]	; 0x54
 800bc36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc3c:	e841 2300 	strex	r3, r2, [r1]
 800bc40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1e3      	bne.n	800bc10 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d12e      	bne.n	800bcbc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6c:	e853 3f00 	ldrex	r3, [r3]
 800bc70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	f023 0310 	bic.w	r3, r3, #16
 800bc78:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc82:	643b      	str	r3, [r7, #64]	; 0x40
 800bc84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc8a:	e841 2300 	strex	r3, r2, [r1]
 800bc8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e6      	bne.n	800bc64 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	69db      	ldr	r3, [r3, #28]
 800bc9c:	f003 0310 	and.w	r3, r3, #16
 800bca0:	2b10      	cmp	r3, #16
 800bca2:	d103      	bne.n	800bcac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2210      	movs	r2, #16
 800bcaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7fe fef5 	bl	800aaa4 <HAL_UARTEx_RxEventCallback>
 800bcba:	e002      	b.n	800bcc2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7fa fa75 	bl	80061ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bcc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d006      	beq.n	800bcd8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800bcca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f47f aefe 	bne.w	800bad4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bce2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d047      	beq.n	800bd7a <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bcf0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d240      	bcs.n	800bd7a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	e853 3f00 	ldrex	r3, [r3]
 800bd06:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd0e:	673b      	str	r3, [r7, #112]	; 0x70
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3308      	adds	r3, #8
 800bd16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bd18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd20:	e841 2300 	strex	r3, r2, [r1]
 800bd24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e5      	bne.n	800bcf8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a15      	ldr	r2, [pc, #84]	; (800bd84 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800bd30:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f043 0320 	orr.w	r3, r3, #32
 800bd46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd50:	61bb      	str	r3, [r7, #24]
 800bd52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	6979      	ldr	r1, [r7, #20]
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e6      	bne.n	800bd32 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd64:	e009      	b.n	800bd7a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	8b1b      	ldrh	r3, [r3, #24]
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f042 0208 	orr.w	r2, r2, #8
 800bd76:	b292      	uxth	r2, r2
 800bd78:	831a      	strh	r2, [r3, #24]
}
 800bd7a:	bf00      	nop
 800bd7c:	3798      	adds	r7, #152	; 0x98
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	0800b7c3 	.word	0x0800b7c3

0800bd88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b0a8      	sub	sp, #160	; 0xa0
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd96:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdbe:	2b22      	cmp	r3, #34	; 0x22
 800bdc0:	f040 8153 	bne.w	800c06a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bdca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bdce:	e0fa      	b.n	800bfc6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bdd6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800bde2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800bde6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bdea:	4013      	ands	r3, r2
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf8:	1c9a      	adds	r2, r3, #2
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be04:	b29b      	uxth	r3, r3
 800be06:	3b01      	subs	r3, #1
 800be08:	b29a      	uxth	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be1e:	f003 0307 	and.w	r3, r3, #7
 800be22:	2b00      	cmp	r3, #0
 800be24:	d053      	beq.n	800bece <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d011      	beq.n	800be56 <UART_RxISR_16BIT_FIFOEN+0xce>
 800be32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00b      	beq.n	800be56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2201      	movs	r2, #1
 800be44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be4c:	f043 0201 	orr.w	r2, r3, #1
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d011      	beq.n	800be86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800be62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00b      	beq.n	800be86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2202      	movs	r2, #2
 800be74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be7c:	f043 0204 	orr.w	r2, r3, #4
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be8a:	f003 0304 	and.w	r3, r3, #4
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d011      	beq.n	800beb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800be92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be96:	f003 0301 	and.w	r3, r3, #1
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00b      	beq.n	800beb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2204      	movs	r2, #4
 800bea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beac:	f043 0202 	orr.w	r2, r3, #2
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d006      	beq.n	800bece <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7fe fde5 	bl	800aa90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d175      	bne.n	800bfc6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bee2:	e853 3f00 	ldrex	r3, [r3]
 800bee6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800beee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800befc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800befe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf04:	e841 2300 	strex	r3, r2, [r1]
 800bf08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1e4      	bne.n	800beda <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3308      	adds	r3, #8
 800bf16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1a:	e853 3f00 	ldrex	r3, [r3]
 800bf1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf26:	f023 0301 	bic.w	r3, r3, #1
 800bf2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3308      	adds	r3, #8
 800bf34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf38:	65ba      	str	r2, [r7, #88]	; 0x58
 800bf3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf40:	e841 2300 	strex	r3, r2, [r1]
 800bf44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bf46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1e1      	bne.n	800bf10 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2220      	movs	r2, #32
 800bf50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d12e      	bne.n	800bfc0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf78:	f023 0310 	bic.w	r3, r3, #16
 800bf7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	461a      	mov	r2, r3
 800bf84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf86:	647b      	str	r3, [r7, #68]	; 0x44
 800bf88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e6      	bne.n	800bf68 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	f003 0310 	and.w	r3, r3, #16
 800bfa4:	2b10      	cmp	r3, #16
 800bfa6:	d103      	bne.n	800bfb0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2210      	movs	r2, #16
 800bfae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7fe fd73 	bl	800aaa4 <HAL_UARTEx_RxEventCallback>
 800bfbe:	e002      	b.n	800bfc6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7fa f8f3 	bl	80061ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bfc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d006      	beq.n	800bfdc <UART_RxISR_16BIT_FIFOEN+0x254>
 800bfce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f47f aefa 	bne.w	800bdd0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfe2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bfe6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d047      	beq.n	800c07e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bff4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d240      	bcs.n	800c07e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3308      	adds	r3, #8
 800c002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	623b      	str	r3, [r7, #32]
   return(result);
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c012:	677b      	str	r3, [r7, #116]	; 0x74
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3308      	adds	r3, #8
 800c01a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c01c:	633a      	str	r2, [r7, #48]	; 0x30
 800c01e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e5      	bne.n	800bffc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a15      	ldr	r2, [pc, #84]	; (800c088 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800c034:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	e853 3f00 	ldrex	r3, [r3]
 800c042:	60fb      	str	r3, [r7, #12]
   return(result);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f043 0320 	orr.w	r3, r3, #32
 800c04a:	673b      	str	r3, [r7, #112]	; 0x70
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	461a      	mov	r2, r3
 800c052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c054:	61fb      	str	r3, [r7, #28]
 800c056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c058:	69b9      	ldr	r1, [r7, #24]
 800c05a:	69fa      	ldr	r2, [r7, #28]
 800c05c:	e841 2300 	strex	r3, r2, [r1]
 800c060:	617b      	str	r3, [r7, #20]
   return(result);
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1e6      	bne.n	800c036 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c068:	e009      	b.n	800c07e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	8b1b      	ldrh	r3, [r3, #24]
 800c070:	b29a      	uxth	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f042 0208 	orr.w	r2, r2, #8
 800c07a:	b292      	uxth	r2, r2
 800c07c:	831a      	strh	r2, [r3, #24]
}
 800c07e:	bf00      	nop
 800c080:	37a0      	adds	r7, #160	; 0xa0
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	0800b927 	.word	0x0800b927

0800c08c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d101      	bne.n	800c0de <HAL_UARTEx_DisableFifoMode+0x16>
 800c0da:	2302      	movs	r3, #2
 800c0dc:	e027      	b.n	800c12e <HAL_UARTEx_DisableFifoMode+0x66>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2224      	movs	r2, #36	; 0x24
 800c0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f022 0201 	bic.w	r2, r2, #1
 800c104:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c10c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2220      	movs	r2, #32
 800c120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d101      	bne.n	800c152 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c14e:	2302      	movs	r3, #2
 800c150:	e02d      	b.n	800c1ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2224      	movs	r2, #36	; 0x24
 800c15e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f022 0201 	bic.w	r2, r2, #1
 800c178:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f850 	bl	800c234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d101      	bne.n	800c1ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	e02d      	b.n	800c22a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2224      	movs	r2, #36	; 0x24
 800c1da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f022 0201 	bic.w	r2, r2, #1
 800c1f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f812 	bl	800c234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2220      	movs	r2, #32
 800c21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c240:	2b00      	cmp	r3, #0
 800c242:	d108      	bne.n	800c256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c254:	e031      	b.n	800c2ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c256:	2308      	movs	r3, #8
 800c258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c25a:	2308      	movs	r3, #8
 800c25c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	0e5b      	lsrs	r3, r3, #25
 800c266:	b2db      	uxtb	r3, r3
 800c268:	f003 0307 	and.w	r3, r3, #7
 800c26c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	0f5b      	lsrs	r3, r3, #29
 800c276:	b2db      	uxtb	r3, r3
 800c278:	f003 0307 	and.w	r3, r3, #7
 800c27c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c27e:	7bbb      	ldrb	r3, [r7, #14]
 800c280:	7b3a      	ldrb	r2, [r7, #12]
 800c282:	4911      	ldr	r1, [pc, #68]	; (800c2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800c284:	5c8a      	ldrb	r2, [r1, r2]
 800c286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c28a:	7b3a      	ldrb	r2, [r7, #12]
 800c28c:	490f      	ldr	r1, [pc, #60]	; (800c2cc <UARTEx_SetNbDataToProcess+0x98>)
 800c28e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c290:	fb93 f3f2 	sdiv	r3, r3, r2
 800c294:	b29a      	uxth	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	7b7a      	ldrb	r2, [r7, #13]
 800c2a0:	4909      	ldr	r1, [pc, #36]	; (800c2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800c2a2:	5c8a      	ldrb	r2, [r1, r2]
 800c2a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c2a8:	7b7a      	ldrb	r2, [r7, #13]
 800c2aa:	4908      	ldr	r1, [pc, #32]	; (800c2cc <UARTEx_SetNbDataToProcess+0x98>)
 800c2ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c2ba:	bf00      	nop
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	08014d9c 	.word	0x08014d9c
 800c2cc:	08014da4 	.word	0x08014da4

0800c2d0 <__NVIC_SetPriority>:
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c2dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	db0a      	blt.n	800c2fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	490c      	ldr	r1, [pc, #48]	; (800c31c <__NVIC_SetPriority+0x4c>)
 800c2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2ee:	0112      	lsls	r2, r2, #4
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	440b      	add	r3, r1
 800c2f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c2f8:	e00a      	b.n	800c310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	4908      	ldr	r1, [pc, #32]	; (800c320 <__NVIC_SetPriority+0x50>)
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	f003 030f 	and.w	r3, r3, #15
 800c306:	3b04      	subs	r3, #4
 800c308:	0112      	lsls	r2, r2, #4
 800c30a:	b2d2      	uxtb	r2, r2
 800c30c:	440b      	add	r3, r1
 800c30e:	761a      	strb	r2, [r3, #24]
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	e000e100 	.word	0xe000e100
 800c320:	e000ed00 	.word	0xe000ed00

0800c324 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <SysTick_Handler+0x1c>)
 800c32a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c32c:	f002 fec6 	bl	800f0bc <xTaskGetSchedulerState>
 800c330:	4603      	mov	r3, r0
 800c332:	2b01      	cmp	r3, #1
 800c334:	d001      	beq.n	800c33a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c336:	f003 fde7 	bl	800ff08 <xPortSysTickHandler>
  }
}
 800c33a:	bf00      	nop
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	e000e010 	.word	0xe000e010

0800c344 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c348:	2100      	movs	r1, #0
 800c34a:	f06f 0004 	mvn.w	r0, #4
 800c34e:	f7ff ffbf 	bl	800c2d0 <__NVIC_SetPriority>
#endif
}
 800c352:	bf00      	nop
 800c354:	bd80      	pop	{r7, pc}
	...

0800c358 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c35e:	f3ef 8305 	mrs	r3, IPSR
 800c362:	603b      	str	r3, [r7, #0]
  return(result);
 800c364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c36a:	f06f 0305 	mvn.w	r3, #5
 800c36e:	607b      	str	r3, [r7, #4]
 800c370:	e00c      	b.n	800c38c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c372:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <osKernelInitialize+0x44>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d105      	bne.n	800c386 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c37a:	4b08      	ldr	r3, [pc, #32]	; (800c39c <osKernelInitialize+0x44>)
 800c37c:	2201      	movs	r2, #1
 800c37e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c380:	2300      	movs	r3, #0
 800c382:	607b      	str	r3, [r7, #4]
 800c384:	e002      	b.n	800c38c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c386:	f04f 33ff 	mov.w	r3, #4294967295
 800c38a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c38c:	687b      	ldr	r3, [r7, #4]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	20000668 	.word	0x20000668

0800c3a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3a6:	f3ef 8305 	mrs	r3, IPSR
 800c3aa:	603b      	str	r3, [r7, #0]
  return(result);
 800c3ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d003      	beq.n	800c3ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800c3b2:	f06f 0305 	mvn.w	r3, #5
 800c3b6:	607b      	str	r3, [r7, #4]
 800c3b8:	e010      	b.n	800c3dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c3ba:	4b0b      	ldr	r3, [pc, #44]	; (800c3e8 <osKernelStart+0x48>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d109      	bne.n	800c3d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c3c2:	f7ff ffbf 	bl	800c344 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c3c6:	4b08      	ldr	r3, [pc, #32]	; (800c3e8 <osKernelStart+0x48>)
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c3cc:	f002 f96e 	bl	800e6ac <vTaskStartScheduler>
      stat = osOK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	607b      	str	r3, [r7, #4]
 800c3d4:	e002      	b.n	800c3dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3dc:	687b      	ldr	r3, [r7, #4]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000668 	.word	0x20000668

0800c3ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3f2:	f3ef 8305 	mrs	r3, IPSR
 800c3f6:	603b      	str	r3, [r7, #0]
  return(result);
 800c3f8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c3fe:	f002 fa77 	bl	800e8f0 <xTaskGetTickCountFromISR>
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	e002      	b.n	800c40c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c406:	f002 fa63 	bl	800e8d0 <xTaskGetTickCount>
 800c40a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c40c:	687b      	ldr	r3, [r7, #4]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c416:	b580      	push	{r7, lr}
 800c418:	b08e      	sub	sp, #56	; 0x38
 800c41a:	af04      	add	r7, sp, #16
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c426:	f3ef 8305 	mrs	r3, IPSR
 800c42a:	617b      	str	r3, [r7, #20]
  return(result);
 800c42c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d17e      	bne.n	800c530 <osThreadNew+0x11a>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d07b      	beq.n	800c530 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c438:	2380      	movs	r3, #128	; 0x80
 800c43a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c43c:	2318      	movs	r3, #24
 800c43e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c440:	2300      	movs	r3, #0
 800c442:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c444:	f04f 33ff 	mov.w	r3, #4294967295
 800c448:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d045      	beq.n	800c4dc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <osThreadNew+0x48>
        name = attr->name;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d008      	beq.n	800c484 <osThreadNew+0x6e>
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	2b38      	cmp	r3, #56	; 0x38
 800c476:	d805      	bhi.n	800c484 <osThreadNew+0x6e>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <osThreadNew+0x72>
        return (NULL);
 800c484:	2300      	movs	r3, #0
 800c486:	e054      	b.n	800c532 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	695b      	ldr	r3, [r3, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	089b      	lsrs	r3, r3, #2
 800c496:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00e      	beq.n	800c4be <osThreadNew+0xa8>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	2b5b      	cmp	r3, #91	; 0x5b
 800c4a6:	d90a      	bls.n	800c4be <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d006      	beq.n	800c4be <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <osThreadNew+0xa8>
        mem = 1;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	61bb      	str	r3, [r7, #24]
 800c4bc:	e010      	b.n	800c4e0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10c      	bne.n	800c4e0 <osThreadNew+0xca>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d108      	bne.n	800c4e0 <osThreadNew+0xca>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d104      	bne.n	800c4e0 <osThreadNew+0xca>
          mem = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	e001      	b.n	800c4e0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d110      	bne.n	800c508 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4ee:	9202      	str	r2, [sp, #8]
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6a3a      	ldr	r2, [r7, #32]
 800c4fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f001 fdf9 	bl	800e0f4 <xTaskCreateStatic>
 800c502:	4603      	mov	r3, r0
 800c504:	613b      	str	r3, [r7, #16]
 800c506:	e013      	b.n	800c530 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d110      	bne.n	800c530 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c50e:	6a3b      	ldr	r3, [r7, #32]
 800c510:	b29a      	uxth	r2, r3
 800c512:	f107 0310 	add.w	r3, r7, #16
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f001 fe44 	bl	800e1ae <xTaskCreate>
 800c526:	4603      	mov	r3, r0
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d001      	beq.n	800c530 <osThreadNew+0x11a>
            hTask = NULL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c530:	693b      	ldr	r3, [r7, #16]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3728      	adds	r7, #40	; 0x28
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b086      	sub	sp, #24
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c546:	f3ef 8305 	mrs	r3, IPSR
 800c54a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c54c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <osThreadSuspend+0x20>
    stat = osErrorISR;
 800c552:	f06f 0305 	mvn.w	r3, #5
 800c556:	617b      	str	r3, [r7, #20]
 800c558:	e00b      	b.n	800c572 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d103      	bne.n	800c568 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800c560:	f06f 0303 	mvn.w	r3, #3
 800c564:	617b      	str	r3, [r7, #20]
 800c566:	e004      	b.n	800c572 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800c568:	2300      	movs	r3, #0
 800c56a:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800c56c:	6938      	ldr	r0, [r7, #16]
 800c56e:	f001 ff97 	bl	800e4a0 <vTaskSuspend>
  }

  return (stat);
 800c572:	697b      	ldr	r3, [r7, #20]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c588:	f3ef 8305 	mrs	r3, IPSR
 800c58c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c58e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <osThreadResume+0x20>
    stat = osErrorISR;
 800c594:	f06f 0305 	mvn.w	r3, #5
 800c598:	617b      	str	r3, [r7, #20]
 800c59a:	e00b      	b.n	800c5b4 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d103      	bne.n	800c5aa <osThreadResume+0x2e>
    stat = osErrorParameter;
 800c5a2:	f06f 0303 	mvn.w	r3, #3
 800c5a6:	617b      	str	r3, [r7, #20]
 800c5a8:	e004      	b.n	800c5b4 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800c5ae:	6938      	ldr	r0, [r7, #16]
 800c5b0:	f002 f81e 	bl	800e5f0 <vTaskResume>
  }

  return (stat);
 800c5b4:	697b      	ldr	r3, [r7, #20]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5c6:	f3ef 8305 	mrs	r3, IPSR
 800c5ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <osDelay+0x1c>
    stat = osErrorISR;
 800c5d2:	f06f 0305 	mvn.w	r3, #5
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	e007      	b.n	800c5ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f001 ff27 	bl	800e438 <vTaskDelay>
    }
  }

  return (stat);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c600:	f3ef 8305 	mrs	r3, IPSR
 800c604:	60fb      	str	r3, [r7, #12]
  return(result);
 800c606:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d12d      	bne.n	800c668 <osEventFlagsNew+0x74>
    mem = -1;
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295
 800c610:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d015      	beq.n	800c644 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <osEventFlagsNew+0x3a>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	2b1f      	cmp	r3, #31
 800c626:	d902      	bls.n	800c62e <osEventFlagsNew+0x3a>
        mem = 1;
 800c628:	2301      	movs	r3, #1
 800c62a:	613b      	str	r3, [r7, #16]
 800c62c:	e00c      	b.n	800c648 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d108      	bne.n	800c648 <osEventFlagsNew+0x54>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d104      	bne.n	800c648 <osEventFlagsNew+0x54>
          mem = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	613b      	str	r3, [r7, #16]
 800c642:	e001      	b.n	800c648 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d106      	bne.n	800c65c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 fb2c 	bl	800ccb0 <xEventGroupCreateStatic>
 800c658:	6178      	str	r0, [r7, #20]
 800c65a:	e005      	b.n	800c668 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c662:	f000 fb5c 	bl	800cd1e <xEventGroupCreate>
 800c666:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c668:	697b      	ldr	r3, [r7, #20]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <osEventFlagsSet+0x1e>
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c692:	f06f 0303 	mvn.w	r3, #3
 800c696:	617b      	str	r3, [r7, #20]
 800c698:	e028      	b.n	800c6ec <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c69a:	f3ef 8305 	mrs	r3, IPSR
 800c69e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d01d      	beq.n	800c6e2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c6aa:	f107 0308 	add.w	r3, r7, #8
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6938      	ldr	r0, [r7, #16]
 800c6b4:	f000 fcd6 	bl	800d064 <xEventGroupSetBitsFromISR>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d103      	bne.n	800c6c6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800c6be:	f06f 0302 	mvn.w	r3, #2
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	e012      	b.n	800c6ec <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00d      	beq.n	800c6ec <osEventFlagsSet+0x78>
 800c6d0:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <osEventFlagsSet+0x84>)
 800c6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	e004      	b.n	800c6ec <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6938      	ldr	r0, [r7, #16]
 800c6e6:	f000 fc03 	bl	800cef0 <xEventGroupSetBits>
 800c6ea:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800c6ec:	697b      	ldr	r3, [r7, #20]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08c      	sub	sp, #48	; 0x30
 800c700:	af02      	add	r7, sp, #8
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d004      	beq.n	800c71e <osEventFlagsWait+0x22>
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800c71e:	f06f 0303 	mvn.w	r3, #3
 800c722:	61fb      	str	r3, [r7, #28]
 800c724:	e04b      	b.n	800c7be <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c726:	f3ef 8305 	mrs	r3, IPSR
 800c72a:	617b      	str	r3, [r7, #20]
  return(result);
 800c72c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800c732:	f06f 0305 	mvn.w	r3, #5
 800c736:	61fb      	str	r3, [r7, #28]
 800c738:	e041      	b.n	800c7be <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800c744:	2301      	movs	r3, #1
 800c746:	627b      	str	r3, [r7, #36]	; 0x24
 800c748:	e001      	b.n	800c74e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f003 0302 	and.w	r3, r3, #2
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800c758:	2300      	movs	r3, #0
 800c75a:	623b      	str	r3, [r7, #32]
 800c75c:	e001      	b.n	800c762 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800c75e:	2301      	movs	r3, #1
 800c760:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	6a3a      	ldr	r2, [r7, #32]
 800c76a:	68b9      	ldr	r1, [r7, #8]
 800c76c:	69b8      	ldr	r0, [r7, #24]
 800c76e:	f000 faf1 	bl	800cd54 <xEventGroupWaitBits>
 800c772:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d010      	beq.n	800c7a0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	4013      	ands	r3, r2
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	429a      	cmp	r2, r3
 800c788:	d019      	beq.n	800c7be <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d003      	beq.n	800c798 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800c790:	f06f 0301 	mvn.w	r3, #1
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	e012      	b.n	800c7be <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c798:	f06f 0302 	mvn.w	r3, #2
 800c79c:	61fb      	str	r3, [r7, #28]
 800c79e:	e00e      	b.n	800c7be <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d109      	bne.n	800c7be <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d003      	beq.n	800c7b8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800c7b0:	f06f 0301 	mvn.w	r3, #1
 800c7b4:	61fb      	str	r3, [r7, #28]
 800c7b6:	e002      	b.n	800c7be <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c7b8:	f06f 0302 	mvn.w	r3, #2
 800c7bc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800c7be:	69fb      	ldr	r3, [r7, #28]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3728      	adds	r7, #40	; 0x28
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7d4:	f3ef 8305 	mrs	r3, IPSR
 800c7d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c7da:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d174      	bne.n	800c8ca <osMutexNew+0x102>
    if (attr != NULL) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <osMutexNew+0x26>
      type = attr->attr_bits;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	61bb      	str	r3, [r7, #24]
 800c7ec:	e001      	b.n	800c7f2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <osMutexNew+0x3a>
      rmtx = 1U;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	e001      	b.n	800c806 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c802:	2300      	movs	r3, #0
 800c804:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	f003 0308 	and.w	r3, r3, #8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d15c      	bne.n	800c8ca <osMutexNew+0x102>
      mem = -1;
 800c810:	f04f 33ff 	mov.w	r3, #4294967295
 800c814:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d015      	beq.n	800c848 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d006      	beq.n	800c832 <osMutexNew+0x6a>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	2b4f      	cmp	r3, #79	; 0x4f
 800c82a:	d902      	bls.n	800c832 <osMutexNew+0x6a>
          mem = 1;
 800c82c:	2301      	movs	r3, #1
 800c82e:	613b      	str	r3, [r7, #16]
 800c830:	e00c      	b.n	800c84c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d108      	bne.n	800c84c <osMutexNew+0x84>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d104      	bne.n	800c84c <osMutexNew+0x84>
            mem = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	613b      	str	r3, [r7, #16]
 800c846:	e001      	b.n	800c84c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d112      	bne.n	800c878 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d007      	beq.n	800c868 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	4619      	mov	r1, r3
 800c85e:	2004      	movs	r0, #4
 800c860:	f000 fe37 	bl	800d4d2 <xQueueCreateMutexStatic>
 800c864:	61f8      	str	r0, [r7, #28]
 800c866:	e016      	b.n	800c896 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	4619      	mov	r1, r3
 800c86e:	2001      	movs	r0, #1
 800c870:	f000 fe2f 	bl	800d4d2 <xQueueCreateMutexStatic>
 800c874:	61f8      	str	r0, [r7, #28]
 800c876:	e00e      	b.n	800c896 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10b      	bne.n	800c896 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d004      	beq.n	800c88e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c884:	2004      	movs	r0, #4
 800c886:	f000 fe0c 	bl	800d4a2 <xQueueCreateMutex>
 800c88a:	61f8      	str	r0, [r7, #28]
 800c88c:	e003      	b.n	800c896 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c88e:	2001      	movs	r0, #1
 800c890:	f000 fe07 	bl	800d4a2 <xQueueCreateMutex>
 800c894:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00c      	beq.n	800c8b6 <osMutexNew+0xee>
        if (attr != NULL) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <osMutexNew+0xe2>
          name = attr->name;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e001      	b.n	800c8ae <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c8ae:	68f9      	ldr	r1, [r7, #12]
 800c8b0:	69f8      	ldr	r0, [r7, #28]
 800c8b2:	f001 fbc1 	bl	800e038 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d006      	beq.n	800c8ca <osMutexNew+0x102>
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	f043 0301 	orr.w	r3, r3, #1
 800c8c8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c8ca:	69fb      	ldr	r3, [r7, #28]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3720      	adds	r7, #32
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f023 0301 	bic.w	r3, r3, #1
 800c8e4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8f2:	f3ef 8305 	mrs	r3, IPSR
 800c8f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8f8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d003      	beq.n	800c906 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c8fe:	f06f 0305 	mvn.w	r3, #5
 800c902:	617b      	str	r3, [r7, #20]
 800c904:	e02c      	b.n	800c960 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d103      	bne.n	800c914 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c90c:	f06f 0303 	mvn.w	r3, #3
 800c910:	617b      	str	r3, [r7, #20]
 800c912:	e025      	b.n	800c960 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d011      	beq.n	800c93e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6938      	ldr	r0, [r7, #16]
 800c91e:	f000 fe27 	bl	800d570 <xQueueTakeMutexRecursive>
 800c922:	4603      	mov	r3, r0
 800c924:	2b01      	cmp	r3, #1
 800c926:	d01b      	beq.n	800c960 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d003      	beq.n	800c936 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c92e:	f06f 0301 	mvn.w	r3, #1
 800c932:	617b      	str	r3, [r7, #20]
 800c934:	e014      	b.n	800c960 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c936:	f06f 0302 	mvn.w	r3, #2
 800c93a:	617b      	str	r3, [r7, #20]
 800c93c:	e010      	b.n	800c960 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6938      	ldr	r0, [r7, #16]
 800c942:	f001 f8c5 	bl	800dad0 <xQueueSemaphoreTake>
 800c946:	4603      	mov	r3, r0
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d009      	beq.n	800c960 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c952:	f06f 0301 	mvn.w	r3, #1
 800c956:	617b      	str	r3, [r7, #20]
 800c958:	e002      	b.n	800c960 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c95a:	f06f 0302 	mvn.w	r3, #2
 800c95e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c960:	697b      	ldr	r3, [r7, #20]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b086      	sub	sp, #24
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f023 0301 	bic.w	r3, r3, #1
 800c978:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c982:	2300      	movs	r3, #0
 800c984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c986:	f3ef 8305 	mrs	r3, IPSR
 800c98a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c98c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <osMutexRelease+0x30>
    stat = osErrorISR;
 800c992:	f06f 0305 	mvn.w	r3, #5
 800c996:	617b      	str	r3, [r7, #20]
 800c998:	e01f      	b.n	800c9da <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d103      	bne.n	800c9a8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c9a0:	f06f 0303 	mvn.w	r3, #3
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	e018      	b.n	800c9da <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d009      	beq.n	800c9c2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c9ae:	6938      	ldr	r0, [r7, #16]
 800c9b0:	f000 fdaa 	bl	800d508 <xQueueGiveMutexRecursive>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d00f      	beq.n	800c9da <osMutexRelease+0x70>
        stat = osErrorResource;
 800c9ba:	f06f 0302 	mvn.w	r3, #2
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e00b      	b.n	800c9da <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	6938      	ldr	r0, [r7, #16]
 800c9ca:	f000 fe07 	bl	800d5dc <xQueueGenericSend>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d002      	beq.n	800c9da <osMutexRelease+0x70>
        stat = osErrorResource;
 800c9d4:	f06f 0302 	mvn.w	r3, #2
 800c9d8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c9da:	697b      	ldr	r3, [r7, #20]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08a      	sub	sp, #40	; 0x28
 800c9e8:	af02      	add	r7, sp, #8
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9f4:	f3ef 8305 	mrs	r3, IPSR
 800c9f8:	613b      	str	r3, [r7, #16]
  return(result);
 800c9fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d15f      	bne.n	800cac0 <osMessageQueueNew+0xdc>
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d05c      	beq.n	800cac0 <osMessageQueueNew+0xdc>
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d059      	beq.n	800cac0 <osMessageQueueNew+0xdc>
    mem = -1;
 800ca0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d029      	beq.n	800ca6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <osMessageQueueNew+0x62>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	2b4f      	cmp	r3, #79	; 0x4f
 800ca26:	d90e      	bls.n	800ca46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00a      	beq.n	800ca46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	695a      	ldr	r2, [r3, #20]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	fb01 f303 	mul.w	r3, r1, r3
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d302      	bcc.n	800ca46 <osMessageQueueNew+0x62>
        mem = 1;
 800ca40:	2301      	movs	r3, #1
 800ca42:	61bb      	str	r3, [r7, #24]
 800ca44:	e014      	b.n	800ca70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d110      	bne.n	800ca70 <osMessageQueueNew+0x8c>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10c      	bne.n	800ca70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d108      	bne.n	800ca70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d104      	bne.n	800ca70 <osMessageQueueNew+0x8c>
          mem = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	61bb      	str	r3, [r7, #24]
 800ca6a:	e001      	b.n	800ca70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d10b      	bne.n	800ca8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691a      	ldr	r2, [r3, #16]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	2100      	movs	r1, #0
 800ca80:	9100      	str	r1, [sp, #0]
 800ca82:	68b9      	ldr	r1, [r7, #8]
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f000 fc1d 	bl	800d2c4 <xQueueGenericCreateStatic>
 800ca8a:	61f8      	str	r0, [r7, #28]
 800ca8c:	e008      	b.n	800caa0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d105      	bne.n	800caa0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ca94:	2200      	movs	r2, #0
 800ca96:	68b9      	ldr	r1, [r7, #8]
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f000 fc8b 	bl	800d3b4 <xQueueGenericCreate>
 800ca9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00c      	beq.n	800cac0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d003      	beq.n	800cab4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	e001      	b.n	800cab8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cab4:	2300      	movs	r3, #0
 800cab6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cab8:	6979      	ldr	r1, [r7, #20]
 800caba:	69f8      	ldr	r0, [r7, #28]
 800cabc:	f001 fabc 	bl	800e038 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cac0:	69fb      	ldr	r3, [r7, #28]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3720      	adds	r7, #32
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b088      	sub	sp, #32
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	603b      	str	r3, [r7, #0]
 800cad8:	4613      	mov	r3, r2
 800cada:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae4:	f3ef 8305 	mrs	r3, IPSR
 800cae8:	617b      	str	r3, [r7, #20]
  return(result);
 800caea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800caec:	2b00      	cmp	r3, #0
 800caee:	d028      	beq.n	800cb42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d005      	beq.n	800cb02 <osMessageQueuePut+0x36>
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d002      	beq.n	800cb02 <osMessageQueuePut+0x36>
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cb02:	f06f 0303 	mvn.w	r3, #3
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	e038      	b.n	800cb7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cb0e:	f107 0210 	add.w	r2, r7, #16
 800cb12:	2300      	movs	r3, #0
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	69b8      	ldr	r0, [r7, #24]
 800cb18:	f000 fe5e 	bl	800d7d8 <xQueueGenericSendFromISR>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d003      	beq.n	800cb2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cb22:	f06f 0302 	mvn.w	r3, #2
 800cb26:	61fb      	str	r3, [r7, #28]
 800cb28:	e028      	b.n	800cb7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d025      	beq.n	800cb7c <osMessageQueuePut+0xb0>
 800cb30:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <osMessageQueuePut+0xbc>)
 800cb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	e01c      	b.n	800cb7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <osMessageQueuePut+0x82>
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d103      	bne.n	800cb56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cb4e:	f06f 0303 	mvn.w	r3, #3
 800cb52:	61fb      	str	r3, [r7, #28]
 800cb54:	e012      	b.n	800cb7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cb56:	2300      	movs	r3, #0
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	68b9      	ldr	r1, [r7, #8]
 800cb5c:	69b8      	ldr	r0, [r7, #24]
 800cb5e:	f000 fd3d 	bl	800d5dc <xQueueGenericSend>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d009      	beq.n	800cb7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cb6e:	f06f 0301 	mvn.w	r3, #1
 800cb72:	61fb      	str	r3, [r7, #28]
 800cb74:	e002      	b.n	800cb7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cb76:	f06f 0302 	mvn.w	r3, #2
 800cb7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cb7c:	69fb      	ldr	r3, [r7, #28]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	e000ed04 	.word	0xe000ed04

0800cb8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cba2:	f3ef 8305 	mrs	r3, IPSR
 800cba6:	617b      	str	r3, [r7, #20]
  return(result);
 800cba8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d028      	beq.n	800cc00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d005      	beq.n	800cbc0 <osMessageQueueGet+0x34>
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d002      	beq.n	800cbc0 <osMessageQueueGet+0x34>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d003      	beq.n	800cbc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cbc0:	f06f 0303 	mvn.w	r3, #3
 800cbc4:	61fb      	str	r3, [r7, #28]
 800cbc6:	e037      	b.n	800cc38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cbcc:	f107 0310 	add.w	r3, r7, #16
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	68b9      	ldr	r1, [r7, #8]
 800cbd4:	69b8      	ldr	r0, [r7, #24]
 800cbd6:	f001 f887 	bl	800dce8 <xQueueReceiveFromISR>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d003      	beq.n	800cbe8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cbe0:	f06f 0302 	mvn.w	r3, #2
 800cbe4:	61fb      	str	r3, [r7, #28]
 800cbe6:	e027      	b.n	800cc38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d024      	beq.n	800cc38 <osMessageQueueGet+0xac>
 800cbee:	4b15      	ldr	r3, [pc, #84]	; (800cc44 <osMessageQueueGet+0xb8>)
 800cbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	e01b      	b.n	800cc38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d002      	beq.n	800cc0c <osMessageQueueGet+0x80>
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d103      	bne.n	800cc14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cc0c:	f06f 0303 	mvn.w	r3, #3
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	e011      	b.n	800cc38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	68b9      	ldr	r1, [r7, #8]
 800cc18:	69b8      	ldr	r0, [r7, #24]
 800cc1a:	f000 fe79 	bl	800d910 <xQueueReceive>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d009      	beq.n	800cc38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d003      	beq.n	800cc32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cc2a:	f06f 0301 	mvn.w	r3, #1
 800cc2e:	61fb      	str	r3, [r7, #28]
 800cc30:	e002      	b.n	800cc38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cc32:	f06f 0302 	mvn.w	r3, #2
 800cc36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cc38:	69fb      	ldr	r3, [r7, #28]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3720      	adds	r7, #32
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	e000ed04 	.word	0xe000ed04

0800cc48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4a07      	ldr	r2, [pc, #28]	; (800cc74 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	4a06      	ldr	r2, [pc, #24]	; (800cc78 <vApplicationGetIdleTaskMemory+0x30>)
 800cc5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2280      	movs	r2, #128	; 0x80
 800cc64:	601a      	str	r2, [r3, #0]
}
 800cc66:	bf00      	nop
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	2000066c 	.word	0x2000066c
 800cc78:	200006c8 	.word	0x200006c8

0800cc7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4a07      	ldr	r2, [pc, #28]	; (800cca8 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	4a06      	ldr	r2, [pc, #24]	; (800ccac <vApplicationGetTimerTaskMemory+0x30>)
 800cc92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc9a:	601a      	str	r2, [r3, #0]
}
 800cc9c:	bf00      	nop
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	200008c8 	.word	0x200008c8
 800ccac:	20000924 	.word	0x20000924

0800ccb0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10a      	bne.n	800ccd4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ccd0:	bf00      	nop
 800ccd2:	e7fe      	b.n	800ccd2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ccd4:	2320      	movs	r3, #32
 800ccd6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2b20      	cmp	r3, #32
 800ccdc:	d00a      	beq.n	800ccf4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	60fb      	str	r3, [r7, #12]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2200      	movs	r2, #0
 800cd02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	3304      	adds	r3, #4
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 f9bf 	bl	800d08c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2201      	movs	r2, #1
 800cd12:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800cd14:	697b      	ldr	r3, [r7, #20]
	}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b082      	sub	sp, #8
 800cd22:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800cd24:	2020      	movs	r0, #32
 800cd26:	f003 f97f 	bl	8010028 <pvPortMalloc>
 800cd2a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00a      	beq.n	800cd48 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	3304      	adds	r3, #4
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 f9a5 	bl	800d08c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800cd48:	687b      	ldr	r3, [r7, #4]
	}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3708      	adds	r7, #8
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
	...

0800cd54 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b090      	sub	sp, #64	; 0x40
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <xEventGroupWaitBits+0x36>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	623b      	str	r3, [r7, #32]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00a      	beq.n	800cdaa <xEventGroupWaitBits+0x56>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	61fb      	str	r3, [r7, #28]
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10a      	bne.n	800cdc6 <xEventGroupWaitBits+0x72>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	61bb      	str	r3, [r7, #24]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdc6:	f002 f979 	bl	800f0bc <xTaskGetSchedulerState>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d102      	bne.n	800cdd6 <xEventGroupWaitBits+0x82>
 800cdd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <xEventGroupWaitBits+0x86>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e000      	b.n	800cddc <xEventGroupWaitBits+0x88>
 800cdda:	2300      	movs	r3, #0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10a      	bne.n	800cdf6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	617b      	str	r3, [r7, #20]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800cdf6:	f001 fcbf 	bl	800e778 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800cdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce06:	f000 f90b 	bl	800d020 <prvTestWaitCondition>
 800ce0a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00e      	beq.n	800ce30 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d028      	beq.n	800ce72 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ce20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	43db      	mvns	r3, r3
 800ce28:	401a      	ands	r2, r3
 800ce2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce2c:	601a      	str	r2, [r3, #0]
 800ce2e:	e020      	b.n	800ce72 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800ce30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d104      	bne.n	800ce40 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ce3e:	e018      	b.n	800ce72 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce4c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d003      	beq.n	800ce5c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce5a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ce5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5e:	1d18      	adds	r0, r3, #4
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	4313      	orrs	r3, r2
 800ce66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce68:	4619      	mov	r1, r3
 800ce6a:	f001 fe8f 	bl	800eb8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800ce72:	f001 fc8f 	bl	800e794 <xTaskResumeAll>
 800ce76:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800ce78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d031      	beq.n	800cee2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d107      	bne.n	800ce94 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800ce84:	4b19      	ldr	r3, [pc, #100]	; (800ceec <xEventGroupWaitBits+0x198>)
 800ce86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800ce94:	f002 fa88 	bl	800f3a8 <uxTaskResetEventItemValue>
 800ce98:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800ce9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d11a      	bne.n	800ceda <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800cea4:	f002 ff9e 	bl	800fde4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800cea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	68b9      	ldr	r1, [r7, #8]
 800ceb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ceb4:	f000 f8b4 	bl	800d020 <prvTestWaitCondition>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d009      	beq.n	800ced2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d006      	beq.n	800ced2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800cec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	43db      	mvns	r3, r3
 800cecc:	401a      	ands	r2, r3
 800cece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ced2:	2301      	movs	r3, #1
 800ced4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800ced6:	f002 ffb5 	bl	800fe44 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ceda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cedc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800cee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3740      	adds	r7, #64	; 0x40
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	e000ed04 	.word	0xe000ed04

0800cef0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08e      	sub	sp, #56	; 0x38
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800cefa:	2300      	movs	r3, #0
 800cefc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800cf02:	2300      	movs	r3, #0
 800cf04:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10a      	bne.n	800cf22 <xEventGroupSetBits+0x32>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	613b      	str	r3, [r7, #16]
}
 800cf1e:	bf00      	nop
 800cf20:	e7fe      	b.n	800cf20 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00a      	beq.n	800cf42 <xEventGroupSetBits+0x52>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	60fb      	str	r3, [r7, #12]
}
 800cf3e:	bf00      	nop
 800cf40:	e7fe      	b.n	800cf40 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800cf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf44:	3304      	adds	r3, #4
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800cf4e:	f001 fc13 	bl	800e778 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	431a      	orrs	r2, r3
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800cf64:	e03c      	b.n	800cfe0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800cf66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800cf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800cf72:	2300      	movs	r3, #0
 800cf74:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cf7c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf84:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d108      	bne.n	800cfa2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	4013      	ands	r3, r2
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00b      	beq.n	800cfb4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfa0:	e008      	b.n	800cfb4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	69ba      	ldr	r2, [r7, #24]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d101      	bne.n	800cfb4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d010      	beq.n	800cfdc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800cfc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cfd8:	f001 fea4 	bl	800ed24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800cfe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d1be      	bne.n	800cf66 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800cfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	43db      	mvns	r3, r3
 800cff0:	401a      	ands	r2, r3
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800cff6:	f001 fbcd 	bl	800e794 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffc:	681b      	ldr	r3, [r3, #0]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3738      	adds	r7, #56	; 0x38
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b082      	sub	sp, #8
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d010:	6839      	ldr	r1, [r7, #0]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7ff ff6c 	bl	800cef0 <xEventGroupSetBits>
}
 800d018:	bf00      	nop
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d02c:	2300      	movs	r3, #0
 800d02e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d107      	bne.n	800d046 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	4013      	ands	r3, r2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00a      	beq.n	800d056 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d040:	2301      	movs	r3, #1
 800d042:	617b      	str	r3, [r7, #20]
 800d044:	e007      	b.n	800d056 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	4013      	ands	r3, r2
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d101      	bne.n	800d056 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d052:	2301      	movs	r3, #1
 800d054:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d056:	697b      	ldr	r3, [r7, #20]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	371c      	adds	r7, #28
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	68f9      	ldr	r1, [r7, #12]
 800d076:	4804      	ldr	r0, [pc, #16]	; (800d088 <xEventGroupSetBitsFromISR+0x24>)
 800d078:	f002 fd64 	bl	800fb44 <xTimerPendFunctionCallFromISR>
 800d07c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d07e:	697b      	ldr	r3, [r7, #20]
	}
 800d080:	4618      	mov	r0, r3
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	0800d007 	.word	0x0800d007

0800d08c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f103 0208 	add.w	r2, r3, #8
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f103 0208 	add.w	r2, r3, #8
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f103 0208 	add.w	r2, r3, #8
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d0da:	bf00      	nop
 800d0dc:	370c      	adds	r7, #12
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b085      	sub	sp, #20
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	689a      	ldr	r2, [r3, #8]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	1c5a      	adds	r2, r3, #1
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	601a      	str	r2, [r3, #0]
}
 800d122:	bf00      	nop
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d12e:	b480      	push	{r7}
 800d130:	b085      	sub	sp, #20
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d144:	d103      	bne.n	800d14e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	e00c      	b.n	800d168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	3308      	adds	r3, #8
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	e002      	b.n	800d15c <vListInsert+0x2e>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	429a      	cmp	r2, r3
 800d166:	d2f6      	bcs.n	800d156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	1c5a      	adds	r2, r3, #1
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	601a      	str	r2, [r3, #0]
}
 800d194:	bf00      	nop
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	6892      	ldr	r2, [r2, #8]
 800d1b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	6852      	ldr	r2, [r2, #4]
 800d1c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d103      	bne.n	800d1d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	689a      	ldr	r2, [r3, #8]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	1e5a      	subs	r2, r3, #1
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10a      	bne.n	800d21e <xQueueGenericReset+0x2a>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	60bb      	str	r3, [r7, #8]
}
 800d21a:	bf00      	nop
 800d21c:	e7fe      	b.n	800d21c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d21e:	f002 fde1 	bl	800fde4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d22a:	68f9      	ldr	r1, [r7, #12]
 800d22c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d22e:	fb01 f303 	mul.w	r3, r1, r3
 800d232:	441a      	add	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d24e:	3b01      	subs	r3, #1
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d254:	fb01 f303 	mul.w	r3, r1, r3
 800d258:	441a      	add	r2, r3
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	22ff      	movs	r2, #255	; 0xff
 800d262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	22ff      	movs	r2, #255	; 0xff
 800d26a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d114      	bne.n	800d29e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01a      	beq.n	800d2b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	3310      	adds	r3, #16
 800d280:	4618      	mov	r0, r3
 800d282:	f001 fceb 	bl	800ec5c <xTaskRemoveFromEventList>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d012      	beq.n	800d2b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d28c:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <xQueueGenericReset+0xcc>)
 800d28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	e009      	b.n	800d2b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	3310      	adds	r3, #16
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff fef2 	bl	800d08c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	3324      	adds	r3, #36	; 0x24
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7ff feed 	bl	800d08c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d2b2:	f002 fdc7 	bl	800fe44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d2b6:	2301      	movs	r3, #1
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	e000ed04 	.word	0xe000ed04

0800d2c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08e      	sub	sp, #56	; 0x38
 800d2c8:	af02      	add	r7, sp, #8
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10a      	bne.n	800d30a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d306:	bf00      	nop
 800d308:	e7fe      	b.n	800d308 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <xQueueGenericCreateStatic+0x52>
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d001      	beq.n	800d31a <xQueueGenericCreateStatic+0x56>
 800d316:	2301      	movs	r3, #1
 800d318:	e000      	b.n	800d31c <xQueueGenericCreateStatic+0x58>
 800d31a:	2300      	movs	r3, #0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10a      	bne.n	800d336 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	623b      	str	r3, [r7, #32]
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <xQueueGenericCreateStatic+0x7e>
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <xQueueGenericCreateStatic+0x82>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <xQueueGenericCreateStatic+0x84>
 800d346:	2300      	movs	r3, #0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10a      	bne.n	800d362 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	61fb      	str	r3, [r7, #28]
}
 800d35e:	bf00      	nop
 800d360:	e7fe      	b.n	800d360 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d362:	2350      	movs	r3, #80	; 0x50
 800d364:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	2b50      	cmp	r3, #80	; 0x50
 800d36a:	d00a      	beq.n	800d382 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	61bb      	str	r3, [r7, #24]
}
 800d37e:	bf00      	nop
 800d380:	e7fe      	b.n	800d380 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d382:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00d      	beq.n	800d3aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	2201      	movs	r2, #1
 800d392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d396:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	68b9      	ldr	r1, [r7, #8]
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f000 f83f 	bl	800d428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3730      	adds	r7, #48	; 0x30
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08a      	sub	sp, #40	; 0x28
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10a      	bne.n	800d3de <xQueueGenericCreate+0x2a>
	__asm volatile
 800d3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	613b      	str	r3, [r7, #16]
}
 800d3da:	bf00      	nop
 800d3dc:	e7fe      	b.n	800d3dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	fb02 f303 	mul.w	r3, r2, r3
 800d3e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	3350      	adds	r3, #80	; 0x50
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f002 fe1b 	bl	8010028 <pvPortMalloc>
 800d3f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d011      	beq.n	800d41e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	3350      	adds	r3, #80	; 0x50
 800d402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d40c:	79fa      	ldrb	r2, [r7, #7]
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	4613      	mov	r3, r2
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f000 f805 	bl	800d428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d41e:	69bb      	ldr	r3, [r7, #24]
	}
 800d420:	4618      	mov	r0, r3
 800d422:	3720      	adds	r7, #32
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d103      	bne.n	800d444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	69ba      	ldr	r2, [r7, #24]
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	e002      	b.n	800d44a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d456:	2101      	movs	r1, #1
 800d458:	69b8      	ldr	r0, [r7, #24]
 800d45a:	f7ff fecb 	bl	800d1f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	78fa      	ldrb	r2, [r7, #3]
 800d462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d466:	bf00      	nop
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00e      	beq.n	800d49a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d48e:	2300      	movs	r3, #0
 800d490:	2200      	movs	r2, #0
 800d492:	2100      	movs	r1, #0
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f8a1 	bl	800d5dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b086      	sub	sp, #24
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	617b      	str	r3, [r7, #20]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	6939      	ldr	r1, [r7, #16]
 800d4ba:	6978      	ldr	r0, [r7, #20]
 800d4bc:	f7ff ff7a 	bl	800d3b4 <xQueueGenericCreate>
 800d4c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff ffd3 	bl	800d46e <prvInitialiseMutex>

		return xNewQueue;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
	}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b088      	sub	sp, #32
 800d4d6:	af02      	add	r7, sp, #8
 800d4d8:	4603      	mov	r3, r0
 800d4da:	6039      	str	r1, [r7, #0]
 800d4dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	617b      	str	r3, [r7, #20]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d4e6:	79fb      	ldrb	r3, [r7, #7]
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	6939      	ldr	r1, [r7, #16]
 800d4f0:	6978      	ldr	r0, [r7, #20]
 800d4f2:	f7ff fee7 	bl	800d2c4 <xQueueGenericCreateStatic>
 800d4f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f7ff ffb8 	bl	800d46e <prvInitialiseMutex>

		return xNewQueue;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d500:	4618      	mov	r0, r3
 800d502:	3718      	adds	r7, #24
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d508:	b590      	push	{r4, r7, lr}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10a      	bne.n	800d530 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60fb      	str	r3, [r7, #12]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	689c      	ldr	r4, [r3, #8]
 800d534:	f001 fdb2 	bl	800f09c <xTaskGetCurrentTaskHandle>
 800d538:	4603      	mov	r3, r0
 800d53a:	429c      	cmp	r4, r3
 800d53c:	d111      	bne.n	800d562 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	1e5a      	subs	r2, r3, #1
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d105      	bne.n	800d55c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d550:	2300      	movs	r3, #0
 800d552:	2200      	movs	r2, #0
 800d554:	2100      	movs	r1, #0
 800d556:	6938      	ldr	r0, [r7, #16]
 800d558:	f000 f840 	bl	800d5dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d55c:	2301      	movs	r3, #1
 800d55e:	617b      	str	r3, [r7, #20]
 800d560:	e001      	b.n	800d566 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d562:	2300      	movs	r3, #0
 800d564:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d566:	697b      	ldr	r3, [r7, #20]
	}
 800d568:	4618      	mov	r0, r3
 800d56a:	371c      	adds	r7, #28
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd90      	pop	{r4, r7, pc}

0800d570 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d570:	b590      	push	{r4, r7, lr}
 800d572:	b087      	sub	sp, #28
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10a      	bne.n	800d59a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	60fb      	str	r3, [r7, #12]
}
 800d596:	bf00      	nop
 800d598:	e7fe      	b.n	800d598 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	689c      	ldr	r4, [r3, #8]
 800d59e:	f001 fd7d 	bl	800f09c <xTaskGetCurrentTaskHandle>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	429c      	cmp	r4, r3
 800d5a6:	d107      	bne.n	800d5b8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	1c5a      	adds	r2, r3, #1
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	617b      	str	r3, [r7, #20]
 800d5b6:	e00c      	b.n	800d5d2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6938      	ldr	r0, [r7, #16]
 800d5bc:	f000 fa88 	bl	800dad0 <xQueueSemaphoreTake>
 800d5c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d004      	beq.n	800d5d2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	1c5a      	adds	r2, r3, #1
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d5d2:	697b      	ldr	r3, [r7, #20]
	}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	371c      	adds	r7, #28
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd90      	pop	{r4, r7, pc}

0800d5dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b08e      	sub	sp, #56	; 0x38
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10a      	bne.n	800d60e <xQueueGenericSend+0x32>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d60a:	bf00      	nop
 800d60c:	e7fe      	b.n	800d60c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d103      	bne.n	800d61c <xQueueGenericSend+0x40>
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <xQueueGenericSend+0x44>
 800d61c:	2301      	movs	r3, #1
 800d61e:	e000      	b.n	800d622 <xQueueGenericSend+0x46>
 800d620:	2300      	movs	r3, #0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <xQueueGenericSend+0x60>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d638:	bf00      	nop
 800d63a:	e7fe      	b.n	800d63a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d103      	bne.n	800d64a <xQueueGenericSend+0x6e>
 800d642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d646:	2b01      	cmp	r3, #1
 800d648:	d101      	bne.n	800d64e <xQueueGenericSend+0x72>
 800d64a:	2301      	movs	r3, #1
 800d64c:	e000      	b.n	800d650 <xQueueGenericSend+0x74>
 800d64e:	2300      	movs	r3, #0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10a      	bne.n	800d66a <xQueueGenericSend+0x8e>
	__asm volatile
 800d654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d658:	f383 8811 	msr	BASEPRI, r3
 800d65c:	f3bf 8f6f 	isb	sy
 800d660:	f3bf 8f4f 	dsb	sy
 800d664:	623b      	str	r3, [r7, #32]
}
 800d666:	bf00      	nop
 800d668:	e7fe      	b.n	800d668 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d66a:	f001 fd27 	bl	800f0bc <xTaskGetSchedulerState>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d102      	bne.n	800d67a <xQueueGenericSend+0x9e>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <xQueueGenericSend+0xa2>
 800d67a:	2301      	movs	r3, #1
 800d67c:	e000      	b.n	800d680 <xQueueGenericSend+0xa4>
 800d67e:	2300      	movs	r3, #0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <xQueueGenericSend+0xbe>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	61fb      	str	r3, [r7, #28]
}
 800d696:	bf00      	nop
 800d698:	e7fe      	b.n	800d698 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d69a:	f002 fba3 	bl	800fde4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d302      	bcc.n	800d6b0 <xQueueGenericSend+0xd4>
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d129      	bne.n	800d704 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	68b9      	ldr	r1, [r7, #8]
 800d6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6b6:	f000 fbaf 	bl	800de18 <prvCopyDataToQueue>
 800d6ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d010      	beq.n	800d6e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c6:	3324      	adds	r3, #36	; 0x24
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f001 fac7 	bl	800ec5c <xTaskRemoveFromEventList>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d013      	beq.n	800d6fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d6d4:	4b3f      	ldr	r3, [pc, #252]	; (800d7d4 <xQueueGenericSend+0x1f8>)
 800d6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	f3bf 8f6f 	isb	sy
 800d6e4:	e00a      	b.n	800d6fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d007      	beq.n	800d6fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d6ec:	4b39      	ldr	r3, [pc, #228]	; (800d7d4 <xQueueGenericSend+0x1f8>)
 800d6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d6fc:	f002 fba2 	bl	800fe44 <vPortExitCritical>
				return pdPASS;
 800d700:	2301      	movs	r3, #1
 800d702:	e063      	b.n	800d7cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d103      	bne.n	800d712 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d70a:	f002 fb9b 	bl	800fe44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	e05c      	b.n	800d7cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d714:	2b00      	cmp	r3, #0
 800d716:	d106      	bne.n	800d726 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d718:	f107 0314 	add.w	r3, r7, #20
 800d71c:	4618      	mov	r0, r3
 800d71e:	f001 fb63 	bl	800ede8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d722:	2301      	movs	r3, #1
 800d724:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d726:	f002 fb8d 	bl	800fe44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d72a:	f001 f825 	bl	800e778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d72e:	f002 fb59 	bl	800fde4 <vPortEnterCritical>
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d738:	b25b      	sxtb	r3, r3
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d103      	bne.n	800d748 <xQueueGenericSend+0x16c>
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d74e:	b25b      	sxtb	r3, r3
 800d750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d754:	d103      	bne.n	800d75e <xQueueGenericSend+0x182>
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d75e:	f002 fb71 	bl	800fe44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d762:	1d3a      	adds	r2, r7, #4
 800d764:	f107 0314 	add.w	r3, r7, #20
 800d768:	4611      	mov	r1, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f001 fb52 	bl	800ee14 <xTaskCheckForTimeOut>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d124      	bne.n	800d7c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d778:	f000 fc46 	bl	800e008 <prvIsQueueFull>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d018      	beq.n	800d7b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	3310      	adds	r3, #16
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	4611      	mov	r1, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f001 f9da 	bl	800eb44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d792:	f000 fbd1 	bl	800df38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d796:	f000 fffd 	bl	800e794 <xTaskResumeAll>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f47f af7c 	bne.w	800d69a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d7a2:	4b0c      	ldr	r3, [pc, #48]	; (800d7d4 <xQueueGenericSend+0x1f8>)
 800d7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	e772      	b.n	800d69a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7b6:	f000 fbbf 	bl	800df38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7ba:	f000 ffeb 	bl	800e794 <xTaskResumeAll>
 800d7be:	e76c      	b.n	800d69a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7c2:	f000 fbb9 	bl	800df38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7c6:	f000 ffe5 	bl	800e794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d7ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3738      	adds	r7, #56	; 0x38
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	e000ed04 	.word	0xe000ed04

0800d7d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b090      	sub	sp, #64	; 0x40
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
 800d7e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10a      	bne.n	800d806 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d802:	bf00      	nop
 800d804:	e7fe      	b.n	800d804 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d103      	bne.n	800d814 <xQueueGenericSendFromISR+0x3c>
 800d80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d810:	2b00      	cmp	r3, #0
 800d812:	d101      	bne.n	800d818 <xQueueGenericSendFromISR+0x40>
 800d814:	2301      	movs	r3, #1
 800d816:	e000      	b.n	800d81a <xQueueGenericSendFromISR+0x42>
 800d818:	2300      	movs	r3, #0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10a      	bne.n	800d834 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d830:	bf00      	nop
 800d832:	e7fe      	b.n	800d832 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d103      	bne.n	800d842 <xQueueGenericSendFromISR+0x6a>
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d101      	bne.n	800d846 <xQueueGenericSendFromISR+0x6e>
 800d842:	2301      	movs	r3, #1
 800d844:	e000      	b.n	800d848 <xQueueGenericSendFromISR+0x70>
 800d846:	2300      	movs	r3, #0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10a      	bne.n	800d862 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	623b      	str	r3, [r7, #32]
}
 800d85e:	bf00      	nop
 800d860:	e7fe      	b.n	800d860 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d862:	f002 fba1 	bl	800ffa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d866:	f3ef 8211 	mrs	r2, BASEPRI
 800d86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	61fa      	str	r2, [r7, #28]
 800d87c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d87e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d880:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d302      	bcc.n	800d894 <xQueueGenericSendFromISR+0xbc>
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2b02      	cmp	r3, #2
 800d892:	d12f      	bne.n	800d8f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	68b9      	ldr	r1, [r7, #8]
 800d8a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8aa:	f000 fab5 	bl	800de18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b6:	d112      	bne.n	800d8de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d016      	beq.n	800d8ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	3324      	adds	r3, #36	; 0x24
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f001 f9c9 	bl	800ec5c <xTaskRemoveFromEventList>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00e      	beq.n	800d8ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00b      	beq.n	800d8ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	601a      	str	r2, [r3, #0]
 800d8dc:	e007      	b.n	800d8ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	b25a      	sxtb	r2, r3
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d8f2:	e001      	b.n	800d8f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d902:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d906:	4618      	mov	r0, r3
 800d908:	3740      	adds	r7, #64	; 0x40
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
	...

0800d910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08c      	sub	sp, #48	; 0x30
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d91c:	2300      	movs	r3, #0
 800d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10a      	bne.n	800d940 <xQueueReceive+0x30>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	623b      	str	r3, [r7, #32]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d103      	bne.n	800d94e <xQueueReceive+0x3e>
 800d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <xQueueReceive+0x42>
 800d94e:	2301      	movs	r3, #1
 800d950:	e000      	b.n	800d954 <xQueueReceive+0x44>
 800d952:	2300      	movs	r3, #0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <xQueueReceive+0x5e>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	61fb      	str	r3, [r7, #28]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d96e:	f001 fba5 	bl	800f0bc <xTaskGetSchedulerState>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <xQueueReceive+0x6e>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <xQueueReceive+0x72>
 800d97e:	2301      	movs	r3, #1
 800d980:	e000      	b.n	800d984 <xQueueReceive+0x74>
 800d982:	2300      	movs	r3, #0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10a      	bne.n	800d99e <xQueueReceive+0x8e>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	61bb      	str	r3, [r7, #24]
}
 800d99a:	bf00      	nop
 800d99c:	e7fe      	b.n	800d99c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d99e:	f002 fa21 	bl	800fde4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d01f      	beq.n	800d9ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9ae:	68b9      	ldr	r1, [r7, #8]
 800d9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b2:	f000 fa9b 	bl	800deec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	1e5a      	subs	r2, r3, #1
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00f      	beq.n	800d9e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	3310      	adds	r3, #16
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 f946 	bl	800ec5c <xTaskRemoveFromEventList>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d007      	beq.n	800d9e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9d6:	4b3d      	ldr	r3, [pc, #244]	; (800dacc <xQueueReceive+0x1bc>)
 800d9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9e6:	f002 fa2d 	bl	800fe44 <vPortExitCritical>
				return pdPASS;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e069      	b.n	800dac2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d103      	bne.n	800d9fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9f4:	f002 fa26 	bl	800fe44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	e062      	b.n	800dac2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da02:	f107 0310 	add.w	r3, r7, #16
 800da06:	4618      	mov	r0, r3
 800da08:	f001 f9ee 	bl	800ede8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da0c:	2301      	movs	r3, #1
 800da0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da10:	f002 fa18 	bl	800fe44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da14:	f000 feb0 	bl	800e778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da18:	f002 f9e4 	bl	800fde4 <vPortEnterCritical>
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da22:	b25b      	sxtb	r3, r3
 800da24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da28:	d103      	bne.n	800da32 <xQueueReceive+0x122>
 800da2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da38:	b25b      	sxtb	r3, r3
 800da3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3e:	d103      	bne.n	800da48 <xQueueReceive+0x138>
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da48:	f002 f9fc 	bl	800fe44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da4c:	1d3a      	adds	r2, r7, #4
 800da4e:	f107 0310 	add.w	r3, r7, #16
 800da52:	4611      	mov	r1, r2
 800da54:	4618      	mov	r0, r3
 800da56:	f001 f9dd 	bl	800ee14 <xTaskCheckForTimeOut>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d123      	bne.n	800daa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da62:	f000 fabb 	bl	800dfdc <prvIsQueueEmpty>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d017      	beq.n	800da9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	3324      	adds	r3, #36	; 0x24
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	4611      	mov	r1, r2
 800da74:	4618      	mov	r0, r3
 800da76:	f001 f865 	bl	800eb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da7c:	f000 fa5c 	bl	800df38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da80:	f000 fe88 	bl	800e794 <xTaskResumeAll>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d189      	bne.n	800d99e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800da8a:	4b10      	ldr	r3, [pc, #64]	; (800dacc <xQueueReceive+0x1bc>)
 800da8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da90:	601a      	str	r2, [r3, #0]
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	e780      	b.n	800d99e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da9e:	f000 fa4b 	bl	800df38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800daa2:	f000 fe77 	bl	800e794 <xTaskResumeAll>
 800daa6:	e77a      	b.n	800d99e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800daa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daaa:	f000 fa45 	bl	800df38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daae:	f000 fe71 	bl	800e794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab4:	f000 fa92 	bl	800dfdc <prvIsQueueEmpty>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f43f af6f 	beq.w	800d99e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3730      	adds	r7, #48	; 0x30
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	e000ed04 	.word	0xe000ed04

0800dad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08e      	sub	sp, #56	; 0x38
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dada:	2300      	movs	r3, #0
 800dadc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dae2:	2300      	movs	r3, #0
 800dae4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d10a      	bne.n	800db02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800daec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf0:	f383 8811 	msr	BASEPRI, r3
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	623b      	str	r3, [r7, #32]
}
 800dafe:	bf00      	nop
 800db00:	e7fe      	b.n	800db00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00a      	beq.n	800db20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	f383 8811 	msr	BASEPRI, r3
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	f3bf 8f4f 	dsb	sy
 800db1a:	61fb      	str	r3, [r7, #28]
}
 800db1c:	bf00      	nop
 800db1e:	e7fe      	b.n	800db1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db20:	f001 facc 	bl	800f0bc <xTaskGetSchedulerState>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d102      	bne.n	800db30 <xQueueSemaphoreTake+0x60>
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <xQueueSemaphoreTake+0x64>
 800db30:	2301      	movs	r3, #1
 800db32:	e000      	b.n	800db36 <xQueueSemaphoreTake+0x66>
 800db34:	2300      	movs	r3, #0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10a      	bne.n	800db50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	61bb      	str	r3, [r7, #24]
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db50:	f002 f948 	bl	800fde4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d024      	beq.n	800dbaa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	1e5a      	subs	r2, r3, #1
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d104      	bne.n	800db7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db70:	f001 fc32 	bl	800f3d8 <pvTaskIncrementMutexHeldCount>
 800db74:	4602      	mov	r2, r0
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00f      	beq.n	800dba2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db84:	3310      	adds	r3, #16
 800db86:	4618      	mov	r0, r3
 800db88:	f001 f868 	bl	800ec5c <xTaskRemoveFromEventList>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d007      	beq.n	800dba2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db92:	4b54      	ldr	r3, [pc, #336]	; (800dce4 <xQueueSemaphoreTake+0x214>)
 800db94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db98:	601a      	str	r2, [r3, #0]
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dba2:	f002 f94f 	bl	800fe44 <vPortExitCritical>
				return pdPASS;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e097      	b.n	800dcda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d111      	bne.n	800dbd4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00a      	beq.n	800dbcc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800dbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbba:	f383 8811 	msr	BASEPRI, r3
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f3bf 8f4f 	dsb	sy
 800dbc6:	617b      	str	r3, [r7, #20]
}
 800dbc8:	bf00      	nop
 800dbca:	e7fe      	b.n	800dbca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dbcc:	f002 f93a 	bl	800fe44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e082      	b.n	800dcda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d106      	bne.n	800dbe8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbda:	f107 030c 	add.w	r3, r7, #12
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f001 f902 	bl	800ede8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbe8:	f002 f92c 	bl	800fe44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbec:	f000 fdc4 	bl	800e778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbf0:	f002 f8f8 	bl	800fde4 <vPortEnterCritical>
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbfa:	b25b      	sxtb	r3, r3
 800dbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc00:	d103      	bne.n	800dc0a <xQueueSemaphoreTake+0x13a>
 800dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc04:	2200      	movs	r2, #0
 800dc06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc10:	b25b      	sxtb	r3, r3
 800dc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc16:	d103      	bne.n	800dc20 <xQueueSemaphoreTake+0x150>
 800dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc20:	f002 f910 	bl	800fe44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc24:	463a      	mov	r2, r7
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f001 f8f1 	bl	800ee14 <xTaskCheckForTimeOut>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d132      	bne.n	800dc9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc3a:	f000 f9cf 	bl	800dfdc <prvIsQueueEmpty>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d026      	beq.n	800dc92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d109      	bne.n	800dc60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800dc4c:	f002 f8ca 	bl	800fde4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f001 fa4f 	bl	800f0f8 <xTaskPriorityInherit>
 800dc5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dc5c:	f002 f8f2 	bl	800fe44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc62:	3324      	adds	r3, #36	; 0x24
 800dc64:	683a      	ldr	r2, [r7, #0]
 800dc66:	4611      	mov	r1, r2
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 ff6b 	bl	800eb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc70:	f000 f962 	bl	800df38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc74:	f000 fd8e 	bl	800e794 <xTaskResumeAll>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f47f af68 	bne.w	800db50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dc80:	4b18      	ldr	r3, [pc, #96]	; (800dce4 <xQueueSemaphoreTake+0x214>)
 800dc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc86:	601a      	str	r2, [r3, #0]
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	f3bf 8f6f 	isb	sy
 800dc90:	e75e      	b.n	800db50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc94:	f000 f950 	bl	800df38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc98:	f000 fd7c 	bl	800e794 <xTaskResumeAll>
 800dc9c:	e758      	b.n	800db50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dca0:	f000 f94a 	bl	800df38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dca4:	f000 fd76 	bl	800e794 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcaa:	f000 f997 	bl	800dfdc <prvIsQueueEmpty>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f43f af4d 	beq.w	800db50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00d      	beq.n	800dcd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dcbc:	f002 f892 	bl	800fde4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dcc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcc2:	f000 f891 	bl	800dde8 <prvGetDisinheritPriorityAfterTimeout>
 800dcc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f001 fae8 	bl	800f2a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dcd4:	f002 f8b6 	bl	800fe44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3738      	adds	r7, #56	; 0x38
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	e000ed04 	.word	0xe000ed04

0800dce8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08e      	sub	sp, #56	; 0x38
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	623b      	str	r3, [r7, #32]
}
 800dd10:	bf00      	nop
 800dd12:	e7fe      	b.n	800dd12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d103      	bne.n	800dd22 <xQueueReceiveFromISR+0x3a>
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <xQueueReceiveFromISR+0x3e>
 800dd22:	2301      	movs	r3, #1
 800dd24:	e000      	b.n	800dd28 <xQueueReceiveFromISR+0x40>
 800dd26:	2300      	movs	r3, #0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	61fb      	str	r3, [r7, #28]
}
 800dd3e:	bf00      	nop
 800dd40:	e7fe      	b.n	800dd40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd42:	f002 f931 	bl	800ffa8 <vPortValidateInterruptPriority>
	__asm volatile
 800dd46:	f3ef 8211 	mrs	r2, BASEPRI
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	61ba      	str	r2, [r7, #24]
 800dd5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d02f      	beq.n	800ddce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd78:	68b9      	ldr	r1, [r7, #8]
 800dd7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd7c:	f000 f8b6 	bl	800deec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	1e5a      	subs	r2, r3, #1
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd90:	d112      	bne.n	800ddb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d016      	beq.n	800ddc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9c:	3310      	adds	r3, #16
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 ff5c 	bl	800ec5c <xTaskRemoveFromEventList>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00e      	beq.n	800ddc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00b      	beq.n	800ddc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	e007      	b.n	800ddc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ddb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	b25a      	sxtb	r2, r3
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	637b      	str	r3, [r7, #52]	; 0x34
 800ddcc:	e001      	b.n	800ddd2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	637b      	str	r3, [r7, #52]	; 0x34
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	f383 8811 	msr	BASEPRI, r3
}
 800dddc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3738      	adds	r7, #56	; 0x38
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d006      	beq.n	800de06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800de02:	60fb      	str	r3, [r7, #12]
 800de04:	e001      	b.n	800de0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800de06:	2300      	movs	r3, #0
 800de08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800de0a:	68fb      	ldr	r3, [r7, #12]
	}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de24:	2300      	movs	r3, #0
 800de26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10d      	bne.n	800de52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d14d      	bne.n	800deda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	4618      	mov	r0, r3
 800de44:	f001 f9c0 	bl	800f1c8 <xTaskPriorityDisinherit>
 800de48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2200      	movs	r2, #0
 800de4e:	609a      	str	r2, [r3, #8]
 800de50:	e043      	b.n	800deda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d119      	bne.n	800de8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6858      	ldr	r0, [r3, #4]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de60:	461a      	mov	r2, r3
 800de62:	68b9      	ldr	r1, [r7, #8]
 800de64:	f002 fafc 	bl	8010460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de70:	441a      	add	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	685a      	ldr	r2, [r3, #4]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d32b      	bcc.n	800deda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	605a      	str	r2, [r3, #4]
 800de8a:	e026      	b.n	800deda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	68d8      	ldr	r0, [r3, #12]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de94:	461a      	mov	r2, r3
 800de96:	68b9      	ldr	r1, [r7, #8]
 800de98:	f002 fae2 	bl	8010460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	68da      	ldr	r2, [r3, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea4:	425b      	negs	r3, r3
 800dea6:	441a      	add	r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	68da      	ldr	r2, [r3, #12]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d207      	bcs.n	800dec8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	689a      	ldr	r2, [r3, #8]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec0:	425b      	negs	r3, r3
 800dec2:	441a      	add	r2, r3
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b02      	cmp	r3, #2
 800decc:	d105      	bne.n	800deda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	3b01      	subs	r3, #1
 800ded8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	1c5a      	adds	r2, r3, #1
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dee2:	697b      	ldr	r3, [r7, #20]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defa:	2b00      	cmp	r3, #0
 800defc:	d018      	beq.n	800df30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68da      	ldr	r2, [r3, #12]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df06:	441a      	add	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68da      	ldr	r2, [r3, #12]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	429a      	cmp	r2, r3
 800df16:	d303      	bcc.n	800df20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	68d9      	ldr	r1, [r3, #12]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df28:	461a      	mov	r2, r3
 800df2a:	6838      	ldr	r0, [r7, #0]
 800df2c:	f002 fa98 	bl	8010460 <memcpy>
	}
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df40:	f001 ff50 	bl	800fde4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df4c:	e011      	b.n	800df72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df52:	2b00      	cmp	r3, #0
 800df54:	d012      	beq.n	800df7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	3324      	adds	r3, #36	; 0x24
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 fe7e 	bl	800ec5c <xTaskRemoveFromEventList>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df66:	f000 ffb7 	bl	800eed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df76:	2b00      	cmp	r3, #0
 800df78:	dce9      	bgt.n	800df4e <prvUnlockQueue+0x16>
 800df7a:	e000      	b.n	800df7e <prvUnlockQueue+0x46>
					break;
 800df7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	22ff      	movs	r2, #255	; 0xff
 800df82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800df86:	f001 ff5d 	bl	800fe44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df8a:	f001 ff2b 	bl	800fde4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df96:	e011      	b.n	800dfbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d012      	beq.n	800dfc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	3310      	adds	r3, #16
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f000 fe59 	bl	800ec5c <xTaskRemoveFromEventList>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dfb0:	f000 ff92 	bl	800eed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dfb4:	7bbb      	ldrb	r3, [r7, #14]
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	dce9      	bgt.n	800df98 <prvUnlockQueue+0x60>
 800dfc4:	e000      	b.n	800dfc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dfc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	22ff      	movs	r2, #255	; 0xff
 800dfcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dfd0:	f001 ff38 	bl	800fe44 <vPortExitCritical>
}
 800dfd4:	bf00      	nop
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfe4:	f001 fefe 	bl	800fde4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dff0:	2301      	movs	r3, #1
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e001      	b.n	800dffa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dff6:	2300      	movs	r3, #0
 800dff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dffa:	f001 ff23 	bl	800fe44 <vPortExitCritical>

	return xReturn;
 800dffe:	68fb      	ldr	r3, [r7, #12]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e010:	f001 fee8 	bl	800fde4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d102      	bne.n	800e026 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e020:	2301      	movs	r3, #1
 800e022:	60fb      	str	r3, [r7, #12]
 800e024:	e001      	b.n	800e02a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e026:	2300      	movs	r3, #0
 800e028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e02a:	f001 ff0b 	bl	800fe44 <vPortExitCritical>

	return xReturn;
 800e02e:	68fb      	ldr	r3, [r7, #12]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e042:	2300      	movs	r3, #0
 800e044:	60fb      	str	r3, [r7, #12]
 800e046:	e014      	b.n	800e072 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e048:	4a0f      	ldr	r2, [pc, #60]	; (800e088 <vQueueAddToRegistry+0x50>)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10b      	bne.n	800e06c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e054:	490c      	ldr	r1, [pc, #48]	; (800e088 <vQueueAddToRegistry+0x50>)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e05e:	4a0a      	ldr	r2, [pc, #40]	; (800e088 <vQueueAddToRegistry+0x50>)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	4413      	add	r3, r2
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e06a:	e006      	b.n	800e07a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3301      	adds	r3, #1
 800e070:	60fb      	str	r3, [r7, #12]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2b07      	cmp	r3, #7
 800e076:	d9e7      	bls.n	800e048 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e078:	bf00      	nop
 800e07a:	bf00      	nop
 800e07c:	3714      	adds	r7, #20
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	20000d24 	.word	0x20000d24

0800e08c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e09c:	f001 fea2 	bl	800fde4 <vPortEnterCritical>
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0a6:	b25b      	sxtb	r3, r3
 800e0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ac:	d103      	bne.n	800e0b6 <vQueueWaitForMessageRestricted+0x2a>
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0bc:	b25b      	sxtb	r3, r3
 800e0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c2:	d103      	bne.n	800e0cc <vQueueWaitForMessageRestricted+0x40>
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0cc:	f001 feba 	bl	800fe44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d106      	bne.n	800e0e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	3324      	adds	r3, #36	; 0x24
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	68b9      	ldr	r1, [r7, #8]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 fd8f 	bl	800ec04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0e6:	6978      	ldr	r0, [r7, #20]
 800e0e8:	f7ff ff26 	bl	800df38 <prvUnlockQueue>
	}
 800e0ec:	bf00      	nop
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b08e      	sub	sp, #56	; 0x38
 800e0f8:	af04      	add	r7, sp, #16
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10a      	bne.n	800e11e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	623b      	str	r3, [r7, #32]
}
 800e11a:	bf00      	nop
 800e11c:	e7fe      	b.n	800e11c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xTaskCreateStatic+0x46>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	61fb      	str	r3, [r7, #28]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e13a:	235c      	movs	r3, #92	; 0x5c
 800e13c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	2b5c      	cmp	r3, #92	; 0x5c
 800e142:	d00a      	beq.n	800e15a <xTaskCreateStatic+0x66>
	__asm volatile
 800e144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	61bb      	str	r3, [r7, #24]
}
 800e156:	bf00      	nop
 800e158:	e7fe      	b.n	800e158 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e15a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d01e      	beq.n	800e1a0 <xTaskCreateStatic+0xac>
 800e162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e164:	2b00      	cmp	r3, #0
 800e166:	d01b      	beq.n	800e1a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e170:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e174:	2202      	movs	r2, #2
 800e176:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e17a:	2300      	movs	r3, #0
 800e17c:	9303      	str	r3, [sp, #12]
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	9302      	str	r3, [sp, #8]
 800e182:	f107 0314 	add.w	r3, r7, #20
 800e186:	9301      	str	r3, [sp, #4]
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	68b9      	ldr	r1, [r7, #8]
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f000 f850 	bl	800e238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e19a:	f000 f8dd 	bl	800e358 <prvAddNewTaskToReadyList>
 800e19e:	e001      	b.n	800e1a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e1a4:	697b      	ldr	r3, [r7, #20]
	}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3728      	adds	r7, #40	; 0x28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b08c      	sub	sp, #48	; 0x30
 800e1b2:	af04      	add	r7, sp, #16
 800e1b4:	60f8      	str	r0, [r7, #12]
 800e1b6:	60b9      	str	r1, [r7, #8]
 800e1b8:	603b      	str	r3, [r7, #0]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e1be:	88fb      	ldrh	r3, [r7, #6]
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f001 ff30 	bl	8010028 <pvPortMalloc>
 800e1c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00e      	beq.n	800e1ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e1d0:	205c      	movs	r0, #92	; 0x5c
 800e1d2:	f001 ff29 	bl	8010028 <pvPortMalloc>
 800e1d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d003      	beq.n	800e1e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	697a      	ldr	r2, [r7, #20]
 800e1e2:	631a      	str	r2, [r3, #48]	; 0x30
 800e1e4:	e005      	b.n	800e1f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1e6:	6978      	ldr	r0, [r7, #20]
 800e1e8:	f001 ffea 	bl	80101c0 <vPortFree>
 800e1ec:	e001      	b.n	800e1f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d017      	beq.n	800e228 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e200:	88fa      	ldrh	r2, [r7, #6]
 800e202:	2300      	movs	r3, #0
 800e204:	9303      	str	r3, [sp, #12]
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	9302      	str	r3, [sp, #8]
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	9301      	str	r3, [sp, #4]
 800e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	68b9      	ldr	r1, [r7, #8]
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f000 f80e 	bl	800e238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e21c:	69f8      	ldr	r0, [r7, #28]
 800e21e:	f000 f89b 	bl	800e358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e222:	2301      	movs	r3, #1
 800e224:	61bb      	str	r3, [r7, #24]
 800e226:	e002      	b.n	800e22e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e228:	f04f 33ff 	mov.w	r3, #4294967295
 800e22c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e22e:	69bb      	ldr	r3, [r7, #24]
	}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b088      	sub	sp, #32
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e248:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	461a      	mov	r2, r3
 800e250:	21a5      	movs	r1, #165	; 0xa5
 800e252:	f002 f913 	bl	801047c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e260:	3b01      	subs	r3, #1
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	f023 0307 	bic.w	r3, r3, #7
 800e26e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	f003 0307 	and.w	r3, r3, #7
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00a      	beq.n	800e290 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	617b      	str	r3, [r7, #20]
}
 800e28c:	bf00      	nop
 800e28e:	e7fe      	b.n	800e28e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d01f      	beq.n	800e2d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e296:	2300      	movs	r3, #0
 800e298:	61fb      	str	r3, [r7, #28]
 800e29a:	e012      	b.n	800e2c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	7819      	ldrb	r1, [r3, #0]
 800e2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	3334      	adds	r3, #52	; 0x34
 800e2ac:	460a      	mov	r2, r1
 800e2ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d006      	beq.n	800e2ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	3301      	adds	r3, #1
 800e2c0:	61fb      	str	r3, [r7, #28]
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	2b0f      	cmp	r3, #15
 800e2c6:	d9e9      	bls.n	800e29c <prvInitialiseNewTask+0x64>
 800e2c8:	e000      	b.n	800e2cc <prvInitialiseNewTask+0x94>
			{
				break;
 800e2ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e2d4:	e003      	b.n	800e2de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e0:	2b37      	cmp	r3, #55	; 0x37
 800e2e2:	d901      	bls.n	800e2e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2e4:	2337      	movs	r3, #55	; 0x37
 800e2e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe fee4 	bl	800d0cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e306:	3318      	adds	r3, #24
 800e308:	4618      	mov	r0, r3
 800e30a:	f7fe fedf 	bl	800d0cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e312:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e322:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e326:	2200      	movs	r2, #0
 800e328:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	68f9      	ldr	r1, [r7, #12]
 800e336:	69b8      	ldr	r0, [r7, #24]
 800e338:	f001 fc24 	bl	800fb84 <pxPortInitialiseStack>
 800e33c:	4602      	mov	r2, r0
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	2b00      	cmp	r3, #0
 800e346:	d002      	beq.n	800e34e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e34c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e34e:	bf00      	nop
 800e350:	3720      	adds	r7, #32
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e360:	f001 fd40 	bl	800fde4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e364:	4b2d      	ldr	r3, [pc, #180]	; (800e41c <prvAddNewTaskToReadyList+0xc4>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3301      	adds	r3, #1
 800e36a:	4a2c      	ldr	r2, [pc, #176]	; (800e41c <prvAddNewTaskToReadyList+0xc4>)
 800e36c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e36e:	4b2c      	ldr	r3, [pc, #176]	; (800e420 <prvAddNewTaskToReadyList+0xc8>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d109      	bne.n	800e38a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e376:	4a2a      	ldr	r2, [pc, #168]	; (800e420 <prvAddNewTaskToReadyList+0xc8>)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e37c:	4b27      	ldr	r3, [pc, #156]	; (800e41c <prvAddNewTaskToReadyList+0xc4>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d110      	bne.n	800e3a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e384:	f000 fdcc 	bl	800ef20 <prvInitialiseTaskLists>
 800e388:	e00d      	b.n	800e3a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e38a:	4b26      	ldr	r3, [pc, #152]	; (800e424 <prvAddNewTaskToReadyList+0xcc>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d109      	bne.n	800e3a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e392:	4b23      	ldr	r3, [pc, #140]	; (800e420 <prvAddNewTaskToReadyList+0xc8>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d802      	bhi.n	800e3a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3a0:	4a1f      	ldr	r2, [pc, #124]	; (800e420 <prvAddNewTaskToReadyList+0xc8>)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3a6:	4b20      	ldr	r3, [pc, #128]	; (800e428 <prvAddNewTaskToReadyList+0xd0>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	4a1e      	ldr	r2, [pc, #120]	; (800e428 <prvAddNewTaskToReadyList+0xd0>)
 800e3ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3b0:	4b1d      	ldr	r3, [pc, #116]	; (800e428 <prvAddNewTaskToReadyList+0xd0>)
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3bc:	4b1b      	ldr	r3, [pc, #108]	; (800e42c <prvAddNewTaskToReadyList+0xd4>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d903      	bls.n	800e3cc <prvAddNewTaskToReadyList+0x74>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c8:	4a18      	ldr	r2, [pc, #96]	; (800e42c <prvAddNewTaskToReadyList+0xd4>)
 800e3ca:	6013      	str	r3, [r2, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4413      	add	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4a15      	ldr	r2, [pc, #84]	; (800e430 <prvAddNewTaskToReadyList+0xd8>)
 800e3da:	441a      	add	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f7fe fe7f 	bl	800d0e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3e8:	f001 fd2c 	bl	800fe44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3ec:	4b0d      	ldr	r3, [pc, #52]	; (800e424 <prvAddNewTaskToReadyList+0xcc>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00e      	beq.n	800e412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3f4:	4b0a      	ldr	r3, [pc, #40]	; (800e420 <prvAddNewTaskToReadyList+0xc8>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d207      	bcs.n	800e412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e402:	4b0c      	ldr	r3, [pc, #48]	; (800e434 <prvAddNewTaskToReadyList+0xdc>)
 800e404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e412:	bf00      	nop
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20001238 	.word	0x20001238
 800e420:	20000d64 	.word	0x20000d64
 800e424:	20001244 	.word	0x20001244
 800e428:	20001254 	.word	0x20001254
 800e42c:	20001240 	.word	0x20001240
 800e430:	20000d68 	.word	0x20000d68
 800e434:	e000ed04 	.word	0xe000ed04

0800e438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e440:	2300      	movs	r3, #0
 800e442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d017      	beq.n	800e47a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e44a:	4b13      	ldr	r3, [pc, #76]	; (800e498 <vTaskDelay+0x60>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00a      	beq.n	800e468 <vTaskDelay+0x30>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	60bb      	str	r3, [r7, #8]
}
 800e464:	bf00      	nop
 800e466:	e7fe      	b.n	800e466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e468:	f000 f986 	bl	800e778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e46c:	2100      	movs	r1, #0
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 ffc6 	bl	800f400 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e474:	f000 f98e 	bl	800e794 <xTaskResumeAll>
 800e478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d107      	bne.n	800e490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e480:	4b06      	ldr	r3, [pc, #24]	; (800e49c <vTaskDelay+0x64>)
 800e482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	f3bf 8f4f 	dsb	sy
 800e48c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e490:	bf00      	nop
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	20001260 	.word	0x20001260
 800e49c:	e000ed04 	.word	0xe000ed04

0800e4a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e4a8:	f001 fc9c 	bl	800fde4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d102      	bne.n	800e4b8 <vTaskSuspend+0x18>
 800e4b2:	4b30      	ldr	r3, [pc, #192]	; (800e574 <vTaskSuspend+0xd4>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	e000      	b.n	800e4ba <vTaskSuspend+0x1a>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3304      	adds	r3, #4
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fe6d 	bl	800d1a0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d004      	beq.n	800e4d8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3318      	adds	r3, #24
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fe fe64 	bl	800d1a0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4826      	ldr	r0, [pc, #152]	; (800e578 <vTaskSuspend+0xd8>)
 800e4e0:	f7fe fe01 	bl	800d0e6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d103      	bne.n	800e4f8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e4f8:	f001 fca4 	bl	800fe44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e4fc:	4b1f      	ldr	r3, [pc, #124]	; (800e57c <vTaskSuspend+0xdc>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d005      	beq.n	800e510 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e504:	f001 fc6e 	bl	800fde4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e508:	f000 fda8 	bl	800f05c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e50c:	f001 fc9a 	bl	800fe44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e510:	4b18      	ldr	r3, [pc, #96]	; (800e574 <vTaskSuspend+0xd4>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	429a      	cmp	r2, r3
 800e518:	d127      	bne.n	800e56a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800e51a:	4b18      	ldr	r3, [pc, #96]	; (800e57c <vTaskSuspend+0xdc>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d017      	beq.n	800e552 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e522:	4b17      	ldr	r3, [pc, #92]	; (800e580 <vTaskSuspend+0xe0>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00a      	beq.n	800e540 <vTaskSuspend+0xa0>
	__asm volatile
 800e52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	60bb      	str	r3, [r7, #8]
}
 800e53c:	bf00      	nop
 800e53e:	e7fe      	b.n	800e53e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800e540:	4b10      	ldr	r3, [pc, #64]	; (800e584 <vTaskSuspend+0xe4>)
 800e542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e546:	601a      	str	r2, [r3, #0]
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e550:	e00b      	b.n	800e56a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e552:	4b09      	ldr	r3, [pc, #36]	; (800e578 <vTaskSuspend+0xd8>)
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	4b0c      	ldr	r3, [pc, #48]	; (800e588 <vTaskSuspend+0xe8>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d103      	bne.n	800e566 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800e55e:	4b05      	ldr	r3, [pc, #20]	; (800e574 <vTaskSuspend+0xd4>)
 800e560:	2200      	movs	r2, #0
 800e562:	601a      	str	r2, [r3, #0]
	}
 800e564:	e001      	b.n	800e56a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800e566:	f000 fa8f 	bl	800ea88 <vTaskSwitchContext>
	}
 800e56a:	bf00      	nop
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20000d64 	.word	0x20000d64
 800e578:	20001224 	.word	0x20001224
 800e57c:	20001244 	.word	0x20001244
 800e580:	20001260 	.word	0x20001260
 800e584:	e000ed04 	.word	0xe000ed04
 800e588:	20001238 	.word	0x20001238

0800e58c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800e58c:	b480      	push	{r7}
 800e58e:	b087      	sub	sp, #28
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800e594:	2300      	movs	r3, #0
 800e596:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10a      	bne.n	800e5b8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	60fb      	str	r3, [r7, #12]
}
 800e5b4:	bf00      	nop
 800e5b6:	e7fe      	b.n	800e5b6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	695b      	ldr	r3, [r3, #20]
 800e5bc:	4a0a      	ldr	r2, [pc, #40]	; (800e5e8 <prvTaskIsTaskSuspended+0x5c>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d10a      	bne.n	800e5d8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c6:	4a09      	ldr	r2, [pc, #36]	; (800e5ec <prvTaskIsTaskSuspended+0x60>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d005      	beq.n	800e5d8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5d8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e5da:	4618      	mov	r0, r3
 800e5dc:	371c      	adds	r7, #28
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	20001224 	.word	0x20001224
 800e5ec:	200011f8 	.word	0x200011f8

0800e5f0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10a      	bne.n	800e618 <vTaskResume+0x28>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	60bb      	str	r3, [r7, #8]
}
 800e614:	bf00      	nop
 800e616:	e7fe      	b.n	800e616 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800e618:	4b20      	ldr	r3, [pc, #128]	; (800e69c <vTaskResume+0xac>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d038      	beq.n	800e694 <vTaskResume+0xa4>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d035      	beq.n	800e694 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800e628:	f001 fbdc 	bl	800fde4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f7ff ffad 	bl	800e58c <prvTaskIsTaskSuspended>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d02b      	beq.n	800e690 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3304      	adds	r3, #4
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fe fdaf 	bl	800d1a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e646:	4b16      	ldr	r3, [pc, #88]	; (800e6a0 <vTaskResume+0xb0>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d903      	bls.n	800e656 <vTaskResume+0x66>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e652:	4a13      	ldr	r2, [pc, #76]	; (800e6a0 <vTaskResume+0xb0>)
 800e654:	6013      	str	r3, [r2, #0]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e65a:	4613      	mov	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4a10      	ldr	r2, [pc, #64]	; (800e6a4 <vTaskResume+0xb4>)
 800e664:	441a      	add	r2, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	3304      	adds	r3, #4
 800e66a:	4619      	mov	r1, r3
 800e66c:	4610      	mov	r0, r2
 800e66e:	f7fe fd3a 	bl	800d0e6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e676:	4b09      	ldr	r3, [pc, #36]	; (800e69c <vTaskResume+0xac>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d307      	bcc.n	800e690 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800e680:	4b09      	ldr	r3, [pc, #36]	; (800e6a8 <vTaskResume+0xb8>)
 800e682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e686:	601a      	str	r2, [r3, #0]
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800e690:	f001 fbd8 	bl	800fe44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e694:	bf00      	nop
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	20000d64 	.word	0x20000d64
 800e6a0:	20001240 	.word	0x20001240
 800e6a4:	20000d68 	.word	0x20000d68
 800e6a8:	e000ed04 	.word	0xe000ed04

0800e6ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b08a      	sub	sp, #40	; 0x28
 800e6b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e6ba:	463a      	mov	r2, r7
 800e6bc:	1d39      	adds	r1, r7, #4
 800e6be:	f107 0308 	add.w	r3, r7, #8
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe fac0 	bl	800cc48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	9202      	str	r2, [sp, #8]
 800e6d0:	9301      	str	r3, [sp, #4]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	460a      	mov	r2, r1
 800e6da:	4921      	ldr	r1, [pc, #132]	; (800e760 <vTaskStartScheduler+0xb4>)
 800e6dc:	4821      	ldr	r0, [pc, #132]	; (800e764 <vTaskStartScheduler+0xb8>)
 800e6de:	f7ff fd09 	bl	800e0f4 <xTaskCreateStatic>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	4a20      	ldr	r2, [pc, #128]	; (800e768 <vTaskStartScheduler+0xbc>)
 800e6e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e6e8:	4b1f      	ldr	r3, [pc, #124]	; (800e768 <vTaskStartScheduler+0xbc>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	e001      	b.n	800e6fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d102      	bne.n	800e706 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e700:	f000 fed2 	bl	800f4a8 <xTimerCreateTimerTask>
 800e704:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d116      	bne.n	800e73a <vTaskStartScheduler+0x8e>
	__asm volatile
 800e70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e710:	f383 8811 	msr	BASEPRI, r3
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	f3bf 8f4f 	dsb	sy
 800e71c:	613b      	str	r3, [r7, #16]
}
 800e71e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e720:	4b12      	ldr	r3, [pc, #72]	; (800e76c <vTaskStartScheduler+0xc0>)
 800e722:	f04f 32ff 	mov.w	r2, #4294967295
 800e726:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e728:	4b11      	ldr	r3, [pc, #68]	; (800e770 <vTaskStartScheduler+0xc4>)
 800e72a:	2201      	movs	r2, #1
 800e72c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e72e:	4b11      	ldr	r3, [pc, #68]	; (800e774 <vTaskStartScheduler+0xc8>)
 800e730:	2200      	movs	r2, #0
 800e732:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e734:	f001 fab4 	bl	800fca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e738:	e00e      	b.n	800e758 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e740:	d10a      	bne.n	800e758 <vTaskStartScheduler+0xac>
	__asm volatile
 800e742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e746:	f383 8811 	msr	BASEPRI, r3
 800e74a:	f3bf 8f6f 	isb	sy
 800e74e:	f3bf 8f4f 	dsb	sy
 800e752:	60fb      	str	r3, [r7, #12]
}
 800e754:	bf00      	nop
 800e756:	e7fe      	b.n	800e756 <vTaskStartScheduler+0xaa>
}
 800e758:	bf00      	nop
 800e75a:	3718      	adds	r7, #24
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	08014bd8 	.word	0x08014bd8
 800e764:	0800eef1 	.word	0x0800eef1
 800e768:	2000125c 	.word	0x2000125c
 800e76c:	20001258 	.word	0x20001258
 800e770:	20001244 	.word	0x20001244
 800e774:	2000123c 	.word	0x2000123c

0800e778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e778:	b480      	push	{r7}
 800e77a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e77c:	4b04      	ldr	r3, [pc, #16]	; (800e790 <vTaskSuspendAll+0x18>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3301      	adds	r3, #1
 800e782:	4a03      	ldr	r2, [pc, #12]	; (800e790 <vTaskSuspendAll+0x18>)
 800e784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e786:	bf00      	nop
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	20001260 	.word	0x20001260

0800e794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e7a2:	4b42      	ldr	r3, [pc, #264]	; (800e8ac <xTaskResumeAll+0x118>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10a      	bne.n	800e7c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800e7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ae:	f383 8811 	msr	BASEPRI, r3
 800e7b2:	f3bf 8f6f 	isb	sy
 800e7b6:	f3bf 8f4f 	dsb	sy
 800e7ba:	603b      	str	r3, [r7, #0]
}
 800e7bc:	bf00      	nop
 800e7be:	e7fe      	b.n	800e7be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e7c0:	f001 fb10 	bl	800fde4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e7c4:	4b39      	ldr	r3, [pc, #228]	; (800e8ac <xTaskResumeAll+0x118>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	4a38      	ldr	r2, [pc, #224]	; (800e8ac <xTaskResumeAll+0x118>)
 800e7cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ce:	4b37      	ldr	r3, [pc, #220]	; (800e8ac <xTaskResumeAll+0x118>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d162      	bne.n	800e89c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e7d6:	4b36      	ldr	r3, [pc, #216]	; (800e8b0 <xTaskResumeAll+0x11c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d05e      	beq.n	800e89c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7de:	e02f      	b.n	800e840 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e0:	4b34      	ldr	r3, [pc, #208]	; (800e8b4 <xTaskResumeAll+0x120>)
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	3318      	adds	r3, #24
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe fcd7 	bl	800d1a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fe fcd2 	bl	800d1a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e800:	4b2d      	ldr	r3, [pc, #180]	; (800e8b8 <xTaskResumeAll+0x124>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d903      	bls.n	800e810 <xTaskResumeAll+0x7c>
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80c:	4a2a      	ldr	r2, [pc, #168]	; (800e8b8 <xTaskResumeAll+0x124>)
 800e80e:	6013      	str	r3, [r2, #0]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e814:	4613      	mov	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	4413      	add	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4a27      	ldr	r2, [pc, #156]	; (800e8bc <xTaskResumeAll+0x128>)
 800e81e:	441a      	add	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	3304      	adds	r3, #4
 800e824:	4619      	mov	r1, r3
 800e826:	4610      	mov	r0, r2
 800e828:	f7fe fc5d 	bl	800d0e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e830:	4b23      	ldr	r3, [pc, #140]	; (800e8c0 <xTaskResumeAll+0x12c>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e836:	429a      	cmp	r2, r3
 800e838:	d302      	bcc.n	800e840 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e83a:	4b22      	ldr	r3, [pc, #136]	; (800e8c4 <xTaskResumeAll+0x130>)
 800e83c:	2201      	movs	r2, #1
 800e83e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e840:	4b1c      	ldr	r3, [pc, #112]	; (800e8b4 <xTaskResumeAll+0x120>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1cb      	bne.n	800e7e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d001      	beq.n	800e852 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e84e:	f000 fc05 	bl	800f05c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e852:	4b1d      	ldr	r3, [pc, #116]	; (800e8c8 <xTaskResumeAll+0x134>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d010      	beq.n	800e880 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e85e:	f000 f859 	bl	800e914 <xTaskIncrementTick>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e868:	4b16      	ldr	r3, [pc, #88]	; (800e8c4 <xTaskResumeAll+0x130>)
 800e86a:	2201      	movs	r2, #1
 800e86c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	3b01      	subs	r3, #1
 800e872:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1f1      	bne.n	800e85e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e87a:	4b13      	ldr	r3, [pc, #76]	; (800e8c8 <xTaskResumeAll+0x134>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e880:	4b10      	ldr	r3, [pc, #64]	; (800e8c4 <xTaskResumeAll+0x130>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d009      	beq.n	800e89c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e888:	2301      	movs	r3, #1
 800e88a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e88c:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <xTaskResumeAll+0x138>)
 800e88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e89c:	f001 fad2 	bl	800fe44 <vPortExitCritical>

	return xAlreadyYielded;
 800e8a0:	68bb      	ldr	r3, [r7, #8]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20001260 	.word	0x20001260
 800e8b0:	20001238 	.word	0x20001238
 800e8b4:	200011f8 	.word	0x200011f8
 800e8b8:	20001240 	.word	0x20001240
 800e8bc:	20000d68 	.word	0x20000d68
 800e8c0:	20000d64 	.word	0x20000d64
 800e8c4:	2000124c 	.word	0x2000124c
 800e8c8:	20001248 	.word	0x20001248
 800e8cc:	e000ed04 	.word	0xe000ed04

0800e8d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e8d6:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <xTaskGetTickCount+0x1c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e8dc:	687b      	ldr	r3, [r7, #4]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	370c      	adds	r7, #12
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	2000123c 	.word	0x2000123c

0800e8f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8f6:	f001 fb57 	bl	800ffa8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e8fe:	4b04      	ldr	r3, [pc, #16]	; (800e910 <xTaskGetTickCountFromISR+0x20>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e904:	683b      	ldr	r3, [r7, #0]
}
 800e906:	4618      	mov	r0, r3
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	2000123c 	.word	0x2000123c

0800e914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b086      	sub	sp, #24
 800e918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e91a:	2300      	movs	r3, #0
 800e91c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e91e:	4b4f      	ldr	r3, [pc, #316]	; (800ea5c <xTaskIncrementTick+0x148>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	f040 808f 	bne.w	800ea46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e928:	4b4d      	ldr	r3, [pc, #308]	; (800ea60 <xTaskIncrementTick+0x14c>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	3301      	adds	r3, #1
 800e92e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e930:	4a4b      	ldr	r2, [pc, #300]	; (800ea60 <xTaskIncrementTick+0x14c>)
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d120      	bne.n	800e97e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e93c:	4b49      	ldr	r3, [pc, #292]	; (800ea64 <xTaskIncrementTick+0x150>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00a      	beq.n	800e95c <xTaskIncrementTick+0x48>
	__asm volatile
 800e946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94a:	f383 8811 	msr	BASEPRI, r3
 800e94e:	f3bf 8f6f 	isb	sy
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	603b      	str	r3, [r7, #0]
}
 800e958:	bf00      	nop
 800e95a:	e7fe      	b.n	800e95a <xTaskIncrementTick+0x46>
 800e95c:	4b41      	ldr	r3, [pc, #260]	; (800ea64 <xTaskIncrementTick+0x150>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	60fb      	str	r3, [r7, #12]
 800e962:	4b41      	ldr	r3, [pc, #260]	; (800ea68 <xTaskIncrementTick+0x154>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4a3f      	ldr	r2, [pc, #252]	; (800ea64 <xTaskIncrementTick+0x150>)
 800e968:	6013      	str	r3, [r2, #0]
 800e96a:	4a3f      	ldr	r2, [pc, #252]	; (800ea68 <xTaskIncrementTick+0x154>)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6013      	str	r3, [r2, #0]
 800e970:	4b3e      	ldr	r3, [pc, #248]	; (800ea6c <xTaskIncrementTick+0x158>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	3301      	adds	r3, #1
 800e976:	4a3d      	ldr	r2, [pc, #244]	; (800ea6c <xTaskIncrementTick+0x158>)
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	f000 fb6f 	bl	800f05c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e97e:	4b3c      	ldr	r3, [pc, #240]	; (800ea70 <xTaskIncrementTick+0x15c>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	693a      	ldr	r2, [r7, #16]
 800e984:	429a      	cmp	r2, r3
 800e986:	d349      	bcc.n	800ea1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e988:	4b36      	ldr	r3, [pc, #216]	; (800ea64 <xTaskIncrementTick+0x150>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d104      	bne.n	800e99c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e992:	4b37      	ldr	r3, [pc, #220]	; (800ea70 <xTaskIncrementTick+0x15c>)
 800e994:	f04f 32ff 	mov.w	r2, #4294967295
 800e998:	601a      	str	r2, [r3, #0]
					break;
 800e99a:	e03f      	b.n	800ea1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e99c:	4b31      	ldr	r3, [pc, #196]	; (800ea64 <xTaskIncrementTick+0x150>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e9ac:	693a      	ldr	r2, [r7, #16]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d203      	bcs.n	800e9bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e9b4:	4a2e      	ldr	r2, [pc, #184]	; (800ea70 <xTaskIncrementTick+0x15c>)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e9ba:	e02f      	b.n	800ea1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	3304      	adds	r3, #4
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe fbed 	bl	800d1a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d004      	beq.n	800e9d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	3318      	adds	r3, #24
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe fbe4 	bl	800d1a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9dc:	4b25      	ldr	r3, [pc, #148]	; (800ea74 <xTaskIncrementTick+0x160>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d903      	bls.n	800e9ec <xTaskIncrementTick+0xd8>
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e8:	4a22      	ldr	r2, [pc, #136]	; (800ea74 <xTaskIncrementTick+0x160>)
 800e9ea:	6013      	str	r3, [r2, #0]
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4413      	add	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4a1f      	ldr	r2, [pc, #124]	; (800ea78 <xTaskIncrementTick+0x164>)
 800e9fa:	441a      	add	r2, r3
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	3304      	adds	r3, #4
 800ea00:	4619      	mov	r1, r3
 800ea02:	4610      	mov	r0, r2
 800ea04:	f7fe fb6f 	bl	800d0e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0c:	4b1b      	ldr	r3, [pc, #108]	; (800ea7c <xTaskIncrementTick+0x168>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d3b8      	bcc.n	800e988 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ea16:	2301      	movs	r3, #1
 800ea18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea1a:	e7b5      	b.n	800e988 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea1c:	4b17      	ldr	r3, [pc, #92]	; (800ea7c <xTaskIncrementTick+0x168>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea22:	4915      	ldr	r1, [pc, #84]	; (800ea78 <xTaskIncrementTick+0x164>)
 800ea24:	4613      	mov	r3, r2
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	4413      	add	r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	440b      	add	r3, r1
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d901      	bls.n	800ea38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ea34:	2301      	movs	r3, #1
 800ea36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ea38:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <xTaskIncrementTick+0x16c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d007      	beq.n	800ea50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ea40:	2301      	movs	r3, #1
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	e004      	b.n	800ea50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ea46:	4b0f      	ldr	r3, [pc, #60]	; (800ea84 <xTaskIncrementTick+0x170>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	4a0d      	ldr	r2, [pc, #52]	; (800ea84 <xTaskIncrementTick+0x170>)
 800ea4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ea50:	697b      	ldr	r3, [r7, #20]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3718      	adds	r7, #24
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20001260 	.word	0x20001260
 800ea60:	2000123c 	.word	0x2000123c
 800ea64:	200011f0 	.word	0x200011f0
 800ea68:	200011f4 	.word	0x200011f4
 800ea6c:	20001250 	.word	0x20001250
 800ea70:	20001258 	.word	0x20001258
 800ea74:	20001240 	.word	0x20001240
 800ea78:	20000d68 	.word	0x20000d68
 800ea7c:	20000d64 	.word	0x20000d64
 800ea80:	2000124c 	.word	0x2000124c
 800ea84:	20001248 	.word	0x20001248

0800ea88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea8e:	4b28      	ldr	r3, [pc, #160]	; (800eb30 <vTaskSwitchContext+0xa8>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ea96:	4b27      	ldr	r3, [pc, #156]	; (800eb34 <vTaskSwitchContext+0xac>)
 800ea98:	2201      	movs	r2, #1
 800ea9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea9c:	e041      	b.n	800eb22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ea9e:	4b25      	ldr	r3, [pc, #148]	; (800eb34 <vTaskSwitchContext+0xac>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaa4:	4b24      	ldr	r3, [pc, #144]	; (800eb38 <vTaskSwitchContext+0xb0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	60fb      	str	r3, [r7, #12]
 800eaaa:	e010      	b.n	800eace <vTaskSwitchContext+0x46>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10a      	bne.n	800eac8 <vTaskSwitchContext+0x40>
	__asm volatile
 800eab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	607b      	str	r3, [r7, #4]
}
 800eac4:	bf00      	nop
 800eac6:	e7fe      	b.n	800eac6 <vTaskSwitchContext+0x3e>
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3b01      	subs	r3, #1
 800eacc:	60fb      	str	r3, [r7, #12]
 800eace:	491b      	ldr	r1, [pc, #108]	; (800eb3c <vTaskSwitchContext+0xb4>)
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	4613      	mov	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	4413      	add	r3, r2
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	440b      	add	r3, r1
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d0e4      	beq.n	800eaac <vTaskSwitchContext+0x24>
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	4613      	mov	r3, r2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	4413      	add	r3, r2
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	4a13      	ldr	r2, [pc, #76]	; (800eb3c <vTaskSwitchContext+0xb4>)
 800eaee:	4413      	add	r3, r2
 800eaf0:	60bb      	str	r3, [r7, #8]
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	605a      	str	r2, [r3, #4]
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	3308      	adds	r3, #8
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d104      	bne.n	800eb12 <vTaskSwitchContext+0x8a>
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	685a      	ldr	r2, [r3, #4]
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	605a      	str	r2, [r3, #4]
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	4a09      	ldr	r2, [pc, #36]	; (800eb40 <vTaskSwitchContext+0xb8>)
 800eb1a:	6013      	str	r3, [r2, #0]
 800eb1c:	4a06      	ldr	r2, [pc, #24]	; (800eb38 <vTaskSwitchContext+0xb0>)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6013      	str	r3, [r2, #0]
}
 800eb22:	bf00      	nop
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	20001260 	.word	0x20001260
 800eb34:	2000124c 	.word	0x2000124c
 800eb38:	20001240 	.word	0x20001240
 800eb3c:	20000d68 	.word	0x20000d68
 800eb40:	20000d64 	.word	0x20000d64

0800eb44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d10a      	bne.n	800eb6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	60fb      	str	r3, [r7, #12]
}
 800eb66:	bf00      	nop
 800eb68:	e7fe      	b.n	800eb68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb6a:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <vTaskPlaceOnEventList+0x44>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3318      	adds	r3, #24
 800eb70:	4619      	mov	r1, r3
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7fe fadb 	bl	800d12e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb78:	2101      	movs	r1, #1
 800eb7a:	6838      	ldr	r0, [r7, #0]
 800eb7c:	f000 fc40 	bl	800f400 <prvAddCurrentTaskToDelayedList>
}
 800eb80:	bf00      	nop
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	20000d64 	.word	0x20000d64

0800eb8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10a      	bne.n	800ebb4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800eb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	617b      	str	r3, [r7, #20]
}
 800ebb0:	bf00      	nop
 800ebb2:	e7fe      	b.n	800ebb2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800ebb4:	4b11      	ldr	r3, [pc, #68]	; (800ebfc <vTaskPlaceOnUnorderedEventList+0x70>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10a      	bne.n	800ebd2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800ebbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc0:	f383 8811 	msr	BASEPRI, r3
 800ebc4:	f3bf 8f6f 	isb	sy
 800ebc8:	f3bf 8f4f 	dsb	sy
 800ebcc:	613b      	str	r3, [r7, #16]
}
 800ebce:	bf00      	nop
 800ebd0:	e7fe      	b.n	800ebd0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ebd2:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68ba      	ldr	r2, [r7, #8]
 800ebd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ebdc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebde:	4b08      	ldr	r3, [pc, #32]	; (800ec00 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	3318      	adds	r3, #24
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7fe fa7d 	bl	800d0e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebec:	2101      	movs	r1, #1
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fc06 	bl	800f400 <prvAddCurrentTaskToDelayedList>
}
 800ebf4:	bf00      	nop
 800ebf6:	3718      	adds	r7, #24
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	20001260 	.word	0x20001260
 800ec00:	20000d64 	.word	0x20000d64

0800ec04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d10a      	bne.n	800ec2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ec16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	617b      	str	r3, [r7, #20]
}
 800ec28:	bf00      	nop
 800ec2a:	e7fe      	b.n	800ec2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec2c:	4b0a      	ldr	r3, [pc, #40]	; (800ec58 <vTaskPlaceOnEventListRestricted+0x54>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	3318      	adds	r3, #24
 800ec32:	4619      	mov	r1, r3
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f7fe fa56 	bl	800d0e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d002      	beq.n	800ec46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ec40:	f04f 33ff 	mov.w	r3, #4294967295
 800ec44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec46:	6879      	ldr	r1, [r7, #4]
 800ec48:	68b8      	ldr	r0, [r7, #8]
 800ec4a:	f000 fbd9 	bl	800f400 <prvAddCurrentTaskToDelayedList>
	}
 800ec4e:	bf00      	nop
 800ec50:	3718      	adds	r7, #24
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	20000d64 	.word	0x20000d64

0800ec5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10a      	bne.n	800ec88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	60fb      	str	r3, [r7, #12]
}
 800ec84:	bf00      	nop
 800ec86:	e7fe      	b.n	800ec86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	3318      	adds	r3, #24
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe fa87 	bl	800d1a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec92:	4b1e      	ldr	r3, [pc, #120]	; (800ed0c <xTaskRemoveFromEventList+0xb0>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d11d      	bne.n	800ecd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fe fa7e 	bl	800d1a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eca8:	4b19      	ldr	r3, [pc, #100]	; (800ed10 <xTaskRemoveFromEventList+0xb4>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d903      	bls.n	800ecb8 <xTaskRemoveFromEventList+0x5c>
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb4:	4a16      	ldr	r2, [pc, #88]	; (800ed10 <xTaskRemoveFromEventList+0xb4>)
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	4413      	add	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4a13      	ldr	r2, [pc, #76]	; (800ed14 <xTaskRemoveFromEventList+0xb8>)
 800ecc6:	441a      	add	r2, r3
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	3304      	adds	r3, #4
 800eccc:	4619      	mov	r1, r3
 800ecce:	4610      	mov	r0, r2
 800ecd0:	f7fe fa09 	bl	800d0e6 <vListInsertEnd>
 800ecd4:	e005      	b.n	800ece2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	3318      	adds	r3, #24
 800ecda:	4619      	mov	r1, r3
 800ecdc:	480e      	ldr	r0, [pc, #56]	; (800ed18 <xTaskRemoveFromEventList+0xbc>)
 800ecde:	f7fe fa02 	bl	800d0e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece6:	4b0d      	ldr	r3, [pc, #52]	; (800ed1c <xTaskRemoveFromEventList+0xc0>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d905      	bls.n	800ecfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <xTaskRemoveFromEventList+0xc4>)
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	601a      	str	r2, [r3, #0]
 800ecfa:	e001      	b.n	800ed00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed00:	697b      	ldr	r3, [r7, #20]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	20001260 	.word	0x20001260
 800ed10:	20001240 	.word	0x20001240
 800ed14:	20000d68 	.word	0x20000d68
 800ed18:	200011f8 	.word	0x200011f8
 800ed1c:	20000d64 	.word	0x20000d64
 800ed20:	2000124c 	.word	0x2000124c

0800ed24 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b086      	sub	sp, #24
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ed2e:	4b29      	ldr	r3, [pc, #164]	; (800edd4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d10a      	bne.n	800ed4c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ed36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3a:	f383 8811 	msr	BASEPRI, r3
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	f3bf 8f4f 	dsb	sy
 800ed46:	613b      	str	r3, [r7, #16]
}
 800ed48:	bf00      	nop
 800ed4a:	e7fe      	b.n	800ed4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d10a      	bne.n	800ed78 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	60fb      	str	r3, [r7, #12]
}
 800ed74:	bf00      	nop
 800ed76:	e7fe      	b.n	800ed76 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7fe fa11 	bl	800d1a0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	3304      	adds	r3, #4
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe fa0c 	bl	800d1a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed8c:	4b12      	ldr	r3, [pc, #72]	; (800edd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d903      	bls.n	800ed9c <vTaskRemoveFromUnorderedEventList+0x78>
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed98:	4a0f      	ldr	r2, [pc, #60]	; (800edd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ed9a:	6013      	str	r3, [r2, #0]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda0:	4613      	mov	r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	4413      	add	r3, r2
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	4a0c      	ldr	r2, [pc, #48]	; (800eddc <vTaskRemoveFromUnorderedEventList+0xb8>)
 800edaa:	441a      	add	r2, r3
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	3304      	adds	r3, #4
 800edb0:	4619      	mov	r1, r3
 800edb2:	4610      	mov	r0, r2
 800edb4:	f7fe f997 	bl	800d0e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edbc:	4b08      	ldr	r3, [pc, #32]	; (800ede0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d902      	bls.n	800edcc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800edc6:	4b07      	ldr	r3, [pc, #28]	; (800ede4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800edc8:	2201      	movs	r2, #1
 800edca:	601a      	str	r2, [r3, #0]
	}
}
 800edcc:	bf00      	nop
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	20001260 	.word	0x20001260
 800edd8:	20001240 	.word	0x20001240
 800eddc:	20000d68 	.word	0x20000d68
 800ede0:	20000d64 	.word	0x20000d64
 800ede4:	2000124c 	.word	0x2000124c

0800ede8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800edf0:	4b06      	ldr	r3, [pc, #24]	; (800ee0c <vTaskInternalSetTimeOutState+0x24>)
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800edf8:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <vTaskInternalSetTimeOutState+0x28>)
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	605a      	str	r2, [r3, #4]
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr
 800ee0c:	20001250 	.word	0x20001250
 800ee10:	2000123c 	.word	0x2000123c

0800ee14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b088      	sub	sp, #32
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10a      	bne.n	800ee3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	613b      	str	r3, [r7, #16]
}
 800ee36:	bf00      	nop
 800ee38:	e7fe      	b.n	800ee38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10a      	bne.n	800ee56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	60fb      	str	r3, [r7, #12]
}
 800ee52:	bf00      	nop
 800ee54:	e7fe      	b.n	800ee54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ee56:	f000 ffc5 	bl	800fde4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee5a:	4b1d      	ldr	r3, [pc, #116]	; (800eed0 <xTaskCheckForTimeOut+0xbc>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	69ba      	ldr	r2, [r7, #24]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee72:	d102      	bne.n	800ee7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee74:	2300      	movs	r3, #0
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	e023      	b.n	800eec2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	4b15      	ldr	r3, [pc, #84]	; (800eed4 <xTaskCheckForTimeOut+0xc0>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d007      	beq.n	800ee96 <xTaskCheckForTimeOut+0x82>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	69ba      	ldr	r2, [r7, #24]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d302      	bcc.n	800ee96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee90:	2301      	movs	r3, #1
 800ee92:	61fb      	str	r3, [r7, #28]
 800ee94:	e015      	b.n	800eec2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d20b      	bcs.n	800eeb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	1ad2      	subs	r2, r2, r3
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff ff9b 	bl	800ede8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	61fb      	str	r3, [r7, #28]
 800eeb6:	e004      	b.n	800eec2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2200      	movs	r2, #0
 800eebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eebe:	2301      	movs	r3, #1
 800eec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eec2:	f000 ffbf 	bl	800fe44 <vPortExitCritical>

	return xReturn;
 800eec6:	69fb      	ldr	r3, [r7, #28]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3720      	adds	r7, #32
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	2000123c 	.word	0x2000123c
 800eed4:	20001250 	.word	0x20001250

0800eed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eedc:	4b03      	ldr	r3, [pc, #12]	; (800eeec <vTaskMissedYield+0x14>)
 800eede:	2201      	movs	r2, #1
 800eee0:	601a      	str	r2, [r3, #0]
}
 800eee2:	bf00      	nop
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr
 800eeec:	2000124c 	.word	0x2000124c

0800eef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eef8:	f000 f852 	bl	800efa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eefc:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <prvIdleTask+0x28>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d9f9      	bls.n	800eef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ef04:	4b05      	ldr	r3, [pc, #20]	; (800ef1c <prvIdleTask+0x2c>)
 800ef06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ef14:	e7f0      	b.n	800eef8 <prvIdleTask+0x8>
 800ef16:	bf00      	nop
 800ef18:	20000d68 	.word	0x20000d68
 800ef1c:	e000ed04 	.word	0xe000ed04

0800ef20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef26:	2300      	movs	r3, #0
 800ef28:	607b      	str	r3, [r7, #4]
 800ef2a:	e00c      	b.n	800ef46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	4613      	mov	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4a12      	ldr	r2, [pc, #72]	; (800ef80 <prvInitialiseTaskLists+0x60>)
 800ef38:	4413      	add	r3, r2
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fe f8a6 	bl	800d08c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3301      	adds	r3, #1
 800ef44:	607b      	str	r3, [r7, #4]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b37      	cmp	r3, #55	; 0x37
 800ef4a:	d9ef      	bls.n	800ef2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef4c:	480d      	ldr	r0, [pc, #52]	; (800ef84 <prvInitialiseTaskLists+0x64>)
 800ef4e:	f7fe f89d 	bl	800d08c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef52:	480d      	ldr	r0, [pc, #52]	; (800ef88 <prvInitialiseTaskLists+0x68>)
 800ef54:	f7fe f89a 	bl	800d08c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef58:	480c      	ldr	r0, [pc, #48]	; (800ef8c <prvInitialiseTaskLists+0x6c>)
 800ef5a:	f7fe f897 	bl	800d08c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef5e:	480c      	ldr	r0, [pc, #48]	; (800ef90 <prvInitialiseTaskLists+0x70>)
 800ef60:	f7fe f894 	bl	800d08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef64:	480b      	ldr	r0, [pc, #44]	; (800ef94 <prvInitialiseTaskLists+0x74>)
 800ef66:	f7fe f891 	bl	800d08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef6a:	4b0b      	ldr	r3, [pc, #44]	; (800ef98 <prvInitialiseTaskLists+0x78>)
 800ef6c:	4a05      	ldr	r2, [pc, #20]	; (800ef84 <prvInitialiseTaskLists+0x64>)
 800ef6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef70:	4b0a      	ldr	r3, [pc, #40]	; (800ef9c <prvInitialiseTaskLists+0x7c>)
 800ef72:	4a05      	ldr	r2, [pc, #20]	; (800ef88 <prvInitialiseTaskLists+0x68>)
 800ef74:	601a      	str	r2, [r3, #0]
}
 800ef76:	bf00      	nop
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	20000d68 	.word	0x20000d68
 800ef84:	200011c8 	.word	0x200011c8
 800ef88:	200011dc 	.word	0x200011dc
 800ef8c:	200011f8 	.word	0x200011f8
 800ef90:	2000120c 	.word	0x2000120c
 800ef94:	20001224 	.word	0x20001224
 800ef98:	200011f0 	.word	0x200011f0
 800ef9c:	200011f4 	.word	0x200011f4

0800efa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efa6:	e019      	b.n	800efdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800efa8:	f000 ff1c 	bl	800fde4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efac:	4b10      	ldr	r3, [pc, #64]	; (800eff0 <prvCheckTasksWaitingTermination+0x50>)
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	3304      	adds	r3, #4
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fe f8f1 	bl	800d1a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800efbe:	4b0d      	ldr	r3, [pc, #52]	; (800eff4 <prvCheckTasksWaitingTermination+0x54>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	3b01      	subs	r3, #1
 800efc4:	4a0b      	ldr	r2, [pc, #44]	; (800eff4 <prvCheckTasksWaitingTermination+0x54>)
 800efc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800efc8:	4b0b      	ldr	r3, [pc, #44]	; (800eff8 <prvCheckTasksWaitingTermination+0x58>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	3b01      	subs	r3, #1
 800efce:	4a0a      	ldr	r2, [pc, #40]	; (800eff8 <prvCheckTasksWaitingTermination+0x58>)
 800efd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800efd2:	f000 ff37 	bl	800fe44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f810 	bl	800effc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efdc:	4b06      	ldr	r3, [pc, #24]	; (800eff8 <prvCheckTasksWaitingTermination+0x58>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1e1      	bne.n	800efa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800efe4:	bf00      	nop
 800efe6:	bf00      	nop
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	2000120c 	.word	0x2000120c
 800eff4:	20001238 	.word	0x20001238
 800eff8:	20001220 	.word	0x20001220

0800effc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d108      	bne.n	800f020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f012:	4618      	mov	r0, r3
 800f014:	f001 f8d4 	bl	80101c0 <vPortFree>
				vPortFree( pxTCB );
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f001 f8d1 	bl	80101c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f01e:	e018      	b.n	800f052 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f026:	2b01      	cmp	r3, #1
 800f028:	d103      	bne.n	800f032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f001 f8c8 	bl	80101c0 <vPortFree>
	}
 800f030:	e00f      	b.n	800f052 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f038:	2b02      	cmp	r3, #2
 800f03a:	d00a      	beq.n	800f052 <prvDeleteTCB+0x56>
	__asm volatile
 800f03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	60fb      	str	r3, [r7, #12]
}
 800f04e:	bf00      	nop
 800f050:	e7fe      	b.n	800f050 <prvDeleteTCB+0x54>
	}
 800f052:	bf00      	nop
 800f054:	3710      	adds	r7, #16
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f062:	4b0c      	ldr	r3, [pc, #48]	; (800f094 <prvResetNextTaskUnblockTime+0x38>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d104      	bne.n	800f076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f06c:	4b0a      	ldr	r3, [pc, #40]	; (800f098 <prvResetNextTaskUnblockTime+0x3c>)
 800f06e:	f04f 32ff 	mov.w	r2, #4294967295
 800f072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f074:	e008      	b.n	800f088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f076:	4b07      	ldr	r3, [pc, #28]	; (800f094 <prvResetNextTaskUnblockTime+0x38>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	4a04      	ldr	r2, [pc, #16]	; (800f098 <prvResetNextTaskUnblockTime+0x3c>)
 800f086:	6013      	str	r3, [r2, #0]
}
 800f088:	bf00      	nop
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	200011f0 	.word	0x200011f0
 800f098:	20001258 	.word	0x20001258

0800f09c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f0a2:	4b05      	ldr	r3, [pc, #20]	; (800f0b8 <xTaskGetCurrentTaskHandle+0x1c>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f0a8:	687b      	ldr	r3, [r7, #4]
	}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	370c      	adds	r7, #12
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	20000d64 	.word	0x20000d64

0800f0bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0c2:	4b0b      	ldr	r3, [pc, #44]	; (800f0f0 <xTaskGetSchedulerState+0x34>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d102      	bne.n	800f0d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	607b      	str	r3, [r7, #4]
 800f0ce:	e008      	b.n	800f0e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0d0:	4b08      	ldr	r3, [pc, #32]	; (800f0f4 <xTaskGetSchedulerState+0x38>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d102      	bne.n	800f0de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0d8:	2302      	movs	r3, #2
 800f0da:	607b      	str	r3, [r7, #4]
 800f0dc:	e001      	b.n	800f0e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0e2:	687b      	ldr	r3, [r7, #4]
	}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	20001244 	.word	0x20001244
 800f0f4:	20001260 	.word	0x20001260

0800f0f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f104:	2300      	movs	r3, #0
 800f106:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d051      	beq.n	800f1b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f112:	4b2a      	ldr	r3, [pc, #168]	; (800f1bc <xTaskPriorityInherit+0xc4>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f118:	429a      	cmp	r2, r3
 800f11a:	d241      	bcs.n	800f1a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	699b      	ldr	r3, [r3, #24]
 800f120:	2b00      	cmp	r3, #0
 800f122:	db06      	blt.n	800f132 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f124:	4b25      	ldr	r3, [pc, #148]	; (800f1bc <xTaskPriorityInherit+0xc4>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f12a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	6959      	ldr	r1, [r3, #20]
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f13a:	4613      	mov	r3, r2
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	4413      	add	r3, r2
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	4a1f      	ldr	r2, [pc, #124]	; (800f1c0 <xTaskPriorityInherit+0xc8>)
 800f144:	4413      	add	r3, r2
 800f146:	4299      	cmp	r1, r3
 800f148:	d122      	bne.n	800f190 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3304      	adds	r3, #4
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fe f826 	bl	800d1a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f154:	4b19      	ldr	r3, [pc, #100]	; (800f1bc <xTaskPriorityInherit+0xc4>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f162:	4b18      	ldr	r3, [pc, #96]	; (800f1c4 <xTaskPriorityInherit+0xcc>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d903      	bls.n	800f172 <xTaskPriorityInherit+0x7a>
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f16e:	4a15      	ldr	r2, [pc, #84]	; (800f1c4 <xTaskPriorityInherit+0xcc>)
 800f170:	6013      	str	r3, [r2, #0]
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f176:	4613      	mov	r3, r2
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	4413      	add	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	4a10      	ldr	r2, [pc, #64]	; (800f1c0 <xTaskPriorityInherit+0xc8>)
 800f180:	441a      	add	r2, r3
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	3304      	adds	r3, #4
 800f186:	4619      	mov	r1, r3
 800f188:	4610      	mov	r0, r2
 800f18a:	f7fd ffac 	bl	800d0e6 <vListInsertEnd>
 800f18e:	e004      	b.n	800f19a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f190:	4b0a      	ldr	r3, [pc, #40]	; (800f1bc <xTaskPriorityInherit+0xc4>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f19a:	2301      	movs	r3, #1
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	e008      	b.n	800f1b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f1a4:	4b05      	ldr	r3, [pc, #20]	; (800f1bc <xTaskPriorityInherit+0xc4>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d201      	bcs.n	800f1b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
	}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	20000d64 	.word	0x20000d64
 800f1c0:	20000d68 	.word	0x20000d68
 800f1c4:	20001240 	.word	0x20001240

0800f1c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d056      	beq.n	800f28c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f1de:	4b2e      	ldr	r3, [pc, #184]	; (800f298 <xTaskPriorityDisinherit+0xd0>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	693a      	ldr	r2, [r7, #16]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d00a      	beq.n	800f1fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	60fb      	str	r3, [r7, #12]
}
 800f1fa:	bf00      	nop
 800f1fc:	e7fe      	b.n	800f1fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10a      	bne.n	800f21c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	60bb      	str	r3, [r7, #8]
}
 800f218:	bf00      	nop
 800f21a:	e7fe      	b.n	800f21a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f220:	1e5a      	subs	r2, r3, #1
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f22e:	429a      	cmp	r2, r3
 800f230:	d02c      	beq.n	800f28c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f236:	2b00      	cmp	r3, #0
 800f238:	d128      	bne.n	800f28c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	3304      	adds	r3, #4
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fd ffae 	bl	800d1a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f250:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f25c:	4b0f      	ldr	r3, [pc, #60]	; (800f29c <xTaskPriorityDisinherit+0xd4>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	429a      	cmp	r2, r3
 800f262:	d903      	bls.n	800f26c <xTaskPriorityDisinherit+0xa4>
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f268:	4a0c      	ldr	r2, [pc, #48]	; (800f29c <xTaskPriorityDisinherit+0xd4>)
 800f26a:	6013      	str	r3, [r2, #0]
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f270:	4613      	mov	r3, r2
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4413      	add	r3, r2
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	4a09      	ldr	r2, [pc, #36]	; (800f2a0 <xTaskPriorityDisinherit+0xd8>)
 800f27a:	441a      	add	r2, r3
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	3304      	adds	r3, #4
 800f280:	4619      	mov	r1, r3
 800f282:	4610      	mov	r0, r2
 800f284:	f7fd ff2f 	bl	800d0e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f288:	2301      	movs	r3, #1
 800f28a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f28c:	697b      	ldr	r3, [r7, #20]
	}
 800f28e:	4618      	mov	r0, r3
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	20000d64 	.word	0x20000d64
 800f29c:	20001240 	.word	0x20001240
 800f2a0:	20000d68 	.word	0x20000d68

0800f2a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b088      	sub	sp, #32
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d06a      	beq.n	800f392 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10a      	bne.n	800f2da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	60fb      	str	r3, [r7, #12]
}
 800f2d6:	bf00      	nop
 800f2d8:	e7fe      	b.n	800f2d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2de:	683a      	ldr	r2, [r7, #0]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d902      	bls.n	800f2ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	61fb      	str	r3, [r7, #28]
 800f2e8:	e002      	b.n	800f2f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f4:	69fa      	ldr	r2, [r7, #28]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d04b      	beq.n	800f392 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2fe:	697a      	ldr	r2, [r7, #20]
 800f300:	429a      	cmp	r2, r3
 800f302:	d146      	bne.n	800f392 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f304:	4b25      	ldr	r3, [pc, #148]	; (800f39c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	69ba      	ldr	r2, [r7, #24]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d10a      	bne.n	800f324 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	60bb      	str	r3, [r7, #8]
}
 800f320:	bf00      	nop
 800f322:	e7fe      	b.n	800f322 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f328:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	69fa      	ldr	r2, [r7, #28]
 800f32e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	699b      	ldr	r3, [r3, #24]
 800f334:	2b00      	cmp	r3, #0
 800f336:	db04      	blt.n	800f342 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	6959      	ldr	r1, [r3, #20]
 800f346:	693a      	ldr	r2, [r7, #16]
 800f348:	4613      	mov	r3, r2
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	4a13      	ldr	r2, [pc, #76]	; (800f3a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f352:	4413      	add	r3, r2
 800f354:	4299      	cmp	r1, r3
 800f356:	d11c      	bne.n	800f392 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	3304      	adds	r3, #4
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fd ff1f 	bl	800d1a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f362:	69bb      	ldr	r3, [r7, #24]
 800f364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f366:	4b0f      	ldr	r3, [pc, #60]	; (800f3a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d903      	bls.n	800f376 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f372:	4a0c      	ldr	r2, [pc, #48]	; (800f3a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f374:	6013      	str	r3, [r2, #0]
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f37a:	4613      	mov	r3, r2
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	4413      	add	r3, r2
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	4a07      	ldr	r2, [pc, #28]	; (800f3a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f384:	441a      	add	r2, r3
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	3304      	adds	r3, #4
 800f38a:	4619      	mov	r1, r3
 800f38c:	4610      	mov	r0, r2
 800f38e:	f7fd feaa 	bl	800d0e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f392:	bf00      	nop
 800f394:	3720      	adds	r7, #32
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20000d64 	.word	0x20000d64
 800f3a0:	20000d68 	.word	0x20000d68
 800f3a4:	20001240 	.word	0x20001240

0800f3a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f3ae:	4b09      	ldr	r3, [pc, #36]	; (800f3d4 <uxTaskResetEventItemValue+0x2c>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	699b      	ldr	r3, [r3, #24]
 800f3b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3b6:	4b07      	ldr	r3, [pc, #28]	; (800f3d4 <uxTaskResetEventItemValue+0x2c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3bc:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <uxTaskResetEventItemValue+0x2c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f3c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f3c6:	687b      	ldr	r3, [r7, #4]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	20000d64 	.word	0x20000d64

0800f3d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f3d8:	b480      	push	{r7}
 800f3da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f3dc:	4b07      	ldr	r3, [pc, #28]	; (800f3fc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d004      	beq.n	800f3ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f3e4:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3ea:	3201      	adds	r2, #1
 800f3ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f3ee:	4b03      	ldr	r3, [pc, #12]	; (800f3fc <pvTaskIncrementMutexHeldCount+0x24>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
	}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	20000d64 	.word	0x20000d64

0800f400 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f40a:	4b21      	ldr	r3, [pc, #132]	; (800f490 <prvAddCurrentTaskToDelayedList+0x90>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f410:	4b20      	ldr	r3, [pc, #128]	; (800f494 <prvAddCurrentTaskToDelayedList+0x94>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3304      	adds	r3, #4
 800f416:	4618      	mov	r0, r3
 800f418:	f7fd fec2 	bl	800d1a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f422:	d10a      	bne.n	800f43a <prvAddCurrentTaskToDelayedList+0x3a>
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d007      	beq.n	800f43a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f42a:	4b1a      	ldr	r3, [pc, #104]	; (800f494 <prvAddCurrentTaskToDelayedList+0x94>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3304      	adds	r3, #4
 800f430:	4619      	mov	r1, r3
 800f432:	4819      	ldr	r0, [pc, #100]	; (800f498 <prvAddCurrentTaskToDelayedList+0x98>)
 800f434:	f7fd fe57 	bl	800d0e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f438:	e026      	b.n	800f488 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4413      	add	r3, r2
 800f440:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f442:	4b14      	ldr	r3, [pc, #80]	; (800f494 <prvAddCurrentTaskToDelayedList+0x94>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d209      	bcs.n	800f466 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f452:	4b12      	ldr	r3, [pc, #72]	; (800f49c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	4b0f      	ldr	r3, [pc, #60]	; (800f494 <prvAddCurrentTaskToDelayedList+0x94>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3304      	adds	r3, #4
 800f45c:	4619      	mov	r1, r3
 800f45e:	4610      	mov	r0, r2
 800f460:	f7fd fe65 	bl	800d12e <vListInsert>
}
 800f464:	e010      	b.n	800f488 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f466:	4b0e      	ldr	r3, [pc, #56]	; (800f4a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	4b0a      	ldr	r3, [pc, #40]	; (800f494 <prvAddCurrentTaskToDelayedList+0x94>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	3304      	adds	r3, #4
 800f470:	4619      	mov	r1, r3
 800f472:	4610      	mov	r0, r2
 800f474:	f7fd fe5b 	bl	800d12e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f478:	4b0a      	ldr	r3, [pc, #40]	; (800f4a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d202      	bcs.n	800f488 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f482:	4a08      	ldr	r2, [pc, #32]	; (800f4a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	6013      	str	r3, [r2, #0]
}
 800f488:	bf00      	nop
 800f48a:	3710      	adds	r7, #16
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	2000123c 	.word	0x2000123c
 800f494:	20000d64 	.word	0x20000d64
 800f498:	20001224 	.word	0x20001224
 800f49c:	200011f4 	.word	0x200011f4
 800f4a0:	200011f0 	.word	0x200011f0
 800f4a4:	20001258 	.word	0x20001258

0800f4a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08a      	sub	sp, #40	; 0x28
 800f4ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f4b2:	f000 fb07 	bl	800fac4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f4b6:	4b1c      	ldr	r3, [pc, #112]	; (800f528 <xTimerCreateTimerTask+0x80>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d021      	beq.n	800f502 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f4c6:	1d3a      	adds	r2, r7, #4
 800f4c8:	f107 0108 	add.w	r1, r7, #8
 800f4cc:	f107 030c 	add.w	r3, r7, #12
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fd fbd3 	bl	800cc7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f4d6:	6879      	ldr	r1, [r7, #4]
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	9202      	str	r2, [sp, #8]
 800f4de:	9301      	str	r3, [sp, #4]
 800f4e0:	2302      	movs	r3, #2
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	460a      	mov	r2, r1
 800f4e8:	4910      	ldr	r1, [pc, #64]	; (800f52c <xTimerCreateTimerTask+0x84>)
 800f4ea:	4811      	ldr	r0, [pc, #68]	; (800f530 <xTimerCreateTimerTask+0x88>)
 800f4ec:	f7fe fe02 	bl	800e0f4 <xTaskCreateStatic>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	4a10      	ldr	r2, [pc, #64]	; (800f534 <xTimerCreateTimerTask+0x8c>)
 800f4f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f4f6:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <xTimerCreateTimerTask+0x8c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d001      	beq.n	800f502 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f4fe:	2301      	movs	r3, #1
 800f500:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10a      	bne.n	800f51e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50c:	f383 8811 	msr	BASEPRI, r3
 800f510:	f3bf 8f6f 	isb	sy
 800f514:	f3bf 8f4f 	dsb	sy
 800f518:	613b      	str	r3, [r7, #16]
}
 800f51a:	bf00      	nop
 800f51c:	e7fe      	b.n	800f51c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f51e:	697b      	ldr	r3, [r7, #20]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3718      	adds	r7, #24
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20001294 	.word	0x20001294
 800f52c:	08014be0 	.word	0x08014be0
 800f530:	0800f66d 	.word	0x0800f66d
 800f534:	20001298 	.word	0x20001298

0800f538 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b08a      	sub	sp, #40	; 0x28
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
 800f544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f546:	2300      	movs	r3, #0
 800f548:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10a      	bne.n	800f566 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	623b      	str	r3, [r7, #32]
}
 800f562:	bf00      	nop
 800f564:	e7fe      	b.n	800f564 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f566:	4b1a      	ldr	r3, [pc, #104]	; (800f5d0 <xTimerGenericCommand+0x98>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d02a      	beq.n	800f5c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	2b05      	cmp	r3, #5
 800f57e:	dc18      	bgt.n	800f5b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f580:	f7ff fd9c 	bl	800f0bc <xTaskGetSchedulerState>
 800f584:	4603      	mov	r3, r0
 800f586:	2b02      	cmp	r3, #2
 800f588:	d109      	bne.n	800f59e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f58a:	4b11      	ldr	r3, [pc, #68]	; (800f5d0 <xTimerGenericCommand+0x98>)
 800f58c:	6818      	ldr	r0, [r3, #0]
 800f58e:	f107 0110 	add.w	r1, r7, #16
 800f592:	2300      	movs	r3, #0
 800f594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f596:	f7fe f821 	bl	800d5dc <xQueueGenericSend>
 800f59a:	6278      	str	r0, [r7, #36]	; 0x24
 800f59c:	e012      	b.n	800f5c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f59e:	4b0c      	ldr	r3, [pc, #48]	; (800f5d0 <xTimerGenericCommand+0x98>)
 800f5a0:	6818      	ldr	r0, [r3, #0]
 800f5a2:	f107 0110 	add.w	r1, r7, #16
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f7fe f817 	bl	800d5dc <xQueueGenericSend>
 800f5ae:	6278      	str	r0, [r7, #36]	; 0x24
 800f5b0:	e008      	b.n	800f5c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f5b2:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <xTimerGenericCommand+0x98>)
 800f5b4:	6818      	ldr	r0, [r3, #0]
 800f5b6:	f107 0110 	add.w	r1, r7, #16
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	f7fe f90b 	bl	800d7d8 <xQueueGenericSendFromISR>
 800f5c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3728      	adds	r7, #40	; 0x28
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20001294 	.word	0x20001294

0800f5d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b088      	sub	sp, #32
 800f5d8:	af02      	add	r7, sp, #8
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5de:	4b22      	ldr	r3, [pc, #136]	; (800f668 <prvProcessExpiredTimer+0x94>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fd fdd7 	bl	800d1a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5f8:	f003 0304 	and.w	r3, r3, #4
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d022      	beq.n	800f646 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	699a      	ldr	r2, [r3, #24]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	18d1      	adds	r1, r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	683a      	ldr	r2, [r7, #0]
 800f60c:	6978      	ldr	r0, [r7, #20]
 800f60e:	f000 f8d1 	bl	800f7b4 <prvInsertTimerInActiveList>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d01f      	beq.n	800f658 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f618:	2300      	movs	r3, #0
 800f61a:	9300      	str	r3, [sp, #0]
 800f61c:	2300      	movs	r3, #0
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	2100      	movs	r1, #0
 800f622:	6978      	ldr	r0, [r7, #20]
 800f624:	f7ff ff88 	bl	800f538 <xTimerGenericCommand>
 800f628:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d113      	bne.n	800f658 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	60fb      	str	r3, [r7, #12]
}
 800f642:	bf00      	nop
 800f644:	e7fe      	b.n	800f644 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f64c:	f023 0301 	bic.w	r3, r3, #1
 800f650:	b2da      	uxtb	r2, r3
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	6a1b      	ldr	r3, [r3, #32]
 800f65c:	6978      	ldr	r0, [r7, #20]
 800f65e:	4798      	blx	r3
}
 800f660:	bf00      	nop
 800f662:	3718      	adds	r7, #24
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	2000128c 	.word	0x2000128c

0800f66c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f674:	f107 0308 	add.w	r3, r7, #8
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 f857 	bl	800f72c <prvGetNextExpireTime>
 800f67e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	4619      	mov	r1, r3
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 f803 	bl	800f690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f68a:	f000 f8d5 	bl	800f838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f68e:	e7f1      	b.n	800f674 <prvTimerTask+0x8>

0800f690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f69a:	f7ff f86d 	bl	800e778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f69e:	f107 0308 	add.w	r3, r7, #8
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 f866 	bl	800f774 <prvSampleTimeNow>
 800f6a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d130      	bne.n	800f712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d10a      	bne.n	800f6cc <prvProcessTimerOrBlockTask+0x3c>
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d806      	bhi.n	800f6cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f6be:	f7ff f869 	bl	800e794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f6c2:	68f9      	ldr	r1, [r7, #12]
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7ff ff85 	bl	800f5d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f6ca:	e024      	b.n	800f716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d008      	beq.n	800f6e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f6d2:	4b13      	ldr	r3, [pc, #76]	; (800f720 <prvProcessTimerOrBlockTask+0x90>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d101      	bne.n	800f6e0 <prvProcessTimerOrBlockTask+0x50>
 800f6dc:	2301      	movs	r3, #1
 800f6de:	e000      	b.n	800f6e2 <prvProcessTimerOrBlockTask+0x52>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f6e4:	4b0f      	ldr	r3, [pc, #60]	; (800f724 <prvProcessTimerOrBlockTask+0x94>)
 800f6e6:	6818      	ldr	r0, [r3, #0]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	f7fe fccb 	bl	800e08c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f6f6:	f7ff f84d 	bl	800e794 <xTaskResumeAll>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10a      	bne.n	800f716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f700:	4b09      	ldr	r3, [pc, #36]	; (800f728 <prvProcessTimerOrBlockTask+0x98>)
 800f702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	f3bf 8f6f 	isb	sy
}
 800f710:	e001      	b.n	800f716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f712:	f7ff f83f 	bl	800e794 <xTaskResumeAll>
}
 800f716:	bf00      	nop
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	20001290 	.word	0x20001290
 800f724:	20001294 	.word	0x20001294
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f734:	4b0e      	ldr	r3, [pc, #56]	; (800f770 <prvGetNextExpireTime+0x44>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d101      	bne.n	800f742 <prvGetNextExpireTime+0x16>
 800f73e:	2201      	movs	r2, #1
 800f740:	e000      	b.n	800f744 <prvGetNextExpireTime+0x18>
 800f742:	2200      	movs	r2, #0
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d105      	bne.n	800f75c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f750:	4b07      	ldr	r3, [pc, #28]	; (800f770 <prvGetNextExpireTime+0x44>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	60fb      	str	r3, [r7, #12]
 800f75a:	e001      	b.n	800f760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f75c:	2300      	movs	r3, #0
 800f75e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f760:	68fb      	ldr	r3, [r7, #12]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3714      	adds	r7, #20
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	2000128c 	.word	0x2000128c

0800f774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f77c:	f7ff f8a8 	bl	800e8d0 <xTaskGetTickCount>
 800f780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f782:	4b0b      	ldr	r3, [pc, #44]	; (800f7b0 <prvSampleTimeNow+0x3c>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d205      	bcs.n	800f798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f78c:	f000 f936 	bl	800f9fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	601a      	str	r2, [r3, #0]
 800f796:	e002      	b.n	800f79e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f79e:	4a04      	ldr	r2, [pc, #16]	; (800f7b0 <prvSampleTimeNow+0x3c>)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	2000129c 	.word	0x2000129c

0800f7b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b086      	sub	sp, #24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	607a      	str	r2, [r7, #4]
 800f7c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d812      	bhi.n	800f800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	1ad2      	subs	r2, r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	699b      	ldr	r3, [r3, #24]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d302      	bcc.n	800f7ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	617b      	str	r3, [r7, #20]
 800f7ec:	e01b      	b.n	800f826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7ee:	4b10      	ldr	r3, [pc, #64]	; (800f830 <prvInsertTimerInActiveList+0x7c>)
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	f7fd fc98 	bl	800d12e <vListInsert>
 800f7fe:	e012      	b.n	800f826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	429a      	cmp	r2, r3
 800f806:	d206      	bcs.n	800f816 <prvInsertTimerInActiveList+0x62>
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d302      	bcc.n	800f816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f810:	2301      	movs	r3, #1
 800f812:	617b      	str	r3, [r7, #20]
 800f814:	e007      	b.n	800f826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f816:	4b07      	ldr	r3, [pc, #28]	; (800f834 <prvInsertTimerInActiveList+0x80>)
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	3304      	adds	r3, #4
 800f81e:	4619      	mov	r1, r3
 800f820:	4610      	mov	r0, r2
 800f822:	f7fd fc84 	bl	800d12e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f826:	697b      	ldr	r3, [r7, #20]
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3718      	adds	r7, #24
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	20001290 	.word	0x20001290
 800f834:	2000128c 	.word	0x2000128c

0800f838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b08e      	sub	sp, #56	; 0x38
 800f83c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f83e:	e0ca      	b.n	800f9d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	da18      	bge.n	800f878 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f846:	1d3b      	adds	r3, r7, #4
 800f848:	3304      	adds	r3, #4
 800f84a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10a      	bne.n	800f868 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f856:	f383 8811 	msr	BASEPRI, r3
 800f85a:	f3bf 8f6f 	isb	sy
 800f85e:	f3bf 8f4f 	dsb	sy
 800f862:	61fb      	str	r3, [r7, #28]
}
 800f864:	bf00      	nop
 800f866:	e7fe      	b.n	800f866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f86e:	6850      	ldr	r0, [r2, #4]
 800f870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f872:	6892      	ldr	r2, [r2, #8]
 800f874:	4611      	mov	r1, r2
 800f876:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f2c0 80aa 	blt.w	800f9d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f886:	695b      	ldr	r3, [r3, #20]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d004      	beq.n	800f896 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88e:	3304      	adds	r3, #4
 800f890:	4618      	mov	r0, r3
 800f892:	f7fd fc85 	bl	800d1a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f896:	463b      	mov	r3, r7
 800f898:	4618      	mov	r0, r3
 800f89a:	f7ff ff6b 	bl	800f774 <prvSampleTimeNow>
 800f89e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b09      	cmp	r3, #9
 800f8a4:	f200 8097 	bhi.w	800f9d6 <prvProcessReceivedCommands+0x19e>
 800f8a8:	a201      	add	r2, pc, #4	; (adr r2, 800f8b0 <prvProcessReceivedCommands+0x78>)
 800f8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ae:	bf00      	nop
 800f8b0:	0800f8d9 	.word	0x0800f8d9
 800f8b4:	0800f8d9 	.word	0x0800f8d9
 800f8b8:	0800f8d9 	.word	0x0800f8d9
 800f8bc:	0800f94d 	.word	0x0800f94d
 800f8c0:	0800f961 	.word	0x0800f961
 800f8c4:	0800f9ab 	.word	0x0800f9ab
 800f8c8:	0800f8d9 	.word	0x0800f8d9
 800f8cc:	0800f8d9 	.word	0x0800f8d9
 800f8d0:	0800f94d 	.word	0x0800f94d
 800f8d4:	0800f961 	.word	0x0800f961
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8de:	f043 0301 	orr.w	r3, r3, #1
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f8ea:	68ba      	ldr	r2, [r7, #8]
 800f8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	18d1      	adds	r1, r2, r3
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8f8:	f7ff ff5c 	bl	800f7b4 <prvInsertTimerInActiveList>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d069      	beq.n	800f9d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f904:	6a1b      	ldr	r3, [r3, #32]
 800f906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f910:	f003 0304 	and.w	r3, r3, #4
 800f914:	2b00      	cmp	r3, #0
 800f916:	d05e      	beq.n	800f9d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	441a      	add	r2, r3
 800f920:	2300      	movs	r3, #0
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	2300      	movs	r3, #0
 800f926:	2100      	movs	r1, #0
 800f928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f92a:	f7ff fe05 	bl	800f538 <xTimerGenericCommand>
 800f92e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f930:	6a3b      	ldr	r3, [r7, #32]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d14f      	bne.n	800f9d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	61bb      	str	r3, [r7, #24]
}
 800f948:	bf00      	nop
 800f94a:	e7fe      	b.n	800f94a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f952:	f023 0301 	bic.w	r3, r3, #1
 800f956:	b2da      	uxtb	r2, r3
 800f958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f95e:	e03a      	b.n	800f9d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f966:	f043 0301 	orr.w	r3, r3, #1
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f976:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d10a      	bne.n	800f996 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	617b      	str	r3, [r7, #20]
}
 800f992:	bf00      	nop
 800f994:	e7fe      	b.n	800f994 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f998:	699a      	ldr	r2, [r3, #24]
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	18d1      	adds	r1, r2, r3
 800f99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9a4:	f7ff ff06 	bl	800f7b4 <prvInsertTimerInActiveList>
					break;
 800f9a8:	e015      	b.n	800f9d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9b0:	f003 0302 	and.w	r3, r3, #2
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d103      	bne.n	800f9c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9ba:	f000 fc01 	bl	80101c0 <vPortFree>
 800f9be:	e00a      	b.n	800f9d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9c6:	f023 0301 	bic.w	r3, r3, #1
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f9d2:	e000      	b.n	800f9d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f9d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f9d6:	4b08      	ldr	r3, [pc, #32]	; (800f9f8 <prvProcessReceivedCommands+0x1c0>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	1d39      	adds	r1, r7, #4
 800f9dc:	2200      	movs	r2, #0
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fd ff96 	bl	800d910 <xQueueReceive>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f47f af2a 	bne.w	800f840 <prvProcessReceivedCommands+0x8>
	}
}
 800f9ec:	bf00      	nop
 800f9ee:	bf00      	nop
 800f9f0:	3730      	adds	r7, #48	; 0x30
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	20001294 	.word	0x20001294

0800f9fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b088      	sub	sp, #32
 800fa00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa02:	e048      	b.n	800fa96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa04:	4b2d      	ldr	r3, [pc, #180]	; (800fabc <prvSwitchTimerLists+0xc0>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa0e:	4b2b      	ldr	r3, [pc, #172]	; (800fabc <prvSwitchTimerLists+0xc0>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	3304      	adds	r3, #4
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd fbbf 	bl	800d1a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa30:	f003 0304 	and.w	r3, r3, #4
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d02e      	beq.n	800fa96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	699b      	ldr	r3, [r3, #24]
 800fa3c:	693a      	ldr	r2, [r7, #16]
 800fa3e:	4413      	add	r3, r2
 800fa40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fa42:	68ba      	ldr	r2, [r7, #8]
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d90e      	bls.n	800fa68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa56:	4b19      	ldr	r3, [pc, #100]	; (800fabc <prvSwitchTimerLists+0xc0>)
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	4619      	mov	r1, r3
 800fa60:	4610      	mov	r0, r2
 800fa62:	f7fd fb64 	bl	800d12e <vListInsert>
 800fa66:	e016      	b.n	800fa96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa68:	2300      	movs	r3, #0
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	693a      	ldr	r2, [r7, #16]
 800fa70:	2100      	movs	r1, #0
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f7ff fd60 	bl	800f538 <xTimerGenericCommand>
 800fa78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d10a      	bne.n	800fa96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	603b      	str	r3, [r7, #0]
}
 800fa92:	bf00      	nop
 800fa94:	e7fe      	b.n	800fa94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa96:	4b09      	ldr	r3, [pc, #36]	; (800fabc <prvSwitchTimerLists+0xc0>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1b1      	bne.n	800fa04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800faa0:	4b06      	ldr	r3, [pc, #24]	; (800fabc <prvSwitchTimerLists+0xc0>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800faa6:	4b06      	ldr	r3, [pc, #24]	; (800fac0 <prvSwitchTimerLists+0xc4>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a04      	ldr	r2, [pc, #16]	; (800fabc <prvSwitchTimerLists+0xc0>)
 800faac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800faae:	4a04      	ldr	r2, [pc, #16]	; (800fac0 <prvSwitchTimerLists+0xc4>)
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	6013      	str	r3, [r2, #0]
}
 800fab4:	bf00      	nop
 800fab6:	3718      	adds	r7, #24
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	2000128c 	.word	0x2000128c
 800fac0:	20001290 	.word	0x20001290

0800fac4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800faca:	f000 f98b 	bl	800fde4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800face:	4b15      	ldr	r3, [pc, #84]	; (800fb24 <prvCheckForValidListAndQueue+0x60>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d120      	bne.n	800fb18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fad6:	4814      	ldr	r0, [pc, #80]	; (800fb28 <prvCheckForValidListAndQueue+0x64>)
 800fad8:	f7fd fad8 	bl	800d08c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fadc:	4813      	ldr	r0, [pc, #76]	; (800fb2c <prvCheckForValidListAndQueue+0x68>)
 800fade:	f7fd fad5 	bl	800d08c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fae2:	4b13      	ldr	r3, [pc, #76]	; (800fb30 <prvCheckForValidListAndQueue+0x6c>)
 800fae4:	4a10      	ldr	r2, [pc, #64]	; (800fb28 <prvCheckForValidListAndQueue+0x64>)
 800fae6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fae8:	4b12      	ldr	r3, [pc, #72]	; (800fb34 <prvCheckForValidListAndQueue+0x70>)
 800faea:	4a10      	ldr	r2, [pc, #64]	; (800fb2c <prvCheckForValidListAndQueue+0x68>)
 800faec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800faee:	2300      	movs	r3, #0
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	4b11      	ldr	r3, [pc, #68]	; (800fb38 <prvCheckForValidListAndQueue+0x74>)
 800faf4:	4a11      	ldr	r2, [pc, #68]	; (800fb3c <prvCheckForValidListAndQueue+0x78>)
 800faf6:	2110      	movs	r1, #16
 800faf8:	200a      	movs	r0, #10
 800fafa:	f7fd fbe3 	bl	800d2c4 <xQueueGenericCreateStatic>
 800fafe:	4603      	mov	r3, r0
 800fb00:	4a08      	ldr	r2, [pc, #32]	; (800fb24 <prvCheckForValidListAndQueue+0x60>)
 800fb02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fb04:	4b07      	ldr	r3, [pc, #28]	; (800fb24 <prvCheckForValidListAndQueue+0x60>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d005      	beq.n	800fb18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fb0c:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <prvCheckForValidListAndQueue+0x60>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	490b      	ldr	r1, [pc, #44]	; (800fb40 <prvCheckForValidListAndQueue+0x7c>)
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fe fa90 	bl	800e038 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb18:	f000 f994 	bl	800fe44 <vPortExitCritical>
}
 800fb1c:	bf00      	nop
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	20001294 	.word	0x20001294
 800fb28:	20001264 	.word	0x20001264
 800fb2c:	20001278 	.word	0x20001278
 800fb30:	2000128c 	.word	0x2000128c
 800fb34:	20001290 	.word	0x20001290
 800fb38:	20001340 	.word	0x20001340
 800fb3c:	200012a0 	.word	0x200012a0
 800fb40:	08014be8 	.word	0x08014be8

0800fb44 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b08a      	sub	sp, #40	; 0x28
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	607a      	str	r2, [r7, #4]
 800fb50:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fb52:	f06f 0301 	mvn.w	r3, #1
 800fb56:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb64:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <xTimerPendFunctionCallFromISR+0x3c>)
 800fb66:	6818      	ldr	r0, [r3, #0]
 800fb68:	f107 0114 	add.w	r1, r7, #20
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	683a      	ldr	r2, [r7, #0]
 800fb70:	f7fd fe32 	bl	800d7d8 <xQueueGenericSendFromISR>
 800fb74:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3728      	adds	r7, #40	; 0x28
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	20001294 	.word	0x20001294

0800fb84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	3b04      	subs	r3, #4
 800fb94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	3b04      	subs	r3, #4
 800fba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	f023 0201 	bic.w	r2, r3, #1
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	3b04      	subs	r3, #4
 800fbb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fbb4:	4a0c      	ldr	r2, [pc, #48]	; (800fbe8 <pxPortInitialiseStack+0x64>)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	3b14      	subs	r3, #20
 800fbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3b04      	subs	r3, #4
 800fbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f06f 0202 	mvn.w	r2, #2
 800fbd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	3b20      	subs	r3, #32
 800fbd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fbda:	68fb      	ldr	r3, [r7, #12]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3714      	adds	r7, #20
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr
 800fbe8:	0800fbed 	.word	0x0800fbed

0800fbec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fbf6:	4b12      	ldr	r3, [pc, #72]	; (800fc40 <prvTaskExitError+0x54>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbfe:	d00a      	beq.n	800fc16 <prvTaskExitError+0x2a>
	__asm volatile
 800fc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	60fb      	str	r3, [r7, #12]
}
 800fc12:	bf00      	nop
 800fc14:	e7fe      	b.n	800fc14 <prvTaskExitError+0x28>
	__asm volatile
 800fc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1a:	f383 8811 	msr	BASEPRI, r3
 800fc1e:	f3bf 8f6f 	isb	sy
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	60bb      	str	r3, [r7, #8]
}
 800fc28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fc2a:	bf00      	nop
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d0fc      	beq.n	800fc2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc32:	bf00      	nop
 800fc34:	bf00      	nop
 800fc36:	3714      	adds	r7, #20
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr
 800fc40:	20000068 	.word	0x20000068
	...

0800fc50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc50:	4b07      	ldr	r3, [pc, #28]	; (800fc70 <pxCurrentTCBConst2>)
 800fc52:	6819      	ldr	r1, [r3, #0]
 800fc54:	6808      	ldr	r0, [r1, #0]
 800fc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5a:	f380 8809 	msr	PSP, r0
 800fc5e:	f3bf 8f6f 	isb	sy
 800fc62:	f04f 0000 	mov.w	r0, #0
 800fc66:	f380 8811 	msr	BASEPRI, r0
 800fc6a:	4770      	bx	lr
 800fc6c:	f3af 8000 	nop.w

0800fc70 <pxCurrentTCBConst2>:
 800fc70:	20000d64 	.word	0x20000d64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc74:	bf00      	nop
 800fc76:	bf00      	nop

0800fc78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc78:	4808      	ldr	r0, [pc, #32]	; (800fc9c <prvPortStartFirstTask+0x24>)
 800fc7a:	6800      	ldr	r0, [r0, #0]
 800fc7c:	6800      	ldr	r0, [r0, #0]
 800fc7e:	f380 8808 	msr	MSP, r0
 800fc82:	f04f 0000 	mov.w	r0, #0
 800fc86:	f380 8814 	msr	CONTROL, r0
 800fc8a:	b662      	cpsie	i
 800fc8c:	b661      	cpsie	f
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	df00      	svc	0
 800fc98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc9a:	bf00      	nop
 800fc9c:	e000ed08 	.word	0xe000ed08

0800fca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fca6:	4b46      	ldr	r3, [pc, #280]	; (800fdc0 <xPortStartScheduler+0x120>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a46      	ldr	r2, [pc, #280]	; (800fdc4 <xPortStartScheduler+0x124>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d10a      	bne.n	800fcc6 <xPortStartScheduler+0x26>
	__asm volatile
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	613b      	str	r3, [r7, #16]
}
 800fcc2:	bf00      	nop
 800fcc4:	e7fe      	b.n	800fcc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fcc6:	4b3e      	ldr	r3, [pc, #248]	; (800fdc0 <xPortStartScheduler+0x120>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a3f      	ldr	r2, [pc, #252]	; (800fdc8 <xPortStartScheduler+0x128>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d10a      	bne.n	800fce6 <xPortStartScheduler+0x46>
	__asm volatile
 800fcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd4:	f383 8811 	msr	BASEPRI, r3
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	60fb      	str	r3, [r7, #12]
}
 800fce2:	bf00      	nop
 800fce4:	e7fe      	b.n	800fce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fce6:	4b39      	ldr	r3, [pc, #228]	; (800fdcc <xPortStartScheduler+0x12c>)
 800fce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	22ff      	movs	r2, #255	; 0xff
 800fcf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd00:	78fb      	ldrb	r3, [r7, #3]
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fd08:	b2da      	uxtb	r2, r3
 800fd0a:	4b31      	ldr	r3, [pc, #196]	; (800fdd0 <xPortStartScheduler+0x130>)
 800fd0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd0e:	4b31      	ldr	r3, [pc, #196]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd10:	2207      	movs	r2, #7
 800fd12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd14:	e009      	b.n	800fd2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fd16:	4b2f      	ldr	r3, [pc, #188]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	4a2d      	ldr	r2, [pc, #180]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd20:	78fb      	ldrb	r3, [r7, #3]
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd2a:	78fb      	ldrb	r3, [r7, #3]
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd32:	2b80      	cmp	r3, #128	; 0x80
 800fd34:	d0ef      	beq.n	800fd16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd36:	4b27      	ldr	r3, [pc, #156]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f1c3 0307 	rsb	r3, r3, #7
 800fd3e:	2b04      	cmp	r3, #4
 800fd40:	d00a      	beq.n	800fd58 <xPortStartScheduler+0xb8>
	__asm volatile
 800fd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd46:	f383 8811 	msr	BASEPRI, r3
 800fd4a:	f3bf 8f6f 	isb	sy
 800fd4e:	f3bf 8f4f 	dsb	sy
 800fd52:	60bb      	str	r3, [r7, #8]
}
 800fd54:	bf00      	nop
 800fd56:	e7fe      	b.n	800fd56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd58:	4b1e      	ldr	r3, [pc, #120]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	021b      	lsls	r3, r3, #8
 800fd5e:	4a1d      	ldr	r2, [pc, #116]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd62:	4b1c      	ldr	r3, [pc, #112]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fd6a:	4a1a      	ldr	r2, [pc, #104]	; (800fdd4 <xPortStartScheduler+0x134>)
 800fd6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd76:	4b18      	ldr	r3, [pc, #96]	; (800fdd8 <xPortStartScheduler+0x138>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a17      	ldr	r2, [pc, #92]	; (800fdd8 <xPortStartScheduler+0x138>)
 800fd7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fd80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd82:	4b15      	ldr	r3, [pc, #84]	; (800fdd8 <xPortStartScheduler+0x138>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	4a14      	ldr	r2, [pc, #80]	; (800fdd8 <xPortStartScheduler+0x138>)
 800fd88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fd8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd8e:	f000 f8dd 	bl	800ff4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd92:	4b12      	ldr	r3, [pc, #72]	; (800fddc <xPortStartScheduler+0x13c>)
 800fd94:	2200      	movs	r2, #0
 800fd96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd98:	f000 f8fc 	bl	800ff94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd9c:	4b10      	ldr	r3, [pc, #64]	; (800fde0 <xPortStartScheduler+0x140>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a0f      	ldr	r2, [pc, #60]	; (800fde0 <xPortStartScheduler+0x140>)
 800fda2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fda6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fda8:	f7ff ff66 	bl	800fc78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fdac:	f7fe fe6c 	bl	800ea88 <vTaskSwitchContext>
	prvTaskExitError();
 800fdb0:	f7ff ff1c 	bl	800fbec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	e000ed00 	.word	0xe000ed00
 800fdc4:	410fc271 	.word	0x410fc271
 800fdc8:	410fc270 	.word	0x410fc270
 800fdcc:	e000e400 	.word	0xe000e400
 800fdd0:	20001390 	.word	0x20001390
 800fdd4:	20001394 	.word	0x20001394
 800fdd8:	e000ed20 	.word	0xe000ed20
 800fddc:	20000068 	.word	0x20000068
 800fde0:	e000ef34 	.word	0xe000ef34

0800fde4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
	__asm volatile
 800fdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	607b      	str	r3, [r7, #4]
}
 800fdfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fdfe:	4b0f      	ldr	r3, [pc, #60]	; (800fe3c <vPortEnterCritical+0x58>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	3301      	adds	r3, #1
 800fe04:	4a0d      	ldr	r2, [pc, #52]	; (800fe3c <vPortEnterCritical+0x58>)
 800fe06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe08:	4b0c      	ldr	r3, [pc, #48]	; (800fe3c <vPortEnterCritical+0x58>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d10f      	bne.n	800fe30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fe10:	4b0b      	ldr	r3, [pc, #44]	; (800fe40 <vPortEnterCritical+0x5c>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00a      	beq.n	800fe30 <vPortEnterCritical+0x4c>
	__asm volatile
 800fe1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1e:	f383 8811 	msr	BASEPRI, r3
 800fe22:	f3bf 8f6f 	isb	sy
 800fe26:	f3bf 8f4f 	dsb	sy
 800fe2a:	603b      	str	r3, [r7, #0]
}
 800fe2c:	bf00      	nop
 800fe2e:	e7fe      	b.n	800fe2e <vPortEnterCritical+0x4a>
	}
}
 800fe30:	bf00      	nop
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr
 800fe3c:	20000068 	.word	0x20000068
 800fe40:	e000ed04 	.word	0xe000ed04

0800fe44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fe4a:	4b12      	ldr	r3, [pc, #72]	; (800fe94 <vPortExitCritical+0x50>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d10a      	bne.n	800fe68 <vPortExitCritical+0x24>
	__asm volatile
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	607b      	str	r3, [r7, #4]
}
 800fe64:	bf00      	nop
 800fe66:	e7fe      	b.n	800fe66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fe68:	4b0a      	ldr	r3, [pc, #40]	; (800fe94 <vPortExitCritical+0x50>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	4a09      	ldr	r2, [pc, #36]	; (800fe94 <vPortExitCritical+0x50>)
 800fe70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe72:	4b08      	ldr	r3, [pc, #32]	; (800fe94 <vPortExitCritical+0x50>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d105      	bne.n	800fe86 <vPortExitCritical+0x42>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	f383 8811 	msr	BASEPRI, r3
}
 800fe84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe86:	bf00      	nop
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	20000068 	.word	0x20000068
	...

0800fea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fea0:	f3ef 8009 	mrs	r0, PSP
 800fea4:	f3bf 8f6f 	isb	sy
 800fea8:	4b15      	ldr	r3, [pc, #84]	; (800ff00 <pxCurrentTCBConst>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	f01e 0f10 	tst.w	lr, #16
 800feb0:	bf08      	it	eq
 800feb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800feb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feba:	6010      	str	r0, [r2, #0]
 800febc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fec4:	f380 8811 	msr	BASEPRI, r0
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	f3bf 8f6f 	isb	sy
 800fed0:	f7fe fdda 	bl	800ea88 <vTaskSwitchContext>
 800fed4:	f04f 0000 	mov.w	r0, #0
 800fed8:	f380 8811 	msr	BASEPRI, r0
 800fedc:	bc09      	pop	{r0, r3}
 800fede:	6819      	ldr	r1, [r3, #0]
 800fee0:	6808      	ldr	r0, [r1, #0]
 800fee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee6:	f01e 0f10 	tst.w	lr, #16
 800feea:	bf08      	it	eq
 800feec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fef0:	f380 8809 	msr	PSP, r0
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	f3af 8000 	nop.w

0800ff00 <pxCurrentTCBConst>:
 800ff00:	20000d64 	.word	0x20000d64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff04:	bf00      	nop
 800ff06:	bf00      	nop

0800ff08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	607b      	str	r3, [r7, #4]
}
 800ff20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ff22:	f7fe fcf7 	bl	800e914 <xTaskIncrementTick>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d003      	beq.n	800ff34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ff2c:	4b06      	ldr	r3, [pc, #24]	; (800ff48 <xPortSysTickHandler+0x40>)
 800ff2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff32:	601a      	str	r2, [r3, #0]
 800ff34:	2300      	movs	r3, #0
 800ff36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	f383 8811 	msr	BASEPRI, r3
}
 800ff3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ff40:	bf00      	nop
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	e000ed04 	.word	0xe000ed04

0800ff4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ff50:	4b0b      	ldr	r3, [pc, #44]	; (800ff80 <vPortSetupTimerInterrupt+0x34>)
 800ff52:	2200      	movs	r2, #0
 800ff54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ff56:	4b0b      	ldr	r3, [pc, #44]	; (800ff84 <vPortSetupTimerInterrupt+0x38>)
 800ff58:	2200      	movs	r2, #0
 800ff5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ff5c:	4b0a      	ldr	r3, [pc, #40]	; (800ff88 <vPortSetupTimerInterrupt+0x3c>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4a0a      	ldr	r2, [pc, #40]	; (800ff8c <vPortSetupTimerInterrupt+0x40>)
 800ff62:	fba2 2303 	umull	r2, r3, r2, r3
 800ff66:	099b      	lsrs	r3, r3, #6
 800ff68:	4a09      	ldr	r2, [pc, #36]	; (800ff90 <vPortSetupTimerInterrupt+0x44>)
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff6e:	4b04      	ldr	r3, [pc, #16]	; (800ff80 <vPortSetupTimerInterrupt+0x34>)
 800ff70:	2207      	movs	r2, #7
 800ff72:	601a      	str	r2, [r3, #0]
}
 800ff74:	bf00      	nop
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop
 800ff80:	e000e010 	.word	0xe000e010
 800ff84:	e000e018 	.word	0xe000e018
 800ff88:	2000003c 	.word	0x2000003c
 800ff8c:	10624dd3 	.word	0x10624dd3
 800ff90:	e000e014 	.word	0xe000e014

0800ff94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ffa4 <vPortEnableVFP+0x10>
 800ff98:	6801      	ldr	r1, [r0, #0]
 800ff9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ff9e:	6001      	str	r1, [r0, #0]
 800ffa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ffa2:	bf00      	nop
 800ffa4:	e000ed88 	.word	0xe000ed88

0800ffa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ffae:	f3ef 8305 	mrs	r3, IPSR
 800ffb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b0f      	cmp	r3, #15
 800ffb8:	d914      	bls.n	800ffe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ffba:	4a17      	ldr	r2, [pc, #92]	; (8010018 <vPortValidateInterruptPriority+0x70>)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ffc4:	4b15      	ldr	r3, [pc, #84]	; (801001c <vPortValidateInterruptPriority+0x74>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	7afa      	ldrb	r2, [r7, #11]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d20a      	bcs.n	800ffe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ffce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd2:	f383 8811 	msr	BASEPRI, r3
 800ffd6:	f3bf 8f6f 	isb	sy
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	607b      	str	r3, [r7, #4]
}
 800ffe0:	bf00      	nop
 800ffe2:	e7fe      	b.n	800ffe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ffe4:	4b0e      	ldr	r3, [pc, #56]	; (8010020 <vPortValidateInterruptPriority+0x78>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ffec:	4b0d      	ldr	r3, [pc, #52]	; (8010024 <vPortValidateInterruptPriority+0x7c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d90a      	bls.n	801000a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff8:	f383 8811 	msr	BASEPRI, r3
 800fffc:	f3bf 8f6f 	isb	sy
 8010000:	f3bf 8f4f 	dsb	sy
 8010004:	603b      	str	r3, [r7, #0]
}
 8010006:	bf00      	nop
 8010008:	e7fe      	b.n	8010008 <vPortValidateInterruptPriority+0x60>
	}
 801000a:	bf00      	nop
 801000c:	3714      	adds	r7, #20
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	e000e3f0 	.word	0xe000e3f0
 801001c:	20001390 	.word	0x20001390
 8010020:	e000ed0c 	.word	0xe000ed0c
 8010024:	20001394 	.word	0x20001394

08010028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b08a      	sub	sp, #40	; 0x28
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010030:	2300      	movs	r3, #0
 8010032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010034:	f7fe fba0 	bl	800e778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010038:	4b5b      	ldr	r3, [pc, #364]	; (80101a8 <pvPortMalloc+0x180>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d101      	bne.n	8010044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010040:	f000 f920 	bl	8010284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010044:	4b59      	ldr	r3, [pc, #356]	; (80101ac <pvPortMalloc+0x184>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4013      	ands	r3, r2
 801004c:	2b00      	cmp	r3, #0
 801004e:	f040 8093 	bne.w	8010178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d01d      	beq.n	8010094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010058:	2208      	movs	r2, #8
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4413      	add	r3, r2
 801005e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f003 0307 	and.w	r3, r3, #7
 8010066:	2b00      	cmp	r3, #0
 8010068:	d014      	beq.n	8010094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f023 0307 	bic.w	r3, r3, #7
 8010070:	3308      	adds	r3, #8
 8010072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f003 0307 	and.w	r3, r3, #7
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00a      	beq.n	8010094 <pvPortMalloc+0x6c>
	__asm volatile
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	617b      	str	r3, [r7, #20]
}
 8010090:	bf00      	nop
 8010092:	e7fe      	b.n	8010092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d06e      	beq.n	8010178 <pvPortMalloc+0x150>
 801009a:	4b45      	ldr	r3, [pc, #276]	; (80101b0 <pvPortMalloc+0x188>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d869      	bhi.n	8010178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80100a4:	4b43      	ldr	r3, [pc, #268]	; (80101b4 <pvPortMalloc+0x18c>)
 80100a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80100a8:	4b42      	ldr	r3, [pc, #264]	; (80101b4 <pvPortMalloc+0x18c>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100ae:	e004      	b.n	80100ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80100b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d903      	bls.n	80100cc <pvPortMalloc+0xa4>
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d1f1      	bne.n	80100b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80100cc:	4b36      	ldr	r3, [pc, #216]	; (80101a8 <pvPortMalloc+0x180>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d050      	beq.n	8010178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100d6:	6a3b      	ldr	r3, [r7, #32]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2208      	movs	r2, #8
 80100dc:	4413      	add	r3, r2
 80100de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80100e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	6a3b      	ldr	r3, [r7, #32]
 80100e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80100e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ea:	685a      	ldr	r2, [r3, #4]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	1ad2      	subs	r2, r2, r3
 80100f0:	2308      	movs	r3, #8
 80100f2:	005b      	lsls	r3, r3, #1
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d91f      	bls.n	8010138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80100f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4413      	add	r3, r2
 80100fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	f003 0307 	and.w	r3, r3, #7
 8010106:	2b00      	cmp	r3, #0
 8010108:	d00a      	beq.n	8010120 <pvPortMalloc+0xf8>
	__asm volatile
 801010a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010e:	f383 8811 	msr	BASEPRI, r3
 8010112:	f3bf 8f6f 	isb	sy
 8010116:	f3bf 8f4f 	dsb	sy
 801011a:	613b      	str	r3, [r7, #16]
}
 801011c:	bf00      	nop
 801011e:	e7fe      	b.n	801011e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010122:	685a      	ldr	r2, [r3, #4]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010132:	69b8      	ldr	r0, [r7, #24]
 8010134:	f000 f908 	bl	8010348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010138:	4b1d      	ldr	r3, [pc, #116]	; (80101b0 <pvPortMalloc+0x188>)
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	4a1b      	ldr	r2, [pc, #108]	; (80101b0 <pvPortMalloc+0x188>)
 8010144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010146:	4b1a      	ldr	r3, [pc, #104]	; (80101b0 <pvPortMalloc+0x188>)
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	4b1b      	ldr	r3, [pc, #108]	; (80101b8 <pvPortMalloc+0x190>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	429a      	cmp	r2, r3
 8010150:	d203      	bcs.n	801015a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010152:	4b17      	ldr	r3, [pc, #92]	; (80101b0 <pvPortMalloc+0x188>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4a18      	ldr	r2, [pc, #96]	; (80101b8 <pvPortMalloc+0x190>)
 8010158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	4b13      	ldr	r3, [pc, #76]	; (80101ac <pvPortMalloc+0x184>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	431a      	orrs	r2, r3
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016a:	2200      	movs	r2, #0
 801016c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801016e:	4b13      	ldr	r3, [pc, #76]	; (80101bc <pvPortMalloc+0x194>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	3301      	adds	r3, #1
 8010174:	4a11      	ldr	r2, [pc, #68]	; (80101bc <pvPortMalloc+0x194>)
 8010176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010178:	f7fe fb0c 	bl	800e794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	f003 0307 	and.w	r3, r3, #7
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00a      	beq.n	801019c <pvPortMalloc+0x174>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	60fb      	str	r3, [r7, #12]
}
 8010198:	bf00      	nop
 801019a:	e7fe      	b.n	801019a <pvPortMalloc+0x172>
	return pvReturn;
 801019c:	69fb      	ldr	r3, [r7, #28]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3728      	adds	r7, #40	; 0x28
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	200063a0 	.word	0x200063a0
 80101ac:	200063b4 	.word	0x200063b4
 80101b0:	200063a4 	.word	0x200063a4
 80101b4:	20006398 	.word	0x20006398
 80101b8:	200063a8 	.word	0x200063a8
 80101bc:	200063ac 	.word	0x200063ac

080101c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b086      	sub	sp, #24
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d04d      	beq.n	801026e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80101d2:	2308      	movs	r3, #8
 80101d4:	425b      	negs	r3, r3
 80101d6:	697a      	ldr	r2, [r7, #20]
 80101d8:	4413      	add	r3, r2
 80101da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	685a      	ldr	r2, [r3, #4]
 80101e4:	4b24      	ldr	r3, [pc, #144]	; (8010278 <vPortFree+0xb8>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4013      	ands	r3, r2
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d10a      	bne.n	8010204 <vPortFree+0x44>
	__asm volatile
 80101ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	60fb      	str	r3, [r7, #12]
}
 8010200:	bf00      	nop
 8010202:	e7fe      	b.n	8010202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00a      	beq.n	8010222 <vPortFree+0x62>
	__asm volatile
 801020c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010210:	f383 8811 	msr	BASEPRI, r3
 8010214:	f3bf 8f6f 	isb	sy
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	60bb      	str	r3, [r7, #8]
}
 801021e:	bf00      	nop
 8010220:	e7fe      	b.n	8010220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	685a      	ldr	r2, [r3, #4]
 8010226:	4b14      	ldr	r3, [pc, #80]	; (8010278 <vPortFree+0xb8>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4013      	ands	r3, r2
 801022c:	2b00      	cmp	r3, #0
 801022e:	d01e      	beq.n	801026e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d11a      	bne.n	801026e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	685a      	ldr	r2, [r3, #4]
 801023c:	4b0e      	ldr	r3, [pc, #56]	; (8010278 <vPortFree+0xb8>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	43db      	mvns	r3, r3
 8010242:	401a      	ands	r2, r3
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010248:	f7fe fa96 	bl	800e778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	685a      	ldr	r2, [r3, #4]
 8010250:	4b0a      	ldr	r3, [pc, #40]	; (801027c <vPortFree+0xbc>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4413      	add	r3, r2
 8010256:	4a09      	ldr	r2, [pc, #36]	; (801027c <vPortFree+0xbc>)
 8010258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801025a:	6938      	ldr	r0, [r7, #16]
 801025c:	f000 f874 	bl	8010348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010260:	4b07      	ldr	r3, [pc, #28]	; (8010280 <vPortFree+0xc0>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	3301      	adds	r3, #1
 8010266:	4a06      	ldr	r2, [pc, #24]	; (8010280 <vPortFree+0xc0>)
 8010268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801026a:	f7fe fa93 	bl	800e794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801026e:	bf00      	nop
 8010270:	3718      	adds	r7, #24
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	200063b4 	.word	0x200063b4
 801027c:	200063a4 	.word	0x200063a4
 8010280:	200063b0 	.word	0x200063b0

08010284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801028a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801028e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010290:	4b27      	ldr	r3, [pc, #156]	; (8010330 <prvHeapInit+0xac>)
 8010292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f003 0307 	and.w	r3, r3, #7
 801029a:	2b00      	cmp	r3, #0
 801029c:	d00c      	beq.n	80102b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	3307      	adds	r3, #7
 80102a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f023 0307 	bic.w	r3, r3, #7
 80102aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	1ad3      	subs	r3, r2, r3
 80102b2:	4a1f      	ldr	r2, [pc, #124]	; (8010330 <prvHeapInit+0xac>)
 80102b4:	4413      	add	r3, r2
 80102b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80102bc:	4a1d      	ldr	r2, [pc, #116]	; (8010334 <prvHeapInit+0xb0>)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80102c2:	4b1c      	ldr	r3, [pc, #112]	; (8010334 <prvHeapInit+0xb0>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	4413      	add	r3, r2
 80102ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80102d0:	2208      	movs	r2, #8
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	1a9b      	subs	r3, r3, r2
 80102d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f023 0307 	bic.w	r3, r3, #7
 80102de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	4a15      	ldr	r2, [pc, #84]	; (8010338 <prvHeapInit+0xb4>)
 80102e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80102e6:	4b14      	ldr	r3, [pc, #80]	; (8010338 <prvHeapInit+0xb4>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2200      	movs	r2, #0
 80102ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80102ee:	4b12      	ldr	r3, [pc, #72]	; (8010338 <prvHeapInit+0xb4>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2200      	movs	r2, #0
 80102f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	1ad2      	subs	r2, r2, r3
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010304:	4b0c      	ldr	r3, [pc, #48]	; (8010338 <prvHeapInit+0xb4>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	4a0a      	ldr	r2, [pc, #40]	; (801033c <prvHeapInit+0xb8>)
 8010312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	4a09      	ldr	r2, [pc, #36]	; (8010340 <prvHeapInit+0xbc>)
 801031a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801031c:	4b09      	ldr	r3, [pc, #36]	; (8010344 <prvHeapInit+0xc0>)
 801031e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010322:	601a      	str	r2, [r3, #0]
}
 8010324:	bf00      	nop
 8010326:	3714      	adds	r7, #20
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr
 8010330:	20001398 	.word	0x20001398
 8010334:	20006398 	.word	0x20006398
 8010338:	200063a0 	.word	0x200063a0
 801033c:	200063a8 	.word	0x200063a8
 8010340:	200063a4 	.word	0x200063a4
 8010344:	200063b4 	.word	0x200063b4

08010348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010348:	b480      	push	{r7}
 801034a:	b085      	sub	sp, #20
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010350:	4b28      	ldr	r3, [pc, #160]	; (80103f4 <prvInsertBlockIntoFreeList+0xac>)
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	e002      	b.n	801035c <prvInsertBlockIntoFreeList+0x14>
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	60fb      	str	r3, [r7, #12]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	429a      	cmp	r2, r3
 8010364:	d8f7      	bhi.n	8010356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	68ba      	ldr	r2, [r7, #8]
 8010370:	4413      	add	r3, r2
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	429a      	cmp	r2, r3
 8010376:	d108      	bne.n	801038a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	685a      	ldr	r2, [r3, #4]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	441a      	add	r2, r3
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	441a      	add	r2, r3
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	429a      	cmp	r2, r3
 801039c:	d118      	bne.n	80103d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	4b15      	ldr	r3, [pc, #84]	; (80103f8 <prvInsertBlockIntoFreeList+0xb0>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d00d      	beq.n	80103c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	685a      	ldr	r2, [r3, #4]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	441a      	add	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	601a      	str	r2, [r3, #0]
 80103c4:	e008      	b.n	80103d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80103c6:	4b0c      	ldr	r3, [pc, #48]	; (80103f8 <prvInsertBlockIntoFreeList+0xb0>)
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	601a      	str	r2, [r3, #0]
 80103ce:	e003      	b.n	80103d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d002      	beq.n	80103e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103e6:	bf00      	nop
 80103e8:	3714      	adds	r7, #20
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	20006398 	.word	0x20006398
 80103f8:	200063a0 	.word	0x200063a0

080103fc <__errno>:
 80103fc:	4b01      	ldr	r3, [pc, #4]	; (8010404 <__errno+0x8>)
 80103fe:	6818      	ldr	r0, [r3, #0]
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	2000006c 	.word	0x2000006c

08010408 <__libc_init_array>:
 8010408:	b570      	push	{r4, r5, r6, lr}
 801040a:	4d0d      	ldr	r5, [pc, #52]	; (8010440 <__libc_init_array+0x38>)
 801040c:	4c0d      	ldr	r4, [pc, #52]	; (8010444 <__libc_init_array+0x3c>)
 801040e:	1b64      	subs	r4, r4, r5
 8010410:	10a4      	asrs	r4, r4, #2
 8010412:	2600      	movs	r6, #0
 8010414:	42a6      	cmp	r6, r4
 8010416:	d109      	bne.n	801042c <__libc_init_array+0x24>
 8010418:	4d0b      	ldr	r5, [pc, #44]	; (8010448 <__libc_init_array+0x40>)
 801041a:	4c0c      	ldr	r4, [pc, #48]	; (801044c <__libc_init_array+0x44>)
 801041c:	f004 fa88 	bl	8014930 <_init>
 8010420:	1b64      	subs	r4, r4, r5
 8010422:	10a4      	asrs	r4, r4, #2
 8010424:	2600      	movs	r6, #0
 8010426:	42a6      	cmp	r6, r4
 8010428:	d105      	bne.n	8010436 <__libc_init_array+0x2e>
 801042a:	bd70      	pop	{r4, r5, r6, pc}
 801042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010430:	4798      	blx	r3
 8010432:	3601      	adds	r6, #1
 8010434:	e7ee      	b.n	8010414 <__libc_init_array+0xc>
 8010436:	f855 3b04 	ldr.w	r3, [r5], #4
 801043a:	4798      	blx	r3
 801043c:	3601      	adds	r6, #1
 801043e:	e7f2      	b.n	8010426 <__libc_init_array+0x1e>
 8010440:	080155ac 	.word	0x080155ac
 8010444:	080155ac 	.word	0x080155ac
 8010448:	080155ac 	.word	0x080155ac
 801044c:	080155b0 	.word	0x080155b0

08010450 <malloc>:
 8010450:	4b02      	ldr	r3, [pc, #8]	; (801045c <malloc+0xc>)
 8010452:	4601      	mov	r1, r0
 8010454:	6818      	ldr	r0, [r3, #0]
 8010456:	f000 b885 	b.w	8010564 <_malloc_r>
 801045a:	bf00      	nop
 801045c:	2000006c 	.word	0x2000006c

08010460 <memcpy>:
 8010460:	440a      	add	r2, r1
 8010462:	4291      	cmp	r1, r2
 8010464:	f100 33ff 	add.w	r3, r0, #4294967295
 8010468:	d100      	bne.n	801046c <memcpy+0xc>
 801046a:	4770      	bx	lr
 801046c:	b510      	push	{r4, lr}
 801046e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010476:	4291      	cmp	r1, r2
 8010478:	d1f9      	bne.n	801046e <memcpy+0xe>
 801047a:	bd10      	pop	{r4, pc}

0801047c <memset>:
 801047c:	4402      	add	r2, r0
 801047e:	4603      	mov	r3, r0
 8010480:	4293      	cmp	r3, r2
 8010482:	d100      	bne.n	8010486 <memset+0xa>
 8010484:	4770      	bx	lr
 8010486:	f803 1b01 	strb.w	r1, [r3], #1
 801048a:	e7f9      	b.n	8010480 <memset+0x4>

0801048c <_free_r>:
 801048c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801048e:	2900      	cmp	r1, #0
 8010490:	d044      	beq.n	801051c <_free_r+0x90>
 8010492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010496:	9001      	str	r0, [sp, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	f1a1 0404 	sub.w	r4, r1, #4
 801049e:	bfb8      	it	lt
 80104a0:	18e4      	addlt	r4, r4, r3
 80104a2:	f001 fbeb 	bl	8011c7c <__malloc_lock>
 80104a6:	4a1e      	ldr	r2, [pc, #120]	; (8010520 <_free_r+0x94>)
 80104a8:	9801      	ldr	r0, [sp, #4]
 80104aa:	6813      	ldr	r3, [r2, #0]
 80104ac:	b933      	cbnz	r3, 80104bc <_free_r+0x30>
 80104ae:	6063      	str	r3, [r4, #4]
 80104b0:	6014      	str	r4, [r2, #0]
 80104b2:	b003      	add	sp, #12
 80104b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104b8:	f001 bbe6 	b.w	8011c88 <__malloc_unlock>
 80104bc:	42a3      	cmp	r3, r4
 80104be:	d908      	bls.n	80104d2 <_free_r+0x46>
 80104c0:	6825      	ldr	r5, [r4, #0]
 80104c2:	1961      	adds	r1, r4, r5
 80104c4:	428b      	cmp	r3, r1
 80104c6:	bf01      	itttt	eq
 80104c8:	6819      	ldreq	r1, [r3, #0]
 80104ca:	685b      	ldreq	r3, [r3, #4]
 80104cc:	1949      	addeq	r1, r1, r5
 80104ce:	6021      	streq	r1, [r4, #0]
 80104d0:	e7ed      	b.n	80104ae <_free_r+0x22>
 80104d2:	461a      	mov	r2, r3
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	b10b      	cbz	r3, 80104dc <_free_r+0x50>
 80104d8:	42a3      	cmp	r3, r4
 80104da:	d9fa      	bls.n	80104d2 <_free_r+0x46>
 80104dc:	6811      	ldr	r1, [r2, #0]
 80104de:	1855      	adds	r5, r2, r1
 80104e0:	42a5      	cmp	r5, r4
 80104e2:	d10b      	bne.n	80104fc <_free_r+0x70>
 80104e4:	6824      	ldr	r4, [r4, #0]
 80104e6:	4421      	add	r1, r4
 80104e8:	1854      	adds	r4, r2, r1
 80104ea:	42a3      	cmp	r3, r4
 80104ec:	6011      	str	r1, [r2, #0]
 80104ee:	d1e0      	bne.n	80104b2 <_free_r+0x26>
 80104f0:	681c      	ldr	r4, [r3, #0]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	6053      	str	r3, [r2, #4]
 80104f6:	4421      	add	r1, r4
 80104f8:	6011      	str	r1, [r2, #0]
 80104fa:	e7da      	b.n	80104b2 <_free_r+0x26>
 80104fc:	d902      	bls.n	8010504 <_free_r+0x78>
 80104fe:	230c      	movs	r3, #12
 8010500:	6003      	str	r3, [r0, #0]
 8010502:	e7d6      	b.n	80104b2 <_free_r+0x26>
 8010504:	6825      	ldr	r5, [r4, #0]
 8010506:	1961      	adds	r1, r4, r5
 8010508:	428b      	cmp	r3, r1
 801050a:	bf04      	itt	eq
 801050c:	6819      	ldreq	r1, [r3, #0]
 801050e:	685b      	ldreq	r3, [r3, #4]
 8010510:	6063      	str	r3, [r4, #4]
 8010512:	bf04      	itt	eq
 8010514:	1949      	addeq	r1, r1, r5
 8010516:	6021      	streq	r1, [r4, #0]
 8010518:	6054      	str	r4, [r2, #4]
 801051a:	e7ca      	b.n	80104b2 <_free_r+0x26>
 801051c:	b003      	add	sp, #12
 801051e:	bd30      	pop	{r4, r5, pc}
 8010520:	200063b8 	.word	0x200063b8

08010524 <sbrk_aligned>:
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	4e0e      	ldr	r6, [pc, #56]	; (8010560 <sbrk_aligned+0x3c>)
 8010528:	460c      	mov	r4, r1
 801052a:	6831      	ldr	r1, [r6, #0]
 801052c:	4605      	mov	r5, r0
 801052e:	b911      	cbnz	r1, 8010536 <sbrk_aligned+0x12>
 8010530:	f000 fcf6 	bl	8010f20 <_sbrk_r>
 8010534:	6030      	str	r0, [r6, #0]
 8010536:	4621      	mov	r1, r4
 8010538:	4628      	mov	r0, r5
 801053a:	f000 fcf1 	bl	8010f20 <_sbrk_r>
 801053e:	1c43      	adds	r3, r0, #1
 8010540:	d00a      	beq.n	8010558 <sbrk_aligned+0x34>
 8010542:	1cc4      	adds	r4, r0, #3
 8010544:	f024 0403 	bic.w	r4, r4, #3
 8010548:	42a0      	cmp	r0, r4
 801054a:	d007      	beq.n	801055c <sbrk_aligned+0x38>
 801054c:	1a21      	subs	r1, r4, r0
 801054e:	4628      	mov	r0, r5
 8010550:	f000 fce6 	bl	8010f20 <_sbrk_r>
 8010554:	3001      	adds	r0, #1
 8010556:	d101      	bne.n	801055c <sbrk_aligned+0x38>
 8010558:	f04f 34ff 	mov.w	r4, #4294967295
 801055c:	4620      	mov	r0, r4
 801055e:	bd70      	pop	{r4, r5, r6, pc}
 8010560:	200063bc 	.word	0x200063bc

08010564 <_malloc_r>:
 8010564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010568:	1ccd      	adds	r5, r1, #3
 801056a:	f025 0503 	bic.w	r5, r5, #3
 801056e:	3508      	adds	r5, #8
 8010570:	2d0c      	cmp	r5, #12
 8010572:	bf38      	it	cc
 8010574:	250c      	movcc	r5, #12
 8010576:	2d00      	cmp	r5, #0
 8010578:	4607      	mov	r7, r0
 801057a:	db01      	blt.n	8010580 <_malloc_r+0x1c>
 801057c:	42a9      	cmp	r1, r5
 801057e:	d905      	bls.n	801058c <_malloc_r+0x28>
 8010580:	230c      	movs	r3, #12
 8010582:	603b      	str	r3, [r7, #0]
 8010584:	2600      	movs	r6, #0
 8010586:	4630      	mov	r0, r6
 8010588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801058c:	4e2e      	ldr	r6, [pc, #184]	; (8010648 <_malloc_r+0xe4>)
 801058e:	f001 fb75 	bl	8011c7c <__malloc_lock>
 8010592:	6833      	ldr	r3, [r6, #0]
 8010594:	461c      	mov	r4, r3
 8010596:	bb34      	cbnz	r4, 80105e6 <_malloc_r+0x82>
 8010598:	4629      	mov	r1, r5
 801059a:	4638      	mov	r0, r7
 801059c:	f7ff ffc2 	bl	8010524 <sbrk_aligned>
 80105a0:	1c43      	adds	r3, r0, #1
 80105a2:	4604      	mov	r4, r0
 80105a4:	d14d      	bne.n	8010642 <_malloc_r+0xde>
 80105a6:	6834      	ldr	r4, [r6, #0]
 80105a8:	4626      	mov	r6, r4
 80105aa:	2e00      	cmp	r6, #0
 80105ac:	d140      	bne.n	8010630 <_malloc_r+0xcc>
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	4631      	mov	r1, r6
 80105b2:	4638      	mov	r0, r7
 80105b4:	eb04 0803 	add.w	r8, r4, r3
 80105b8:	f000 fcb2 	bl	8010f20 <_sbrk_r>
 80105bc:	4580      	cmp	r8, r0
 80105be:	d13a      	bne.n	8010636 <_malloc_r+0xd2>
 80105c0:	6821      	ldr	r1, [r4, #0]
 80105c2:	3503      	adds	r5, #3
 80105c4:	1a6d      	subs	r5, r5, r1
 80105c6:	f025 0503 	bic.w	r5, r5, #3
 80105ca:	3508      	adds	r5, #8
 80105cc:	2d0c      	cmp	r5, #12
 80105ce:	bf38      	it	cc
 80105d0:	250c      	movcc	r5, #12
 80105d2:	4629      	mov	r1, r5
 80105d4:	4638      	mov	r0, r7
 80105d6:	f7ff ffa5 	bl	8010524 <sbrk_aligned>
 80105da:	3001      	adds	r0, #1
 80105dc:	d02b      	beq.n	8010636 <_malloc_r+0xd2>
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	442b      	add	r3, r5
 80105e2:	6023      	str	r3, [r4, #0]
 80105e4:	e00e      	b.n	8010604 <_malloc_r+0xa0>
 80105e6:	6822      	ldr	r2, [r4, #0]
 80105e8:	1b52      	subs	r2, r2, r5
 80105ea:	d41e      	bmi.n	801062a <_malloc_r+0xc6>
 80105ec:	2a0b      	cmp	r2, #11
 80105ee:	d916      	bls.n	801061e <_malloc_r+0xba>
 80105f0:	1961      	adds	r1, r4, r5
 80105f2:	42a3      	cmp	r3, r4
 80105f4:	6025      	str	r5, [r4, #0]
 80105f6:	bf18      	it	ne
 80105f8:	6059      	strne	r1, [r3, #4]
 80105fa:	6863      	ldr	r3, [r4, #4]
 80105fc:	bf08      	it	eq
 80105fe:	6031      	streq	r1, [r6, #0]
 8010600:	5162      	str	r2, [r4, r5]
 8010602:	604b      	str	r3, [r1, #4]
 8010604:	4638      	mov	r0, r7
 8010606:	f104 060b 	add.w	r6, r4, #11
 801060a:	f001 fb3d 	bl	8011c88 <__malloc_unlock>
 801060e:	f026 0607 	bic.w	r6, r6, #7
 8010612:	1d23      	adds	r3, r4, #4
 8010614:	1af2      	subs	r2, r6, r3
 8010616:	d0b6      	beq.n	8010586 <_malloc_r+0x22>
 8010618:	1b9b      	subs	r3, r3, r6
 801061a:	50a3      	str	r3, [r4, r2]
 801061c:	e7b3      	b.n	8010586 <_malloc_r+0x22>
 801061e:	6862      	ldr	r2, [r4, #4]
 8010620:	42a3      	cmp	r3, r4
 8010622:	bf0c      	ite	eq
 8010624:	6032      	streq	r2, [r6, #0]
 8010626:	605a      	strne	r2, [r3, #4]
 8010628:	e7ec      	b.n	8010604 <_malloc_r+0xa0>
 801062a:	4623      	mov	r3, r4
 801062c:	6864      	ldr	r4, [r4, #4]
 801062e:	e7b2      	b.n	8010596 <_malloc_r+0x32>
 8010630:	4634      	mov	r4, r6
 8010632:	6876      	ldr	r6, [r6, #4]
 8010634:	e7b9      	b.n	80105aa <_malloc_r+0x46>
 8010636:	230c      	movs	r3, #12
 8010638:	603b      	str	r3, [r7, #0]
 801063a:	4638      	mov	r0, r7
 801063c:	f001 fb24 	bl	8011c88 <__malloc_unlock>
 8010640:	e7a1      	b.n	8010586 <_malloc_r+0x22>
 8010642:	6025      	str	r5, [r4, #0]
 8010644:	e7de      	b.n	8010604 <_malloc_r+0xa0>
 8010646:	bf00      	nop
 8010648:	200063b8 	.word	0x200063b8

0801064c <__cvt>:
 801064c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010650:	ec55 4b10 	vmov	r4, r5, d0
 8010654:	2d00      	cmp	r5, #0
 8010656:	460e      	mov	r6, r1
 8010658:	4619      	mov	r1, r3
 801065a:	462b      	mov	r3, r5
 801065c:	bfbb      	ittet	lt
 801065e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010662:	461d      	movlt	r5, r3
 8010664:	2300      	movge	r3, #0
 8010666:	232d      	movlt	r3, #45	; 0x2d
 8010668:	700b      	strb	r3, [r1, #0]
 801066a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801066c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010670:	4691      	mov	r9, r2
 8010672:	f023 0820 	bic.w	r8, r3, #32
 8010676:	bfbc      	itt	lt
 8010678:	4622      	movlt	r2, r4
 801067a:	4614      	movlt	r4, r2
 801067c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010680:	d005      	beq.n	801068e <__cvt+0x42>
 8010682:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010686:	d100      	bne.n	801068a <__cvt+0x3e>
 8010688:	3601      	adds	r6, #1
 801068a:	2102      	movs	r1, #2
 801068c:	e000      	b.n	8010690 <__cvt+0x44>
 801068e:	2103      	movs	r1, #3
 8010690:	ab03      	add	r3, sp, #12
 8010692:	9301      	str	r3, [sp, #4]
 8010694:	ab02      	add	r3, sp, #8
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	ec45 4b10 	vmov	d0, r4, r5
 801069c:	4653      	mov	r3, sl
 801069e:	4632      	mov	r2, r6
 80106a0:	f000 fcfa 	bl	8011098 <_dtoa_r>
 80106a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80106a8:	4607      	mov	r7, r0
 80106aa:	d102      	bne.n	80106b2 <__cvt+0x66>
 80106ac:	f019 0f01 	tst.w	r9, #1
 80106b0:	d022      	beq.n	80106f8 <__cvt+0xac>
 80106b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80106b6:	eb07 0906 	add.w	r9, r7, r6
 80106ba:	d110      	bne.n	80106de <__cvt+0x92>
 80106bc:	783b      	ldrb	r3, [r7, #0]
 80106be:	2b30      	cmp	r3, #48	; 0x30
 80106c0:	d10a      	bne.n	80106d8 <__cvt+0x8c>
 80106c2:	2200      	movs	r2, #0
 80106c4:	2300      	movs	r3, #0
 80106c6:	4620      	mov	r0, r4
 80106c8:	4629      	mov	r1, r5
 80106ca:	f7f0 fa15 	bl	8000af8 <__aeabi_dcmpeq>
 80106ce:	b918      	cbnz	r0, 80106d8 <__cvt+0x8c>
 80106d0:	f1c6 0601 	rsb	r6, r6, #1
 80106d4:	f8ca 6000 	str.w	r6, [sl]
 80106d8:	f8da 3000 	ldr.w	r3, [sl]
 80106dc:	4499      	add	r9, r3
 80106de:	2200      	movs	r2, #0
 80106e0:	2300      	movs	r3, #0
 80106e2:	4620      	mov	r0, r4
 80106e4:	4629      	mov	r1, r5
 80106e6:	f7f0 fa07 	bl	8000af8 <__aeabi_dcmpeq>
 80106ea:	b108      	cbz	r0, 80106f0 <__cvt+0xa4>
 80106ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80106f0:	2230      	movs	r2, #48	; 0x30
 80106f2:	9b03      	ldr	r3, [sp, #12]
 80106f4:	454b      	cmp	r3, r9
 80106f6:	d307      	bcc.n	8010708 <__cvt+0xbc>
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80106fc:	1bdb      	subs	r3, r3, r7
 80106fe:	4638      	mov	r0, r7
 8010700:	6013      	str	r3, [r2, #0]
 8010702:	b004      	add	sp, #16
 8010704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010708:	1c59      	adds	r1, r3, #1
 801070a:	9103      	str	r1, [sp, #12]
 801070c:	701a      	strb	r2, [r3, #0]
 801070e:	e7f0      	b.n	80106f2 <__cvt+0xa6>

08010710 <__exponent>:
 8010710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010712:	4603      	mov	r3, r0
 8010714:	2900      	cmp	r1, #0
 8010716:	bfb8      	it	lt
 8010718:	4249      	neglt	r1, r1
 801071a:	f803 2b02 	strb.w	r2, [r3], #2
 801071e:	bfb4      	ite	lt
 8010720:	222d      	movlt	r2, #45	; 0x2d
 8010722:	222b      	movge	r2, #43	; 0x2b
 8010724:	2909      	cmp	r1, #9
 8010726:	7042      	strb	r2, [r0, #1]
 8010728:	dd2a      	ble.n	8010780 <__exponent+0x70>
 801072a:	f10d 0407 	add.w	r4, sp, #7
 801072e:	46a4      	mov	ip, r4
 8010730:	270a      	movs	r7, #10
 8010732:	46a6      	mov	lr, r4
 8010734:	460a      	mov	r2, r1
 8010736:	fb91 f6f7 	sdiv	r6, r1, r7
 801073a:	fb07 1516 	mls	r5, r7, r6, r1
 801073e:	3530      	adds	r5, #48	; 0x30
 8010740:	2a63      	cmp	r2, #99	; 0x63
 8010742:	f104 34ff 	add.w	r4, r4, #4294967295
 8010746:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801074a:	4631      	mov	r1, r6
 801074c:	dcf1      	bgt.n	8010732 <__exponent+0x22>
 801074e:	3130      	adds	r1, #48	; 0x30
 8010750:	f1ae 0502 	sub.w	r5, lr, #2
 8010754:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010758:	1c44      	adds	r4, r0, #1
 801075a:	4629      	mov	r1, r5
 801075c:	4561      	cmp	r1, ip
 801075e:	d30a      	bcc.n	8010776 <__exponent+0x66>
 8010760:	f10d 0209 	add.w	r2, sp, #9
 8010764:	eba2 020e 	sub.w	r2, r2, lr
 8010768:	4565      	cmp	r5, ip
 801076a:	bf88      	it	hi
 801076c:	2200      	movhi	r2, #0
 801076e:	4413      	add	r3, r2
 8010770:	1a18      	subs	r0, r3, r0
 8010772:	b003      	add	sp, #12
 8010774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010776:	f811 2b01 	ldrb.w	r2, [r1], #1
 801077a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801077e:	e7ed      	b.n	801075c <__exponent+0x4c>
 8010780:	2330      	movs	r3, #48	; 0x30
 8010782:	3130      	adds	r1, #48	; 0x30
 8010784:	7083      	strb	r3, [r0, #2]
 8010786:	70c1      	strb	r1, [r0, #3]
 8010788:	1d03      	adds	r3, r0, #4
 801078a:	e7f1      	b.n	8010770 <__exponent+0x60>

0801078c <_printf_float>:
 801078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010790:	ed2d 8b02 	vpush	{d8}
 8010794:	b08d      	sub	sp, #52	; 0x34
 8010796:	460c      	mov	r4, r1
 8010798:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801079c:	4616      	mov	r6, r2
 801079e:	461f      	mov	r7, r3
 80107a0:	4605      	mov	r5, r0
 80107a2:	f001 fa67 	bl	8011c74 <_localeconv_r>
 80107a6:	f8d0 a000 	ldr.w	sl, [r0]
 80107aa:	4650      	mov	r0, sl
 80107ac:	f7ef fd28 	bl	8000200 <strlen>
 80107b0:	2300      	movs	r3, #0
 80107b2:	930a      	str	r3, [sp, #40]	; 0x28
 80107b4:	6823      	ldr	r3, [r4, #0]
 80107b6:	9305      	str	r3, [sp, #20]
 80107b8:	f8d8 3000 	ldr.w	r3, [r8]
 80107bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80107c0:	3307      	adds	r3, #7
 80107c2:	f023 0307 	bic.w	r3, r3, #7
 80107c6:	f103 0208 	add.w	r2, r3, #8
 80107ca:	f8c8 2000 	str.w	r2, [r8]
 80107ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80107d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80107da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80107de:	9307      	str	r3, [sp, #28]
 80107e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80107e4:	ee08 0a10 	vmov	s16, r0
 80107e8:	4b9f      	ldr	r3, [pc, #636]	; (8010a68 <_printf_float+0x2dc>)
 80107ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107ee:	f04f 32ff 	mov.w	r2, #4294967295
 80107f2:	f7f0 f9b3 	bl	8000b5c <__aeabi_dcmpun>
 80107f6:	bb88      	cbnz	r0, 801085c <_printf_float+0xd0>
 80107f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107fc:	4b9a      	ldr	r3, [pc, #616]	; (8010a68 <_printf_float+0x2dc>)
 80107fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010802:	f7f0 f98d 	bl	8000b20 <__aeabi_dcmple>
 8010806:	bb48      	cbnz	r0, 801085c <_printf_float+0xd0>
 8010808:	2200      	movs	r2, #0
 801080a:	2300      	movs	r3, #0
 801080c:	4640      	mov	r0, r8
 801080e:	4649      	mov	r1, r9
 8010810:	f7f0 f97c 	bl	8000b0c <__aeabi_dcmplt>
 8010814:	b110      	cbz	r0, 801081c <_printf_float+0x90>
 8010816:	232d      	movs	r3, #45	; 0x2d
 8010818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801081c:	4b93      	ldr	r3, [pc, #588]	; (8010a6c <_printf_float+0x2e0>)
 801081e:	4894      	ldr	r0, [pc, #592]	; (8010a70 <_printf_float+0x2e4>)
 8010820:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010824:	bf94      	ite	ls
 8010826:	4698      	movls	r8, r3
 8010828:	4680      	movhi	r8, r0
 801082a:	2303      	movs	r3, #3
 801082c:	6123      	str	r3, [r4, #16]
 801082e:	9b05      	ldr	r3, [sp, #20]
 8010830:	f023 0204 	bic.w	r2, r3, #4
 8010834:	6022      	str	r2, [r4, #0]
 8010836:	f04f 0900 	mov.w	r9, #0
 801083a:	9700      	str	r7, [sp, #0]
 801083c:	4633      	mov	r3, r6
 801083e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010840:	4621      	mov	r1, r4
 8010842:	4628      	mov	r0, r5
 8010844:	f000 f9d8 	bl	8010bf8 <_printf_common>
 8010848:	3001      	adds	r0, #1
 801084a:	f040 8090 	bne.w	801096e <_printf_float+0x1e2>
 801084e:	f04f 30ff 	mov.w	r0, #4294967295
 8010852:	b00d      	add	sp, #52	; 0x34
 8010854:	ecbd 8b02 	vpop	{d8}
 8010858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085c:	4642      	mov	r2, r8
 801085e:	464b      	mov	r3, r9
 8010860:	4640      	mov	r0, r8
 8010862:	4649      	mov	r1, r9
 8010864:	f7f0 f97a 	bl	8000b5c <__aeabi_dcmpun>
 8010868:	b140      	cbz	r0, 801087c <_printf_float+0xf0>
 801086a:	464b      	mov	r3, r9
 801086c:	2b00      	cmp	r3, #0
 801086e:	bfbc      	itt	lt
 8010870:	232d      	movlt	r3, #45	; 0x2d
 8010872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010876:	487f      	ldr	r0, [pc, #508]	; (8010a74 <_printf_float+0x2e8>)
 8010878:	4b7f      	ldr	r3, [pc, #508]	; (8010a78 <_printf_float+0x2ec>)
 801087a:	e7d1      	b.n	8010820 <_printf_float+0x94>
 801087c:	6863      	ldr	r3, [r4, #4]
 801087e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010882:	9206      	str	r2, [sp, #24]
 8010884:	1c5a      	adds	r2, r3, #1
 8010886:	d13f      	bne.n	8010908 <_printf_float+0x17c>
 8010888:	2306      	movs	r3, #6
 801088a:	6063      	str	r3, [r4, #4]
 801088c:	9b05      	ldr	r3, [sp, #20]
 801088e:	6861      	ldr	r1, [r4, #4]
 8010890:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010894:	2300      	movs	r3, #0
 8010896:	9303      	str	r3, [sp, #12]
 8010898:	ab0a      	add	r3, sp, #40	; 0x28
 801089a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801089e:	ab09      	add	r3, sp, #36	; 0x24
 80108a0:	ec49 8b10 	vmov	d0, r8, r9
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	6022      	str	r2, [r4, #0]
 80108a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80108ac:	4628      	mov	r0, r5
 80108ae:	f7ff fecd 	bl	801064c <__cvt>
 80108b2:	9b06      	ldr	r3, [sp, #24]
 80108b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108b6:	2b47      	cmp	r3, #71	; 0x47
 80108b8:	4680      	mov	r8, r0
 80108ba:	d108      	bne.n	80108ce <_printf_float+0x142>
 80108bc:	1cc8      	adds	r0, r1, #3
 80108be:	db02      	blt.n	80108c6 <_printf_float+0x13a>
 80108c0:	6863      	ldr	r3, [r4, #4]
 80108c2:	4299      	cmp	r1, r3
 80108c4:	dd41      	ble.n	801094a <_printf_float+0x1be>
 80108c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80108ca:	fa5f fb8b 	uxtb.w	fp, fp
 80108ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80108d2:	d820      	bhi.n	8010916 <_printf_float+0x18a>
 80108d4:	3901      	subs	r1, #1
 80108d6:	465a      	mov	r2, fp
 80108d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80108dc:	9109      	str	r1, [sp, #36]	; 0x24
 80108de:	f7ff ff17 	bl	8010710 <__exponent>
 80108e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108e4:	1813      	adds	r3, r2, r0
 80108e6:	2a01      	cmp	r2, #1
 80108e8:	4681      	mov	r9, r0
 80108ea:	6123      	str	r3, [r4, #16]
 80108ec:	dc02      	bgt.n	80108f4 <_printf_float+0x168>
 80108ee:	6822      	ldr	r2, [r4, #0]
 80108f0:	07d2      	lsls	r2, r2, #31
 80108f2:	d501      	bpl.n	80108f8 <_printf_float+0x16c>
 80108f4:	3301      	adds	r3, #1
 80108f6:	6123      	str	r3, [r4, #16]
 80108f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d09c      	beq.n	801083a <_printf_float+0xae>
 8010900:	232d      	movs	r3, #45	; 0x2d
 8010902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010906:	e798      	b.n	801083a <_printf_float+0xae>
 8010908:	9a06      	ldr	r2, [sp, #24]
 801090a:	2a47      	cmp	r2, #71	; 0x47
 801090c:	d1be      	bne.n	801088c <_printf_float+0x100>
 801090e:	2b00      	cmp	r3, #0
 8010910:	d1bc      	bne.n	801088c <_printf_float+0x100>
 8010912:	2301      	movs	r3, #1
 8010914:	e7b9      	b.n	801088a <_printf_float+0xfe>
 8010916:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801091a:	d118      	bne.n	801094e <_printf_float+0x1c2>
 801091c:	2900      	cmp	r1, #0
 801091e:	6863      	ldr	r3, [r4, #4]
 8010920:	dd0b      	ble.n	801093a <_printf_float+0x1ae>
 8010922:	6121      	str	r1, [r4, #16]
 8010924:	b913      	cbnz	r3, 801092c <_printf_float+0x1a0>
 8010926:	6822      	ldr	r2, [r4, #0]
 8010928:	07d0      	lsls	r0, r2, #31
 801092a:	d502      	bpl.n	8010932 <_printf_float+0x1a6>
 801092c:	3301      	adds	r3, #1
 801092e:	440b      	add	r3, r1
 8010930:	6123      	str	r3, [r4, #16]
 8010932:	65a1      	str	r1, [r4, #88]	; 0x58
 8010934:	f04f 0900 	mov.w	r9, #0
 8010938:	e7de      	b.n	80108f8 <_printf_float+0x16c>
 801093a:	b913      	cbnz	r3, 8010942 <_printf_float+0x1b6>
 801093c:	6822      	ldr	r2, [r4, #0]
 801093e:	07d2      	lsls	r2, r2, #31
 8010940:	d501      	bpl.n	8010946 <_printf_float+0x1ba>
 8010942:	3302      	adds	r3, #2
 8010944:	e7f4      	b.n	8010930 <_printf_float+0x1a4>
 8010946:	2301      	movs	r3, #1
 8010948:	e7f2      	b.n	8010930 <_printf_float+0x1a4>
 801094a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801094e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010950:	4299      	cmp	r1, r3
 8010952:	db05      	blt.n	8010960 <_printf_float+0x1d4>
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	6121      	str	r1, [r4, #16]
 8010958:	07d8      	lsls	r0, r3, #31
 801095a:	d5ea      	bpl.n	8010932 <_printf_float+0x1a6>
 801095c:	1c4b      	adds	r3, r1, #1
 801095e:	e7e7      	b.n	8010930 <_printf_float+0x1a4>
 8010960:	2900      	cmp	r1, #0
 8010962:	bfd4      	ite	le
 8010964:	f1c1 0202 	rsble	r2, r1, #2
 8010968:	2201      	movgt	r2, #1
 801096a:	4413      	add	r3, r2
 801096c:	e7e0      	b.n	8010930 <_printf_float+0x1a4>
 801096e:	6823      	ldr	r3, [r4, #0]
 8010970:	055a      	lsls	r2, r3, #21
 8010972:	d407      	bmi.n	8010984 <_printf_float+0x1f8>
 8010974:	6923      	ldr	r3, [r4, #16]
 8010976:	4642      	mov	r2, r8
 8010978:	4631      	mov	r1, r6
 801097a:	4628      	mov	r0, r5
 801097c:	47b8      	blx	r7
 801097e:	3001      	adds	r0, #1
 8010980:	d12c      	bne.n	80109dc <_printf_float+0x250>
 8010982:	e764      	b.n	801084e <_printf_float+0xc2>
 8010984:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010988:	f240 80e0 	bls.w	8010b4c <_printf_float+0x3c0>
 801098c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010990:	2200      	movs	r2, #0
 8010992:	2300      	movs	r3, #0
 8010994:	f7f0 f8b0 	bl	8000af8 <__aeabi_dcmpeq>
 8010998:	2800      	cmp	r0, #0
 801099a:	d034      	beq.n	8010a06 <_printf_float+0x27a>
 801099c:	4a37      	ldr	r2, [pc, #220]	; (8010a7c <_printf_float+0x2f0>)
 801099e:	2301      	movs	r3, #1
 80109a0:	4631      	mov	r1, r6
 80109a2:	4628      	mov	r0, r5
 80109a4:	47b8      	blx	r7
 80109a6:	3001      	adds	r0, #1
 80109a8:	f43f af51 	beq.w	801084e <_printf_float+0xc2>
 80109ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109b0:	429a      	cmp	r2, r3
 80109b2:	db02      	blt.n	80109ba <_printf_float+0x22e>
 80109b4:	6823      	ldr	r3, [r4, #0]
 80109b6:	07d8      	lsls	r0, r3, #31
 80109b8:	d510      	bpl.n	80109dc <_printf_float+0x250>
 80109ba:	ee18 3a10 	vmov	r3, s16
 80109be:	4652      	mov	r2, sl
 80109c0:	4631      	mov	r1, r6
 80109c2:	4628      	mov	r0, r5
 80109c4:	47b8      	blx	r7
 80109c6:	3001      	adds	r0, #1
 80109c8:	f43f af41 	beq.w	801084e <_printf_float+0xc2>
 80109cc:	f04f 0800 	mov.w	r8, #0
 80109d0:	f104 091a 	add.w	r9, r4, #26
 80109d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109d6:	3b01      	subs	r3, #1
 80109d8:	4543      	cmp	r3, r8
 80109da:	dc09      	bgt.n	80109f0 <_printf_float+0x264>
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	079b      	lsls	r3, r3, #30
 80109e0:	f100 8105 	bmi.w	8010bee <_printf_float+0x462>
 80109e4:	68e0      	ldr	r0, [r4, #12]
 80109e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109e8:	4298      	cmp	r0, r3
 80109ea:	bfb8      	it	lt
 80109ec:	4618      	movlt	r0, r3
 80109ee:	e730      	b.n	8010852 <_printf_float+0xc6>
 80109f0:	2301      	movs	r3, #1
 80109f2:	464a      	mov	r2, r9
 80109f4:	4631      	mov	r1, r6
 80109f6:	4628      	mov	r0, r5
 80109f8:	47b8      	blx	r7
 80109fa:	3001      	adds	r0, #1
 80109fc:	f43f af27 	beq.w	801084e <_printf_float+0xc2>
 8010a00:	f108 0801 	add.w	r8, r8, #1
 8010a04:	e7e6      	b.n	80109d4 <_printf_float+0x248>
 8010a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	dc39      	bgt.n	8010a80 <_printf_float+0x2f4>
 8010a0c:	4a1b      	ldr	r2, [pc, #108]	; (8010a7c <_printf_float+0x2f0>)
 8010a0e:	2301      	movs	r3, #1
 8010a10:	4631      	mov	r1, r6
 8010a12:	4628      	mov	r0, r5
 8010a14:	47b8      	blx	r7
 8010a16:	3001      	adds	r0, #1
 8010a18:	f43f af19 	beq.w	801084e <_printf_float+0xc2>
 8010a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a20:	4313      	orrs	r3, r2
 8010a22:	d102      	bne.n	8010a2a <_printf_float+0x29e>
 8010a24:	6823      	ldr	r3, [r4, #0]
 8010a26:	07d9      	lsls	r1, r3, #31
 8010a28:	d5d8      	bpl.n	80109dc <_printf_float+0x250>
 8010a2a:	ee18 3a10 	vmov	r3, s16
 8010a2e:	4652      	mov	r2, sl
 8010a30:	4631      	mov	r1, r6
 8010a32:	4628      	mov	r0, r5
 8010a34:	47b8      	blx	r7
 8010a36:	3001      	adds	r0, #1
 8010a38:	f43f af09 	beq.w	801084e <_printf_float+0xc2>
 8010a3c:	f04f 0900 	mov.w	r9, #0
 8010a40:	f104 0a1a 	add.w	sl, r4, #26
 8010a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a46:	425b      	negs	r3, r3
 8010a48:	454b      	cmp	r3, r9
 8010a4a:	dc01      	bgt.n	8010a50 <_printf_float+0x2c4>
 8010a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a4e:	e792      	b.n	8010976 <_printf_float+0x1ea>
 8010a50:	2301      	movs	r3, #1
 8010a52:	4652      	mov	r2, sl
 8010a54:	4631      	mov	r1, r6
 8010a56:	4628      	mov	r0, r5
 8010a58:	47b8      	blx	r7
 8010a5a:	3001      	adds	r0, #1
 8010a5c:	f43f aef7 	beq.w	801084e <_printf_float+0xc2>
 8010a60:	f109 0901 	add.w	r9, r9, #1
 8010a64:	e7ee      	b.n	8010a44 <_printf_float+0x2b8>
 8010a66:	bf00      	nop
 8010a68:	7fefffff 	.word	0x7fefffff
 8010a6c:	08014db0 	.word	0x08014db0
 8010a70:	08014db4 	.word	0x08014db4
 8010a74:	08014dbc 	.word	0x08014dbc
 8010a78:	08014db8 	.word	0x08014db8
 8010a7c:	08014dc0 	.word	0x08014dc0
 8010a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a84:	429a      	cmp	r2, r3
 8010a86:	bfa8      	it	ge
 8010a88:	461a      	movge	r2, r3
 8010a8a:	2a00      	cmp	r2, #0
 8010a8c:	4691      	mov	r9, r2
 8010a8e:	dc37      	bgt.n	8010b00 <_printf_float+0x374>
 8010a90:	f04f 0b00 	mov.w	fp, #0
 8010a94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a98:	f104 021a 	add.w	r2, r4, #26
 8010a9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a9e:	9305      	str	r3, [sp, #20]
 8010aa0:	eba3 0309 	sub.w	r3, r3, r9
 8010aa4:	455b      	cmp	r3, fp
 8010aa6:	dc33      	bgt.n	8010b10 <_printf_float+0x384>
 8010aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010aac:	429a      	cmp	r2, r3
 8010aae:	db3b      	blt.n	8010b28 <_printf_float+0x39c>
 8010ab0:	6823      	ldr	r3, [r4, #0]
 8010ab2:	07da      	lsls	r2, r3, #31
 8010ab4:	d438      	bmi.n	8010b28 <_printf_float+0x39c>
 8010ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ab8:	9a05      	ldr	r2, [sp, #20]
 8010aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010abc:	1a9a      	subs	r2, r3, r2
 8010abe:	eba3 0901 	sub.w	r9, r3, r1
 8010ac2:	4591      	cmp	r9, r2
 8010ac4:	bfa8      	it	ge
 8010ac6:	4691      	movge	r9, r2
 8010ac8:	f1b9 0f00 	cmp.w	r9, #0
 8010acc:	dc35      	bgt.n	8010b3a <_printf_float+0x3ae>
 8010ace:	f04f 0800 	mov.w	r8, #0
 8010ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ad6:	f104 0a1a 	add.w	sl, r4, #26
 8010ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ade:	1a9b      	subs	r3, r3, r2
 8010ae0:	eba3 0309 	sub.w	r3, r3, r9
 8010ae4:	4543      	cmp	r3, r8
 8010ae6:	f77f af79 	ble.w	80109dc <_printf_float+0x250>
 8010aea:	2301      	movs	r3, #1
 8010aec:	4652      	mov	r2, sl
 8010aee:	4631      	mov	r1, r6
 8010af0:	4628      	mov	r0, r5
 8010af2:	47b8      	blx	r7
 8010af4:	3001      	adds	r0, #1
 8010af6:	f43f aeaa 	beq.w	801084e <_printf_float+0xc2>
 8010afa:	f108 0801 	add.w	r8, r8, #1
 8010afe:	e7ec      	b.n	8010ada <_printf_float+0x34e>
 8010b00:	4613      	mov	r3, r2
 8010b02:	4631      	mov	r1, r6
 8010b04:	4642      	mov	r2, r8
 8010b06:	4628      	mov	r0, r5
 8010b08:	47b8      	blx	r7
 8010b0a:	3001      	adds	r0, #1
 8010b0c:	d1c0      	bne.n	8010a90 <_printf_float+0x304>
 8010b0e:	e69e      	b.n	801084e <_printf_float+0xc2>
 8010b10:	2301      	movs	r3, #1
 8010b12:	4631      	mov	r1, r6
 8010b14:	4628      	mov	r0, r5
 8010b16:	9205      	str	r2, [sp, #20]
 8010b18:	47b8      	blx	r7
 8010b1a:	3001      	adds	r0, #1
 8010b1c:	f43f ae97 	beq.w	801084e <_printf_float+0xc2>
 8010b20:	9a05      	ldr	r2, [sp, #20]
 8010b22:	f10b 0b01 	add.w	fp, fp, #1
 8010b26:	e7b9      	b.n	8010a9c <_printf_float+0x310>
 8010b28:	ee18 3a10 	vmov	r3, s16
 8010b2c:	4652      	mov	r2, sl
 8010b2e:	4631      	mov	r1, r6
 8010b30:	4628      	mov	r0, r5
 8010b32:	47b8      	blx	r7
 8010b34:	3001      	adds	r0, #1
 8010b36:	d1be      	bne.n	8010ab6 <_printf_float+0x32a>
 8010b38:	e689      	b.n	801084e <_printf_float+0xc2>
 8010b3a:	9a05      	ldr	r2, [sp, #20]
 8010b3c:	464b      	mov	r3, r9
 8010b3e:	4442      	add	r2, r8
 8010b40:	4631      	mov	r1, r6
 8010b42:	4628      	mov	r0, r5
 8010b44:	47b8      	blx	r7
 8010b46:	3001      	adds	r0, #1
 8010b48:	d1c1      	bne.n	8010ace <_printf_float+0x342>
 8010b4a:	e680      	b.n	801084e <_printf_float+0xc2>
 8010b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b4e:	2a01      	cmp	r2, #1
 8010b50:	dc01      	bgt.n	8010b56 <_printf_float+0x3ca>
 8010b52:	07db      	lsls	r3, r3, #31
 8010b54:	d538      	bpl.n	8010bc8 <_printf_float+0x43c>
 8010b56:	2301      	movs	r3, #1
 8010b58:	4642      	mov	r2, r8
 8010b5a:	4631      	mov	r1, r6
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	47b8      	blx	r7
 8010b60:	3001      	adds	r0, #1
 8010b62:	f43f ae74 	beq.w	801084e <_printf_float+0xc2>
 8010b66:	ee18 3a10 	vmov	r3, s16
 8010b6a:	4652      	mov	r2, sl
 8010b6c:	4631      	mov	r1, r6
 8010b6e:	4628      	mov	r0, r5
 8010b70:	47b8      	blx	r7
 8010b72:	3001      	adds	r0, #1
 8010b74:	f43f ae6b 	beq.w	801084e <_printf_float+0xc2>
 8010b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	2300      	movs	r3, #0
 8010b80:	f7ef ffba 	bl	8000af8 <__aeabi_dcmpeq>
 8010b84:	b9d8      	cbnz	r0, 8010bbe <_printf_float+0x432>
 8010b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b88:	f108 0201 	add.w	r2, r8, #1
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	4631      	mov	r1, r6
 8010b90:	4628      	mov	r0, r5
 8010b92:	47b8      	blx	r7
 8010b94:	3001      	adds	r0, #1
 8010b96:	d10e      	bne.n	8010bb6 <_printf_float+0x42a>
 8010b98:	e659      	b.n	801084e <_printf_float+0xc2>
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	4652      	mov	r2, sl
 8010b9e:	4631      	mov	r1, r6
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	47b8      	blx	r7
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	f43f ae52 	beq.w	801084e <_printf_float+0xc2>
 8010baa:	f108 0801 	add.w	r8, r8, #1
 8010bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	4543      	cmp	r3, r8
 8010bb4:	dcf1      	bgt.n	8010b9a <_printf_float+0x40e>
 8010bb6:	464b      	mov	r3, r9
 8010bb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010bbc:	e6dc      	b.n	8010978 <_printf_float+0x1ec>
 8010bbe:	f04f 0800 	mov.w	r8, #0
 8010bc2:	f104 0a1a 	add.w	sl, r4, #26
 8010bc6:	e7f2      	b.n	8010bae <_printf_float+0x422>
 8010bc8:	2301      	movs	r3, #1
 8010bca:	4642      	mov	r2, r8
 8010bcc:	e7df      	b.n	8010b8e <_printf_float+0x402>
 8010bce:	2301      	movs	r3, #1
 8010bd0:	464a      	mov	r2, r9
 8010bd2:	4631      	mov	r1, r6
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	47b8      	blx	r7
 8010bd8:	3001      	adds	r0, #1
 8010bda:	f43f ae38 	beq.w	801084e <_printf_float+0xc2>
 8010bde:	f108 0801 	add.w	r8, r8, #1
 8010be2:	68e3      	ldr	r3, [r4, #12]
 8010be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010be6:	1a5b      	subs	r3, r3, r1
 8010be8:	4543      	cmp	r3, r8
 8010bea:	dcf0      	bgt.n	8010bce <_printf_float+0x442>
 8010bec:	e6fa      	b.n	80109e4 <_printf_float+0x258>
 8010bee:	f04f 0800 	mov.w	r8, #0
 8010bf2:	f104 0919 	add.w	r9, r4, #25
 8010bf6:	e7f4      	b.n	8010be2 <_printf_float+0x456>

08010bf8 <_printf_common>:
 8010bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bfc:	4616      	mov	r6, r2
 8010bfe:	4699      	mov	r9, r3
 8010c00:	688a      	ldr	r2, [r1, #8]
 8010c02:	690b      	ldr	r3, [r1, #16]
 8010c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	bfb8      	it	lt
 8010c0c:	4613      	movlt	r3, r2
 8010c0e:	6033      	str	r3, [r6, #0]
 8010c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c14:	4607      	mov	r7, r0
 8010c16:	460c      	mov	r4, r1
 8010c18:	b10a      	cbz	r2, 8010c1e <_printf_common+0x26>
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	6033      	str	r3, [r6, #0]
 8010c1e:	6823      	ldr	r3, [r4, #0]
 8010c20:	0699      	lsls	r1, r3, #26
 8010c22:	bf42      	ittt	mi
 8010c24:	6833      	ldrmi	r3, [r6, #0]
 8010c26:	3302      	addmi	r3, #2
 8010c28:	6033      	strmi	r3, [r6, #0]
 8010c2a:	6825      	ldr	r5, [r4, #0]
 8010c2c:	f015 0506 	ands.w	r5, r5, #6
 8010c30:	d106      	bne.n	8010c40 <_printf_common+0x48>
 8010c32:	f104 0a19 	add.w	sl, r4, #25
 8010c36:	68e3      	ldr	r3, [r4, #12]
 8010c38:	6832      	ldr	r2, [r6, #0]
 8010c3a:	1a9b      	subs	r3, r3, r2
 8010c3c:	42ab      	cmp	r3, r5
 8010c3e:	dc26      	bgt.n	8010c8e <_printf_common+0x96>
 8010c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c44:	1e13      	subs	r3, r2, #0
 8010c46:	6822      	ldr	r2, [r4, #0]
 8010c48:	bf18      	it	ne
 8010c4a:	2301      	movne	r3, #1
 8010c4c:	0692      	lsls	r2, r2, #26
 8010c4e:	d42b      	bmi.n	8010ca8 <_printf_common+0xb0>
 8010c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c54:	4649      	mov	r1, r9
 8010c56:	4638      	mov	r0, r7
 8010c58:	47c0      	blx	r8
 8010c5a:	3001      	adds	r0, #1
 8010c5c:	d01e      	beq.n	8010c9c <_printf_common+0xa4>
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	68e5      	ldr	r5, [r4, #12]
 8010c62:	6832      	ldr	r2, [r6, #0]
 8010c64:	f003 0306 	and.w	r3, r3, #6
 8010c68:	2b04      	cmp	r3, #4
 8010c6a:	bf08      	it	eq
 8010c6c:	1aad      	subeq	r5, r5, r2
 8010c6e:	68a3      	ldr	r3, [r4, #8]
 8010c70:	6922      	ldr	r2, [r4, #16]
 8010c72:	bf0c      	ite	eq
 8010c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c78:	2500      	movne	r5, #0
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	bfc4      	itt	gt
 8010c7e:	1a9b      	subgt	r3, r3, r2
 8010c80:	18ed      	addgt	r5, r5, r3
 8010c82:	2600      	movs	r6, #0
 8010c84:	341a      	adds	r4, #26
 8010c86:	42b5      	cmp	r5, r6
 8010c88:	d11a      	bne.n	8010cc0 <_printf_common+0xc8>
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	e008      	b.n	8010ca0 <_printf_common+0xa8>
 8010c8e:	2301      	movs	r3, #1
 8010c90:	4652      	mov	r2, sl
 8010c92:	4649      	mov	r1, r9
 8010c94:	4638      	mov	r0, r7
 8010c96:	47c0      	blx	r8
 8010c98:	3001      	adds	r0, #1
 8010c9a:	d103      	bne.n	8010ca4 <_printf_common+0xac>
 8010c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ca4:	3501      	adds	r5, #1
 8010ca6:	e7c6      	b.n	8010c36 <_printf_common+0x3e>
 8010ca8:	18e1      	adds	r1, r4, r3
 8010caa:	1c5a      	adds	r2, r3, #1
 8010cac:	2030      	movs	r0, #48	; 0x30
 8010cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cb2:	4422      	add	r2, r4
 8010cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cbc:	3302      	adds	r3, #2
 8010cbe:	e7c7      	b.n	8010c50 <_printf_common+0x58>
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	4622      	mov	r2, r4
 8010cc4:	4649      	mov	r1, r9
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	47c0      	blx	r8
 8010cca:	3001      	adds	r0, #1
 8010ccc:	d0e6      	beq.n	8010c9c <_printf_common+0xa4>
 8010cce:	3601      	adds	r6, #1
 8010cd0:	e7d9      	b.n	8010c86 <_printf_common+0x8e>
	...

08010cd4 <_printf_i>:
 8010cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd8:	7e0f      	ldrb	r7, [r1, #24]
 8010cda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010cdc:	2f78      	cmp	r7, #120	; 0x78
 8010cde:	4691      	mov	r9, r2
 8010ce0:	4680      	mov	r8, r0
 8010ce2:	460c      	mov	r4, r1
 8010ce4:	469a      	mov	sl, r3
 8010ce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010cea:	d807      	bhi.n	8010cfc <_printf_i+0x28>
 8010cec:	2f62      	cmp	r7, #98	; 0x62
 8010cee:	d80a      	bhi.n	8010d06 <_printf_i+0x32>
 8010cf0:	2f00      	cmp	r7, #0
 8010cf2:	f000 80d8 	beq.w	8010ea6 <_printf_i+0x1d2>
 8010cf6:	2f58      	cmp	r7, #88	; 0x58
 8010cf8:	f000 80a3 	beq.w	8010e42 <_printf_i+0x16e>
 8010cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d04:	e03a      	b.n	8010d7c <_printf_i+0xa8>
 8010d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d0a:	2b15      	cmp	r3, #21
 8010d0c:	d8f6      	bhi.n	8010cfc <_printf_i+0x28>
 8010d0e:	a101      	add	r1, pc, #4	; (adr r1, 8010d14 <_printf_i+0x40>)
 8010d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d14:	08010d6d 	.word	0x08010d6d
 8010d18:	08010d81 	.word	0x08010d81
 8010d1c:	08010cfd 	.word	0x08010cfd
 8010d20:	08010cfd 	.word	0x08010cfd
 8010d24:	08010cfd 	.word	0x08010cfd
 8010d28:	08010cfd 	.word	0x08010cfd
 8010d2c:	08010d81 	.word	0x08010d81
 8010d30:	08010cfd 	.word	0x08010cfd
 8010d34:	08010cfd 	.word	0x08010cfd
 8010d38:	08010cfd 	.word	0x08010cfd
 8010d3c:	08010cfd 	.word	0x08010cfd
 8010d40:	08010e8d 	.word	0x08010e8d
 8010d44:	08010db1 	.word	0x08010db1
 8010d48:	08010e6f 	.word	0x08010e6f
 8010d4c:	08010cfd 	.word	0x08010cfd
 8010d50:	08010cfd 	.word	0x08010cfd
 8010d54:	08010eaf 	.word	0x08010eaf
 8010d58:	08010cfd 	.word	0x08010cfd
 8010d5c:	08010db1 	.word	0x08010db1
 8010d60:	08010cfd 	.word	0x08010cfd
 8010d64:	08010cfd 	.word	0x08010cfd
 8010d68:	08010e77 	.word	0x08010e77
 8010d6c:	682b      	ldr	r3, [r5, #0]
 8010d6e:	1d1a      	adds	r2, r3, #4
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	602a      	str	r2, [r5, #0]
 8010d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e0a3      	b.n	8010ec8 <_printf_i+0x1f4>
 8010d80:	6820      	ldr	r0, [r4, #0]
 8010d82:	6829      	ldr	r1, [r5, #0]
 8010d84:	0606      	lsls	r6, r0, #24
 8010d86:	f101 0304 	add.w	r3, r1, #4
 8010d8a:	d50a      	bpl.n	8010da2 <_printf_i+0xce>
 8010d8c:	680e      	ldr	r6, [r1, #0]
 8010d8e:	602b      	str	r3, [r5, #0]
 8010d90:	2e00      	cmp	r6, #0
 8010d92:	da03      	bge.n	8010d9c <_printf_i+0xc8>
 8010d94:	232d      	movs	r3, #45	; 0x2d
 8010d96:	4276      	negs	r6, r6
 8010d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d9c:	485e      	ldr	r0, [pc, #376]	; (8010f18 <_printf_i+0x244>)
 8010d9e:	230a      	movs	r3, #10
 8010da0:	e019      	b.n	8010dd6 <_printf_i+0x102>
 8010da2:	680e      	ldr	r6, [r1, #0]
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010daa:	bf18      	it	ne
 8010dac:	b236      	sxthne	r6, r6
 8010dae:	e7ef      	b.n	8010d90 <_printf_i+0xbc>
 8010db0:	682b      	ldr	r3, [r5, #0]
 8010db2:	6820      	ldr	r0, [r4, #0]
 8010db4:	1d19      	adds	r1, r3, #4
 8010db6:	6029      	str	r1, [r5, #0]
 8010db8:	0601      	lsls	r1, r0, #24
 8010dba:	d501      	bpl.n	8010dc0 <_printf_i+0xec>
 8010dbc:	681e      	ldr	r6, [r3, #0]
 8010dbe:	e002      	b.n	8010dc6 <_printf_i+0xf2>
 8010dc0:	0646      	lsls	r6, r0, #25
 8010dc2:	d5fb      	bpl.n	8010dbc <_printf_i+0xe8>
 8010dc4:	881e      	ldrh	r6, [r3, #0]
 8010dc6:	4854      	ldr	r0, [pc, #336]	; (8010f18 <_printf_i+0x244>)
 8010dc8:	2f6f      	cmp	r7, #111	; 0x6f
 8010dca:	bf0c      	ite	eq
 8010dcc:	2308      	moveq	r3, #8
 8010dce:	230a      	movne	r3, #10
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010dd6:	6865      	ldr	r5, [r4, #4]
 8010dd8:	60a5      	str	r5, [r4, #8]
 8010dda:	2d00      	cmp	r5, #0
 8010ddc:	bfa2      	ittt	ge
 8010dde:	6821      	ldrge	r1, [r4, #0]
 8010de0:	f021 0104 	bicge.w	r1, r1, #4
 8010de4:	6021      	strge	r1, [r4, #0]
 8010de6:	b90e      	cbnz	r6, 8010dec <_printf_i+0x118>
 8010de8:	2d00      	cmp	r5, #0
 8010dea:	d04d      	beq.n	8010e88 <_printf_i+0x1b4>
 8010dec:	4615      	mov	r5, r2
 8010dee:	fbb6 f1f3 	udiv	r1, r6, r3
 8010df2:	fb03 6711 	mls	r7, r3, r1, r6
 8010df6:	5dc7      	ldrb	r7, [r0, r7]
 8010df8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010dfc:	4637      	mov	r7, r6
 8010dfe:	42bb      	cmp	r3, r7
 8010e00:	460e      	mov	r6, r1
 8010e02:	d9f4      	bls.n	8010dee <_printf_i+0x11a>
 8010e04:	2b08      	cmp	r3, #8
 8010e06:	d10b      	bne.n	8010e20 <_printf_i+0x14c>
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	07de      	lsls	r6, r3, #31
 8010e0c:	d508      	bpl.n	8010e20 <_printf_i+0x14c>
 8010e0e:	6923      	ldr	r3, [r4, #16]
 8010e10:	6861      	ldr	r1, [r4, #4]
 8010e12:	4299      	cmp	r1, r3
 8010e14:	bfde      	ittt	le
 8010e16:	2330      	movle	r3, #48	; 0x30
 8010e18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e20:	1b52      	subs	r2, r2, r5
 8010e22:	6122      	str	r2, [r4, #16]
 8010e24:	f8cd a000 	str.w	sl, [sp]
 8010e28:	464b      	mov	r3, r9
 8010e2a:	aa03      	add	r2, sp, #12
 8010e2c:	4621      	mov	r1, r4
 8010e2e:	4640      	mov	r0, r8
 8010e30:	f7ff fee2 	bl	8010bf8 <_printf_common>
 8010e34:	3001      	adds	r0, #1
 8010e36:	d14c      	bne.n	8010ed2 <_printf_i+0x1fe>
 8010e38:	f04f 30ff 	mov.w	r0, #4294967295
 8010e3c:	b004      	add	sp, #16
 8010e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e42:	4835      	ldr	r0, [pc, #212]	; (8010f18 <_printf_i+0x244>)
 8010e44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010e48:	6829      	ldr	r1, [r5, #0]
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010e50:	6029      	str	r1, [r5, #0]
 8010e52:	061d      	lsls	r5, r3, #24
 8010e54:	d514      	bpl.n	8010e80 <_printf_i+0x1ac>
 8010e56:	07df      	lsls	r7, r3, #31
 8010e58:	bf44      	itt	mi
 8010e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8010e5e:	6023      	strmi	r3, [r4, #0]
 8010e60:	b91e      	cbnz	r6, 8010e6a <_printf_i+0x196>
 8010e62:	6823      	ldr	r3, [r4, #0]
 8010e64:	f023 0320 	bic.w	r3, r3, #32
 8010e68:	6023      	str	r3, [r4, #0]
 8010e6a:	2310      	movs	r3, #16
 8010e6c:	e7b0      	b.n	8010dd0 <_printf_i+0xfc>
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	f043 0320 	orr.w	r3, r3, #32
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	2378      	movs	r3, #120	; 0x78
 8010e78:	4828      	ldr	r0, [pc, #160]	; (8010f1c <_printf_i+0x248>)
 8010e7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e7e:	e7e3      	b.n	8010e48 <_printf_i+0x174>
 8010e80:	0659      	lsls	r1, r3, #25
 8010e82:	bf48      	it	mi
 8010e84:	b2b6      	uxthmi	r6, r6
 8010e86:	e7e6      	b.n	8010e56 <_printf_i+0x182>
 8010e88:	4615      	mov	r5, r2
 8010e8a:	e7bb      	b.n	8010e04 <_printf_i+0x130>
 8010e8c:	682b      	ldr	r3, [r5, #0]
 8010e8e:	6826      	ldr	r6, [r4, #0]
 8010e90:	6961      	ldr	r1, [r4, #20]
 8010e92:	1d18      	adds	r0, r3, #4
 8010e94:	6028      	str	r0, [r5, #0]
 8010e96:	0635      	lsls	r5, r6, #24
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	d501      	bpl.n	8010ea0 <_printf_i+0x1cc>
 8010e9c:	6019      	str	r1, [r3, #0]
 8010e9e:	e002      	b.n	8010ea6 <_printf_i+0x1d2>
 8010ea0:	0670      	lsls	r0, r6, #25
 8010ea2:	d5fb      	bpl.n	8010e9c <_printf_i+0x1c8>
 8010ea4:	8019      	strh	r1, [r3, #0]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	6123      	str	r3, [r4, #16]
 8010eaa:	4615      	mov	r5, r2
 8010eac:	e7ba      	b.n	8010e24 <_printf_i+0x150>
 8010eae:	682b      	ldr	r3, [r5, #0]
 8010eb0:	1d1a      	adds	r2, r3, #4
 8010eb2:	602a      	str	r2, [r5, #0]
 8010eb4:	681d      	ldr	r5, [r3, #0]
 8010eb6:	6862      	ldr	r2, [r4, #4]
 8010eb8:	2100      	movs	r1, #0
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7ef f9a8 	bl	8000210 <memchr>
 8010ec0:	b108      	cbz	r0, 8010ec6 <_printf_i+0x1f2>
 8010ec2:	1b40      	subs	r0, r0, r5
 8010ec4:	6060      	str	r0, [r4, #4]
 8010ec6:	6863      	ldr	r3, [r4, #4]
 8010ec8:	6123      	str	r3, [r4, #16]
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ed0:	e7a8      	b.n	8010e24 <_printf_i+0x150>
 8010ed2:	6923      	ldr	r3, [r4, #16]
 8010ed4:	462a      	mov	r2, r5
 8010ed6:	4649      	mov	r1, r9
 8010ed8:	4640      	mov	r0, r8
 8010eda:	47d0      	blx	sl
 8010edc:	3001      	adds	r0, #1
 8010ede:	d0ab      	beq.n	8010e38 <_printf_i+0x164>
 8010ee0:	6823      	ldr	r3, [r4, #0]
 8010ee2:	079b      	lsls	r3, r3, #30
 8010ee4:	d413      	bmi.n	8010f0e <_printf_i+0x23a>
 8010ee6:	68e0      	ldr	r0, [r4, #12]
 8010ee8:	9b03      	ldr	r3, [sp, #12]
 8010eea:	4298      	cmp	r0, r3
 8010eec:	bfb8      	it	lt
 8010eee:	4618      	movlt	r0, r3
 8010ef0:	e7a4      	b.n	8010e3c <_printf_i+0x168>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	4632      	mov	r2, r6
 8010ef6:	4649      	mov	r1, r9
 8010ef8:	4640      	mov	r0, r8
 8010efa:	47d0      	blx	sl
 8010efc:	3001      	adds	r0, #1
 8010efe:	d09b      	beq.n	8010e38 <_printf_i+0x164>
 8010f00:	3501      	adds	r5, #1
 8010f02:	68e3      	ldr	r3, [r4, #12]
 8010f04:	9903      	ldr	r1, [sp, #12]
 8010f06:	1a5b      	subs	r3, r3, r1
 8010f08:	42ab      	cmp	r3, r5
 8010f0a:	dcf2      	bgt.n	8010ef2 <_printf_i+0x21e>
 8010f0c:	e7eb      	b.n	8010ee6 <_printf_i+0x212>
 8010f0e:	2500      	movs	r5, #0
 8010f10:	f104 0619 	add.w	r6, r4, #25
 8010f14:	e7f5      	b.n	8010f02 <_printf_i+0x22e>
 8010f16:	bf00      	nop
 8010f18:	08014dc2 	.word	0x08014dc2
 8010f1c:	08014dd3 	.word	0x08014dd3

08010f20 <_sbrk_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	4d06      	ldr	r5, [pc, #24]	; (8010f3c <_sbrk_r+0x1c>)
 8010f24:	2300      	movs	r3, #0
 8010f26:	4604      	mov	r4, r0
 8010f28:	4608      	mov	r0, r1
 8010f2a:	602b      	str	r3, [r5, #0]
 8010f2c:	f7f4 ffc8 	bl	8005ec0 <_sbrk>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d102      	bne.n	8010f3a <_sbrk_r+0x1a>
 8010f34:	682b      	ldr	r3, [r5, #0]
 8010f36:	b103      	cbz	r3, 8010f3a <_sbrk_r+0x1a>
 8010f38:	6023      	str	r3, [r4, #0]
 8010f3a:	bd38      	pop	{r3, r4, r5, pc}
 8010f3c:	200063c0 	.word	0x200063c0

08010f40 <siprintf>:
 8010f40:	b40e      	push	{r1, r2, r3}
 8010f42:	b500      	push	{lr}
 8010f44:	b09c      	sub	sp, #112	; 0x70
 8010f46:	ab1d      	add	r3, sp, #116	; 0x74
 8010f48:	9002      	str	r0, [sp, #8]
 8010f4a:	9006      	str	r0, [sp, #24]
 8010f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f50:	4809      	ldr	r0, [pc, #36]	; (8010f78 <siprintf+0x38>)
 8010f52:	9107      	str	r1, [sp, #28]
 8010f54:	9104      	str	r1, [sp, #16]
 8010f56:	4909      	ldr	r1, [pc, #36]	; (8010f7c <siprintf+0x3c>)
 8010f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f5c:	9105      	str	r1, [sp, #20]
 8010f5e:	6800      	ldr	r0, [r0, #0]
 8010f60:	9301      	str	r3, [sp, #4]
 8010f62:	a902      	add	r1, sp, #8
 8010f64:	f001 fa8c 	bl	8012480 <_svfiprintf_r>
 8010f68:	9b02      	ldr	r3, [sp, #8]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	701a      	strb	r2, [r3, #0]
 8010f6e:	b01c      	add	sp, #112	; 0x70
 8010f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f74:	b003      	add	sp, #12
 8010f76:	4770      	bx	lr
 8010f78:	2000006c 	.word	0x2000006c
 8010f7c:	ffff0208 	.word	0xffff0208

08010f80 <quorem>:
 8010f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	6903      	ldr	r3, [r0, #16]
 8010f86:	690c      	ldr	r4, [r1, #16]
 8010f88:	42a3      	cmp	r3, r4
 8010f8a:	4607      	mov	r7, r0
 8010f8c:	f2c0 8081 	blt.w	8011092 <quorem+0x112>
 8010f90:	3c01      	subs	r4, #1
 8010f92:	f101 0814 	add.w	r8, r1, #20
 8010f96:	f100 0514 	add.w	r5, r0, #20
 8010f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f9e:	9301      	str	r3, [sp, #4]
 8010fa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	429a      	cmp	r2, r3
 8010fac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010fb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010fb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8010fb8:	d331      	bcc.n	801101e <quorem+0x9e>
 8010fba:	f04f 0e00 	mov.w	lr, #0
 8010fbe:	4640      	mov	r0, r8
 8010fc0:	46ac      	mov	ip, r5
 8010fc2:	46f2      	mov	sl, lr
 8010fc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8010fc8:	b293      	uxth	r3, r2
 8010fca:	fb06 e303 	mla	r3, r6, r3, lr
 8010fce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	ebaa 0303 	sub.w	r3, sl, r3
 8010fd8:	f8dc a000 	ldr.w	sl, [ip]
 8010fdc:	0c12      	lsrs	r2, r2, #16
 8010fde:	fa13 f38a 	uxtah	r3, r3, sl
 8010fe2:	fb06 e202 	mla	r2, r6, r2, lr
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	9b00      	ldr	r3, [sp, #0]
 8010fea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010fee:	b292      	uxth	r2, r2
 8010ff0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ff8:	f8bd 3000 	ldrh.w	r3, [sp]
 8010ffc:	4581      	cmp	r9, r0
 8010ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011002:	f84c 3b04 	str.w	r3, [ip], #4
 8011006:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801100a:	d2db      	bcs.n	8010fc4 <quorem+0x44>
 801100c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011010:	b92b      	cbnz	r3, 801101e <quorem+0x9e>
 8011012:	9b01      	ldr	r3, [sp, #4]
 8011014:	3b04      	subs	r3, #4
 8011016:	429d      	cmp	r5, r3
 8011018:	461a      	mov	r2, r3
 801101a:	d32e      	bcc.n	801107a <quorem+0xfa>
 801101c:	613c      	str	r4, [r7, #16]
 801101e:	4638      	mov	r0, r7
 8011020:	f001 f8ba 	bl	8012198 <__mcmp>
 8011024:	2800      	cmp	r0, #0
 8011026:	db24      	blt.n	8011072 <quorem+0xf2>
 8011028:	3601      	adds	r6, #1
 801102a:	4628      	mov	r0, r5
 801102c:	f04f 0c00 	mov.w	ip, #0
 8011030:	f858 2b04 	ldr.w	r2, [r8], #4
 8011034:	f8d0 e000 	ldr.w	lr, [r0]
 8011038:	b293      	uxth	r3, r2
 801103a:	ebac 0303 	sub.w	r3, ip, r3
 801103e:	0c12      	lsrs	r2, r2, #16
 8011040:	fa13 f38e 	uxtah	r3, r3, lr
 8011044:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801104c:	b29b      	uxth	r3, r3
 801104e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011052:	45c1      	cmp	r9, r8
 8011054:	f840 3b04 	str.w	r3, [r0], #4
 8011058:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801105c:	d2e8      	bcs.n	8011030 <quorem+0xb0>
 801105e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011066:	b922      	cbnz	r2, 8011072 <quorem+0xf2>
 8011068:	3b04      	subs	r3, #4
 801106a:	429d      	cmp	r5, r3
 801106c:	461a      	mov	r2, r3
 801106e:	d30a      	bcc.n	8011086 <quorem+0x106>
 8011070:	613c      	str	r4, [r7, #16]
 8011072:	4630      	mov	r0, r6
 8011074:	b003      	add	sp, #12
 8011076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801107a:	6812      	ldr	r2, [r2, #0]
 801107c:	3b04      	subs	r3, #4
 801107e:	2a00      	cmp	r2, #0
 8011080:	d1cc      	bne.n	801101c <quorem+0x9c>
 8011082:	3c01      	subs	r4, #1
 8011084:	e7c7      	b.n	8011016 <quorem+0x96>
 8011086:	6812      	ldr	r2, [r2, #0]
 8011088:	3b04      	subs	r3, #4
 801108a:	2a00      	cmp	r2, #0
 801108c:	d1f0      	bne.n	8011070 <quorem+0xf0>
 801108e:	3c01      	subs	r4, #1
 8011090:	e7eb      	b.n	801106a <quorem+0xea>
 8011092:	2000      	movs	r0, #0
 8011094:	e7ee      	b.n	8011074 <quorem+0xf4>
	...

08011098 <_dtoa_r>:
 8011098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109c:	ed2d 8b04 	vpush	{d8-d9}
 80110a0:	ec57 6b10 	vmov	r6, r7, d0
 80110a4:	b093      	sub	sp, #76	; 0x4c
 80110a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80110a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80110ac:	9106      	str	r1, [sp, #24]
 80110ae:	ee10 aa10 	vmov	sl, s0
 80110b2:	4604      	mov	r4, r0
 80110b4:	9209      	str	r2, [sp, #36]	; 0x24
 80110b6:	930c      	str	r3, [sp, #48]	; 0x30
 80110b8:	46bb      	mov	fp, r7
 80110ba:	b975      	cbnz	r5, 80110da <_dtoa_r+0x42>
 80110bc:	2010      	movs	r0, #16
 80110be:	f7ff f9c7 	bl	8010450 <malloc>
 80110c2:	4602      	mov	r2, r0
 80110c4:	6260      	str	r0, [r4, #36]	; 0x24
 80110c6:	b920      	cbnz	r0, 80110d2 <_dtoa_r+0x3a>
 80110c8:	4ba7      	ldr	r3, [pc, #668]	; (8011368 <_dtoa_r+0x2d0>)
 80110ca:	21ea      	movs	r1, #234	; 0xea
 80110cc:	48a7      	ldr	r0, [pc, #668]	; (801136c <_dtoa_r+0x2d4>)
 80110ce:	f001 fad7 	bl	8012680 <__assert_func>
 80110d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80110d6:	6005      	str	r5, [r0, #0]
 80110d8:	60c5      	str	r5, [r0, #12]
 80110da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110dc:	6819      	ldr	r1, [r3, #0]
 80110de:	b151      	cbz	r1, 80110f6 <_dtoa_r+0x5e>
 80110e0:	685a      	ldr	r2, [r3, #4]
 80110e2:	604a      	str	r2, [r1, #4]
 80110e4:	2301      	movs	r3, #1
 80110e6:	4093      	lsls	r3, r2
 80110e8:	608b      	str	r3, [r1, #8]
 80110ea:	4620      	mov	r0, r4
 80110ec:	f000 fe12 	bl	8011d14 <_Bfree>
 80110f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110f2:	2200      	movs	r2, #0
 80110f4:	601a      	str	r2, [r3, #0]
 80110f6:	1e3b      	subs	r3, r7, #0
 80110f8:	bfaa      	itet	ge
 80110fa:	2300      	movge	r3, #0
 80110fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011100:	f8c8 3000 	strge.w	r3, [r8]
 8011104:	4b9a      	ldr	r3, [pc, #616]	; (8011370 <_dtoa_r+0x2d8>)
 8011106:	bfbc      	itt	lt
 8011108:	2201      	movlt	r2, #1
 801110a:	f8c8 2000 	strlt.w	r2, [r8]
 801110e:	ea33 030b 	bics.w	r3, r3, fp
 8011112:	d11b      	bne.n	801114c <_dtoa_r+0xb4>
 8011114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011116:	f242 730f 	movw	r3, #9999	; 0x270f
 801111a:	6013      	str	r3, [r2, #0]
 801111c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011120:	4333      	orrs	r3, r6
 8011122:	f000 8592 	beq.w	8011c4a <_dtoa_r+0xbb2>
 8011126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011128:	b963      	cbnz	r3, 8011144 <_dtoa_r+0xac>
 801112a:	4b92      	ldr	r3, [pc, #584]	; (8011374 <_dtoa_r+0x2dc>)
 801112c:	e022      	b.n	8011174 <_dtoa_r+0xdc>
 801112e:	4b92      	ldr	r3, [pc, #584]	; (8011378 <_dtoa_r+0x2e0>)
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	3308      	adds	r3, #8
 8011134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011136:	6013      	str	r3, [r2, #0]
 8011138:	9801      	ldr	r0, [sp, #4]
 801113a:	b013      	add	sp, #76	; 0x4c
 801113c:	ecbd 8b04 	vpop	{d8-d9}
 8011140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011144:	4b8b      	ldr	r3, [pc, #556]	; (8011374 <_dtoa_r+0x2dc>)
 8011146:	9301      	str	r3, [sp, #4]
 8011148:	3303      	adds	r3, #3
 801114a:	e7f3      	b.n	8011134 <_dtoa_r+0x9c>
 801114c:	2200      	movs	r2, #0
 801114e:	2300      	movs	r3, #0
 8011150:	4650      	mov	r0, sl
 8011152:	4659      	mov	r1, fp
 8011154:	f7ef fcd0 	bl	8000af8 <__aeabi_dcmpeq>
 8011158:	ec4b ab19 	vmov	d9, sl, fp
 801115c:	4680      	mov	r8, r0
 801115e:	b158      	cbz	r0, 8011178 <_dtoa_r+0xe0>
 8011160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011162:	2301      	movs	r3, #1
 8011164:	6013      	str	r3, [r2, #0]
 8011166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 856b 	beq.w	8011c44 <_dtoa_r+0xbac>
 801116e:	4883      	ldr	r0, [pc, #524]	; (801137c <_dtoa_r+0x2e4>)
 8011170:	6018      	str	r0, [r3, #0]
 8011172:	1e43      	subs	r3, r0, #1
 8011174:	9301      	str	r3, [sp, #4]
 8011176:	e7df      	b.n	8011138 <_dtoa_r+0xa0>
 8011178:	ec4b ab10 	vmov	d0, sl, fp
 801117c:	aa10      	add	r2, sp, #64	; 0x40
 801117e:	a911      	add	r1, sp, #68	; 0x44
 8011180:	4620      	mov	r0, r4
 8011182:	f001 f8af 	bl	80122e4 <__d2b>
 8011186:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801118a:	ee08 0a10 	vmov	s16, r0
 801118e:	2d00      	cmp	r5, #0
 8011190:	f000 8084 	beq.w	801129c <_dtoa_r+0x204>
 8011194:	ee19 3a90 	vmov	r3, s19
 8011198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801119c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80111a0:	4656      	mov	r6, sl
 80111a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80111a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80111aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80111ae:	4b74      	ldr	r3, [pc, #464]	; (8011380 <_dtoa_r+0x2e8>)
 80111b0:	2200      	movs	r2, #0
 80111b2:	4630      	mov	r0, r6
 80111b4:	4639      	mov	r1, r7
 80111b6:	f7ef f87f 	bl	80002b8 <__aeabi_dsub>
 80111ba:	a365      	add	r3, pc, #404	; (adr r3, 8011350 <_dtoa_r+0x2b8>)
 80111bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c0:	f7ef fa32 	bl	8000628 <__aeabi_dmul>
 80111c4:	a364      	add	r3, pc, #400	; (adr r3, 8011358 <_dtoa_r+0x2c0>)
 80111c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ca:	f7ef f877 	bl	80002bc <__adddf3>
 80111ce:	4606      	mov	r6, r0
 80111d0:	4628      	mov	r0, r5
 80111d2:	460f      	mov	r7, r1
 80111d4:	f7ef f9be 	bl	8000554 <__aeabi_i2d>
 80111d8:	a361      	add	r3, pc, #388	; (adr r3, 8011360 <_dtoa_r+0x2c8>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	f7ef fa23 	bl	8000628 <__aeabi_dmul>
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	4630      	mov	r0, r6
 80111e8:	4639      	mov	r1, r7
 80111ea:	f7ef f867 	bl	80002bc <__adddf3>
 80111ee:	4606      	mov	r6, r0
 80111f0:	460f      	mov	r7, r1
 80111f2:	f7ef fcc9 	bl	8000b88 <__aeabi_d2iz>
 80111f6:	2200      	movs	r2, #0
 80111f8:	9000      	str	r0, [sp, #0]
 80111fa:	2300      	movs	r3, #0
 80111fc:	4630      	mov	r0, r6
 80111fe:	4639      	mov	r1, r7
 8011200:	f7ef fc84 	bl	8000b0c <__aeabi_dcmplt>
 8011204:	b150      	cbz	r0, 801121c <_dtoa_r+0x184>
 8011206:	9800      	ldr	r0, [sp, #0]
 8011208:	f7ef f9a4 	bl	8000554 <__aeabi_i2d>
 801120c:	4632      	mov	r2, r6
 801120e:	463b      	mov	r3, r7
 8011210:	f7ef fc72 	bl	8000af8 <__aeabi_dcmpeq>
 8011214:	b910      	cbnz	r0, 801121c <_dtoa_r+0x184>
 8011216:	9b00      	ldr	r3, [sp, #0]
 8011218:	3b01      	subs	r3, #1
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	9b00      	ldr	r3, [sp, #0]
 801121e:	2b16      	cmp	r3, #22
 8011220:	d85a      	bhi.n	80112d8 <_dtoa_r+0x240>
 8011222:	9a00      	ldr	r2, [sp, #0]
 8011224:	4b57      	ldr	r3, [pc, #348]	; (8011384 <_dtoa_r+0x2ec>)
 8011226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122e:	ec51 0b19 	vmov	r0, r1, d9
 8011232:	f7ef fc6b 	bl	8000b0c <__aeabi_dcmplt>
 8011236:	2800      	cmp	r0, #0
 8011238:	d050      	beq.n	80112dc <_dtoa_r+0x244>
 801123a:	9b00      	ldr	r3, [sp, #0]
 801123c:	3b01      	subs	r3, #1
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	2300      	movs	r3, #0
 8011242:	930b      	str	r3, [sp, #44]	; 0x2c
 8011244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011246:	1b5d      	subs	r5, r3, r5
 8011248:	1e6b      	subs	r3, r5, #1
 801124a:	9305      	str	r3, [sp, #20]
 801124c:	bf45      	ittet	mi
 801124e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011252:	9304      	strmi	r3, [sp, #16]
 8011254:	2300      	movpl	r3, #0
 8011256:	2300      	movmi	r3, #0
 8011258:	bf4c      	ite	mi
 801125a:	9305      	strmi	r3, [sp, #20]
 801125c:	9304      	strpl	r3, [sp, #16]
 801125e:	9b00      	ldr	r3, [sp, #0]
 8011260:	2b00      	cmp	r3, #0
 8011262:	db3d      	blt.n	80112e0 <_dtoa_r+0x248>
 8011264:	9b05      	ldr	r3, [sp, #20]
 8011266:	9a00      	ldr	r2, [sp, #0]
 8011268:	920a      	str	r2, [sp, #40]	; 0x28
 801126a:	4413      	add	r3, r2
 801126c:	9305      	str	r3, [sp, #20]
 801126e:	2300      	movs	r3, #0
 8011270:	9307      	str	r3, [sp, #28]
 8011272:	9b06      	ldr	r3, [sp, #24]
 8011274:	2b09      	cmp	r3, #9
 8011276:	f200 8089 	bhi.w	801138c <_dtoa_r+0x2f4>
 801127a:	2b05      	cmp	r3, #5
 801127c:	bfc4      	itt	gt
 801127e:	3b04      	subgt	r3, #4
 8011280:	9306      	strgt	r3, [sp, #24]
 8011282:	9b06      	ldr	r3, [sp, #24]
 8011284:	f1a3 0302 	sub.w	r3, r3, #2
 8011288:	bfcc      	ite	gt
 801128a:	2500      	movgt	r5, #0
 801128c:	2501      	movle	r5, #1
 801128e:	2b03      	cmp	r3, #3
 8011290:	f200 8087 	bhi.w	80113a2 <_dtoa_r+0x30a>
 8011294:	e8df f003 	tbb	[pc, r3]
 8011298:	59383a2d 	.word	0x59383a2d
 801129c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80112a0:	441d      	add	r5, r3
 80112a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80112a6:	2b20      	cmp	r3, #32
 80112a8:	bfc1      	itttt	gt
 80112aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80112ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80112b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80112b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80112ba:	bfda      	itte	le
 80112bc:	f1c3 0320 	rsble	r3, r3, #32
 80112c0:	fa06 f003 	lslle.w	r0, r6, r3
 80112c4:	4318      	orrgt	r0, r3
 80112c6:	f7ef f935 	bl	8000534 <__aeabi_ui2d>
 80112ca:	2301      	movs	r3, #1
 80112cc:	4606      	mov	r6, r0
 80112ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80112d2:	3d01      	subs	r5, #1
 80112d4:	930e      	str	r3, [sp, #56]	; 0x38
 80112d6:	e76a      	b.n	80111ae <_dtoa_r+0x116>
 80112d8:	2301      	movs	r3, #1
 80112da:	e7b2      	b.n	8011242 <_dtoa_r+0x1aa>
 80112dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80112de:	e7b1      	b.n	8011244 <_dtoa_r+0x1ac>
 80112e0:	9b04      	ldr	r3, [sp, #16]
 80112e2:	9a00      	ldr	r2, [sp, #0]
 80112e4:	1a9b      	subs	r3, r3, r2
 80112e6:	9304      	str	r3, [sp, #16]
 80112e8:	4253      	negs	r3, r2
 80112ea:	9307      	str	r3, [sp, #28]
 80112ec:	2300      	movs	r3, #0
 80112ee:	930a      	str	r3, [sp, #40]	; 0x28
 80112f0:	e7bf      	b.n	8011272 <_dtoa_r+0x1da>
 80112f2:	2300      	movs	r3, #0
 80112f4:	9308      	str	r3, [sp, #32]
 80112f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	dc55      	bgt.n	80113a8 <_dtoa_r+0x310>
 80112fc:	2301      	movs	r3, #1
 80112fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011302:	461a      	mov	r2, r3
 8011304:	9209      	str	r2, [sp, #36]	; 0x24
 8011306:	e00c      	b.n	8011322 <_dtoa_r+0x28a>
 8011308:	2301      	movs	r3, #1
 801130a:	e7f3      	b.n	80112f4 <_dtoa_r+0x25c>
 801130c:	2300      	movs	r3, #0
 801130e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011310:	9308      	str	r3, [sp, #32]
 8011312:	9b00      	ldr	r3, [sp, #0]
 8011314:	4413      	add	r3, r2
 8011316:	9302      	str	r3, [sp, #8]
 8011318:	3301      	adds	r3, #1
 801131a:	2b01      	cmp	r3, #1
 801131c:	9303      	str	r3, [sp, #12]
 801131e:	bfb8      	it	lt
 8011320:	2301      	movlt	r3, #1
 8011322:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011324:	2200      	movs	r2, #0
 8011326:	6042      	str	r2, [r0, #4]
 8011328:	2204      	movs	r2, #4
 801132a:	f102 0614 	add.w	r6, r2, #20
 801132e:	429e      	cmp	r6, r3
 8011330:	6841      	ldr	r1, [r0, #4]
 8011332:	d93d      	bls.n	80113b0 <_dtoa_r+0x318>
 8011334:	4620      	mov	r0, r4
 8011336:	f000 fcad 	bl	8011c94 <_Balloc>
 801133a:	9001      	str	r0, [sp, #4]
 801133c:	2800      	cmp	r0, #0
 801133e:	d13b      	bne.n	80113b8 <_dtoa_r+0x320>
 8011340:	4b11      	ldr	r3, [pc, #68]	; (8011388 <_dtoa_r+0x2f0>)
 8011342:	4602      	mov	r2, r0
 8011344:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011348:	e6c0      	b.n	80110cc <_dtoa_r+0x34>
 801134a:	2301      	movs	r3, #1
 801134c:	e7df      	b.n	801130e <_dtoa_r+0x276>
 801134e:	bf00      	nop
 8011350:	636f4361 	.word	0x636f4361
 8011354:	3fd287a7 	.word	0x3fd287a7
 8011358:	8b60c8b3 	.word	0x8b60c8b3
 801135c:	3fc68a28 	.word	0x3fc68a28
 8011360:	509f79fb 	.word	0x509f79fb
 8011364:	3fd34413 	.word	0x3fd34413
 8011368:	08014df1 	.word	0x08014df1
 801136c:	08014e08 	.word	0x08014e08
 8011370:	7ff00000 	.word	0x7ff00000
 8011374:	08014ded 	.word	0x08014ded
 8011378:	08014de4 	.word	0x08014de4
 801137c:	08014dc1 	.word	0x08014dc1
 8011380:	3ff80000 	.word	0x3ff80000
 8011384:	08014ef8 	.word	0x08014ef8
 8011388:	08014e63 	.word	0x08014e63
 801138c:	2501      	movs	r5, #1
 801138e:	2300      	movs	r3, #0
 8011390:	9306      	str	r3, [sp, #24]
 8011392:	9508      	str	r5, [sp, #32]
 8011394:	f04f 33ff 	mov.w	r3, #4294967295
 8011398:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801139c:	2200      	movs	r2, #0
 801139e:	2312      	movs	r3, #18
 80113a0:	e7b0      	b.n	8011304 <_dtoa_r+0x26c>
 80113a2:	2301      	movs	r3, #1
 80113a4:	9308      	str	r3, [sp, #32]
 80113a6:	e7f5      	b.n	8011394 <_dtoa_r+0x2fc>
 80113a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80113ae:	e7b8      	b.n	8011322 <_dtoa_r+0x28a>
 80113b0:	3101      	adds	r1, #1
 80113b2:	6041      	str	r1, [r0, #4]
 80113b4:	0052      	lsls	r2, r2, #1
 80113b6:	e7b8      	b.n	801132a <_dtoa_r+0x292>
 80113b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113ba:	9a01      	ldr	r2, [sp, #4]
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	9b03      	ldr	r3, [sp, #12]
 80113c0:	2b0e      	cmp	r3, #14
 80113c2:	f200 809d 	bhi.w	8011500 <_dtoa_r+0x468>
 80113c6:	2d00      	cmp	r5, #0
 80113c8:	f000 809a 	beq.w	8011500 <_dtoa_r+0x468>
 80113cc:	9b00      	ldr	r3, [sp, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	dd32      	ble.n	8011438 <_dtoa_r+0x3a0>
 80113d2:	4ab7      	ldr	r2, [pc, #732]	; (80116b0 <_dtoa_r+0x618>)
 80113d4:	f003 030f 	and.w	r3, r3, #15
 80113d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80113e0:	9b00      	ldr	r3, [sp, #0]
 80113e2:	05d8      	lsls	r0, r3, #23
 80113e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80113e8:	d516      	bpl.n	8011418 <_dtoa_r+0x380>
 80113ea:	4bb2      	ldr	r3, [pc, #712]	; (80116b4 <_dtoa_r+0x61c>)
 80113ec:	ec51 0b19 	vmov	r0, r1, d9
 80113f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80113f4:	f7ef fa42 	bl	800087c <__aeabi_ddiv>
 80113f8:	f007 070f 	and.w	r7, r7, #15
 80113fc:	4682      	mov	sl, r0
 80113fe:	468b      	mov	fp, r1
 8011400:	2503      	movs	r5, #3
 8011402:	4eac      	ldr	r6, [pc, #688]	; (80116b4 <_dtoa_r+0x61c>)
 8011404:	b957      	cbnz	r7, 801141c <_dtoa_r+0x384>
 8011406:	4642      	mov	r2, r8
 8011408:	464b      	mov	r3, r9
 801140a:	4650      	mov	r0, sl
 801140c:	4659      	mov	r1, fp
 801140e:	f7ef fa35 	bl	800087c <__aeabi_ddiv>
 8011412:	4682      	mov	sl, r0
 8011414:	468b      	mov	fp, r1
 8011416:	e028      	b.n	801146a <_dtoa_r+0x3d2>
 8011418:	2502      	movs	r5, #2
 801141a:	e7f2      	b.n	8011402 <_dtoa_r+0x36a>
 801141c:	07f9      	lsls	r1, r7, #31
 801141e:	d508      	bpl.n	8011432 <_dtoa_r+0x39a>
 8011420:	4640      	mov	r0, r8
 8011422:	4649      	mov	r1, r9
 8011424:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011428:	f7ef f8fe 	bl	8000628 <__aeabi_dmul>
 801142c:	3501      	adds	r5, #1
 801142e:	4680      	mov	r8, r0
 8011430:	4689      	mov	r9, r1
 8011432:	107f      	asrs	r7, r7, #1
 8011434:	3608      	adds	r6, #8
 8011436:	e7e5      	b.n	8011404 <_dtoa_r+0x36c>
 8011438:	f000 809b 	beq.w	8011572 <_dtoa_r+0x4da>
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	4f9d      	ldr	r7, [pc, #628]	; (80116b4 <_dtoa_r+0x61c>)
 8011440:	425e      	negs	r6, r3
 8011442:	4b9b      	ldr	r3, [pc, #620]	; (80116b0 <_dtoa_r+0x618>)
 8011444:	f006 020f 	and.w	r2, r6, #15
 8011448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011450:	ec51 0b19 	vmov	r0, r1, d9
 8011454:	f7ef f8e8 	bl	8000628 <__aeabi_dmul>
 8011458:	1136      	asrs	r6, r6, #4
 801145a:	4682      	mov	sl, r0
 801145c:	468b      	mov	fp, r1
 801145e:	2300      	movs	r3, #0
 8011460:	2502      	movs	r5, #2
 8011462:	2e00      	cmp	r6, #0
 8011464:	d17a      	bne.n	801155c <_dtoa_r+0x4c4>
 8011466:	2b00      	cmp	r3, #0
 8011468:	d1d3      	bne.n	8011412 <_dtoa_r+0x37a>
 801146a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 8082 	beq.w	8011576 <_dtoa_r+0x4de>
 8011472:	4b91      	ldr	r3, [pc, #580]	; (80116b8 <_dtoa_r+0x620>)
 8011474:	2200      	movs	r2, #0
 8011476:	4650      	mov	r0, sl
 8011478:	4659      	mov	r1, fp
 801147a:	f7ef fb47 	bl	8000b0c <__aeabi_dcmplt>
 801147e:	2800      	cmp	r0, #0
 8011480:	d079      	beq.n	8011576 <_dtoa_r+0x4de>
 8011482:	9b03      	ldr	r3, [sp, #12]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d076      	beq.n	8011576 <_dtoa_r+0x4de>
 8011488:	9b02      	ldr	r3, [sp, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	dd36      	ble.n	80114fc <_dtoa_r+0x464>
 801148e:	9b00      	ldr	r3, [sp, #0]
 8011490:	4650      	mov	r0, sl
 8011492:	4659      	mov	r1, fp
 8011494:	1e5f      	subs	r7, r3, #1
 8011496:	2200      	movs	r2, #0
 8011498:	4b88      	ldr	r3, [pc, #544]	; (80116bc <_dtoa_r+0x624>)
 801149a:	f7ef f8c5 	bl	8000628 <__aeabi_dmul>
 801149e:	9e02      	ldr	r6, [sp, #8]
 80114a0:	4682      	mov	sl, r0
 80114a2:	468b      	mov	fp, r1
 80114a4:	3501      	adds	r5, #1
 80114a6:	4628      	mov	r0, r5
 80114a8:	f7ef f854 	bl	8000554 <__aeabi_i2d>
 80114ac:	4652      	mov	r2, sl
 80114ae:	465b      	mov	r3, fp
 80114b0:	f7ef f8ba 	bl	8000628 <__aeabi_dmul>
 80114b4:	4b82      	ldr	r3, [pc, #520]	; (80116c0 <_dtoa_r+0x628>)
 80114b6:	2200      	movs	r2, #0
 80114b8:	f7ee ff00 	bl	80002bc <__adddf3>
 80114bc:	46d0      	mov	r8, sl
 80114be:	46d9      	mov	r9, fp
 80114c0:	4682      	mov	sl, r0
 80114c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80114c6:	2e00      	cmp	r6, #0
 80114c8:	d158      	bne.n	801157c <_dtoa_r+0x4e4>
 80114ca:	4b7e      	ldr	r3, [pc, #504]	; (80116c4 <_dtoa_r+0x62c>)
 80114cc:	2200      	movs	r2, #0
 80114ce:	4640      	mov	r0, r8
 80114d0:	4649      	mov	r1, r9
 80114d2:	f7ee fef1 	bl	80002b8 <__aeabi_dsub>
 80114d6:	4652      	mov	r2, sl
 80114d8:	465b      	mov	r3, fp
 80114da:	4680      	mov	r8, r0
 80114dc:	4689      	mov	r9, r1
 80114de:	f7ef fb33 	bl	8000b48 <__aeabi_dcmpgt>
 80114e2:	2800      	cmp	r0, #0
 80114e4:	f040 8295 	bne.w	8011a12 <_dtoa_r+0x97a>
 80114e8:	4652      	mov	r2, sl
 80114ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80114ee:	4640      	mov	r0, r8
 80114f0:	4649      	mov	r1, r9
 80114f2:	f7ef fb0b 	bl	8000b0c <__aeabi_dcmplt>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	f040 8289 	bne.w	8011a0e <_dtoa_r+0x976>
 80114fc:	ec5b ab19 	vmov	sl, fp, d9
 8011500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011502:	2b00      	cmp	r3, #0
 8011504:	f2c0 8148 	blt.w	8011798 <_dtoa_r+0x700>
 8011508:	9a00      	ldr	r2, [sp, #0]
 801150a:	2a0e      	cmp	r2, #14
 801150c:	f300 8144 	bgt.w	8011798 <_dtoa_r+0x700>
 8011510:	4b67      	ldr	r3, [pc, #412]	; (80116b0 <_dtoa_r+0x618>)
 8011512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011516:	e9d3 8900 	ldrd	r8, r9, [r3]
 801151a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801151c:	2b00      	cmp	r3, #0
 801151e:	f280 80d5 	bge.w	80116cc <_dtoa_r+0x634>
 8011522:	9b03      	ldr	r3, [sp, #12]
 8011524:	2b00      	cmp	r3, #0
 8011526:	f300 80d1 	bgt.w	80116cc <_dtoa_r+0x634>
 801152a:	f040 826f 	bne.w	8011a0c <_dtoa_r+0x974>
 801152e:	4b65      	ldr	r3, [pc, #404]	; (80116c4 <_dtoa_r+0x62c>)
 8011530:	2200      	movs	r2, #0
 8011532:	4640      	mov	r0, r8
 8011534:	4649      	mov	r1, r9
 8011536:	f7ef f877 	bl	8000628 <__aeabi_dmul>
 801153a:	4652      	mov	r2, sl
 801153c:	465b      	mov	r3, fp
 801153e:	f7ef faf9 	bl	8000b34 <__aeabi_dcmpge>
 8011542:	9e03      	ldr	r6, [sp, #12]
 8011544:	4637      	mov	r7, r6
 8011546:	2800      	cmp	r0, #0
 8011548:	f040 8245 	bne.w	80119d6 <_dtoa_r+0x93e>
 801154c:	9d01      	ldr	r5, [sp, #4]
 801154e:	2331      	movs	r3, #49	; 0x31
 8011550:	f805 3b01 	strb.w	r3, [r5], #1
 8011554:	9b00      	ldr	r3, [sp, #0]
 8011556:	3301      	adds	r3, #1
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	e240      	b.n	80119de <_dtoa_r+0x946>
 801155c:	07f2      	lsls	r2, r6, #31
 801155e:	d505      	bpl.n	801156c <_dtoa_r+0x4d4>
 8011560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011564:	f7ef f860 	bl	8000628 <__aeabi_dmul>
 8011568:	3501      	adds	r5, #1
 801156a:	2301      	movs	r3, #1
 801156c:	1076      	asrs	r6, r6, #1
 801156e:	3708      	adds	r7, #8
 8011570:	e777      	b.n	8011462 <_dtoa_r+0x3ca>
 8011572:	2502      	movs	r5, #2
 8011574:	e779      	b.n	801146a <_dtoa_r+0x3d2>
 8011576:	9f00      	ldr	r7, [sp, #0]
 8011578:	9e03      	ldr	r6, [sp, #12]
 801157a:	e794      	b.n	80114a6 <_dtoa_r+0x40e>
 801157c:	9901      	ldr	r1, [sp, #4]
 801157e:	4b4c      	ldr	r3, [pc, #304]	; (80116b0 <_dtoa_r+0x618>)
 8011580:	4431      	add	r1, r6
 8011582:	910d      	str	r1, [sp, #52]	; 0x34
 8011584:	9908      	ldr	r1, [sp, #32]
 8011586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801158a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801158e:	2900      	cmp	r1, #0
 8011590:	d043      	beq.n	801161a <_dtoa_r+0x582>
 8011592:	494d      	ldr	r1, [pc, #308]	; (80116c8 <_dtoa_r+0x630>)
 8011594:	2000      	movs	r0, #0
 8011596:	f7ef f971 	bl	800087c <__aeabi_ddiv>
 801159a:	4652      	mov	r2, sl
 801159c:	465b      	mov	r3, fp
 801159e:	f7ee fe8b 	bl	80002b8 <__aeabi_dsub>
 80115a2:	9d01      	ldr	r5, [sp, #4]
 80115a4:	4682      	mov	sl, r0
 80115a6:	468b      	mov	fp, r1
 80115a8:	4649      	mov	r1, r9
 80115aa:	4640      	mov	r0, r8
 80115ac:	f7ef faec 	bl	8000b88 <__aeabi_d2iz>
 80115b0:	4606      	mov	r6, r0
 80115b2:	f7ee ffcf 	bl	8000554 <__aeabi_i2d>
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	4640      	mov	r0, r8
 80115bc:	4649      	mov	r1, r9
 80115be:	f7ee fe7b 	bl	80002b8 <__aeabi_dsub>
 80115c2:	3630      	adds	r6, #48	; 0x30
 80115c4:	f805 6b01 	strb.w	r6, [r5], #1
 80115c8:	4652      	mov	r2, sl
 80115ca:	465b      	mov	r3, fp
 80115cc:	4680      	mov	r8, r0
 80115ce:	4689      	mov	r9, r1
 80115d0:	f7ef fa9c 	bl	8000b0c <__aeabi_dcmplt>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	d163      	bne.n	80116a0 <_dtoa_r+0x608>
 80115d8:	4642      	mov	r2, r8
 80115da:	464b      	mov	r3, r9
 80115dc:	4936      	ldr	r1, [pc, #216]	; (80116b8 <_dtoa_r+0x620>)
 80115de:	2000      	movs	r0, #0
 80115e0:	f7ee fe6a 	bl	80002b8 <__aeabi_dsub>
 80115e4:	4652      	mov	r2, sl
 80115e6:	465b      	mov	r3, fp
 80115e8:	f7ef fa90 	bl	8000b0c <__aeabi_dcmplt>
 80115ec:	2800      	cmp	r0, #0
 80115ee:	f040 80b5 	bne.w	801175c <_dtoa_r+0x6c4>
 80115f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115f4:	429d      	cmp	r5, r3
 80115f6:	d081      	beq.n	80114fc <_dtoa_r+0x464>
 80115f8:	4b30      	ldr	r3, [pc, #192]	; (80116bc <_dtoa_r+0x624>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	4650      	mov	r0, sl
 80115fe:	4659      	mov	r1, fp
 8011600:	f7ef f812 	bl	8000628 <__aeabi_dmul>
 8011604:	4b2d      	ldr	r3, [pc, #180]	; (80116bc <_dtoa_r+0x624>)
 8011606:	4682      	mov	sl, r0
 8011608:	468b      	mov	fp, r1
 801160a:	4640      	mov	r0, r8
 801160c:	4649      	mov	r1, r9
 801160e:	2200      	movs	r2, #0
 8011610:	f7ef f80a 	bl	8000628 <__aeabi_dmul>
 8011614:	4680      	mov	r8, r0
 8011616:	4689      	mov	r9, r1
 8011618:	e7c6      	b.n	80115a8 <_dtoa_r+0x510>
 801161a:	4650      	mov	r0, sl
 801161c:	4659      	mov	r1, fp
 801161e:	f7ef f803 	bl	8000628 <__aeabi_dmul>
 8011622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011624:	9d01      	ldr	r5, [sp, #4]
 8011626:	930f      	str	r3, [sp, #60]	; 0x3c
 8011628:	4682      	mov	sl, r0
 801162a:	468b      	mov	fp, r1
 801162c:	4649      	mov	r1, r9
 801162e:	4640      	mov	r0, r8
 8011630:	f7ef faaa 	bl	8000b88 <__aeabi_d2iz>
 8011634:	4606      	mov	r6, r0
 8011636:	f7ee ff8d 	bl	8000554 <__aeabi_i2d>
 801163a:	3630      	adds	r6, #48	; 0x30
 801163c:	4602      	mov	r2, r0
 801163e:	460b      	mov	r3, r1
 8011640:	4640      	mov	r0, r8
 8011642:	4649      	mov	r1, r9
 8011644:	f7ee fe38 	bl	80002b8 <__aeabi_dsub>
 8011648:	f805 6b01 	strb.w	r6, [r5], #1
 801164c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801164e:	429d      	cmp	r5, r3
 8011650:	4680      	mov	r8, r0
 8011652:	4689      	mov	r9, r1
 8011654:	f04f 0200 	mov.w	r2, #0
 8011658:	d124      	bne.n	80116a4 <_dtoa_r+0x60c>
 801165a:	4b1b      	ldr	r3, [pc, #108]	; (80116c8 <_dtoa_r+0x630>)
 801165c:	4650      	mov	r0, sl
 801165e:	4659      	mov	r1, fp
 8011660:	f7ee fe2c 	bl	80002bc <__adddf3>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	4640      	mov	r0, r8
 801166a:	4649      	mov	r1, r9
 801166c:	f7ef fa6c 	bl	8000b48 <__aeabi_dcmpgt>
 8011670:	2800      	cmp	r0, #0
 8011672:	d173      	bne.n	801175c <_dtoa_r+0x6c4>
 8011674:	4652      	mov	r2, sl
 8011676:	465b      	mov	r3, fp
 8011678:	4913      	ldr	r1, [pc, #76]	; (80116c8 <_dtoa_r+0x630>)
 801167a:	2000      	movs	r0, #0
 801167c:	f7ee fe1c 	bl	80002b8 <__aeabi_dsub>
 8011680:	4602      	mov	r2, r0
 8011682:	460b      	mov	r3, r1
 8011684:	4640      	mov	r0, r8
 8011686:	4649      	mov	r1, r9
 8011688:	f7ef fa40 	bl	8000b0c <__aeabi_dcmplt>
 801168c:	2800      	cmp	r0, #0
 801168e:	f43f af35 	beq.w	80114fc <_dtoa_r+0x464>
 8011692:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011694:	1e6b      	subs	r3, r5, #1
 8011696:	930f      	str	r3, [sp, #60]	; 0x3c
 8011698:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801169c:	2b30      	cmp	r3, #48	; 0x30
 801169e:	d0f8      	beq.n	8011692 <_dtoa_r+0x5fa>
 80116a0:	9700      	str	r7, [sp, #0]
 80116a2:	e049      	b.n	8011738 <_dtoa_r+0x6a0>
 80116a4:	4b05      	ldr	r3, [pc, #20]	; (80116bc <_dtoa_r+0x624>)
 80116a6:	f7ee ffbf 	bl	8000628 <__aeabi_dmul>
 80116aa:	4680      	mov	r8, r0
 80116ac:	4689      	mov	r9, r1
 80116ae:	e7bd      	b.n	801162c <_dtoa_r+0x594>
 80116b0:	08014ef8 	.word	0x08014ef8
 80116b4:	08014ed0 	.word	0x08014ed0
 80116b8:	3ff00000 	.word	0x3ff00000
 80116bc:	40240000 	.word	0x40240000
 80116c0:	401c0000 	.word	0x401c0000
 80116c4:	40140000 	.word	0x40140000
 80116c8:	3fe00000 	.word	0x3fe00000
 80116cc:	9d01      	ldr	r5, [sp, #4]
 80116ce:	4656      	mov	r6, sl
 80116d0:	465f      	mov	r7, fp
 80116d2:	4642      	mov	r2, r8
 80116d4:	464b      	mov	r3, r9
 80116d6:	4630      	mov	r0, r6
 80116d8:	4639      	mov	r1, r7
 80116da:	f7ef f8cf 	bl	800087c <__aeabi_ddiv>
 80116de:	f7ef fa53 	bl	8000b88 <__aeabi_d2iz>
 80116e2:	4682      	mov	sl, r0
 80116e4:	f7ee ff36 	bl	8000554 <__aeabi_i2d>
 80116e8:	4642      	mov	r2, r8
 80116ea:	464b      	mov	r3, r9
 80116ec:	f7ee ff9c 	bl	8000628 <__aeabi_dmul>
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	4630      	mov	r0, r6
 80116f6:	4639      	mov	r1, r7
 80116f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80116fc:	f7ee fddc 	bl	80002b8 <__aeabi_dsub>
 8011700:	f805 6b01 	strb.w	r6, [r5], #1
 8011704:	9e01      	ldr	r6, [sp, #4]
 8011706:	9f03      	ldr	r7, [sp, #12]
 8011708:	1bae      	subs	r6, r5, r6
 801170a:	42b7      	cmp	r7, r6
 801170c:	4602      	mov	r2, r0
 801170e:	460b      	mov	r3, r1
 8011710:	d135      	bne.n	801177e <_dtoa_r+0x6e6>
 8011712:	f7ee fdd3 	bl	80002bc <__adddf3>
 8011716:	4642      	mov	r2, r8
 8011718:	464b      	mov	r3, r9
 801171a:	4606      	mov	r6, r0
 801171c:	460f      	mov	r7, r1
 801171e:	f7ef fa13 	bl	8000b48 <__aeabi_dcmpgt>
 8011722:	b9d0      	cbnz	r0, 801175a <_dtoa_r+0x6c2>
 8011724:	4642      	mov	r2, r8
 8011726:	464b      	mov	r3, r9
 8011728:	4630      	mov	r0, r6
 801172a:	4639      	mov	r1, r7
 801172c:	f7ef f9e4 	bl	8000af8 <__aeabi_dcmpeq>
 8011730:	b110      	cbz	r0, 8011738 <_dtoa_r+0x6a0>
 8011732:	f01a 0f01 	tst.w	sl, #1
 8011736:	d110      	bne.n	801175a <_dtoa_r+0x6c2>
 8011738:	4620      	mov	r0, r4
 801173a:	ee18 1a10 	vmov	r1, s16
 801173e:	f000 fae9 	bl	8011d14 <_Bfree>
 8011742:	2300      	movs	r3, #0
 8011744:	9800      	ldr	r0, [sp, #0]
 8011746:	702b      	strb	r3, [r5, #0]
 8011748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801174a:	3001      	adds	r0, #1
 801174c:	6018      	str	r0, [r3, #0]
 801174e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011750:	2b00      	cmp	r3, #0
 8011752:	f43f acf1 	beq.w	8011138 <_dtoa_r+0xa0>
 8011756:	601d      	str	r5, [r3, #0]
 8011758:	e4ee      	b.n	8011138 <_dtoa_r+0xa0>
 801175a:	9f00      	ldr	r7, [sp, #0]
 801175c:	462b      	mov	r3, r5
 801175e:	461d      	mov	r5, r3
 8011760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011764:	2a39      	cmp	r2, #57	; 0x39
 8011766:	d106      	bne.n	8011776 <_dtoa_r+0x6de>
 8011768:	9a01      	ldr	r2, [sp, #4]
 801176a:	429a      	cmp	r2, r3
 801176c:	d1f7      	bne.n	801175e <_dtoa_r+0x6c6>
 801176e:	9901      	ldr	r1, [sp, #4]
 8011770:	2230      	movs	r2, #48	; 0x30
 8011772:	3701      	adds	r7, #1
 8011774:	700a      	strb	r2, [r1, #0]
 8011776:	781a      	ldrb	r2, [r3, #0]
 8011778:	3201      	adds	r2, #1
 801177a:	701a      	strb	r2, [r3, #0]
 801177c:	e790      	b.n	80116a0 <_dtoa_r+0x608>
 801177e:	4ba6      	ldr	r3, [pc, #664]	; (8011a18 <_dtoa_r+0x980>)
 8011780:	2200      	movs	r2, #0
 8011782:	f7ee ff51 	bl	8000628 <__aeabi_dmul>
 8011786:	2200      	movs	r2, #0
 8011788:	2300      	movs	r3, #0
 801178a:	4606      	mov	r6, r0
 801178c:	460f      	mov	r7, r1
 801178e:	f7ef f9b3 	bl	8000af8 <__aeabi_dcmpeq>
 8011792:	2800      	cmp	r0, #0
 8011794:	d09d      	beq.n	80116d2 <_dtoa_r+0x63a>
 8011796:	e7cf      	b.n	8011738 <_dtoa_r+0x6a0>
 8011798:	9a08      	ldr	r2, [sp, #32]
 801179a:	2a00      	cmp	r2, #0
 801179c:	f000 80d7 	beq.w	801194e <_dtoa_r+0x8b6>
 80117a0:	9a06      	ldr	r2, [sp, #24]
 80117a2:	2a01      	cmp	r2, #1
 80117a4:	f300 80ba 	bgt.w	801191c <_dtoa_r+0x884>
 80117a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117aa:	2a00      	cmp	r2, #0
 80117ac:	f000 80b2 	beq.w	8011914 <_dtoa_r+0x87c>
 80117b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80117b4:	9e07      	ldr	r6, [sp, #28]
 80117b6:	9d04      	ldr	r5, [sp, #16]
 80117b8:	9a04      	ldr	r2, [sp, #16]
 80117ba:	441a      	add	r2, r3
 80117bc:	9204      	str	r2, [sp, #16]
 80117be:	9a05      	ldr	r2, [sp, #20]
 80117c0:	2101      	movs	r1, #1
 80117c2:	441a      	add	r2, r3
 80117c4:	4620      	mov	r0, r4
 80117c6:	9205      	str	r2, [sp, #20]
 80117c8:	f000 fb5c 	bl	8011e84 <__i2b>
 80117cc:	4607      	mov	r7, r0
 80117ce:	2d00      	cmp	r5, #0
 80117d0:	dd0c      	ble.n	80117ec <_dtoa_r+0x754>
 80117d2:	9b05      	ldr	r3, [sp, #20]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	dd09      	ble.n	80117ec <_dtoa_r+0x754>
 80117d8:	42ab      	cmp	r3, r5
 80117da:	9a04      	ldr	r2, [sp, #16]
 80117dc:	bfa8      	it	ge
 80117de:	462b      	movge	r3, r5
 80117e0:	1ad2      	subs	r2, r2, r3
 80117e2:	9204      	str	r2, [sp, #16]
 80117e4:	9a05      	ldr	r2, [sp, #20]
 80117e6:	1aed      	subs	r5, r5, r3
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	9305      	str	r3, [sp, #20]
 80117ec:	9b07      	ldr	r3, [sp, #28]
 80117ee:	b31b      	cbz	r3, 8011838 <_dtoa_r+0x7a0>
 80117f0:	9b08      	ldr	r3, [sp, #32]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f000 80af 	beq.w	8011956 <_dtoa_r+0x8be>
 80117f8:	2e00      	cmp	r6, #0
 80117fa:	dd13      	ble.n	8011824 <_dtoa_r+0x78c>
 80117fc:	4639      	mov	r1, r7
 80117fe:	4632      	mov	r2, r6
 8011800:	4620      	mov	r0, r4
 8011802:	f000 fbff 	bl	8012004 <__pow5mult>
 8011806:	ee18 2a10 	vmov	r2, s16
 801180a:	4601      	mov	r1, r0
 801180c:	4607      	mov	r7, r0
 801180e:	4620      	mov	r0, r4
 8011810:	f000 fb4e 	bl	8011eb0 <__multiply>
 8011814:	ee18 1a10 	vmov	r1, s16
 8011818:	4680      	mov	r8, r0
 801181a:	4620      	mov	r0, r4
 801181c:	f000 fa7a 	bl	8011d14 <_Bfree>
 8011820:	ee08 8a10 	vmov	s16, r8
 8011824:	9b07      	ldr	r3, [sp, #28]
 8011826:	1b9a      	subs	r2, r3, r6
 8011828:	d006      	beq.n	8011838 <_dtoa_r+0x7a0>
 801182a:	ee18 1a10 	vmov	r1, s16
 801182e:	4620      	mov	r0, r4
 8011830:	f000 fbe8 	bl	8012004 <__pow5mult>
 8011834:	ee08 0a10 	vmov	s16, r0
 8011838:	2101      	movs	r1, #1
 801183a:	4620      	mov	r0, r4
 801183c:	f000 fb22 	bl	8011e84 <__i2b>
 8011840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011842:	2b00      	cmp	r3, #0
 8011844:	4606      	mov	r6, r0
 8011846:	f340 8088 	ble.w	801195a <_dtoa_r+0x8c2>
 801184a:	461a      	mov	r2, r3
 801184c:	4601      	mov	r1, r0
 801184e:	4620      	mov	r0, r4
 8011850:	f000 fbd8 	bl	8012004 <__pow5mult>
 8011854:	9b06      	ldr	r3, [sp, #24]
 8011856:	2b01      	cmp	r3, #1
 8011858:	4606      	mov	r6, r0
 801185a:	f340 8081 	ble.w	8011960 <_dtoa_r+0x8c8>
 801185e:	f04f 0800 	mov.w	r8, #0
 8011862:	6933      	ldr	r3, [r6, #16]
 8011864:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011868:	6918      	ldr	r0, [r3, #16]
 801186a:	f000 fabb 	bl	8011de4 <__hi0bits>
 801186e:	f1c0 0020 	rsb	r0, r0, #32
 8011872:	9b05      	ldr	r3, [sp, #20]
 8011874:	4418      	add	r0, r3
 8011876:	f010 001f 	ands.w	r0, r0, #31
 801187a:	f000 8092 	beq.w	80119a2 <_dtoa_r+0x90a>
 801187e:	f1c0 0320 	rsb	r3, r0, #32
 8011882:	2b04      	cmp	r3, #4
 8011884:	f340 808a 	ble.w	801199c <_dtoa_r+0x904>
 8011888:	f1c0 001c 	rsb	r0, r0, #28
 801188c:	9b04      	ldr	r3, [sp, #16]
 801188e:	4403      	add	r3, r0
 8011890:	9304      	str	r3, [sp, #16]
 8011892:	9b05      	ldr	r3, [sp, #20]
 8011894:	4403      	add	r3, r0
 8011896:	4405      	add	r5, r0
 8011898:	9305      	str	r3, [sp, #20]
 801189a:	9b04      	ldr	r3, [sp, #16]
 801189c:	2b00      	cmp	r3, #0
 801189e:	dd07      	ble.n	80118b0 <_dtoa_r+0x818>
 80118a0:	ee18 1a10 	vmov	r1, s16
 80118a4:	461a      	mov	r2, r3
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 fc06 	bl	80120b8 <__lshift>
 80118ac:	ee08 0a10 	vmov	s16, r0
 80118b0:	9b05      	ldr	r3, [sp, #20]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	dd05      	ble.n	80118c2 <_dtoa_r+0x82a>
 80118b6:	4631      	mov	r1, r6
 80118b8:	461a      	mov	r2, r3
 80118ba:	4620      	mov	r0, r4
 80118bc:	f000 fbfc 	bl	80120b8 <__lshift>
 80118c0:	4606      	mov	r6, r0
 80118c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d06e      	beq.n	80119a6 <_dtoa_r+0x90e>
 80118c8:	ee18 0a10 	vmov	r0, s16
 80118cc:	4631      	mov	r1, r6
 80118ce:	f000 fc63 	bl	8012198 <__mcmp>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	da67      	bge.n	80119a6 <_dtoa_r+0x90e>
 80118d6:	9b00      	ldr	r3, [sp, #0]
 80118d8:	3b01      	subs	r3, #1
 80118da:	ee18 1a10 	vmov	r1, s16
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	220a      	movs	r2, #10
 80118e2:	2300      	movs	r3, #0
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 fa37 	bl	8011d58 <__multadd>
 80118ea:	9b08      	ldr	r3, [sp, #32]
 80118ec:	ee08 0a10 	vmov	s16, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 81b1 	beq.w	8011c58 <_dtoa_r+0xbc0>
 80118f6:	2300      	movs	r3, #0
 80118f8:	4639      	mov	r1, r7
 80118fa:	220a      	movs	r2, #10
 80118fc:	4620      	mov	r0, r4
 80118fe:	f000 fa2b 	bl	8011d58 <__multadd>
 8011902:	9b02      	ldr	r3, [sp, #8]
 8011904:	2b00      	cmp	r3, #0
 8011906:	4607      	mov	r7, r0
 8011908:	f300 808e 	bgt.w	8011a28 <_dtoa_r+0x990>
 801190c:	9b06      	ldr	r3, [sp, #24]
 801190e:	2b02      	cmp	r3, #2
 8011910:	dc51      	bgt.n	80119b6 <_dtoa_r+0x91e>
 8011912:	e089      	b.n	8011a28 <_dtoa_r+0x990>
 8011914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801191a:	e74b      	b.n	80117b4 <_dtoa_r+0x71c>
 801191c:	9b03      	ldr	r3, [sp, #12]
 801191e:	1e5e      	subs	r6, r3, #1
 8011920:	9b07      	ldr	r3, [sp, #28]
 8011922:	42b3      	cmp	r3, r6
 8011924:	bfbf      	itttt	lt
 8011926:	9b07      	ldrlt	r3, [sp, #28]
 8011928:	9607      	strlt	r6, [sp, #28]
 801192a:	1af2      	sublt	r2, r6, r3
 801192c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801192e:	bfb6      	itet	lt
 8011930:	189b      	addlt	r3, r3, r2
 8011932:	1b9e      	subge	r6, r3, r6
 8011934:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011936:	9b03      	ldr	r3, [sp, #12]
 8011938:	bfb8      	it	lt
 801193a:	2600      	movlt	r6, #0
 801193c:	2b00      	cmp	r3, #0
 801193e:	bfb7      	itett	lt
 8011940:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011944:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011948:	1a9d      	sublt	r5, r3, r2
 801194a:	2300      	movlt	r3, #0
 801194c:	e734      	b.n	80117b8 <_dtoa_r+0x720>
 801194e:	9e07      	ldr	r6, [sp, #28]
 8011950:	9d04      	ldr	r5, [sp, #16]
 8011952:	9f08      	ldr	r7, [sp, #32]
 8011954:	e73b      	b.n	80117ce <_dtoa_r+0x736>
 8011956:	9a07      	ldr	r2, [sp, #28]
 8011958:	e767      	b.n	801182a <_dtoa_r+0x792>
 801195a:	9b06      	ldr	r3, [sp, #24]
 801195c:	2b01      	cmp	r3, #1
 801195e:	dc18      	bgt.n	8011992 <_dtoa_r+0x8fa>
 8011960:	f1ba 0f00 	cmp.w	sl, #0
 8011964:	d115      	bne.n	8011992 <_dtoa_r+0x8fa>
 8011966:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801196a:	b993      	cbnz	r3, 8011992 <_dtoa_r+0x8fa>
 801196c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011970:	0d1b      	lsrs	r3, r3, #20
 8011972:	051b      	lsls	r3, r3, #20
 8011974:	b183      	cbz	r3, 8011998 <_dtoa_r+0x900>
 8011976:	9b04      	ldr	r3, [sp, #16]
 8011978:	3301      	adds	r3, #1
 801197a:	9304      	str	r3, [sp, #16]
 801197c:	9b05      	ldr	r3, [sp, #20]
 801197e:	3301      	adds	r3, #1
 8011980:	9305      	str	r3, [sp, #20]
 8011982:	f04f 0801 	mov.w	r8, #1
 8011986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011988:	2b00      	cmp	r3, #0
 801198a:	f47f af6a 	bne.w	8011862 <_dtoa_r+0x7ca>
 801198e:	2001      	movs	r0, #1
 8011990:	e76f      	b.n	8011872 <_dtoa_r+0x7da>
 8011992:	f04f 0800 	mov.w	r8, #0
 8011996:	e7f6      	b.n	8011986 <_dtoa_r+0x8ee>
 8011998:	4698      	mov	r8, r3
 801199a:	e7f4      	b.n	8011986 <_dtoa_r+0x8ee>
 801199c:	f43f af7d 	beq.w	801189a <_dtoa_r+0x802>
 80119a0:	4618      	mov	r0, r3
 80119a2:	301c      	adds	r0, #28
 80119a4:	e772      	b.n	801188c <_dtoa_r+0x7f4>
 80119a6:	9b03      	ldr	r3, [sp, #12]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	dc37      	bgt.n	8011a1c <_dtoa_r+0x984>
 80119ac:	9b06      	ldr	r3, [sp, #24]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	dd34      	ble.n	8011a1c <_dtoa_r+0x984>
 80119b2:	9b03      	ldr	r3, [sp, #12]
 80119b4:	9302      	str	r3, [sp, #8]
 80119b6:	9b02      	ldr	r3, [sp, #8]
 80119b8:	b96b      	cbnz	r3, 80119d6 <_dtoa_r+0x93e>
 80119ba:	4631      	mov	r1, r6
 80119bc:	2205      	movs	r2, #5
 80119be:	4620      	mov	r0, r4
 80119c0:	f000 f9ca 	bl	8011d58 <__multadd>
 80119c4:	4601      	mov	r1, r0
 80119c6:	4606      	mov	r6, r0
 80119c8:	ee18 0a10 	vmov	r0, s16
 80119cc:	f000 fbe4 	bl	8012198 <__mcmp>
 80119d0:	2800      	cmp	r0, #0
 80119d2:	f73f adbb 	bgt.w	801154c <_dtoa_r+0x4b4>
 80119d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119d8:	9d01      	ldr	r5, [sp, #4]
 80119da:	43db      	mvns	r3, r3
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	f04f 0800 	mov.w	r8, #0
 80119e2:	4631      	mov	r1, r6
 80119e4:	4620      	mov	r0, r4
 80119e6:	f000 f995 	bl	8011d14 <_Bfree>
 80119ea:	2f00      	cmp	r7, #0
 80119ec:	f43f aea4 	beq.w	8011738 <_dtoa_r+0x6a0>
 80119f0:	f1b8 0f00 	cmp.w	r8, #0
 80119f4:	d005      	beq.n	8011a02 <_dtoa_r+0x96a>
 80119f6:	45b8      	cmp	r8, r7
 80119f8:	d003      	beq.n	8011a02 <_dtoa_r+0x96a>
 80119fa:	4641      	mov	r1, r8
 80119fc:	4620      	mov	r0, r4
 80119fe:	f000 f989 	bl	8011d14 <_Bfree>
 8011a02:	4639      	mov	r1, r7
 8011a04:	4620      	mov	r0, r4
 8011a06:	f000 f985 	bl	8011d14 <_Bfree>
 8011a0a:	e695      	b.n	8011738 <_dtoa_r+0x6a0>
 8011a0c:	2600      	movs	r6, #0
 8011a0e:	4637      	mov	r7, r6
 8011a10:	e7e1      	b.n	80119d6 <_dtoa_r+0x93e>
 8011a12:	9700      	str	r7, [sp, #0]
 8011a14:	4637      	mov	r7, r6
 8011a16:	e599      	b.n	801154c <_dtoa_r+0x4b4>
 8011a18:	40240000 	.word	0x40240000
 8011a1c:	9b08      	ldr	r3, [sp, #32]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f000 80ca 	beq.w	8011bb8 <_dtoa_r+0xb20>
 8011a24:	9b03      	ldr	r3, [sp, #12]
 8011a26:	9302      	str	r3, [sp, #8]
 8011a28:	2d00      	cmp	r5, #0
 8011a2a:	dd05      	ble.n	8011a38 <_dtoa_r+0x9a0>
 8011a2c:	4639      	mov	r1, r7
 8011a2e:	462a      	mov	r2, r5
 8011a30:	4620      	mov	r0, r4
 8011a32:	f000 fb41 	bl	80120b8 <__lshift>
 8011a36:	4607      	mov	r7, r0
 8011a38:	f1b8 0f00 	cmp.w	r8, #0
 8011a3c:	d05b      	beq.n	8011af6 <_dtoa_r+0xa5e>
 8011a3e:	6879      	ldr	r1, [r7, #4]
 8011a40:	4620      	mov	r0, r4
 8011a42:	f000 f927 	bl	8011c94 <_Balloc>
 8011a46:	4605      	mov	r5, r0
 8011a48:	b928      	cbnz	r0, 8011a56 <_dtoa_r+0x9be>
 8011a4a:	4b87      	ldr	r3, [pc, #540]	; (8011c68 <_dtoa_r+0xbd0>)
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011a52:	f7ff bb3b 	b.w	80110cc <_dtoa_r+0x34>
 8011a56:	693a      	ldr	r2, [r7, #16]
 8011a58:	3202      	adds	r2, #2
 8011a5a:	0092      	lsls	r2, r2, #2
 8011a5c:	f107 010c 	add.w	r1, r7, #12
 8011a60:	300c      	adds	r0, #12
 8011a62:	f7fe fcfd 	bl	8010460 <memcpy>
 8011a66:	2201      	movs	r2, #1
 8011a68:	4629      	mov	r1, r5
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f000 fb24 	bl	80120b8 <__lshift>
 8011a70:	9b01      	ldr	r3, [sp, #4]
 8011a72:	f103 0901 	add.w	r9, r3, #1
 8011a76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	9305      	str	r3, [sp, #20]
 8011a7e:	f00a 0301 	and.w	r3, sl, #1
 8011a82:	46b8      	mov	r8, r7
 8011a84:	9304      	str	r3, [sp, #16]
 8011a86:	4607      	mov	r7, r0
 8011a88:	4631      	mov	r1, r6
 8011a8a:	ee18 0a10 	vmov	r0, s16
 8011a8e:	f7ff fa77 	bl	8010f80 <quorem>
 8011a92:	4641      	mov	r1, r8
 8011a94:	9002      	str	r0, [sp, #8]
 8011a96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011a9a:	ee18 0a10 	vmov	r0, s16
 8011a9e:	f000 fb7b 	bl	8012198 <__mcmp>
 8011aa2:	463a      	mov	r2, r7
 8011aa4:	9003      	str	r0, [sp, #12]
 8011aa6:	4631      	mov	r1, r6
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f000 fb91 	bl	80121d0 <__mdiff>
 8011aae:	68c2      	ldr	r2, [r0, #12]
 8011ab0:	f109 3bff 	add.w	fp, r9, #4294967295
 8011ab4:	4605      	mov	r5, r0
 8011ab6:	bb02      	cbnz	r2, 8011afa <_dtoa_r+0xa62>
 8011ab8:	4601      	mov	r1, r0
 8011aba:	ee18 0a10 	vmov	r0, s16
 8011abe:	f000 fb6b 	bl	8012198 <__mcmp>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	4629      	mov	r1, r5
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	9207      	str	r2, [sp, #28]
 8011aca:	f000 f923 	bl	8011d14 <_Bfree>
 8011ace:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011ad2:	ea43 0102 	orr.w	r1, r3, r2
 8011ad6:	9b04      	ldr	r3, [sp, #16]
 8011ad8:	430b      	orrs	r3, r1
 8011ada:	464d      	mov	r5, r9
 8011adc:	d10f      	bne.n	8011afe <_dtoa_r+0xa66>
 8011ade:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ae2:	d02a      	beq.n	8011b3a <_dtoa_r+0xaa2>
 8011ae4:	9b03      	ldr	r3, [sp, #12]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	dd02      	ble.n	8011af0 <_dtoa_r+0xa58>
 8011aea:	9b02      	ldr	r3, [sp, #8]
 8011aec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011af0:	f88b a000 	strb.w	sl, [fp]
 8011af4:	e775      	b.n	80119e2 <_dtoa_r+0x94a>
 8011af6:	4638      	mov	r0, r7
 8011af8:	e7ba      	b.n	8011a70 <_dtoa_r+0x9d8>
 8011afa:	2201      	movs	r2, #1
 8011afc:	e7e2      	b.n	8011ac4 <_dtoa_r+0xa2c>
 8011afe:	9b03      	ldr	r3, [sp, #12]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	db04      	blt.n	8011b0e <_dtoa_r+0xa76>
 8011b04:	9906      	ldr	r1, [sp, #24]
 8011b06:	430b      	orrs	r3, r1
 8011b08:	9904      	ldr	r1, [sp, #16]
 8011b0a:	430b      	orrs	r3, r1
 8011b0c:	d122      	bne.n	8011b54 <_dtoa_r+0xabc>
 8011b0e:	2a00      	cmp	r2, #0
 8011b10:	ddee      	ble.n	8011af0 <_dtoa_r+0xa58>
 8011b12:	ee18 1a10 	vmov	r1, s16
 8011b16:	2201      	movs	r2, #1
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f000 facd 	bl	80120b8 <__lshift>
 8011b1e:	4631      	mov	r1, r6
 8011b20:	ee08 0a10 	vmov	s16, r0
 8011b24:	f000 fb38 	bl	8012198 <__mcmp>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	dc03      	bgt.n	8011b34 <_dtoa_r+0xa9c>
 8011b2c:	d1e0      	bne.n	8011af0 <_dtoa_r+0xa58>
 8011b2e:	f01a 0f01 	tst.w	sl, #1
 8011b32:	d0dd      	beq.n	8011af0 <_dtoa_r+0xa58>
 8011b34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b38:	d1d7      	bne.n	8011aea <_dtoa_r+0xa52>
 8011b3a:	2339      	movs	r3, #57	; 0x39
 8011b3c:	f88b 3000 	strb.w	r3, [fp]
 8011b40:	462b      	mov	r3, r5
 8011b42:	461d      	mov	r5, r3
 8011b44:	3b01      	subs	r3, #1
 8011b46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011b4a:	2a39      	cmp	r2, #57	; 0x39
 8011b4c:	d071      	beq.n	8011c32 <_dtoa_r+0xb9a>
 8011b4e:	3201      	adds	r2, #1
 8011b50:	701a      	strb	r2, [r3, #0]
 8011b52:	e746      	b.n	80119e2 <_dtoa_r+0x94a>
 8011b54:	2a00      	cmp	r2, #0
 8011b56:	dd07      	ble.n	8011b68 <_dtoa_r+0xad0>
 8011b58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b5c:	d0ed      	beq.n	8011b3a <_dtoa_r+0xaa2>
 8011b5e:	f10a 0301 	add.w	r3, sl, #1
 8011b62:	f88b 3000 	strb.w	r3, [fp]
 8011b66:	e73c      	b.n	80119e2 <_dtoa_r+0x94a>
 8011b68:	9b05      	ldr	r3, [sp, #20]
 8011b6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011b6e:	4599      	cmp	r9, r3
 8011b70:	d047      	beq.n	8011c02 <_dtoa_r+0xb6a>
 8011b72:	ee18 1a10 	vmov	r1, s16
 8011b76:	2300      	movs	r3, #0
 8011b78:	220a      	movs	r2, #10
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f000 f8ec 	bl	8011d58 <__multadd>
 8011b80:	45b8      	cmp	r8, r7
 8011b82:	ee08 0a10 	vmov	s16, r0
 8011b86:	f04f 0300 	mov.w	r3, #0
 8011b8a:	f04f 020a 	mov.w	r2, #10
 8011b8e:	4641      	mov	r1, r8
 8011b90:	4620      	mov	r0, r4
 8011b92:	d106      	bne.n	8011ba2 <_dtoa_r+0xb0a>
 8011b94:	f000 f8e0 	bl	8011d58 <__multadd>
 8011b98:	4680      	mov	r8, r0
 8011b9a:	4607      	mov	r7, r0
 8011b9c:	f109 0901 	add.w	r9, r9, #1
 8011ba0:	e772      	b.n	8011a88 <_dtoa_r+0x9f0>
 8011ba2:	f000 f8d9 	bl	8011d58 <__multadd>
 8011ba6:	4639      	mov	r1, r7
 8011ba8:	4680      	mov	r8, r0
 8011baa:	2300      	movs	r3, #0
 8011bac:	220a      	movs	r2, #10
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 f8d2 	bl	8011d58 <__multadd>
 8011bb4:	4607      	mov	r7, r0
 8011bb6:	e7f1      	b.n	8011b9c <_dtoa_r+0xb04>
 8011bb8:	9b03      	ldr	r3, [sp, #12]
 8011bba:	9302      	str	r3, [sp, #8]
 8011bbc:	9d01      	ldr	r5, [sp, #4]
 8011bbe:	ee18 0a10 	vmov	r0, s16
 8011bc2:	4631      	mov	r1, r6
 8011bc4:	f7ff f9dc 	bl	8010f80 <quorem>
 8011bc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011bcc:	9b01      	ldr	r3, [sp, #4]
 8011bce:	f805 ab01 	strb.w	sl, [r5], #1
 8011bd2:	1aea      	subs	r2, r5, r3
 8011bd4:	9b02      	ldr	r3, [sp, #8]
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	dd09      	ble.n	8011bee <_dtoa_r+0xb56>
 8011bda:	ee18 1a10 	vmov	r1, s16
 8011bde:	2300      	movs	r3, #0
 8011be0:	220a      	movs	r2, #10
 8011be2:	4620      	mov	r0, r4
 8011be4:	f000 f8b8 	bl	8011d58 <__multadd>
 8011be8:	ee08 0a10 	vmov	s16, r0
 8011bec:	e7e7      	b.n	8011bbe <_dtoa_r+0xb26>
 8011bee:	9b02      	ldr	r3, [sp, #8]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	bfc8      	it	gt
 8011bf4:	461d      	movgt	r5, r3
 8011bf6:	9b01      	ldr	r3, [sp, #4]
 8011bf8:	bfd8      	it	le
 8011bfa:	2501      	movle	r5, #1
 8011bfc:	441d      	add	r5, r3
 8011bfe:	f04f 0800 	mov.w	r8, #0
 8011c02:	ee18 1a10 	vmov	r1, s16
 8011c06:	2201      	movs	r2, #1
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f000 fa55 	bl	80120b8 <__lshift>
 8011c0e:	4631      	mov	r1, r6
 8011c10:	ee08 0a10 	vmov	s16, r0
 8011c14:	f000 fac0 	bl	8012198 <__mcmp>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	dc91      	bgt.n	8011b40 <_dtoa_r+0xaa8>
 8011c1c:	d102      	bne.n	8011c24 <_dtoa_r+0xb8c>
 8011c1e:	f01a 0f01 	tst.w	sl, #1
 8011c22:	d18d      	bne.n	8011b40 <_dtoa_r+0xaa8>
 8011c24:	462b      	mov	r3, r5
 8011c26:	461d      	mov	r5, r3
 8011c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c2c:	2a30      	cmp	r2, #48	; 0x30
 8011c2e:	d0fa      	beq.n	8011c26 <_dtoa_r+0xb8e>
 8011c30:	e6d7      	b.n	80119e2 <_dtoa_r+0x94a>
 8011c32:	9a01      	ldr	r2, [sp, #4]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d184      	bne.n	8011b42 <_dtoa_r+0xaaa>
 8011c38:	9b00      	ldr	r3, [sp, #0]
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	2331      	movs	r3, #49	; 0x31
 8011c40:	7013      	strb	r3, [r2, #0]
 8011c42:	e6ce      	b.n	80119e2 <_dtoa_r+0x94a>
 8011c44:	4b09      	ldr	r3, [pc, #36]	; (8011c6c <_dtoa_r+0xbd4>)
 8011c46:	f7ff ba95 	b.w	8011174 <_dtoa_r+0xdc>
 8011c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f47f aa6e 	bne.w	801112e <_dtoa_r+0x96>
 8011c52:	4b07      	ldr	r3, [pc, #28]	; (8011c70 <_dtoa_r+0xbd8>)
 8011c54:	f7ff ba8e 	b.w	8011174 <_dtoa_r+0xdc>
 8011c58:	9b02      	ldr	r3, [sp, #8]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	dcae      	bgt.n	8011bbc <_dtoa_r+0xb24>
 8011c5e:	9b06      	ldr	r3, [sp, #24]
 8011c60:	2b02      	cmp	r3, #2
 8011c62:	f73f aea8 	bgt.w	80119b6 <_dtoa_r+0x91e>
 8011c66:	e7a9      	b.n	8011bbc <_dtoa_r+0xb24>
 8011c68:	08014e63 	.word	0x08014e63
 8011c6c:	08014dc0 	.word	0x08014dc0
 8011c70:	08014de4 	.word	0x08014de4

08011c74 <_localeconv_r>:
 8011c74:	4800      	ldr	r0, [pc, #0]	; (8011c78 <_localeconv_r+0x4>)
 8011c76:	4770      	bx	lr
 8011c78:	200001c0 	.word	0x200001c0

08011c7c <__malloc_lock>:
 8011c7c:	4801      	ldr	r0, [pc, #4]	; (8011c84 <__malloc_lock+0x8>)
 8011c7e:	f000 bd30 	b.w	80126e2 <__retarget_lock_acquire_recursive>
 8011c82:	bf00      	nop
 8011c84:	200063c4 	.word	0x200063c4

08011c88 <__malloc_unlock>:
 8011c88:	4801      	ldr	r0, [pc, #4]	; (8011c90 <__malloc_unlock+0x8>)
 8011c8a:	f000 bd2b 	b.w	80126e4 <__retarget_lock_release_recursive>
 8011c8e:	bf00      	nop
 8011c90:	200063c4 	.word	0x200063c4

08011c94 <_Balloc>:
 8011c94:	b570      	push	{r4, r5, r6, lr}
 8011c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c98:	4604      	mov	r4, r0
 8011c9a:	460d      	mov	r5, r1
 8011c9c:	b976      	cbnz	r6, 8011cbc <_Balloc+0x28>
 8011c9e:	2010      	movs	r0, #16
 8011ca0:	f7fe fbd6 	bl	8010450 <malloc>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	6260      	str	r0, [r4, #36]	; 0x24
 8011ca8:	b920      	cbnz	r0, 8011cb4 <_Balloc+0x20>
 8011caa:	4b18      	ldr	r3, [pc, #96]	; (8011d0c <_Balloc+0x78>)
 8011cac:	4818      	ldr	r0, [pc, #96]	; (8011d10 <_Balloc+0x7c>)
 8011cae:	2166      	movs	r1, #102	; 0x66
 8011cb0:	f000 fce6 	bl	8012680 <__assert_func>
 8011cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cb8:	6006      	str	r6, [r0, #0]
 8011cba:	60c6      	str	r6, [r0, #12]
 8011cbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011cbe:	68f3      	ldr	r3, [r6, #12]
 8011cc0:	b183      	cbz	r3, 8011ce4 <_Balloc+0x50>
 8011cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cc4:	68db      	ldr	r3, [r3, #12]
 8011cc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cca:	b9b8      	cbnz	r0, 8011cfc <_Balloc+0x68>
 8011ccc:	2101      	movs	r1, #1
 8011cce:	fa01 f605 	lsl.w	r6, r1, r5
 8011cd2:	1d72      	adds	r2, r6, #5
 8011cd4:	0092      	lsls	r2, r2, #2
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f000 fb60 	bl	801239c <_calloc_r>
 8011cdc:	b160      	cbz	r0, 8011cf8 <_Balloc+0x64>
 8011cde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011ce2:	e00e      	b.n	8011d02 <_Balloc+0x6e>
 8011ce4:	2221      	movs	r2, #33	; 0x21
 8011ce6:	2104      	movs	r1, #4
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f000 fb57 	bl	801239c <_calloc_r>
 8011cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cf0:	60f0      	str	r0, [r6, #12]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1e4      	bne.n	8011cc2 <_Balloc+0x2e>
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	bd70      	pop	{r4, r5, r6, pc}
 8011cfc:	6802      	ldr	r2, [r0, #0]
 8011cfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d02:	2300      	movs	r3, #0
 8011d04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d08:	e7f7      	b.n	8011cfa <_Balloc+0x66>
 8011d0a:	bf00      	nop
 8011d0c:	08014df1 	.word	0x08014df1
 8011d10:	08014e74 	.word	0x08014e74

08011d14 <_Bfree>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d18:	4605      	mov	r5, r0
 8011d1a:	460c      	mov	r4, r1
 8011d1c:	b976      	cbnz	r6, 8011d3c <_Bfree+0x28>
 8011d1e:	2010      	movs	r0, #16
 8011d20:	f7fe fb96 	bl	8010450 <malloc>
 8011d24:	4602      	mov	r2, r0
 8011d26:	6268      	str	r0, [r5, #36]	; 0x24
 8011d28:	b920      	cbnz	r0, 8011d34 <_Bfree+0x20>
 8011d2a:	4b09      	ldr	r3, [pc, #36]	; (8011d50 <_Bfree+0x3c>)
 8011d2c:	4809      	ldr	r0, [pc, #36]	; (8011d54 <_Bfree+0x40>)
 8011d2e:	218a      	movs	r1, #138	; 0x8a
 8011d30:	f000 fca6 	bl	8012680 <__assert_func>
 8011d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d38:	6006      	str	r6, [r0, #0]
 8011d3a:	60c6      	str	r6, [r0, #12]
 8011d3c:	b13c      	cbz	r4, 8011d4e <_Bfree+0x3a>
 8011d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d40:	6862      	ldr	r2, [r4, #4]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d48:	6021      	str	r1, [r4, #0]
 8011d4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}
 8011d50:	08014df1 	.word	0x08014df1
 8011d54:	08014e74 	.word	0x08014e74

08011d58 <__multadd>:
 8011d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d5c:	690d      	ldr	r5, [r1, #16]
 8011d5e:	4607      	mov	r7, r0
 8011d60:	460c      	mov	r4, r1
 8011d62:	461e      	mov	r6, r3
 8011d64:	f101 0c14 	add.w	ip, r1, #20
 8011d68:	2000      	movs	r0, #0
 8011d6a:	f8dc 3000 	ldr.w	r3, [ip]
 8011d6e:	b299      	uxth	r1, r3
 8011d70:	fb02 6101 	mla	r1, r2, r1, r6
 8011d74:	0c1e      	lsrs	r6, r3, #16
 8011d76:	0c0b      	lsrs	r3, r1, #16
 8011d78:	fb02 3306 	mla	r3, r2, r6, r3
 8011d7c:	b289      	uxth	r1, r1
 8011d7e:	3001      	adds	r0, #1
 8011d80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d84:	4285      	cmp	r5, r0
 8011d86:	f84c 1b04 	str.w	r1, [ip], #4
 8011d8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d8e:	dcec      	bgt.n	8011d6a <__multadd+0x12>
 8011d90:	b30e      	cbz	r6, 8011dd6 <__multadd+0x7e>
 8011d92:	68a3      	ldr	r3, [r4, #8]
 8011d94:	42ab      	cmp	r3, r5
 8011d96:	dc19      	bgt.n	8011dcc <__multadd+0x74>
 8011d98:	6861      	ldr	r1, [r4, #4]
 8011d9a:	4638      	mov	r0, r7
 8011d9c:	3101      	adds	r1, #1
 8011d9e:	f7ff ff79 	bl	8011c94 <_Balloc>
 8011da2:	4680      	mov	r8, r0
 8011da4:	b928      	cbnz	r0, 8011db2 <__multadd+0x5a>
 8011da6:	4602      	mov	r2, r0
 8011da8:	4b0c      	ldr	r3, [pc, #48]	; (8011ddc <__multadd+0x84>)
 8011daa:	480d      	ldr	r0, [pc, #52]	; (8011de0 <__multadd+0x88>)
 8011dac:	21b5      	movs	r1, #181	; 0xb5
 8011dae:	f000 fc67 	bl	8012680 <__assert_func>
 8011db2:	6922      	ldr	r2, [r4, #16]
 8011db4:	3202      	adds	r2, #2
 8011db6:	f104 010c 	add.w	r1, r4, #12
 8011dba:	0092      	lsls	r2, r2, #2
 8011dbc:	300c      	adds	r0, #12
 8011dbe:	f7fe fb4f 	bl	8010460 <memcpy>
 8011dc2:	4621      	mov	r1, r4
 8011dc4:	4638      	mov	r0, r7
 8011dc6:	f7ff ffa5 	bl	8011d14 <_Bfree>
 8011dca:	4644      	mov	r4, r8
 8011dcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011dd0:	3501      	adds	r5, #1
 8011dd2:	615e      	str	r6, [r3, #20]
 8011dd4:	6125      	str	r5, [r4, #16]
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ddc:	08014e63 	.word	0x08014e63
 8011de0:	08014e74 	.word	0x08014e74

08011de4 <__hi0bits>:
 8011de4:	0c03      	lsrs	r3, r0, #16
 8011de6:	041b      	lsls	r3, r3, #16
 8011de8:	b9d3      	cbnz	r3, 8011e20 <__hi0bits+0x3c>
 8011dea:	0400      	lsls	r0, r0, #16
 8011dec:	2310      	movs	r3, #16
 8011dee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011df2:	bf04      	itt	eq
 8011df4:	0200      	lsleq	r0, r0, #8
 8011df6:	3308      	addeq	r3, #8
 8011df8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011dfc:	bf04      	itt	eq
 8011dfe:	0100      	lsleq	r0, r0, #4
 8011e00:	3304      	addeq	r3, #4
 8011e02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011e06:	bf04      	itt	eq
 8011e08:	0080      	lsleq	r0, r0, #2
 8011e0a:	3302      	addeq	r3, #2
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	db05      	blt.n	8011e1c <__hi0bits+0x38>
 8011e10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011e14:	f103 0301 	add.w	r3, r3, #1
 8011e18:	bf08      	it	eq
 8011e1a:	2320      	moveq	r3, #32
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	4770      	bx	lr
 8011e20:	2300      	movs	r3, #0
 8011e22:	e7e4      	b.n	8011dee <__hi0bits+0xa>

08011e24 <__lo0bits>:
 8011e24:	6803      	ldr	r3, [r0, #0]
 8011e26:	f013 0207 	ands.w	r2, r3, #7
 8011e2a:	4601      	mov	r1, r0
 8011e2c:	d00b      	beq.n	8011e46 <__lo0bits+0x22>
 8011e2e:	07da      	lsls	r2, r3, #31
 8011e30:	d423      	bmi.n	8011e7a <__lo0bits+0x56>
 8011e32:	0798      	lsls	r0, r3, #30
 8011e34:	bf49      	itett	mi
 8011e36:	085b      	lsrmi	r3, r3, #1
 8011e38:	089b      	lsrpl	r3, r3, #2
 8011e3a:	2001      	movmi	r0, #1
 8011e3c:	600b      	strmi	r3, [r1, #0]
 8011e3e:	bf5c      	itt	pl
 8011e40:	600b      	strpl	r3, [r1, #0]
 8011e42:	2002      	movpl	r0, #2
 8011e44:	4770      	bx	lr
 8011e46:	b298      	uxth	r0, r3
 8011e48:	b9a8      	cbnz	r0, 8011e76 <__lo0bits+0x52>
 8011e4a:	0c1b      	lsrs	r3, r3, #16
 8011e4c:	2010      	movs	r0, #16
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	b90a      	cbnz	r2, 8011e56 <__lo0bits+0x32>
 8011e52:	3008      	adds	r0, #8
 8011e54:	0a1b      	lsrs	r3, r3, #8
 8011e56:	071a      	lsls	r2, r3, #28
 8011e58:	bf04      	itt	eq
 8011e5a:	091b      	lsreq	r3, r3, #4
 8011e5c:	3004      	addeq	r0, #4
 8011e5e:	079a      	lsls	r2, r3, #30
 8011e60:	bf04      	itt	eq
 8011e62:	089b      	lsreq	r3, r3, #2
 8011e64:	3002      	addeq	r0, #2
 8011e66:	07da      	lsls	r2, r3, #31
 8011e68:	d403      	bmi.n	8011e72 <__lo0bits+0x4e>
 8011e6a:	085b      	lsrs	r3, r3, #1
 8011e6c:	f100 0001 	add.w	r0, r0, #1
 8011e70:	d005      	beq.n	8011e7e <__lo0bits+0x5a>
 8011e72:	600b      	str	r3, [r1, #0]
 8011e74:	4770      	bx	lr
 8011e76:	4610      	mov	r0, r2
 8011e78:	e7e9      	b.n	8011e4e <__lo0bits+0x2a>
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	4770      	bx	lr
 8011e7e:	2020      	movs	r0, #32
 8011e80:	4770      	bx	lr
	...

08011e84 <__i2b>:
 8011e84:	b510      	push	{r4, lr}
 8011e86:	460c      	mov	r4, r1
 8011e88:	2101      	movs	r1, #1
 8011e8a:	f7ff ff03 	bl	8011c94 <_Balloc>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	b928      	cbnz	r0, 8011e9e <__i2b+0x1a>
 8011e92:	4b05      	ldr	r3, [pc, #20]	; (8011ea8 <__i2b+0x24>)
 8011e94:	4805      	ldr	r0, [pc, #20]	; (8011eac <__i2b+0x28>)
 8011e96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011e9a:	f000 fbf1 	bl	8012680 <__assert_func>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	6144      	str	r4, [r0, #20]
 8011ea2:	6103      	str	r3, [r0, #16]
 8011ea4:	bd10      	pop	{r4, pc}
 8011ea6:	bf00      	nop
 8011ea8:	08014e63 	.word	0x08014e63
 8011eac:	08014e74 	.word	0x08014e74

08011eb0 <__multiply>:
 8011eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb4:	4691      	mov	r9, r2
 8011eb6:	690a      	ldr	r2, [r1, #16]
 8011eb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	bfb8      	it	lt
 8011ec0:	460b      	movlt	r3, r1
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	bfbc      	itt	lt
 8011ec6:	464c      	movlt	r4, r9
 8011ec8:	4699      	movlt	r9, r3
 8011eca:	6927      	ldr	r7, [r4, #16]
 8011ecc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011ed0:	68a3      	ldr	r3, [r4, #8]
 8011ed2:	6861      	ldr	r1, [r4, #4]
 8011ed4:	eb07 060a 	add.w	r6, r7, sl
 8011ed8:	42b3      	cmp	r3, r6
 8011eda:	b085      	sub	sp, #20
 8011edc:	bfb8      	it	lt
 8011ede:	3101      	addlt	r1, #1
 8011ee0:	f7ff fed8 	bl	8011c94 <_Balloc>
 8011ee4:	b930      	cbnz	r0, 8011ef4 <__multiply+0x44>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	4b44      	ldr	r3, [pc, #272]	; (8011ffc <__multiply+0x14c>)
 8011eea:	4845      	ldr	r0, [pc, #276]	; (8012000 <__multiply+0x150>)
 8011eec:	f240 115d 	movw	r1, #349	; 0x15d
 8011ef0:	f000 fbc6 	bl	8012680 <__assert_func>
 8011ef4:	f100 0514 	add.w	r5, r0, #20
 8011ef8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011efc:	462b      	mov	r3, r5
 8011efe:	2200      	movs	r2, #0
 8011f00:	4543      	cmp	r3, r8
 8011f02:	d321      	bcc.n	8011f48 <__multiply+0x98>
 8011f04:	f104 0314 	add.w	r3, r4, #20
 8011f08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011f0c:	f109 0314 	add.w	r3, r9, #20
 8011f10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011f14:	9202      	str	r2, [sp, #8]
 8011f16:	1b3a      	subs	r2, r7, r4
 8011f18:	3a15      	subs	r2, #21
 8011f1a:	f022 0203 	bic.w	r2, r2, #3
 8011f1e:	3204      	adds	r2, #4
 8011f20:	f104 0115 	add.w	r1, r4, #21
 8011f24:	428f      	cmp	r7, r1
 8011f26:	bf38      	it	cc
 8011f28:	2204      	movcc	r2, #4
 8011f2a:	9201      	str	r2, [sp, #4]
 8011f2c:	9a02      	ldr	r2, [sp, #8]
 8011f2e:	9303      	str	r3, [sp, #12]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d80c      	bhi.n	8011f4e <__multiply+0x9e>
 8011f34:	2e00      	cmp	r6, #0
 8011f36:	dd03      	ble.n	8011f40 <__multiply+0x90>
 8011f38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d05a      	beq.n	8011ff6 <__multiply+0x146>
 8011f40:	6106      	str	r6, [r0, #16]
 8011f42:	b005      	add	sp, #20
 8011f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f48:	f843 2b04 	str.w	r2, [r3], #4
 8011f4c:	e7d8      	b.n	8011f00 <__multiply+0x50>
 8011f4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f52:	f1ba 0f00 	cmp.w	sl, #0
 8011f56:	d024      	beq.n	8011fa2 <__multiply+0xf2>
 8011f58:	f104 0e14 	add.w	lr, r4, #20
 8011f5c:	46a9      	mov	r9, r5
 8011f5e:	f04f 0c00 	mov.w	ip, #0
 8011f62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011f66:	f8d9 1000 	ldr.w	r1, [r9]
 8011f6a:	fa1f fb82 	uxth.w	fp, r2
 8011f6e:	b289      	uxth	r1, r1
 8011f70:	fb0a 110b 	mla	r1, sl, fp, r1
 8011f74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011f78:	f8d9 2000 	ldr.w	r2, [r9]
 8011f7c:	4461      	add	r1, ip
 8011f7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f82:	fb0a c20b 	mla	r2, sl, fp, ip
 8011f86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011f8a:	b289      	uxth	r1, r1
 8011f8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011f90:	4577      	cmp	r7, lr
 8011f92:	f849 1b04 	str.w	r1, [r9], #4
 8011f96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f9a:	d8e2      	bhi.n	8011f62 <__multiply+0xb2>
 8011f9c:	9a01      	ldr	r2, [sp, #4]
 8011f9e:	f845 c002 	str.w	ip, [r5, r2]
 8011fa2:	9a03      	ldr	r2, [sp, #12]
 8011fa4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011fa8:	3304      	adds	r3, #4
 8011faa:	f1b9 0f00 	cmp.w	r9, #0
 8011fae:	d020      	beq.n	8011ff2 <__multiply+0x142>
 8011fb0:	6829      	ldr	r1, [r5, #0]
 8011fb2:	f104 0c14 	add.w	ip, r4, #20
 8011fb6:	46ae      	mov	lr, r5
 8011fb8:	f04f 0a00 	mov.w	sl, #0
 8011fbc:	f8bc b000 	ldrh.w	fp, [ip]
 8011fc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011fc4:	fb09 220b 	mla	r2, r9, fp, r2
 8011fc8:	4492      	add	sl, r2
 8011fca:	b289      	uxth	r1, r1
 8011fcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011fd0:	f84e 1b04 	str.w	r1, [lr], #4
 8011fd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011fd8:	f8be 1000 	ldrh.w	r1, [lr]
 8011fdc:	0c12      	lsrs	r2, r2, #16
 8011fde:	fb09 1102 	mla	r1, r9, r2, r1
 8011fe2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011fe6:	4567      	cmp	r7, ip
 8011fe8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011fec:	d8e6      	bhi.n	8011fbc <__multiply+0x10c>
 8011fee:	9a01      	ldr	r2, [sp, #4]
 8011ff0:	50a9      	str	r1, [r5, r2]
 8011ff2:	3504      	adds	r5, #4
 8011ff4:	e79a      	b.n	8011f2c <__multiply+0x7c>
 8011ff6:	3e01      	subs	r6, #1
 8011ff8:	e79c      	b.n	8011f34 <__multiply+0x84>
 8011ffa:	bf00      	nop
 8011ffc:	08014e63 	.word	0x08014e63
 8012000:	08014e74 	.word	0x08014e74

08012004 <__pow5mult>:
 8012004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012008:	4615      	mov	r5, r2
 801200a:	f012 0203 	ands.w	r2, r2, #3
 801200e:	4606      	mov	r6, r0
 8012010:	460f      	mov	r7, r1
 8012012:	d007      	beq.n	8012024 <__pow5mult+0x20>
 8012014:	4c25      	ldr	r4, [pc, #148]	; (80120ac <__pow5mult+0xa8>)
 8012016:	3a01      	subs	r2, #1
 8012018:	2300      	movs	r3, #0
 801201a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801201e:	f7ff fe9b 	bl	8011d58 <__multadd>
 8012022:	4607      	mov	r7, r0
 8012024:	10ad      	asrs	r5, r5, #2
 8012026:	d03d      	beq.n	80120a4 <__pow5mult+0xa0>
 8012028:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801202a:	b97c      	cbnz	r4, 801204c <__pow5mult+0x48>
 801202c:	2010      	movs	r0, #16
 801202e:	f7fe fa0f 	bl	8010450 <malloc>
 8012032:	4602      	mov	r2, r0
 8012034:	6270      	str	r0, [r6, #36]	; 0x24
 8012036:	b928      	cbnz	r0, 8012044 <__pow5mult+0x40>
 8012038:	4b1d      	ldr	r3, [pc, #116]	; (80120b0 <__pow5mult+0xac>)
 801203a:	481e      	ldr	r0, [pc, #120]	; (80120b4 <__pow5mult+0xb0>)
 801203c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012040:	f000 fb1e 	bl	8012680 <__assert_func>
 8012044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012048:	6004      	str	r4, [r0, #0]
 801204a:	60c4      	str	r4, [r0, #12]
 801204c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012054:	b94c      	cbnz	r4, 801206a <__pow5mult+0x66>
 8012056:	f240 2171 	movw	r1, #625	; 0x271
 801205a:	4630      	mov	r0, r6
 801205c:	f7ff ff12 	bl	8011e84 <__i2b>
 8012060:	2300      	movs	r3, #0
 8012062:	f8c8 0008 	str.w	r0, [r8, #8]
 8012066:	4604      	mov	r4, r0
 8012068:	6003      	str	r3, [r0, #0]
 801206a:	f04f 0900 	mov.w	r9, #0
 801206e:	07eb      	lsls	r3, r5, #31
 8012070:	d50a      	bpl.n	8012088 <__pow5mult+0x84>
 8012072:	4639      	mov	r1, r7
 8012074:	4622      	mov	r2, r4
 8012076:	4630      	mov	r0, r6
 8012078:	f7ff ff1a 	bl	8011eb0 <__multiply>
 801207c:	4639      	mov	r1, r7
 801207e:	4680      	mov	r8, r0
 8012080:	4630      	mov	r0, r6
 8012082:	f7ff fe47 	bl	8011d14 <_Bfree>
 8012086:	4647      	mov	r7, r8
 8012088:	106d      	asrs	r5, r5, #1
 801208a:	d00b      	beq.n	80120a4 <__pow5mult+0xa0>
 801208c:	6820      	ldr	r0, [r4, #0]
 801208e:	b938      	cbnz	r0, 80120a0 <__pow5mult+0x9c>
 8012090:	4622      	mov	r2, r4
 8012092:	4621      	mov	r1, r4
 8012094:	4630      	mov	r0, r6
 8012096:	f7ff ff0b 	bl	8011eb0 <__multiply>
 801209a:	6020      	str	r0, [r4, #0]
 801209c:	f8c0 9000 	str.w	r9, [r0]
 80120a0:	4604      	mov	r4, r0
 80120a2:	e7e4      	b.n	801206e <__pow5mult+0x6a>
 80120a4:	4638      	mov	r0, r7
 80120a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120aa:	bf00      	nop
 80120ac:	08014fc0 	.word	0x08014fc0
 80120b0:	08014df1 	.word	0x08014df1
 80120b4:	08014e74 	.word	0x08014e74

080120b8 <__lshift>:
 80120b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120bc:	460c      	mov	r4, r1
 80120be:	6849      	ldr	r1, [r1, #4]
 80120c0:	6923      	ldr	r3, [r4, #16]
 80120c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120c6:	68a3      	ldr	r3, [r4, #8]
 80120c8:	4607      	mov	r7, r0
 80120ca:	4691      	mov	r9, r2
 80120cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120d0:	f108 0601 	add.w	r6, r8, #1
 80120d4:	42b3      	cmp	r3, r6
 80120d6:	db0b      	blt.n	80120f0 <__lshift+0x38>
 80120d8:	4638      	mov	r0, r7
 80120da:	f7ff fddb 	bl	8011c94 <_Balloc>
 80120de:	4605      	mov	r5, r0
 80120e0:	b948      	cbnz	r0, 80120f6 <__lshift+0x3e>
 80120e2:	4602      	mov	r2, r0
 80120e4:	4b2a      	ldr	r3, [pc, #168]	; (8012190 <__lshift+0xd8>)
 80120e6:	482b      	ldr	r0, [pc, #172]	; (8012194 <__lshift+0xdc>)
 80120e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80120ec:	f000 fac8 	bl	8012680 <__assert_func>
 80120f0:	3101      	adds	r1, #1
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	e7ee      	b.n	80120d4 <__lshift+0x1c>
 80120f6:	2300      	movs	r3, #0
 80120f8:	f100 0114 	add.w	r1, r0, #20
 80120fc:	f100 0210 	add.w	r2, r0, #16
 8012100:	4618      	mov	r0, r3
 8012102:	4553      	cmp	r3, sl
 8012104:	db37      	blt.n	8012176 <__lshift+0xbe>
 8012106:	6920      	ldr	r0, [r4, #16]
 8012108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801210c:	f104 0314 	add.w	r3, r4, #20
 8012110:	f019 091f 	ands.w	r9, r9, #31
 8012114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012118:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801211c:	d02f      	beq.n	801217e <__lshift+0xc6>
 801211e:	f1c9 0e20 	rsb	lr, r9, #32
 8012122:	468a      	mov	sl, r1
 8012124:	f04f 0c00 	mov.w	ip, #0
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	fa02 f209 	lsl.w	r2, r2, r9
 801212e:	ea42 020c 	orr.w	r2, r2, ip
 8012132:	f84a 2b04 	str.w	r2, [sl], #4
 8012136:	f853 2b04 	ldr.w	r2, [r3], #4
 801213a:	4298      	cmp	r0, r3
 801213c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012140:	d8f2      	bhi.n	8012128 <__lshift+0x70>
 8012142:	1b03      	subs	r3, r0, r4
 8012144:	3b15      	subs	r3, #21
 8012146:	f023 0303 	bic.w	r3, r3, #3
 801214a:	3304      	adds	r3, #4
 801214c:	f104 0215 	add.w	r2, r4, #21
 8012150:	4290      	cmp	r0, r2
 8012152:	bf38      	it	cc
 8012154:	2304      	movcc	r3, #4
 8012156:	f841 c003 	str.w	ip, [r1, r3]
 801215a:	f1bc 0f00 	cmp.w	ip, #0
 801215e:	d001      	beq.n	8012164 <__lshift+0xac>
 8012160:	f108 0602 	add.w	r6, r8, #2
 8012164:	3e01      	subs	r6, #1
 8012166:	4638      	mov	r0, r7
 8012168:	612e      	str	r6, [r5, #16]
 801216a:	4621      	mov	r1, r4
 801216c:	f7ff fdd2 	bl	8011d14 <_Bfree>
 8012170:	4628      	mov	r0, r5
 8012172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012176:	f842 0f04 	str.w	r0, [r2, #4]!
 801217a:	3301      	adds	r3, #1
 801217c:	e7c1      	b.n	8012102 <__lshift+0x4a>
 801217e:	3904      	subs	r1, #4
 8012180:	f853 2b04 	ldr.w	r2, [r3], #4
 8012184:	f841 2f04 	str.w	r2, [r1, #4]!
 8012188:	4298      	cmp	r0, r3
 801218a:	d8f9      	bhi.n	8012180 <__lshift+0xc8>
 801218c:	e7ea      	b.n	8012164 <__lshift+0xac>
 801218e:	bf00      	nop
 8012190:	08014e63 	.word	0x08014e63
 8012194:	08014e74 	.word	0x08014e74

08012198 <__mcmp>:
 8012198:	b530      	push	{r4, r5, lr}
 801219a:	6902      	ldr	r2, [r0, #16]
 801219c:	690c      	ldr	r4, [r1, #16]
 801219e:	1b12      	subs	r2, r2, r4
 80121a0:	d10e      	bne.n	80121c0 <__mcmp+0x28>
 80121a2:	f100 0314 	add.w	r3, r0, #20
 80121a6:	3114      	adds	r1, #20
 80121a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80121ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80121b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80121b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80121b8:	42a5      	cmp	r5, r4
 80121ba:	d003      	beq.n	80121c4 <__mcmp+0x2c>
 80121bc:	d305      	bcc.n	80121ca <__mcmp+0x32>
 80121be:	2201      	movs	r2, #1
 80121c0:	4610      	mov	r0, r2
 80121c2:	bd30      	pop	{r4, r5, pc}
 80121c4:	4283      	cmp	r3, r0
 80121c6:	d3f3      	bcc.n	80121b0 <__mcmp+0x18>
 80121c8:	e7fa      	b.n	80121c0 <__mcmp+0x28>
 80121ca:	f04f 32ff 	mov.w	r2, #4294967295
 80121ce:	e7f7      	b.n	80121c0 <__mcmp+0x28>

080121d0 <__mdiff>:
 80121d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d4:	460c      	mov	r4, r1
 80121d6:	4606      	mov	r6, r0
 80121d8:	4611      	mov	r1, r2
 80121da:	4620      	mov	r0, r4
 80121dc:	4690      	mov	r8, r2
 80121de:	f7ff ffdb 	bl	8012198 <__mcmp>
 80121e2:	1e05      	subs	r5, r0, #0
 80121e4:	d110      	bne.n	8012208 <__mdiff+0x38>
 80121e6:	4629      	mov	r1, r5
 80121e8:	4630      	mov	r0, r6
 80121ea:	f7ff fd53 	bl	8011c94 <_Balloc>
 80121ee:	b930      	cbnz	r0, 80121fe <__mdiff+0x2e>
 80121f0:	4b3a      	ldr	r3, [pc, #232]	; (80122dc <__mdiff+0x10c>)
 80121f2:	4602      	mov	r2, r0
 80121f4:	f240 2132 	movw	r1, #562	; 0x232
 80121f8:	4839      	ldr	r0, [pc, #228]	; (80122e0 <__mdiff+0x110>)
 80121fa:	f000 fa41 	bl	8012680 <__assert_func>
 80121fe:	2301      	movs	r3, #1
 8012200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012208:	bfa4      	itt	ge
 801220a:	4643      	movge	r3, r8
 801220c:	46a0      	movge	r8, r4
 801220e:	4630      	mov	r0, r6
 8012210:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012214:	bfa6      	itte	ge
 8012216:	461c      	movge	r4, r3
 8012218:	2500      	movge	r5, #0
 801221a:	2501      	movlt	r5, #1
 801221c:	f7ff fd3a 	bl	8011c94 <_Balloc>
 8012220:	b920      	cbnz	r0, 801222c <__mdiff+0x5c>
 8012222:	4b2e      	ldr	r3, [pc, #184]	; (80122dc <__mdiff+0x10c>)
 8012224:	4602      	mov	r2, r0
 8012226:	f44f 7110 	mov.w	r1, #576	; 0x240
 801222a:	e7e5      	b.n	80121f8 <__mdiff+0x28>
 801222c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012230:	6926      	ldr	r6, [r4, #16]
 8012232:	60c5      	str	r5, [r0, #12]
 8012234:	f104 0914 	add.w	r9, r4, #20
 8012238:	f108 0514 	add.w	r5, r8, #20
 801223c:	f100 0e14 	add.w	lr, r0, #20
 8012240:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012244:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012248:	f108 0210 	add.w	r2, r8, #16
 801224c:	46f2      	mov	sl, lr
 801224e:	2100      	movs	r1, #0
 8012250:	f859 3b04 	ldr.w	r3, [r9], #4
 8012254:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012258:	fa1f f883 	uxth.w	r8, r3
 801225c:	fa11 f18b 	uxtah	r1, r1, fp
 8012260:	0c1b      	lsrs	r3, r3, #16
 8012262:	eba1 0808 	sub.w	r8, r1, r8
 8012266:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801226a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801226e:	fa1f f888 	uxth.w	r8, r8
 8012272:	1419      	asrs	r1, r3, #16
 8012274:	454e      	cmp	r6, r9
 8012276:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801227a:	f84a 3b04 	str.w	r3, [sl], #4
 801227e:	d8e7      	bhi.n	8012250 <__mdiff+0x80>
 8012280:	1b33      	subs	r3, r6, r4
 8012282:	3b15      	subs	r3, #21
 8012284:	f023 0303 	bic.w	r3, r3, #3
 8012288:	3304      	adds	r3, #4
 801228a:	3415      	adds	r4, #21
 801228c:	42a6      	cmp	r6, r4
 801228e:	bf38      	it	cc
 8012290:	2304      	movcc	r3, #4
 8012292:	441d      	add	r5, r3
 8012294:	4473      	add	r3, lr
 8012296:	469e      	mov	lr, r3
 8012298:	462e      	mov	r6, r5
 801229a:	4566      	cmp	r6, ip
 801229c:	d30e      	bcc.n	80122bc <__mdiff+0xec>
 801229e:	f10c 0203 	add.w	r2, ip, #3
 80122a2:	1b52      	subs	r2, r2, r5
 80122a4:	f022 0203 	bic.w	r2, r2, #3
 80122a8:	3d03      	subs	r5, #3
 80122aa:	45ac      	cmp	ip, r5
 80122ac:	bf38      	it	cc
 80122ae:	2200      	movcc	r2, #0
 80122b0:	441a      	add	r2, r3
 80122b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80122b6:	b17b      	cbz	r3, 80122d8 <__mdiff+0x108>
 80122b8:	6107      	str	r7, [r0, #16]
 80122ba:	e7a3      	b.n	8012204 <__mdiff+0x34>
 80122bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80122c0:	fa11 f288 	uxtah	r2, r1, r8
 80122c4:	1414      	asrs	r4, r2, #16
 80122c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80122ca:	b292      	uxth	r2, r2
 80122cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80122d0:	f84e 2b04 	str.w	r2, [lr], #4
 80122d4:	1421      	asrs	r1, r4, #16
 80122d6:	e7e0      	b.n	801229a <__mdiff+0xca>
 80122d8:	3f01      	subs	r7, #1
 80122da:	e7ea      	b.n	80122b2 <__mdiff+0xe2>
 80122dc:	08014e63 	.word	0x08014e63
 80122e0:	08014e74 	.word	0x08014e74

080122e4 <__d2b>:
 80122e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122e8:	4689      	mov	r9, r1
 80122ea:	2101      	movs	r1, #1
 80122ec:	ec57 6b10 	vmov	r6, r7, d0
 80122f0:	4690      	mov	r8, r2
 80122f2:	f7ff fccf 	bl	8011c94 <_Balloc>
 80122f6:	4604      	mov	r4, r0
 80122f8:	b930      	cbnz	r0, 8012308 <__d2b+0x24>
 80122fa:	4602      	mov	r2, r0
 80122fc:	4b25      	ldr	r3, [pc, #148]	; (8012394 <__d2b+0xb0>)
 80122fe:	4826      	ldr	r0, [pc, #152]	; (8012398 <__d2b+0xb4>)
 8012300:	f240 310a 	movw	r1, #778	; 0x30a
 8012304:	f000 f9bc 	bl	8012680 <__assert_func>
 8012308:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801230c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012310:	bb35      	cbnz	r5, 8012360 <__d2b+0x7c>
 8012312:	2e00      	cmp	r6, #0
 8012314:	9301      	str	r3, [sp, #4]
 8012316:	d028      	beq.n	801236a <__d2b+0x86>
 8012318:	4668      	mov	r0, sp
 801231a:	9600      	str	r6, [sp, #0]
 801231c:	f7ff fd82 	bl	8011e24 <__lo0bits>
 8012320:	9900      	ldr	r1, [sp, #0]
 8012322:	b300      	cbz	r0, 8012366 <__d2b+0x82>
 8012324:	9a01      	ldr	r2, [sp, #4]
 8012326:	f1c0 0320 	rsb	r3, r0, #32
 801232a:	fa02 f303 	lsl.w	r3, r2, r3
 801232e:	430b      	orrs	r3, r1
 8012330:	40c2      	lsrs	r2, r0
 8012332:	6163      	str	r3, [r4, #20]
 8012334:	9201      	str	r2, [sp, #4]
 8012336:	9b01      	ldr	r3, [sp, #4]
 8012338:	61a3      	str	r3, [r4, #24]
 801233a:	2b00      	cmp	r3, #0
 801233c:	bf14      	ite	ne
 801233e:	2202      	movne	r2, #2
 8012340:	2201      	moveq	r2, #1
 8012342:	6122      	str	r2, [r4, #16]
 8012344:	b1d5      	cbz	r5, 801237c <__d2b+0x98>
 8012346:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801234a:	4405      	add	r5, r0
 801234c:	f8c9 5000 	str.w	r5, [r9]
 8012350:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012354:	f8c8 0000 	str.w	r0, [r8]
 8012358:	4620      	mov	r0, r4
 801235a:	b003      	add	sp, #12
 801235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012364:	e7d5      	b.n	8012312 <__d2b+0x2e>
 8012366:	6161      	str	r1, [r4, #20]
 8012368:	e7e5      	b.n	8012336 <__d2b+0x52>
 801236a:	a801      	add	r0, sp, #4
 801236c:	f7ff fd5a 	bl	8011e24 <__lo0bits>
 8012370:	9b01      	ldr	r3, [sp, #4]
 8012372:	6163      	str	r3, [r4, #20]
 8012374:	2201      	movs	r2, #1
 8012376:	6122      	str	r2, [r4, #16]
 8012378:	3020      	adds	r0, #32
 801237a:	e7e3      	b.n	8012344 <__d2b+0x60>
 801237c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012380:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012384:	f8c9 0000 	str.w	r0, [r9]
 8012388:	6918      	ldr	r0, [r3, #16]
 801238a:	f7ff fd2b 	bl	8011de4 <__hi0bits>
 801238e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012392:	e7df      	b.n	8012354 <__d2b+0x70>
 8012394:	08014e63 	.word	0x08014e63
 8012398:	08014e74 	.word	0x08014e74

0801239c <_calloc_r>:
 801239c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801239e:	fba1 2402 	umull	r2, r4, r1, r2
 80123a2:	b94c      	cbnz	r4, 80123b8 <_calloc_r+0x1c>
 80123a4:	4611      	mov	r1, r2
 80123a6:	9201      	str	r2, [sp, #4]
 80123a8:	f7fe f8dc 	bl	8010564 <_malloc_r>
 80123ac:	9a01      	ldr	r2, [sp, #4]
 80123ae:	4605      	mov	r5, r0
 80123b0:	b930      	cbnz	r0, 80123c0 <_calloc_r+0x24>
 80123b2:	4628      	mov	r0, r5
 80123b4:	b003      	add	sp, #12
 80123b6:	bd30      	pop	{r4, r5, pc}
 80123b8:	220c      	movs	r2, #12
 80123ba:	6002      	str	r2, [r0, #0]
 80123bc:	2500      	movs	r5, #0
 80123be:	e7f8      	b.n	80123b2 <_calloc_r+0x16>
 80123c0:	4621      	mov	r1, r4
 80123c2:	f7fe f85b 	bl	801047c <memset>
 80123c6:	e7f4      	b.n	80123b2 <_calloc_r+0x16>

080123c8 <__ssputs_r>:
 80123c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123cc:	688e      	ldr	r6, [r1, #8]
 80123ce:	429e      	cmp	r6, r3
 80123d0:	4682      	mov	sl, r0
 80123d2:	460c      	mov	r4, r1
 80123d4:	4690      	mov	r8, r2
 80123d6:	461f      	mov	r7, r3
 80123d8:	d838      	bhi.n	801244c <__ssputs_r+0x84>
 80123da:	898a      	ldrh	r2, [r1, #12]
 80123dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80123e0:	d032      	beq.n	8012448 <__ssputs_r+0x80>
 80123e2:	6825      	ldr	r5, [r4, #0]
 80123e4:	6909      	ldr	r1, [r1, #16]
 80123e6:	eba5 0901 	sub.w	r9, r5, r1
 80123ea:	6965      	ldr	r5, [r4, #20]
 80123ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80123f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80123f4:	3301      	adds	r3, #1
 80123f6:	444b      	add	r3, r9
 80123f8:	106d      	asrs	r5, r5, #1
 80123fa:	429d      	cmp	r5, r3
 80123fc:	bf38      	it	cc
 80123fe:	461d      	movcc	r5, r3
 8012400:	0553      	lsls	r3, r2, #21
 8012402:	d531      	bpl.n	8012468 <__ssputs_r+0xa0>
 8012404:	4629      	mov	r1, r5
 8012406:	f7fe f8ad 	bl	8010564 <_malloc_r>
 801240a:	4606      	mov	r6, r0
 801240c:	b950      	cbnz	r0, 8012424 <__ssputs_r+0x5c>
 801240e:	230c      	movs	r3, #12
 8012410:	f8ca 3000 	str.w	r3, [sl]
 8012414:	89a3      	ldrh	r3, [r4, #12]
 8012416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801241a:	81a3      	strh	r3, [r4, #12]
 801241c:	f04f 30ff 	mov.w	r0, #4294967295
 8012420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012424:	6921      	ldr	r1, [r4, #16]
 8012426:	464a      	mov	r2, r9
 8012428:	f7fe f81a 	bl	8010460 <memcpy>
 801242c:	89a3      	ldrh	r3, [r4, #12]
 801242e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012436:	81a3      	strh	r3, [r4, #12]
 8012438:	6126      	str	r6, [r4, #16]
 801243a:	6165      	str	r5, [r4, #20]
 801243c:	444e      	add	r6, r9
 801243e:	eba5 0509 	sub.w	r5, r5, r9
 8012442:	6026      	str	r6, [r4, #0]
 8012444:	60a5      	str	r5, [r4, #8]
 8012446:	463e      	mov	r6, r7
 8012448:	42be      	cmp	r6, r7
 801244a:	d900      	bls.n	801244e <__ssputs_r+0x86>
 801244c:	463e      	mov	r6, r7
 801244e:	6820      	ldr	r0, [r4, #0]
 8012450:	4632      	mov	r2, r6
 8012452:	4641      	mov	r1, r8
 8012454:	f000 f959 	bl	801270a <memmove>
 8012458:	68a3      	ldr	r3, [r4, #8]
 801245a:	1b9b      	subs	r3, r3, r6
 801245c:	60a3      	str	r3, [r4, #8]
 801245e:	6823      	ldr	r3, [r4, #0]
 8012460:	4433      	add	r3, r6
 8012462:	6023      	str	r3, [r4, #0]
 8012464:	2000      	movs	r0, #0
 8012466:	e7db      	b.n	8012420 <__ssputs_r+0x58>
 8012468:	462a      	mov	r2, r5
 801246a:	f000 f968 	bl	801273e <_realloc_r>
 801246e:	4606      	mov	r6, r0
 8012470:	2800      	cmp	r0, #0
 8012472:	d1e1      	bne.n	8012438 <__ssputs_r+0x70>
 8012474:	6921      	ldr	r1, [r4, #16]
 8012476:	4650      	mov	r0, sl
 8012478:	f7fe f808 	bl	801048c <_free_r>
 801247c:	e7c7      	b.n	801240e <__ssputs_r+0x46>
	...

08012480 <_svfiprintf_r>:
 8012480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012484:	4698      	mov	r8, r3
 8012486:	898b      	ldrh	r3, [r1, #12]
 8012488:	061b      	lsls	r3, r3, #24
 801248a:	b09d      	sub	sp, #116	; 0x74
 801248c:	4607      	mov	r7, r0
 801248e:	460d      	mov	r5, r1
 8012490:	4614      	mov	r4, r2
 8012492:	d50e      	bpl.n	80124b2 <_svfiprintf_r+0x32>
 8012494:	690b      	ldr	r3, [r1, #16]
 8012496:	b963      	cbnz	r3, 80124b2 <_svfiprintf_r+0x32>
 8012498:	2140      	movs	r1, #64	; 0x40
 801249a:	f7fe f863 	bl	8010564 <_malloc_r>
 801249e:	6028      	str	r0, [r5, #0]
 80124a0:	6128      	str	r0, [r5, #16]
 80124a2:	b920      	cbnz	r0, 80124ae <_svfiprintf_r+0x2e>
 80124a4:	230c      	movs	r3, #12
 80124a6:	603b      	str	r3, [r7, #0]
 80124a8:	f04f 30ff 	mov.w	r0, #4294967295
 80124ac:	e0d1      	b.n	8012652 <_svfiprintf_r+0x1d2>
 80124ae:	2340      	movs	r3, #64	; 0x40
 80124b0:	616b      	str	r3, [r5, #20]
 80124b2:	2300      	movs	r3, #0
 80124b4:	9309      	str	r3, [sp, #36]	; 0x24
 80124b6:	2320      	movs	r3, #32
 80124b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80124c0:	2330      	movs	r3, #48	; 0x30
 80124c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801266c <_svfiprintf_r+0x1ec>
 80124c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124ca:	f04f 0901 	mov.w	r9, #1
 80124ce:	4623      	mov	r3, r4
 80124d0:	469a      	mov	sl, r3
 80124d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124d6:	b10a      	cbz	r2, 80124dc <_svfiprintf_r+0x5c>
 80124d8:	2a25      	cmp	r2, #37	; 0x25
 80124da:	d1f9      	bne.n	80124d0 <_svfiprintf_r+0x50>
 80124dc:	ebba 0b04 	subs.w	fp, sl, r4
 80124e0:	d00b      	beq.n	80124fa <_svfiprintf_r+0x7a>
 80124e2:	465b      	mov	r3, fp
 80124e4:	4622      	mov	r2, r4
 80124e6:	4629      	mov	r1, r5
 80124e8:	4638      	mov	r0, r7
 80124ea:	f7ff ff6d 	bl	80123c8 <__ssputs_r>
 80124ee:	3001      	adds	r0, #1
 80124f0:	f000 80aa 	beq.w	8012648 <_svfiprintf_r+0x1c8>
 80124f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124f6:	445a      	add	r2, fp
 80124f8:	9209      	str	r2, [sp, #36]	; 0x24
 80124fa:	f89a 3000 	ldrb.w	r3, [sl]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	f000 80a2 	beq.w	8012648 <_svfiprintf_r+0x1c8>
 8012504:	2300      	movs	r3, #0
 8012506:	f04f 32ff 	mov.w	r2, #4294967295
 801250a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801250e:	f10a 0a01 	add.w	sl, sl, #1
 8012512:	9304      	str	r3, [sp, #16]
 8012514:	9307      	str	r3, [sp, #28]
 8012516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801251a:	931a      	str	r3, [sp, #104]	; 0x68
 801251c:	4654      	mov	r4, sl
 801251e:	2205      	movs	r2, #5
 8012520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012524:	4851      	ldr	r0, [pc, #324]	; (801266c <_svfiprintf_r+0x1ec>)
 8012526:	f7ed fe73 	bl	8000210 <memchr>
 801252a:	9a04      	ldr	r2, [sp, #16]
 801252c:	b9d8      	cbnz	r0, 8012566 <_svfiprintf_r+0xe6>
 801252e:	06d0      	lsls	r0, r2, #27
 8012530:	bf44      	itt	mi
 8012532:	2320      	movmi	r3, #32
 8012534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012538:	0711      	lsls	r1, r2, #28
 801253a:	bf44      	itt	mi
 801253c:	232b      	movmi	r3, #43	; 0x2b
 801253e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012542:	f89a 3000 	ldrb.w	r3, [sl]
 8012546:	2b2a      	cmp	r3, #42	; 0x2a
 8012548:	d015      	beq.n	8012576 <_svfiprintf_r+0xf6>
 801254a:	9a07      	ldr	r2, [sp, #28]
 801254c:	4654      	mov	r4, sl
 801254e:	2000      	movs	r0, #0
 8012550:	f04f 0c0a 	mov.w	ip, #10
 8012554:	4621      	mov	r1, r4
 8012556:	f811 3b01 	ldrb.w	r3, [r1], #1
 801255a:	3b30      	subs	r3, #48	; 0x30
 801255c:	2b09      	cmp	r3, #9
 801255e:	d94e      	bls.n	80125fe <_svfiprintf_r+0x17e>
 8012560:	b1b0      	cbz	r0, 8012590 <_svfiprintf_r+0x110>
 8012562:	9207      	str	r2, [sp, #28]
 8012564:	e014      	b.n	8012590 <_svfiprintf_r+0x110>
 8012566:	eba0 0308 	sub.w	r3, r0, r8
 801256a:	fa09 f303 	lsl.w	r3, r9, r3
 801256e:	4313      	orrs	r3, r2
 8012570:	9304      	str	r3, [sp, #16]
 8012572:	46a2      	mov	sl, r4
 8012574:	e7d2      	b.n	801251c <_svfiprintf_r+0x9c>
 8012576:	9b03      	ldr	r3, [sp, #12]
 8012578:	1d19      	adds	r1, r3, #4
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	9103      	str	r1, [sp, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	bfbb      	ittet	lt
 8012582:	425b      	neglt	r3, r3
 8012584:	f042 0202 	orrlt.w	r2, r2, #2
 8012588:	9307      	strge	r3, [sp, #28]
 801258a:	9307      	strlt	r3, [sp, #28]
 801258c:	bfb8      	it	lt
 801258e:	9204      	strlt	r2, [sp, #16]
 8012590:	7823      	ldrb	r3, [r4, #0]
 8012592:	2b2e      	cmp	r3, #46	; 0x2e
 8012594:	d10c      	bne.n	80125b0 <_svfiprintf_r+0x130>
 8012596:	7863      	ldrb	r3, [r4, #1]
 8012598:	2b2a      	cmp	r3, #42	; 0x2a
 801259a:	d135      	bne.n	8012608 <_svfiprintf_r+0x188>
 801259c:	9b03      	ldr	r3, [sp, #12]
 801259e:	1d1a      	adds	r2, r3, #4
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	9203      	str	r2, [sp, #12]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	bfb8      	it	lt
 80125a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80125ac:	3402      	adds	r4, #2
 80125ae:	9305      	str	r3, [sp, #20]
 80125b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801267c <_svfiprintf_r+0x1fc>
 80125b4:	7821      	ldrb	r1, [r4, #0]
 80125b6:	2203      	movs	r2, #3
 80125b8:	4650      	mov	r0, sl
 80125ba:	f7ed fe29 	bl	8000210 <memchr>
 80125be:	b140      	cbz	r0, 80125d2 <_svfiprintf_r+0x152>
 80125c0:	2340      	movs	r3, #64	; 0x40
 80125c2:	eba0 000a 	sub.w	r0, r0, sl
 80125c6:	fa03 f000 	lsl.w	r0, r3, r0
 80125ca:	9b04      	ldr	r3, [sp, #16]
 80125cc:	4303      	orrs	r3, r0
 80125ce:	3401      	adds	r4, #1
 80125d0:	9304      	str	r3, [sp, #16]
 80125d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125d6:	4826      	ldr	r0, [pc, #152]	; (8012670 <_svfiprintf_r+0x1f0>)
 80125d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125dc:	2206      	movs	r2, #6
 80125de:	f7ed fe17 	bl	8000210 <memchr>
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d038      	beq.n	8012658 <_svfiprintf_r+0x1d8>
 80125e6:	4b23      	ldr	r3, [pc, #140]	; (8012674 <_svfiprintf_r+0x1f4>)
 80125e8:	bb1b      	cbnz	r3, 8012632 <_svfiprintf_r+0x1b2>
 80125ea:	9b03      	ldr	r3, [sp, #12]
 80125ec:	3307      	adds	r3, #7
 80125ee:	f023 0307 	bic.w	r3, r3, #7
 80125f2:	3308      	adds	r3, #8
 80125f4:	9303      	str	r3, [sp, #12]
 80125f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f8:	4433      	add	r3, r6
 80125fa:	9309      	str	r3, [sp, #36]	; 0x24
 80125fc:	e767      	b.n	80124ce <_svfiprintf_r+0x4e>
 80125fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012602:	460c      	mov	r4, r1
 8012604:	2001      	movs	r0, #1
 8012606:	e7a5      	b.n	8012554 <_svfiprintf_r+0xd4>
 8012608:	2300      	movs	r3, #0
 801260a:	3401      	adds	r4, #1
 801260c:	9305      	str	r3, [sp, #20]
 801260e:	4619      	mov	r1, r3
 8012610:	f04f 0c0a 	mov.w	ip, #10
 8012614:	4620      	mov	r0, r4
 8012616:	f810 2b01 	ldrb.w	r2, [r0], #1
 801261a:	3a30      	subs	r2, #48	; 0x30
 801261c:	2a09      	cmp	r2, #9
 801261e:	d903      	bls.n	8012628 <_svfiprintf_r+0x1a8>
 8012620:	2b00      	cmp	r3, #0
 8012622:	d0c5      	beq.n	80125b0 <_svfiprintf_r+0x130>
 8012624:	9105      	str	r1, [sp, #20]
 8012626:	e7c3      	b.n	80125b0 <_svfiprintf_r+0x130>
 8012628:	fb0c 2101 	mla	r1, ip, r1, r2
 801262c:	4604      	mov	r4, r0
 801262e:	2301      	movs	r3, #1
 8012630:	e7f0      	b.n	8012614 <_svfiprintf_r+0x194>
 8012632:	ab03      	add	r3, sp, #12
 8012634:	9300      	str	r3, [sp, #0]
 8012636:	462a      	mov	r2, r5
 8012638:	4b0f      	ldr	r3, [pc, #60]	; (8012678 <_svfiprintf_r+0x1f8>)
 801263a:	a904      	add	r1, sp, #16
 801263c:	4638      	mov	r0, r7
 801263e:	f7fe f8a5 	bl	801078c <_printf_float>
 8012642:	1c42      	adds	r2, r0, #1
 8012644:	4606      	mov	r6, r0
 8012646:	d1d6      	bne.n	80125f6 <_svfiprintf_r+0x176>
 8012648:	89ab      	ldrh	r3, [r5, #12]
 801264a:	065b      	lsls	r3, r3, #25
 801264c:	f53f af2c 	bmi.w	80124a8 <_svfiprintf_r+0x28>
 8012650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012652:	b01d      	add	sp, #116	; 0x74
 8012654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012658:	ab03      	add	r3, sp, #12
 801265a:	9300      	str	r3, [sp, #0]
 801265c:	462a      	mov	r2, r5
 801265e:	4b06      	ldr	r3, [pc, #24]	; (8012678 <_svfiprintf_r+0x1f8>)
 8012660:	a904      	add	r1, sp, #16
 8012662:	4638      	mov	r0, r7
 8012664:	f7fe fb36 	bl	8010cd4 <_printf_i>
 8012668:	e7eb      	b.n	8012642 <_svfiprintf_r+0x1c2>
 801266a:	bf00      	nop
 801266c:	08014fcc 	.word	0x08014fcc
 8012670:	08014fd6 	.word	0x08014fd6
 8012674:	0801078d 	.word	0x0801078d
 8012678:	080123c9 	.word	0x080123c9
 801267c:	08014fd2 	.word	0x08014fd2

08012680 <__assert_func>:
 8012680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012682:	4614      	mov	r4, r2
 8012684:	461a      	mov	r2, r3
 8012686:	4b09      	ldr	r3, [pc, #36]	; (80126ac <__assert_func+0x2c>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4605      	mov	r5, r0
 801268c:	68d8      	ldr	r0, [r3, #12]
 801268e:	b14c      	cbz	r4, 80126a4 <__assert_func+0x24>
 8012690:	4b07      	ldr	r3, [pc, #28]	; (80126b0 <__assert_func+0x30>)
 8012692:	9100      	str	r1, [sp, #0]
 8012694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012698:	4906      	ldr	r1, [pc, #24]	; (80126b4 <__assert_func+0x34>)
 801269a:	462b      	mov	r3, r5
 801269c:	f000 f80e 	bl	80126bc <fiprintf>
 80126a0:	f000 faa4 	bl	8012bec <abort>
 80126a4:	4b04      	ldr	r3, [pc, #16]	; (80126b8 <__assert_func+0x38>)
 80126a6:	461c      	mov	r4, r3
 80126a8:	e7f3      	b.n	8012692 <__assert_func+0x12>
 80126aa:	bf00      	nop
 80126ac:	2000006c 	.word	0x2000006c
 80126b0:	08014fdd 	.word	0x08014fdd
 80126b4:	08014fea 	.word	0x08014fea
 80126b8:	08015018 	.word	0x08015018

080126bc <fiprintf>:
 80126bc:	b40e      	push	{r1, r2, r3}
 80126be:	b503      	push	{r0, r1, lr}
 80126c0:	4601      	mov	r1, r0
 80126c2:	ab03      	add	r3, sp, #12
 80126c4:	4805      	ldr	r0, [pc, #20]	; (80126dc <fiprintf+0x20>)
 80126c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ca:	6800      	ldr	r0, [r0, #0]
 80126cc:	9301      	str	r3, [sp, #4]
 80126ce:	f000 f88f 	bl	80127f0 <_vfiprintf_r>
 80126d2:	b002      	add	sp, #8
 80126d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80126d8:	b003      	add	sp, #12
 80126da:	4770      	bx	lr
 80126dc:	2000006c 	.word	0x2000006c

080126e0 <__retarget_lock_init_recursive>:
 80126e0:	4770      	bx	lr

080126e2 <__retarget_lock_acquire_recursive>:
 80126e2:	4770      	bx	lr

080126e4 <__retarget_lock_release_recursive>:
 80126e4:	4770      	bx	lr

080126e6 <__ascii_mbtowc>:
 80126e6:	b082      	sub	sp, #8
 80126e8:	b901      	cbnz	r1, 80126ec <__ascii_mbtowc+0x6>
 80126ea:	a901      	add	r1, sp, #4
 80126ec:	b142      	cbz	r2, 8012700 <__ascii_mbtowc+0x1a>
 80126ee:	b14b      	cbz	r3, 8012704 <__ascii_mbtowc+0x1e>
 80126f0:	7813      	ldrb	r3, [r2, #0]
 80126f2:	600b      	str	r3, [r1, #0]
 80126f4:	7812      	ldrb	r2, [r2, #0]
 80126f6:	1e10      	subs	r0, r2, #0
 80126f8:	bf18      	it	ne
 80126fa:	2001      	movne	r0, #1
 80126fc:	b002      	add	sp, #8
 80126fe:	4770      	bx	lr
 8012700:	4610      	mov	r0, r2
 8012702:	e7fb      	b.n	80126fc <__ascii_mbtowc+0x16>
 8012704:	f06f 0001 	mvn.w	r0, #1
 8012708:	e7f8      	b.n	80126fc <__ascii_mbtowc+0x16>

0801270a <memmove>:
 801270a:	4288      	cmp	r0, r1
 801270c:	b510      	push	{r4, lr}
 801270e:	eb01 0402 	add.w	r4, r1, r2
 8012712:	d902      	bls.n	801271a <memmove+0x10>
 8012714:	4284      	cmp	r4, r0
 8012716:	4623      	mov	r3, r4
 8012718:	d807      	bhi.n	801272a <memmove+0x20>
 801271a:	1e43      	subs	r3, r0, #1
 801271c:	42a1      	cmp	r1, r4
 801271e:	d008      	beq.n	8012732 <memmove+0x28>
 8012720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012724:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012728:	e7f8      	b.n	801271c <memmove+0x12>
 801272a:	4402      	add	r2, r0
 801272c:	4601      	mov	r1, r0
 801272e:	428a      	cmp	r2, r1
 8012730:	d100      	bne.n	8012734 <memmove+0x2a>
 8012732:	bd10      	pop	{r4, pc}
 8012734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012738:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801273c:	e7f7      	b.n	801272e <memmove+0x24>

0801273e <_realloc_r>:
 801273e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012742:	4680      	mov	r8, r0
 8012744:	4614      	mov	r4, r2
 8012746:	460e      	mov	r6, r1
 8012748:	b921      	cbnz	r1, 8012754 <_realloc_r+0x16>
 801274a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801274e:	4611      	mov	r1, r2
 8012750:	f7fd bf08 	b.w	8010564 <_malloc_r>
 8012754:	b92a      	cbnz	r2, 8012762 <_realloc_r+0x24>
 8012756:	f7fd fe99 	bl	801048c <_free_r>
 801275a:	4625      	mov	r5, r4
 801275c:	4628      	mov	r0, r5
 801275e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012762:	f000 fc67 	bl	8013034 <_malloc_usable_size_r>
 8012766:	4284      	cmp	r4, r0
 8012768:	4607      	mov	r7, r0
 801276a:	d802      	bhi.n	8012772 <_realloc_r+0x34>
 801276c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012770:	d812      	bhi.n	8012798 <_realloc_r+0x5a>
 8012772:	4621      	mov	r1, r4
 8012774:	4640      	mov	r0, r8
 8012776:	f7fd fef5 	bl	8010564 <_malloc_r>
 801277a:	4605      	mov	r5, r0
 801277c:	2800      	cmp	r0, #0
 801277e:	d0ed      	beq.n	801275c <_realloc_r+0x1e>
 8012780:	42bc      	cmp	r4, r7
 8012782:	4622      	mov	r2, r4
 8012784:	4631      	mov	r1, r6
 8012786:	bf28      	it	cs
 8012788:	463a      	movcs	r2, r7
 801278a:	f7fd fe69 	bl	8010460 <memcpy>
 801278e:	4631      	mov	r1, r6
 8012790:	4640      	mov	r0, r8
 8012792:	f7fd fe7b 	bl	801048c <_free_r>
 8012796:	e7e1      	b.n	801275c <_realloc_r+0x1e>
 8012798:	4635      	mov	r5, r6
 801279a:	e7df      	b.n	801275c <_realloc_r+0x1e>

0801279c <__sfputc_r>:
 801279c:	6893      	ldr	r3, [r2, #8]
 801279e:	3b01      	subs	r3, #1
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	b410      	push	{r4}
 80127a4:	6093      	str	r3, [r2, #8]
 80127a6:	da08      	bge.n	80127ba <__sfputc_r+0x1e>
 80127a8:	6994      	ldr	r4, [r2, #24]
 80127aa:	42a3      	cmp	r3, r4
 80127ac:	db01      	blt.n	80127b2 <__sfputc_r+0x16>
 80127ae:	290a      	cmp	r1, #10
 80127b0:	d103      	bne.n	80127ba <__sfputc_r+0x1e>
 80127b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127b6:	f000 b94b 	b.w	8012a50 <__swbuf_r>
 80127ba:	6813      	ldr	r3, [r2, #0]
 80127bc:	1c58      	adds	r0, r3, #1
 80127be:	6010      	str	r0, [r2, #0]
 80127c0:	7019      	strb	r1, [r3, #0]
 80127c2:	4608      	mov	r0, r1
 80127c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127c8:	4770      	bx	lr

080127ca <__sfputs_r>:
 80127ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127cc:	4606      	mov	r6, r0
 80127ce:	460f      	mov	r7, r1
 80127d0:	4614      	mov	r4, r2
 80127d2:	18d5      	adds	r5, r2, r3
 80127d4:	42ac      	cmp	r4, r5
 80127d6:	d101      	bne.n	80127dc <__sfputs_r+0x12>
 80127d8:	2000      	movs	r0, #0
 80127da:	e007      	b.n	80127ec <__sfputs_r+0x22>
 80127dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127e0:	463a      	mov	r2, r7
 80127e2:	4630      	mov	r0, r6
 80127e4:	f7ff ffda 	bl	801279c <__sfputc_r>
 80127e8:	1c43      	adds	r3, r0, #1
 80127ea:	d1f3      	bne.n	80127d4 <__sfputs_r+0xa>
 80127ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080127f0 <_vfiprintf_r>:
 80127f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f4:	460d      	mov	r5, r1
 80127f6:	b09d      	sub	sp, #116	; 0x74
 80127f8:	4614      	mov	r4, r2
 80127fa:	4698      	mov	r8, r3
 80127fc:	4606      	mov	r6, r0
 80127fe:	b118      	cbz	r0, 8012808 <_vfiprintf_r+0x18>
 8012800:	6983      	ldr	r3, [r0, #24]
 8012802:	b90b      	cbnz	r3, 8012808 <_vfiprintf_r+0x18>
 8012804:	f000 fb14 	bl	8012e30 <__sinit>
 8012808:	4b89      	ldr	r3, [pc, #548]	; (8012a30 <_vfiprintf_r+0x240>)
 801280a:	429d      	cmp	r5, r3
 801280c:	d11b      	bne.n	8012846 <_vfiprintf_r+0x56>
 801280e:	6875      	ldr	r5, [r6, #4]
 8012810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012812:	07d9      	lsls	r1, r3, #31
 8012814:	d405      	bmi.n	8012822 <_vfiprintf_r+0x32>
 8012816:	89ab      	ldrh	r3, [r5, #12]
 8012818:	059a      	lsls	r2, r3, #22
 801281a:	d402      	bmi.n	8012822 <_vfiprintf_r+0x32>
 801281c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801281e:	f7ff ff60 	bl	80126e2 <__retarget_lock_acquire_recursive>
 8012822:	89ab      	ldrh	r3, [r5, #12]
 8012824:	071b      	lsls	r3, r3, #28
 8012826:	d501      	bpl.n	801282c <_vfiprintf_r+0x3c>
 8012828:	692b      	ldr	r3, [r5, #16]
 801282a:	b9eb      	cbnz	r3, 8012868 <_vfiprintf_r+0x78>
 801282c:	4629      	mov	r1, r5
 801282e:	4630      	mov	r0, r6
 8012830:	f000 f96e 	bl	8012b10 <__swsetup_r>
 8012834:	b1c0      	cbz	r0, 8012868 <_vfiprintf_r+0x78>
 8012836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012838:	07dc      	lsls	r4, r3, #31
 801283a:	d50e      	bpl.n	801285a <_vfiprintf_r+0x6a>
 801283c:	f04f 30ff 	mov.w	r0, #4294967295
 8012840:	b01d      	add	sp, #116	; 0x74
 8012842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012846:	4b7b      	ldr	r3, [pc, #492]	; (8012a34 <_vfiprintf_r+0x244>)
 8012848:	429d      	cmp	r5, r3
 801284a:	d101      	bne.n	8012850 <_vfiprintf_r+0x60>
 801284c:	68b5      	ldr	r5, [r6, #8]
 801284e:	e7df      	b.n	8012810 <_vfiprintf_r+0x20>
 8012850:	4b79      	ldr	r3, [pc, #484]	; (8012a38 <_vfiprintf_r+0x248>)
 8012852:	429d      	cmp	r5, r3
 8012854:	bf08      	it	eq
 8012856:	68f5      	ldreq	r5, [r6, #12]
 8012858:	e7da      	b.n	8012810 <_vfiprintf_r+0x20>
 801285a:	89ab      	ldrh	r3, [r5, #12]
 801285c:	0598      	lsls	r0, r3, #22
 801285e:	d4ed      	bmi.n	801283c <_vfiprintf_r+0x4c>
 8012860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012862:	f7ff ff3f 	bl	80126e4 <__retarget_lock_release_recursive>
 8012866:	e7e9      	b.n	801283c <_vfiprintf_r+0x4c>
 8012868:	2300      	movs	r3, #0
 801286a:	9309      	str	r3, [sp, #36]	; 0x24
 801286c:	2320      	movs	r3, #32
 801286e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012872:	f8cd 800c 	str.w	r8, [sp, #12]
 8012876:	2330      	movs	r3, #48	; 0x30
 8012878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012a3c <_vfiprintf_r+0x24c>
 801287c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012880:	f04f 0901 	mov.w	r9, #1
 8012884:	4623      	mov	r3, r4
 8012886:	469a      	mov	sl, r3
 8012888:	f813 2b01 	ldrb.w	r2, [r3], #1
 801288c:	b10a      	cbz	r2, 8012892 <_vfiprintf_r+0xa2>
 801288e:	2a25      	cmp	r2, #37	; 0x25
 8012890:	d1f9      	bne.n	8012886 <_vfiprintf_r+0x96>
 8012892:	ebba 0b04 	subs.w	fp, sl, r4
 8012896:	d00b      	beq.n	80128b0 <_vfiprintf_r+0xc0>
 8012898:	465b      	mov	r3, fp
 801289a:	4622      	mov	r2, r4
 801289c:	4629      	mov	r1, r5
 801289e:	4630      	mov	r0, r6
 80128a0:	f7ff ff93 	bl	80127ca <__sfputs_r>
 80128a4:	3001      	adds	r0, #1
 80128a6:	f000 80aa 	beq.w	80129fe <_vfiprintf_r+0x20e>
 80128aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128ac:	445a      	add	r2, fp
 80128ae:	9209      	str	r2, [sp, #36]	; 0x24
 80128b0:	f89a 3000 	ldrb.w	r3, [sl]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	f000 80a2 	beq.w	80129fe <_vfiprintf_r+0x20e>
 80128ba:	2300      	movs	r3, #0
 80128bc:	f04f 32ff 	mov.w	r2, #4294967295
 80128c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128c4:	f10a 0a01 	add.w	sl, sl, #1
 80128c8:	9304      	str	r3, [sp, #16]
 80128ca:	9307      	str	r3, [sp, #28]
 80128cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128d0:	931a      	str	r3, [sp, #104]	; 0x68
 80128d2:	4654      	mov	r4, sl
 80128d4:	2205      	movs	r2, #5
 80128d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128da:	4858      	ldr	r0, [pc, #352]	; (8012a3c <_vfiprintf_r+0x24c>)
 80128dc:	f7ed fc98 	bl	8000210 <memchr>
 80128e0:	9a04      	ldr	r2, [sp, #16]
 80128e2:	b9d8      	cbnz	r0, 801291c <_vfiprintf_r+0x12c>
 80128e4:	06d1      	lsls	r1, r2, #27
 80128e6:	bf44      	itt	mi
 80128e8:	2320      	movmi	r3, #32
 80128ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128ee:	0713      	lsls	r3, r2, #28
 80128f0:	bf44      	itt	mi
 80128f2:	232b      	movmi	r3, #43	; 0x2b
 80128f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128f8:	f89a 3000 	ldrb.w	r3, [sl]
 80128fc:	2b2a      	cmp	r3, #42	; 0x2a
 80128fe:	d015      	beq.n	801292c <_vfiprintf_r+0x13c>
 8012900:	9a07      	ldr	r2, [sp, #28]
 8012902:	4654      	mov	r4, sl
 8012904:	2000      	movs	r0, #0
 8012906:	f04f 0c0a 	mov.w	ip, #10
 801290a:	4621      	mov	r1, r4
 801290c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012910:	3b30      	subs	r3, #48	; 0x30
 8012912:	2b09      	cmp	r3, #9
 8012914:	d94e      	bls.n	80129b4 <_vfiprintf_r+0x1c4>
 8012916:	b1b0      	cbz	r0, 8012946 <_vfiprintf_r+0x156>
 8012918:	9207      	str	r2, [sp, #28]
 801291a:	e014      	b.n	8012946 <_vfiprintf_r+0x156>
 801291c:	eba0 0308 	sub.w	r3, r0, r8
 8012920:	fa09 f303 	lsl.w	r3, r9, r3
 8012924:	4313      	orrs	r3, r2
 8012926:	9304      	str	r3, [sp, #16]
 8012928:	46a2      	mov	sl, r4
 801292a:	e7d2      	b.n	80128d2 <_vfiprintf_r+0xe2>
 801292c:	9b03      	ldr	r3, [sp, #12]
 801292e:	1d19      	adds	r1, r3, #4
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	9103      	str	r1, [sp, #12]
 8012934:	2b00      	cmp	r3, #0
 8012936:	bfbb      	ittet	lt
 8012938:	425b      	neglt	r3, r3
 801293a:	f042 0202 	orrlt.w	r2, r2, #2
 801293e:	9307      	strge	r3, [sp, #28]
 8012940:	9307      	strlt	r3, [sp, #28]
 8012942:	bfb8      	it	lt
 8012944:	9204      	strlt	r2, [sp, #16]
 8012946:	7823      	ldrb	r3, [r4, #0]
 8012948:	2b2e      	cmp	r3, #46	; 0x2e
 801294a:	d10c      	bne.n	8012966 <_vfiprintf_r+0x176>
 801294c:	7863      	ldrb	r3, [r4, #1]
 801294e:	2b2a      	cmp	r3, #42	; 0x2a
 8012950:	d135      	bne.n	80129be <_vfiprintf_r+0x1ce>
 8012952:	9b03      	ldr	r3, [sp, #12]
 8012954:	1d1a      	adds	r2, r3, #4
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	9203      	str	r2, [sp, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	bfb8      	it	lt
 801295e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012962:	3402      	adds	r4, #2
 8012964:	9305      	str	r3, [sp, #20]
 8012966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012a4c <_vfiprintf_r+0x25c>
 801296a:	7821      	ldrb	r1, [r4, #0]
 801296c:	2203      	movs	r2, #3
 801296e:	4650      	mov	r0, sl
 8012970:	f7ed fc4e 	bl	8000210 <memchr>
 8012974:	b140      	cbz	r0, 8012988 <_vfiprintf_r+0x198>
 8012976:	2340      	movs	r3, #64	; 0x40
 8012978:	eba0 000a 	sub.w	r0, r0, sl
 801297c:	fa03 f000 	lsl.w	r0, r3, r0
 8012980:	9b04      	ldr	r3, [sp, #16]
 8012982:	4303      	orrs	r3, r0
 8012984:	3401      	adds	r4, #1
 8012986:	9304      	str	r3, [sp, #16]
 8012988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801298c:	482c      	ldr	r0, [pc, #176]	; (8012a40 <_vfiprintf_r+0x250>)
 801298e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012992:	2206      	movs	r2, #6
 8012994:	f7ed fc3c 	bl	8000210 <memchr>
 8012998:	2800      	cmp	r0, #0
 801299a:	d03f      	beq.n	8012a1c <_vfiprintf_r+0x22c>
 801299c:	4b29      	ldr	r3, [pc, #164]	; (8012a44 <_vfiprintf_r+0x254>)
 801299e:	bb1b      	cbnz	r3, 80129e8 <_vfiprintf_r+0x1f8>
 80129a0:	9b03      	ldr	r3, [sp, #12]
 80129a2:	3307      	adds	r3, #7
 80129a4:	f023 0307 	bic.w	r3, r3, #7
 80129a8:	3308      	adds	r3, #8
 80129aa:	9303      	str	r3, [sp, #12]
 80129ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ae:	443b      	add	r3, r7
 80129b0:	9309      	str	r3, [sp, #36]	; 0x24
 80129b2:	e767      	b.n	8012884 <_vfiprintf_r+0x94>
 80129b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80129b8:	460c      	mov	r4, r1
 80129ba:	2001      	movs	r0, #1
 80129bc:	e7a5      	b.n	801290a <_vfiprintf_r+0x11a>
 80129be:	2300      	movs	r3, #0
 80129c0:	3401      	adds	r4, #1
 80129c2:	9305      	str	r3, [sp, #20]
 80129c4:	4619      	mov	r1, r3
 80129c6:	f04f 0c0a 	mov.w	ip, #10
 80129ca:	4620      	mov	r0, r4
 80129cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129d0:	3a30      	subs	r2, #48	; 0x30
 80129d2:	2a09      	cmp	r2, #9
 80129d4:	d903      	bls.n	80129de <_vfiprintf_r+0x1ee>
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d0c5      	beq.n	8012966 <_vfiprintf_r+0x176>
 80129da:	9105      	str	r1, [sp, #20]
 80129dc:	e7c3      	b.n	8012966 <_vfiprintf_r+0x176>
 80129de:	fb0c 2101 	mla	r1, ip, r1, r2
 80129e2:	4604      	mov	r4, r0
 80129e4:	2301      	movs	r3, #1
 80129e6:	e7f0      	b.n	80129ca <_vfiprintf_r+0x1da>
 80129e8:	ab03      	add	r3, sp, #12
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	462a      	mov	r2, r5
 80129ee:	4b16      	ldr	r3, [pc, #88]	; (8012a48 <_vfiprintf_r+0x258>)
 80129f0:	a904      	add	r1, sp, #16
 80129f2:	4630      	mov	r0, r6
 80129f4:	f7fd feca 	bl	801078c <_printf_float>
 80129f8:	4607      	mov	r7, r0
 80129fa:	1c78      	adds	r0, r7, #1
 80129fc:	d1d6      	bne.n	80129ac <_vfiprintf_r+0x1bc>
 80129fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a00:	07d9      	lsls	r1, r3, #31
 8012a02:	d405      	bmi.n	8012a10 <_vfiprintf_r+0x220>
 8012a04:	89ab      	ldrh	r3, [r5, #12]
 8012a06:	059a      	lsls	r2, r3, #22
 8012a08:	d402      	bmi.n	8012a10 <_vfiprintf_r+0x220>
 8012a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a0c:	f7ff fe6a 	bl	80126e4 <__retarget_lock_release_recursive>
 8012a10:	89ab      	ldrh	r3, [r5, #12]
 8012a12:	065b      	lsls	r3, r3, #25
 8012a14:	f53f af12 	bmi.w	801283c <_vfiprintf_r+0x4c>
 8012a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a1a:	e711      	b.n	8012840 <_vfiprintf_r+0x50>
 8012a1c:	ab03      	add	r3, sp, #12
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	462a      	mov	r2, r5
 8012a22:	4b09      	ldr	r3, [pc, #36]	; (8012a48 <_vfiprintf_r+0x258>)
 8012a24:	a904      	add	r1, sp, #16
 8012a26:	4630      	mov	r0, r6
 8012a28:	f7fe f954 	bl	8010cd4 <_printf_i>
 8012a2c:	e7e4      	b.n	80129f8 <_vfiprintf_r+0x208>
 8012a2e:	bf00      	nop
 8012a30:	08015144 	.word	0x08015144
 8012a34:	08015164 	.word	0x08015164
 8012a38:	08015124 	.word	0x08015124
 8012a3c:	08014fcc 	.word	0x08014fcc
 8012a40:	08014fd6 	.word	0x08014fd6
 8012a44:	0801078d 	.word	0x0801078d
 8012a48:	080127cb 	.word	0x080127cb
 8012a4c:	08014fd2 	.word	0x08014fd2

08012a50 <__swbuf_r>:
 8012a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a52:	460e      	mov	r6, r1
 8012a54:	4614      	mov	r4, r2
 8012a56:	4605      	mov	r5, r0
 8012a58:	b118      	cbz	r0, 8012a62 <__swbuf_r+0x12>
 8012a5a:	6983      	ldr	r3, [r0, #24]
 8012a5c:	b90b      	cbnz	r3, 8012a62 <__swbuf_r+0x12>
 8012a5e:	f000 f9e7 	bl	8012e30 <__sinit>
 8012a62:	4b21      	ldr	r3, [pc, #132]	; (8012ae8 <__swbuf_r+0x98>)
 8012a64:	429c      	cmp	r4, r3
 8012a66:	d12b      	bne.n	8012ac0 <__swbuf_r+0x70>
 8012a68:	686c      	ldr	r4, [r5, #4]
 8012a6a:	69a3      	ldr	r3, [r4, #24]
 8012a6c:	60a3      	str	r3, [r4, #8]
 8012a6e:	89a3      	ldrh	r3, [r4, #12]
 8012a70:	071a      	lsls	r2, r3, #28
 8012a72:	d52f      	bpl.n	8012ad4 <__swbuf_r+0x84>
 8012a74:	6923      	ldr	r3, [r4, #16]
 8012a76:	b36b      	cbz	r3, 8012ad4 <__swbuf_r+0x84>
 8012a78:	6923      	ldr	r3, [r4, #16]
 8012a7a:	6820      	ldr	r0, [r4, #0]
 8012a7c:	1ac0      	subs	r0, r0, r3
 8012a7e:	6963      	ldr	r3, [r4, #20]
 8012a80:	b2f6      	uxtb	r6, r6
 8012a82:	4283      	cmp	r3, r0
 8012a84:	4637      	mov	r7, r6
 8012a86:	dc04      	bgt.n	8012a92 <__swbuf_r+0x42>
 8012a88:	4621      	mov	r1, r4
 8012a8a:	4628      	mov	r0, r5
 8012a8c:	f000 f93c 	bl	8012d08 <_fflush_r>
 8012a90:	bb30      	cbnz	r0, 8012ae0 <__swbuf_r+0x90>
 8012a92:	68a3      	ldr	r3, [r4, #8]
 8012a94:	3b01      	subs	r3, #1
 8012a96:	60a3      	str	r3, [r4, #8]
 8012a98:	6823      	ldr	r3, [r4, #0]
 8012a9a:	1c5a      	adds	r2, r3, #1
 8012a9c:	6022      	str	r2, [r4, #0]
 8012a9e:	701e      	strb	r6, [r3, #0]
 8012aa0:	6963      	ldr	r3, [r4, #20]
 8012aa2:	3001      	adds	r0, #1
 8012aa4:	4283      	cmp	r3, r0
 8012aa6:	d004      	beq.n	8012ab2 <__swbuf_r+0x62>
 8012aa8:	89a3      	ldrh	r3, [r4, #12]
 8012aaa:	07db      	lsls	r3, r3, #31
 8012aac:	d506      	bpl.n	8012abc <__swbuf_r+0x6c>
 8012aae:	2e0a      	cmp	r6, #10
 8012ab0:	d104      	bne.n	8012abc <__swbuf_r+0x6c>
 8012ab2:	4621      	mov	r1, r4
 8012ab4:	4628      	mov	r0, r5
 8012ab6:	f000 f927 	bl	8012d08 <_fflush_r>
 8012aba:	b988      	cbnz	r0, 8012ae0 <__swbuf_r+0x90>
 8012abc:	4638      	mov	r0, r7
 8012abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ac0:	4b0a      	ldr	r3, [pc, #40]	; (8012aec <__swbuf_r+0x9c>)
 8012ac2:	429c      	cmp	r4, r3
 8012ac4:	d101      	bne.n	8012aca <__swbuf_r+0x7a>
 8012ac6:	68ac      	ldr	r4, [r5, #8]
 8012ac8:	e7cf      	b.n	8012a6a <__swbuf_r+0x1a>
 8012aca:	4b09      	ldr	r3, [pc, #36]	; (8012af0 <__swbuf_r+0xa0>)
 8012acc:	429c      	cmp	r4, r3
 8012ace:	bf08      	it	eq
 8012ad0:	68ec      	ldreq	r4, [r5, #12]
 8012ad2:	e7ca      	b.n	8012a6a <__swbuf_r+0x1a>
 8012ad4:	4621      	mov	r1, r4
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f000 f81a 	bl	8012b10 <__swsetup_r>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d0cb      	beq.n	8012a78 <__swbuf_r+0x28>
 8012ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8012ae4:	e7ea      	b.n	8012abc <__swbuf_r+0x6c>
 8012ae6:	bf00      	nop
 8012ae8:	08015144 	.word	0x08015144
 8012aec:	08015164 	.word	0x08015164
 8012af0:	08015124 	.word	0x08015124

08012af4 <__ascii_wctomb>:
 8012af4:	b149      	cbz	r1, 8012b0a <__ascii_wctomb+0x16>
 8012af6:	2aff      	cmp	r2, #255	; 0xff
 8012af8:	bf85      	ittet	hi
 8012afa:	238a      	movhi	r3, #138	; 0x8a
 8012afc:	6003      	strhi	r3, [r0, #0]
 8012afe:	700a      	strbls	r2, [r1, #0]
 8012b00:	f04f 30ff 	movhi.w	r0, #4294967295
 8012b04:	bf98      	it	ls
 8012b06:	2001      	movls	r0, #1
 8012b08:	4770      	bx	lr
 8012b0a:	4608      	mov	r0, r1
 8012b0c:	4770      	bx	lr
	...

08012b10 <__swsetup_r>:
 8012b10:	4b32      	ldr	r3, [pc, #200]	; (8012bdc <__swsetup_r+0xcc>)
 8012b12:	b570      	push	{r4, r5, r6, lr}
 8012b14:	681d      	ldr	r5, [r3, #0]
 8012b16:	4606      	mov	r6, r0
 8012b18:	460c      	mov	r4, r1
 8012b1a:	b125      	cbz	r5, 8012b26 <__swsetup_r+0x16>
 8012b1c:	69ab      	ldr	r3, [r5, #24]
 8012b1e:	b913      	cbnz	r3, 8012b26 <__swsetup_r+0x16>
 8012b20:	4628      	mov	r0, r5
 8012b22:	f000 f985 	bl	8012e30 <__sinit>
 8012b26:	4b2e      	ldr	r3, [pc, #184]	; (8012be0 <__swsetup_r+0xd0>)
 8012b28:	429c      	cmp	r4, r3
 8012b2a:	d10f      	bne.n	8012b4c <__swsetup_r+0x3c>
 8012b2c:	686c      	ldr	r4, [r5, #4]
 8012b2e:	89a3      	ldrh	r3, [r4, #12]
 8012b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b34:	0719      	lsls	r1, r3, #28
 8012b36:	d42c      	bmi.n	8012b92 <__swsetup_r+0x82>
 8012b38:	06dd      	lsls	r5, r3, #27
 8012b3a:	d411      	bmi.n	8012b60 <__swsetup_r+0x50>
 8012b3c:	2309      	movs	r3, #9
 8012b3e:	6033      	str	r3, [r6, #0]
 8012b40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b44:	81a3      	strh	r3, [r4, #12]
 8012b46:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4a:	e03e      	b.n	8012bca <__swsetup_r+0xba>
 8012b4c:	4b25      	ldr	r3, [pc, #148]	; (8012be4 <__swsetup_r+0xd4>)
 8012b4e:	429c      	cmp	r4, r3
 8012b50:	d101      	bne.n	8012b56 <__swsetup_r+0x46>
 8012b52:	68ac      	ldr	r4, [r5, #8]
 8012b54:	e7eb      	b.n	8012b2e <__swsetup_r+0x1e>
 8012b56:	4b24      	ldr	r3, [pc, #144]	; (8012be8 <__swsetup_r+0xd8>)
 8012b58:	429c      	cmp	r4, r3
 8012b5a:	bf08      	it	eq
 8012b5c:	68ec      	ldreq	r4, [r5, #12]
 8012b5e:	e7e6      	b.n	8012b2e <__swsetup_r+0x1e>
 8012b60:	0758      	lsls	r0, r3, #29
 8012b62:	d512      	bpl.n	8012b8a <__swsetup_r+0x7a>
 8012b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b66:	b141      	cbz	r1, 8012b7a <__swsetup_r+0x6a>
 8012b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b6c:	4299      	cmp	r1, r3
 8012b6e:	d002      	beq.n	8012b76 <__swsetup_r+0x66>
 8012b70:	4630      	mov	r0, r6
 8012b72:	f7fd fc8b 	bl	801048c <_free_r>
 8012b76:	2300      	movs	r3, #0
 8012b78:	6363      	str	r3, [r4, #52]	; 0x34
 8012b7a:	89a3      	ldrh	r3, [r4, #12]
 8012b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b80:	81a3      	strh	r3, [r4, #12]
 8012b82:	2300      	movs	r3, #0
 8012b84:	6063      	str	r3, [r4, #4]
 8012b86:	6923      	ldr	r3, [r4, #16]
 8012b88:	6023      	str	r3, [r4, #0]
 8012b8a:	89a3      	ldrh	r3, [r4, #12]
 8012b8c:	f043 0308 	orr.w	r3, r3, #8
 8012b90:	81a3      	strh	r3, [r4, #12]
 8012b92:	6923      	ldr	r3, [r4, #16]
 8012b94:	b94b      	cbnz	r3, 8012baa <__swsetup_r+0x9a>
 8012b96:	89a3      	ldrh	r3, [r4, #12]
 8012b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ba0:	d003      	beq.n	8012baa <__swsetup_r+0x9a>
 8012ba2:	4621      	mov	r1, r4
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	f000 fa05 	bl	8012fb4 <__smakebuf_r>
 8012baa:	89a0      	ldrh	r0, [r4, #12]
 8012bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bb0:	f010 0301 	ands.w	r3, r0, #1
 8012bb4:	d00a      	beq.n	8012bcc <__swsetup_r+0xbc>
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	60a3      	str	r3, [r4, #8]
 8012bba:	6963      	ldr	r3, [r4, #20]
 8012bbc:	425b      	negs	r3, r3
 8012bbe:	61a3      	str	r3, [r4, #24]
 8012bc0:	6923      	ldr	r3, [r4, #16]
 8012bc2:	b943      	cbnz	r3, 8012bd6 <__swsetup_r+0xc6>
 8012bc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012bc8:	d1ba      	bne.n	8012b40 <__swsetup_r+0x30>
 8012bca:	bd70      	pop	{r4, r5, r6, pc}
 8012bcc:	0781      	lsls	r1, r0, #30
 8012bce:	bf58      	it	pl
 8012bd0:	6963      	ldrpl	r3, [r4, #20]
 8012bd2:	60a3      	str	r3, [r4, #8]
 8012bd4:	e7f4      	b.n	8012bc0 <__swsetup_r+0xb0>
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	e7f7      	b.n	8012bca <__swsetup_r+0xba>
 8012bda:	bf00      	nop
 8012bdc:	2000006c 	.word	0x2000006c
 8012be0:	08015144 	.word	0x08015144
 8012be4:	08015164 	.word	0x08015164
 8012be8:	08015124 	.word	0x08015124

08012bec <abort>:
 8012bec:	b508      	push	{r3, lr}
 8012bee:	2006      	movs	r0, #6
 8012bf0:	f000 fa50 	bl	8013094 <raise>
 8012bf4:	2001      	movs	r0, #1
 8012bf6:	f7f3 f8eb 	bl	8005dd0 <_exit>
	...

08012bfc <__sflush_r>:
 8012bfc:	898a      	ldrh	r2, [r1, #12]
 8012bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c02:	4605      	mov	r5, r0
 8012c04:	0710      	lsls	r0, r2, #28
 8012c06:	460c      	mov	r4, r1
 8012c08:	d458      	bmi.n	8012cbc <__sflush_r+0xc0>
 8012c0a:	684b      	ldr	r3, [r1, #4]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	dc05      	bgt.n	8012c1c <__sflush_r+0x20>
 8012c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	dc02      	bgt.n	8012c1c <__sflush_r+0x20>
 8012c16:	2000      	movs	r0, #0
 8012c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c1e:	2e00      	cmp	r6, #0
 8012c20:	d0f9      	beq.n	8012c16 <__sflush_r+0x1a>
 8012c22:	2300      	movs	r3, #0
 8012c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c28:	682f      	ldr	r7, [r5, #0]
 8012c2a:	602b      	str	r3, [r5, #0]
 8012c2c:	d032      	beq.n	8012c94 <__sflush_r+0x98>
 8012c2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	075a      	lsls	r2, r3, #29
 8012c34:	d505      	bpl.n	8012c42 <__sflush_r+0x46>
 8012c36:	6863      	ldr	r3, [r4, #4]
 8012c38:	1ac0      	subs	r0, r0, r3
 8012c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c3c:	b10b      	cbz	r3, 8012c42 <__sflush_r+0x46>
 8012c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c40:	1ac0      	subs	r0, r0, r3
 8012c42:	2300      	movs	r3, #0
 8012c44:	4602      	mov	r2, r0
 8012c46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c48:	6a21      	ldr	r1, [r4, #32]
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	47b0      	blx	r6
 8012c4e:	1c43      	adds	r3, r0, #1
 8012c50:	89a3      	ldrh	r3, [r4, #12]
 8012c52:	d106      	bne.n	8012c62 <__sflush_r+0x66>
 8012c54:	6829      	ldr	r1, [r5, #0]
 8012c56:	291d      	cmp	r1, #29
 8012c58:	d82c      	bhi.n	8012cb4 <__sflush_r+0xb8>
 8012c5a:	4a2a      	ldr	r2, [pc, #168]	; (8012d04 <__sflush_r+0x108>)
 8012c5c:	40ca      	lsrs	r2, r1
 8012c5e:	07d6      	lsls	r6, r2, #31
 8012c60:	d528      	bpl.n	8012cb4 <__sflush_r+0xb8>
 8012c62:	2200      	movs	r2, #0
 8012c64:	6062      	str	r2, [r4, #4]
 8012c66:	04d9      	lsls	r1, r3, #19
 8012c68:	6922      	ldr	r2, [r4, #16]
 8012c6a:	6022      	str	r2, [r4, #0]
 8012c6c:	d504      	bpl.n	8012c78 <__sflush_r+0x7c>
 8012c6e:	1c42      	adds	r2, r0, #1
 8012c70:	d101      	bne.n	8012c76 <__sflush_r+0x7a>
 8012c72:	682b      	ldr	r3, [r5, #0]
 8012c74:	b903      	cbnz	r3, 8012c78 <__sflush_r+0x7c>
 8012c76:	6560      	str	r0, [r4, #84]	; 0x54
 8012c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c7a:	602f      	str	r7, [r5, #0]
 8012c7c:	2900      	cmp	r1, #0
 8012c7e:	d0ca      	beq.n	8012c16 <__sflush_r+0x1a>
 8012c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c84:	4299      	cmp	r1, r3
 8012c86:	d002      	beq.n	8012c8e <__sflush_r+0x92>
 8012c88:	4628      	mov	r0, r5
 8012c8a:	f7fd fbff 	bl	801048c <_free_r>
 8012c8e:	2000      	movs	r0, #0
 8012c90:	6360      	str	r0, [r4, #52]	; 0x34
 8012c92:	e7c1      	b.n	8012c18 <__sflush_r+0x1c>
 8012c94:	6a21      	ldr	r1, [r4, #32]
 8012c96:	2301      	movs	r3, #1
 8012c98:	4628      	mov	r0, r5
 8012c9a:	47b0      	blx	r6
 8012c9c:	1c41      	adds	r1, r0, #1
 8012c9e:	d1c7      	bne.n	8012c30 <__sflush_r+0x34>
 8012ca0:	682b      	ldr	r3, [r5, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d0c4      	beq.n	8012c30 <__sflush_r+0x34>
 8012ca6:	2b1d      	cmp	r3, #29
 8012ca8:	d001      	beq.n	8012cae <__sflush_r+0xb2>
 8012caa:	2b16      	cmp	r3, #22
 8012cac:	d101      	bne.n	8012cb2 <__sflush_r+0xb6>
 8012cae:	602f      	str	r7, [r5, #0]
 8012cb0:	e7b1      	b.n	8012c16 <__sflush_r+0x1a>
 8012cb2:	89a3      	ldrh	r3, [r4, #12]
 8012cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cb8:	81a3      	strh	r3, [r4, #12]
 8012cba:	e7ad      	b.n	8012c18 <__sflush_r+0x1c>
 8012cbc:	690f      	ldr	r7, [r1, #16]
 8012cbe:	2f00      	cmp	r7, #0
 8012cc0:	d0a9      	beq.n	8012c16 <__sflush_r+0x1a>
 8012cc2:	0793      	lsls	r3, r2, #30
 8012cc4:	680e      	ldr	r6, [r1, #0]
 8012cc6:	bf08      	it	eq
 8012cc8:	694b      	ldreq	r3, [r1, #20]
 8012cca:	600f      	str	r7, [r1, #0]
 8012ccc:	bf18      	it	ne
 8012cce:	2300      	movne	r3, #0
 8012cd0:	eba6 0807 	sub.w	r8, r6, r7
 8012cd4:	608b      	str	r3, [r1, #8]
 8012cd6:	f1b8 0f00 	cmp.w	r8, #0
 8012cda:	dd9c      	ble.n	8012c16 <__sflush_r+0x1a>
 8012cdc:	6a21      	ldr	r1, [r4, #32]
 8012cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ce0:	4643      	mov	r3, r8
 8012ce2:	463a      	mov	r2, r7
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	47b0      	blx	r6
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	dc06      	bgt.n	8012cfa <__sflush_r+0xfe>
 8012cec:	89a3      	ldrh	r3, [r4, #12]
 8012cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cf2:	81a3      	strh	r3, [r4, #12]
 8012cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf8:	e78e      	b.n	8012c18 <__sflush_r+0x1c>
 8012cfa:	4407      	add	r7, r0
 8012cfc:	eba8 0800 	sub.w	r8, r8, r0
 8012d00:	e7e9      	b.n	8012cd6 <__sflush_r+0xda>
 8012d02:	bf00      	nop
 8012d04:	20400001 	.word	0x20400001

08012d08 <_fflush_r>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	690b      	ldr	r3, [r1, #16]
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	460c      	mov	r4, r1
 8012d10:	b913      	cbnz	r3, 8012d18 <_fflush_r+0x10>
 8012d12:	2500      	movs	r5, #0
 8012d14:	4628      	mov	r0, r5
 8012d16:	bd38      	pop	{r3, r4, r5, pc}
 8012d18:	b118      	cbz	r0, 8012d22 <_fflush_r+0x1a>
 8012d1a:	6983      	ldr	r3, [r0, #24]
 8012d1c:	b90b      	cbnz	r3, 8012d22 <_fflush_r+0x1a>
 8012d1e:	f000 f887 	bl	8012e30 <__sinit>
 8012d22:	4b14      	ldr	r3, [pc, #80]	; (8012d74 <_fflush_r+0x6c>)
 8012d24:	429c      	cmp	r4, r3
 8012d26:	d11b      	bne.n	8012d60 <_fflush_r+0x58>
 8012d28:	686c      	ldr	r4, [r5, #4]
 8012d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d0ef      	beq.n	8012d12 <_fflush_r+0xa>
 8012d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d34:	07d0      	lsls	r0, r2, #31
 8012d36:	d404      	bmi.n	8012d42 <_fflush_r+0x3a>
 8012d38:	0599      	lsls	r1, r3, #22
 8012d3a:	d402      	bmi.n	8012d42 <_fflush_r+0x3a>
 8012d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d3e:	f7ff fcd0 	bl	80126e2 <__retarget_lock_acquire_recursive>
 8012d42:	4628      	mov	r0, r5
 8012d44:	4621      	mov	r1, r4
 8012d46:	f7ff ff59 	bl	8012bfc <__sflush_r>
 8012d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d4c:	07da      	lsls	r2, r3, #31
 8012d4e:	4605      	mov	r5, r0
 8012d50:	d4e0      	bmi.n	8012d14 <_fflush_r+0xc>
 8012d52:	89a3      	ldrh	r3, [r4, #12]
 8012d54:	059b      	lsls	r3, r3, #22
 8012d56:	d4dd      	bmi.n	8012d14 <_fflush_r+0xc>
 8012d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d5a:	f7ff fcc3 	bl	80126e4 <__retarget_lock_release_recursive>
 8012d5e:	e7d9      	b.n	8012d14 <_fflush_r+0xc>
 8012d60:	4b05      	ldr	r3, [pc, #20]	; (8012d78 <_fflush_r+0x70>)
 8012d62:	429c      	cmp	r4, r3
 8012d64:	d101      	bne.n	8012d6a <_fflush_r+0x62>
 8012d66:	68ac      	ldr	r4, [r5, #8]
 8012d68:	e7df      	b.n	8012d2a <_fflush_r+0x22>
 8012d6a:	4b04      	ldr	r3, [pc, #16]	; (8012d7c <_fflush_r+0x74>)
 8012d6c:	429c      	cmp	r4, r3
 8012d6e:	bf08      	it	eq
 8012d70:	68ec      	ldreq	r4, [r5, #12]
 8012d72:	e7da      	b.n	8012d2a <_fflush_r+0x22>
 8012d74:	08015144 	.word	0x08015144
 8012d78:	08015164 	.word	0x08015164
 8012d7c:	08015124 	.word	0x08015124

08012d80 <std>:
 8012d80:	2300      	movs	r3, #0
 8012d82:	b510      	push	{r4, lr}
 8012d84:	4604      	mov	r4, r0
 8012d86:	e9c0 3300 	strd	r3, r3, [r0]
 8012d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d8e:	6083      	str	r3, [r0, #8]
 8012d90:	8181      	strh	r1, [r0, #12]
 8012d92:	6643      	str	r3, [r0, #100]	; 0x64
 8012d94:	81c2      	strh	r2, [r0, #14]
 8012d96:	6183      	str	r3, [r0, #24]
 8012d98:	4619      	mov	r1, r3
 8012d9a:	2208      	movs	r2, #8
 8012d9c:	305c      	adds	r0, #92	; 0x5c
 8012d9e:	f7fd fb6d 	bl	801047c <memset>
 8012da2:	4b05      	ldr	r3, [pc, #20]	; (8012db8 <std+0x38>)
 8012da4:	6263      	str	r3, [r4, #36]	; 0x24
 8012da6:	4b05      	ldr	r3, [pc, #20]	; (8012dbc <std+0x3c>)
 8012da8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012daa:	4b05      	ldr	r3, [pc, #20]	; (8012dc0 <std+0x40>)
 8012dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012dae:	4b05      	ldr	r3, [pc, #20]	; (8012dc4 <std+0x44>)
 8012db0:	6224      	str	r4, [r4, #32]
 8012db2:	6323      	str	r3, [r4, #48]	; 0x30
 8012db4:	bd10      	pop	{r4, pc}
 8012db6:	bf00      	nop
 8012db8:	080130cd 	.word	0x080130cd
 8012dbc:	080130ef 	.word	0x080130ef
 8012dc0:	08013127 	.word	0x08013127
 8012dc4:	0801314b 	.word	0x0801314b

08012dc8 <_cleanup_r>:
 8012dc8:	4901      	ldr	r1, [pc, #4]	; (8012dd0 <_cleanup_r+0x8>)
 8012dca:	f000 b8af 	b.w	8012f2c <_fwalk_reent>
 8012dce:	bf00      	nop
 8012dd0:	08012d09 	.word	0x08012d09

08012dd4 <__sfmoreglue>:
 8012dd4:	b570      	push	{r4, r5, r6, lr}
 8012dd6:	2268      	movs	r2, #104	; 0x68
 8012dd8:	1e4d      	subs	r5, r1, #1
 8012dda:	4355      	muls	r5, r2
 8012ddc:	460e      	mov	r6, r1
 8012dde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012de2:	f7fd fbbf 	bl	8010564 <_malloc_r>
 8012de6:	4604      	mov	r4, r0
 8012de8:	b140      	cbz	r0, 8012dfc <__sfmoreglue+0x28>
 8012dea:	2100      	movs	r1, #0
 8012dec:	e9c0 1600 	strd	r1, r6, [r0]
 8012df0:	300c      	adds	r0, #12
 8012df2:	60a0      	str	r0, [r4, #8]
 8012df4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012df8:	f7fd fb40 	bl	801047c <memset>
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	bd70      	pop	{r4, r5, r6, pc}

08012e00 <__sfp_lock_acquire>:
 8012e00:	4801      	ldr	r0, [pc, #4]	; (8012e08 <__sfp_lock_acquire+0x8>)
 8012e02:	f7ff bc6e 	b.w	80126e2 <__retarget_lock_acquire_recursive>
 8012e06:	bf00      	nop
 8012e08:	200063c5 	.word	0x200063c5

08012e0c <__sfp_lock_release>:
 8012e0c:	4801      	ldr	r0, [pc, #4]	; (8012e14 <__sfp_lock_release+0x8>)
 8012e0e:	f7ff bc69 	b.w	80126e4 <__retarget_lock_release_recursive>
 8012e12:	bf00      	nop
 8012e14:	200063c5 	.word	0x200063c5

08012e18 <__sinit_lock_acquire>:
 8012e18:	4801      	ldr	r0, [pc, #4]	; (8012e20 <__sinit_lock_acquire+0x8>)
 8012e1a:	f7ff bc62 	b.w	80126e2 <__retarget_lock_acquire_recursive>
 8012e1e:	bf00      	nop
 8012e20:	200063c6 	.word	0x200063c6

08012e24 <__sinit_lock_release>:
 8012e24:	4801      	ldr	r0, [pc, #4]	; (8012e2c <__sinit_lock_release+0x8>)
 8012e26:	f7ff bc5d 	b.w	80126e4 <__retarget_lock_release_recursive>
 8012e2a:	bf00      	nop
 8012e2c:	200063c6 	.word	0x200063c6

08012e30 <__sinit>:
 8012e30:	b510      	push	{r4, lr}
 8012e32:	4604      	mov	r4, r0
 8012e34:	f7ff fff0 	bl	8012e18 <__sinit_lock_acquire>
 8012e38:	69a3      	ldr	r3, [r4, #24]
 8012e3a:	b11b      	cbz	r3, 8012e44 <__sinit+0x14>
 8012e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e40:	f7ff bff0 	b.w	8012e24 <__sinit_lock_release>
 8012e44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e48:	6523      	str	r3, [r4, #80]	; 0x50
 8012e4a:	4b13      	ldr	r3, [pc, #76]	; (8012e98 <__sinit+0x68>)
 8012e4c:	4a13      	ldr	r2, [pc, #76]	; (8012e9c <__sinit+0x6c>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e52:	42a3      	cmp	r3, r4
 8012e54:	bf04      	itt	eq
 8012e56:	2301      	moveq	r3, #1
 8012e58:	61a3      	streq	r3, [r4, #24]
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f000 f820 	bl	8012ea0 <__sfp>
 8012e60:	6060      	str	r0, [r4, #4]
 8012e62:	4620      	mov	r0, r4
 8012e64:	f000 f81c 	bl	8012ea0 <__sfp>
 8012e68:	60a0      	str	r0, [r4, #8]
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f000 f818 	bl	8012ea0 <__sfp>
 8012e70:	2200      	movs	r2, #0
 8012e72:	60e0      	str	r0, [r4, #12]
 8012e74:	2104      	movs	r1, #4
 8012e76:	6860      	ldr	r0, [r4, #4]
 8012e78:	f7ff ff82 	bl	8012d80 <std>
 8012e7c:	68a0      	ldr	r0, [r4, #8]
 8012e7e:	2201      	movs	r2, #1
 8012e80:	2109      	movs	r1, #9
 8012e82:	f7ff ff7d 	bl	8012d80 <std>
 8012e86:	68e0      	ldr	r0, [r4, #12]
 8012e88:	2202      	movs	r2, #2
 8012e8a:	2112      	movs	r1, #18
 8012e8c:	f7ff ff78 	bl	8012d80 <std>
 8012e90:	2301      	movs	r3, #1
 8012e92:	61a3      	str	r3, [r4, #24]
 8012e94:	e7d2      	b.n	8012e3c <__sinit+0xc>
 8012e96:	bf00      	nop
 8012e98:	08014dac 	.word	0x08014dac
 8012e9c:	08012dc9 	.word	0x08012dc9

08012ea0 <__sfp>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	4607      	mov	r7, r0
 8012ea4:	f7ff ffac 	bl	8012e00 <__sfp_lock_acquire>
 8012ea8:	4b1e      	ldr	r3, [pc, #120]	; (8012f24 <__sfp+0x84>)
 8012eaa:	681e      	ldr	r6, [r3, #0]
 8012eac:	69b3      	ldr	r3, [r6, #24]
 8012eae:	b913      	cbnz	r3, 8012eb6 <__sfp+0x16>
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	f7ff ffbd 	bl	8012e30 <__sinit>
 8012eb6:	3648      	adds	r6, #72	; 0x48
 8012eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	d503      	bpl.n	8012ec8 <__sfp+0x28>
 8012ec0:	6833      	ldr	r3, [r6, #0]
 8012ec2:	b30b      	cbz	r3, 8012f08 <__sfp+0x68>
 8012ec4:	6836      	ldr	r6, [r6, #0]
 8012ec6:	e7f7      	b.n	8012eb8 <__sfp+0x18>
 8012ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ecc:	b9d5      	cbnz	r5, 8012f04 <__sfp+0x64>
 8012ece:	4b16      	ldr	r3, [pc, #88]	; (8012f28 <__sfp+0x88>)
 8012ed0:	60e3      	str	r3, [r4, #12]
 8012ed2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ed6:	6665      	str	r5, [r4, #100]	; 0x64
 8012ed8:	f7ff fc02 	bl	80126e0 <__retarget_lock_init_recursive>
 8012edc:	f7ff ff96 	bl	8012e0c <__sfp_lock_release>
 8012ee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012ee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012ee8:	6025      	str	r5, [r4, #0]
 8012eea:	61a5      	str	r5, [r4, #24]
 8012eec:	2208      	movs	r2, #8
 8012eee:	4629      	mov	r1, r5
 8012ef0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ef4:	f7fd fac2 	bl	801047c <memset>
 8012ef8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012efc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f00:	4620      	mov	r0, r4
 8012f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f04:	3468      	adds	r4, #104	; 0x68
 8012f06:	e7d9      	b.n	8012ebc <__sfp+0x1c>
 8012f08:	2104      	movs	r1, #4
 8012f0a:	4638      	mov	r0, r7
 8012f0c:	f7ff ff62 	bl	8012dd4 <__sfmoreglue>
 8012f10:	4604      	mov	r4, r0
 8012f12:	6030      	str	r0, [r6, #0]
 8012f14:	2800      	cmp	r0, #0
 8012f16:	d1d5      	bne.n	8012ec4 <__sfp+0x24>
 8012f18:	f7ff ff78 	bl	8012e0c <__sfp_lock_release>
 8012f1c:	230c      	movs	r3, #12
 8012f1e:	603b      	str	r3, [r7, #0]
 8012f20:	e7ee      	b.n	8012f00 <__sfp+0x60>
 8012f22:	bf00      	nop
 8012f24:	08014dac 	.word	0x08014dac
 8012f28:	ffff0001 	.word	0xffff0001

08012f2c <_fwalk_reent>:
 8012f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f30:	4606      	mov	r6, r0
 8012f32:	4688      	mov	r8, r1
 8012f34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f38:	2700      	movs	r7, #0
 8012f3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f3e:	f1b9 0901 	subs.w	r9, r9, #1
 8012f42:	d505      	bpl.n	8012f50 <_fwalk_reent+0x24>
 8012f44:	6824      	ldr	r4, [r4, #0]
 8012f46:	2c00      	cmp	r4, #0
 8012f48:	d1f7      	bne.n	8012f3a <_fwalk_reent+0xe>
 8012f4a:	4638      	mov	r0, r7
 8012f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f50:	89ab      	ldrh	r3, [r5, #12]
 8012f52:	2b01      	cmp	r3, #1
 8012f54:	d907      	bls.n	8012f66 <_fwalk_reent+0x3a>
 8012f56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	d003      	beq.n	8012f66 <_fwalk_reent+0x3a>
 8012f5e:	4629      	mov	r1, r5
 8012f60:	4630      	mov	r0, r6
 8012f62:	47c0      	blx	r8
 8012f64:	4307      	orrs	r7, r0
 8012f66:	3568      	adds	r5, #104	; 0x68
 8012f68:	e7e9      	b.n	8012f3e <_fwalk_reent+0x12>

08012f6a <__swhatbuf_r>:
 8012f6a:	b570      	push	{r4, r5, r6, lr}
 8012f6c:	460e      	mov	r6, r1
 8012f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f72:	2900      	cmp	r1, #0
 8012f74:	b096      	sub	sp, #88	; 0x58
 8012f76:	4614      	mov	r4, r2
 8012f78:	461d      	mov	r5, r3
 8012f7a:	da08      	bge.n	8012f8e <__swhatbuf_r+0x24>
 8012f7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012f80:	2200      	movs	r2, #0
 8012f82:	602a      	str	r2, [r5, #0]
 8012f84:	061a      	lsls	r2, r3, #24
 8012f86:	d410      	bmi.n	8012faa <__swhatbuf_r+0x40>
 8012f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f8c:	e00e      	b.n	8012fac <__swhatbuf_r+0x42>
 8012f8e:	466a      	mov	r2, sp
 8012f90:	f000 f902 	bl	8013198 <_fstat_r>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	dbf1      	blt.n	8012f7c <__swhatbuf_r+0x12>
 8012f98:	9a01      	ldr	r2, [sp, #4]
 8012f9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012f9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012fa2:	425a      	negs	r2, r3
 8012fa4:	415a      	adcs	r2, r3
 8012fa6:	602a      	str	r2, [r5, #0]
 8012fa8:	e7ee      	b.n	8012f88 <__swhatbuf_r+0x1e>
 8012faa:	2340      	movs	r3, #64	; 0x40
 8012fac:	2000      	movs	r0, #0
 8012fae:	6023      	str	r3, [r4, #0]
 8012fb0:	b016      	add	sp, #88	; 0x58
 8012fb2:	bd70      	pop	{r4, r5, r6, pc}

08012fb4 <__smakebuf_r>:
 8012fb4:	898b      	ldrh	r3, [r1, #12]
 8012fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012fb8:	079d      	lsls	r5, r3, #30
 8012fba:	4606      	mov	r6, r0
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	d507      	bpl.n	8012fd0 <__smakebuf_r+0x1c>
 8012fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	6123      	str	r3, [r4, #16]
 8012fc8:	2301      	movs	r3, #1
 8012fca:	6163      	str	r3, [r4, #20]
 8012fcc:	b002      	add	sp, #8
 8012fce:	bd70      	pop	{r4, r5, r6, pc}
 8012fd0:	ab01      	add	r3, sp, #4
 8012fd2:	466a      	mov	r2, sp
 8012fd4:	f7ff ffc9 	bl	8012f6a <__swhatbuf_r>
 8012fd8:	9900      	ldr	r1, [sp, #0]
 8012fda:	4605      	mov	r5, r0
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f7fd fac1 	bl	8010564 <_malloc_r>
 8012fe2:	b948      	cbnz	r0, 8012ff8 <__smakebuf_r+0x44>
 8012fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fe8:	059a      	lsls	r2, r3, #22
 8012fea:	d4ef      	bmi.n	8012fcc <__smakebuf_r+0x18>
 8012fec:	f023 0303 	bic.w	r3, r3, #3
 8012ff0:	f043 0302 	orr.w	r3, r3, #2
 8012ff4:	81a3      	strh	r3, [r4, #12]
 8012ff6:	e7e3      	b.n	8012fc0 <__smakebuf_r+0xc>
 8012ff8:	4b0d      	ldr	r3, [pc, #52]	; (8013030 <__smakebuf_r+0x7c>)
 8012ffa:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ffc:	89a3      	ldrh	r3, [r4, #12]
 8012ffe:	6020      	str	r0, [r4, #0]
 8013000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013004:	81a3      	strh	r3, [r4, #12]
 8013006:	9b00      	ldr	r3, [sp, #0]
 8013008:	6163      	str	r3, [r4, #20]
 801300a:	9b01      	ldr	r3, [sp, #4]
 801300c:	6120      	str	r0, [r4, #16]
 801300e:	b15b      	cbz	r3, 8013028 <__smakebuf_r+0x74>
 8013010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013014:	4630      	mov	r0, r6
 8013016:	f000 f8d1 	bl	80131bc <_isatty_r>
 801301a:	b128      	cbz	r0, 8013028 <__smakebuf_r+0x74>
 801301c:	89a3      	ldrh	r3, [r4, #12]
 801301e:	f023 0303 	bic.w	r3, r3, #3
 8013022:	f043 0301 	orr.w	r3, r3, #1
 8013026:	81a3      	strh	r3, [r4, #12]
 8013028:	89a0      	ldrh	r0, [r4, #12]
 801302a:	4305      	orrs	r5, r0
 801302c:	81a5      	strh	r5, [r4, #12]
 801302e:	e7cd      	b.n	8012fcc <__smakebuf_r+0x18>
 8013030:	08012dc9 	.word	0x08012dc9

08013034 <_malloc_usable_size_r>:
 8013034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013038:	1f18      	subs	r0, r3, #4
 801303a:	2b00      	cmp	r3, #0
 801303c:	bfbc      	itt	lt
 801303e:	580b      	ldrlt	r3, [r1, r0]
 8013040:	18c0      	addlt	r0, r0, r3
 8013042:	4770      	bx	lr

08013044 <_raise_r>:
 8013044:	291f      	cmp	r1, #31
 8013046:	b538      	push	{r3, r4, r5, lr}
 8013048:	4604      	mov	r4, r0
 801304a:	460d      	mov	r5, r1
 801304c:	d904      	bls.n	8013058 <_raise_r+0x14>
 801304e:	2316      	movs	r3, #22
 8013050:	6003      	str	r3, [r0, #0]
 8013052:	f04f 30ff 	mov.w	r0, #4294967295
 8013056:	bd38      	pop	{r3, r4, r5, pc}
 8013058:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801305a:	b112      	cbz	r2, 8013062 <_raise_r+0x1e>
 801305c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013060:	b94b      	cbnz	r3, 8013076 <_raise_r+0x32>
 8013062:	4620      	mov	r0, r4
 8013064:	f000 f830 	bl	80130c8 <_getpid_r>
 8013068:	462a      	mov	r2, r5
 801306a:	4601      	mov	r1, r0
 801306c:	4620      	mov	r0, r4
 801306e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013072:	f000 b817 	b.w	80130a4 <_kill_r>
 8013076:	2b01      	cmp	r3, #1
 8013078:	d00a      	beq.n	8013090 <_raise_r+0x4c>
 801307a:	1c59      	adds	r1, r3, #1
 801307c:	d103      	bne.n	8013086 <_raise_r+0x42>
 801307e:	2316      	movs	r3, #22
 8013080:	6003      	str	r3, [r0, #0]
 8013082:	2001      	movs	r0, #1
 8013084:	e7e7      	b.n	8013056 <_raise_r+0x12>
 8013086:	2400      	movs	r4, #0
 8013088:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801308c:	4628      	mov	r0, r5
 801308e:	4798      	blx	r3
 8013090:	2000      	movs	r0, #0
 8013092:	e7e0      	b.n	8013056 <_raise_r+0x12>

08013094 <raise>:
 8013094:	4b02      	ldr	r3, [pc, #8]	; (80130a0 <raise+0xc>)
 8013096:	4601      	mov	r1, r0
 8013098:	6818      	ldr	r0, [r3, #0]
 801309a:	f7ff bfd3 	b.w	8013044 <_raise_r>
 801309e:	bf00      	nop
 80130a0:	2000006c 	.word	0x2000006c

080130a4 <_kill_r>:
 80130a4:	b538      	push	{r3, r4, r5, lr}
 80130a6:	4d07      	ldr	r5, [pc, #28]	; (80130c4 <_kill_r+0x20>)
 80130a8:	2300      	movs	r3, #0
 80130aa:	4604      	mov	r4, r0
 80130ac:	4608      	mov	r0, r1
 80130ae:	4611      	mov	r1, r2
 80130b0:	602b      	str	r3, [r5, #0]
 80130b2:	f7f2 fe7d 	bl	8005db0 <_kill>
 80130b6:	1c43      	adds	r3, r0, #1
 80130b8:	d102      	bne.n	80130c0 <_kill_r+0x1c>
 80130ba:	682b      	ldr	r3, [r5, #0]
 80130bc:	b103      	cbz	r3, 80130c0 <_kill_r+0x1c>
 80130be:	6023      	str	r3, [r4, #0]
 80130c0:	bd38      	pop	{r3, r4, r5, pc}
 80130c2:	bf00      	nop
 80130c4:	200063c0 	.word	0x200063c0

080130c8 <_getpid_r>:
 80130c8:	f7f2 be6a 	b.w	8005da0 <_getpid>

080130cc <__sread>:
 80130cc:	b510      	push	{r4, lr}
 80130ce:	460c      	mov	r4, r1
 80130d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130d4:	f000 f894 	bl	8013200 <_read_r>
 80130d8:	2800      	cmp	r0, #0
 80130da:	bfab      	itete	ge
 80130dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80130de:	89a3      	ldrhlt	r3, [r4, #12]
 80130e0:	181b      	addge	r3, r3, r0
 80130e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80130e6:	bfac      	ite	ge
 80130e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80130ea:	81a3      	strhlt	r3, [r4, #12]
 80130ec:	bd10      	pop	{r4, pc}

080130ee <__swrite>:
 80130ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130f2:	461f      	mov	r7, r3
 80130f4:	898b      	ldrh	r3, [r1, #12]
 80130f6:	05db      	lsls	r3, r3, #23
 80130f8:	4605      	mov	r5, r0
 80130fa:	460c      	mov	r4, r1
 80130fc:	4616      	mov	r6, r2
 80130fe:	d505      	bpl.n	801310c <__swrite+0x1e>
 8013100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013104:	2302      	movs	r3, #2
 8013106:	2200      	movs	r2, #0
 8013108:	f000 f868 	bl	80131dc <_lseek_r>
 801310c:	89a3      	ldrh	r3, [r4, #12]
 801310e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013116:	81a3      	strh	r3, [r4, #12]
 8013118:	4632      	mov	r2, r6
 801311a:	463b      	mov	r3, r7
 801311c:	4628      	mov	r0, r5
 801311e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013122:	f000 b817 	b.w	8013154 <_write_r>

08013126 <__sseek>:
 8013126:	b510      	push	{r4, lr}
 8013128:	460c      	mov	r4, r1
 801312a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801312e:	f000 f855 	bl	80131dc <_lseek_r>
 8013132:	1c43      	adds	r3, r0, #1
 8013134:	89a3      	ldrh	r3, [r4, #12]
 8013136:	bf15      	itete	ne
 8013138:	6560      	strne	r0, [r4, #84]	; 0x54
 801313a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801313e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013142:	81a3      	strheq	r3, [r4, #12]
 8013144:	bf18      	it	ne
 8013146:	81a3      	strhne	r3, [r4, #12]
 8013148:	bd10      	pop	{r4, pc}

0801314a <__sclose>:
 801314a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801314e:	f000 b813 	b.w	8013178 <_close_r>
	...

08013154 <_write_r>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	4d07      	ldr	r5, [pc, #28]	; (8013174 <_write_r+0x20>)
 8013158:	4604      	mov	r4, r0
 801315a:	4608      	mov	r0, r1
 801315c:	4611      	mov	r1, r2
 801315e:	2200      	movs	r2, #0
 8013160:	602a      	str	r2, [r5, #0]
 8013162:	461a      	mov	r2, r3
 8013164:	f7f2 fe5b 	bl	8005e1e <_write>
 8013168:	1c43      	adds	r3, r0, #1
 801316a:	d102      	bne.n	8013172 <_write_r+0x1e>
 801316c:	682b      	ldr	r3, [r5, #0]
 801316e:	b103      	cbz	r3, 8013172 <_write_r+0x1e>
 8013170:	6023      	str	r3, [r4, #0]
 8013172:	bd38      	pop	{r3, r4, r5, pc}
 8013174:	200063c0 	.word	0x200063c0

08013178 <_close_r>:
 8013178:	b538      	push	{r3, r4, r5, lr}
 801317a:	4d06      	ldr	r5, [pc, #24]	; (8013194 <_close_r+0x1c>)
 801317c:	2300      	movs	r3, #0
 801317e:	4604      	mov	r4, r0
 8013180:	4608      	mov	r0, r1
 8013182:	602b      	str	r3, [r5, #0]
 8013184:	f7f2 fe67 	bl	8005e56 <_close>
 8013188:	1c43      	adds	r3, r0, #1
 801318a:	d102      	bne.n	8013192 <_close_r+0x1a>
 801318c:	682b      	ldr	r3, [r5, #0]
 801318e:	b103      	cbz	r3, 8013192 <_close_r+0x1a>
 8013190:	6023      	str	r3, [r4, #0]
 8013192:	bd38      	pop	{r3, r4, r5, pc}
 8013194:	200063c0 	.word	0x200063c0

08013198 <_fstat_r>:
 8013198:	b538      	push	{r3, r4, r5, lr}
 801319a:	4d07      	ldr	r5, [pc, #28]	; (80131b8 <_fstat_r+0x20>)
 801319c:	2300      	movs	r3, #0
 801319e:	4604      	mov	r4, r0
 80131a0:	4608      	mov	r0, r1
 80131a2:	4611      	mov	r1, r2
 80131a4:	602b      	str	r3, [r5, #0]
 80131a6:	f7f2 fe62 	bl	8005e6e <_fstat>
 80131aa:	1c43      	adds	r3, r0, #1
 80131ac:	d102      	bne.n	80131b4 <_fstat_r+0x1c>
 80131ae:	682b      	ldr	r3, [r5, #0]
 80131b0:	b103      	cbz	r3, 80131b4 <_fstat_r+0x1c>
 80131b2:	6023      	str	r3, [r4, #0]
 80131b4:	bd38      	pop	{r3, r4, r5, pc}
 80131b6:	bf00      	nop
 80131b8:	200063c0 	.word	0x200063c0

080131bc <_isatty_r>:
 80131bc:	b538      	push	{r3, r4, r5, lr}
 80131be:	4d06      	ldr	r5, [pc, #24]	; (80131d8 <_isatty_r+0x1c>)
 80131c0:	2300      	movs	r3, #0
 80131c2:	4604      	mov	r4, r0
 80131c4:	4608      	mov	r0, r1
 80131c6:	602b      	str	r3, [r5, #0]
 80131c8:	f7f2 fe61 	bl	8005e8e <_isatty>
 80131cc:	1c43      	adds	r3, r0, #1
 80131ce:	d102      	bne.n	80131d6 <_isatty_r+0x1a>
 80131d0:	682b      	ldr	r3, [r5, #0]
 80131d2:	b103      	cbz	r3, 80131d6 <_isatty_r+0x1a>
 80131d4:	6023      	str	r3, [r4, #0]
 80131d6:	bd38      	pop	{r3, r4, r5, pc}
 80131d8:	200063c0 	.word	0x200063c0

080131dc <_lseek_r>:
 80131dc:	b538      	push	{r3, r4, r5, lr}
 80131de:	4d07      	ldr	r5, [pc, #28]	; (80131fc <_lseek_r+0x20>)
 80131e0:	4604      	mov	r4, r0
 80131e2:	4608      	mov	r0, r1
 80131e4:	4611      	mov	r1, r2
 80131e6:	2200      	movs	r2, #0
 80131e8:	602a      	str	r2, [r5, #0]
 80131ea:	461a      	mov	r2, r3
 80131ec:	f7f2 fe5a 	bl	8005ea4 <_lseek>
 80131f0:	1c43      	adds	r3, r0, #1
 80131f2:	d102      	bne.n	80131fa <_lseek_r+0x1e>
 80131f4:	682b      	ldr	r3, [r5, #0]
 80131f6:	b103      	cbz	r3, 80131fa <_lseek_r+0x1e>
 80131f8:	6023      	str	r3, [r4, #0]
 80131fa:	bd38      	pop	{r3, r4, r5, pc}
 80131fc:	200063c0 	.word	0x200063c0

08013200 <_read_r>:
 8013200:	b538      	push	{r3, r4, r5, lr}
 8013202:	4d07      	ldr	r5, [pc, #28]	; (8013220 <_read_r+0x20>)
 8013204:	4604      	mov	r4, r0
 8013206:	4608      	mov	r0, r1
 8013208:	4611      	mov	r1, r2
 801320a:	2200      	movs	r2, #0
 801320c:	602a      	str	r2, [r5, #0]
 801320e:	461a      	mov	r2, r3
 8013210:	f7f2 fde8 	bl	8005de4 <_read>
 8013214:	1c43      	adds	r3, r0, #1
 8013216:	d102      	bne.n	801321e <_read_r+0x1e>
 8013218:	682b      	ldr	r3, [r5, #0]
 801321a:	b103      	cbz	r3, 801321e <_read_r+0x1e>
 801321c:	6023      	str	r3, [r4, #0]
 801321e:	bd38      	pop	{r3, r4, r5, pc}
 8013220:	200063c0 	.word	0x200063c0

08013224 <cosf>:
 8013224:	ee10 3a10 	vmov	r3, s0
 8013228:	b507      	push	{r0, r1, r2, lr}
 801322a:	4a1e      	ldr	r2, [pc, #120]	; (80132a4 <cosf+0x80>)
 801322c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013230:	4293      	cmp	r3, r2
 8013232:	dc06      	bgt.n	8013242 <cosf+0x1e>
 8013234:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80132a8 <cosf+0x84>
 8013238:	b003      	add	sp, #12
 801323a:	f85d eb04 	ldr.w	lr, [sp], #4
 801323e:	f000 be95 	b.w	8013f6c <__kernel_cosf>
 8013242:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013246:	db04      	blt.n	8013252 <cosf+0x2e>
 8013248:	ee30 0a40 	vsub.f32	s0, s0, s0
 801324c:	b003      	add	sp, #12
 801324e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013252:	4668      	mov	r0, sp
 8013254:	f000 fd4a 	bl	8013cec <__ieee754_rem_pio2f>
 8013258:	f000 0003 	and.w	r0, r0, #3
 801325c:	2801      	cmp	r0, #1
 801325e:	d009      	beq.n	8013274 <cosf+0x50>
 8013260:	2802      	cmp	r0, #2
 8013262:	d010      	beq.n	8013286 <cosf+0x62>
 8013264:	b9b0      	cbnz	r0, 8013294 <cosf+0x70>
 8013266:	eddd 0a01 	vldr	s1, [sp, #4]
 801326a:	ed9d 0a00 	vldr	s0, [sp]
 801326e:	f000 fe7d 	bl	8013f6c <__kernel_cosf>
 8013272:	e7eb      	b.n	801324c <cosf+0x28>
 8013274:	eddd 0a01 	vldr	s1, [sp, #4]
 8013278:	ed9d 0a00 	vldr	s0, [sp]
 801327c:	f001 f94c 	bl	8014518 <__kernel_sinf>
 8013280:	eeb1 0a40 	vneg.f32	s0, s0
 8013284:	e7e2      	b.n	801324c <cosf+0x28>
 8013286:	eddd 0a01 	vldr	s1, [sp, #4]
 801328a:	ed9d 0a00 	vldr	s0, [sp]
 801328e:	f000 fe6d 	bl	8013f6c <__kernel_cosf>
 8013292:	e7f5      	b.n	8013280 <cosf+0x5c>
 8013294:	eddd 0a01 	vldr	s1, [sp, #4]
 8013298:	ed9d 0a00 	vldr	s0, [sp]
 801329c:	2001      	movs	r0, #1
 801329e:	f001 f93b 	bl	8014518 <__kernel_sinf>
 80132a2:	e7d3      	b.n	801324c <cosf+0x28>
 80132a4:	3f490fd8 	.word	0x3f490fd8
 80132a8:	00000000 	.word	0x00000000

080132ac <sinf>:
 80132ac:	ee10 3a10 	vmov	r3, s0
 80132b0:	b507      	push	{r0, r1, r2, lr}
 80132b2:	4a1f      	ldr	r2, [pc, #124]	; (8013330 <sinf+0x84>)
 80132b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80132b8:	4293      	cmp	r3, r2
 80132ba:	dc07      	bgt.n	80132cc <sinf+0x20>
 80132bc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8013334 <sinf+0x88>
 80132c0:	2000      	movs	r0, #0
 80132c2:	b003      	add	sp, #12
 80132c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80132c8:	f001 b926 	b.w	8014518 <__kernel_sinf>
 80132cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80132d0:	db04      	blt.n	80132dc <sinf+0x30>
 80132d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80132d6:	b003      	add	sp, #12
 80132d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80132dc:	4668      	mov	r0, sp
 80132de:	f000 fd05 	bl	8013cec <__ieee754_rem_pio2f>
 80132e2:	f000 0003 	and.w	r0, r0, #3
 80132e6:	2801      	cmp	r0, #1
 80132e8:	d00a      	beq.n	8013300 <sinf+0x54>
 80132ea:	2802      	cmp	r0, #2
 80132ec:	d00f      	beq.n	801330e <sinf+0x62>
 80132ee:	b9c0      	cbnz	r0, 8013322 <sinf+0x76>
 80132f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80132f4:	ed9d 0a00 	vldr	s0, [sp]
 80132f8:	2001      	movs	r0, #1
 80132fa:	f001 f90d 	bl	8014518 <__kernel_sinf>
 80132fe:	e7ea      	b.n	80132d6 <sinf+0x2a>
 8013300:	eddd 0a01 	vldr	s1, [sp, #4]
 8013304:	ed9d 0a00 	vldr	s0, [sp]
 8013308:	f000 fe30 	bl	8013f6c <__kernel_cosf>
 801330c:	e7e3      	b.n	80132d6 <sinf+0x2a>
 801330e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013312:	ed9d 0a00 	vldr	s0, [sp]
 8013316:	2001      	movs	r0, #1
 8013318:	f001 f8fe 	bl	8014518 <__kernel_sinf>
 801331c:	eeb1 0a40 	vneg.f32	s0, s0
 8013320:	e7d9      	b.n	80132d6 <sinf+0x2a>
 8013322:	eddd 0a01 	vldr	s1, [sp, #4]
 8013326:	ed9d 0a00 	vldr	s0, [sp]
 801332a:	f000 fe1f 	bl	8013f6c <__kernel_cosf>
 801332e:	e7f5      	b.n	801331c <sinf+0x70>
 8013330:	3f490fd8 	.word	0x3f490fd8
 8013334:	00000000 	.word	0x00000000

08013338 <asinf>:
 8013338:	b508      	push	{r3, lr}
 801333a:	ed2d 8b02 	vpush	{d8}
 801333e:	eeb0 8a40 	vmov.f32	s16, s0
 8013342:	f000 f87f 	bl	8013444 <__ieee754_asinf>
 8013346:	eeb4 8a48 	vcmp.f32	s16, s16
 801334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334e:	eef0 8a40 	vmov.f32	s17, s0
 8013352:	d615      	bvs.n	8013380 <asinf+0x48>
 8013354:	eeb0 0a48 	vmov.f32	s0, s16
 8013358:	f001 fa1c 	bl	8014794 <fabsf>
 801335c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013360:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013368:	dd0a      	ble.n	8013380 <asinf+0x48>
 801336a:	f7fd f847 	bl	80103fc <__errno>
 801336e:	ecbd 8b02 	vpop	{d8}
 8013372:	2321      	movs	r3, #33	; 0x21
 8013374:	6003      	str	r3, [r0, #0]
 8013376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801337a:	4804      	ldr	r0, [pc, #16]	; (801338c <asinf+0x54>)
 801337c:	f001 ba60 	b.w	8014840 <nanf>
 8013380:	eeb0 0a68 	vmov.f32	s0, s17
 8013384:	ecbd 8b02 	vpop	{d8}
 8013388:	bd08      	pop	{r3, pc}
 801338a:	bf00      	nop
 801338c:	08015018 	.word	0x08015018

08013390 <atan2f>:
 8013390:	f000 b93e 	b.w	8013610 <__ieee754_atan2f>

08013394 <powf>:
 8013394:	b508      	push	{r3, lr}
 8013396:	ed2d 8b04 	vpush	{d8-d9}
 801339a:	eeb0 8a60 	vmov.f32	s16, s1
 801339e:	eeb0 9a40 	vmov.f32	s18, s0
 80133a2:	f000 f9d5 	bl	8013750 <__ieee754_powf>
 80133a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80133aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ae:	eef0 8a40 	vmov.f32	s17, s0
 80133b2:	d63e      	bvs.n	8013432 <powf+0x9e>
 80133b4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80133b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133bc:	d112      	bne.n	80133e4 <powf+0x50>
 80133be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80133c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c6:	d039      	beq.n	801343c <powf+0xa8>
 80133c8:	eeb0 0a48 	vmov.f32	s0, s16
 80133cc:	f001 f9e9 	bl	80147a2 <finitef>
 80133d0:	b378      	cbz	r0, 8013432 <powf+0x9e>
 80133d2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80133d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133da:	d52a      	bpl.n	8013432 <powf+0x9e>
 80133dc:	f7fd f80e 	bl	80103fc <__errno>
 80133e0:	2322      	movs	r3, #34	; 0x22
 80133e2:	e014      	b.n	801340e <powf+0x7a>
 80133e4:	f001 f9dd 	bl	80147a2 <finitef>
 80133e8:	b998      	cbnz	r0, 8013412 <powf+0x7e>
 80133ea:	eeb0 0a49 	vmov.f32	s0, s18
 80133ee:	f001 f9d8 	bl	80147a2 <finitef>
 80133f2:	b170      	cbz	r0, 8013412 <powf+0x7e>
 80133f4:	eeb0 0a48 	vmov.f32	s0, s16
 80133f8:	f001 f9d3 	bl	80147a2 <finitef>
 80133fc:	b148      	cbz	r0, 8013412 <powf+0x7e>
 80133fe:	eef4 8a68 	vcmp.f32	s17, s17
 8013402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013406:	d7e9      	bvc.n	80133dc <powf+0x48>
 8013408:	f7fc fff8 	bl	80103fc <__errno>
 801340c:	2321      	movs	r3, #33	; 0x21
 801340e:	6003      	str	r3, [r0, #0]
 8013410:	e00f      	b.n	8013432 <powf+0x9e>
 8013412:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341a:	d10a      	bne.n	8013432 <powf+0x9e>
 801341c:	eeb0 0a49 	vmov.f32	s0, s18
 8013420:	f001 f9bf 	bl	80147a2 <finitef>
 8013424:	b128      	cbz	r0, 8013432 <powf+0x9e>
 8013426:	eeb0 0a48 	vmov.f32	s0, s16
 801342a:	f001 f9ba 	bl	80147a2 <finitef>
 801342e:	2800      	cmp	r0, #0
 8013430:	d1d4      	bne.n	80133dc <powf+0x48>
 8013432:	eeb0 0a68 	vmov.f32	s0, s17
 8013436:	ecbd 8b04 	vpop	{d8-d9}
 801343a:	bd08      	pop	{r3, pc}
 801343c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013440:	e7f7      	b.n	8013432 <powf+0x9e>
	...

08013444 <__ieee754_asinf>:
 8013444:	b538      	push	{r3, r4, r5, lr}
 8013446:	ee10 5a10 	vmov	r5, s0
 801344a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801344e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013452:	ed2d 8b04 	vpush	{d8-d9}
 8013456:	d10c      	bne.n	8013472 <__ieee754_asinf+0x2e>
 8013458:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80135d0 <__ieee754_asinf+0x18c>
 801345c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80135d4 <__ieee754_asinf+0x190>
 8013460:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013464:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013468:	eeb0 0a67 	vmov.f32	s0, s15
 801346c:	ecbd 8b04 	vpop	{d8-d9}
 8013470:	bd38      	pop	{r3, r4, r5, pc}
 8013472:	dd04      	ble.n	801347e <__ieee754_asinf+0x3a>
 8013474:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013478:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801347c:	e7f6      	b.n	801346c <__ieee754_asinf+0x28>
 801347e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013482:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013486:	da0b      	bge.n	80134a0 <__ieee754_asinf+0x5c>
 8013488:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801348c:	da52      	bge.n	8013534 <__ieee754_asinf+0xf0>
 801348e:	eddf 7a52 	vldr	s15, [pc, #328]	; 80135d8 <__ieee754_asinf+0x194>
 8013492:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013496:	eef4 7ae8 	vcmpe.f32	s15, s17
 801349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349e:	dce5      	bgt.n	801346c <__ieee754_asinf+0x28>
 80134a0:	f001 f978 	bl	8014794 <fabsf>
 80134a4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80134a8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80134ac:	ee20 8a08 	vmul.f32	s16, s0, s16
 80134b0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80135dc <__ieee754_asinf+0x198>
 80134b4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80135e0 <__ieee754_asinf+0x19c>
 80134b8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80135e4 <__ieee754_asinf+0x1a0>
 80134bc:	eea8 7a27 	vfma.f32	s14, s16, s15
 80134c0:	eddf 7a49 	vldr	s15, [pc, #292]	; 80135e8 <__ieee754_asinf+0x1a4>
 80134c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80134c8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80135ec <__ieee754_asinf+0x1a8>
 80134cc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80134d0:	eddf 7a47 	vldr	s15, [pc, #284]	; 80135f0 <__ieee754_asinf+0x1ac>
 80134d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80134d8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80135f4 <__ieee754_asinf+0x1b0>
 80134dc:	eea7 9a88 	vfma.f32	s18, s15, s16
 80134e0:	eddf 7a45 	vldr	s15, [pc, #276]	; 80135f8 <__ieee754_asinf+0x1b4>
 80134e4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80134e8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80135fc <__ieee754_asinf+0x1b8>
 80134ec:	eea7 7a88 	vfma.f32	s14, s15, s16
 80134f0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013600 <__ieee754_asinf+0x1bc>
 80134f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80134f8:	eeb0 0a48 	vmov.f32	s0, s16
 80134fc:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013500:	f000 fd30 	bl	8013f64 <__ieee754_sqrtf>
 8013504:	4b3f      	ldr	r3, [pc, #252]	; (8013604 <__ieee754_asinf+0x1c0>)
 8013506:	ee29 9a08 	vmul.f32	s18, s18, s16
 801350a:	429c      	cmp	r4, r3
 801350c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013510:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013514:	dd3d      	ble.n	8013592 <__ieee754_asinf+0x14e>
 8013516:	eea0 0a06 	vfma.f32	s0, s0, s12
 801351a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013608 <__ieee754_asinf+0x1c4>
 801351e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013522:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80135d4 <__ieee754_asinf+0x190>
 8013526:	ee30 0a67 	vsub.f32	s0, s0, s15
 801352a:	2d00      	cmp	r5, #0
 801352c:	bfd8      	it	le
 801352e:	eeb1 0a40 	vnegle.f32	s0, s0
 8013532:	e79b      	b.n	801346c <__ieee754_asinf+0x28>
 8013534:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013538:	eddf 6a28 	vldr	s13, [pc, #160]	; 80135dc <__ieee754_asinf+0x198>
 801353c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80135e0 <__ieee754_asinf+0x19c>
 8013540:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80135f4 <__ieee754_asinf+0x1b0>
 8013544:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013548:	eddf 6a27 	vldr	s13, [pc, #156]	; 80135e8 <__ieee754_asinf+0x1a4>
 801354c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013550:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80135ec <__ieee754_asinf+0x1a8>
 8013554:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013558:	eddf 6a25 	vldr	s13, [pc, #148]	; 80135f0 <__ieee754_asinf+0x1ac>
 801355c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013560:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80135e4 <__ieee754_asinf+0x1a0>
 8013564:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013568:	eddf 6a23 	vldr	s13, [pc, #140]	; 80135f8 <__ieee754_asinf+0x1b4>
 801356c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013570:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80135fc <__ieee754_asinf+0x1b8>
 8013574:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013578:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013600 <__ieee754_asinf+0x1bc>
 801357c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013584:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013588:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801358c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013590:	e76c      	b.n	801346c <__ieee754_asinf+0x28>
 8013592:	ee10 3a10 	vmov	r3, s0
 8013596:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801359a:	f023 030f 	bic.w	r3, r3, #15
 801359e:	ee07 3a10 	vmov	s14, r3
 80135a2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80135a6:	ee70 7a07 	vadd.f32	s15, s0, s14
 80135aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80135ae:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80135b2:	eddf 7a07 	vldr	s15, [pc, #28]	; 80135d0 <__ieee754_asinf+0x18c>
 80135b6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80135ba:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80135be:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801360c <__ieee754_asinf+0x1c8>
 80135c2:	eeb0 6a40 	vmov.f32	s12, s0
 80135c6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80135ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80135ce:	e7aa      	b.n	8013526 <__ieee754_asinf+0xe2>
 80135d0:	b33bbd2e 	.word	0xb33bbd2e
 80135d4:	3fc90fdb 	.word	0x3fc90fdb
 80135d8:	7149f2ca 	.word	0x7149f2ca
 80135dc:	3811ef08 	.word	0x3811ef08
 80135e0:	3a4f7f04 	.word	0x3a4f7f04
 80135e4:	3e2aaaab 	.word	0x3e2aaaab
 80135e8:	bd241146 	.word	0xbd241146
 80135ec:	3e4e0aa8 	.word	0x3e4e0aa8
 80135f0:	bea6b090 	.word	0xbea6b090
 80135f4:	3d9dc62e 	.word	0x3d9dc62e
 80135f8:	bf303361 	.word	0xbf303361
 80135fc:	4001572d 	.word	0x4001572d
 8013600:	c019d139 	.word	0xc019d139
 8013604:	3f799999 	.word	0x3f799999
 8013608:	333bbd2e 	.word	0x333bbd2e
 801360c:	3f490fdb 	.word	0x3f490fdb

08013610 <__ieee754_atan2f>:
 8013610:	ee10 2a90 	vmov	r2, s1
 8013614:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013618:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801361c:	b510      	push	{r4, lr}
 801361e:	eef0 7a40 	vmov.f32	s15, s0
 8013622:	dc06      	bgt.n	8013632 <__ieee754_atan2f+0x22>
 8013624:	ee10 0a10 	vmov	r0, s0
 8013628:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801362c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013630:	dd04      	ble.n	801363c <__ieee754_atan2f+0x2c>
 8013632:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013636:	eeb0 0a67 	vmov.f32	s0, s15
 801363a:	bd10      	pop	{r4, pc}
 801363c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013640:	d103      	bne.n	801364a <__ieee754_atan2f+0x3a>
 8013642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013646:	f000 bfd1 	b.w	80145ec <atanf>
 801364a:	1794      	asrs	r4, r2, #30
 801364c:	f004 0402 	and.w	r4, r4, #2
 8013650:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013654:	b943      	cbnz	r3, 8013668 <__ieee754_atan2f+0x58>
 8013656:	2c02      	cmp	r4, #2
 8013658:	d05e      	beq.n	8013718 <__ieee754_atan2f+0x108>
 801365a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801372c <__ieee754_atan2f+0x11c>
 801365e:	2c03      	cmp	r4, #3
 8013660:	bf08      	it	eq
 8013662:	eef0 7a47 	vmoveq.f32	s15, s14
 8013666:	e7e6      	b.n	8013636 <__ieee754_atan2f+0x26>
 8013668:	b941      	cbnz	r1, 801367c <__ieee754_atan2f+0x6c>
 801366a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013730 <__ieee754_atan2f+0x120>
 801366e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8013734 <__ieee754_atan2f+0x124>
 8013672:	2800      	cmp	r0, #0
 8013674:	bfb8      	it	lt
 8013676:	eef0 7a40 	vmovlt.f32	s15, s0
 801367a:	e7dc      	b.n	8013636 <__ieee754_atan2f+0x26>
 801367c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013680:	d110      	bne.n	80136a4 <__ieee754_atan2f+0x94>
 8013682:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013686:	f104 34ff 	add.w	r4, r4, #4294967295
 801368a:	d107      	bne.n	801369c <__ieee754_atan2f+0x8c>
 801368c:	2c02      	cmp	r4, #2
 801368e:	d846      	bhi.n	801371e <__ieee754_atan2f+0x10e>
 8013690:	4b29      	ldr	r3, [pc, #164]	; (8013738 <__ieee754_atan2f+0x128>)
 8013692:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013696:	edd4 7a00 	vldr	s15, [r4]
 801369a:	e7cc      	b.n	8013636 <__ieee754_atan2f+0x26>
 801369c:	2c02      	cmp	r4, #2
 801369e:	d841      	bhi.n	8013724 <__ieee754_atan2f+0x114>
 80136a0:	4b26      	ldr	r3, [pc, #152]	; (801373c <__ieee754_atan2f+0x12c>)
 80136a2:	e7f6      	b.n	8013692 <__ieee754_atan2f+0x82>
 80136a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80136a8:	d0df      	beq.n	801366a <__ieee754_atan2f+0x5a>
 80136aa:	1a5b      	subs	r3, r3, r1
 80136ac:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80136b0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80136b4:	da1a      	bge.n	80136ec <__ieee754_atan2f+0xdc>
 80136b6:	2a00      	cmp	r2, #0
 80136b8:	da01      	bge.n	80136be <__ieee754_atan2f+0xae>
 80136ba:	313c      	adds	r1, #60	; 0x3c
 80136bc:	db19      	blt.n	80136f2 <__ieee754_atan2f+0xe2>
 80136be:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80136c2:	f001 f867 	bl	8014794 <fabsf>
 80136c6:	f000 ff91 	bl	80145ec <atanf>
 80136ca:	eef0 7a40 	vmov.f32	s15, s0
 80136ce:	2c01      	cmp	r4, #1
 80136d0:	d012      	beq.n	80136f8 <__ieee754_atan2f+0xe8>
 80136d2:	2c02      	cmp	r4, #2
 80136d4:	d017      	beq.n	8013706 <__ieee754_atan2f+0xf6>
 80136d6:	2c00      	cmp	r4, #0
 80136d8:	d0ad      	beq.n	8013636 <__ieee754_atan2f+0x26>
 80136da:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013740 <__ieee754_atan2f+0x130>
 80136de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80136e2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013744 <__ieee754_atan2f+0x134>
 80136e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80136ea:	e7a4      	b.n	8013636 <__ieee754_atan2f+0x26>
 80136ec:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013730 <__ieee754_atan2f+0x120>
 80136f0:	e7ed      	b.n	80136ce <__ieee754_atan2f+0xbe>
 80136f2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013748 <__ieee754_atan2f+0x138>
 80136f6:	e7ea      	b.n	80136ce <__ieee754_atan2f+0xbe>
 80136f8:	ee17 3a90 	vmov	r3, s15
 80136fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013700:	ee07 3a90 	vmov	s15, r3
 8013704:	e797      	b.n	8013636 <__ieee754_atan2f+0x26>
 8013706:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013740 <__ieee754_atan2f+0x130>
 801370a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801370e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013744 <__ieee754_atan2f+0x134>
 8013712:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013716:	e78e      	b.n	8013636 <__ieee754_atan2f+0x26>
 8013718:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013744 <__ieee754_atan2f+0x134>
 801371c:	e78b      	b.n	8013636 <__ieee754_atan2f+0x26>
 801371e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801374c <__ieee754_atan2f+0x13c>
 8013722:	e788      	b.n	8013636 <__ieee754_atan2f+0x26>
 8013724:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013748 <__ieee754_atan2f+0x138>
 8013728:	e785      	b.n	8013636 <__ieee754_atan2f+0x26>
 801372a:	bf00      	nop
 801372c:	c0490fdb 	.word	0xc0490fdb
 8013730:	3fc90fdb 	.word	0x3fc90fdb
 8013734:	bfc90fdb 	.word	0xbfc90fdb
 8013738:	08015184 	.word	0x08015184
 801373c:	08015190 	.word	0x08015190
 8013740:	33bbbd2e 	.word	0x33bbbd2e
 8013744:	40490fdb 	.word	0x40490fdb
 8013748:	00000000 	.word	0x00000000
 801374c:	3f490fdb 	.word	0x3f490fdb

08013750 <__ieee754_powf>:
 8013750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013754:	ee10 4a90 	vmov	r4, s1
 8013758:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801375c:	ed2d 8b02 	vpush	{d8}
 8013760:	ee10 6a10 	vmov	r6, s0
 8013764:	eeb0 8a40 	vmov.f32	s16, s0
 8013768:	eef0 8a60 	vmov.f32	s17, s1
 801376c:	d10c      	bne.n	8013788 <__ieee754_powf+0x38>
 801376e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8013772:	0076      	lsls	r6, r6, #1
 8013774:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8013778:	f240 8296 	bls.w	8013ca8 <__ieee754_powf+0x558>
 801377c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013780:	ecbd 8b02 	vpop	{d8}
 8013784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013788:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801378c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013790:	dcf4      	bgt.n	801377c <__ieee754_powf+0x2c>
 8013792:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8013796:	dd08      	ble.n	80137aa <__ieee754_powf+0x5a>
 8013798:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 801379c:	d1ee      	bne.n	801377c <__ieee754_powf+0x2c>
 801379e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80137a2:	0064      	lsls	r4, r4, #1
 80137a4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80137a8:	e7e6      	b.n	8013778 <__ieee754_powf+0x28>
 80137aa:	2e00      	cmp	r6, #0
 80137ac:	da20      	bge.n	80137f0 <__ieee754_powf+0xa0>
 80137ae:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80137b2:	da2d      	bge.n	8013810 <__ieee754_powf+0xc0>
 80137b4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80137b8:	f2c0 827f 	blt.w	8013cba <__ieee754_powf+0x56a>
 80137bc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80137c0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80137c4:	fa48 f703 	asr.w	r7, r8, r3
 80137c8:	fa07 f303 	lsl.w	r3, r7, r3
 80137cc:	4543      	cmp	r3, r8
 80137ce:	f040 8274 	bne.w	8013cba <__ieee754_powf+0x56a>
 80137d2:	f007 0701 	and.w	r7, r7, #1
 80137d6:	f1c7 0702 	rsb	r7, r7, #2
 80137da:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80137de:	d11f      	bne.n	8013820 <__ieee754_powf+0xd0>
 80137e0:	2c00      	cmp	r4, #0
 80137e2:	f280 8267 	bge.w	8013cb4 <__ieee754_powf+0x564>
 80137e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80137ea:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80137ee:	e7c7      	b.n	8013780 <__ieee754_powf+0x30>
 80137f0:	2700      	movs	r7, #0
 80137f2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80137f6:	d1f0      	bne.n	80137da <__ieee754_powf+0x8a>
 80137f8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80137fc:	f000 8254 	beq.w	8013ca8 <__ieee754_powf+0x558>
 8013800:	dd08      	ble.n	8013814 <__ieee754_powf+0xc4>
 8013802:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8013b0c <__ieee754_powf+0x3bc>
 8013806:	2c00      	cmp	r4, #0
 8013808:	bfa8      	it	ge
 801380a:	eeb0 0a68 	vmovge.f32	s0, s17
 801380e:	e7b7      	b.n	8013780 <__ieee754_powf+0x30>
 8013810:	2702      	movs	r7, #2
 8013812:	e7ee      	b.n	80137f2 <__ieee754_powf+0xa2>
 8013814:	2c00      	cmp	r4, #0
 8013816:	f280 824a 	bge.w	8013cae <__ieee754_powf+0x55e>
 801381a:	eeb1 0a68 	vneg.f32	s0, s17
 801381e:	e7af      	b.n	8013780 <__ieee754_powf+0x30>
 8013820:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013824:	d102      	bne.n	801382c <__ieee754_powf+0xdc>
 8013826:	ee28 0a08 	vmul.f32	s0, s16, s16
 801382a:	e7a9      	b.n	8013780 <__ieee754_powf+0x30>
 801382c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013830:	eeb0 0a48 	vmov.f32	s0, s16
 8013834:	d107      	bne.n	8013846 <__ieee754_powf+0xf6>
 8013836:	2e00      	cmp	r6, #0
 8013838:	db05      	blt.n	8013846 <__ieee754_powf+0xf6>
 801383a:	ecbd 8b02 	vpop	{d8}
 801383e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013842:	f000 bb8f 	b.w	8013f64 <__ieee754_sqrtf>
 8013846:	f000 ffa5 	bl	8014794 <fabsf>
 801384a:	b125      	cbz	r5, 8013856 <__ieee754_powf+0x106>
 801384c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8013850:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013854:	d116      	bne.n	8013884 <__ieee754_powf+0x134>
 8013856:	2c00      	cmp	r4, #0
 8013858:	bfbc      	itt	lt
 801385a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801385e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013862:	2e00      	cmp	r6, #0
 8013864:	da8c      	bge.n	8013780 <__ieee754_powf+0x30>
 8013866:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801386a:	ea55 0307 	orrs.w	r3, r5, r7
 801386e:	d104      	bne.n	801387a <__ieee754_powf+0x12a>
 8013870:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013874:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013878:	e782      	b.n	8013780 <__ieee754_powf+0x30>
 801387a:	2f01      	cmp	r7, #1
 801387c:	d180      	bne.n	8013780 <__ieee754_powf+0x30>
 801387e:	eeb1 0a40 	vneg.f32	s0, s0
 8013882:	e77d      	b.n	8013780 <__ieee754_powf+0x30>
 8013884:	0ff0      	lsrs	r0, r6, #31
 8013886:	3801      	subs	r0, #1
 8013888:	ea57 0300 	orrs.w	r3, r7, r0
 801388c:	d104      	bne.n	8013898 <__ieee754_powf+0x148>
 801388e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013892:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013896:	e773      	b.n	8013780 <__ieee754_powf+0x30>
 8013898:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801389c:	dd74      	ble.n	8013988 <__ieee754_powf+0x238>
 801389e:	4b9c      	ldr	r3, [pc, #624]	; (8013b10 <__ieee754_powf+0x3c0>)
 80138a0:	429d      	cmp	r5, r3
 80138a2:	dc08      	bgt.n	80138b6 <__ieee754_powf+0x166>
 80138a4:	2c00      	cmp	r4, #0
 80138a6:	da0b      	bge.n	80138c0 <__ieee754_powf+0x170>
 80138a8:	2000      	movs	r0, #0
 80138aa:	ecbd 8b02 	vpop	{d8}
 80138ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138b2:	f000 be95 	b.w	80145e0 <__math_oflowf>
 80138b6:	4b97      	ldr	r3, [pc, #604]	; (8013b14 <__ieee754_powf+0x3c4>)
 80138b8:	429d      	cmp	r5, r3
 80138ba:	dd08      	ble.n	80138ce <__ieee754_powf+0x17e>
 80138bc:	2c00      	cmp	r4, #0
 80138be:	dcf3      	bgt.n	80138a8 <__ieee754_powf+0x158>
 80138c0:	2000      	movs	r0, #0
 80138c2:	ecbd 8b02 	vpop	{d8}
 80138c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138ca:	f000 be83 	b.w	80145d4 <__math_uflowf>
 80138ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80138d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80138d6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013b18 <__ieee754_powf+0x3c8>
 80138da:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80138de:	eee0 6a67 	vfms.f32	s13, s0, s15
 80138e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80138e6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80138ea:	ee20 7a00 	vmul.f32	s14, s0, s0
 80138ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138f2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013b1c <__ieee754_powf+0x3cc>
 80138f6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80138fa:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8013b20 <__ieee754_powf+0x3d0>
 80138fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013902:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013b24 <__ieee754_powf+0x3d4>
 8013906:	eef0 6a67 	vmov.f32	s13, s15
 801390a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801390e:	ee16 3a90 	vmov	r3, s13
 8013912:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013916:	f023 030f 	bic.w	r3, r3, #15
 801391a:	ee00 3a90 	vmov	s1, r3
 801391e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8013922:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013926:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801392a:	f024 040f 	bic.w	r4, r4, #15
 801392e:	ee07 4a10 	vmov	s14, r4
 8013932:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013936:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801393a:	ee07 3a90 	vmov	s15, r3
 801393e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013942:	3f01      	subs	r7, #1
 8013944:	ea57 0200 	orrs.w	r2, r7, r0
 8013948:	ee07 4a10 	vmov	s14, r4
 801394c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013950:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013954:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013958:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801395c:	ee17 4a10 	vmov	r4, s14
 8013960:	bf08      	it	eq
 8013962:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013966:	2c00      	cmp	r4, #0
 8013968:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801396c:	f340 817e 	ble.w	8013c6c <__ieee754_powf+0x51c>
 8013970:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013974:	f340 80f8 	ble.w	8013b68 <__ieee754_powf+0x418>
 8013978:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013980:	bf4c      	ite	mi
 8013982:	2001      	movmi	r0, #1
 8013984:	2000      	movpl	r0, #0
 8013986:	e790      	b.n	80138aa <__ieee754_powf+0x15a>
 8013988:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801398c:	bf01      	itttt	eq
 801398e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013b28 <__ieee754_powf+0x3d8>
 8013992:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013996:	f06f 0217 	mvneq.w	r2, #23
 801399a:	ee17 5a90 	vmoveq	r5, s15
 801399e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80139a2:	bf18      	it	ne
 80139a4:	2200      	movne	r2, #0
 80139a6:	3b7f      	subs	r3, #127	; 0x7f
 80139a8:	4413      	add	r3, r2
 80139aa:	4a60      	ldr	r2, [pc, #384]	; (8013b2c <__ieee754_powf+0x3dc>)
 80139ac:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80139b0:	4295      	cmp	r5, r2
 80139b2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80139b6:	dd06      	ble.n	80139c6 <__ieee754_powf+0x276>
 80139b8:	4a5d      	ldr	r2, [pc, #372]	; (8013b30 <__ieee754_powf+0x3e0>)
 80139ba:	4295      	cmp	r5, r2
 80139bc:	f340 80a4 	ble.w	8013b08 <__ieee754_powf+0x3b8>
 80139c0:	3301      	adds	r3, #1
 80139c2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80139c6:	2500      	movs	r5, #0
 80139c8:	4a5a      	ldr	r2, [pc, #360]	; (8013b34 <__ieee754_powf+0x3e4>)
 80139ca:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80139ce:	ee07 1a90 	vmov	s15, r1
 80139d2:	ed92 7a00 	vldr	s14, [r2]
 80139d6:	4a58      	ldr	r2, [pc, #352]	; (8013b38 <__ieee754_powf+0x3e8>)
 80139d8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80139dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80139e0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80139e4:	1049      	asrs	r1, r1, #1
 80139e6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80139ea:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80139ee:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80139f2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80139f6:	ee06 1a10 	vmov	s12, r1
 80139fa:	ee65 4a26 	vmul.f32	s9, s10, s13
 80139fe:	ee36 7a47 	vsub.f32	s14, s12, s14
 8013a02:	ee14 6a90 	vmov	r6, s9
 8013a06:	4016      	ands	r6, r2
 8013a08:	ee05 6a90 	vmov	s11, r6
 8013a0c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a14:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013b3c <__ieee754_powf+0x3ec>
 8013a18:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8013a1c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013a20:	ee25 6a26 	vmul.f32	s12, s10, s13
 8013a24:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013b40 <__ieee754_powf+0x3f0>
 8013a28:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013a2c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013b44 <__ieee754_powf+0x3f4>
 8013a30:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013a34:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013b18 <__ieee754_powf+0x3c8>
 8013a38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013a3c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8013b48 <__ieee754_powf+0x3f8>
 8013a40:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013a44:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013b4c <__ieee754_powf+0x3fc>
 8013a48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013a4c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013a50:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8013a54:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013a58:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013a5c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013a60:	eef0 7a45 	vmov.f32	s15, s10
 8013a64:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a6c:	ee17 1a90 	vmov	r1, s15
 8013a70:	4011      	ands	r1, r2
 8013a72:	ee07 1a90 	vmov	s15, r1
 8013a76:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8013a7a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8013a7e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013a82:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013a86:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013a8a:	eeb0 6a47 	vmov.f32	s12, s14
 8013a8e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013a92:	ee16 1a10 	vmov	r1, s12
 8013a96:	4011      	ands	r1, r2
 8013a98:	ee06 1a90 	vmov	s13, r1
 8013a9c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8013aa0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013b50 <__ieee754_powf+0x400>
 8013aa4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013b54 <__ieee754_powf+0x404>
 8013aa8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013aac:	ee06 1a10 	vmov	s12, r1
 8013ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ab4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013b58 <__ieee754_powf+0x408>
 8013ab8:	4928      	ldr	r1, [pc, #160]	; (8013b5c <__ieee754_powf+0x40c>)
 8013aba:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013abe:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013ac2:	edd1 7a00 	vldr	s15, [r1]
 8013ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013aca:	ee07 3a90 	vmov	s15, r3
 8013ace:	4b24      	ldr	r3, [pc, #144]	; (8013b60 <__ieee754_powf+0x410>)
 8013ad0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013ad4:	eef0 7a47 	vmov.f32	s15, s14
 8013ad8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013adc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013ae0:	edd5 0a00 	vldr	s1, [r5]
 8013ae4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013aec:	ee17 3a90 	vmov	r3, s15
 8013af0:	4013      	ands	r3, r2
 8013af2:	ee07 3a90 	vmov	s15, r3
 8013af6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013afa:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8013afe:	eee6 6a65 	vfms.f32	s13, s12, s11
 8013b02:	ee77 7a66 	vsub.f32	s15, s14, s13
 8013b06:	e70e      	b.n	8013926 <__ieee754_powf+0x1d6>
 8013b08:	2501      	movs	r5, #1
 8013b0a:	e75d      	b.n	80139c8 <__ieee754_powf+0x278>
 8013b0c:	00000000 	.word	0x00000000
 8013b10:	3f7ffff3 	.word	0x3f7ffff3
 8013b14:	3f800007 	.word	0x3f800007
 8013b18:	3eaaaaab 	.word	0x3eaaaaab
 8013b1c:	3fb8aa3b 	.word	0x3fb8aa3b
 8013b20:	36eca570 	.word	0x36eca570
 8013b24:	3fb8aa00 	.word	0x3fb8aa00
 8013b28:	4b800000 	.word	0x4b800000
 8013b2c:	001cc471 	.word	0x001cc471
 8013b30:	005db3d6 	.word	0x005db3d6
 8013b34:	0801519c 	.word	0x0801519c
 8013b38:	fffff000 	.word	0xfffff000
 8013b3c:	3e6c3255 	.word	0x3e6c3255
 8013b40:	3e53f142 	.word	0x3e53f142
 8013b44:	3e8ba305 	.word	0x3e8ba305
 8013b48:	3edb6db7 	.word	0x3edb6db7
 8013b4c:	3f19999a 	.word	0x3f19999a
 8013b50:	3f76384f 	.word	0x3f76384f
 8013b54:	3f763800 	.word	0x3f763800
 8013b58:	369dc3a0 	.word	0x369dc3a0
 8013b5c:	080151ac 	.word	0x080151ac
 8013b60:	080151a4 	.word	0x080151a4
 8013b64:	3338aa3c 	.word	0x3338aa3c
 8013b68:	f040 8095 	bne.w	8013c96 <__ieee754_powf+0x546>
 8013b6c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013b64 <__ieee754_powf+0x414>
 8013b70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013b74:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013b78:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b80:	f73f aefa 	bgt.w	8013978 <__ieee754_powf+0x228>
 8013b84:	15db      	asrs	r3, r3, #23
 8013b86:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8013b8a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013b8e:	4103      	asrs	r3, r0
 8013b90:	4423      	add	r3, r4
 8013b92:	494b      	ldr	r1, [pc, #300]	; (8013cc0 <__ieee754_powf+0x570>)
 8013b94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013b98:	3a7f      	subs	r2, #127	; 0x7f
 8013b9a:	4111      	asrs	r1, r2
 8013b9c:	ea23 0101 	bic.w	r1, r3, r1
 8013ba0:	ee07 1a10 	vmov	s14, r1
 8013ba4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013bac:	f1c2 0217 	rsb	r2, r2, #23
 8013bb0:	4110      	asrs	r0, r2
 8013bb2:	2c00      	cmp	r4, #0
 8013bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bb8:	bfb8      	it	lt
 8013bba:	4240      	neglt	r0, r0
 8013bbc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013bc0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8013cc4 <__ieee754_powf+0x574>
 8013bc4:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013cc8 <__ieee754_powf+0x578>
 8013bc8:	ee17 3a10 	vmov	r3, s14
 8013bcc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013bd0:	f023 030f 	bic.w	r3, r3, #15
 8013bd4:	ee07 3a10 	vmov	s14, r3
 8013bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bdc:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013be0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013be4:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013ccc <__ieee754_powf+0x57c>
 8013be8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8013bec:	eef0 7a40 	vmov.f32	s15, s0
 8013bf0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013bf4:	eeb0 6a67 	vmov.f32	s12, s15
 8013bf8:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013bfc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013c00:	ee30 0a46 	vsub.f32	s0, s0, s12
 8013c04:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013cd0 <__ieee754_powf+0x580>
 8013c08:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8013cd4 <__ieee754_powf+0x584>
 8013c0c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013c10:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013cd8 <__ieee754_powf+0x588>
 8013c14:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013c18:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013cdc <__ieee754_powf+0x58c>
 8013c1c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013c20:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013ce0 <__ieee754_powf+0x590>
 8013c24:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013c28:	eef0 6a67 	vmov.f32	s13, s15
 8013c2c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8013c30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013c34:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8013c38:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013c3c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013c40:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013c44:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013c48:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013c4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013c50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c54:	ee10 3a10 	vmov	r3, s0
 8013c58:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013c5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013c60:	da1f      	bge.n	8013ca2 <__ieee754_powf+0x552>
 8013c62:	f000 fdf3 	bl	801484c <scalbnf>
 8013c66:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013c6a:	e589      	b.n	8013780 <__ieee754_powf+0x30>
 8013c6c:	4a1d      	ldr	r2, [pc, #116]	; (8013ce4 <__ieee754_powf+0x594>)
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	dd07      	ble.n	8013c82 <__ieee754_powf+0x532>
 8013c72:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c7a:	bf4c      	ite	mi
 8013c7c:	2001      	movmi	r0, #1
 8013c7e:	2000      	movpl	r0, #0
 8013c80:	e61f      	b.n	80138c2 <__ieee754_powf+0x172>
 8013c82:	d108      	bne.n	8013c96 <__ieee754_powf+0x546>
 8013c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c88:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c90:	f6ff af78 	blt.w	8013b84 <__ieee754_powf+0x434>
 8013c94:	e7ed      	b.n	8013c72 <__ieee754_powf+0x522>
 8013c96:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013c9a:	f73f af73 	bgt.w	8013b84 <__ieee754_powf+0x434>
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	e78c      	b.n	8013bbc <__ieee754_powf+0x46c>
 8013ca2:	ee00 3a10 	vmov	s0, r3
 8013ca6:	e7de      	b.n	8013c66 <__ieee754_powf+0x516>
 8013ca8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013cac:	e568      	b.n	8013780 <__ieee754_powf+0x30>
 8013cae:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013ce8 <__ieee754_powf+0x598>
 8013cb2:	e565      	b.n	8013780 <__ieee754_powf+0x30>
 8013cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8013cb8:	e562      	b.n	8013780 <__ieee754_powf+0x30>
 8013cba:	2700      	movs	r7, #0
 8013cbc:	e58d      	b.n	80137da <__ieee754_powf+0x8a>
 8013cbe:	bf00      	nop
 8013cc0:	007fffff 	.word	0x007fffff
 8013cc4:	35bfbe8c 	.word	0x35bfbe8c
 8013cc8:	3f317200 	.word	0x3f317200
 8013ccc:	3f317218 	.word	0x3f317218
 8013cd0:	b5ddea0e 	.word	0xb5ddea0e
 8013cd4:	3331bb4c 	.word	0x3331bb4c
 8013cd8:	388ab355 	.word	0x388ab355
 8013cdc:	bb360b61 	.word	0xbb360b61
 8013ce0:	3e2aaaab 	.word	0x3e2aaaab
 8013ce4:	43160000 	.word	0x43160000
 8013ce8:	00000000 	.word	0x00000000

08013cec <__ieee754_rem_pio2f>:
 8013cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cee:	ee10 6a10 	vmov	r6, s0
 8013cf2:	4b8e      	ldr	r3, [pc, #568]	; (8013f2c <__ieee754_rem_pio2f+0x240>)
 8013cf4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013cf8:	429d      	cmp	r5, r3
 8013cfa:	b087      	sub	sp, #28
 8013cfc:	eef0 7a40 	vmov.f32	s15, s0
 8013d00:	4604      	mov	r4, r0
 8013d02:	dc05      	bgt.n	8013d10 <__ieee754_rem_pio2f+0x24>
 8013d04:	2300      	movs	r3, #0
 8013d06:	ed80 0a00 	vstr	s0, [r0]
 8013d0a:	6043      	str	r3, [r0, #4]
 8013d0c:	2000      	movs	r0, #0
 8013d0e:	e01a      	b.n	8013d46 <__ieee754_rem_pio2f+0x5a>
 8013d10:	4b87      	ldr	r3, [pc, #540]	; (8013f30 <__ieee754_rem_pio2f+0x244>)
 8013d12:	429d      	cmp	r5, r3
 8013d14:	dc46      	bgt.n	8013da4 <__ieee754_rem_pio2f+0xb8>
 8013d16:	2e00      	cmp	r6, #0
 8013d18:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013f34 <__ieee754_rem_pio2f+0x248>
 8013d1c:	4b86      	ldr	r3, [pc, #536]	; (8013f38 <__ieee754_rem_pio2f+0x24c>)
 8013d1e:	f025 050f 	bic.w	r5, r5, #15
 8013d22:	dd1f      	ble.n	8013d64 <__ieee754_rem_pio2f+0x78>
 8013d24:	429d      	cmp	r5, r3
 8013d26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d2a:	d00e      	beq.n	8013d4a <__ieee754_rem_pio2f+0x5e>
 8013d2c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013f3c <__ieee754_rem_pio2f+0x250>
 8013d30:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013d34:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d38:	ed80 0a00 	vstr	s0, [r0]
 8013d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d40:	2001      	movs	r0, #1
 8013d42:	edc4 7a01 	vstr	s15, [r4, #4]
 8013d46:	b007      	add	sp, #28
 8013d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d4a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013f40 <__ieee754_rem_pio2f+0x254>
 8013d4e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013f44 <__ieee754_rem_pio2f+0x258>
 8013d52:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d56:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013d5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d5e:	edc0 6a00 	vstr	s13, [r0]
 8013d62:	e7eb      	b.n	8013d3c <__ieee754_rem_pio2f+0x50>
 8013d64:	429d      	cmp	r5, r3
 8013d66:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013d6a:	d00e      	beq.n	8013d8a <__ieee754_rem_pio2f+0x9e>
 8013d6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013f3c <__ieee754_rem_pio2f+0x250>
 8013d70:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013d74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d78:	ed80 0a00 	vstr	s0, [r0]
 8013d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d80:	f04f 30ff 	mov.w	r0, #4294967295
 8013d84:	edc4 7a01 	vstr	s15, [r4, #4]
 8013d88:	e7dd      	b.n	8013d46 <__ieee754_rem_pio2f+0x5a>
 8013d8a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013f40 <__ieee754_rem_pio2f+0x254>
 8013d8e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013f44 <__ieee754_rem_pio2f+0x258>
 8013d92:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013d96:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013d9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d9e:	edc0 6a00 	vstr	s13, [r0]
 8013da2:	e7eb      	b.n	8013d7c <__ieee754_rem_pio2f+0x90>
 8013da4:	4b68      	ldr	r3, [pc, #416]	; (8013f48 <__ieee754_rem_pio2f+0x25c>)
 8013da6:	429d      	cmp	r5, r3
 8013da8:	dc72      	bgt.n	8013e90 <__ieee754_rem_pio2f+0x1a4>
 8013daa:	f000 fcf3 	bl	8014794 <fabsf>
 8013dae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013f4c <__ieee754_rem_pio2f+0x260>
 8013db2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013db6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013dc2:	ee17 0a90 	vmov	r0, s15
 8013dc6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013f34 <__ieee754_rem_pio2f+0x248>
 8013dca:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013dce:	281f      	cmp	r0, #31
 8013dd0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013f3c <__ieee754_rem_pio2f+0x250>
 8013dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dd8:	eeb1 6a47 	vneg.f32	s12, s14
 8013ddc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013de0:	ee16 2a90 	vmov	r2, s13
 8013de4:	dc1c      	bgt.n	8013e20 <__ieee754_rem_pio2f+0x134>
 8013de6:	495a      	ldr	r1, [pc, #360]	; (8013f50 <__ieee754_rem_pio2f+0x264>)
 8013de8:	1e47      	subs	r7, r0, #1
 8013dea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8013dee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013df2:	428b      	cmp	r3, r1
 8013df4:	d014      	beq.n	8013e20 <__ieee754_rem_pio2f+0x134>
 8013df6:	6022      	str	r2, [r4, #0]
 8013df8:	ed94 7a00 	vldr	s14, [r4]
 8013dfc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013e00:	2e00      	cmp	r6, #0
 8013e02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013e06:	ed84 0a01 	vstr	s0, [r4, #4]
 8013e0a:	da9c      	bge.n	8013d46 <__ieee754_rem_pio2f+0x5a>
 8013e0c:	eeb1 7a47 	vneg.f32	s14, s14
 8013e10:	eeb1 0a40 	vneg.f32	s0, s0
 8013e14:	ed84 7a00 	vstr	s14, [r4]
 8013e18:	ed84 0a01 	vstr	s0, [r4, #4]
 8013e1c:	4240      	negs	r0, r0
 8013e1e:	e792      	b.n	8013d46 <__ieee754_rem_pio2f+0x5a>
 8013e20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013e24:	15eb      	asrs	r3, r5, #23
 8013e26:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8013e2a:	2d08      	cmp	r5, #8
 8013e2c:	dde3      	ble.n	8013df6 <__ieee754_rem_pio2f+0x10a>
 8013e2e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013f40 <__ieee754_rem_pio2f+0x254>
 8013e32:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013f44 <__ieee754_rem_pio2f+0x258>
 8013e36:	eef0 6a40 	vmov.f32	s13, s0
 8013e3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013e3e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013e42:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013e46:	eef0 7a40 	vmov.f32	s15, s0
 8013e4a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013e4e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013e52:	ee15 2a90 	vmov	r2, s11
 8013e56:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013e5a:	1a5b      	subs	r3, r3, r1
 8013e5c:	2b19      	cmp	r3, #25
 8013e5e:	dc04      	bgt.n	8013e6a <__ieee754_rem_pio2f+0x17e>
 8013e60:	edc4 5a00 	vstr	s11, [r4]
 8013e64:	eeb0 0a66 	vmov.f32	s0, s13
 8013e68:	e7c6      	b.n	8013df8 <__ieee754_rem_pio2f+0x10c>
 8013e6a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013f54 <__ieee754_rem_pio2f+0x268>
 8013e6e:	eeb0 0a66 	vmov.f32	s0, s13
 8013e72:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013e76:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013e7a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013f58 <__ieee754_rem_pio2f+0x26c>
 8013e7e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013e82:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013e86:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013e8a:	ed84 7a00 	vstr	s14, [r4]
 8013e8e:	e7b3      	b.n	8013df8 <__ieee754_rem_pio2f+0x10c>
 8013e90:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013e94:	db06      	blt.n	8013ea4 <__ieee754_rem_pio2f+0x1b8>
 8013e96:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013e9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8013e9e:	edc0 7a00 	vstr	s15, [r0]
 8013ea2:	e733      	b.n	8013d0c <__ieee754_rem_pio2f+0x20>
 8013ea4:	15ea      	asrs	r2, r5, #23
 8013ea6:	3a86      	subs	r2, #134	; 0x86
 8013ea8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013eac:	ee07 3a90 	vmov	s15, r3
 8013eb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013eb4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013f5c <__ieee754_rem_pio2f+0x270>
 8013eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ec0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013ec4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ec8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013ecc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ed4:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013ed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013edc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee4:	edcd 7a05 	vstr	s15, [sp, #20]
 8013ee8:	d11e      	bne.n	8013f28 <__ieee754_rem_pio2f+0x23c>
 8013eea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef2:	bf14      	ite	ne
 8013ef4:	2302      	movne	r3, #2
 8013ef6:	2301      	moveq	r3, #1
 8013ef8:	4919      	ldr	r1, [pc, #100]	; (8013f60 <__ieee754_rem_pio2f+0x274>)
 8013efa:	9101      	str	r1, [sp, #4]
 8013efc:	2102      	movs	r1, #2
 8013efe:	9100      	str	r1, [sp, #0]
 8013f00:	a803      	add	r0, sp, #12
 8013f02:	4621      	mov	r1, r4
 8013f04:	f000 f892 	bl	801402c <__kernel_rem_pio2f>
 8013f08:	2e00      	cmp	r6, #0
 8013f0a:	f6bf af1c 	bge.w	8013d46 <__ieee754_rem_pio2f+0x5a>
 8013f0e:	edd4 7a00 	vldr	s15, [r4]
 8013f12:	eef1 7a67 	vneg.f32	s15, s15
 8013f16:	edc4 7a00 	vstr	s15, [r4]
 8013f1a:	edd4 7a01 	vldr	s15, [r4, #4]
 8013f1e:	eef1 7a67 	vneg.f32	s15, s15
 8013f22:	edc4 7a01 	vstr	s15, [r4, #4]
 8013f26:	e779      	b.n	8013e1c <__ieee754_rem_pio2f+0x130>
 8013f28:	2303      	movs	r3, #3
 8013f2a:	e7e5      	b.n	8013ef8 <__ieee754_rem_pio2f+0x20c>
 8013f2c:	3f490fd8 	.word	0x3f490fd8
 8013f30:	4016cbe3 	.word	0x4016cbe3
 8013f34:	3fc90f80 	.word	0x3fc90f80
 8013f38:	3fc90fd0 	.word	0x3fc90fd0
 8013f3c:	37354443 	.word	0x37354443
 8013f40:	37354400 	.word	0x37354400
 8013f44:	2e85a308 	.word	0x2e85a308
 8013f48:	43490f80 	.word	0x43490f80
 8013f4c:	3f22f984 	.word	0x3f22f984
 8013f50:	080151b4 	.word	0x080151b4
 8013f54:	2e85a300 	.word	0x2e85a300
 8013f58:	248d3132 	.word	0x248d3132
 8013f5c:	43800000 	.word	0x43800000
 8013f60:	08015234 	.word	0x08015234

08013f64 <__ieee754_sqrtf>:
 8013f64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013f68:	4770      	bx	lr
	...

08013f6c <__kernel_cosf>:
 8013f6c:	ee10 3a10 	vmov	r3, s0
 8013f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013f78:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013f7c:	da05      	bge.n	8013f8a <__kernel_cosf+0x1e>
 8013f7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013f82:	ee17 2a90 	vmov	r2, s15
 8013f86:	2a00      	cmp	r2, #0
 8013f88:	d03d      	beq.n	8014006 <__kernel_cosf+0x9a>
 8013f8a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8013f8e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801400c <__kernel_cosf+0xa0>
 8013f92:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8014010 <__kernel_cosf+0xa4>
 8013f96:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8014014 <__kernel_cosf+0xa8>
 8013f9a:	4a1f      	ldr	r2, [pc, #124]	; (8014018 <__kernel_cosf+0xac>)
 8013f9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801401c <__kernel_cosf+0xb0>
 8013fa6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013faa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8014020 <__kernel_cosf+0xb4>
 8013fae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013fb2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8014024 <__kernel_cosf+0xb8>
 8013fb6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013fba:	eeb0 7a66 	vmov.f32	s14, s13
 8013fbe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013fc2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013fc6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8013fca:	ee67 6a25 	vmul.f32	s13, s14, s11
 8013fce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8013fd2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013fd6:	dc04      	bgt.n	8013fe2 <__kernel_cosf+0x76>
 8013fd8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013fdc:	ee36 0a47 	vsub.f32	s0, s12, s14
 8013fe0:	4770      	bx	lr
 8013fe2:	4a11      	ldr	r2, [pc, #68]	; (8014028 <__kernel_cosf+0xbc>)
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	bfda      	itte	le
 8013fe8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013fec:	ee06 3a90 	vmovle	s13, r3
 8013ff0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8013ff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013ff8:	ee36 0a66 	vsub.f32	s0, s12, s13
 8013ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014000:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014004:	4770      	bx	lr
 8014006:	eeb0 0a46 	vmov.f32	s0, s12
 801400a:	4770      	bx	lr
 801400c:	ad47d74e 	.word	0xad47d74e
 8014010:	310f74f6 	.word	0x310f74f6
 8014014:	3d2aaaab 	.word	0x3d2aaaab
 8014018:	3e999999 	.word	0x3e999999
 801401c:	b493f27c 	.word	0xb493f27c
 8014020:	37d00d01 	.word	0x37d00d01
 8014024:	bab60b61 	.word	0xbab60b61
 8014028:	3f480000 	.word	0x3f480000

0801402c <__kernel_rem_pio2f>:
 801402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014030:	ed2d 8b04 	vpush	{d8-d9}
 8014034:	b0d9      	sub	sp, #356	; 0x164
 8014036:	4688      	mov	r8, r1
 8014038:	9002      	str	r0, [sp, #8]
 801403a:	49bb      	ldr	r1, [pc, #748]	; (8014328 <__kernel_rem_pio2f+0x2fc>)
 801403c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801403e:	9301      	str	r3, [sp, #4]
 8014040:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8014044:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8014048:	1e59      	subs	r1, r3, #1
 801404a:	1d13      	adds	r3, r2, #4
 801404c:	db27      	blt.n	801409e <__kernel_rem_pio2f+0x72>
 801404e:	f1b2 0b03 	subs.w	fp, r2, #3
 8014052:	bf48      	it	mi
 8014054:	f102 0b04 	addmi.w	fp, r2, #4
 8014058:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801405c:	1c45      	adds	r5, r0, #1
 801405e:	00ec      	lsls	r4, r5, #3
 8014060:	1a47      	subs	r7, r0, r1
 8014062:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8014338 <__kernel_rem_pio2f+0x30c>
 8014066:	9403      	str	r4, [sp, #12]
 8014068:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801406c:	eb0a 0c01 	add.w	ip, sl, r1
 8014070:	ae1c      	add	r6, sp, #112	; 0x70
 8014072:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8014076:	2400      	movs	r4, #0
 8014078:	4564      	cmp	r4, ip
 801407a:	dd12      	ble.n	80140a2 <__kernel_rem_pio2f+0x76>
 801407c:	9b01      	ldr	r3, [sp, #4]
 801407e:	ac1c      	add	r4, sp, #112	; 0x70
 8014080:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8014084:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8014088:	f04f 0c00 	mov.w	ip, #0
 801408c:	45d4      	cmp	ip, sl
 801408e:	dc27      	bgt.n	80140e0 <__kernel_rem_pio2f+0xb4>
 8014090:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014094:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8014338 <__kernel_rem_pio2f+0x30c>
 8014098:	4627      	mov	r7, r4
 801409a:	2600      	movs	r6, #0
 801409c:	e016      	b.n	80140cc <__kernel_rem_pio2f+0xa0>
 801409e:	2000      	movs	r0, #0
 80140a0:	e7dc      	b.n	801405c <__kernel_rem_pio2f+0x30>
 80140a2:	42e7      	cmn	r7, r4
 80140a4:	bf5d      	ittte	pl
 80140a6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80140aa:	ee07 3a90 	vmovpl	s15, r3
 80140ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80140b2:	eef0 7a47 	vmovmi.f32	s15, s14
 80140b6:	ece6 7a01 	vstmia	r6!, {s15}
 80140ba:	3401      	adds	r4, #1
 80140bc:	e7dc      	b.n	8014078 <__kernel_rem_pio2f+0x4c>
 80140be:	ecf9 6a01 	vldmia	r9!, {s13}
 80140c2:	ed97 7a00 	vldr	s14, [r7]
 80140c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80140ca:	3601      	adds	r6, #1
 80140cc:	428e      	cmp	r6, r1
 80140ce:	f1a7 0704 	sub.w	r7, r7, #4
 80140d2:	ddf4      	ble.n	80140be <__kernel_rem_pio2f+0x92>
 80140d4:	eceb 7a01 	vstmia	fp!, {s15}
 80140d8:	f10c 0c01 	add.w	ip, ip, #1
 80140dc:	3404      	adds	r4, #4
 80140de:	e7d5      	b.n	801408c <__kernel_rem_pio2f+0x60>
 80140e0:	ab08      	add	r3, sp, #32
 80140e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80140e6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8014334 <__kernel_rem_pio2f+0x308>
 80140ea:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8014330 <__kernel_rem_pio2f+0x304>
 80140ee:	9304      	str	r3, [sp, #16]
 80140f0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80140f4:	4656      	mov	r6, sl
 80140f6:	00b3      	lsls	r3, r6, #2
 80140f8:	9305      	str	r3, [sp, #20]
 80140fa:	ab58      	add	r3, sp, #352	; 0x160
 80140fc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8014100:	ac08      	add	r4, sp, #32
 8014102:	ab44      	add	r3, sp, #272	; 0x110
 8014104:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8014108:	46a4      	mov	ip, r4
 801410a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801410e:	4637      	mov	r7, r6
 8014110:	2f00      	cmp	r7, #0
 8014112:	f1a0 0004 	sub.w	r0, r0, #4
 8014116:	dc4f      	bgt.n	80141b8 <__kernel_rem_pio2f+0x18c>
 8014118:	4628      	mov	r0, r5
 801411a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801411e:	f000 fb95 	bl	801484c <scalbnf>
 8014122:	eeb0 8a40 	vmov.f32	s16, s0
 8014126:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801412a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801412e:	f000 fb45 	bl	80147bc <floorf>
 8014132:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014136:	eea0 8a67 	vfms.f32	s16, s0, s15
 801413a:	2d00      	cmp	r5, #0
 801413c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8014140:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014144:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8014148:	ee17 9a90 	vmov	r9, s15
 801414c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014150:	dd44      	ble.n	80141dc <__kernel_rem_pio2f+0x1b0>
 8014152:	f106 3cff 	add.w	ip, r6, #4294967295
 8014156:	ab08      	add	r3, sp, #32
 8014158:	f1c5 0e08 	rsb	lr, r5, #8
 801415c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8014160:	fa47 f00e 	asr.w	r0, r7, lr
 8014164:	4481      	add	r9, r0
 8014166:	fa00 f00e 	lsl.w	r0, r0, lr
 801416a:	1a3f      	subs	r7, r7, r0
 801416c:	f1c5 0007 	rsb	r0, r5, #7
 8014170:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8014174:	4107      	asrs	r7, r0
 8014176:	2f00      	cmp	r7, #0
 8014178:	dd3f      	ble.n	80141fa <__kernel_rem_pio2f+0x1ce>
 801417a:	f04f 0e00 	mov.w	lr, #0
 801417e:	f109 0901 	add.w	r9, r9, #1
 8014182:	4673      	mov	r3, lr
 8014184:	4576      	cmp	r6, lr
 8014186:	dc6b      	bgt.n	8014260 <__kernel_rem_pio2f+0x234>
 8014188:	2d00      	cmp	r5, #0
 801418a:	dd04      	ble.n	8014196 <__kernel_rem_pio2f+0x16a>
 801418c:	2d01      	cmp	r5, #1
 801418e:	d078      	beq.n	8014282 <__kernel_rem_pio2f+0x256>
 8014190:	2d02      	cmp	r5, #2
 8014192:	f000 8081 	beq.w	8014298 <__kernel_rem_pio2f+0x26c>
 8014196:	2f02      	cmp	r7, #2
 8014198:	d12f      	bne.n	80141fa <__kernel_rem_pio2f+0x1ce>
 801419a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801419e:	ee30 8a48 	vsub.f32	s16, s0, s16
 80141a2:	b353      	cbz	r3, 80141fa <__kernel_rem_pio2f+0x1ce>
 80141a4:	4628      	mov	r0, r5
 80141a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80141aa:	f000 fb4f 	bl	801484c <scalbnf>
 80141ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80141b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80141b6:	e020      	b.n	80141fa <__kernel_rem_pio2f+0x1ce>
 80141b8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80141bc:	3f01      	subs	r7, #1
 80141be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80141ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80141ce:	ecac 0a01 	vstmia	ip!, {s0}
 80141d2:	ed90 0a00 	vldr	s0, [r0]
 80141d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80141da:	e799      	b.n	8014110 <__kernel_rem_pio2f+0xe4>
 80141dc:	d105      	bne.n	80141ea <__kernel_rem_pio2f+0x1be>
 80141de:	1e70      	subs	r0, r6, #1
 80141e0:	ab08      	add	r3, sp, #32
 80141e2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80141e6:	11ff      	asrs	r7, r7, #7
 80141e8:	e7c5      	b.n	8014176 <__kernel_rem_pio2f+0x14a>
 80141ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80141ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80141f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f6:	da31      	bge.n	801425c <__kernel_rem_pio2f+0x230>
 80141f8:	2700      	movs	r7, #0
 80141fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80141fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014202:	f040 809b 	bne.w	801433c <__kernel_rem_pio2f+0x310>
 8014206:	1e74      	subs	r4, r6, #1
 8014208:	46a4      	mov	ip, r4
 801420a:	2000      	movs	r0, #0
 801420c:	45d4      	cmp	ip, sl
 801420e:	da4a      	bge.n	80142a6 <__kernel_rem_pio2f+0x27a>
 8014210:	2800      	cmp	r0, #0
 8014212:	d07a      	beq.n	801430a <__kernel_rem_pio2f+0x2de>
 8014214:	ab08      	add	r3, sp, #32
 8014216:	3d08      	subs	r5, #8
 8014218:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801421c:	2b00      	cmp	r3, #0
 801421e:	f000 8081 	beq.w	8014324 <__kernel_rem_pio2f+0x2f8>
 8014222:	4628      	mov	r0, r5
 8014224:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014228:	00a5      	lsls	r5, r4, #2
 801422a:	f000 fb0f 	bl	801484c <scalbnf>
 801422e:	aa44      	add	r2, sp, #272	; 0x110
 8014230:	1d2b      	adds	r3, r5, #4
 8014232:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8014334 <__kernel_rem_pio2f+0x308>
 8014236:	18d1      	adds	r1, r2, r3
 8014238:	4622      	mov	r2, r4
 801423a:	2a00      	cmp	r2, #0
 801423c:	f280 80ae 	bge.w	801439c <__kernel_rem_pio2f+0x370>
 8014240:	4622      	mov	r2, r4
 8014242:	2a00      	cmp	r2, #0
 8014244:	f2c0 80cc 	blt.w	80143e0 <__kernel_rem_pio2f+0x3b4>
 8014248:	a944      	add	r1, sp, #272	; 0x110
 801424a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801424e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801432c <__kernel_rem_pio2f+0x300>
 8014252:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014338 <__kernel_rem_pio2f+0x30c>
 8014256:	2000      	movs	r0, #0
 8014258:	1aa1      	subs	r1, r4, r2
 801425a:	e0b6      	b.n	80143ca <__kernel_rem_pio2f+0x39e>
 801425c:	2702      	movs	r7, #2
 801425e:	e78c      	b.n	801417a <__kernel_rem_pio2f+0x14e>
 8014260:	6820      	ldr	r0, [r4, #0]
 8014262:	b94b      	cbnz	r3, 8014278 <__kernel_rem_pio2f+0x24c>
 8014264:	b118      	cbz	r0, 801426e <__kernel_rem_pio2f+0x242>
 8014266:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801426a:	6020      	str	r0, [r4, #0]
 801426c:	2001      	movs	r0, #1
 801426e:	f10e 0e01 	add.w	lr, lr, #1
 8014272:	3404      	adds	r4, #4
 8014274:	4603      	mov	r3, r0
 8014276:	e785      	b.n	8014184 <__kernel_rem_pio2f+0x158>
 8014278:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801427c:	6020      	str	r0, [r4, #0]
 801427e:	4618      	mov	r0, r3
 8014280:	e7f5      	b.n	801426e <__kernel_rem_pio2f+0x242>
 8014282:	1e74      	subs	r4, r6, #1
 8014284:	a808      	add	r0, sp, #32
 8014286:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801428a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801428e:	f10d 0c20 	add.w	ip, sp, #32
 8014292:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8014296:	e77e      	b.n	8014196 <__kernel_rem_pio2f+0x16a>
 8014298:	1e74      	subs	r4, r6, #1
 801429a:	a808      	add	r0, sp, #32
 801429c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80142a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80142a4:	e7f3      	b.n	801428e <__kernel_rem_pio2f+0x262>
 80142a6:	ab08      	add	r3, sp, #32
 80142a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80142ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80142b0:	4318      	orrs	r0, r3
 80142b2:	e7ab      	b.n	801420c <__kernel_rem_pio2f+0x1e0>
 80142b4:	f10c 0c01 	add.w	ip, ip, #1
 80142b8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80142bc:	2c00      	cmp	r4, #0
 80142be:	d0f9      	beq.n	80142b4 <__kernel_rem_pio2f+0x288>
 80142c0:	9b05      	ldr	r3, [sp, #20]
 80142c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80142c6:	eb0d 0003 	add.w	r0, sp, r3
 80142ca:	9b01      	ldr	r3, [sp, #4]
 80142cc:	18f4      	adds	r4, r6, r3
 80142ce:	ab1c      	add	r3, sp, #112	; 0x70
 80142d0:	1c77      	adds	r7, r6, #1
 80142d2:	384c      	subs	r0, #76	; 0x4c
 80142d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80142d8:	4466      	add	r6, ip
 80142da:	42be      	cmp	r6, r7
 80142dc:	f6ff af0b 	blt.w	80140f6 <__kernel_rem_pio2f+0xca>
 80142e0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80142e4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80142e8:	ee07 3a90 	vmov	s15, r3
 80142ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142f0:	f04f 0c00 	mov.w	ip, #0
 80142f4:	ece4 7a01 	vstmia	r4!, {s15}
 80142f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014338 <__kernel_rem_pio2f+0x30c>
 80142fc:	46a1      	mov	r9, r4
 80142fe:	458c      	cmp	ip, r1
 8014300:	dd07      	ble.n	8014312 <__kernel_rem_pio2f+0x2e6>
 8014302:	ece0 7a01 	vstmia	r0!, {s15}
 8014306:	3701      	adds	r7, #1
 8014308:	e7e7      	b.n	80142da <__kernel_rem_pio2f+0x2ae>
 801430a:	9804      	ldr	r0, [sp, #16]
 801430c:	f04f 0c01 	mov.w	ip, #1
 8014310:	e7d2      	b.n	80142b8 <__kernel_rem_pio2f+0x28c>
 8014312:	ecfe 6a01 	vldmia	lr!, {s13}
 8014316:	ed39 7a01 	vldmdb	r9!, {s14}
 801431a:	f10c 0c01 	add.w	ip, ip, #1
 801431e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014322:	e7ec      	b.n	80142fe <__kernel_rem_pio2f+0x2d2>
 8014324:	3c01      	subs	r4, #1
 8014326:	e775      	b.n	8014214 <__kernel_rem_pio2f+0x1e8>
 8014328:	08015578 	.word	0x08015578
 801432c:	0801554c 	.word	0x0801554c
 8014330:	43800000 	.word	0x43800000
 8014334:	3b800000 	.word	0x3b800000
 8014338:	00000000 	.word	0x00000000
 801433c:	9b03      	ldr	r3, [sp, #12]
 801433e:	eeb0 0a48 	vmov.f32	s0, s16
 8014342:	1a98      	subs	r0, r3, r2
 8014344:	f000 fa82 	bl	801484c <scalbnf>
 8014348:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8014330 <__kernel_rem_pio2f+0x304>
 801434c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014354:	db19      	blt.n	801438a <__kernel_rem_pio2f+0x35e>
 8014356:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014334 <__kernel_rem_pio2f+0x308>
 801435a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801435e:	aa08      	add	r2, sp, #32
 8014360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014364:	1c74      	adds	r4, r6, #1
 8014366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801436a:	3508      	adds	r5, #8
 801436c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014374:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014378:	ee10 3a10 	vmov	r3, s0
 801437c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014380:	ee17 3a90 	vmov	r3, s15
 8014384:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014388:	e74b      	b.n	8014222 <__kernel_rem_pio2f+0x1f6>
 801438a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801438e:	aa08      	add	r2, sp, #32
 8014390:	ee10 3a10 	vmov	r3, s0
 8014394:	4634      	mov	r4, r6
 8014396:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801439a:	e742      	b.n	8014222 <__kernel_rem_pio2f+0x1f6>
 801439c:	a808      	add	r0, sp, #32
 801439e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80143a2:	9001      	str	r0, [sp, #4]
 80143a4:	ee07 0a90 	vmov	s15, r0
 80143a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143ac:	3a01      	subs	r2, #1
 80143ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80143b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80143b6:	ed61 7a01 	vstmdb	r1!, {s15}
 80143ba:	e73e      	b.n	801423a <__kernel_rem_pio2f+0x20e>
 80143bc:	ecfc 6a01 	vldmia	ip!, {s13}
 80143c0:	ecb6 7a01 	vldmia	r6!, {s14}
 80143c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80143c8:	3001      	adds	r0, #1
 80143ca:	4550      	cmp	r0, sl
 80143cc:	dc01      	bgt.n	80143d2 <__kernel_rem_pio2f+0x3a6>
 80143ce:	4288      	cmp	r0, r1
 80143d0:	ddf4      	ble.n	80143bc <__kernel_rem_pio2f+0x390>
 80143d2:	a858      	add	r0, sp, #352	; 0x160
 80143d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80143d8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80143dc:	3a01      	subs	r2, #1
 80143de:	e730      	b.n	8014242 <__kernel_rem_pio2f+0x216>
 80143e0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80143e2:	2a02      	cmp	r2, #2
 80143e4:	dc09      	bgt.n	80143fa <__kernel_rem_pio2f+0x3ce>
 80143e6:	2a00      	cmp	r2, #0
 80143e8:	dc2a      	bgt.n	8014440 <__kernel_rem_pio2f+0x414>
 80143ea:	d043      	beq.n	8014474 <__kernel_rem_pio2f+0x448>
 80143ec:	f009 0007 	and.w	r0, r9, #7
 80143f0:	b059      	add	sp, #356	; 0x164
 80143f2:	ecbd 8b04 	vpop	{d8-d9}
 80143f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143fa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80143fc:	2b03      	cmp	r3, #3
 80143fe:	d1f5      	bne.n	80143ec <__kernel_rem_pio2f+0x3c0>
 8014400:	ab30      	add	r3, sp, #192	; 0xc0
 8014402:	442b      	add	r3, r5
 8014404:	461a      	mov	r2, r3
 8014406:	4619      	mov	r1, r3
 8014408:	4620      	mov	r0, r4
 801440a:	2800      	cmp	r0, #0
 801440c:	f1a1 0104 	sub.w	r1, r1, #4
 8014410:	dc51      	bgt.n	80144b6 <__kernel_rem_pio2f+0x48a>
 8014412:	4621      	mov	r1, r4
 8014414:	2901      	cmp	r1, #1
 8014416:	f1a2 0204 	sub.w	r2, r2, #4
 801441a:	dc5c      	bgt.n	80144d6 <__kernel_rem_pio2f+0x4aa>
 801441c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8014338 <__kernel_rem_pio2f+0x30c>
 8014420:	3304      	adds	r3, #4
 8014422:	2c01      	cmp	r4, #1
 8014424:	dc67      	bgt.n	80144f6 <__kernel_rem_pio2f+0x4ca>
 8014426:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801442a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801442e:	2f00      	cmp	r7, #0
 8014430:	d167      	bne.n	8014502 <__kernel_rem_pio2f+0x4d6>
 8014432:	edc8 6a00 	vstr	s13, [r8]
 8014436:	ed88 7a01 	vstr	s14, [r8, #4]
 801443a:	edc8 7a02 	vstr	s15, [r8, #8]
 801443e:	e7d5      	b.n	80143ec <__kernel_rem_pio2f+0x3c0>
 8014440:	aa30      	add	r2, sp, #192	; 0xc0
 8014442:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8014338 <__kernel_rem_pio2f+0x30c>
 8014446:	4413      	add	r3, r2
 8014448:	4622      	mov	r2, r4
 801444a:	2a00      	cmp	r2, #0
 801444c:	da24      	bge.n	8014498 <__kernel_rem_pio2f+0x46c>
 801444e:	b34f      	cbz	r7, 80144a4 <__kernel_rem_pio2f+0x478>
 8014450:	eef1 7a47 	vneg.f32	s15, s14
 8014454:	edc8 7a00 	vstr	s15, [r8]
 8014458:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801445c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014460:	aa31      	add	r2, sp, #196	; 0xc4
 8014462:	2301      	movs	r3, #1
 8014464:	429c      	cmp	r4, r3
 8014466:	da20      	bge.n	80144aa <__kernel_rem_pio2f+0x47e>
 8014468:	b10f      	cbz	r7, 801446e <__kernel_rem_pio2f+0x442>
 801446a:	eef1 7a67 	vneg.f32	s15, s15
 801446e:	edc8 7a01 	vstr	s15, [r8, #4]
 8014472:	e7bb      	b.n	80143ec <__kernel_rem_pio2f+0x3c0>
 8014474:	aa30      	add	r2, sp, #192	; 0xc0
 8014476:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8014338 <__kernel_rem_pio2f+0x30c>
 801447a:	4413      	add	r3, r2
 801447c:	2c00      	cmp	r4, #0
 801447e:	da05      	bge.n	801448c <__kernel_rem_pio2f+0x460>
 8014480:	b10f      	cbz	r7, 8014486 <__kernel_rem_pio2f+0x45a>
 8014482:	eef1 7a67 	vneg.f32	s15, s15
 8014486:	edc8 7a00 	vstr	s15, [r8]
 801448a:	e7af      	b.n	80143ec <__kernel_rem_pio2f+0x3c0>
 801448c:	ed33 7a01 	vldmdb	r3!, {s14}
 8014490:	3c01      	subs	r4, #1
 8014492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014496:	e7f1      	b.n	801447c <__kernel_rem_pio2f+0x450>
 8014498:	ed73 7a01 	vldmdb	r3!, {s15}
 801449c:	3a01      	subs	r2, #1
 801449e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80144a2:	e7d2      	b.n	801444a <__kernel_rem_pio2f+0x41e>
 80144a4:	eef0 7a47 	vmov.f32	s15, s14
 80144a8:	e7d4      	b.n	8014454 <__kernel_rem_pio2f+0x428>
 80144aa:	ecb2 7a01 	vldmia	r2!, {s14}
 80144ae:	3301      	adds	r3, #1
 80144b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80144b4:	e7d6      	b.n	8014464 <__kernel_rem_pio2f+0x438>
 80144b6:	edd1 7a00 	vldr	s15, [r1]
 80144ba:	edd1 6a01 	vldr	s13, [r1, #4]
 80144be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80144c2:	3801      	subs	r0, #1
 80144c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144c8:	ed81 7a00 	vstr	s14, [r1]
 80144cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144d0:	edc1 7a01 	vstr	s15, [r1, #4]
 80144d4:	e799      	b.n	801440a <__kernel_rem_pio2f+0x3de>
 80144d6:	edd2 7a00 	vldr	s15, [r2]
 80144da:	edd2 6a01 	vldr	s13, [r2, #4]
 80144de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80144e2:	3901      	subs	r1, #1
 80144e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144e8:	ed82 7a00 	vstr	s14, [r2]
 80144ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144f0:	edc2 7a01 	vstr	s15, [r2, #4]
 80144f4:	e78e      	b.n	8014414 <__kernel_rem_pio2f+0x3e8>
 80144f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80144fa:	3c01      	subs	r4, #1
 80144fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014500:	e78f      	b.n	8014422 <__kernel_rem_pio2f+0x3f6>
 8014502:	eef1 6a66 	vneg.f32	s13, s13
 8014506:	eeb1 7a47 	vneg.f32	s14, s14
 801450a:	edc8 6a00 	vstr	s13, [r8]
 801450e:	ed88 7a01 	vstr	s14, [r8, #4]
 8014512:	eef1 7a67 	vneg.f32	s15, s15
 8014516:	e790      	b.n	801443a <__kernel_rem_pio2f+0x40e>

08014518 <__kernel_sinf>:
 8014518:	ee10 3a10 	vmov	r3, s0
 801451c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014520:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014524:	da04      	bge.n	8014530 <__kernel_sinf+0x18>
 8014526:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801452a:	ee17 3a90 	vmov	r3, s15
 801452e:	b35b      	cbz	r3, 8014588 <__kernel_sinf+0x70>
 8014530:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014534:	eddf 7a15 	vldr	s15, [pc, #84]	; 801458c <__kernel_sinf+0x74>
 8014538:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014590 <__kernel_sinf+0x78>
 801453c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014540:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014594 <__kernel_sinf+0x7c>
 8014544:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014548:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014598 <__kernel_sinf+0x80>
 801454c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014550:	eddf 7a12 	vldr	s15, [pc, #72]	; 801459c <__kernel_sinf+0x84>
 8014554:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014558:	eee6 7a07 	vfma.f32	s15, s12, s14
 801455c:	b930      	cbnz	r0, 801456c <__kernel_sinf+0x54>
 801455e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80145a0 <__kernel_sinf+0x88>
 8014562:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014566:	eea6 0a26 	vfma.f32	s0, s12, s13
 801456a:	4770      	bx	lr
 801456c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014570:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014574:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014578:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801457c:	eddf 7a09 	vldr	s15, [pc, #36]	; 80145a4 <__kernel_sinf+0x8c>
 8014580:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014584:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	2f2ec9d3 	.word	0x2f2ec9d3
 8014590:	b2d72f34 	.word	0xb2d72f34
 8014594:	3638ef1b 	.word	0x3638ef1b
 8014598:	b9500d01 	.word	0xb9500d01
 801459c:	3c088889 	.word	0x3c088889
 80145a0:	be2aaaab 	.word	0xbe2aaaab
 80145a4:	3e2aaaab 	.word	0x3e2aaaab

080145a8 <with_errnof>:
 80145a8:	b513      	push	{r0, r1, r4, lr}
 80145aa:	4604      	mov	r4, r0
 80145ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80145b0:	f7fb ff24 	bl	80103fc <__errno>
 80145b4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80145b8:	6004      	str	r4, [r0, #0]
 80145ba:	b002      	add	sp, #8
 80145bc:	bd10      	pop	{r4, pc}

080145be <xflowf>:
 80145be:	b130      	cbz	r0, 80145ce <xflowf+0x10>
 80145c0:	eef1 7a40 	vneg.f32	s15, s0
 80145c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80145c8:	2022      	movs	r0, #34	; 0x22
 80145ca:	f7ff bfed 	b.w	80145a8 <with_errnof>
 80145ce:	eef0 7a40 	vmov.f32	s15, s0
 80145d2:	e7f7      	b.n	80145c4 <xflowf+0x6>

080145d4 <__math_uflowf>:
 80145d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80145dc <__math_uflowf+0x8>
 80145d8:	f7ff bff1 	b.w	80145be <xflowf>
 80145dc:	10000000 	.word	0x10000000

080145e0 <__math_oflowf>:
 80145e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80145e8 <__math_oflowf+0x8>
 80145e4:	f7ff bfeb 	b.w	80145be <xflowf>
 80145e8:	70000000 	.word	0x70000000

080145ec <atanf>:
 80145ec:	b538      	push	{r3, r4, r5, lr}
 80145ee:	ee10 5a10 	vmov	r5, s0
 80145f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80145f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80145fa:	eef0 7a40 	vmov.f32	s15, s0
 80145fe:	db10      	blt.n	8014622 <atanf+0x36>
 8014600:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014604:	dd04      	ble.n	8014610 <atanf+0x24>
 8014606:	ee70 7a00 	vadd.f32	s15, s0, s0
 801460a:	eeb0 0a67 	vmov.f32	s0, s15
 801460e:	bd38      	pop	{r3, r4, r5, pc}
 8014610:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014748 <atanf+0x15c>
 8014614:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801474c <atanf+0x160>
 8014618:	2d00      	cmp	r5, #0
 801461a:	bfd8      	it	le
 801461c:	eef0 7a40 	vmovle.f32	s15, s0
 8014620:	e7f3      	b.n	801460a <atanf+0x1e>
 8014622:	4b4b      	ldr	r3, [pc, #300]	; (8014750 <atanf+0x164>)
 8014624:	429c      	cmp	r4, r3
 8014626:	dc10      	bgt.n	801464a <atanf+0x5e>
 8014628:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801462c:	da0a      	bge.n	8014644 <atanf+0x58>
 801462e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014754 <atanf+0x168>
 8014632:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801463a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014642:	dce2      	bgt.n	801460a <atanf+0x1e>
 8014644:	f04f 33ff 	mov.w	r3, #4294967295
 8014648:	e013      	b.n	8014672 <atanf+0x86>
 801464a:	f000 f8a3 	bl	8014794 <fabsf>
 801464e:	4b42      	ldr	r3, [pc, #264]	; (8014758 <atanf+0x16c>)
 8014650:	429c      	cmp	r4, r3
 8014652:	dc4f      	bgt.n	80146f4 <atanf+0x108>
 8014654:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014658:	429c      	cmp	r4, r3
 801465a:	dc41      	bgt.n	80146e0 <atanf+0xf4>
 801465c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014660:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014664:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014668:	2300      	movs	r3, #0
 801466a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801466e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014672:	1c5a      	adds	r2, r3, #1
 8014674:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014678:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801475c <atanf+0x170>
 801467c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014760 <atanf+0x174>
 8014680:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014764 <atanf+0x178>
 8014684:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014688:	eee6 5a87 	vfma.f32	s11, s13, s14
 801468c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014768 <atanf+0x17c>
 8014690:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014694:	eddf 5a35 	vldr	s11, [pc, #212]	; 801476c <atanf+0x180>
 8014698:	eee7 5a26 	vfma.f32	s11, s14, s13
 801469c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014770 <atanf+0x184>
 80146a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80146a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014774 <atanf+0x188>
 80146a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80146ac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014778 <atanf+0x18c>
 80146b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80146b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801477c <atanf+0x190>
 80146b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80146bc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014780 <atanf+0x194>
 80146c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80146c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014784 <atanf+0x198>
 80146c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80146cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80146d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80146d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80146d8:	d121      	bne.n	801471e <atanf+0x132>
 80146da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146de:	e794      	b.n	801460a <atanf+0x1e>
 80146e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80146e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80146e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80146ec:	2301      	movs	r3, #1
 80146ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80146f2:	e7be      	b.n	8014672 <atanf+0x86>
 80146f4:	4b24      	ldr	r3, [pc, #144]	; (8014788 <atanf+0x19c>)
 80146f6:	429c      	cmp	r4, r3
 80146f8:	dc0b      	bgt.n	8014712 <atanf+0x126>
 80146fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80146fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014702:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014706:	2302      	movs	r3, #2
 8014708:	ee70 6a67 	vsub.f32	s13, s0, s15
 801470c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014710:	e7af      	b.n	8014672 <atanf+0x86>
 8014712:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014716:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801471a:	2303      	movs	r3, #3
 801471c:	e7a9      	b.n	8014672 <atanf+0x86>
 801471e:	4a1b      	ldr	r2, [pc, #108]	; (801478c <atanf+0x1a0>)
 8014720:	491b      	ldr	r1, [pc, #108]	; (8014790 <atanf+0x1a4>)
 8014722:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014726:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801472a:	ed93 0a00 	vldr	s0, [r3]
 801472e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014732:	ed92 0a00 	vldr	s0, [r2]
 8014736:	ee77 7a67 	vsub.f32	s15, s14, s15
 801473a:	2d00      	cmp	r5, #0
 801473c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014740:	bfb8      	it	lt
 8014742:	eef1 7a67 	vneglt.f32	s15, s15
 8014746:	e760      	b.n	801460a <atanf+0x1e>
 8014748:	3fc90fdb 	.word	0x3fc90fdb
 801474c:	bfc90fdb 	.word	0xbfc90fdb
 8014750:	3edfffff 	.word	0x3edfffff
 8014754:	7149f2ca 	.word	0x7149f2ca
 8014758:	3f97ffff 	.word	0x3f97ffff
 801475c:	3c8569d7 	.word	0x3c8569d7
 8014760:	3d4bda59 	.word	0x3d4bda59
 8014764:	bd6ef16b 	.word	0xbd6ef16b
 8014768:	3d886b35 	.word	0x3d886b35
 801476c:	3dba2e6e 	.word	0x3dba2e6e
 8014770:	3e124925 	.word	0x3e124925
 8014774:	3eaaaaab 	.word	0x3eaaaaab
 8014778:	bd15a221 	.word	0xbd15a221
 801477c:	bd9d8795 	.word	0xbd9d8795
 8014780:	bde38e38 	.word	0xbde38e38
 8014784:	be4ccccd 	.word	0xbe4ccccd
 8014788:	401bffff 	.word	0x401bffff
 801478c:	08015584 	.word	0x08015584
 8014790:	08015594 	.word	0x08015594

08014794 <fabsf>:
 8014794:	ee10 3a10 	vmov	r3, s0
 8014798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801479c:	ee00 3a10 	vmov	s0, r3
 80147a0:	4770      	bx	lr

080147a2 <finitef>:
 80147a2:	b082      	sub	sp, #8
 80147a4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80147a8:	9801      	ldr	r0, [sp, #4]
 80147aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80147ae:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80147b2:	bfac      	ite	ge
 80147b4:	2000      	movge	r0, #0
 80147b6:	2001      	movlt	r0, #1
 80147b8:	b002      	add	sp, #8
 80147ba:	4770      	bx	lr

080147bc <floorf>:
 80147bc:	ee10 3a10 	vmov	r3, s0
 80147c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80147c4:	3a7f      	subs	r2, #127	; 0x7f
 80147c6:	2a16      	cmp	r2, #22
 80147c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80147cc:	dc2a      	bgt.n	8014824 <floorf+0x68>
 80147ce:	2a00      	cmp	r2, #0
 80147d0:	da11      	bge.n	80147f6 <floorf+0x3a>
 80147d2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014834 <floorf+0x78>
 80147d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80147da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80147de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e2:	dd05      	ble.n	80147f0 <floorf+0x34>
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	da23      	bge.n	8014830 <floorf+0x74>
 80147e8:	4a13      	ldr	r2, [pc, #76]	; (8014838 <floorf+0x7c>)
 80147ea:	2900      	cmp	r1, #0
 80147ec:	bf18      	it	ne
 80147ee:	4613      	movne	r3, r2
 80147f0:	ee00 3a10 	vmov	s0, r3
 80147f4:	4770      	bx	lr
 80147f6:	4911      	ldr	r1, [pc, #68]	; (801483c <floorf+0x80>)
 80147f8:	4111      	asrs	r1, r2
 80147fa:	420b      	tst	r3, r1
 80147fc:	d0fa      	beq.n	80147f4 <floorf+0x38>
 80147fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014834 <floorf+0x78>
 8014802:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014806:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801480e:	ddef      	ble.n	80147f0 <floorf+0x34>
 8014810:	2b00      	cmp	r3, #0
 8014812:	bfbe      	ittt	lt
 8014814:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014818:	fa40 f202 	asrlt.w	r2, r0, r2
 801481c:	189b      	addlt	r3, r3, r2
 801481e:	ea23 0301 	bic.w	r3, r3, r1
 8014822:	e7e5      	b.n	80147f0 <floorf+0x34>
 8014824:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014828:	d3e4      	bcc.n	80147f4 <floorf+0x38>
 801482a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801482e:	4770      	bx	lr
 8014830:	2300      	movs	r3, #0
 8014832:	e7dd      	b.n	80147f0 <floorf+0x34>
 8014834:	7149f2ca 	.word	0x7149f2ca
 8014838:	bf800000 	.word	0xbf800000
 801483c:	007fffff 	.word	0x007fffff

08014840 <nanf>:
 8014840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014848 <nanf+0x8>
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	7fc00000 	.word	0x7fc00000

0801484c <scalbnf>:
 801484c:	ee10 3a10 	vmov	r3, s0
 8014850:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014854:	d025      	beq.n	80148a2 <scalbnf+0x56>
 8014856:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801485a:	d302      	bcc.n	8014862 <scalbnf+0x16>
 801485c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014860:	4770      	bx	lr
 8014862:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014866:	d122      	bne.n	80148ae <scalbnf+0x62>
 8014868:	4b2a      	ldr	r3, [pc, #168]	; (8014914 <scalbnf+0xc8>)
 801486a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014918 <scalbnf+0xcc>
 801486e:	4298      	cmp	r0, r3
 8014870:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014874:	db16      	blt.n	80148a4 <scalbnf+0x58>
 8014876:	ee10 3a10 	vmov	r3, s0
 801487a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801487e:	3a19      	subs	r2, #25
 8014880:	4402      	add	r2, r0
 8014882:	2afe      	cmp	r2, #254	; 0xfe
 8014884:	dd15      	ble.n	80148b2 <scalbnf+0x66>
 8014886:	ee10 3a10 	vmov	r3, s0
 801488a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801491c <scalbnf+0xd0>
 801488e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014920 <scalbnf+0xd4>
 8014892:	2b00      	cmp	r3, #0
 8014894:	eeb0 7a67 	vmov.f32	s14, s15
 8014898:	bfb8      	it	lt
 801489a:	eef0 7a66 	vmovlt.f32	s15, s13
 801489e:	ee27 0a27 	vmul.f32	s0, s14, s15
 80148a2:	4770      	bx	lr
 80148a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014924 <scalbnf+0xd8>
 80148a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148ac:	4770      	bx	lr
 80148ae:	0dd2      	lsrs	r2, r2, #23
 80148b0:	e7e6      	b.n	8014880 <scalbnf+0x34>
 80148b2:	2a00      	cmp	r2, #0
 80148b4:	dd06      	ble.n	80148c4 <scalbnf+0x78>
 80148b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80148ba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80148be:	ee00 3a10 	vmov	s0, r3
 80148c2:	4770      	bx	lr
 80148c4:	f112 0f16 	cmn.w	r2, #22
 80148c8:	da1a      	bge.n	8014900 <scalbnf+0xb4>
 80148ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80148ce:	4298      	cmp	r0, r3
 80148d0:	ee10 3a10 	vmov	r3, s0
 80148d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148d8:	dd0a      	ble.n	80148f0 <scalbnf+0xa4>
 80148da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801491c <scalbnf+0xd0>
 80148de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014920 <scalbnf+0xd4>
 80148e2:	eef0 7a40 	vmov.f32	s15, s0
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	bf18      	it	ne
 80148ea:	eeb0 0a47 	vmovne.f32	s0, s14
 80148ee:	e7db      	b.n	80148a8 <scalbnf+0x5c>
 80148f0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014924 <scalbnf+0xd8>
 80148f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014928 <scalbnf+0xdc>
 80148f8:	eef0 7a40 	vmov.f32	s15, s0
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	e7f3      	b.n	80148e8 <scalbnf+0x9c>
 8014900:	3219      	adds	r2, #25
 8014902:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014906:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801490a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801492c <scalbnf+0xe0>
 801490e:	ee07 3a10 	vmov	s14, r3
 8014912:	e7c4      	b.n	801489e <scalbnf+0x52>
 8014914:	ffff3cb0 	.word	0xffff3cb0
 8014918:	4c000000 	.word	0x4c000000
 801491c:	7149f2ca 	.word	0x7149f2ca
 8014920:	f149f2ca 	.word	0xf149f2ca
 8014924:	0da24260 	.word	0x0da24260
 8014928:	8da24260 	.word	0x8da24260
 801492c:	33000000 	.word	0x33000000

08014930 <_init>:
 8014930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014932:	bf00      	nop
 8014934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014936:	bc08      	pop	{r3}
 8014938:	469e      	mov	lr, r3
 801493a:	4770      	bx	lr

0801493c <_fini>:
 801493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801493e:	bf00      	nop
 8014940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014942:	bc08      	pop	{r3}
 8014944:	469e      	mov	lr, r3
 8014946:	4770      	bx	lr
