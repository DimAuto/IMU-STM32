
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a70  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c54  08014c30  08014c30  00024c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015884  08015884  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08015884  08015884  00025884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801588c  0801588c  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801588c  0801588c  0002588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015890  08015890  00025890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08015894  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062c4  20000234  08015ac8  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064f8  08015ac8  000364f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028a3c  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006100  00000000  00000000  00058ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  0005ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b2e  00000000  00000000  000610e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031bb6  00000000  00000000  00062c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bea7  00000000  00000000  000947c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e456  00000000  00000000  000c066b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a8a8  00000000  00000000  001deac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001e936c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000234 	.word	0x20000234
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014c18 	.word	0x08014c18

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000238 	.word	0x20000238
 80001fc:	08014c18 	.word	0x08014c18

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f98 <FusionRadiansToDegrees+0x24>
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	42652ee0 	.word	0x42652ee0

08000f9c <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000faa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	d802      	bhi.n	8000fbe <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000fb8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000fec <FusionAsin+0x50>
 8000fbc:	e011      	b.n	8000fe2 <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	db02      	blt.n	8000fd6 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000fd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000ff0 <FusionAsin+0x54>
 8000fd4:	e005      	b.n	8000fe2 <FusionAsin+0x46>
    }
    return asinf(value);
 8000fd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fda:	f012 fabb 	bl	8013554 <asinf>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	bfc90fdb 	.word	0xbfc90fdb
 8000ff0:	3fc90fdb 	.word	0x3fc90fdb

08000ff4 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b091      	sub	sp, #68	; 0x44
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	eeb0 5a40 	vmov.f32	s10, s0
 8000ffe:	eef0 5a60 	vmov.f32	s11, s1
 8001002:	eeb0 6a41 	vmov.f32	s12, s2
 8001006:	eef0 6a61 	vmov.f32	s13, s3
 800100a:	eeb0 7a42 	vmov.f32	s14, s4
 800100e:	eef0 7a62 	vmov.f32	s15, s5
 8001012:	ed87 5a07 	vstr	s10, [r7, #28]
 8001016:	edc7 5a08 	vstr	s11, [r7, #32]
 800101a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800101e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001022:	ed87 7a05 	vstr	s14, [r7, #20]
 8001026:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 800102a:	ed97 7a07 	vldr	s14, [r7, #28]
 800102e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001036:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800103a:	ed97 7a08 	vldr	s14, [r7, #32]
 800103e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001042:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001046:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800104a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800104e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001056:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800105e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001062:	ca07      	ldmia	r2, {r0, r1, r2}
 8001064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106e:	ee06 1a90 	vmov	s13, r1
 8001072:	ee07 2a10 	vmov	s14, r2
 8001076:	ee07 3a90 	vmov	s15, r3
}
 800107a:	eeb0 0a66 	vmov.f32	s0, s13
 800107e:	eef0 0a47 	vmov.f32	s1, s14
 8001082:	eeb0 1a67 	vmov.f32	s2, s15
 8001086:	3744      	adds	r7, #68	; 0x44
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001090:	b084      	sub	sp, #16
 8001092:	b480      	push	{r7}
 8001094:	b08f      	sub	sp, #60	; 0x3c
 8001096:	af00      	add	r7, sp, #0
 8001098:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 800109c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a0:	eef0 6a40 	vmov.f32	s13, s0
 80010a4:	eeb0 7a60 	vmov.f32	s14, s1
 80010a8:	eef0 7a41 	vmov.f32	s15, s2
 80010ac:	edc7 6a05 	vstr	s13, [r7, #20]
 80010b0:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b4:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80010b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80010c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80010d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010e4:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80010e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80010f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001104:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001108:	edd7 7a07 	vldr	s15, [r7, #28]
 800110c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001110:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001114:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 8001118:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800111c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001128:	edd7 7a06 	vldr	s15, [r7, #24]
 800112c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001134:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001138:	edd7 7a07 	vldr	s15, [r7, #28]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001144:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 8001148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114c:	f107 0220 	add.w	r2, r7, #32
 8001150:	ca07      	ldmia	r2, {r0, r1, r2}
 8001152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115c:	ee06 1a90 	vmov	s13, r1
 8001160:	ee07 2a10 	vmov	s14, r2
 8001164:	ee07 3a90 	vmov	s15, r3
#undef R
}
 8001168:	eeb0 0a66 	vmov.f32	s0, s13
 800116c:	eef0 0a47 	vmov.f32	s1, s14
 8001170:	eeb0 1a67 	vmov.f32	s2, s15
 8001174:	373c      	adds	r7, #60	; 0x3c
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	b004      	add	sp, #16
 800117e:	4770      	bx	lr

08001180 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b090      	sub	sp, #64	; 0x40
 8001184:	af00      	add	r7, sp, #0
 8001186:	eeb0 6a40 	vmov.f32	s12, s0
 800118a:	eef0 6a60 	vmov.f32	s13, s1
 800118e:	eeb0 7a41 	vmov.f32	s14, s2
 8001192:	eef0 7a61 	vmov.f32	s15, s3
 8001196:	ed87 6a04 	vstr	s12, [r7, #16]
 800119a:	edc7 6a05 	vstr	s13, [r7, #20]
 800119e:	ed87 7a06 	vstr	s14, [r7, #24]
 80011a2:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80011a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80011aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ba:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80011be:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80011ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011da:	ed97 7a05 	vldr	s14, [r7, #20]
 80011de:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ee:	eef0 0a67 	vmov.f32	s1, s15
 80011f2:	eeb0 0a66 	vmov.f32	s0, s13
 80011f6:	f012 f9d9 	bl	80135ac <atan2f>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001202:	f7ff feb7 	bl	8000f74 <FusionRadiansToDegrees>
 8001206:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800120a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800120e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001212:	edd7 7a06 	vldr	s15, [r7, #24]
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121a:	edd7 6a07 	vldr	s13, [r7, #28]
 800121e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	f7ff feb3 	bl	8000f9c <FusionAsin>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
 800123a:	eeb0 0a67 	vmov.f32	s0, s15
 800123e:	f7ff fe99 	bl	8000f74 <FusionRadiansToDegrees>
 8001242:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001246:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800124a:	ed97 7a04 	vldr	s14, [r7, #16]
 800124e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001256:	edd7 6a05 	vldr	s13, [r7, #20]
 800125a:	edd7 7a06 	vldr	s15, [r7, #24]
 800125e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001262:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001266:	ed97 7a07 	vldr	s14, [r7, #28]
 800126a:	edd7 7a07 	vldr	s15, [r7, #28]
 800126e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001272:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127a:	eef0 0a67 	vmov.f32	s1, s15
 800127e:	eeb0 0a66 	vmov.f32	s0, s13
 8001282:	f012 f993 	bl	80135ac <atan2f>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	f7ff fe71 	bl	8000f74 <FusionRadiansToDegrees>
 8001292:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001296:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800129a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800129e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ae:	ee06 1a90 	vmov	s13, r1
 80012b2:	ee07 2a10 	vmov	s14, r2
 80012b6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80012ba:	eeb0 0a66 	vmov.f32	s0, s13
 80012be:	eef0 0a47 	vmov.f32	s1, s14
 80012c2:	eeb0 1a67 	vmov.f32	s2, s15
 80012c6:	3740      	adds	r7, #64	; 0x40
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 80012cc:	b084      	sub	sp, #16
 80012ce:	b5b0      	push	{r4, r5, r7, lr}
 80012d0:	b096      	sub	sp, #88	; 0x58
 80012d2:	af06      	add	r7, sp, #24
 80012d4:	eeb0 5a40 	vmov.f32	s10, s0
 80012d8:	eef0 5a60 	vmov.f32	s11, s1
 80012dc:	eeb0 6a41 	vmov.f32	s12, s2
 80012e0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012e8:	eef0 6a61 	vmov.f32	s13, s3
 80012ec:	eeb0 7a42 	vmov.f32	s14, s4
 80012f0:	eef0 7a62 	vmov.f32	s15, s5
 80012f4:	ed87 5a07 	vstr	s10, [r7, #28]
 80012f8:	edc7 5a08 	vstr	s11, [r7, #32]
 80012fc:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001300:	edc7 6a04 	vstr	s13, [r7, #16]
 8001304:	ed87 7a05 	vstr	s14, [r7, #20]
 8001308:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronOffset);
 800130c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001310:	ed97 7a08 	vldr	s14, [r7, #32]
 8001314:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001318:	466d      	mov	r5, sp
 800131a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800131e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	602b      	str	r3, [r5, #0]
 8001326:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800132a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132c:	eeb0 0a66 	vmov.f32	s0, s13
 8001330:	eef0 0a47 	vmov.f32	s1, s14
 8001334:	eeb0 1a67 	vmov.f32	s2, s15
 8001338:	f7ff feaa 	bl	8001090 <FusionMatrixMultiplyVector>
 800133c:	eef0 6a40 	vmov.f32	s13, s0
 8001340:	eeb0 7a60 	vmov.f32	s14, s1
 8001344:	eef0 7a41 	vmov.f32	s15, s2
 8001348:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800134c:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8001350:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8001354:	ed97 5a04 	vldr	s10, [r7, #16]
 8001358:	edd7 5a05 	vldr	s11, [r7, #20]
 800135c:	ed97 6a06 	vldr	s12, [r7, #24]
 8001360:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001364:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001368:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800136c:	eef0 1a45 	vmov.f32	s3, s10
 8001370:	eeb0 2a65 	vmov.f32	s4, s11
 8001374:	eef0 2a46 	vmov.f32	s5, s12
 8001378:	eeb0 0a66 	vmov.f32	s0, s13
 800137c:	eef0 0a47 	vmov.f32	s1, s14
 8001380:	eeb0 1a67 	vmov.f32	s2, s15
 8001384:	f7ff fe36 	bl	8000ff4 <FusionVectorSubtract>
 8001388:	eef0 6a40 	vmov.f32	s13, s0
 800138c:	eeb0 7a60 	vmov.f32	s14, s1
 8001390:	eef0 7a41 	vmov.f32	s15, s2
 8001394:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001398:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800139c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80013a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	ee06 1a90 	vmov	s13, r1
 80013aa:	ee07 2a10 	vmov	s14, r2
 80013ae:	ee07 3a90 	vmov	s15, r3
}
 80013b2:	eeb0 0a66 	vmov.f32	s0, s13
 80013b6:	eef0 0a47 	vmov.f32	s1, s14
 80013ba:	eeb0 1a67 	vmov.f32	s2, s15
 80013be:	3740      	adds	r7, #64	; 0x40
 80013c0:	46bd      	mov	sp, r7
 80013c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013c6:	b004      	add	sp, #16
 80013c8:	4770      	bx	lr
	...

080013cc <setGyroOffset>:
static uint32_t update_duration = 0;

FusionAhrs ahrs;
FusionOffset offset;

void setGyroOffset(gyro_data_t values){
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	eef0 6a40 	vmov.f32	s13, s0
 80013d6:	eeb0 7a60 	vmov.f32	s14, s1
 80013da:	eef0 7a41 	vmov.f32	s15, s2
 80013de:	edc7 6a01 	vstr	s13, [r7, #4]
 80013e2:	ed87 7a02 	vstr	s14, [r7, #8]
 80013e6:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroscopeOffset.array[0] = values.gyro_x;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <setGyroOffset+0x3c>)
 80013ee:	6013      	str	r3, [r2, #0]
	gyroscopeOffset.array[1] = values.gyro_y;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <setGyroOffset+0x3c>)
 80013f4:	6053      	str	r3, [r2, #4]
	gyroscopeOffset.array[2] = values.gyro_z;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4a03      	ldr	r2, [pc, #12]	; (8001408 <setGyroOffset+0x3c>)
 80013fa:	6093      	str	r3, [r2, #8]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20000250 	.word	0x20000250

0800140c <FusionInit>:

/* Initialize Fusion algorithm. */
void FusionInit(void){
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
	gyro_data_t values = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 800141e:	2164      	movs	r1, #100	; 0x64
 8001420:	4814      	ldr	r0, [pc, #80]	; (8001474 <FusionInit+0x68>)
 8001422:	f002 fa1f 	bl	8003864 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8001426:	4814      	ldr	r0, [pc, #80]	; (8001478 <FusionInit+0x6c>)
 8001428:	f000 fe34 	bl	8002094 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <FusionInit+0x70>)
 800142e:	463c      	mov	r4, r7
 8001430:	461d      	mov	r5, r3
 8001432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 10.0f,
			.magneticRejection = 10.0f,
			.rejectionTimeout = 30 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <FusionInit+0x6c>)
 8001440:	f000 fea2 	bl	8002188 <FusionAhrsSetSettings>
//	if (!Flash_isWritten (GYRO_OFFSET_ADDR)){	// Check if the specific memory addr is written, in order not to cause HRDFAULT
	Flash_Read_CalTable(GYRO_OFFSET_ADDR, &values);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <FusionInit+0x74>)
 800144c:	f002 fc3e 	bl	8003ccc <Flash_Read_CalTable>
	setGyroOffset(values);
 8001450:	edd7 6a05 	vldr	s13, [r7, #20]
 8001454:	ed97 7a06 	vldr	s14, [r7, #24]
 8001458:	edd7 7a07 	vldr	s15, [r7, #28]
 800145c:	eeb0 0a66 	vmov.f32	s0, s13
 8001460:	eef0 0a47 	vmov.f32	s1, s14
 8001464:	eeb0 1a67 	vmov.f32	s2, s15
 8001468:	f7ff ffb0 	bl	80013cc <setGyroOffset>
//	}
}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bdb0      	pop	{r4, r5, r7, pc}
 8001474:	200002c8 	.word	0x200002c8
 8001478:	20000260 	.word	0x20000260
 800147c:	08014c30 	.word	0x08014c30
 8001480:	080fb000 	.word	0x080fb000

08001484 <FusionCalcHeading>:
	}
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}

/* Calculate heading based on all three sensors.*/
void FusionCalcHeading(mems_data_t *memsData, FusionEuler *output_angles){
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b097      	sub	sp, #92	; 0x5c
 8001488:	af06      	add	r7, sp, #24
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	FusionVector gyroscope = {memsData->gyro.gyro_x, memsData->gyro.gyro_y, memsData->gyro.gyro_z};
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
	FusionVector accelerometer = {memsData->acc.acc_x, memsData->acc.acc_y, memsData->acc.acc_z};
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	61fb      	str	r3, [r7, #28]
	FusionVector magnetometer = {memsData->magn.magn_x, memsData->magn.magn_y, memsData->magn.magn_z}; // replace this with actual magnetometer data in arbitrary units
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	613b      	str	r3, [r7, #16]

	// Apply calibration
	gyroscope = FusionVectorSubtract(gyroscope, gyroscopeOffset);
 80014c4:	4b93      	ldr	r3, [pc, #588]	; (8001714 <FusionCalcHeading+0x290>)
 80014c6:	ed93 5a00 	vldr	s10, [r3]
 80014ca:	edd3 5a01 	vldr	s11, [r3, #4]
 80014ce:	ed93 6a02 	vldr	s12, [r3, #8]
 80014d2:	edd7 6a08 	vldr	s13, [r7, #32]
 80014d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014de:	eef0 1a45 	vmov.f32	s3, s10
 80014e2:	eeb0 2a65 	vmov.f32	s4, s11
 80014e6:	eef0 2a46 	vmov.f32	s5, s12
 80014ea:	eeb0 0a66 	vmov.f32	s0, s13
 80014ee:	eef0 0a47 	vmov.f32	s1, s14
 80014f2:	eeb0 1a67 	vmov.f32	s2, s15
 80014f6:	f7ff fd7d 	bl	8000ff4 <FusionVectorSubtract>
 80014fa:	eef0 6a40 	vmov.f32	s13, s0
 80014fe:	eeb0 7a60 	vmov.f32	s14, s1
 8001502:	eef0 7a41 	vmov.f32	s15, s2
 8001506:	edc7 6a08 	vstr	s13, [r7, #32]
 800150a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800150e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
//	accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
	magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <FusionCalcHeading+0x294>)
 8001514:	ed93 5a00 	vldr	s10, [r3]
 8001518:	edd3 5a01 	vldr	s11, [r3, #4]
 800151c:	ed93 6a02 	vldr	s12, [r3, #8]
 8001520:	4e7e      	ldr	r6, [pc, #504]	; (800171c <FusionCalcHeading+0x298>)
 8001522:	edd7 6a02 	vldr	s13, [r7, #8]
 8001526:	ed97 7a03 	vldr	s14, [r7, #12]
 800152a:	edd7 7a04 	vldr	s15, [r7, #16]
 800152e:	466d      	mov	r5, sp
 8001530:	f106 0410 	add.w	r4, r6, #16
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	602b      	str	r3, [r5, #0]
 800153c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001540:	eef0 1a45 	vmov.f32	s3, s10
 8001544:	eeb0 2a65 	vmov.f32	s4, s11
 8001548:	eef0 2a46 	vmov.f32	s5, s12
 800154c:	eeb0 0a66 	vmov.f32	s0, s13
 8001550:	eef0 0a47 	vmov.f32	s1, s14
 8001554:	eeb0 1a67 	vmov.f32	s2, s15
 8001558:	f7ff feb8 	bl	80012cc <FusionCalibrationMagnetic>
 800155c:	eef0 6a40 	vmov.f32	s13, s0
 8001560:	eeb0 7a60 	vmov.f32	s14, s1
 8001564:	eef0 7a41 	vmov.f32	s15, s2
 8001568:	edc7 6a02 	vstr	s13, [r7, #8]
 800156c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001570:	edc7 7a04 	vstr	s15, [r7, #16]

	// Update gyroscope offset correction algorithm
	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 8001574:	edd7 6a08 	vldr	s13, [r7, #32]
 8001578:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800157c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001580:	eeb0 0a66 	vmov.f32	s0, s13
 8001584:	eef0 0a47 	vmov.f32	s1, s14
 8001588:	eeb0 1a67 	vmov.f32	s2, s15
 800158c:	4864      	ldr	r0, [pc, #400]	; (8001720 <FusionCalcHeading+0x29c>)
 800158e:	f002 f99b 	bl	80038c8 <FusionOffsetUpdate>
 8001592:	eef0 6a40 	vmov.f32	s13, s0
 8001596:	eeb0 7a60 	vmov.f32	s14, s1
 800159a:	eef0 7a41 	vmov.f32	s15, s2
 800159e:	edc7 6a08 	vstr	s13, [r7, #32]
 80015a2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80015a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

#ifndef GYRO_TS
	float delta = (float)(memsData->timestamp - prv_tick) / 1000.0f;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ae:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <FusionCalcHeading+0x2a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015bc:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001728 <FusionCalcHeading+0x2a4>
 80015c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	prv_tick = memsData->timestamp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	4a55      	ldr	r2, [pc, #340]	; (8001724 <FusionCalcHeading+0x2a0>)
 80015ce:	6013      	str	r3, [r2, #0]
#else
	float delta = (float) ( memsData->timestamp - previousTimestamp) * (float) GYRO_TIMESTAMP_LSB_USEC / (float) 1000000;
	previousTimestamp = memsData->timestamp;
#endif
	// Update gyroscope AHRS algorithm
	if ((delta >= MEMS_SR_SEC - 7) && (delta <= MEMS_SR_SEC + 7)){
 80015d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015d4:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 80015d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	db2b      	blt.n	800163a <FusionCalcHeading+0x1b6>
 80015e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015e6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80015ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	d822      	bhi.n	800163a <FusionCalcHeading+0x1b6>
		FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, delta);
 80015f4:	ed97 3a02 	vldr	s6, [r7, #8]
 80015f8:	edd7 3a03 	vldr	s7, [r7, #12]
 80015fc:	ed97 4a04 	vldr	s8, [r7, #16]
 8001600:	ed97 5a05 	vldr	s10, [r7, #20]
 8001604:	edd7 5a06 	vldr	s11, [r7, #24]
 8001608:	ed97 6a07 	vldr	s12, [r7, #28]
 800160c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001610:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001618:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800161c:	eef0 1a45 	vmov.f32	s3, s10
 8001620:	eeb0 2a65 	vmov.f32	s4, s11
 8001624:	eef0 2a46 	vmov.f32	s5, s12
 8001628:	eeb0 0a66 	vmov.f32	s0, s13
 800162c:	eef0 0a47 	vmov.f32	s1, s14
 8001630:	eeb0 1a67 	vmov.f32	s2, s15
 8001634:	483d      	ldr	r0, [pc, #244]	; (800172c <FusionCalcHeading+0x2a8>)
 8001636:	f000 fe35 	bl	80022a4 <FusionAhrsUpdate>
	}

	// Print algorithm outputs
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 800163a:	483c      	ldr	r0, [pc, #240]	; (800172c <FusionCalcHeading+0x2a8>)
 800163c:	f001 fb5a 	bl	8002cf4 <FusionAhrsGetQuaternion>
 8001640:	eeb0 6a40 	vmov.f32	s12, s0
 8001644:	eef0 6a60 	vmov.f32	s13, s1
 8001648:	eeb0 7a41 	vmov.f32	s14, s2
 800164c:	eef0 7a61 	vmov.f32	s15, s3
 8001650:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001654:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8001658:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800165c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8001660:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8001664:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001668:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800166c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001670:	eeb0 0a46 	vmov.f32	s0, s12
 8001674:	eef0 0a66 	vmov.f32	s1, s13
 8001678:	eeb0 1a47 	vmov.f32	s2, s14
 800167c:	eef0 1a67 	vmov.f32	s3, s15
 8001680:	f7ff fd7e 	bl	8001180 <FusionQuaternionToEuler>
 8001684:	eef0 6a40 	vmov.f32	s13, s0
 8001688:	eeb0 7a60 	vmov.f32	s14, s1
 800168c:	eef0 7a41 	vmov.f32	s15, s2
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	edc3 6a00 	vstr	s13, [r3]
 8001696:	ed83 7a01 	vstr	s14, [r3, #4]
 800169a:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d509      	bpl.n	80016c2 <FusionCalcHeading+0x23e>
		output_angles->angle.yaw += 360;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80016b4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001730 <FusionCalcHeading+0x2ac>
 80016b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d509      	bpl.n	80016e6 <FusionCalcHeading+0x262>
		output_angles->angle.roll += 360;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001730 <FusionCalcHeading+0x2ac>
 80016dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	d400      	bmi.n	80016f8 <FusionCalcHeading+0x274>
		output_angles->angle.pitch += 360;
	}
//	const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
}
 80016f6:	e009      	b.n	800170c <FusionCalcHeading+0x288>
		output_angles->angle.pitch += 360;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80016fe:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001730 <FusionCalcHeading+0x2ac>
 8001702:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800170c:	bf00      	nop
 800170e:	3744      	adds	r7, #68	; 0x44
 8001710:	46bd      	mov	sp, r7
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001714:	20000250 	.word	0x20000250
 8001718:	08014f5c 	.word	0x08014f5c
 800171c:	08014f38 	.word	0x08014f38
 8001720:	200002c8 	.word	0x200002c8
 8001724:	2000025c 	.word	0x2000025c
 8001728:	447a0000 	.word	0x447a0000
 800172c:	20000260 	.word	0x20000260
 8001730:	43b40000 	.word	0x43b40000

08001734 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800173e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001742:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001758 <FusionDegreesToRadians+0x24>
 8001746:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	3c8efa35 	.word	0x3c8efa35

0800175c <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	105a      	asrs	r2, r3, #1
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <FusionFastInverseSqrt+0x54>)
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8001774:	ed97 7a03 	vldr	s14, [r7, #12]
 8001778:	edd7 7a01 	vldr	s15, [r7, #4]
 800177c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80017b4 <FusionFastInverseSqrt+0x58>
 8001780:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001784:	edd7 7a03 	vldr	s15, [r7, #12]
 8001788:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800178c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001794:	eddf 6a08 	vldr	s13, [pc, #32]	; 80017b8 <FusionFastInverseSqrt+0x5c>
 8001798:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	5f1f1412 	.word	0x5f1f1412
 80017b4:	3f36d312 	.word	0x3f36d312
 80017b8:	3fd851ff 	.word	0x3fd851ff

080017bc <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	eef0 6a40 	vmov.f32	s13, s0
 80017c6:	eeb0 7a60 	vmov.f32	s14, s1
 80017ca:	eef0 7a41 	vmov.f32	s15, s2
 80017ce:	edc7 6a01 	vstr	s13, [r7, #4]
 80017d2:	ed87 7a02 	vstr	s14, [r7, #8]
 80017d6:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 80017da:	edd7 7a01 	vldr	s15, [r7, #4]
 80017de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	d10f      	bne.n	8001808 <FusionVectorIsZero+0x4c>
 80017e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	d108      	bne.n	8001808 <FusionVectorIsZero+0x4c>
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d101      	bne.n	8001808 <FusionVectorIsZero+0x4c>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <FusionVectorIsZero+0x4e>
 8001808:	2300      	movs	r3, #0
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800181c:	b480      	push	{r7}
 800181e:	b091      	sub	sp, #68	; 0x44
 8001820:	af00      	add	r7, sp, #0
 8001822:	eeb0 5a40 	vmov.f32	s10, s0
 8001826:	eef0 5a60 	vmov.f32	s11, s1
 800182a:	eeb0 6a41 	vmov.f32	s12, s2
 800182e:	eef0 6a61 	vmov.f32	s13, s3
 8001832:	eeb0 7a42 	vmov.f32	s14, s4
 8001836:	eef0 7a62 	vmov.f32	s15, s5
 800183a:	ed87 5a07 	vstr	s10, [r7, #28]
 800183e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001842:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001846:	edc7 6a04 	vstr	s13, [r7, #16]
 800184a:	ed87 7a05 	vstr	s14, [r7, #20]
 800184e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8001852:	ed97 7a07 	vldr	s14, [r7, #28]
 8001856:	edd7 7a04 	vldr	s15, [r7, #16]
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800185e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8001862:	ed97 7a08 	vldr	s14, [r7, #32]
 8001866:	edd7 7a05 	vldr	s15, [r7, #20]
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800186e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8001872:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001876:	edd7 7a06 	vldr	s15, [r7, #24]
 800187a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800187e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001882:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001886:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800188a:	ca07      	ldmia	r2, {r0, r1, r2}
 800188c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001890:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001896:	ee06 1a90 	vmov	s13, r1
 800189a:	ee07 2a10 	vmov	s14, r2
 800189e:	ee07 3a90 	vmov	s15, r3
}
 80018a2:	eeb0 0a66 	vmov.f32	s0, s13
 80018a6:	eef0 0a47 	vmov.f32	s1, s14
 80018aa:	eeb0 1a67 	vmov.f32	s2, s15
 80018ae:	3744      	adds	r7, #68	; 0x44
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	eef0 6a40 	vmov.f32	s13, s0
 80018c2:	eeb0 7a60 	vmov.f32	s14, s1
 80018c6:	eef0 7a41 	vmov.f32	s15, s2
 80018ca:	edc7 6a01 	vstr	s13, [r7, #4]
 80018ce:	ed87 7a02 	vstr	s14, [r7, #8]
 80018d2:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 80018d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018da:	edd7 7a02 	vldr	s15, [r7, #8]
 80018de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80018ea:	eeb0 0a67 	vmov.f32	s0, s15
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80018f8:	b480      	push	{r7}
 80018fa:	b08f      	sub	sp, #60	; 0x3c
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	eef0 6a40 	vmov.f32	s13, s0
 8001902:	eeb0 7a60 	vmov.f32	s14, s1
 8001906:	eef0 7a41 	vmov.f32	s15, s2
 800190a:	edc7 1a04 	vstr	s3, [r7, #16]
 800190e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001912:	ed87 7a06 	vstr	s14, [r7, #24]
 8001916:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800191a:	ed97 7a05 	vldr	s14, [r7, #20]
 800191e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001922:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001926:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800192a:	ed97 7a06 	vldr	s14, [r7, #24]
 800192e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001936:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800193a:	ed97 7a07 	vldr	s14, [r7, #28]
 800193e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001942:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001946:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 800194a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194e:	f107 0220 	add.w	r2, r7, #32
 8001952:	ca07      	ldmia	r2, {r0, r1, r2}
 8001954:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800195a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	ee06 1a90 	vmov	s13, r1
 8001962:	ee07 2a10 	vmov	s14, r2
 8001966:	ee07 3a90 	vmov	s15, r3
}
 800196a:	eeb0 0a66 	vmov.f32	s0, s13
 800196e:	eef0 0a47 	vmov.f32	s1, s14
 8001972:	eeb0 1a67 	vmov.f32	s2, s15
 8001976:	373c      	adds	r7, #60	; 0x3c
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001980:	b480      	push	{r7}
 8001982:	b091      	sub	sp, #68	; 0x44
 8001984:	af00      	add	r7, sp, #0
 8001986:	eeb0 5a40 	vmov.f32	s10, s0
 800198a:	eef0 5a60 	vmov.f32	s11, s1
 800198e:	eeb0 6a41 	vmov.f32	s12, s2
 8001992:	eef0 6a61 	vmov.f32	s13, s3
 8001996:	eeb0 7a42 	vmov.f32	s14, s4
 800199a:	eef0 7a62 	vmov.f32	s15, s5
 800199e:	ed87 5a07 	vstr	s10, [r7, #28]
 80019a2:	edc7 5a08 	vstr	s11, [r7, #32]
 80019a6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80019aa:	edc7 6a04 	vstr	s13, [r7, #16]
 80019ae:	ed87 7a05 	vstr	s14, [r7, #20]
 80019b2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 80019b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80019ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 80019c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 80019d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019da:	edd7 7a06 	vldr	s15, [r7, #24]
 80019de:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80019e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fa:	ee06 1a90 	vmov	s13, r1
 80019fe:	ee07 2a10 	vmov	s14, r2
 8001a02:	ee07 3a90 	vmov	s15, r3
}
 8001a06:	eeb0 0a66 	vmov.f32	s0, s13
 8001a0a:	eef0 0a47 	vmov.f32	s1, s14
 8001a0e:	eeb0 1a67 	vmov.f32	s2, s15
 8001a12:	3744      	adds	r7, #68	; 0x44
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b091      	sub	sp, #68	; 0x44
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	eeb0 5a40 	vmov.f32	s10, s0
 8001a26:	eef0 5a60 	vmov.f32	s11, s1
 8001a2a:	eeb0 6a41 	vmov.f32	s12, s2
 8001a2e:	eef0 6a61 	vmov.f32	s13, s3
 8001a32:	eeb0 7a42 	vmov.f32	s14, s4
 8001a36:	eef0 7a62 	vmov.f32	s15, s5
 8001a3a:	ed87 5a07 	vstr	s10, [r7, #28]
 8001a3e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001a42:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001a46:	edc7 6a04 	vstr	s13, [r7, #16]
 8001a4a:	ed87 7a05 	vstr	s14, [r7, #20]
 8001a4e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8001a52:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001a6e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8001a72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001a8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001a92:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001aa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001aae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001ab2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac6:	ee06 1a90 	vmov	s13, r1
 8001aca:	ee07 2a10 	vmov	s14, r2
 8001ace:	ee07 3a90 	vmov	s15, r3
}
 8001ad2:	eeb0 0a66 	vmov.f32	s0, s13
 8001ad6:	eef0 0a47 	vmov.f32	s1, s14
 8001ada:	eeb0 1a67 	vmov.f32	s2, s15
 8001ade:	3744      	adds	r7, #68	; 0x44
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	eef0 6a40 	vmov.f32	s13, s0
 8001af2:	eeb0 7a60 	vmov.f32	s14, s1
 8001af6:	eef0 7a41 	vmov.f32	s15, s2
 8001afa:	edc7 6a01 	vstr	s13, [r7, #4]
 8001afe:	ed87 7a02 	vstr	s14, [r7, #8]
 8001b02:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001b06:	ed97 5a01 	vldr	s10, [r7, #4]
 8001b0a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001b12:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b16:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b1e:	eef0 1a45 	vmov.f32	s3, s10
 8001b22:	eeb0 2a65 	vmov.f32	s4, s11
 8001b26:	eef0 2a46 	vmov.f32	s5, s12
 8001b2a:	eeb0 0a66 	vmov.f32	s0, s13
 8001b2e:	eef0 0a47 	vmov.f32	s1, s14
 8001b32:	eeb0 1a67 	vmov.f32	s2, s15
 8001b36:	f7ff ff23 	bl	8001980 <FusionVectorHadamardProduct>
 8001b3a:	eef0 6a40 	vmov.f32	s13, s0
 8001b3e:	eeb0 7a60 	vmov.f32	s14, s1
 8001b42:	eef0 7a41 	vmov.f32	s15, s2
 8001b46:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b4a:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b4e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001b52:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b56:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b5e:	eeb0 0a66 	vmov.f32	s0, s13
 8001b62:	eef0 0a47 	vmov.f32	s1, s14
 8001b66:	eeb0 1a67 	vmov.f32	s2, s15
 8001b6a:	f7ff fea5 	bl	80018b8 <FusionVectorSum>
 8001b6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b72:	eeb0 0a67 	vmov.f32	s0, s15
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	eef0 6a40 	vmov.f32	s13, s0
 8001b86:	eeb0 7a60 	vmov.f32	s14, s1
 8001b8a:	eef0 7a41 	vmov.f32	s15, s2
 8001b8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b92:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b96:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001b9a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ba2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8001baa:	eef0 0a47 	vmov.f32	s1, s14
 8001bae:	eeb0 1a67 	vmov.f32	s2, s15
 8001bb2:	f7ff ff99 	bl	8001ae8 <FusionVectorMagnitudeSquared>
 8001bb6:	eef0 7a40 	vmov.f32	s15, s0
 8001bba:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbe:	f7ff fdcd 	bl	800175c <FusionFastInverseSqrt>
 8001bc2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001bc6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bca:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bce:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bd2:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001bd6:	eeb0 0a66 	vmov.f32	s0, s13
 8001bda:	eef0 0a47 	vmov.f32	s1, s14
 8001bde:	eeb0 1a67 	vmov.f32	s2, s15
 8001be2:	f7ff fe89 	bl	80018f8 <FusionVectorMultiplyScalar>
 8001be6:	eef0 6a40 	vmov.f32	s13, s0
 8001bea:	eeb0 7a60 	vmov.f32	s14, s1
 8001bee:	eef0 7a41 	vmov.f32	s15, s2
 8001bf2:	edc7 6a08 	vstr	s13, [r7, #32]
 8001bf6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001bfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001bfe:	6a39      	ldr	r1, [r7, #32]
 8001c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	ee06 1a90 	vmov	s13, r1
 8001c08:	ee07 2a10 	vmov	s14, r2
 8001c0c:	ee07 3a90 	vmov	s15, r3
}
 8001c10:	eeb0 0a66 	vmov.f32	s0, s13
 8001c14:	eef0 0a47 	vmov.f32	s1, s14
 8001c18:	eeb0 1a67 	vmov.f32	s2, s15
 8001c1c:	3730      	adds	r7, #48	; 0x30
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001c22:	b490      	push	{r4, r7}
 8001c24:	b094      	sub	sp, #80	; 0x50
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	eeb0 4a40 	vmov.f32	s8, s0
 8001c2c:	eef0 4a60 	vmov.f32	s9, s1
 8001c30:	eeb0 5a41 	vmov.f32	s10, s2
 8001c34:	eef0 5a61 	vmov.f32	s11, s3
 8001c38:	eeb0 6a42 	vmov.f32	s12, s4
 8001c3c:	eef0 6a62 	vmov.f32	s13, s5
 8001c40:	eeb0 7a43 	vmov.f32	s14, s6
 8001c44:	eef0 7a63 	vmov.f32	s15, s7
 8001c48:	ed87 4a08 	vstr	s8, [r7, #32]
 8001c4c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001c50:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001c54:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001c58:	ed87 6a04 	vstr	s12, [r7, #16]
 8001c5c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001c60:	ed87 7a06 	vstr	s14, [r7, #24]
 8001c64:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001c68:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001c78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c84:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001c88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c90:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c94:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001c98:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ca4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001ca8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001cac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001cb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cbe:	ee06 0a10 	vmov	s12, r0
 8001cc2:	ee06 1a90 	vmov	s13, r1
 8001cc6:	ee07 2a10 	vmov	s14, r2
 8001cca:	ee07 3a90 	vmov	s15, r3
}
 8001cce:	eeb0 0a46 	vmov.f32	s0, s12
 8001cd2:	eef0 0a66 	vmov.f32	s1, s13
 8001cd6:	eeb0 1a47 	vmov.f32	s2, s14
 8001cda:	eef0 1a67 	vmov.f32	s3, s15
 8001cde:	3750      	adds	r7, #80	; 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc90      	pop	{r4, r7}
 8001ce4:	4770      	bx	lr

08001ce6 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001ce6:	b490      	push	{r4, r7}
 8001ce8:	b094      	sub	sp, #80	; 0x50
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	eeb0 4a40 	vmov.f32	s8, s0
 8001cf0:	eef0 4a60 	vmov.f32	s9, s1
 8001cf4:	eeb0 5a41 	vmov.f32	s10, s2
 8001cf8:	eef0 5a61 	vmov.f32	s11, s3
 8001cfc:	eeb0 6a42 	vmov.f32	s12, s4
 8001d00:	eef0 6a62 	vmov.f32	s13, s5
 8001d04:	eeb0 7a43 	vmov.f32	s14, s6
 8001d08:	eef0 7a63 	vmov.f32	s15, s7
 8001d0c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001d10:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001d14:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001d18:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001d1c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001d20:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d24:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d28:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001d2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001d6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001da8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001dac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001db0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001dcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dd8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001de8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001dec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001df0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001dfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001e0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e28:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001e2c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e42:	ee06 0a10 	vmov	s12, r0
 8001e46:	ee06 1a90 	vmov	s13, r1
 8001e4a:	ee07 2a10 	vmov	s14, r2
 8001e4e:	ee07 3a90 	vmov	s15, r3
}
 8001e52:	eeb0 0a46 	vmov.f32	s0, s12
 8001e56:	eef0 0a66 	vmov.f32	s1, s13
 8001e5a:	eeb0 1a47 	vmov.f32	s2, s14
 8001e5e:	eef0 1a67 	vmov.f32	s3, s15
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc90      	pop	{r4, r7}
 8001e68:	4770      	bx	lr

08001e6a <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001e6a:	b490      	push	{r4, r7}
 8001e6c:	b094      	sub	sp, #80	; 0x50
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	eef0 4a40 	vmov.f32	s9, s0
 8001e74:	eeb0 5a60 	vmov.f32	s10, s1
 8001e78:	eef0 5a41 	vmov.f32	s11, s2
 8001e7c:	eeb0 6a61 	vmov.f32	s12, s3
 8001e80:	eef0 6a42 	vmov.f32	s13, s4
 8001e84:	eeb0 7a62 	vmov.f32	s14, s5
 8001e88:	eef0 7a43 	vmov.f32	s15, s6
 8001e8c:	edc7 4a08 	vstr	s9, [r7, #32]
 8001e90:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8001e94:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001e98:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001e9c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ea0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ea4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8001ea8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001eac:	eeb1 7a67 	vneg.f32	s14, s15
 8001eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001ecc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ed8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001edc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001eec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001efc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8001f0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f18:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f38:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8001f3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f40:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f48:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f68:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001f6c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001f7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f82:	ee06 0a10 	vmov	s12, r0
 8001f86:	ee06 1a90 	vmov	s13, r1
 8001f8a:	ee07 2a10 	vmov	s14, r2
 8001f8e:	ee07 3a90 	vmov	s15, r3
}
 8001f92:	eeb0 0a46 	vmov.f32	s0, s12
 8001f96:	eef0 0a66 	vmov.f32	s1, s13
 8001f9a:	eeb0 1a47 	vmov.f32	s2, s14
 8001f9e:	eef0 1a67 	vmov.f32	s3, s15
 8001fa2:	3750      	adds	r7, #80	; 0x50
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc90      	pop	{r4, r7}
 8001fa8:	4770      	bx	lr

08001faa <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001faa:	b590      	push	{r4, r7, lr}
 8001fac:	b093      	sub	sp, #76	; 0x4c
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	eeb0 6a40 	vmov.f32	s12, s0
 8001fb4:	eef0 6a60 	vmov.f32	s13, s1
 8001fb8:	eeb0 7a41 	vmov.f32	s14, s2
 8001fbc:	eef0 7a61 	vmov.f32	s15, s3
 8001fc0:	ed87 6a04 	vstr	s12, [r7, #16]
 8001fc4:	edc7 6a05 	vstr	s13, [r7, #20]
 8001fc8:	ed87 7a06 	vstr	s14, [r7, #24]
 8001fcc:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001fd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fdc:	edd7 6a05 	vldr	s13, [r7, #20]
 8001fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fec:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ff0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002000:	edd7 7a07 	vldr	s15, [r7, #28]
 8002004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200c:	eeb0 0a67 	vmov.f32	s0, s15
 8002010:	f7ff fba4 	bl	800175c <FusionFastInverseSqrt>
 8002014:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8002018:	ed97 7a04 	vldr	s14, [r7, #16]
 800201c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002024:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8002028:	ed97 7a05 	vldr	s14, [r7, #20]
 800202c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002034:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8002038:	ed97 7a06 	vldr	s14, [r7, #24]
 800203c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002044:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8002048:	ed97 7a07 	vldr	s14, [r7, #28]
 800204c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002050:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002054:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002058:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002066:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800206a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206e:	ee06 0a10 	vmov	s12, r0
 8002072:	ee06 1a90 	vmov	s13, r1
 8002076:	ee07 2a10 	vmov	s14, r2
 800207a:	ee07 3a90 	vmov	s15, r3
}
 800207e:	eeb0 0a46 	vmov.f32	s0, s12
 8002082:	eef0 0a66 	vmov.f32	s1, s13
 8002086:	eeb0 1a47 	vmov.f32	s2, s14
 800208a:	eef0 1a67 	vmov.f32	s3, s15
 800208e:	374c      	adds	r7, #76	; 0x4c
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <FusionAhrsInitialise+0x34>)
 800209e:	f107 040c 	add.w	r4, r7, #12
 80020a2:	461d      	mov	r5, r3
 80020a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a8:	682b      	ldr	r3, [r5, #0]
 80020aa:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f868 	bl	8002188 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f807 	bl	80020cc <FusionAhrsReset>
}
 80020be:	bf00      	nop
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	08014c44 	.word	0x08014c44

080020cc <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 80020cc:	b480      	push	{r7}
 80020ce:	b091      	sub	sp, #68	; 0x44
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020da:	615a      	str	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <FusionAhrsReset+0xb8>)
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	649a      	str	r2, [r3, #72]	; 0x48
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	64da      	str	r2, [r3, #76]	; 0x4c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8002176:	bf00      	nop
 8002178:	3744      	adds	r7, #68	; 0x44
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	41200000 	.word	0x41200000

08002188 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	d003      	beq.n	80021ba <FusionAhrsSetSettings+0x32>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a38      	ldr	r2, [pc, #224]	; (80022a0 <FusionAhrsSetSettings+0x118>)
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	e01d      	b.n	80021fe <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	f7ff fab2 	bl	8001734 <FusionDegreesToRadians>
 80021d0:	eef0 7a40 	vmov.f32	s15, s0
 80021d4:	eeb0 0a67 	vmov.f32	s0, s15
 80021d8:	f011 fa8e 	bl	80136f8 <sinf>
 80021dc:	eef0 7a40 	vmov.f32	s15, s0
 80021e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80021ec:	eeb0 0a67 	vmov.f32	s0, s15
 80021f0:	f011 f9de 	bl	80135b0 <powf>
 80021f4:	eef0 7a40 	vmov.f32	s15, s0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	edd3 7a03 	vldr	s15, [r3, #12]
 8002204:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	d003      	beq.n	8002216 <FusionAhrsSetSettings+0x8e>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <FusionAhrsSetSettings+0x118>)
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	e01d      	b.n	800225a <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	edd3 7a03 	vldr	s15, [r3, #12]
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	f7ff fa84 	bl	8001734 <FusionDegreesToRadians>
 800222c:	eef0 7a40 	vmov.f32	s15, s0
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	f011 fa60 	bl	80136f8 <sinf>
 8002238:	eef0 7a40 	vmov.f32	s15, s0
 800223c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002244:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002248:	eeb0 0a67 	vmov.f32	s0, s15
 800224c:	f011 f9b0 	bl	80135b0 <powf>
 8002250:	eef0 7a40 	vmov.f32	s15, s0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002280:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002288:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800228c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	7f7fffff 	.word	0x7f7fffff

080022a4 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b0bf      	sub	sp, #252	; 0xfc
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80022ac:	eeb0 5a61 	vmov.f32	s10, s3
 80022b0:	eef0 5a42 	vmov.f32	s11, s4
 80022b4:	eeb0 6a62 	vmov.f32	s12, s5
 80022b8:	eef0 6a43 	vmov.f32	s13, s6
 80022bc:	eeb0 7a63 	vmov.f32	s14, s7
 80022c0:	eef0 7a44 	vmov.f32	s15, s8
 80022c4:	edc7 4a01 	vstr	s9, [r7, #4]
 80022c8:	ed87 0a08 	vstr	s0, [r7, #32]
 80022cc:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 80022d0:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 80022d4:	ed87 5a05 	vstr	s10, [r7, #20]
 80022d8:	edc7 5a06 	vstr	s11, [r7, #24]
 80022dc:	ed87 6a07 	vstr	s12, [r7, #28]
 80022e0:	edc7 6a02 	vstr	s13, [r7, #8]
 80022e4:	ed87 7a03 	vstr	s14, [r7, #12]
 80022e8:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	3324      	adds	r3, #36	; 0x24
 80022f0:	f107 0214 	add.w	r2, r7, #20
 80022f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80022f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002300:	2b00      	cmp	r3, #0
 8002302:	d025      	beq.n	8002350 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002310:	edd7 7a01 	vldr	s15, [r7, #4]
 8002314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	edd3 7a01 	vldr	s15, [r3, #4]
 800232e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	d50b      	bpl.n	8002350 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	2200      	movs	r2, #0
 800234c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8002350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002352:	f000 fb08 	bl	8002966 <HalfGravity>
 8002356:	eef0 6a40 	vmov.f32	s13, s0
 800235a:	eeb0 7a60 	vmov.f32	s14, s1
 800235e:	eef0 7a41 	vmov.f32	s15, s2
 8002362:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8002366:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800236a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 800238e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002392:	ed97 7a06 	vldr	s14, [r7, #24]
 8002396:	edd7 7a07 	vldr	s15, [r7, #28]
 800239a:	eeb0 0a66 	vmov.f32	s0, s13
 800239e:	eef0 0a47 	vmov.f32	s1, s14
 80023a2:	eeb0 1a67 	vmov.f32	s2, s15
 80023a6:	f7ff fa09 	bl	80017bc <FusionVectorIsZero>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 809b 	beq.w	80024ee <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d918      	bls.n	80023f6 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80023ca:	3314      	adds	r3, #20
 80023cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 80023d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023d4:	f7ff fe7a 	bl	80020cc <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	f103 0414 	add.w	r4, r3, #20
 80023de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	2200      	movs	r2, #0
 80023ec:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 80023f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80023fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80023fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002402:	eeb0 0a66 	vmov.f32	s0, s13
 8002406:	eef0 0a47 	vmov.f32	s1, s14
 800240a:	eeb0 1a67 	vmov.f32	s2, s15
 800240e:	f7ff fbb5 	bl	8001b7c <FusionVectorNormalise>
 8002412:	eef0 6a40 	vmov.f32	s13, s0
 8002416:	eeb0 7a60 	vmov.f32	s14, s1
 800241a:	eef0 7a41 	vmov.f32	s15, s2
 800241e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8002422:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8002426:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800242a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800242c:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8002430:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002434:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8002438:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800243c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002440:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002444:	eef0 1a45 	vmov.f32	s3, s10
 8002448:	eeb0 2a65 	vmov.f32	s4, s11
 800244c:	eef0 2a46 	vmov.f32	s5, s12
 8002450:	eeb0 0a66 	vmov.f32	s0, s13
 8002454:	eef0 0a47 	vmov.f32	s1, s14
 8002458:	eeb0 1a67 	vmov.f32	s2, s15
 800245c:	f7ff fade 	bl	8001a1c <FusionVectorCrossProduct>
 8002460:	eef0 6a40 	vmov.f32	s13, s0
 8002464:	eeb0 7a60 	vmov.f32	s14, s1
 8002468:	eef0 7a41 	vmov.f32	s15, s2
 800246c:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 8002470:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8002474:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <FusionAhrsUpdate+0x210>
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002488:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800248c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002490:	eeb0 0a66 	vmov.f32	s0, s13
 8002494:	eef0 0a47 	vmov.f32	s1, s14
 8002498:	eeb0 1a67 	vmov.f32	s2, s15
 800249c:	f7ff fb24 	bl	8001ae8 <FusionVectorMagnitudeSquared>
 80024a0:	eeb0 7a40 	vmov.f32	s14, s0
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80024aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	d817      	bhi.n	80024e4 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 80024b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024ba:	323c      	adds	r2, #60	; 0x3c
 80024bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80024be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	d901      	bls.n	80024da <FusionAhrsUpdate+0x236>
 80024d6:	230a      	movs	r3, #10
 80024d8:	e000      	b.n	80024dc <FusionAhrsUpdate+0x238>
 80024da:	2300      	movs	r3, #0
 80024dc:	1ad2      	subs	r2, r2, r3
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58
 80024e2:	e004      	b.n	80024ee <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	673b      	str	r3, [r7, #112]	; 0x70
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	677b      	str	r3, [r7, #116]	; 0x74
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2201      	movs	r2, #1
 8002504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002508:	edd7 6a02 	vldr	s13, [r7, #8]
 800250c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002510:	edd7 7a04 	vldr	s15, [r7, #16]
 8002514:	eeb0 0a66 	vmov.f32	s0, s13
 8002518:	eef0 0a47 	vmov.f32	s1, s14
 800251c:	eeb0 1a67 	vmov.f32	s2, s15
 8002520:	f7ff f94c 	bl	80017bc <FusionVectorIsZero>
 8002524:	4603      	mov	r3, r0
 8002526:	f083 0301 	eor.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80e6 	beq.w	80026fe <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	429a      	cmp	r2, r3
 8002544:	d92a      	bls.n	800259c <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	ed97 5a02 	vldr	s10, [r7, #8]
 800254e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002552:	ed97 6a04 	vldr	s12, [r7, #16]
 8002556:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800255a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800255e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002562:	eef0 1a45 	vmov.f32	s3, s10
 8002566:	eeb0 2a65 	vmov.f32	s4, s11
 800256a:	eef0 2a46 	vmov.f32	s5, s12
 800256e:	eeb0 0a66 	vmov.f32	s0, s13
 8002572:	eef0 0a47 	vmov.f32	s1, s14
 8002576:	eeb0 1a67 	vmov.f32	s2, s15
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fe6e 	bl	800325c <FusionCompassCalculateHeading>
 8002580:	eef0 7a40 	vmov.f32	s15, s0
 8002584:	eeb0 0a67 	vmov.f32	s0, s15
 8002588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800258a:	f000 fbd6 	bl	8002d3a <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	2200      	movs	r2, #0
 8002592:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800259c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800259e:	f000 fa9f 	bl	8002ae0 <HalfMagnetic>
 80025a2:	eef0 6a40 	vmov.f32	s13, s0
 80025a6:	eeb0 7a60 	vmov.f32	s14, s1
 80025aa:	eef0 7a41 	vmov.f32	s15, s2
 80025ae:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 80025b2:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 80025b6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 80025ba:	ed97 5a02 	vldr	s10, [r7, #8]
 80025be:	edd7 5a03 	vldr	s11, [r7, #12]
 80025c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80025c6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80025ca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80025ce:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80025d2:	eef0 1a45 	vmov.f32	s3, s10
 80025d6:	eeb0 2a65 	vmov.f32	s4, s11
 80025da:	eef0 2a46 	vmov.f32	s5, s12
 80025de:	eeb0 0a66 	vmov.f32	s0, s13
 80025e2:	eef0 0a47 	vmov.f32	s1, s14
 80025e6:	eeb0 1a67 	vmov.f32	s2, s15
 80025ea:	f7ff fa17 	bl	8001a1c <FusionVectorCrossProduct>
 80025ee:	eef0 6a40 	vmov.f32	s13, s0
 80025f2:	eeb0 7a60 	vmov.f32	s14, s1
 80025f6:	eef0 7a41 	vmov.f32	s15, s2
 80025fa:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 80025fe:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002602:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002606:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800260a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800260e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002612:	eeb0 0a66 	vmov.f32	s0, s13
 8002616:	eef0 0a47 	vmov.f32	s1, s14
 800261a:	eeb0 1a67 	vmov.f32	s2, s15
 800261e:	f7ff faad 	bl	8001b7c <FusionVectorNormalise>
 8002622:	eef0 6a40 	vmov.f32	s13, s0
 8002626:	eeb0 7a60 	vmov.f32	s14, s1
 800262a:	eef0 7a41 	vmov.f32	s15, s2
 800262e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8002632:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8002636:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800263a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800263c:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8002640:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8002644:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8002648:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800264c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002650:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002654:	eef0 1a45 	vmov.f32	s3, s10
 8002658:	eeb0 2a65 	vmov.f32	s4, s11
 800265c:	eef0 2a46 	vmov.f32	s5, s12
 8002660:	eeb0 0a66 	vmov.f32	s0, s13
 8002664:	eef0 0a47 	vmov.f32	s1, s14
 8002668:	eeb0 1a67 	vmov.f32	s2, s15
 800266c:	f7ff f9d6 	bl	8001a1c <FusionVectorCrossProduct>
 8002670:	eef0 6a40 	vmov.f32	s13, s0
 8002674:	eeb0 7a60 	vmov.f32	s14, s1
 8002678:	eef0 7a41 	vmov.f32	s15, s2
 800267c:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8002680:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8002684:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <FusionAhrsUpdate+0x420>
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002698:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800269c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80026a0:	eeb0 0a66 	vmov.f32	s0, s13
 80026a4:	eef0 0a47 	vmov.f32	s1, s14
 80026a8:	eeb0 1a67 	vmov.f32	s2, s15
 80026ac:	f7ff fa1c 	bl	8001ae8 <FusionVectorMagnitudeSquared>
 80026b0:	eeb0 7a40 	vmov.f32	s14, s0
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80026ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c2:	d817      	bhi.n	80026f4 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 80026c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026ca:	3248      	adds	r2, #72	; 0x48
 80026cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	2b09      	cmp	r3, #9
 80026e4:	d901      	bls.n	80026ea <FusionAhrsUpdate+0x446>
 80026e6:	230a      	movs	r3, #10
 80026e8:	e000      	b.n	80026ec <FusionAhrsUpdate+0x448>
 80026ea:	2300      	movs	r3, #0
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
 80026f2:	e004      	b.n	80026fe <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 80026fe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002702:	f7ff f817 	bl	8001734 <FusionDegreesToRadians>
 8002706:	eeb0 6a40 	vmov.f32	s12, s0
 800270a:	edd7 6a08 	vldr	s13, [r7, #32]
 800270e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002712:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002716:	eef0 1a46 	vmov.f32	s3, s12
 800271a:	eeb0 0a66 	vmov.f32	s0, s13
 800271e:	eef0 0a47 	vmov.f32	s1, s14
 8002722:	eeb0 1a67 	vmov.f32	s2, s15
 8002726:	f7ff f8e7 	bl	80018f8 <FusionVectorMultiplyScalar>
 800272a:	eef0 6a40 	vmov.f32	s13, s0
 800272e:	eeb0 7a60 	vmov.f32	s14, s1
 8002732:	eef0 7a41 	vmov.f32	s15, s2
 8002736:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800273a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800273e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8002742:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8002746:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800274a:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800274e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002752:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002756:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800275a:	eef0 1a45 	vmov.f32	s3, s10
 800275e:	eeb0 2a65 	vmov.f32	s4, s11
 8002762:	eef0 2a46 	vmov.f32	s5, s12
 8002766:	eeb0 0a66 	vmov.f32	s0, s13
 800276a:	eef0 0a47 	vmov.f32	s1, s14
 800276e:	eeb0 1a67 	vmov.f32	s2, s15
 8002772:	f7ff f853 	bl	800181c <FusionVectorAdd>
 8002776:	eef0 6a40 	vmov.f32	s13, s0
 800277a:	eeb0 7a60 	vmov.f32	s14, s1
 800277e:	eef0 7a41 	vmov.f32	s15, s2
 8002782:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002786:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800278a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002794:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002798:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800279c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80027a0:	eef0 1a46 	vmov.f32	s3, s12
 80027a4:	eeb0 0a66 	vmov.f32	s0, s13
 80027a8:	eef0 0a47 	vmov.f32	s1, s14
 80027ac:	eeb0 1a67 	vmov.f32	s2, s15
 80027b0:	f7ff f8a2 	bl	80018f8 <FusionVectorMultiplyScalar>
 80027b4:	eef0 6a40 	vmov.f32	s13, s0
 80027b8:	eeb0 7a60 	vmov.f32	s14, s1
 80027bc:	eef0 7a41 	vmov.f32	s15, s2
 80027c0:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 80027c4:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 80027c8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 80027cc:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 80027d0:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 80027d4:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 80027d8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80027dc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80027e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80027e4:	eef0 1a45 	vmov.f32	s3, s10
 80027e8:	eeb0 2a65 	vmov.f32	s4, s11
 80027ec:	eef0 2a46 	vmov.f32	s5, s12
 80027f0:	eeb0 0a66 	vmov.f32	s0, s13
 80027f4:	eef0 0a47 	vmov.f32	s1, s14
 80027f8:	eeb0 1a67 	vmov.f32	s2, s15
 80027fc:	f7ff f80e 	bl	800181c <FusionVectorAdd>
 8002800:	eef0 6a40 	vmov.f32	s13, s0
 8002804:	eeb0 7a60 	vmov.f32	s14, s1
 8002808:	eef0 7a41 	vmov.f32	s15, s2
 800280c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8002810:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002814:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002818:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800281c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002820:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002824:	edd7 1a01 	vldr	s3, [r7, #4]
 8002828:	eeb0 0a66 	vmov.f32	s0, s13
 800282c:	eef0 0a47 	vmov.f32	s1, s14
 8002830:	eeb0 1a67 	vmov.f32	s2, s15
 8002834:	f7ff f860 	bl	80018f8 <FusionVectorMultiplyScalar>
 8002838:	eef0 6a40 	vmov.f32	s13, s0
 800283c:	eeb0 7a60 	vmov.f32	s14, s1
 8002840:	eef0 7a41 	vmov.f32	s15, s2
 8002844:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8002848:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800284c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 8002850:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8002854:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8002858:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	ed93 6a05 	vldr	s12, [r3, #20]
 8002862:	edd3 6a06 	vldr	s13, [r3, #24]
 8002866:	ed93 7a07 	vldr	s14, [r3, #28]
 800286a:	edd3 7a08 	vldr	s15, [r3, #32]
 800286e:	eeb0 2a64 	vmov.f32	s4, s9
 8002872:	eef0 2a45 	vmov.f32	s5, s10
 8002876:	eeb0 3a65 	vmov.f32	s6, s11
 800287a:	eeb0 0a46 	vmov.f32	s0, s12
 800287e:	eef0 0a66 	vmov.f32	s1, s13
 8002882:	eeb0 1a47 	vmov.f32	s2, s14
 8002886:	eef0 1a67 	vmov.f32	s3, s15
 800288a:	f7ff faee 	bl	8001e6a <FusionQuaternionMultiplyVector>
 800288e:	eeb0 6a40 	vmov.f32	s12, s0
 8002892:	eef0 6a60 	vmov.f32	s13, s1
 8002896:	eeb0 7a41 	vmov.f32	s14, s2
 800289a:	eef0 7a61 	vmov.f32	s15, s3
 800289e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 80028a2:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 80028a6:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 80028aa:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 80028ae:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80028b0:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 80028b4:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 80028b8:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 80028bc:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	ed93 6a05 	vldr	s12, [r3, #20]
 80028c6:	edd3 6a06 	vldr	s13, [r3, #24]
 80028ca:	ed93 7a07 	vldr	s14, [r3, #28]
 80028ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80028d2:	eeb0 2a44 	vmov.f32	s4, s8
 80028d6:	eef0 2a64 	vmov.f32	s5, s9
 80028da:	eeb0 3a45 	vmov.f32	s6, s10
 80028de:	eef0 3a65 	vmov.f32	s7, s11
 80028e2:	eeb0 0a46 	vmov.f32	s0, s12
 80028e6:	eef0 0a66 	vmov.f32	s1, s13
 80028ea:	eeb0 1a47 	vmov.f32	s2, s14
 80028ee:	eef0 1a67 	vmov.f32	s3, s15
 80028f2:	f7ff f996 	bl	8001c22 <FusionQuaternionAdd>
 80028f6:	eeb0 6a40 	vmov.f32	s12, s0
 80028fa:	eef0 6a60 	vmov.f32	s13, s1
 80028fe:	eeb0 7a41 	vmov.f32	s14, s2
 8002902:	eef0 7a61 	vmov.f32	s15, s3
 8002906:	ed84 6a05 	vstr	s12, [r4, #20]
 800290a:	edc4 6a06 	vstr	s13, [r4, #24]
 800290e:	ed84 7a07 	vstr	s14, [r4, #28]
 8002912:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002916:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	ed93 6a05 	vldr	s12, [r3, #20]
 800291e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002922:	ed93 7a07 	vldr	s14, [r3, #28]
 8002926:	edd3 7a08 	vldr	s15, [r3, #32]
 800292a:	eeb0 0a46 	vmov.f32	s0, s12
 800292e:	eef0 0a66 	vmov.f32	s1, s13
 8002932:	eeb0 1a47 	vmov.f32	s2, s14
 8002936:	eef0 1a67 	vmov.f32	s3, s15
 800293a:	f7ff fb36 	bl	8001faa <FusionQuaternionNormalise>
 800293e:	eeb0 6a40 	vmov.f32	s12, s0
 8002942:	eef0 6a60 	vmov.f32	s13, s1
 8002946:	eeb0 7a41 	vmov.f32	s14, s2
 800294a:	eef0 7a61 	vmov.f32	s15, s3
 800294e:	ed84 6a05 	vstr	s12, [r4, #20]
 8002952:	edc4 6a06 	vstr	s13, [r4, #24]
 8002956:	ed84 7a07 	vstr	s14, [r4, #28]
 800295a:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 800295e:	bf00      	nop
 8002960:	37fc      	adds	r7, #252	; 0xfc
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}

08002966 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002966:	b480      	push	{r7}
 8002968:	b093      	sub	sp, #76	; 0x4c
 800296a:	af00      	add	r7, sp, #0
 800296c:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	dc02      	bgt.n	800297c <HalfGravity+0x16>
 8002976:	2b00      	cmp	r3, #0
 8002978:	da03      	bge.n	8002982 <HalfGravity+0x1c>
 800297a:	e094      	b.n	8002aa6 <HalfGravity+0x140>
 800297c:	2b02      	cmp	r3, #2
 800297e:	d048      	beq.n	8002a12 <HalfGravity+0xac>
 8002980:	e091      	b.n	8002aa6 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	ed93 7a06 	vldr	s14, [r3, #24]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	edd3 7a08 	vldr	s15, [r3, #32]
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	edd3 6a05 	vldr	s13, [r3, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	edd3 7a07 	vldr	s15, [r3, #28]
 800299e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80029b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	edd3 6a05 	vldr	s13, [r3, #20]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80029c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ca:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	ed93 7a05 	vldr	s14, [r3, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	edd3 7a05 	vldr	s15, [r3, #20]
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	edd3 6a08 	vldr	s13, [r3, #32]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002a02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a10:	e052      	b.n	8002ab8 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a32:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002a36:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002a62:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002a92:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002a96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a9a:	f107 0218 	add.w	r2, r7, #24
 8002a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002aa4:	e008      	b.n	8002ab8 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	ee06 1a90 	vmov	s13, r1
 8002ac2:	ee07 2a10 	vmov	s14, r2
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eeb0 0a66 	vmov.f32	s0, s13
 8002ace:	eef0 0a47 	vmov.f32	s1, s14
 8002ad2:	eeb0 1a67 	vmov.f32	s2, s15
 8002ad6:	374c      	adds	r7, #76	; 0x4c
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b097      	sub	sp, #92	; 0x5c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	f000 809a 	beq.w	8002c26 <HalfMagnetic+0x146>
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f300 80e1 	bgt.w	8002cba <HalfMagnetic+0x1da>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <HalfMagnetic+0x22>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d048      	beq.n	8002b92 <HalfMagnetic+0xb2>
 8002b00:	e0db      	b.n	8002cba <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b26:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b3e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b56:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b7e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002b82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b86:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b90:	e09c      	b.n	8002ccc <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	edd3 6a06 	vldr	s13, [r3, #24]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002be6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	ed93 7a06 	vldr	s14, [r3, #24]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002c12:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002c16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c24:	e052      	b.n	8002ccc <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002c4e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002c7e:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ca6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002caa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cae:	f107 021c 	add.w	r2, r7, #28
 8002cb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cb8:	e008      	b.n	8002ccc <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002ccc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd2:	ee06 1a90 	vmov	s13, r1
 8002cd6:	ee07 2a10 	vmov	s14, r2
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eeb0 0a66 	vmov.f32	s0, s13
 8002ce2:	eef0 0a47 	vmov.f32	s1, s14
 8002ce6:	eeb0 1a67 	vmov.f32	s2, s15
 8002cea:	375c      	adds	r7, #92	; 0x5c
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002cf4:	b490      	push	{r4, r7}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f107 0418 	add.w	r4, r7, #24
 8002d02:	3314      	adds	r3, #20
 8002d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d0a:	69b8      	ldr	r0, [r7, #24]
 8002d0c:	69f9      	ldr	r1, [r7, #28]
 8002d0e:	6a3a      	ldr	r2, [r7, #32]
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	ee06 0a10 	vmov	s12, r0
 8002d16:	ee06 1a90 	vmov	s13, r1
 8002d1a:	ee07 2a10 	vmov	s14, r2
 8002d1e:	ee07 3a90 	vmov	s15, r3
}
 8002d22:	eeb0 0a46 	vmov.f32	s0, s12
 8002d26:	eef0 0a66 	vmov.f32	s1, s13
 8002d2a:	eeb0 1a47 	vmov.f32	s2, s14
 8002d2e:	eef0 1a67 	vmov.f32	s3, s15
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc90      	pop	{r4, r7}
 8002d38:	4770      	bx	lr

08002d3a <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002d3a:	b590      	push	{r4, r7, lr}
 8002d3c:	b089      	sub	sp, #36	; 0x24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d66:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	edd3 6a08 	vldr	s13, [r3, #32]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d96:	eef0 0a67 	vmov.f32	s1, s15
 8002d9a:	eeb0 0a46 	vmov.f32	s0, s12
 8002d9e:	f010 fc05 	bl	80135ac <atan2f>
 8002da2:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002da6:	ed97 0a00 	vldr	s0, [r7]
 8002daa:	f7fe fcc3 	bl	8001734 <FusionDegreesToRadians>
 8002dae:	eeb0 7a40 	vmov.f32	s14, s0
 8002db2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002db6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002dc6:	ed97 0a06 	vldr	s0, [r7, #24]
 8002dca:	f010 fc49 	bl	8013660 <cosf>
 8002dce:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002dd2:	edc7 7a02 	vstr	s15, [r7, #8]
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002de2:	ed97 0a06 	vldr	s0, [r7, #24]
 8002de6:	f010 fc87 	bl	80136f8 <sinf>
 8002dea:	eef0 7a40 	vmov.f32	s15, s0
 8002dee:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002df2:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002df6:	687c      	ldr	r4, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	ed93 4a05 	vldr	s8, [r3, #20]
 8002dfe:	edd3 4a06 	vldr	s9, [r3, #24]
 8002e02:	ed93 5a07 	vldr	s10, [r3, #28]
 8002e06:	edd3 5a08 	vldr	s11, [r3, #32]
 8002e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e0e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e12:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e1a:	eeb0 2a44 	vmov.f32	s4, s8
 8002e1e:	eef0 2a64 	vmov.f32	s5, s9
 8002e22:	eeb0 3a45 	vmov.f32	s6, s10
 8002e26:	eef0 3a65 	vmov.f32	s7, s11
 8002e2a:	eeb0 0a46 	vmov.f32	s0, s12
 8002e2e:	eef0 0a66 	vmov.f32	s1, s13
 8002e32:	eeb0 1a47 	vmov.f32	s2, s14
 8002e36:	eef0 1a67 	vmov.f32	s3, s15
 8002e3a:	f7fe ff54 	bl	8001ce6 <FusionQuaternionMultiply>
 8002e3e:	eeb0 6a40 	vmov.f32	s12, s0
 8002e42:	eef0 6a60 	vmov.f32	s13, s1
 8002e46:	eeb0 7a41 	vmov.f32	s14, s2
 8002e4a:	eef0 7a61 	vmov.f32	s15, s3
 8002e4e:	ed84 6a05 	vstr	s12, [r4, #20]
 8002e52:	edc4 6a06 	vstr	s13, [r4, #24]
 8002e56:	ed84 7a07 	vstr	s14, [r4, #28]
 8002e5a:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002e5e:	bf00      	nop
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}
	...

08002e68 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e76:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002e8c <FusionRadiansToDegrees+0x24>
 8002e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	42652ee0 	.word	0x42652ee0

08002e90 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	105a      	asrs	r2, r3, #1
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <FusionFastInverseSqrt+0x54>)
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8002ea8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002ee8 <FusionFastInverseSqrt+0x58>
 8002eb4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ebc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002eec <FusionFastInverseSqrt+0x5c>
 8002ecc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	5f1f1412 	.word	0x5f1f1412
 8002ee8:	3f36d312 	.word	0x3f36d312
 8002eec:	3fd851ff 	.word	0x3fd851ff

08002ef0 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	eef0 6a40 	vmov.f32	s13, s0
 8002efa:	eeb0 7a60 	vmov.f32	s14, s1
 8002efe:	eef0 7a41 	vmov.f32	s15, s2
 8002f02:	edc7 6a01 	vstr	s13, [r7, #4]
 8002f06:	ed87 7a02 	vstr	s14, [r7, #8]
 8002f0a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8002f0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002f22:	eeb0 0a67 	vmov.f32	s0, s15
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002f30:	b480      	push	{r7}
 8002f32:	b08f      	sub	sp, #60	; 0x3c
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	eef0 6a40 	vmov.f32	s13, s0
 8002f3a:	eeb0 7a60 	vmov.f32	s14, s1
 8002f3e:	eef0 7a41 	vmov.f32	s15, s2
 8002f42:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f46:	edc7 6a05 	vstr	s13, [r7, #20]
 8002f4a:	ed87 7a06 	vstr	s14, [r7, #24]
 8002f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8002f52:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f5e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8002f62:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8002f72:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f76:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8002f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f86:	f107 0220 	add.w	r2, r7, #32
 8002f8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	ee06 1a90 	vmov	s13, r1
 8002f9a:	ee07 2a10 	vmov	s14, r2
 8002f9e:	ee07 3a90 	vmov	s15, r3
}
 8002fa2:	eeb0 0a66 	vmov.f32	s0, s13
 8002fa6:	eef0 0a47 	vmov.f32	s1, s14
 8002faa:	eeb0 1a67 	vmov.f32	s2, s15
 8002fae:	373c      	adds	r7, #60	; 0x3c
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002fb8:	b480      	push	{r7}
 8002fba:	b091      	sub	sp, #68	; 0x44
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	eeb0 5a40 	vmov.f32	s10, s0
 8002fc2:	eef0 5a60 	vmov.f32	s11, s1
 8002fc6:	eeb0 6a41 	vmov.f32	s12, s2
 8002fca:	eef0 6a61 	vmov.f32	s13, s3
 8002fce:	eeb0 7a42 	vmov.f32	s14, s4
 8002fd2:	eef0 7a62 	vmov.f32	s15, s5
 8002fd6:	ed87 5a07 	vstr	s10, [r7, #28]
 8002fda:	edc7 5a08 	vstr	s11, [r7, #32]
 8002fde:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002fe2:	edc7 6a04 	vstr	s13, [r7, #16]
 8002fe6:	ed87 7a05 	vstr	s14, [r7, #20]
 8002fea:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8002fee:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002ffa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8002ffe:	ed97 7a08 	vldr	s14, [r7, #32]
 8003002:	edd7 7a05 	vldr	s15, [r7, #20]
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800300a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800300e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003012:	edd7 7a06 	vldr	s15, [r7, #24]
 8003016:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800301a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800301e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003022:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003026:	ca07      	ldmia	r2, {r0, r1, r2}
 8003028:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800302c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800302e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	ee06 1a90 	vmov	s13, r1
 8003036:	ee07 2a10 	vmov	s14, r2
 800303a:	ee07 3a90 	vmov	s15, r3
}
 800303e:	eeb0 0a66 	vmov.f32	s0, s13
 8003042:	eef0 0a47 	vmov.f32	s1, s14
 8003046:	eeb0 1a67 	vmov.f32	s2, s15
 800304a:	3744      	adds	r7, #68	; 0x44
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003054:	b480      	push	{r7}
 8003056:	b091      	sub	sp, #68	; 0x44
 8003058:	af00      	add	r7, sp, #0
 800305a:	eeb0 5a40 	vmov.f32	s10, s0
 800305e:	eef0 5a60 	vmov.f32	s11, s1
 8003062:	eeb0 6a41 	vmov.f32	s12, s2
 8003066:	eef0 6a61 	vmov.f32	s13, s3
 800306a:	eeb0 7a42 	vmov.f32	s14, s4
 800306e:	eef0 7a62 	vmov.f32	s15, s5
 8003072:	ed87 5a07 	vstr	s10, [r7, #28]
 8003076:	edc7 5a08 	vstr	s11, [r7, #32]
 800307a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800307e:	edc7 6a04 	vstr	s13, [r7, #16]
 8003082:	ed87 7a05 	vstr	s14, [r7, #20]
 8003086:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800308a:	ed97 7a08 	vldr	s14, [r7, #32]
 800308e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003096:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800309a:	edd7 7a05 	vldr	s15, [r7, #20]
 800309e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80030aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80030ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80030be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80030ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80030ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d6:	edd7 6a08 	vldr	s13, [r7, #32]
 80030da:	edd7 7a04 	vldr	s15, [r7, #16]
 80030de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80030ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80030f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fe:	ee06 1a90 	vmov	s13, r1
 8003102:	ee07 2a10 	vmov	s14, r2
 8003106:	ee07 3a90 	vmov	s15, r3
}
 800310a:	eeb0 0a66 	vmov.f32	s0, s13
 800310e:	eef0 0a47 	vmov.f32	s1, s14
 8003112:	eeb0 1a67 	vmov.f32	s2, s15
 8003116:	3744      	adds	r7, #68	; 0x44
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	eef0 6a40 	vmov.f32	s13, s0
 800312a:	eeb0 7a60 	vmov.f32	s14, s1
 800312e:	eef0 7a41 	vmov.f32	s15, s2
 8003132:	edc7 6a01 	vstr	s13, [r7, #4]
 8003136:	ed87 7a02 	vstr	s14, [r7, #8]
 800313a:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800313e:	ed97 5a01 	vldr	s10, [r7, #4]
 8003142:	edd7 5a02 	vldr	s11, [r7, #8]
 8003146:	ed97 6a03 	vldr	s12, [r7, #12]
 800314a:	edd7 6a01 	vldr	s13, [r7, #4]
 800314e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003152:	edd7 7a03 	vldr	s15, [r7, #12]
 8003156:	eef0 1a45 	vmov.f32	s3, s10
 800315a:	eeb0 2a65 	vmov.f32	s4, s11
 800315e:	eef0 2a46 	vmov.f32	s5, s12
 8003162:	eeb0 0a66 	vmov.f32	s0, s13
 8003166:	eef0 0a47 	vmov.f32	s1, s14
 800316a:	eeb0 1a67 	vmov.f32	s2, s15
 800316e:	f7ff ff23 	bl	8002fb8 <FusionVectorHadamardProduct>
 8003172:	eef0 6a40 	vmov.f32	s13, s0
 8003176:	eeb0 7a60 	vmov.f32	s14, s1
 800317a:	eef0 7a41 	vmov.f32	s15, s2
 800317e:	edc7 6a05 	vstr	s13, [r7, #20]
 8003182:	ed87 7a06 	vstr	s14, [r7, #24]
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
 800318a:	edd7 6a05 	vldr	s13, [r7, #20]
 800318e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003192:	edd7 7a07 	vldr	s15, [r7, #28]
 8003196:	eeb0 0a66 	vmov.f32	s0, s13
 800319a:	eef0 0a47 	vmov.f32	s1, s14
 800319e:	eeb0 1a67 	vmov.f32	s2, s15
 80031a2:	f7ff fea5 	bl	8002ef0 <FusionVectorSum>
 80031a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80031aa:	eeb0 0a67 	vmov.f32	s0, s15
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	eef0 6a40 	vmov.f32	s13, s0
 80031be:	eeb0 7a60 	vmov.f32	s14, s1
 80031c2:	eef0 7a41 	vmov.f32	s15, s2
 80031c6:	edc7 6a05 	vstr	s13, [r7, #20]
 80031ca:	ed87 7a06 	vstr	s14, [r7, #24]
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80031d2:	edd7 6a05 	vldr	s13, [r7, #20]
 80031d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80031da:	edd7 7a07 	vldr	s15, [r7, #28]
 80031de:	eeb0 0a66 	vmov.f32	s0, s13
 80031e2:	eef0 0a47 	vmov.f32	s1, s14
 80031e6:	eeb0 1a67 	vmov.f32	s2, s15
 80031ea:	f7ff ff99 	bl	8003120 <FusionVectorMagnitudeSquared>
 80031ee:	eef0 7a40 	vmov.f32	s15, s0
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	f7ff fe4b 	bl	8002e90 <FusionFastInverseSqrt>
 80031fa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80031fe:	edd7 6a05 	vldr	s13, [r7, #20]
 8003202:	ed97 7a06 	vldr	s14, [r7, #24]
 8003206:	edd7 7a07 	vldr	s15, [r7, #28]
 800320a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800320e:	eeb0 0a66 	vmov.f32	s0, s13
 8003212:	eef0 0a47 	vmov.f32	s1, s14
 8003216:	eeb0 1a67 	vmov.f32	s2, s15
 800321a:	f7ff fe89 	bl	8002f30 <FusionVectorMultiplyScalar>
 800321e:	eef0 6a40 	vmov.f32	s13, s0
 8003222:	eeb0 7a60 	vmov.f32	s14, s1
 8003226:	eef0 7a41 	vmov.f32	s15, s2
 800322a:	edc7 6a08 	vstr	s13, [r7, #32]
 800322e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003232:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8003236:	6a39      	ldr	r1, [r7, #32]
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	ee06 1a90 	vmov	s13, r1
 8003240:	ee07 2a10 	vmov	s14, r2
 8003244:	ee07 3a90 	vmov	s15, r3
}
 8003248:	eeb0 0a66 	vmov.f32	s0, s13
 800324c:	eef0 0a47 	vmov.f32	s1, s14
 8003250:	eeb0 1a67 	vmov.f32	s2, s15
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b0b2      	sub	sp, #200	; 0xc8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	eeb0 5a40 	vmov.f32	s10, s0
 8003268:	eef0 5a60 	vmov.f32	s11, s1
 800326c:	eeb0 6a41 	vmov.f32	s12, s2
 8003270:	eef0 6a61 	vmov.f32	s13, s3
 8003274:	eeb0 7a42 	vmov.f32	s14, s4
 8003278:	eef0 7a62 	vmov.f32	s15, s5
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	ed87 5a04 	vstr	s10, [r7, #16]
 8003282:	edc7 5a05 	vstr	s11, [r7, #20]
 8003286:	ed87 6a06 	vstr	s12, [r7, #24]
 800328a:	edc7 6a01 	vstr	s13, [r7, #4]
 800328e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003292:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 8003296:	7ffb      	ldrb	r3, [r7, #31]
 8003298:	2b02      	cmp	r3, #2
 800329a:	f000 814b 	beq.w	8003534 <FusionCompassCalculateHeading+0x2d8>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	f300 81f7 	bgt.w	8003692 <FusionCompassCalculateHeading+0x436>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <FusionCompassCalculateHeading+0x54>
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f000 8094 	beq.w	80033d6 <FusionCompassCalculateHeading+0x17a>
 80032ae:	e1f0      	b.n	8003692 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80032b0:	ed97 5a01 	vldr	s10, [r7, #4]
 80032b4:	edd7 5a02 	vldr	s11, [r7, #8]
 80032b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80032bc:	edd7 6a04 	vldr	s13, [r7, #16]
 80032c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032c8:	eef0 1a45 	vmov.f32	s3, s10
 80032cc:	eeb0 2a65 	vmov.f32	s4, s11
 80032d0:	eef0 2a46 	vmov.f32	s5, s12
 80032d4:	eeb0 0a66 	vmov.f32	s0, s13
 80032d8:	eef0 0a47 	vmov.f32	s1, s14
 80032dc:	eeb0 1a67 	vmov.f32	s2, s15
 80032e0:	f7ff feb8 	bl	8003054 <FusionVectorCrossProduct>
 80032e4:	eef0 6a40 	vmov.f32	s13, s0
 80032e8:	eeb0 7a60 	vmov.f32	s14, s1
 80032ec:	eef0 7a41 	vmov.f32	s15, s2
 80032f0:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 80032f4:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 80032f8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 80032fc:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003300:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003304:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003308:	eeb0 0a66 	vmov.f32	s0, s13
 800330c:	eef0 0a47 	vmov.f32	s1, s14
 8003310:	eeb0 1a67 	vmov.f32	s2, s15
 8003314:	f7ff ff4e 	bl	80031b4 <FusionVectorNormalise>
 8003318:	eef0 6a40 	vmov.f32	s13, s0
 800331c:	eeb0 7a60 	vmov.f32	s14, s1
 8003320:	eef0 7a41 	vmov.f32	s15, s2
 8003324:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 8003328:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 800332c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003330:	ed97 5a04 	vldr	s10, [r7, #16]
 8003334:	edd7 5a05 	vldr	s11, [r7, #20]
 8003338:	ed97 6a06 	vldr	s12, [r7, #24]
 800333c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8003340:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003344:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003348:	eef0 1a45 	vmov.f32	s3, s10
 800334c:	eeb0 2a65 	vmov.f32	s4, s11
 8003350:	eef0 2a46 	vmov.f32	s5, s12
 8003354:	eeb0 0a66 	vmov.f32	s0, s13
 8003358:	eef0 0a47 	vmov.f32	s1, s14
 800335c:	eeb0 1a67 	vmov.f32	s2, s15
 8003360:	f7ff fe78 	bl	8003054 <FusionVectorCrossProduct>
 8003364:	eef0 6a40 	vmov.f32	s13, s0
 8003368:	eeb0 7a60 	vmov.f32	s14, s1
 800336c:	eef0 7a41 	vmov.f32	s15, s2
 8003370:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 8003374:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 8003378:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 800337c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003380:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003384:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003388:	eeb0 0a66 	vmov.f32	s0, s13
 800338c:	eef0 0a47 	vmov.f32	s1, s14
 8003390:	eeb0 1a67 	vmov.f32	s2, s15
 8003394:	f7ff ff0e 	bl	80031b4 <FusionVectorNormalise>
 8003398:	eef0 6a40 	vmov.f32	s13, s0
 800339c:	eeb0 7a60 	vmov.f32	s14, s1
 80033a0:	eef0 7a41 	vmov.f32	s15, s2
 80033a4:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 80033a8:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 80033ac:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80033b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80033b4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80033b8:	eef0 0a47 	vmov.f32	s1, s14
 80033bc:	eeb0 0a67 	vmov.f32	s0, s15
 80033c0:	f010 f8f4 	bl	80135ac <atan2f>
 80033c4:	eef0 7a40 	vmov.f32	s15, s0
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f7ff fd4c 	bl	8002e68 <FusionRadiansToDegrees>
 80033d0:	eef0 7a40 	vmov.f32	s15, s0
 80033d4:	e15f      	b.n	8003696 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80033d6:	ed97 5a01 	vldr	s10, [r7, #4]
 80033da:	edd7 5a02 	vldr	s11, [r7, #8]
 80033de:	ed97 6a03 	vldr	s12, [r7, #12]
 80033e2:	edd7 6a04 	vldr	s13, [r7, #16]
 80033e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80033ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80033ee:	eef0 1a45 	vmov.f32	s3, s10
 80033f2:	eeb0 2a65 	vmov.f32	s4, s11
 80033f6:	eef0 2a46 	vmov.f32	s5, s12
 80033fa:	eeb0 0a66 	vmov.f32	s0, s13
 80033fe:	eef0 0a47 	vmov.f32	s1, s14
 8003402:	eeb0 1a67 	vmov.f32	s2, s15
 8003406:	f7ff fe25 	bl	8003054 <FusionVectorCrossProduct>
 800340a:	eef0 6a40 	vmov.f32	s13, s0
 800340e:	eeb0 7a60 	vmov.f32	s14, s1
 8003412:	eef0 7a41 	vmov.f32	s15, s2
 8003416:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800341a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800341e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8003422:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003426:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800342a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800342e:	eeb0 0a66 	vmov.f32	s0, s13
 8003432:	eef0 0a47 	vmov.f32	s1, s14
 8003436:	eeb0 1a67 	vmov.f32	s2, s15
 800343a:	f7ff febb 	bl	80031b4 <FusionVectorNormalise>
 800343e:	eef0 6a40 	vmov.f32	s13, s0
 8003442:	eeb0 7a60 	vmov.f32	s14, s1
 8003446:	eef0 7a41 	vmov.f32	s15, s2
 800344a:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800344e:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8003452:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003456:	ed97 5a04 	vldr	s10, [r7, #16]
 800345a:	edd7 5a05 	vldr	s11, [r7, #20]
 800345e:	ed97 6a06 	vldr	s12, [r7, #24]
 8003462:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003466:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800346a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800346e:	eef0 1a45 	vmov.f32	s3, s10
 8003472:	eeb0 2a65 	vmov.f32	s4, s11
 8003476:	eef0 2a46 	vmov.f32	s5, s12
 800347a:	eeb0 0a66 	vmov.f32	s0, s13
 800347e:	eef0 0a47 	vmov.f32	s1, s14
 8003482:	eeb0 1a67 	vmov.f32	s2, s15
 8003486:	f7ff fde5 	bl	8003054 <FusionVectorCrossProduct>
 800348a:	eef0 6a40 	vmov.f32	s13, s0
 800348e:	eeb0 7a60 	vmov.f32	s14, s1
 8003492:	eef0 7a41 	vmov.f32	s15, s2
 8003496:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 800349a:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 800349e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 80034a2:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80034a6:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80034aa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80034ae:	eeb0 0a66 	vmov.f32	s0, s13
 80034b2:	eef0 0a47 	vmov.f32	s1, s14
 80034b6:	eeb0 1a67 	vmov.f32	s2, s15
 80034ba:	f7ff fe7b 	bl	80031b4 <FusionVectorNormalise>
 80034be:	eef0 6a40 	vmov.f32	s13, s0
 80034c2:	eeb0 7a60 	vmov.f32	s14, s1
 80034c6:	eef0 7a41 	vmov.f32	s15, s2
 80034ca:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 80034ce:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 80034d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 80034d6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80034da:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80034de:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80034e2:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80034e6:	eeb0 0a66 	vmov.f32	s0, s13
 80034ea:	eef0 0a47 	vmov.f32	s1, s14
 80034ee:	eeb0 1a67 	vmov.f32	s2, s15
 80034f2:	f7ff fd1d 	bl	8002f30 <FusionVectorMultiplyScalar>
 80034f6:	eef0 6a40 	vmov.f32	s13, s0
 80034fa:	eeb0 7a60 	vmov.f32	s14, s1
 80034fe:	eef0 7a41 	vmov.f32	s15, s2
 8003502:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8003506:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800350a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800350e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003512:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003516:	eef0 0a47 	vmov.f32	s1, s14
 800351a:	eeb0 0a67 	vmov.f32	s0, s15
 800351e:	f010 f845 	bl	80135ac <atan2f>
 8003522:	eef0 7a40 	vmov.f32	s15, s0
 8003526:	eeb0 0a67 	vmov.f32	s0, s15
 800352a:	f7ff fc9d 	bl	8002e68 <FusionRadiansToDegrees>
 800352e:	eef0 7a40 	vmov.f32	s15, s0
 8003532:	e0b0      	b.n	8003696 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8003534:	edd7 6a04 	vldr	s13, [r7, #16]
 8003538:	ed97 7a05 	vldr	s14, [r7, #20]
 800353c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003540:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003544:	eeb0 0a66 	vmov.f32	s0, s13
 8003548:	eef0 0a47 	vmov.f32	s1, s14
 800354c:	eeb0 1a67 	vmov.f32	s2, s15
 8003550:	f7ff fcee 	bl	8002f30 <FusionVectorMultiplyScalar>
 8003554:	eef0 6a40 	vmov.f32	s13, s0
 8003558:	eeb0 7a60 	vmov.f32	s14, s1
 800355c:	eef0 7a41 	vmov.f32	s15, s2
 8003560:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8003564:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8003568:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 800356c:	ed97 5a01 	vldr	s10, [r7, #4]
 8003570:	edd7 5a02 	vldr	s11, [r7, #8]
 8003574:	ed97 6a03 	vldr	s12, [r7, #12]
 8003578:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800357c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003580:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003584:	eef0 1a45 	vmov.f32	s3, s10
 8003588:	eeb0 2a65 	vmov.f32	s4, s11
 800358c:	eef0 2a46 	vmov.f32	s5, s12
 8003590:	eeb0 0a66 	vmov.f32	s0, s13
 8003594:	eef0 0a47 	vmov.f32	s1, s14
 8003598:	eeb0 1a67 	vmov.f32	s2, s15
 800359c:	f7ff fd5a 	bl	8003054 <FusionVectorCrossProduct>
 80035a0:	eef0 6a40 	vmov.f32	s13, s0
 80035a4:	eeb0 7a60 	vmov.f32	s14, s1
 80035a8:	eef0 7a41 	vmov.f32	s15, s2
 80035ac:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 80035b0:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 80035b4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 80035b8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80035bc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80035c0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035c4:	eeb0 0a66 	vmov.f32	s0, s13
 80035c8:	eef0 0a47 	vmov.f32	s1, s14
 80035cc:	eeb0 1a67 	vmov.f32	s2, s15
 80035d0:	f7ff fdf0 	bl	80031b4 <FusionVectorNormalise>
 80035d4:	eef0 6a40 	vmov.f32	s13, s0
 80035d8:	eeb0 7a60 	vmov.f32	s14, s1
 80035dc:	eef0 7a41 	vmov.f32	s15, s2
 80035e0:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80035e4:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80035e8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 80035ec:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 80035f0:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 80035f4:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80035f8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80035fc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003600:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003604:	eef0 1a45 	vmov.f32	s3, s10
 8003608:	eeb0 2a65 	vmov.f32	s4, s11
 800360c:	eef0 2a46 	vmov.f32	s5, s12
 8003610:	eeb0 0a66 	vmov.f32	s0, s13
 8003614:	eef0 0a47 	vmov.f32	s1, s14
 8003618:	eeb0 1a67 	vmov.f32	s2, s15
 800361c:	f7ff fd1a 	bl	8003054 <FusionVectorCrossProduct>
 8003620:	eef0 6a40 	vmov.f32	s13, s0
 8003624:	eeb0 7a60 	vmov.f32	s14, s1
 8003628:	eef0 7a41 	vmov.f32	s15, s2
 800362c:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8003630:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8003634:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8003638:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800363c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003640:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003644:	eeb0 0a66 	vmov.f32	s0, s13
 8003648:	eef0 0a47 	vmov.f32	s1, s14
 800364c:	eeb0 1a67 	vmov.f32	s2, s15
 8003650:	f7ff fdb0 	bl	80031b4 <FusionVectorNormalise>
 8003654:	eef0 6a40 	vmov.f32	s13, s0
 8003658:	eeb0 7a60 	vmov.f32	s14, s1
 800365c:	eef0 7a41 	vmov.f32	s15, s2
 8003660:	edc7 6a08 	vstr	s13, [r7, #32]
 8003664:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003668:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 800366c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003670:	ed97 7a08 	vldr	s14, [r7, #32]
 8003674:	eef0 0a47 	vmov.f32	s1, s14
 8003678:	eeb0 0a67 	vmov.f32	s0, s15
 800367c:	f00f ff96 	bl	80135ac <atan2f>
 8003680:	eef0 7a40 	vmov.f32	s15, s0
 8003684:	eeb0 0a67 	vmov.f32	s0, s15
 8003688:	f7ff fbee 	bl	8002e68 <FusionRadiansToDegrees>
 800368c:	eef0 7a40 	vmov.f32	s15, s0
 8003690:	e001      	b.n	8003696 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 8003692:	eddf 7a03 	vldr	s15, [pc, #12]	; 80036a0 <FusionCompassCalculateHeading+0x444>
}
 8003696:	eeb0 0a67 	vmov.f32	s0, s15
 800369a:	37c8      	adds	r7, #200	; 0xc8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	00000000 	.word	0x00000000

080036a4 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 80036a4:	b480      	push	{r7}
 80036a6:	b091      	sub	sp, #68	; 0x44
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	eeb0 5a40 	vmov.f32	s10, s0
 80036ae:	eef0 5a60 	vmov.f32	s11, s1
 80036b2:	eeb0 6a41 	vmov.f32	s12, s2
 80036b6:	eef0 6a61 	vmov.f32	s13, s3
 80036ba:	eeb0 7a42 	vmov.f32	s14, s4
 80036be:	eef0 7a62 	vmov.f32	s15, s5
 80036c2:	ed87 5a07 	vstr	s10, [r7, #28]
 80036c6:	edc7 5a08 	vstr	s11, [r7, #32]
 80036ca:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80036ce:	edc7 6a04 	vstr	s13, [r7, #16]
 80036d2:	ed87 7a05 	vstr	s14, [r7, #20]
 80036d6:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80036da:	ed97 7a07 	vldr	s14, [r7, #28]
 80036de:	edd7 7a04 	vldr	s15, [r7, #16]
 80036e2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80036e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80036ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80036ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80036f6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80036fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80036fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003706:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800370a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800370e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003712:	ca07      	ldmia	r2, {r0, r1, r2}
 8003714:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800371a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800371c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371e:	ee06 1a90 	vmov	s13, r1
 8003722:	ee07 2a10 	vmov	s14, r2
 8003726:	ee07 3a90 	vmov	s15, r3
}
 800372a:	eeb0 0a66 	vmov.f32	s0, s13
 800372e:	eef0 0a47 	vmov.f32	s1, s14
 8003732:	eeb0 1a67 	vmov.f32	s2, s15
 8003736:	3744      	adds	r7, #68	; 0x44
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8003740:	b480      	push	{r7}
 8003742:	b091      	sub	sp, #68	; 0x44
 8003744:	af00      	add	r7, sp, #0
 8003746:	eeb0 5a40 	vmov.f32	s10, s0
 800374a:	eef0 5a60 	vmov.f32	s11, s1
 800374e:	eeb0 6a41 	vmov.f32	s12, s2
 8003752:	eef0 6a61 	vmov.f32	s13, s3
 8003756:	eeb0 7a42 	vmov.f32	s14, s4
 800375a:	eef0 7a62 	vmov.f32	s15, s5
 800375e:	ed87 5a07 	vstr	s10, [r7, #28]
 8003762:	edc7 5a08 	vstr	s11, [r7, #32]
 8003766:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800376a:	edc7 6a04 	vstr	s13, [r7, #16]
 800376e:	ed87 7a05 	vstr	s14, [r7, #20]
 8003772:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 8003776:	ed97 7a07 	vldr	s14, [r7, #28]
 800377a:	edd7 7a04 	vldr	s15, [r7, #16]
 800377e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003782:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8003786:	ed97 7a08 	vldr	s14, [r7, #32]
 800378a:	edd7 7a05 	vldr	s15, [r7, #20]
 800378e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003792:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8003796:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800379a:	edd7 7a06 	vldr	s15, [r7, #24]
 800379e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80037a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80037a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80037b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ba:	ee06 1a90 	vmov	s13, r1
 80037be:	ee07 2a10 	vmov	s14, r2
 80037c2:	ee07 3a90 	vmov	s15, r3
}
 80037c6:	eeb0 0a66 	vmov.f32	s0, s13
 80037ca:	eef0 0a47 	vmov.f32	s1, s14
 80037ce:	eeb0 1a67 	vmov.f32	s2, s15
 80037d2:	3744      	adds	r7, #68	; 0x44
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80037dc:	b480      	push	{r7}
 80037de:	b08f      	sub	sp, #60	; 0x3c
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	eef0 6a40 	vmov.f32	s13, s0
 80037e6:	eeb0 7a60 	vmov.f32	s14, s1
 80037ea:	eef0 7a41 	vmov.f32	s15, s2
 80037ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80037f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80037f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80037fa:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80037fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003802:	edd7 7a04 	vldr	s15, [r7, #16]
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800380a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800380e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003812:	edd7 7a04 	vldr	s15, [r7, #16]
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800381a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800381e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003822:	edd7 7a04 	vldr	s15, [r7, #16]
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800382a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 800382e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003832:	f107 0220 	add.w	r2, r7, #32
 8003836:	ca07      	ldmia	r2, {r0, r1, r2}
 8003838:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800383c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800383e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	ee06 1a90 	vmov	s13, r1
 8003846:	ee07 2a10 	vmov	s14, r2
 800384a:	ee07 3a90 	vmov	s15, r3
}
 800384e:	eeb0 0a66 	vmov.f32	s0, s13
 8003852:	eef0 0a47 	vmov.f32	s1, s14
 8003856:	eeb0 1a67 	vmov.f32	s2, s15
 800385a:	373c      	adds	r7, #60	; 0x3c
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	ee07 3a90 	vmov	s15, r3
 8003874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003880:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80038c4 <FusionOffsetInitialise+0x60>
 8003884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	615a      	str	r2, [r3, #20]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	3e00adfd 	.word	0x3e00adfd

080038c8 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b08f      	sub	sp, #60	; 0x3c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	61f8      	str	r0, [r7, #28]
 80038d0:	eef0 6a40 	vmov.f32	s13, s0
 80038d4:	eeb0 7a60 	vmov.f32	s14, s1
 80038d8:	eef0 7a41 	vmov.f32	s15, s2
 80038dc:	edc7 6a04 	vstr	s13, [r7, #16]
 80038e0:	ed87 7a05 	vstr	s14, [r7, #20]
 80038e4:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	ed93 5a03 	vldr	s10, [r3, #12]
 80038ee:	edd3 5a04 	vldr	s11, [r3, #16]
 80038f2:	ed93 6a05 	vldr	s12, [r3, #20]
 80038f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80038fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80038fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003902:	eef0 1a45 	vmov.f32	s3, s10
 8003906:	eeb0 2a65 	vmov.f32	s4, s11
 800390a:	eef0 2a46 	vmov.f32	s5, s12
 800390e:	eeb0 0a66 	vmov.f32	s0, s13
 8003912:	eef0 0a47 	vmov.f32	s1, s14
 8003916:	eeb0 1a67 	vmov.f32	s2, s15
 800391a:	f7ff ff11 	bl	8003740 <FusionVectorSubtract>
 800391e:	eef0 6a40 	vmov.f32	s13, s0
 8003922:	eeb0 7a60 	vmov.f32	s14, s1
 8003926:	eef0 7a41 	vmov.f32	s15, s2
 800392a:	edc7 6a04 	vstr	s13, [r7, #16]
 800392e:	ed87 7a05 	vstr	s14, [r7, #20]
 8003932:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8003936:	edd7 7a04 	vldr	s15, [r7, #16]
 800393a:	eef0 7ae7 	vabs.f32	s15, s15
 800393e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	dc15      	bgt.n	8003978 <FusionOffsetUpdate+0xb0>
 800394c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003950:	eef0 7ae7 	vabs.f32	s15, s15
 8003954:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800395c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003960:	dc0a      	bgt.n	8003978 <FusionOffsetUpdate+0xb0>
 8003962:	edd7 7a06 	vldr	s15, [r7, #24]
 8003966:	eef0 7ae7 	vabs.f32	s15, s15
 800396a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800396e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003976:	dd0a      	ble.n	800398e <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
        return gyroscope;
 800397e:	f107 0320 	add.w	r3, r7, #32
 8003982:	f107 0210 	add.w	r2, r7, #16
 8003986:	ca07      	ldmia	r2, {r0, r1, r2}
 8003988:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800398c:	e060      	b.n	8003a50 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d20c      	bcs.n	80039b4 <FusionOffsetUpdate+0xec>
        offset->timer++;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	609a      	str	r2, [r3, #8]
        return gyroscope;
 80039a4:	f107 0320 	add.w	r3, r7, #32
 80039a8:	f107 0210 	add.w	r2, r7, #16
 80039ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039b2:	e04d      	b.n	8003a50 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	ed93 6a00 	vldr	s12, [r3]
 80039ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80039be:	ed97 7a05 	vldr	s14, [r7, #20]
 80039c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80039c6:	eef0 1a46 	vmov.f32	s3, s12
 80039ca:	eeb0 0a66 	vmov.f32	s0, s13
 80039ce:	eef0 0a47 	vmov.f32	s1, s14
 80039d2:	eeb0 1a67 	vmov.f32	s2, s15
 80039d6:	f7ff ff01 	bl	80037dc <FusionVectorMultiplyScalar>
 80039da:	eef0 6a40 	vmov.f32	s13, s0
 80039de:	eeb0 7a60 	vmov.f32	s14, s1
 80039e2:	eef0 7a41 	vmov.f32	s15, s2
 80039e6:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80039ea:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80039ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80039f2:	69fc      	ldr	r4, [r7, #28]
 80039f4:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 80039f8:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 80039fc:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	edd3 6a03 	vldr	s13, [r3, #12]
 8003a06:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a0e:	eef0 1a45 	vmov.f32	s3, s10
 8003a12:	eeb0 2a65 	vmov.f32	s4, s11
 8003a16:	eef0 2a46 	vmov.f32	s5, s12
 8003a1a:	eeb0 0a66 	vmov.f32	s0, s13
 8003a1e:	eef0 0a47 	vmov.f32	s1, s14
 8003a22:	eeb0 1a67 	vmov.f32	s2, s15
 8003a26:	f7ff fe3d 	bl	80036a4 <FusionVectorAdd>
 8003a2a:	eef0 6a40 	vmov.f32	s13, s0
 8003a2e:	eeb0 7a60 	vmov.f32	s14, s1
 8003a32:	eef0 7a41 	vmov.f32	s15, s2
 8003a36:	edc4 6a03 	vstr	s13, [r4, #12]
 8003a3a:	ed84 7a04 	vstr	s14, [r4, #16]
 8003a3e:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8003a42:	f107 0320 	add.w	r3, r7, #32
 8003a46:	f107 0210 	add.w	r2, r7, #16
 8003a4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003a50:	6a39      	ldr	r1, [r7, #32]
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	ee06 1a90 	vmov	s13, r1
 8003a5a:	ee07 2a10 	vmov	s14, r2
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eeb0 0a66 	vmov.f32	s0, s13
 8003a66:	eef0 0a47 	vmov.f32	s1, s14
 8003a6a:	eeb0 1a67 	vmov.f32	s2, s15
 8003a6e:	373c      	adds	r7, #60	; 0x3c
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd90      	pop	{r4, r7, pc}

08003a74 <GetPage>:




static uint32_t GetPage(uint32_t Address)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<256; indx++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e016      	b.n	8003ab0 <GetPage+0x3c>
  {
	  if((Address < (FLASH_BASE + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (FLASH_BASE + FLASH_PAGE_SIZE*indx)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a88:	3301      	adds	r3, #1
 8003a8a:	031b      	lsls	r3, r3, #12
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d20b      	bcs.n	8003aaa <GetPage+0x36>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a98:	031b      	lsls	r3, r3, #12
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d304      	bcc.n	8003aaa <GetPage+0x36>
	  {
		  return (FLASH_BASE + FLASH_PAGE_SIZE*indx);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003aa6:	031b      	lsls	r3, r3, #12
 8003aa8:	e006      	b.n	8003ab8 <GetPage+0x44>
  for (int indx=0; indx<256; indx++)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	dde5      	ble.n	8003a82 <GetPage+0xe>
	  }
  }
  return 0;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <FlashReadData>:
}



void FlashReadData (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	e9c1 2300 	strd	r2, r3, [r1]
		StartPageAddress += 8;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)){
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	80fa      	strh	r2, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d000      	beq.n	8003af6 <FlashReadData+0x32>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 8003af4:	e7ed      	b.n	8003ad2 <FlashReadData+0xe>
			break;
 8003af6:	bf00      	nop
		}
	}
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <FlashWriteData>:
   return 0;
}


uint32_t FlashWriteData (uint32_t StartPageAddress, uint64_t *Data, uint16_t numberofwords)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8003b16:	f003 f91b 	bl	8006d50 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ffaa 	bl	8003a74 <GetPage>
 8003b20:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords * 8;
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8003b2e:	69f8      	ldr	r0, [r7, #28]
 8003b30:	f7ff ffa0 	bl	8003a74 <GetPage>
 8003b34:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.Banks = FLASH_BANK_1;
 8003b36:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <FlashWriteData+0xd0>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <FlashWriteData+0xd0>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = ((StartPage - FLASH_BASE) / FLASH_PAGE_SIZE);
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003b48:	0b1b      	lsrs	r3, r3, #12
 8003b4a:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <FlashWriteData+0xd0>)
 8003b4c:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = ((EndPage - StartPage)/FLASH_PAGE_SIZE) + 1;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	0b1b      	lsrs	r3, r3, #12
 8003b56:	3301      	adds	r3, #1
 8003b58:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <FlashWriteData+0xd0>)
 8003b5a:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	4619      	mov	r1, r3
 8003b62:	481c      	ldr	r0, [pc, #112]	; (8003bd4 <FlashWriteData+0xd0>)
 8003b64:	f003 f9e6 	bl	8006f34 <HAL_FLASHEx_Erase>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d027      	beq.n	8003bbe <FlashWriteData+0xba>
	   {
	     /*Error occurred while page erase.*/
		   uart_write_debug("Failed to erase flash\r\n",UART_NYX);
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4819      	ldr	r0, [pc, #100]	; (8003bd8 <FlashWriteData+0xd4>)
 8003b72:	f002 fcf5 	bl	8006560 <uart_write_debug>
		   HAL_FLASH_Lock();
 8003b76:	f003 f90d 	bl	8006d94 <HAL_FLASH_Lock>
		   return HAL_FLASH_GetError ();
 8003b7a:	f003 f91b 	bl	8006db4 <HAL_FLASH_GetError>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	e024      	b.n	8003bcc <FlashWriteData+0xc8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	2000      	movs	r0, #0
 8003b92:	f003 f871 	bl	8006c78 <HAL_FLASH_Program>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <FlashWriteData+0xa6>
	     {
	    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	e009      	b.n	8003bbe <FlashWriteData+0xba>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 uart_write_debug("Failed to write flash\r\n",UART_NYX);
 8003baa:	2101      	movs	r1, #1
 8003bac:	480b      	ldr	r0, [pc, #44]	; (8003bdc <FlashWriteData+0xd8>)
 8003bae:	f002 fcd7 	bl	8006560 <uart_write_debug>
	    	 HAL_FLASH_Lock();
 8003bb2:	f003 f8ef 	bl	8006d94 <HAL_FLASH_Lock>
	    	 return HAL_FLASH_GetError ();
 8003bb6:	f003 f8fd 	bl	8006db4 <HAL_FLASH_GetError>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	e006      	b.n	8003bcc <FlashWriteData+0xc8>
	   while (sofar<numberofwords)
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	dbdd      	blt.n	8003b82 <FlashWriteData+0x7e>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8003bc6:	f003 f8e5 	bl	8006d94 <HAL_FLASH_Lock>
	   return 0;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3728      	adds	r7, #40	; 0x28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	200002e0 	.word	0x200002e0
 8003bd8:	08014c58 	.word	0x08014c58
 8003bdc:	08014c70 	.word	0x08014c70

08003be0 <Flash_Write_CalTable>:
	return 1;
}


uint32_t Flash_Write_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	uint32_t res;
	float temp[3] = {0.0f};
 8003bea:	f107 031c 	add.w	r3, r7, #28
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
	temp[0] = data->gyro_x;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	61fb      	str	r3, [r7, #28]
	temp[1] = data->gyro_y;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	623b      	str	r3, [r7, #32]
	temp[2] = data->gyro_z;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bytes_temp[16] = {0};
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t j,v=0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003c24:	e02d      	b.n	8003c82 <Flash_Write_CalTable+0xa2>
		thing.a = temp[i];
 8003c26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3330      	adds	r3, #48	; 0x30
 8003c2e:	443b      	add	r3, r7
 8003c30:	3b14      	subs	r3, #20
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < 4; j++) {
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c3c:	e013      	b.n	8003c66 <Flash_Write_CalTable+0x86>
		  bytes_temp[v+j] = thing.bytes[j];
 8003c3e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c42:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c4a:	440b      	add	r3, r1
 8003c4c:	3230      	adds	r2, #48	; 0x30
 8003c4e:	443a      	add	r2, r7
 8003c50:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8003c54:	3330      	adds	r3, #48	; 0x30
 8003c56:	443b      	add	r3, r7
 8003c58:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (j = 0; j < 4; j++) {
 8003c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c60:	3301      	adds	r3, #1
 8003c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d9e7      	bls.n	8003c3e <Flash_Write_CalTable+0x5e>
		}
		v+=4;
 8003c6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c72:	3304      	adds	r3, #4
 8003c74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 8003c78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003c82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d9cd      	bls.n	8003c26 <Flash_Write_CalTable+0x46>
	}
	for (uint8_t i = 12; i < 16; i++){
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003c90:	e00b      	b.n	8003caa <Flash_Write_CalTable+0xca>
		bytes_temp[i] = 0xFF;
 8003c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c96:	3330      	adds	r3, #48	; 0x30
 8003c98:	443b      	add	r3, r7
 8003c9a:	22ff      	movs	r2, #255	; 0xff
 8003c9c:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t i = 12; i < 16; i++){
 8003ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003caa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	d9ef      	bls.n	8003c92 <Flash_Write_CalTable+0xb2>
	}
	res = FlashWriteData (StartSectorAddress, (uint64_t *)bytes_temp, 2);
 8003cb2:	f107 030c 	add.w	r3, r7, #12
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ff22 	bl	8003b04 <FlashWriteData>
 8003cc0:	62b8      	str	r0, [r7, #40]	; 0x28
	return res;
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3730      	adds	r7, #48	; 0x30
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <Flash_Read_CalTable>:

uint32_t Flash_Read_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08c      	sub	sp, #48	; 0x30
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	uint8_t buffer[20] = {0};
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	f107 031c 	add.w	r3, r7, #28
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	60da      	str	r2, [r3, #12]
	float temp[3] = {0.0f};
 8003ce8:	f107 030c 	add.w	r3, r7, #12
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]

	FlashReadData(StartSectorAddress, (uint64_t *)buffer, 2);
 8003cf4:	f107 0318 	add.w	r3, r7, #24
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff fee1 	bl	8003ac4 <FlashReadData>

	if ((buffer[0] == 255) && (buffer[1] == 255)){
 8003d02:	7e3b      	ldrb	r3, [r7, #24]
 8003d04:	2bff      	cmp	r3, #255	; 0xff
 8003d06:	d104      	bne.n	8003d12 <Flash_Read_CalTable+0x46>
 8003d08:	7e7b      	ldrb	r3, [r7, #25]
 8003d0a:	2bff      	cmp	r3, #255	; 0xff
 8003d0c:	d101      	bne.n	8003d12 <Flash_Read_CalTable+0x46>
		return 1;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e04d      	b.n	8003dae <Flash_Read_CalTable+0xe2>
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t v=0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (uint8_t j = 0; j < 3; j++){
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d1e:	e02d      	b.n	8003d7c <Flash_Read_CalTable+0xb0>
		for (uint8_t i = 0; i < 4; i++) {
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003d26:	e013      	b.n	8003d50 <Flash_Read_CalTable+0x84>
			thing.bytes[i] = buffer[v+i];
 8003d28:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003d2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d30:	441a      	add	r2, r3
 8003d32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d36:	3230      	adds	r2, #48	; 0x30
 8003d38:	443a      	add	r2, r7
 8003d3a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003d3e:	3330      	adds	r3, #48	; 0x30
 8003d40:	443b      	add	r3, r7
 8003d42:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (uint8_t i = 0; i < 4; i++) {
 8003d46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003d50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d9e7      	bls.n	8003d28 <Flash_Read_CalTable+0x5c>
		}
		v+=4;
 8003d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		temp[j] =  thing.a;
 8003d62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	3330      	adds	r3, #48	; 0x30
 8003d6c:	443b      	add	r3, r7
 8003d6e:	3b24      	subs	r3, #36	; 0x24
 8003d70:	601a      	str	r2, [r3, #0]
	for (uint8_t j = 0; j < 3; j++){
 8003d72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d76:	3301      	adds	r3, #1
 8003d78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d9cd      	bls.n	8003d20 <Flash_Read_CalTable+0x54>
	}
	data->gyro_x = temp[0];
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	601a      	str	r2, [r3, #0]
	data->gyro_y = temp[1];
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
	data->gyro_z = temp[2];
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	609a      	str	r2, [r3, #8]

	if (temp[0] == 0.0f){
 8003d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d103      	bne.n	8003dac <Flash_Read_CalTable+0xe0>
		uart_write_debug("Failed to read flash\r\n",UART_NYX);
 8003da4:	2101      	movs	r1, #1
 8003da6:	4804      	ldr	r0, [pc, #16]	; (8003db8 <Flash_Read_CalTable+0xec>)
 8003da8:	f002 fbda 	bl	8006560 <uart_write_debug>
	}
	return 0;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3730      	adds	r7, #48	; 0x30
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	08014ca0 	.word	0x08014ca0

08003dbc <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <ublox_i2c_bus_init+0x78>)
 8003dc4:	601a      	str	r2, [r3, #0]
//	hi2c1.Init.Timing = 0x00B03FDB; 400KB i2c speed
	hi2c1.Init.Timing = 0x307075B1;	//100KB i2c speed
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <ublox_i2c_bus_init+0x7c>)
 8003dca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003de4:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003df6:	480e      	ldr	r0, [pc, #56]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003df8:	f003 fbe5 	bl	80075c6 <HAL_I2C_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e012      	b.n	8003e2c <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e06:	2100      	movs	r1, #0
 8003e08:	4809      	ldr	r0, [pc, #36]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003e0a:	f004 fbbd 	bl	8008588 <HAL_I2CEx_ConfigAnalogFilter>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 8003e14:	2302      	movs	r3, #2
 8003e16:	e009      	b.n	8003e2c <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4805      	ldr	r0, [pc, #20]	; (8003e30 <ublox_i2c_bus_init+0x74>)
 8003e1c:	f004 fbff 	bl	800861e <HAL_I2CEx_ConfigDigitalFilter>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e000      	b.n	8003e2c <ublox_i2c_bus_init+0x70>
	}
	return 0;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	200002f0 	.word	0x200002f0
 8003e34:	40005400 	.word	0x40005400
 8003e38:	307075b1 	.word	0x307075b1

08003e3c <ublox_transmit_rtc>:
    else{
        parseNMEA();
    }
}

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	460a      	mov	r2, r1
 8003e46:	71fb      	strb	r3, [r7, #7]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 8003e4c:	79fa      	ldrb	r2, [r7, #7]
 8003e4e:	79bb      	ldrb	r3, [r7, #6]
 8003e50:	2109      	movs	r1, #9
 8003e52:	4803      	ldr	r0, [pc, #12]	; (8003e60 <ublox_transmit_rtc+0x24>)
 8003e54:	f001 faca 	bl	80053ec <transmitMessage>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	2000038f 	.word	0x2000038f

08003e64 <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	71fb      	strb	r3, [r7, #7]
 8003e70:	4613      	mov	r3, r2
 8003e72:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	f107 0310 	add.w	r3, r7, #16
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	0e1b      	lsrs	r3, r3, #24
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	141b      	asrs	r3, r3, #16
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	121b      	asrs	r3, r3, #8
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	0e1b      	lsrs	r3, r3, #24
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	141b      	asrs	r3, r3, #16
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 8003ebc:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	121b      	asrs	r3, r3, #8
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed2:	0e1b      	lsrs	r3, r3, #24
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003edc:	141b      	asrs	r3, r3, #16
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee6:	121b      	asrs	r3, r3, #8
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <ublox_transmit_message+0xa8>)
 8003eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 8003ef4:	79fa      	ldrb	r2, [r7, #7]
 8003ef6:	79bb      	ldrb	r3, [r7, #6]
 8003ef8:	f107 000c 	add.w	r0, r7, #12
 8003efc:	210c      	movs	r1, #12
 8003efe:	f001 fa75 	bl	80053ec <transmitMessage>
}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000344 	.word	0x20000344

08003f10 <ubloxInit>:

UBLOX_transResult ubloxInit(void){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
	UBLOX_transResult ret;
	uint8_t res[10] = {0};
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	809a      	strh	r2, [r3, #4]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 8003f24:	2102      	movs	r1, #2
 8003f26:	2000      	movs	r0, #0
 8003f28:	f000 f9e0 	bl	80042ec <setPortOutput>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d00a      	beq.n	8003f4c <ubloxInit+0x3c>
    	sprintf(res, " POUT:%d\r\n,", ret);
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	495d      	ldr	r1, [pc, #372]	; (80040b0 <ubloxInit+0x1a0>)
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f00d fa61 	bl	8011404 <siprintf>
		uart_write_debug(res, 50);
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	2132      	movs	r1, #50	; 0x32
 8003f46:	4618      	mov	r0, r3
 8003f48:	f002 fb0a 	bl	8006560 <uart_write_debug>
    }
    HAL_Delay(10);
 8003f4c:	200a      	movs	r0, #10
 8003f4e:	f002 fcd1 	bl	80068f4 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 8003f52:	2300      	movs	r3, #0
 8003f54:	2200      	movs	r2, #0
 8003f56:	2101      	movs	r1, #1
 8003f58:	20f0      	movs	r0, #240	; 0xf0
 8003f5a:	f000 f9f7 	bl	800434c <configureNMEA>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d00a      	beq.n	8003f7e <ubloxInit+0x6e>
    	sprintf(res, " GGL:%d\r\n,", ret);
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	4951      	ldr	r1, [pc, #324]	; (80040b4 <ubloxInit+0x1a4>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f00d fa48 	bl	8011404 <siprintf>
    	uart_write_debug(res, 50);
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2132      	movs	r1, #50	; 0x32
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 faf1 	bl	8006560 <uart_write_debug>
    }
    HAL_Delay(10);
 8003f7e:	200a      	movs	r0, #10
 8003f80:	f002 fcb8 	bl	80068f4 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 8003f84:	2300      	movs	r3, #0
 8003f86:	2200      	movs	r2, #0
 8003f88:	2102      	movs	r1, #2
 8003f8a:	20f0      	movs	r0, #240	; 0xf0
 8003f8c:	f000 f9de 	bl	800434c <configureNMEA>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d00a      	beq.n	8003fb0 <ubloxInit+0xa0>
    	sprintf(res, " GSA:%d\r\n,", ret);
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	4946      	ldr	r1, [pc, #280]	; (80040b8 <ubloxInit+0x1a8>)
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f00d fa2f 	bl	8011404 <siprintf>
		uart_write_debug(res, 50);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	2132      	movs	r1, #50	; 0x32
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 fad8 	bl	8006560 <uart_write_debug>
    }
    HAL_Delay(10);
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f002 fc9f 	bl	80068f4 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2103      	movs	r1, #3
 8003fbc:	20f0      	movs	r0, #240	; 0xf0
 8003fbe:	f000 f9c5 	bl	800434c <configureNMEA>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d00a      	beq.n	8003fe2 <ubloxInit+0xd2>
    	sprintf(res, " GSV:%d\r\n,", ret);
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	493a      	ldr	r1, [pc, #232]	; (80040bc <ubloxInit+0x1ac>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f00d fa16 	bl	8011404 <siprintf>
		uart_write_debug(res, 50);
 8003fd8:	1d3b      	adds	r3, r7, #4
 8003fda:	2132      	movs	r1, #50	; 0x32
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f002 fabf 	bl	8006560 <uart_write_debug>
    }
    HAL_Delay(10);
 8003fe2:	200a      	movs	r0, #10
 8003fe4:	f002 fc86 	bl	80068f4 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2200      	movs	r2, #0
 8003fec:	2104      	movs	r1, #4
 8003fee:	20f0      	movs	r0, #240	; 0xf0
 8003ff0:	f000 f9ac 	bl	800434c <configureNMEA>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d00a      	beq.n	8004014 <ubloxInit+0x104>
    	sprintf(res, " RMC:%d\r\n,", ret);
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	492f      	ldr	r1, [pc, #188]	; (80040c0 <ubloxInit+0x1b0>)
 8004004:	4618      	mov	r0, r3
 8004006:	f00d f9fd 	bl	8011404 <siprintf>
		uart_write_debug(res, 50);
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	2132      	movs	r1, #50	; 0x32
 800400e:	4618      	mov	r0, r3
 8004010:	f002 faa6 	bl	8006560 <uart_write_debug>
    }
    HAL_Delay(10);
 8004014:	200a      	movs	r0, #10
 8004016:	f002 fc6d 	bl	80068f4 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 800401a:	2300      	movs	r3, #0
 800401c:	2200      	movs	r2, #0
 800401e:	2105      	movs	r1, #5
 8004020:	20f0      	movs	r0, #240	; 0xf0
 8004022:	f000 f993 	bl	800434c <configureNMEA>
 8004026:	4603      	mov	r3, r0
 8004028:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d00a      	beq.n	8004046 <ubloxInit+0x136>
    	sprintf(res, " VTG:%d\r\n,", ret);
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	4923      	ldr	r1, [pc, #140]	; (80040c4 <ubloxInit+0x1b4>)
 8004036:	4618      	mov	r0, r3
 8004038:	f00d f9e4 	bl	8011404 <siprintf>
		uart_write_debug(res, 50);
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	2132      	movs	r1, #50	; 0x32
 8004040:	4618      	mov	r0, r3
 8004042:	f002 fa8d 	bl	8006560 <uart_write_debug>
    }
    HAL_Delay(10);
 8004046:	200a      	movs	r0, #10
 8004048:	f002 fc54 	bl	80068f4 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 800404c:	2300      	movs	r3, #0
 800404e:	2202      	movs	r2, #2
 8004050:	2100      	movs	r1, #0
 8004052:	20f0      	movs	r0, #240	; 0xf0
 8004054:	f000 f97a 	bl	800434c <configureNMEA>
 8004058:	4603      	mov	r3, r0
 800405a:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d00a      	beq.n	8004078 <ubloxInit+0x168>
    	sprintf(res, " GGA:%d\r\n,", ret);
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	4918      	ldr	r1, [pc, #96]	; (80040c8 <ubloxInit+0x1b8>)
 8004068:	4618      	mov	r0, r3
 800406a:	f00d f9cb 	bl	8011404 <siprintf>
		uart_write_debug(res, 50);
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	2132      	movs	r1, #50	; 0x32
 8004072:	4618      	mov	r0, r3
 8004074:	f002 fa74 	bl	8006560 <uart_write_debug>
    }
    HAL_Delay(10);
 8004078:	200a      	movs	r0, #10
 800407a:	f002 fc3b 	bl	80068f4 <HAL_Delay>
    ret = powerManageCfgSet(120);
 800407e:	2078      	movs	r0, #120	; 0x78
 8004080:	f000 f996 	bl	80043b0 <powerManageCfgSet>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d00a      	beq.n	80040a4 <ubloxInit+0x194>
		sprintf(res, " PM2:%d\r\n,", ret);
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	490e      	ldr	r1, [pc, #56]	; (80040cc <ubloxInit+0x1bc>)
 8004094:	4618      	mov	r0, r3
 8004096:	f00d f9b5 	bl	8011404 <siprintf>
		uart_write_debug(res, 50);
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	2132      	movs	r1, #50	; 0x32
 800409e:	4618      	mov	r0, r3
 80040a0:	f002 fa5e 	bl	8006560 <uart_write_debug>
    }
	return ret;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	08014cb8 	.word	0x08014cb8
 80040b4:	08014cc4 	.word	0x08014cc4
 80040b8:	08014cd0 	.word	0x08014cd0
 80040bc:	08014cdc 	.word	0x08014cdc
 80040c0:	08014ce8 	.word	0x08014ce8
 80040c4:	08014cf4 	.word	0x08014cf4
 80040c8:	08014d00 	.word	0x08014d00
 80040cc:	08014d0c 	.word	0x08014d0c

080040d0 <calcChecksum>:
    memset(gps_data.sentence, 0, 75);
    return 0;
}


static void calcChecksum(messageCFG_t *msg){
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7b1a      	ldrb	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4413      	add	r3, r2
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7b5a      	ldrb	r2, [r3, #13]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7b1b      	ldrb	r3, [r3, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7b1a      	ldrb	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	785b      	ldrb	r3, [r3, #1]
 800410c:	4413      	add	r3, r2
 800410e:	b2da      	uxtb	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7b5a      	ldrb	r2, [r3, #13]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7b1b      	ldrb	r3, [r3, #12]
 800411c:	4413      	add	r3, r2
 800411e:	b2da      	uxtb	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7b1a      	ldrb	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	885b      	ldrh	r3, [r3, #2]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4413      	add	r3, r2
 8004130:	b2da      	uxtb	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7b5a      	ldrb	r2, [r3, #13]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	7b1b      	ldrb	r3, [r3, #12]
 800413e:	4413      	add	r3, r2
 8004140:	b2da      	uxtb	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7b1a      	ldrb	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	885b      	ldrh	r3, [r3, #2]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	b29b      	uxth	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	4413      	add	r3, r2
 8004156:	b2da      	uxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7b5a      	ldrb	r2, [r3, #13]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7b1b      	ldrb	r3, [r3, #12]
 8004164:	4413      	add	r3, r2
 8004166:	b2da      	uxtb	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e015      	b.n	800419e <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	7b1a      	ldrb	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6899      	ldr	r1, [r3, #8]
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	440b      	add	r3, r1
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4413      	add	r3, r2
 8004182:	b2da      	uxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	7b5a      	ldrb	r2, [r3, #13]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	7b1b      	ldrb	r3, [r3, #12]
 8004190:	4413      	add	r3, r2
 8004192:	b2da      	uxtb	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	3301      	adds	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	885b      	ldrh	r3, [r3, #2]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d3e3      	bcc.n	8004172 <calcChecksum+0xa2>
    }
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <sendI2Cmessage>:

UBLOX_transResult sendI2Cmessage(void){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b098      	sub	sp, #96	; 0x60
 80041bc:	af02      	add	r7, sp, #8
	UBLOX_transResult res;
    uint8_t message[60] = {0};
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	f107 031c 	add.w	r3, r7, #28
 80041c6:	2238      	movs	r2, #56	; 0x38
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f00d f97d 	bl	80114ca <memset>
    uint8_t rx_message[20] = {0};
 80041d0:	2300      	movs	r3, #0
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	f107 0308 	add.w	r3, r7, #8
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
    uint8_t len = config_message.len + 8;
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <sendI2Cmessage+0x130>)
 80041e4:	885b      	ldrh	r3, [r3, #2]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	3308      	adds	r3, #8
 80041ea:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    message[0] = UBX_SYNCH_1;
 80041ee:	23b5      	movs	r3, #181	; 0xb5
 80041f0:	763b      	strb	r3, [r7, #24]
    message[1] = UBX_SYNCH_2;
 80041f2:	2362      	movs	r3, #98	; 0x62
 80041f4:	767b      	strb	r3, [r7, #25]
    message[2] = config_message.cls;
 80041f6:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <sendI2Cmessage+0x130>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	76bb      	strb	r3, [r7, #26]
    message[3] = config_message.id;
 80041fc:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <sendI2Cmessage+0x130>)
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	76fb      	strb	r3, [r7, #27]
    message[4] = (config_message.len & 0xFF);
 8004202:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <sendI2Cmessage+0x130>)
 8004204:	885b      	ldrh	r3, [r3, #2]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	773b      	strb	r3, [r7, #28]
    message[5] = (config_message.len >> 8);
 800420a:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <sendI2Cmessage+0x130>)
 800420c:	885b      	ldrh	r3, [r3, #2]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	b29b      	uxth	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	777b      	strb	r3, [r7, #29]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8004216:	2300      	movs	r3, #0
 8004218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800421c:	e011      	b.n	8004242 <sendI2Cmessage+0x8a>
        message[6+i] = config_message.payload[i];
 800421e:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <sendI2Cmessage+0x130>)
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004226:	441a      	add	r2, r3
 8004228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800422c:	3306      	adds	r3, #6
 800422e:	7812      	ldrb	r2, [r2, #0]
 8004230:	3358      	adds	r3, #88	; 0x58
 8004232:	443b      	add	r3, r7
 8004234:	f803 2c40 	strb.w	r2, [r3, #-64]
    for ( i=0 ; i < config_message.len ; i++){
 8004238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800423c:	3301      	adds	r3, #1
 800423e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004242:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004246:	b29a      	uxth	r2, r3
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <sendI2Cmessage+0x130>)
 800424a:	885b      	ldrh	r3, [r3, #2]
 800424c:	429a      	cmp	r2, r3
 800424e:	d3e6      	bcc.n	800421e <sendI2Cmessage+0x66>
    }
    message[6+i] = config_message.checksumA;
 8004250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004254:	3306      	adds	r3, #6
 8004256:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <sendI2Cmessage+0x130>)
 8004258:	7b12      	ldrb	r2, [r2, #12]
 800425a:	3358      	adds	r3, #88	; 0x58
 800425c:	443b      	add	r3, r7
 800425e:	f803 2c40 	strb.w	r2, [r3, #-64]
    message[7+i] = config_message.checksumB;
 8004262:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004266:	3307      	adds	r3, #7
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <sendI2Cmessage+0x130>)
 800426a:	7b52      	ldrb	r2, [r2, #13]
 800426c:	3358      	adds	r3, #88	; 0x58
 800426e:	443b      	add	r3, r7
 8004270:	f803 2c40 	strb.w	r2, [r3, #-64]
    res = UbloxI2CWriteReadPolling(UBLOX_M9N, message, len, rx_message, 20, 50);
 8004274:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004278:	b29a      	uxth	r2, r3
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	f107 0118 	add.w	r1, r7, #24
 8004280:	2032      	movs	r0, #50	; 0x32
 8004282:	9001      	str	r0, [sp, #4]
 8004284:	2014      	movs	r0, #20
 8004286:	9000      	str	r0, [sp, #0]
 8004288:	2084      	movs	r0, #132	; 0x84
 800428a:	f000 f8b1 	bl	80043f0 <UbloxI2CWriteReadPolling>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    if (res == TRANS_OK){
 8004294:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004298:	2b04      	cmp	r3, #4
 800429a:	d11e      	bne.n	80042da <sendI2Cmessage+0x122>
    	for(i=0; i<20;i++){
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80042a2:	e00c      	b.n	80042be <sendI2Cmessage+0x106>
    		if(rx_message[i] == UBX_SYNCH_1){
 80042a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042a8:	3358      	adds	r3, #88	; 0x58
 80042aa:	443b      	add	r3, r7
 80042ac:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80042b0:	2bb5      	cmp	r3, #181	; 0xb5
 80042b2:	d009      	beq.n	80042c8 <sendI2Cmessage+0x110>
    	for(i=0; i<20;i++){
 80042b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042b8:	3301      	adds	r3, #1
 80042ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80042be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042c2:	2b13      	cmp	r3, #19
 80042c4:	d9ee      	bls.n	80042a4 <sendI2Cmessage+0xec>
 80042c6:	e000      	b.n	80042ca <sendI2Cmessage+0x112>
    			break;
 80042c8:	bf00      	nop
    		}
    	}
    	return rx_message[i+3];  //UBLOX returns 1 for ACK and 0 for NACK
 80042ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042ce:	3303      	adds	r3, #3
 80042d0:	3358      	adds	r3, #88	; 0x58
 80042d2:	443b      	add	r3, r7
 80042d4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80042d8:	e001      	b.n	80042de <sendI2Cmessage+0x126>
    }
    return res;
 80042da:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3758      	adds	r7, #88	; 0x58
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2000002c 	.word	0x2000002c

080042ec <setPortOutput>:

UBLOX_transResult setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	460a      	mov	r2, r1
 80042f6:	71fb      	strb	r3, [r7, #7]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 80042fc:	4b12      	ldr	r3, [pc, #72]	; (8004348 <setPortOutput+0x5c>)
 80042fe:	2206      	movs	r2, #6
 8004300:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <setPortOutput+0x5c>)
 8004304:	2200      	movs	r2, #0
 8004306:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 8004308:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <setPortOutput+0x5c>)
 800430a:	2214      	movs	r2, #20
 800430c:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	f107 0310 	add.w	r3, r7, #16
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8004320:	2384      	movs	r3, #132	; 0x84
 8004322:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 8004324:	2323      	movs	r3, #35	; 0x23
 8004326:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8004328:	79bb      	ldrb	r3, [r7, #6]
 800432a:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 800432c:	4a06      	ldr	r2, [pc, #24]	; (8004348 <setPortOutput+0x5c>)
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8004334:	4804      	ldr	r0, [pc, #16]	; (8004348 <setPortOutput+0x5c>)
 8004336:	f7ff fecb 	bl	80040d0 <calcChecksum>
    return sendI2Cmessage();
 800433a:	f7ff ff3d 	bl	80041b8 <sendI2Cmessage>
 800433e:	4603      	mov	r3, r0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	2000002c 	.word	0x2000002c

0800434c <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

UBLOX_transResult configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4623      	mov	r3, r4
 800435c:	71fb      	strb	r3, [r7, #7]
 800435e:	4603      	mov	r3, r0
 8004360:	71bb      	strb	r3, [r7, #6]
 8004362:	460b      	mov	r3, r1
 8004364:	717b      	strb	r3, [r7, #5]
 8004366:	4613      	mov	r3, r2
 8004368:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <configureNMEA+0x60>)
 800436c:	2206      	movs	r2, #6
 800436e:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <configureNMEA+0x60>)
 8004372:	2201      	movs	r2, #1
 8004374:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <configureNMEA+0x60>)
 8004378:	2208      	movs	r2, #8
 800437a:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8004388:	79bb      	ldrb	r3, [r7, #6]
 800438a:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 800438c:	797b      	ldrb	r3, [r7, #5]
 800438e:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8004390:	4a06      	ldr	r2, [pc, #24]	; (80043ac <configureNMEA+0x60>)
 8004392:	f107 0308 	add.w	r3, r7, #8
 8004396:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8004398:	4804      	ldr	r0, [pc, #16]	; (80043ac <configureNMEA+0x60>)
 800439a:	f7ff fe99 	bl	80040d0 <calcChecksum>
    return sendI2Cmessage();
 800439e:	f7ff ff0b 	bl	80041b8 <sendI2Cmessage>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd90      	pop	{r4, r7, pc}
 80043ac:	2000002c 	.word	0x2000002c

080043b0 <powerManageCfgSet>:
    message[7] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 8, payload, 56, 200);
}


UBLOX_transResult powerManageCfgSet(uint8_t maxAckTime){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
    config_message.cls = UBX_CLASS_CFG;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <powerManageCfgSet+0x38>)
 80043bc:	2206      	movs	r2, #6
 80043be:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PM2;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <powerManageCfgSet+0x38>)
 80043c2:	223b      	movs	r2, #59	; 0x3b
 80043c4:	705a      	strb	r2, [r3, #1]
    config_message.len = 44;
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <powerManageCfgSet+0x38>)
 80043c8:	222c      	movs	r2, #44	; 0x2c
 80043ca:	805a      	strh	r2, [r3, #2]
    config_message.payload = powerModesetPld;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <powerManageCfgSet+0x38>)
 80043ce:	4a07      	ldr	r2, [pc, #28]	; (80043ec <powerManageCfgSet+0x3c>)
 80043d0:	609a      	str	r2, [r3, #8]
    calcChecksum(&config_message);
 80043d2:	4805      	ldr	r0, [pc, #20]	; (80043e8 <powerManageCfgSet+0x38>)
 80043d4:	f7ff fe7c 	bl	80040d0 <calcChecksum>
    return sendI2Cmessage();
 80043d8:	f7ff feee 	bl	80041b8 <sendI2Cmessage>
 80043dc:	4603      	mov	r3, r0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	2000002c 	.word	0x2000002c
 80043ec:	20000000 	.word	0x20000000

080043f0 <UbloxI2CWriteReadPolling>:
}


UBLOX_transResult UbloxI2CWriteReadPolling(uint16_t DevAddress, uint8_t *TData, uint16_t TDataLen,
										uint8_t *RData, uint16_t RDataLen, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	4603      	mov	r3, r0
 80043fc:	81fb      	strh	r3, [r7, #14]
 80043fe:	4613      	mov	r3, r2
 8004400:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0x00;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit(&hi2c1, DevAddress, TData, TDataLen, Timeout)!= HAL_OK ){
 8004406:	89ba      	ldrh	r2, [r7, #12]
 8004408:	89f9      	ldrh	r1, [r7, #14]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	480d      	ldr	r0, [pc, #52]	; (8004448 <UbloxI2CWriteReadPolling+0x58>)
 8004414:	f003 f966 	bl	80076e4 <HAL_I2C_Master_Transmit>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <UbloxI2CWriteReadPolling+0x32>
		return TRANS_ERROR;
 800441e:	2302      	movs	r3, #2
 8004420:	e00e      	b.n	8004440 <UbloxI2CWriteReadPolling+0x50>
	}
	// Read Response
	if (HAL_I2C_Master_Receive(&hi2c1, DevAddress, RData, RDataLen, Timeout) != HAL_OK){
 8004422:	8c3a      	ldrh	r2, [r7, #32]
 8004424:	89f9      	ldrh	r1, [r7, #14]
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4806      	ldr	r0, [pc, #24]	; (8004448 <UbloxI2CWriteReadPolling+0x58>)
 8004430:	f003 fa4c 	bl	80078cc <HAL_I2C_Master_Receive>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <UbloxI2CWriteReadPolling+0x4e>
		return RECEIVE_ERROR;
 800443a:	2303      	movs	r3, #3
 800443c:	e000      	b.n	8004440 <UbloxI2CWriteReadPolling+0x50>
	}
	return TRANS_OK;
 800443e:	2304      	movs	r3, #4
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	200002f0 	.word	0x200002f0

0800444c <tick_gyro>:

uint16_t gyro_offset_counter = 0;
gyro_data_t gyro_sum;
gyro_data_t gyro_mean;

void tick_gyro(mems_data_t * mems_data){
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

    lsm6_acc_read(mems_data);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f99b 	bl	8004790 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa00 	bl	8004860 <lis3_magn_read>
    gyro_read(mems_data);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f909 	bl	8004678 <gyro_read>
//    debugPrintMEMS(mems_data);
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <lsm6_bus_init+0x74>)
 8004476:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <lsm6_bus_init+0x78>)
 8004478:	601a      	str	r2, [r3, #0]
//hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.Timing = 0x307075B1;
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <lsm6_bus_init+0x74>)
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <lsm6_bus_init+0x7c>)
 800447e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <lsm6_bus_init+0x74>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <lsm6_bus_init+0x74>)
 8004488:	2201      	movs	r2, #1
 800448a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <lsm6_bus_init+0x74>)
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <lsm6_bus_init+0x74>)
 8004494:	2200      	movs	r2, #0
 8004496:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <lsm6_bus_init+0x74>)
 800449a:	2200      	movs	r2, #0
 800449c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <lsm6_bus_init+0x74>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <lsm6_bus_init+0x74>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80044aa:	480e      	ldr	r0, [pc, #56]	; (80044e4 <lsm6_bus_init+0x74>)
 80044ac:	f003 f88b 	bl	80075c6 <HAL_I2C_Init>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <lsm6_bus_init+0x4a>
  {
    return 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e012      	b.n	80044e0 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80044ba:	2100      	movs	r1, #0
 80044bc:	4809      	ldr	r0, [pc, #36]	; (80044e4 <lsm6_bus_init+0x74>)
 80044be:	f004 f863 	bl	8008588 <HAL_I2CEx_ConfigAnalogFilter>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <lsm6_bus_init+0x5c>
  {
    return 2;
 80044c8:	2302      	movs	r3, #2
 80044ca:	e009      	b.n	80044e0 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80044cc:	2100      	movs	r1, #0
 80044ce:	4805      	ldr	r0, [pc, #20]	; (80044e4 <lsm6_bus_init+0x74>)
 80044d0:	f004 f8a5 	bl	800861e <HAL_I2CEx_ConfigDigitalFilter>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <lsm6_bus_init+0x6e>
  {
    return 3;
 80044da:	2303      	movs	r3, #3
 80044dc:	e000      	b.n	80044e0 <lsm6_bus_init+0x70>
  }
  return 0;
 80044de:	2300      	movs	r3, #0

}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200003bc 	.word	0x200003bc
 80044e8:	40005800 	.word	0x40005800
 80044ec:	307075b1 	.word	0x307075b1

080044f0 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x54;   //gyro 208Hz-500dps
 80044f6:	2354      	movs	r3, #84	; 0x54
 80044f8:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x04;   // block data update - reg addr auto incr
 80044fa:	2304      	movs	r3, #4
 80044fc:	71bb      	strb	r3, [r7, #6]
    uint8_t wakeUp = 0x10;
 80044fe:	2310      	movs	r3, #16
 8004500:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl7_val = 0xE0;	//HPF and HighPerf on
 8004502:	23e0      	movs	r3, #224	; 0xe0
 8004504:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, WAKE_UP_DUR, I2C_MEMADD_SIZE_8BIT, &wakeUp, 1, 20);
 8004506:	2314      	movs	r3, #20
 8004508:	9302      	str	r3, [sp, #8]
 800450a:	2301      	movs	r3, #1
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	1d7b      	adds	r3, r7, #5
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2301      	movs	r3, #1
 8004514:	225c      	movs	r2, #92	; 0x5c
 8004516:	21d4      	movs	r1, #212	; 0xd4
 8004518:	4815      	ldr	r0, [pc, #84]	; (8004570 <gyro_init+0x80>)
 800451a:	f003 facd 	bl	8007ab8 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 800451e:	2314      	movs	r3, #20
 8004520:	9302      	str	r3, [sp, #8]
 8004522:	2301      	movs	r3, #1
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	1dfb      	adds	r3, r7, #7
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2301      	movs	r3, #1
 800452c:	2211      	movs	r2, #17
 800452e:	21d4      	movs	r1, #212	; 0xd4
 8004530:	480f      	ldr	r0, [pc, #60]	; (8004570 <gyro_init+0x80>)
 8004532:	f003 fac1 	bl	8007ab8 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2 , LSM6, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &ctrl7_val, 1, 20);
 8004536:	2314      	movs	r3, #20
 8004538:	9302      	str	r3, [sp, #8]
 800453a:	2301      	movs	r3, #1
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2301      	movs	r3, #1
 8004544:	2216      	movs	r2, #22
 8004546:	21d4      	movs	r1, #212	; 0xd4
 8004548:	4809      	ldr	r0, [pc, #36]	; (8004570 <gyro_init+0x80>)
 800454a:	f003 fab5 	bl	8007ab8 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 800454e:	2314      	movs	r3, #20
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	2301      	movs	r3, #1
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	1dbb      	adds	r3, r7, #6
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	2301      	movs	r3, #1
 800455c:	2212      	movs	r2, #18
 800455e:	21d4      	movs	r1, #212	; 0xd4
 8004560:	4803      	ldr	r0, [pc, #12]	; (8004570 <gyro_init+0x80>)
 8004562:	f003 faa9 	bl	8007ab8 <HAL_I2C_Mem_Write>
 8004566:	4603      	mov	r3, r0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200003bc 	.word	0x200003bc

08004574 <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 800457a:	2350      	movs	r3, #80	; 0x50
 800457c:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 800457e:	2320      	movs	r3, #32
 8004580:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8004582:	2314      	movs	r3, #20
 8004584:	9302      	str	r3, [sp, #8]
 8004586:	2301      	movs	r3, #1
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	1dfb      	adds	r3, r7, #7
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2301      	movs	r3, #1
 8004590:	2210      	movs	r2, #16
 8004592:	21d4      	movs	r1, #212	; 0xd4
 8004594:	4809      	ldr	r0, [pc, #36]	; (80045bc <lsm6_acc_init+0x48>)
 8004596:	f003 fa8f 	bl	8007ab8 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 800459a:	2314      	movs	r3, #20
 800459c:	9302      	str	r3, [sp, #8]
 800459e:	2301      	movs	r3, #1
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	1dbb      	adds	r3, r7, #6
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2301      	movs	r3, #1
 80045a8:	2219      	movs	r2, #25
 80045aa:	21d4      	movs	r1, #212	; 0xd4
 80045ac:	4803      	ldr	r0, [pc, #12]	; (80045bc <lsm6_acc_init+0x48>)
 80045ae:	f003 fa83 	bl	8007ab8 <HAL_I2C_Mem_Write>
 80045b2:	4603      	mov	r3, r0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200003bc 	.word	0x200003bc

080045c0 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 80045ca:	2342      	movs	r3, #66	; 0x42
 80045cc:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 80045d2:	2308      	movs	r3, #8
 80045d4:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 80045d6:	2340      	movs	r3, #64	; 0x40
 80045d8:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 50);
 80045da:	2332      	movs	r3, #50	; 0x32
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	2301      	movs	r3, #1
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2301      	movs	r3, #1
 80045e8:	2220      	movs	r2, #32
 80045ea:	213c      	movs	r1, #60	; 0x3c
 80045ec:	4821      	ldr	r0, [pc, #132]	; (8004674 <magn_init+0xb4>)
 80045ee:	f003 fa63 	bl	8007ab8 <HAL_I2C_Mem_Write>
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <magn_init+0x40>
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	e034      	b.n	800466a <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 50);
 8004600:	2332      	movs	r3, #50	; 0x32
 8004602:	9302      	str	r3, [sp, #8]
 8004604:	2301      	movs	r3, #1
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	1d7b      	adds	r3, r7, #5
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2301      	movs	r3, #1
 800460e:	2222      	movs	r2, #34	; 0x22
 8004610:	213c      	movs	r1, #60	; 0x3c
 8004612:	4818      	ldr	r0, [pc, #96]	; (8004674 <magn_init+0xb4>)
 8004614:	f003 fa50 	bl	8007ab8 <HAL_I2C_Mem_Write>
 8004618:	4603      	mov	r3, r0
 800461a:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <magn_init+0x66>
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	e021      	b.n	800466a <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 50);
 8004626:	2332      	movs	r3, #50	; 0x32
 8004628:	9302      	str	r3, [sp, #8]
 800462a:	2301      	movs	r3, #1
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2301      	movs	r3, #1
 8004634:	2223      	movs	r2, #35	; 0x23
 8004636:	213c      	movs	r1, #60	; 0x3c
 8004638:	480e      	ldr	r0, [pc, #56]	; (8004674 <magn_init+0xb4>)
 800463a:	f003 fa3d 	bl	8007ab8 <HAL_I2C_Mem_Write>
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <magn_init+0x8c>
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	e00e      	b.n	800466a <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 50);
 800464c:	2332      	movs	r3, #50	; 0x32
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	2301      	movs	r3, #1
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	1cfb      	adds	r3, r7, #3
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2301      	movs	r3, #1
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	213c      	movs	r1, #60	; 0x3c
 800465e:	4805      	ldr	r0, [pc, #20]	; (8004674 <magn_init+0xb4>)
 8004660:	f003 fa2a 	bl	8007ab8 <HAL_I2C_Mem_Write>
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
    return res;
 8004668:	79fb      	ldrb	r3, [r7, #7]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	200003bc 	.word	0x200003bc

08004678 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	; 0x30
 800467c:	af04      	add	r7, sp, #16
 800467e:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	2300      	movs	r3, #0
 8004686:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004690:	2332      	movs	r3, #50	; 0x32
 8004692:	9302      	str	r3, [sp, #8]
 8004694:	2306      	movs	r3, #6
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2301      	movs	r3, #1
 80046a0:	2222      	movs	r2, #34	; 0x22
 80046a2:	21d4      	movs	r1, #212	; 0xd4
 80046a4:	4838      	ldr	r0, [pc, #224]	; (8004788 <gyro_read+0x110>)
 80046a6:	f003 fb1b 	bl	8007ce0 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <gyro_read+0x3c>
		return res;
 80046b0:	7ffb      	ldrb	r3, [r7, #31]
 80046b2:	e060      	b.n	8004776 <gyro_read+0xfe>
	}
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 3, 50);
 80046b4:	2332      	movs	r3, #50	; 0x32
 80046b6:	9302      	str	r3, [sp, #8]
 80046b8:	2303      	movs	r3, #3
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	f107 030c 	add.w	r3, r7, #12
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2301      	movs	r3, #1
 80046c4:	2240      	movs	r2, #64	; 0x40
 80046c6:	21d4      	movs	r1, #212	; 0xd4
 80046c8:	482f      	ldr	r0, [pc, #188]	; (8004788 <gyro_read+0x110>)
 80046ca:	f003 fb09 	bl	8007ce0 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 80046ce:	7ffb      	ldrb	r3, [r7, #31]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <gyro_read+0x60>
		return res;
 80046d4:	7ffb      	ldrb	r3, [r7, #31]
 80046d6:	e04e      	b.n	8004776 <gyro_read+0xfe>
	}
    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 80046d8:	7c7b      	ldrb	r3, [r7, #17]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	b21a      	sxth	r2, r3
 80046de:	7c3b      	ldrb	r3, [r7, #16]
 80046e0:	b21b      	sxth	r3, r3
 80046e2:	4313      	orrs	r3, r2
 80046e4:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	b21a      	sxth	r2, r3
 80046ec:	7cbb      	ldrb	r3, [r7, #18]
 80046ee:	b21b      	sxth	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 80046f4:	7d7b      	ldrb	r3, [r7, #21]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	b21a      	sxth	r2, r3
 80046fa:	7d3b      	ldrb	r3, [r7, #20]
 80046fc:	b21b      	sxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	833b      	strh	r3, [r7, #24]
#ifndef GYRO_TS
    mems_data->timestamp = osKernelGetTickCount();
 8004702:	f008 f89f 	bl	800c844 <osKernelGetTickCount>
 8004706:	4602      	mov	r2, r0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	625a      	str	r2, [r3, #36]	; 0x24
#else
    mems_data->timestamp = (uint32_t) ((ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0]));
#endif
    mems_data->gyro.gyro_x = - (float)(gyro_x * 0.0177f);// * -1.0f;
 800470c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004718:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800478c <gyro_read+0x114>
 800471c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004720:	eef1 7a67 	vneg.f32	s15, s15
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro.gyro_y = - (float)(gyro_y * 0.0177);// * -1.0f;
 800472a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fb ff10 	bl	8000554 <__aeabi_i2d>
 8004734:	a312      	add	r3, pc, #72	; (adr r3, 8004780 <gyro_read+0x108>)
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f7fb ff75 	bl	8000628 <__aeabi_dmul>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f7fc fa47 	bl	8000bd8 <__aeabi_d2f>
 800474a:	4603      	mov	r3, r0
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef1 7a67 	vneg.f32	s15, s15
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro.gyro_z =   (float)(gyro_z * 0.0177f);// * -1.0f;
 800475a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004766:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800478c <gyro_read+0x114>
 800476a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	edc3 7a02 	vstr	s15, [r3, #8]
    return res;
 8004774:	7ffb      	ldrb	r3, [r7, #31]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	e48e8a72 	.word	0xe48e8a72
 8004784:	3f921ff2 	.word	0x3f921ff2
 8004788:	200003bc 	.word	0x200003bc
 800478c:	3c90ff97 	.word	0x3c90ff97

08004790 <lsm6_acc_read>:

//HAL_StatusTypeDef gyroReadTS(mems_data_t){
//
//}

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af04      	add	r7, sp, #16
 8004796:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	2300      	movs	r3, #0
 800479e:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	75fb      	strb	r3, [r7, #23]
	res = HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 80047a4:	2332      	movs	r3, #50	; 0x32
 80047a6:	9302      	str	r3, [sp, #8]
 80047a8:	2306      	movs	r3, #6
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	f107 0308 	add.w	r3, r7, #8
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2301      	movs	r3, #1
 80047b4:	2228      	movs	r2, #40	; 0x28
 80047b6:	21d4      	movs	r1, #212	; 0xd4
 80047b8:	4827      	ldr	r0, [pc, #156]	; (8004858 <lsm6_acc_read+0xc8>)
 80047ba:	f003 fa91 	bl	8007ce0 <HAL_I2C_Mem_Read>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]
	if (res != HAL_OK){
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <lsm6_acc_read+0x3c>
		return res;
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	e040      	b.n	800484e <lsm6_acc_read+0xbe>
	}
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 80047cc:	7a7b      	ldrb	r3, [r7, #9]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	b21a      	sxth	r2, r3
 80047d2:	7a3b      	ldrb	r3, [r7, #8]
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	4313      	orrs	r3, r2
 80047d8:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	b21a      	sxth	r2, r3
 80047e0:	7abb      	ldrb	r3, [r7, #10]
 80047e2:	b21b      	sxth	r3, r3
 80047e4:	4313      	orrs	r3, r2
 80047e6:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 80047e8:	7b7b      	ldrb	r3, [r7, #13]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	b21a      	sxth	r2, r3
 80047ee:	7b3b      	ldrb	r3, [r7, #12]
 80047f0:	b21b      	sxth	r3, r3
 80047f2:	4313      	orrs	r3, r2
 80047f4:	823b      	strh	r3, [r7, #16]
    mems_data->acc.acc_x = - (float)(acc_x / 16384.0f);//  * -1.0f;
 80047f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004802:	eddf 6a16 	vldr	s13, [pc, #88]	; 800485c <lsm6_acc_read+0xcc>
 8004806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800480a:	eef1 7a67 	vneg.f32	s15, s15
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc.acc_y = - (float)(acc_y / 16384.0f);// * -1.0f;
 8004814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004820:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800485c <lsm6_acc_read+0xcc>
 8004824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004828:	eef1 7a67 	vneg.f32	s15, s15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc.acc_z =	(float)(acc_z / 16384.0f);// * -1.0f;
 8004832:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800483e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800485c <lsm6_acc_read+0xcc>
 8004842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	200003bc 	.word	0x200003bc
 800485c:	46800000 	.word	0x46800000

08004860 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af04      	add	r7, sp, #16
 8004866:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004868:	2300      	movs	r3, #0
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	2300      	movs	r3, #0
 800486e:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004874:	2332      	movs	r3, #50	; 0x32
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	2306      	movs	r3, #6
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	f107 0308 	add.w	r3, r7, #8
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2301      	movs	r3, #1
 8004884:	2228      	movs	r2, #40	; 0x28
 8004886:	213c      	movs	r1, #60	; 0x3c
 8004888:	4824      	ldr	r0, [pc, #144]	; (800491c <lis3_magn_read+0xbc>)
 800488a:	f003 fa29 	bl	8007ce0 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <lis3_magn_read+0x38>
    	return res;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	e03c      	b.n	8004912 <lis3_magn_read+0xb2>
	}
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004898:	7a7b      	ldrb	r3, [r7, #9]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	b21a      	sxth	r2, r3
 800489e:	7a3b      	ldrb	r3, [r7, #8]
 80048a0:	b21b      	sxth	r3, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 80048a6:	7afb      	ldrb	r3, [r7, #11]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	b21a      	sxth	r2, r3
 80048ac:	7abb      	ldrb	r3, [r7, #10]
 80048ae:	b21b      	sxth	r3, r3
 80048b0:	4313      	orrs	r3, r2
 80048b2:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 80048b4:	7b7b      	ldrb	r3, [r7, #13]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	b21a      	sxth	r2, r3
 80048ba:	7b3b      	ldrb	r3, [r7, #12]
 80048bc:	b21b      	sxth	r3, r3
 80048be:	4313      	orrs	r3, r2
 80048c0:	823b      	strh	r3, [r7, #16]
    mems_data->magn.magn_x = (float)(magn_x / 10.0f);
 80048c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048ce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80048d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn.magn_y = (float)(magn_y / 10.0f);
 80048dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048e8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80048ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn.magn_z = (float)(magn_z / 10.0f);
 80048f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004902:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200003bc 	.word	0x200003bc

08004920 <gyro_offset_calculation>:


uint8_t gyro_offset_calculation(mems_data_t *mems_data){
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	gyro_read(mems_data);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fea5 	bl	8004678 <gyro_read>
	gyro_sum.gyro_x += mems_data->gyro.gyro_x;
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <gyro_offset_calculation+0xf4>)
 8004930:	ed93 7a00 	vldr	s14, [r3]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	edd3 7a00 	vldr	s15, [r3]
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <gyro_offset_calculation+0xf4>)
 8004940:	edc3 7a00 	vstr	s15, [r3]
	gyro_sum.gyro_y += mems_data->gyro.gyro_y;
 8004944:	4b33      	ldr	r3, [pc, #204]	; (8004a14 <gyro_offset_calculation+0xf4>)
 8004946:	ed93 7a01 	vldr	s14, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004954:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <gyro_offset_calculation+0xf4>)
 8004956:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_sum.gyro_z += mems_data->gyro.gyro_z;
 800495a:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <gyro_offset_calculation+0xf4>)
 800495c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	edd3 7a02 	vldr	s15, [r3, #8]
 8004966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <gyro_offset_calculation+0xf4>)
 800496c:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_offset_counter++;
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <gyro_offset_calculation+0xf8>)
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <gyro_offset_calculation+0xf8>)
 800497a:	801a      	strh	r2, [r3, #0]
	if (gyro_offset_counter >= 1400){
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <gyro_offset_calculation+0xf8>)
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004984:	d341      	bcc.n	8004a0a <gyro_offset_calculation+0xea>
		gyro_mean.gyro_x = gyro_sum.gyro_x / gyro_offset_counter;
 8004986:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <gyro_offset_calculation+0xf4>)
 8004988:	edd3 6a00 	vldr	s13, [r3]
 800498c:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <gyro_offset_calculation+0xf8>)
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499c:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <gyro_offset_calculation+0xfc>)
 800499e:	edc3 7a00 	vstr	s15, [r3]
		gyro_mean.gyro_y = gyro_sum.gyro_y / gyro_offset_counter;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <gyro_offset_calculation+0xf4>)
 80049a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80049a8:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <gyro_offset_calculation+0xf8>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b8:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <gyro_offset_calculation+0xfc>)
 80049ba:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_mean.gyro_z = gyro_sum.gyro_z / gyro_offset_counter;
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <gyro_offset_calculation+0xf4>)
 80049c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <gyro_offset_calculation+0xf8>)
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <gyro_offset_calculation+0xfc>)
 80049d6:	edc3 7a02 	vstr	s15, [r3, #8]
		setGyroOffset(gyro_mean);
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <gyro_offset_calculation+0xfc>)
 80049dc:	edd3 6a00 	vldr	s13, [r3]
 80049e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80049e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80049e8:	eeb0 0a66 	vmov.f32	s0, s13
 80049ec:	eef0 0a47 	vmov.f32	s1, s14
 80049f0:	eeb0 1a67 	vmov.f32	s2, s15
 80049f4:	f7fc fcea 	bl	80013cc <setGyroOffset>
		gyro_offset_counter = 0;
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <gyro_offset_calculation+0xf8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	801a      	strh	r2, [r3, #0]
		Flash_Write_CalTable(GYRO_OFFSET_ADDR, &gyro_mean);
 80049fe:	4907      	ldr	r1, [pc, #28]	; (8004a1c <gyro_offset_calculation+0xfc>)
 8004a00:	4807      	ldr	r0, [pc, #28]	; (8004a20 <gyro_offset_calculation+0x100>)
 8004a02:	f7ff f8ed 	bl	8003be0 <Flash_Write_CalTable>
		return 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <gyro_offset_calculation+0xec>
	}
	return 1;
 8004a0a:	2301      	movs	r3, #1
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000414 	.word	0x20000414
 8004a18:	20000410 	.word	0x20000410
 8004a1c:	20000420 	.word	0x20000420
 8004a20:	080fb000 	.word	0x080fb000

08004a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a24:	b5b0      	push	{r4, r5, r7, lr}
 8004a26:	b09c      	sub	sp, #112	; 0x70
 8004a28:	af00      	add	r7, sp, #0

  HAL_Init();
 8004a2a:	f001 ff2a 	bl	8006882 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8004a2e:	f000 fa0b 	bl	8004e48 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a32:	f000 fa5b 	bl	8004eec <MX_GPIO_Init>



  MX_USART1_UART_Init();
 8004a36:	f001 fcb7 	bl	80063a8 <MX_USART1_UART_Init>

  MX_UART4_Init();
 8004a3a:	f001 fd07 	bl	800644c <MX_UART4_Init>

  FusionInit();
 8004a3e:	f7fc fce5 	bl	800140c <FusionInit>


  if (lsm6_bus_init() != 0){
 8004a42:	f7ff fd15 	bl	8004470 <lsm6_bus_init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <main+0x4a>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 8004a4c:	4b65      	ldr	r3, [pc, #404]	; (8004be4 <main+0x1c0>)
 8004a4e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004a52:	461d      	mov	r5, r3
 8004a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a5c:	c403      	stmia	r4!, {r0, r1}
 8004a5e:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8004a60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a64:	210a      	movs	r1, #10
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 fd7a 	bl	8006560 <uart_write_debug>
 8004a6c:	e042      	b.n	8004af4 <main+0xd0>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 8004a6e:	f7ff fd81 	bl	8004574 <lsm6_acc_init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00f      	beq.n	8004a98 <main+0x74>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004a78:	4b5b      	ldr	r3, [pc, #364]	; (8004be8 <main+0x1c4>)
 8004a7a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004a7e:	461d      	mov	r5, r3
 8004a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a88:	c403      	stmia	r4!, {r0, r1}
 8004a8a:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004a8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a90:	210a      	movs	r1, #10
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 fd64 	bl	8006560 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004a98:	f7ff fd2a 	bl	80044f0 <gyro_init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d012      	beq.n	8004ac8 <main+0xa4>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 8004aa2:	4b52      	ldr	r3, [pc, #328]	; (8004bec <main+0x1c8>)
 8004aa4:	f107 041c 	add.w	r4, r7, #28
 8004aa8:	461d      	mov	r5, r3
 8004aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ab2:	c403      	stmia	r4!, {r0, r1}
 8004ab4:	8022      	strh	r2, [r4, #0]
 8004ab6:	3402      	adds	r4, #2
 8004ab8:	0c13      	lsrs	r3, r2, #16
 8004aba:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004abc:	f107 031c 	add.w	r3, r7, #28
 8004ac0:	210a      	movs	r1, #10
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fd4c 	bl	8006560 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004ac8:	f7ff fd7a 	bl	80045c0 <magn_init>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d010      	beq.n	8004af4 <main+0xd0>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <main+0x1cc>)
 8004ad4:	463c      	mov	r4, r7
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ae0:	c403      	stmia	r4!, {r0, r1}
 8004ae2:	8022      	strh	r2, [r4, #0]
 8004ae4:	3402      	adds	r4, #2
 8004ae6:	0c13      	lsrs	r3, r2, #16
 8004ae8:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004aea:	463b      	mov	r3, r7
 8004aec:	210a      	movs	r1, #10
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 fd36 	bl	8006560 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 8004af4:	f7ff f962 	bl	8003dbc <ublox_i2c_bus_init>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <main+0xe4>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8004afe:	210a      	movs	r1, #10
 8004b00:	483c      	ldr	r0, [pc, #240]	; (8004bf4 <main+0x1d0>)
 8004b02:	f001 fd2d 	bl	8006560 <uart_write_debug>
 8004b06:	e011      	b.n	8004b2c <main+0x108>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8004b08:	f7ff fa02 	bl	8003f10 <ubloxInit>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 8004b12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <main+0x100>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 8004b1a:	210a      	movs	r1, #10
 8004b1c:	4836      	ldr	r0, [pc, #216]	; (8004bf8 <main+0x1d4>)
 8004b1e:	f001 fd1f 	bl	8006560 <uart_write_debug>
 8004b22:	e003      	b.n	8004b2c <main+0x108>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 8004b24:	210a      	movs	r1, #10
 8004b26:	4835      	ldr	r0, [pc, #212]	; (8004bfc <main+0x1d8>)
 8004b28:	f001 fd1a 	bl	8006560 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 8004b2c:	f007 fe40 	bl	800c7b0 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 8004b30:	4833      	ldr	r0, [pc, #204]	; (8004c00 <main+0x1dc>)
 8004b32:	f008 f875 	bl	800cc20 <osMutexNew>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4a32      	ldr	r2, [pc, #200]	; (8004c04 <main+0x1e0>)
 8004b3a:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 8004b3c:	4832      	ldr	r0, [pc, #200]	; (8004c08 <main+0x1e4>)
 8004b3e:	f008 f86f 	bl	800cc20 <osMutexNew>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a31      	ldr	r2, [pc, #196]	; (8004c0c <main+0x1e8>)
 8004b46:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (8, sizeof(mems_data_t), &memsQueue_attributes);
 8004b48:	4a31      	ldr	r2, [pc, #196]	; (8004c10 <main+0x1ec>)
 8004b4a:	2128      	movs	r1, #40	; 0x28
 8004b4c:	2008      	movs	r0, #8
 8004b4e:	f008 f975 	bl	800ce3c <osMessageQueueNew>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <main+0x1f0>)
 8004b56:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 8004b58:	4a2f      	ldr	r2, [pc, #188]	; (8004c18 <main+0x1f4>)
 8004b5a:	210c      	movs	r1, #12
 8004b5c:	2004      	movs	r0, #4
 8004b5e:	f008 f96d 	bl	800ce3c <osMessageQueueNew>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4a2d      	ldr	r2, [pc, #180]	; (8004c1c <main+0x1f8>)
 8004b66:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 8004b68:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <main+0x1fc>)
 8004b6a:	2128      	movs	r1, #40	; 0x28
 8004b6c:	2008      	movs	r0, #8
 8004b6e:	f008 f965 	bl	800ce3c <osMessageQueueNew>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <main+0x200>)
 8004b76:	6013      	str	r3, [r2, #0]
  /* EVENT FLAG FOR ACK RECEIVE */
  ack_rcvd = osEventFlagsNew(NULL);
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f007 ff67 	bl	800ca4c <osEventFlagsNew>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4a29      	ldr	r2, [pc, #164]	; (8004c28 <main+0x204>)
 8004b82:	6013      	str	r3, [r2, #0]
  //							//

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004b84:	4a29      	ldr	r2, [pc, #164]	; (8004c2c <main+0x208>)
 8004b86:	2100      	movs	r1, #0
 8004b88:	4829      	ldr	r0, [pc, #164]	; (8004c30 <main+0x20c>)
 8004b8a:	f007 fe70 	bl	800c86e <osThreadNew>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <main+0x210>)
 8004b92:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 8004b94:	4a28      	ldr	r2, [pc, #160]	; (8004c38 <main+0x214>)
 8004b96:	2100      	movs	r1, #0
 8004b98:	4828      	ldr	r0, [pc, #160]	; (8004c3c <main+0x218>)
 8004b9a:	f007 fe68 	bl	800c86e <osThreadNew>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <main+0x21c>)
 8004ba2:	6013      	str	r3, [r2, #0]

//  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 8004ba4:	4a27      	ldr	r2, [pc, #156]	; (8004c44 <main+0x220>)
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4827      	ldr	r0, [pc, #156]	; (8004c48 <main+0x224>)
 8004baa:	f007 fe60 	bl	800c86e <osThreadNew>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <main+0x228>)
 8004bb2:	6013      	str	r3, [r2, #0]

//  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);

//  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 8004bb4:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <main+0x22c>)
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4826      	ldr	r0, [pc, #152]	; (8004c54 <main+0x230>)
 8004bba:	f007 fe58 	bl	800c86e <osThreadNew>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4a25      	ldr	r2, [pc, #148]	; (8004c58 <main+0x234>)
 8004bc2:	6013      	str	r3, [r2, #0]

  gyroCalibrationTaskHandle = osThreadNew(gyroCalibrationTask, NULL, &gyroCalibrationTaskHandle_attributes);
 8004bc4:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <main+0x238>)
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4825      	ldr	r0, [pc, #148]	; (8004c60 <main+0x23c>)
 8004bca:	f007 fe50 	bl	800c86e <osThreadNew>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <main+0x240>)
 8004bd2:	6013      	str	r3, [r2, #0]

  /*Suspend the gyro-calibration task*/
  osThreadSuspend(gyroCalibrationTaskHandle);
 8004bd4:	4b23      	ldr	r3, [pc, #140]	; (8004c64 <main+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f007 feda 	bl	800c992 <osThreadSuspend>

  /* Start scheduler */
  osKernelStart();
 8004bde:	f007 fe0b 	bl	800c7f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004be2:	e7fe      	b.n	8004be2 <main+0x1be>
 8004be4:	08014e30 	.word	0x08014e30
 8004be8:	08014e4c 	.word	0x08014e4c
 8004bec:	08014e68 	.word	0x08014e68
 8004bf0:	08014e84 	.word	0x08014e84
 8004bf4:	08014dd4 	.word	0x08014dd4
 8004bf8:	08014df8 	.word	0x08014df8
 8004bfc:	08014e18 	.word	0x08014e18
 8004c00:	0801501c 	.word	0x0801501c
 8004c04:	20000440 	.word	0x20000440
 8004c08:	0801502c 	.word	0x0801502c
 8004c0c:	20000444 	.word	0x20000444
 8004c10:	0801503c 	.word	0x0801503c
 8004c14:	20000448 	.word	0x20000448
 8004c18:	08015054 	.word	0x08015054
 8004c1c:	2000044c 	.word	0x2000044c
 8004c20:	0801506c 	.word	0x0801506c
 8004c24:	20000450 	.word	0x20000450
 8004c28:	20000454 	.word	0x20000454
 8004c2c:	08014f68 	.word	0x08014f68
 8004c30:	08004c69 	.word	0x08004c69
 8004c34:	2000042c 	.word	0x2000042c
 8004c38:	08014fb0 	.word	0x08014fb0
 8004c3c:	08004c91 	.word	0x08004c91
 8004c40:	20000430 	.word	0x20000430
 8004c44:	08014f8c 	.word	0x08014f8c
 8004c48:	08004cd1 	.word	0x08004cd1
 8004c4c:	20000434 	.word	0x20000434
 8004c50:	08014fd4 	.word	0x08014fd4
 8004c54:	08004d5d 	.word	0x08004d5d
 8004c58:	20000438 	.word	0x20000438
 8004c5c:	08014ff8 	.word	0x08014ff8
 8004c60:	08004dcd 	.word	0x08004dcd
 8004c64:	2000043c 	.word	0x2000043c

08004c68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c74:	4805      	ldr	r0, [pc, #20]	; (8004c8c <StartDefaultTask+0x24>)
 8004c76:	f002 fc69 	bl	800754c <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	f001 fc48 	bl	8006510 <uart_receive_it>
    osDelay(500);
 8004c80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c84:	f007 fec7 	bl	800ca16 <osDelay>
  {
 8004c88:	e7f2      	b.n	8004c70 <StartDefaultTask+0x8>
 8004c8a:	bf00      	nop
 8004c8c:	48000400 	.word	0x48000400

08004c90 <readMemsTask>:
		osDelay(30);
	}
}

void readMemsTask(void *argument)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b090      	sub	sp, #64	; 0x40
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	for(;;)
	{
//		osMutexAcquire(i2cMutex, osWaitForever);
		tick_gyro(&mems_data);
 8004c98:	f107 0318 	add.w	r3, r7, #24
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fbd5 	bl	800444c <tick_gyro>
		FusionCalcHeading(&mems_data, &euler);
 8004ca2:	f107 020c 	add.w	r2, r7, #12
 8004ca6:	f107 0318 	add.w	r3, r7, #24
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fc fbe9 	bl	8001484 <FusionCalcHeading>
//		osMutexRelease(i2cMutex);
		osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <readMemsTask+0x3c>)
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	f107 010c 	add.w	r1, r7, #12
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f008 f931 	bl	800cf24 <osMessageQueuePut>
		osDelay(MEMS_SR);
 8004cc2:	200a      	movs	r0, #10
 8004cc4:	f007 fea7 	bl	800ca16 <osDelay>
		tick_gyro(&mems_data);
 8004cc8:	e7e6      	b.n	8004c98 <readMemsTask+0x8>
 8004cca:	bf00      	nop
 8004ccc:	2000044c 	.word	0x2000044c

08004cd0 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b094      	sub	sp, #80	; 0x50
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <printOutTask+0x80>)
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	f107 0118 	add.w	r1, r7, #24
 8004cee:	2305      	movs	r3, #5
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f008 f977 	bl	800cfe4 <osMessageQueueGet>
 8004cf6:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8004cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d123      	bne.n	8004d46 <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb fc39 	bl	8000578 <__aeabi_f2d>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	f107 000c 	add.w	r0, r7, #12
 8004d0e:	4911      	ldr	r1, [pc, #68]	; (8004d54 <printOutTask+0x84>)
 8004d10:	f00c fb78 	bl	8011404 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <printOutTask+0x88>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f04f 31ff 	mov.w	r1, #4294967295
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f008 f805 	bl	800cd2c <osMutexAcquire>
			uart_write_debug(text,50);
 8004d22:	f107 030c 	add.w	r3, r7, #12
 8004d26:	2132      	movs	r1, #50	; 0x32
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fc19 	bl	8006560 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <printOutTask+0x88>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f008 f845 	bl	800cdc2 <osMutexRelease>
			memset(text,0,sizeof(text));
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	220a      	movs	r2, #10
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f00c fbc2 	bl	80114ca <memset>
		}
		osDelay(70);
 8004d46:	2046      	movs	r0, #70	; 0x46
 8004d48:	f007 fe65 	bl	800ca16 <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 8004d4c:	e7cb      	b.n	8004ce6 <printOutTask+0x16>
 8004d4e:	bf00      	nop
 8004d50:	2000044c 	.word	0x2000044c
 8004d54:	08014ea0 	.word	0x08014ea0
 8004d58:	20000440 	.word	0x20000440

08004d5c <readMessageTask>:
//		osMutexRelease(debugUartMutex);
		osDelay(1700);
	}
}

void readMessageTask(void *argument){
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08e      	sub	sp, #56	; 0x38
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint32_t ack_flag;
	uint8_t message_buffer[RB_SIZE] = {0};
 8004d64:	2300      	movs	r3, #0
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	f107 030c 	add.w	r3, r7, #12
 8004d6c:	2224      	movs	r2, #36	; 0x24
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f00c fbaa 	bl	80114ca <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <readMessageTask+0x68>)
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f107 0108 	add.w	r1, r7, #8
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d82:	2200      	movs	r2, #0
 8004d84:	f008 f92e 	bl	800cfe4 <osMessageQueueGet>
 8004d88:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d114      	bne.n	8004dba <readMessageTask+0x5e>
			tick_Handler(message_buffer);
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fa75 	bl	8005284 <tick_Handler>
			ack_flag = osEventFlagsWait(ack_rcvd, ACK_FLAG, osFlagsWaitAny, 150);
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <readMessageTask+0x6c>)
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	2396      	movs	r3, #150	; 0x96
 8004da0:	2200      	movs	r2, #0
 8004da2:	2101      	movs	r1, #1
 8004da4:	f007 fed6 	bl	800cb54 <osEventFlagsWait>
 8004da8:	6338      	str	r0, [r7, #48]	; 0x30
			if (ack_flag != 1){
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d004      	beq.n	8004dba <readMessageTask+0x5e>
				tick_Handler(message_buffer);
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa65 	bl	8005284 <tick_Handler>
			}
		}
		osDelay(200);
 8004dba:	20c8      	movs	r0, #200	; 0xc8
 8004dbc:	f007 fe2b 	bl	800ca16 <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004dc0:	e7d9      	b.n	8004d76 <readMessageTask+0x1a>
 8004dc2:	bf00      	nop
 8004dc4:	20000450 	.word	0x20000450
 8004dc8:	20000454 	.word	0x20000454

08004dcc <gyroCalibrationTask>:
	}
}

void gyroCalibrationTask(void *argument){
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	; 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	osThreadSuspend(readMemsTaskHandle);
 8004dd4:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <gyroCalibrationTask+0x68>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f007 fdda 	bl	800c992 <osThreadSuspend>
	osThreadSuspend(printOutTaskHandle);
 8004dde:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <gyroCalibrationTask+0x6c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f007 fdd5 	bl	800c992 <osThreadSuspend>
	osDelay(100);
 8004de8:	2064      	movs	r0, #100	; 0x64
 8004dea:	f007 fe14 	bl	800ca16 <osDelay>
	uart_write_debug("Gyro Calibration: Hold the device still\r\n", 50);
 8004dee:	2132      	movs	r1, #50	; 0x32
 8004df0:	4812      	ldr	r0, [pc, #72]	; (8004e3c <gyroCalibrationTask+0x70>)
 8004df2:	f001 fbb5 	bl	8006560 <uart_write_debug>
	for(;;){
		if (gyro_offset_calculation(&mems_data) == 0){
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fd90 	bl	8004920 <gyro_offset_calculation>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d112      	bne.n	8004e2c <gyroCalibrationTask+0x60>
			uart_write_debug("Gyro Calibration: Finished!\r\n", 50);
 8004e06:	2132      	movs	r1, #50	; 0x32
 8004e08:	480d      	ldr	r0, [pc, #52]	; (8004e40 <gyroCalibrationTask+0x74>)
 8004e0a:	f001 fba9 	bl	8006560 <uart_write_debug>
			osThreadResume(readMemsTaskHandle);
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <gyroCalibrationTask+0x68>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f007 fdde 	bl	800c9d4 <osThreadResume>
			osThreadResume(printOutTaskHandle);
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <gyroCalibrationTask+0x6c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f007 fdd9 	bl	800c9d4 <osThreadResume>
			osThreadSuspend(gyroCalibrationTaskHandle);
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <gyroCalibrationTask+0x78>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f007 fdb3 	bl	800c992 <osThreadSuspend>
		}
		osDelay(5);
 8004e2c:	2005      	movs	r0, #5
 8004e2e:	f007 fdf2 	bl	800ca16 <osDelay>
		if (gyro_offset_calculation(&mems_data) == 0){
 8004e32:	e7e0      	b.n	8004df6 <gyroCalibrationTask+0x2a>
 8004e34:	20000430 	.word	0x20000430
 8004e38:	20000434 	.word	0x20000434
 8004e3c:	08014ea8 	.word	0x08014ea8
 8004e40:	08014ed4 	.word	0x08014ed4
 8004e44:	2000043c 	.word	0x2000043c

08004e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b096      	sub	sp, #88	; 0x58
 8004e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e4e:	f107 0314 	add.w	r3, r7, #20
 8004e52:	2244      	movs	r2, #68	; 0x44
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f00c fb37 	bl	80114ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	60da      	str	r2, [r3, #12]
 8004e68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f003 fc44 	bl	80086f8 <HAL_PWREx_ControlVoltageScaling>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004e76:	f000 f9f5 	bl	8005264 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004e7a:	2310      	movs	r3, #16
 8004e7c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004e86:	2360      	movs	r3, #96	; 0x60
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004e96:	233c      	movs	r3, #60	; 0x3c
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ea6:	f107 0314 	add.w	r3, r7, #20
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f003 fcc8 	bl	8008840 <HAL_RCC_OscConfig>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004eb6:	f000 f9d5 	bl	8005264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004eba:	230f      	movs	r3, #15
 8004ebc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ece:	463b      	mov	r3, r7
 8004ed0:	2105      	movs	r1, #5
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f004 f8ce 	bl	8009074 <HAL_RCC_ClockConfig>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004ede:	f000 f9c1 	bl	8005264 <Error_Handler>
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3758      	adds	r7, #88	; 0x58
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef2:	f107 0314 	add.w	r3, r7, #20
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	609a      	str	r2, [r3, #8]
 8004efe:	60da      	str	r2, [r3, #12]
 8004f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f02:	4bbb      	ldr	r3, [pc, #748]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	4aba      	ldr	r2, [pc, #744]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f08:	f043 0310 	orr.w	r3, r3, #16
 8004f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f0e:	4bb8      	ldr	r3, [pc, #736]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f1a:	4bb5      	ldr	r3, [pc, #724]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	4ab4      	ldr	r2, [pc, #720]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f20:	f043 0304 	orr.w	r3, r3, #4
 8004f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f26:	4bb2      	ldr	r3, [pc, #712]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f32:	4baf      	ldr	r3, [pc, #700]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	4aae      	ldr	r2, [pc, #696]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f3e:	4bac      	ldr	r3, [pc, #688]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4a:	4ba9      	ldr	r3, [pc, #676]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4e:	4aa8      	ldr	r2, [pc, #672]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f56:	4ba6      	ldr	r3, [pc, #664]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f62:	4ba3      	ldr	r3, [pc, #652]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	4aa2      	ldr	r2, [pc, #648]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f6e:	4ba0      	ldr	r3, [pc, #640]	; (80051f0 <MX_GPIO_Init+0x304>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f240 1105 	movw	r1, #261	; 0x105
 8004f80:	489c      	ldr	r0, [pc, #624]	; (80051f4 <MX_GPIO_Init+0x308>)
 8004f82:	f002 facb 	bl	800751c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004f86:	2200      	movs	r2, #0
 8004f88:	f248 111c 	movw	r1, #33052	; 0x811c
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f90:	f002 fac4 	bl	800751c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004f94:	2200      	movs	r2, #0
 8004f96:	f24f 0134 	movw	r1, #61492	; 0xf034
 8004f9a:	4897      	ldr	r0, [pc, #604]	; (80051f8 <MX_GPIO_Init+0x30c>)
 8004f9c:	f002 fabe 	bl	800751c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f242 0183 	movw	r1, #8323	; 0x2083
 8004fa6:	4895      	ldr	r0, [pc, #596]	; (80051fc <MX_GPIO_Init+0x310>)
 8004fa8:	f002 fab8 	bl	800751c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004fac:	2200      	movs	r2, #0
 8004fae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004fb2:	4893      	ldr	r0, [pc, #588]	; (8005200 <MX_GPIO_Init+0x314>)
 8004fb4:	f002 fab2 	bl	800751c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004fb8:	f240 1305 	movw	r3, #261	; 0x105
 8004fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fca:	f107 0314 	add.w	r3, r7, #20
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4888      	ldr	r0, [pc, #544]	; (80051f4 <MX_GPIO_Init+0x308>)
 8004fd2:	f002 f911 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8004fd6:	237a      	movs	r3, #122	; 0x7a
 8004fd8:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4882      	ldr	r0, [pc, #520]	; (80051f4 <MX_GPIO_Init+0x308>)
 8004fec:	f002 f904 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004ff0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8004ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ff6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	4619      	mov	r1, r3
 8005006:	487e      	ldr	r0, [pc, #504]	; (8005200 <MX_GPIO_Init+0x314>)
 8005008:	f002 f8f6 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800500c:	233f      	movs	r3, #63	; 0x3f
 800500e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005010:	230b      	movs	r3, #11
 8005012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4619      	mov	r1, r3
 800501e:	4878      	ldr	r0, [pc, #480]	; (8005200 <MX_GPIO_Init+0x314>)
 8005020:	f002 f8ea 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005024:	2303      	movs	r3, #3
 8005026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005028:	2302      	movs	r3, #2
 800502a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005030:	2303      	movs	r3, #3
 8005032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005034:	2308      	movs	r3, #8
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4619      	mov	r1, r3
 800503e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005042:	f002 f8d9 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8005046:	f248 131c 	movw	r3, #33052	; 0x811c
 800504a:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800504c:	2301      	movs	r3, #1
 800504e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4619      	mov	r1, r3
 800505e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005062:	f002 f8c9 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8005066:	23e0      	movs	r3, #224	; 0xe0
 8005068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506a:	2302      	movs	r3, #2
 800506c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005072:	2303      	movs	r3, #3
 8005074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005076:	2305      	movs	r3, #5
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	4619      	mov	r1, r3
 8005080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005084:	f002 f8b8 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800508c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8005096:	f107 0314 	add.w	r3, r7, #20
 800509a:	4619      	mov	r1, r3
 800509c:	4856      	ldr	r0, [pc, #344]	; (80051f8 <MX_GPIO_Init+0x30c>)
 800509e:	f002 f8ab 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80050a2:	2302      	movs	r3, #2
 80050a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	2302      	movs	r3, #2
 80050a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ae:	2300      	movs	r3, #0
 80050b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80050b2:	2302      	movs	r3, #2
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	4619      	mov	r1, r3
 80050bc:	484e      	ldr	r0, [pc, #312]	; (80051f8 <MX_GPIO_Init+0x30c>)
 80050be:	f002 f89b 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80050c2:	f24f 0334 	movw	r3, #61492	; 0xf034
 80050c6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050c8:	2301      	movs	r3, #1
 80050ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d0:	2300      	movs	r3, #0
 80050d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d4:	f107 0314 	add.w	r3, r7, #20
 80050d8:	4619      	mov	r1, r3
 80050da:	4847      	ldr	r0, [pc, #284]	; (80051f8 <MX_GPIO_Init+0x30c>)
 80050dc:	f002 f88c 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80050e0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80050e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e6:	2302      	movs	r3, #2
 80050e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ee:	2300      	movs	r3, #0
 80050f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80050f2:	2306      	movs	r3, #6
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050f6:	f107 0314 	add.w	r3, r7, #20
 80050fa:	4619      	mov	r1, r3
 80050fc:	483d      	ldr	r0, [pc, #244]	; (80051f4 <MX_GPIO_Init+0x308>)
 80050fe:	f002 f87b 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8005102:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005106:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005108:	2302      	movs	r3, #2
 800510a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005110:	2303      	movs	r3, #3
 8005112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8005114:	230a      	movs	r3, #10
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	4619      	mov	r1, r3
 800511e:	4835      	ldr	r0, [pc, #212]	; (80051f4 <MX_GPIO_Init+0x308>)
 8005120:	f002 f86a 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005124:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512a:	2302      	movs	r3, #2
 800512c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005132:	2303      	movs	r3, #3
 8005134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005136:	2307      	movs	r3, #7
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800513a:	f107 0314 	add.w	r3, r7, #20
 800513e:	4619      	mov	r1, r3
 8005140:	482e      	ldr	r0, [pc, #184]	; (80051fc <MX_GPIO_Init+0x310>)
 8005142:	f002 f859 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8005146:	f64d 4304 	movw	r3, #56324	; 0xdc04
 800514a:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800514c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005156:	f107 0314 	add.w	r3, r7, #20
 800515a:	4619      	mov	r1, r3
 800515c:	4827      	ldr	r0, [pc, #156]	; (80051fc <MX_GPIO_Init+0x310>)
 800515e:	f002 f84b 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8005162:	f242 0383 	movw	r3, #8323	; 0x2083
 8005166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005168:	2301      	movs	r3, #1
 800516a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005170:	2300      	movs	r3, #0
 8005172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	4619      	mov	r1, r3
 800517a:	4820      	ldr	r0, [pc, #128]	; (80051fc <MX_GPIO_Init+0x310>)
 800517c:	f002 f83c 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8005180:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005186:	2301      	movs	r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	2300      	movs	r3, #0
 8005190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005192:	f107 0314 	add.w	r3, r7, #20
 8005196:	4619      	mov	r1, r3
 8005198:	4819      	ldr	r0, [pc, #100]	; (8005200 <MX_GPIO_Init+0x314>)
 800519a:	f002 f82d 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800519e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80051ac:	f107 0314 	add.w	r3, r7, #20
 80051b0:	4619      	mov	r1, r3
 80051b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051b6:	f002 f81f 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80051ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80051be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c0:	2302      	movs	r3, #2
 80051c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c8:	2303      	movs	r3, #3
 80051ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051cc:	2306      	movs	r3, #6
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	4619      	mov	r1, r3
 80051d6:	480a      	ldr	r0, [pc, #40]	; (8005200 <MX_GPIO_Init+0x314>)
 80051d8:	f002 f80e 	bl	80071f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80051dc:	2378      	movs	r3, #120	; 0x78
 80051de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e8:	2303      	movs	r3, #3
 80051ea:	623b      	str	r3, [r7, #32]
 80051ec:	e00a      	b.n	8005204 <MX_GPIO_Init+0x318>
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	48001000 	.word	0x48001000
 80051f8:	48000400 	.word	0x48000400
 80051fc:	48000c00 	.word	0x48000c00
 8005200:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005204:	2307      	movs	r3, #7
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005208:	f107 0314 	add.w	r3, r7, #20
 800520c:	4619      	mov	r1, r3
 800520e:	480b      	ldr	r0, [pc, #44]	; (800523c <MX_GPIO_Init+0x350>)
 8005210:	f001 fff2 	bl	80071f8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8005214:	2200      	movs	r2, #0
 8005216:	2105      	movs	r1, #5
 8005218:	2017      	movs	r0, #23
 800521a:	f001 fc47 	bl	8006aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800521e:	2017      	movs	r0, #23
 8005220:	f001 fc60 	bl	8006ae4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005224:	2200      	movs	r2, #0
 8005226:	2105      	movs	r1, #5
 8005228:	2028      	movs	r0, #40	; 0x28
 800522a:	f001 fc3f 	bl	8006aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800522e:	2028      	movs	r0, #40	; 0x28
 8005230:	f001 fc58 	bl	8006ae4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005234:	bf00      	nop
 8005236:	3728      	adds	r7, #40	; 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	48000c00 	.word	0x48000c00

08005240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d101      	bne.n	8005256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005252:	f001 fb2f 	bl	80068b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40012c00 	.word	0x40012c00

08005264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005268:	b672      	cpsid	i
}
 800526a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 800526c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005270:	4803      	ldr	r0, [pc, #12]	; (8005280 <Error_Handler+0x1c>)
 8005272:	f002 f96b 	bl	800754c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005276:	2064      	movs	r0, #100	; 0x64
 8005278:	f001 fb3c 	bl	80068f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 800527c:	e7f6      	b.n	800526c <Error_Handler+0x8>
 800527e:	bf00      	nop
 8005280:	48000400 	.word	0x48000400

08005284 <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 8005290:	f000 fbac 	bl	80059ec <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 8005294:	2101      	movs	r1, #1
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa9a 	bl	80057d0 <parseMessage>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <tick_Handler+0x24>
		handler(UART_NYX);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f000 fb1e 	bl	80058e4 <handler>
	}
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 80052ba:	4b16      	ldr	r3, [pc, #88]	; (8005314 <sendNack+0x64>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b1b      	cmp	r3, #27
 80052c0:	d007      	beq.n	80052d2 <sendNack+0x22>
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <sendNack+0x64>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d003      	beq.n	80052d2 <sendNack+0x22>
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <sendNack+0x64>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d10f      	bne.n	80052f2 <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 80052d2:	2315      	movs	r3, #21
 80052d4:	733b      	strb	r3, [r7, #12]
 80052d6:	231b      	movs	r3, #27
 80052d8:	737b      	strb	r3, [r7, #13]
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <sendNack+0x64>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 80052e0:	79fa      	ldrb	r2, [r7, #7]
 80052e2:	f107 000c 	add.w	r0, r7, #12
 80052e6:	2305      	movs	r3, #5
 80052e8:	2103      	movs	r1, #3
 80052ea:	f001 f94f 	bl	800658c <uart_write>
 80052ee:	4603      	mov	r3, r0
 80052f0:	e00c      	b.n	800530c <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 80052f2:	2315      	movs	r3, #21
 80052f4:	723b      	strb	r3, [r7, #8]
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <sendNack+0x64>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 80052fc:	79fa      	ldrb	r2, [r7, #7]
 80052fe:	f107 0008 	add.w	r0, r7, #8
 8005302:	2305      	movs	r3, #5
 8005304:	2102      	movs	r1, #2
 8005306:	f001 f941 	bl	800658c <uart_write>
 800530a:	4603      	mov	r3, r0
    }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000458 	.word	0x20000458

08005318 <sendAck>:

uint8_t sendAck(UART_select device){
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8005322:	4b16      	ldr	r3, [pc, #88]	; (800537c <sendAck+0x64>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b1b      	cmp	r3, #27
 8005328:	d007      	beq.n	800533a <sendAck+0x22>
 800532a:	4b14      	ldr	r3, [pc, #80]	; (800537c <sendAck+0x64>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d003      	beq.n	800533a <sendAck+0x22>
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <sendAck+0x64>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d10f      	bne.n	800535a <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 800533a:	2306      	movs	r3, #6
 800533c:	733b      	strb	r3, [r7, #12]
 800533e:	231b      	movs	r3, #27
 8005340:	737b      	strb	r3, [r7, #13]
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <sendAck+0x64>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8005348:	79fa      	ldrb	r2, [r7, #7]
 800534a:	f107 000c 	add.w	r0, r7, #12
 800534e:	2305      	movs	r3, #5
 8005350:	2103      	movs	r1, #3
 8005352:	f001 f91b 	bl	800658c <uart_write>
 8005356:	4603      	mov	r3, r0
 8005358:	e00c      	b.n	8005374 <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 800535a:	2306      	movs	r3, #6
 800535c:	723b      	strb	r3, [r7, #8]
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <sendAck+0x64>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8005364:	79fa      	ldrb	r2, [r7, #7]
 8005366:	f107 0008 	add.w	r0, r7, #8
 800536a:	2305      	movs	r3, #5
 800536c:	2102      	movs	r1, #2
 800536e:	f001 f90d 	bl	800658c <uart_write>
 8005372:	4603      	mov	r3, r0
    }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20000458 	.word	0x20000458

08005380 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8005390:	2300      	movs	r3, #0
 8005392:	73bb      	strb	r3, [r7, #14]
 8005394:	e01e      	b.n	80053d4 <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d00b      	beq.n	80053ba <calcDataSize+0x3a>
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d005      	beq.n	80053ba <calcDataSize+0x3a>
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b1b      	cmp	r3, #27
 80053b8:	d106      	bne.n	80053c8 <calcDataSize+0x48>
           j++;
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	3301      	adds	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
           j++;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	3301      	adds	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
 80053c6:	e002      	b.n	80053ce <calcDataSize+0x4e>
       }
       else j++;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	3301      	adds	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 80053ce:	7bbb      	ldrb	r3, [r7, #14]
 80053d0:	3301      	adds	r3, #1
 80053d2:	73bb      	strb	r3, [r7, #14]
 80053d4:	7bba      	ldrb	r2, [r7, #14]
 80053d6:	78fb      	ldrb	r3, [r7, #3]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3dc      	bcc.n	8005396 <calcDataSize+0x16>
    }
    return j;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08c      	sub	sp, #48	; 0x30
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	70fb      	strb	r3, [r7, #3]
 80053fe:	460b      	mov	r3, r1
 8005400:	70bb      	strb	r3, [r7, #2]
 8005402:	4613      	mov	r3, r2
 8005404:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff ffb5 	bl	8005380 <calcDataSize>
 8005416:	4603      	mov	r3, r0
 8005418:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	b29a      	uxth	r2, r3
 8005420:	4bc1      	ldr	r3, [pc, #772]	; (8005728 <transmitMessage+0x33c>)
 8005422:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 8005424:	4bc0      	ldr	r3, [pc, #768]	; (8005728 <transmitMessage+0x33c>)
 8005426:	88db      	ldrh	r3, [r3, #6]
 8005428:	461a      	mov	r2, r3
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	48bf      	ldr	r0, [pc, #764]	; (800572c <transmitMessage+0x340>)
 800542e:	f00c f8dc 	bl	80115ea <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 8005432:	4bbd      	ldr	r3, [pc, #756]	; (8005728 <transmitMessage+0x33c>)
 8005434:	22fe      	movs	r2, #254	; 0xfe
 8005436:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 8005438:	4bbb      	ldr	r3, [pc, #748]	; (8005728 <transmitMessage+0x33c>)
 800543a:	2201      	movs	r2, #1
 800543c:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 800543e:	4bbc      	ldr	r3, [pc, #752]	; (8005730 <transmitMessage+0x344>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2bff      	cmp	r3, #255	; 0xff
 8005444:	d103      	bne.n	800544e <transmitMessage+0x62>
        TOKEN=0;
 8005446:	4bba      	ldr	r3, [pc, #744]	; (8005730 <transmitMessage+0x344>)
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	e005      	b.n	800545a <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 800544e:	4bb8      	ldr	r3, [pc, #736]	; (8005730 <transmitMessage+0x344>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4bb6      	ldr	r3, [pc, #728]	; (8005730 <transmitMessage+0x344>)
 8005458:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 800545a:	4bb5      	ldr	r3, [pc, #724]	; (8005730 <transmitMessage+0x344>)
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	4bb2      	ldr	r3, [pc, #712]	; (8005728 <transmitMessage+0x33c>)
 8005460:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 8005462:	4ab1      	ldr	r2, [pc, #708]	; (8005728 <transmitMessage+0x33c>)
 8005464:	78bb      	ldrb	r3, [r7, #2]
 8005466:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 8005468:	4baf      	ldr	r3, [pc, #700]	; (8005728 <transmitMessage+0x33c>)
 800546a:	221b      	movs	r2, #27
 800546c:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 800546e:	4bae      	ldr	r3, [pc, #696]	; (8005728 <transmitMessage+0x33c>)
 8005470:	2232      	movs	r2, #50	; 0x32
 8005472:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 8005474:	f000 f95e 	bl	8005734 <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 800547e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005482:	3330      	adds	r3, #48	; 0x30
 8005484:	443b      	add	r3, r7
 8005486:	2202      	movs	r2, #2
 8005488:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800548c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005490:	3301      	adds	r3, #1
 8005492:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 8005496:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800549a:	4aa3      	ldr	r2, [pc, #652]	; (8005728 <transmitMessage+0x33c>)
 800549c:	7812      	ldrb	r2, [r2, #0]
 800549e:	3330      	adds	r3, #48	; 0x30
 80054a0:	443b      	add	r3, r7
 80054a2:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80054a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054aa:	3301      	adds	r3, #1
 80054ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 80054b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054b4:	4a9c      	ldr	r2, [pc, #624]	; (8005728 <transmitMessage+0x33c>)
 80054b6:	7852      	ldrb	r2, [r2, #1]
 80054b8:	3330      	adds	r3, #48	; 0x30
 80054ba:	443b      	add	r3, r7
 80054bc:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80054c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054c4:	3301      	adds	r3, #1
 80054c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 80054ca:	4b97      	ldr	r3, [pc, #604]	; (8005728 <transmitMessage+0x33c>)
 80054cc:	789b      	ldrb	r3, [r3, #2]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d007      	beq.n	80054e2 <transmitMessage+0xf6>
 80054d2:	4b95      	ldr	r3, [pc, #596]	; (8005728 <transmitMessage+0x33c>)
 80054d4:	789b      	ldrb	r3, [r3, #2]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d003      	beq.n	80054e2 <transmitMessage+0xf6>
 80054da:	4b93      	ldr	r3, [pc, #588]	; (8005728 <transmitMessage+0x33c>)
 80054dc:	789b      	ldrb	r3, [r3, #2]
 80054de:	2b1b      	cmp	r3, #27
 80054e0:	d119      	bne.n	8005516 <transmitMessage+0x12a>
        message[index] = ESC;
 80054e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054e6:	3330      	adds	r3, #48	; 0x30
 80054e8:	443b      	add	r3, r7
 80054ea:	221b      	movs	r2, #27
 80054ec:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80054f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054f4:	3301      	adds	r3, #1
 80054f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 80054fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054fe:	4a8a      	ldr	r2, [pc, #552]	; (8005728 <transmitMessage+0x33c>)
 8005500:	7892      	ldrb	r2, [r2, #2]
 8005502:	3330      	adds	r3, #48	; 0x30
 8005504:	443b      	add	r3, r7
 8005506:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800550a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800550e:	3301      	adds	r3, #1
 8005510:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005514:	e00c      	b.n	8005530 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 8005516:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800551a:	4a83      	ldr	r2, [pc, #524]	; (8005728 <transmitMessage+0x33c>)
 800551c:	7892      	ldrb	r2, [r2, #2]
 800551e:	3330      	adds	r3, #48	; 0x30
 8005520:	443b      	add	r3, r7
 8005522:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005526:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800552a:	3301      	adds	r3, #1
 800552c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 8005530:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005534:	4a7c      	ldr	r2, [pc, #496]	; (8005728 <transmitMessage+0x33c>)
 8005536:	78d2      	ldrb	r2, [r2, #3]
 8005538:	3330      	adds	r3, #48	; 0x30
 800553a:	443b      	add	r3, r7
 800553c:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005540:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005544:	3301      	adds	r3, #1
 8005546:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 800554a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800554e:	4a76      	ldr	r2, [pc, #472]	; (8005728 <transmitMessage+0x33c>)
 8005550:	7912      	ldrb	r2, [r2, #4]
 8005552:	3330      	adds	r3, #48	; 0x30
 8005554:	443b      	add	r3, r7
 8005556:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800555a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800555e:	3301      	adds	r3, #1
 8005560:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 8005564:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005568:	4a6f      	ldr	r2, [pc, #444]	; (8005728 <transmitMessage+0x33c>)
 800556a:	7952      	ldrb	r2, [r2, #5]
 800556c:	3330      	adds	r3, #48	; 0x30
 800556e:	443b      	add	r3, r7
 8005570:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005574:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005578:	3301      	adds	r3, #1
 800557a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 800557e:	2300      	movs	r3, #0
 8005580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005584:	e046      	b.n	8005614 <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 8005586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800558a:	4a67      	ldr	r2, [pc, #412]	; (8005728 <transmitMessage+0x33c>)
 800558c:	4413      	add	r3, r2
 800558e:	7a1b      	ldrb	r3, [r3, #8]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d00d      	beq.n	80055b0 <transmitMessage+0x1c4>
 8005594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005598:	4a63      	ldr	r2, [pc, #396]	; (8005728 <transmitMessage+0x33c>)
 800559a:	4413      	add	r3, r2
 800559c:	7a1b      	ldrb	r3, [r3, #8]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d006      	beq.n	80055b0 <transmitMessage+0x1c4>
 80055a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055a6:	4a60      	ldr	r2, [pc, #384]	; (8005728 <transmitMessage+0x33c>)
 80055a8:	4413      	add	r3, r2
 80055aa:	7a1b      	ldrb	r3, [r3, #8]
 80055ac:	2b1b      	cmp	r3, #27
 80055ae:	d11c      	bne.n	80055ea <transmitMessage+0x1fe>
            message[index] = ESC;
 80055b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055b4:	3330      	adds	r3, #48	; 0x30
 80055b6:	443b      	add	r3, r7
 80055b8:	221b      	movs	r2, #27
 80055ba:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 80055be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055c2:	3301      	adds	r3, #1
 80055c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 80055c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80055cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055d0:	4955      	ldr	r1, [pc, #340]	; (8005728 <transmitMessage+0x33c>)
 80055d2:	440a      	add	r2, r1
 80055d4:	7a12      	ldrb	r2, [r2, #8]
 80055d6:	3330      	adds	r3, #48	; 0x30
 80055d8:	443b      	add	r3, r7
 80055da:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 80055de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055e2:	3301      	adds	r3, #1
 80055e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80055e8:	e00f      	b.n	800560a <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 80055ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80055ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055f2:	494d      	ldr	r1, [pc, #308]	; (8005728 <transmitMessage+0x33c>)
 80055f4:	440a      	add	r2, r1
 80055f6:	7a12      	ldrb	r2, [r2, #8]
 80055f8:	3330      	adds	r3, #48	; 0x30
 80055fa:	443b      	add	r3, r7
 80055fc:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005600:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005604:	3301      	adds	r3, #1
 8005606:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 800560a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800560e:	3301      	adds	r3, #1
 8005610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005618:	b29a      	uxth	r2, r3
 800561a:	4b43      	ldr	r3, [pc, #268]	; (8005728 <transmitMessage+0x33c>)
 800561c:	88db      	ldrh	r3, [r3, #6]
 800561e:	429a      	cmp	r2, r3
 8005620:	d3b1      	bcc.n	8005586 <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 8005622:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005626:	4a40      	ldr	r2, [pc, #256]	; (8005728 <transmitMessage+0x33c>)
 8005628:	7fd2      	ldrb	r2, [r2, #31]
 800562a:	3330      	adds	r3, #48	; 0x30
 800562c:	443b      	add	r3, r7
 800562e:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005632:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005636:	3301      	adds	r3, #1
 8005638:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 800563c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005640:	4a39      	ldr	r2, [pc, #228]	; (8005728 <transmitMessage+0x33c>)
 8005642:	7f92      	ldrb	r2, [r2, #30]
 8005644:	3330      	adds	r3, #48	; 0x30
 8005646:	443b      	add	r3, r7
 8005648:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800564c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005650:	3301      	adds	r3, #1
 8005652:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 8005656:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800565a:	4a33      	ldr	r2, [pc, #204]	; (8005728 <transmitMessage+0x33c>)
 800565c:	7f52      	ldrb	r2, [r2, #29]
 800565e:	3330      	adds	r3, #48	; 0x30
 8005660:	443b      	add	r3, r7
 8005662:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005666:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800566a:	3301      	adds	r3, #1
 800566c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <transmitMessage+0x33c>)
 8005672:	7f1b      	ldrb	r3, [r3, #28]
 8005674:	2b1b      	cmp	r3, #27
 8005676:	d12a      	bne.n	80056ce <transmitMessage+0x2e2>
        message[index] = ESC;
 8005678:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800567c:	3330      	adds	r3, #48	; 0x30
 800567e:	443b      	add	r3, r7
 8005680:	221b      	movs	r2, #27
 8005682:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005686:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800568a:	3301      	adds	r3, #1
 800568c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 8005690:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005694:	4a24      	ldr	r2, [pc, #144]	; (8005728 <transmitMessage+0x33c>)
 8005696:	7f12      	ldrb	r2, [r2, #28]
 8005698:	3330      	adds	r3, #48	; 0x30
 800569a:	443b      	add	r3, r7
 800569c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80056a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056a4:	3301      	adds	r3, #1
 80056a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 80056aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056ae:	3330      	adds	r3, #48	; 0x30
 80056b0:	443b      	add	r3, r7
 80056b2:	2203      	movs	r2, #3
 80056b4:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80056b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056bc:	3301      	adds	r3, #1
 80056be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 80056c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	4b17      	ldr	r3, [pc, #92]	; (8005728 <transmitMessage+0x33c>)
 80056ca:	80da      	strh	r2, [r3, #6]
 80056cc:	e01d      	b.n	800570a <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 80056ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056d2:	4a15      	ldr	r2, [pc, #84]	; (8005728 <transmitMessage+0x33c>)
 80056d4:	7f12      	ldrb	r2, [r2, #28]
 80056d6:	3330      	adds	r3, #48	; 0x30
 80056d8:	443b      	add	r3, r7
 80056da:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80056de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056e2:	3301      	adds	r3, #1
 80056e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 80056e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056ec:	3330      	adds	r3, #48	; 0x30
 80056ee:	443b      	add	r3, r7
 80056f0:	2203      	movs	r2, #3
 80056f2:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80056f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056fa:	3301      	adds	r3, #1
 80056fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8005700:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005704:	b29a      	uxth	r2, r3
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <transmitMessage+0x33c>)
 8005708:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <transmitMessage+0x33c>)
 800570c:	88db      	ldrh	r3, [r3, #6]
 800570e:	b2d9      	uxtb	r1, r3
 8005710:	787a      	ldrb	r2, [r7, #1]
 8005712:	f107 0008 	add.w	r0, r7, #8
 8005716:	230a      	movs	r3, #10
 8005718:	f000 ff38 	bl	800658c <uart_write>
    return 1;
 800571c:	2301      	movs	r3, #1
}
 800571e:	4618      	mov	r0, r3
 8005720:	3730      	adds	r7, #48	; 0x30
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	2000045c 	.word	0x2000045c
 800572c:	20000464 	.word	0x20000464
 8005730:	20000458 	.word	0x20000458

08005734 <calcChecksum>:

static void calcChecksum(void){
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 800573a:	4b24      	ldr	r3, [pc, #144]	; (80057cc <calcChecksum+0x98>)
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	4b23      	ldr	r3, [pc, #140]	; (80057cc <calcChecksum+0x98>)
 8005740:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 8005742:	4b22      	ldr	r3, [pc, #136]	; (80057cc <calcChecksum+0x98>)
 8005744:	7f1a      	ldrb	r2, [r3, #28]
 8005746:	4b21      	ldr	r3, [pc, #132]	; (80057cc <calcChecksum+0x98>)
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	4053      	eors	r3, r2
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <calcChecksum+0x98>)
 8005750:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <calcChecksum+0x98>)
 8005754:	7f1a      	ldrb	r2, [r3, #28]
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <calcChecksum+0x98>)
 8005758:	789b      	ldrb	r3, [r3, #2]
 800575a:	4053      	eors	r3, r2
 800575c:	b2da      	uxtb	r2, r3
 800575e:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <calcChecksum+0x98>)
 8005760:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 8005762:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <calcChecksum+0x98>)
 8005764:	7f1a      	ldrb	r2, [r3, #28]
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <calcChecksum+0x98>)
 8005768:	78db      	ldrb	r3, [r3, #3]
 800576a:	4053      	eors	r3, r2
 800576c:	b2da      	uxtb	r2, r3
 800576e:	4b17      	ldr	r3, [pc, #92]	; (80057cc <calcChecksum+0x98>)
 8005770:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 8005772:	4b16      	ldr	r3, [pc, #88]	; (80057cc <calcChecksum+0x98>)
 8005774:	7f1a      	ldrb	r2, [r3, #28]
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <calcChecksum+0x98>)
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	4053      	eors	r3, r2
 800577c:	b2da      	uxtb	r2, r3
 800577e:	4b13      	ldr	r3, [pc, #76]	; (80057cc <calcChecksum+0x98>)
 8005780:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <calcChecksum+0x98>)
 8005784:	7f1a      	ldrb	r2, [r3, #28]
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <calcChecksum+0x98>)
 8005788:	795b      	ldrb	r3, [r3, #5]
 800578a:	4053      	eors	r3, r2
 800578c:	b2da      	uxtb	r2, r3
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <calcChecksum+0x98>)
 8005790:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	71fb      	strb	r3, [r7, #7]
 8005796:	e00c      	b.n	80057b2 <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <calcChecksum+0x98>)
 800579a:	7f1a      	ldrb	r2, [r3, #28]
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	490b      	ldr	r1, [pc, #44]	; (80057cc <calcChecksum+0x98>)
 80057a0:	440b      	add	r3, r1
 80057a2:	7a1b      	ldrb	r3, [r3, #8]
 80057a4:	4053      	eors	r3, r2
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	4b08      	ldr	r3, [pc, #32]	; (80057cc <calcChecksum+0x98>)
 80057aa:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	3301      	adds	r3, #1
 80057b0:	71fb      	strb	r3, [r7, #7]
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <calcChecksum+0x98>)
 80057b8:	88db      	ldrh	r3, [r3, #6]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3ec      	bcc.n	8005798 <calcChecksum+0x64>
    }
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	2000045c 	.word	0x2000045c

080057d0 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 80057e6:	7b7b      	ldrb	r3, [r7, #13]
 80057e8:	2b0a      	cmp	r3, #10
 80057ea:	d805      	bhi.n	80057f8 <parseMessage+0x28>
        sendNack(device);
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fd5e 	bl	80052b0 <sendNack>
        return 1;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e06d      	b.n	80058d4 <parseMessage+0x104>
    }
    msg.len = len-10;
 80057f8:	7b7b      	ldrb	r3, [r7, #13]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b0a      	subs	r3, #10
 80057fe:	b29a      	uxth	r2, r3
 8005800:	4b36      	ldr	r3, [pc, #216]	; (80058dc <parseMessage+0x10c>)
 8005802:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	785a      	ldrb	r2, [r3, #1]
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <parseMessage+0x10c>)
 800580a:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	789a      	ldrb	r2, [r3, #2]
 8005810:	4b32      	ldr	r3, [pc, #200]	; (80058dc <parseMessage+0x10c>)
 8005812:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	78da      	ldrb	r2, [r3, #3]
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <parseMessage+0x10c>)
 800581a:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 800581c:	4b2f      	ldr	r3, [pc, #188]	; (80058dc <parseMessage+0x10c>)
 800581e:	789a      	ldrb	r2, [r3, #2]
 8005820:	4b2f      	ldr	r3, [pc, #188]	; (80058e0 <parseMessage+0x110>)
 8005822:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	791a      	ldrb	r2, [r3, #4]
 8005828:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <parseMessage+0x10c>)
 800582a:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	795a      	ldrb	r2, [r3, #5]
 8005830:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <parseMessage+0x10c>)
 8005832:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	799a      	ldrb	r2, [r3, #6]
 8005838:	4b28      	ldr	r3, [pc, #160]	; (80058dc <parseMessage+0x10c>)
 800583a:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]
 8005840:	e00d      	b.n	800585e <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	3307      	adds	r3, #7
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	441a      	add	r2, r3
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	7811      	ldrb	r1, [r2, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <parseMessage+0x10c>)
 8005852:	4413      	add	r3, r2
 8005854:	460a      	mov	r2, r1
 8005856:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	3301      	adds	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	b29a      	uxth	r2, r3
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <parseMessage+0x10c>)
 8005864:	88db      	ldrh	r3, [r3, #6]
 8005866:	429a      	cmp	r2, r3
 8005868:	d3eb      	bcc.n	8005842 <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	3307      	adds	r3, #7
 800586e:	461a      	mov	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	4b19      	ldr	r3, [pc, #100]	; (80058dc <parseMessage+0x10c>)
 8005878:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	3308      	adds	r3, #8
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4413      	add	r3, r2
 8005884:	781a      	ldrb	r2, [r3, #0]
 8005886:	4b15      	ldr	r3, [pc, #84]	; (80058dc <parseMessage+0x10c>)
 8005888:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	3309      	adds	r3, #9
 800588e:	461a      	mov	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4413      	add	r3, r2
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <parseMessage+0x10c>)
 8005898:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	330a      	adds	r3, #10
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <parseMessage+0x10c>)
 80058a8:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <parseMessage+0x10c>)
 80058ac:	7f1b      	ldrb	r3, [r3, #28]
 80058ae:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 80058b0:	f7ff ff40 	bl	8005734 <calcChecksum>
    if (chsum != msg.checksum[0]){
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <parseMessage+0x10c>)
 80058b6:	7f1b      	ldrb	r3, [r3, #28]
 80058b8:	7bba      	ldrb	r2, [r7, #14]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d005      	beq.n	80058ca <parseMessage+0xfa>
        sendNack(device);
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fcf5 	bl	80052b0 <sendNack>
        return 1;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e004      	b.n	80058d4 <parseMessage+0x104>
    }
    sendAck(device);
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fd23 	bl	8005318 <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	2000045c 	.word	0x2000045c
 80058e0:	20000458 	.word	0x20000458

080058e4 <handler>:



void handler(UART_select device){
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 80058ee:	4b3c      	ldr	r3, [pc, #240]	; (80059e0 <handler+0xfc>)
 80058f0:	795b      	ldrb	r3, [r3, #5]
 80058f2:	2bc0      	cmp	r3, #192	; 0xc0
 80058f4:	d068      	beq.n	80059c8 <handler+0xe4>
 80058f6:	2bc0      	cmp	r3, #192	; 0xc0
 80058f8:	dc6c      	bgt.n	80059d4 <handler+0xf0>
 80058fa:	2ba0      	cmp	r3, #160	; 0xa0
 80058fc:	d05f      	beq.n	80059be <handler+0xda>
 80058fe:	2ba0      	cmp	r3, #160	; 0xa0
 8005900:	dc68      	bgt.n	80059d4 <handler+0xf0>
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d053      	beq.n	80059ae <handler+0xca>
 8005906:	2b80      	cmp	r3, #128	; 0x80
 8005908:	dc64      	bgt.n	80059d4 <handler+0xf0>
 800590a:	2b65      	cmp	r3, #101	; 0x65
 800590c:	dc34      	bgt.n	8005978 <handler+0x94>
 800590e:	2b50      	cmp	r3, #80	; 0x50
 8005910:	db60      	blt.n	80059d4 <handler+0xf0>
 8005912:	3b50      	subs	r3, #80	; 0x50
 8005914:	2b15      	cmp	r3, #21
 8005916:	d85d      	bhi.n	80059d4 <handler+0xf0>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <handler+0x3c>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	0800597f 	.word	0x0800597f
 8005924:	080059d5 	.word	0x080059d5
 8005928:	080059d5 	.word	0x080059d5
 800592c:	080059d5 	.word	0x080059d5
 8005930:	080059d5 	.word	0x080059d5
 8005934:	080059d5 	.word	0x080059d5
 8005938:	08005987 	.word	0x08005987
 800593c:	080059d5 	.word	0x080059d5
 8005940:	080059d5 	.word	0x080059d5
 8005944:	080059d5 	.word	0x080059d5
 8005948:	080059d5 	.word	0x080059d5
 800594c:	080059d5 	.word	0x080059d5
 8005950:	080059d5 	.word	0x080059d5
 8005954:	080059d5 	.word	0x080059d5
 8005958:	080059d5 	.word	0x080059d5
 800595c:	080059d5 	.word	0x080059d5
 8005960:	080059d5 	.word	0x080059d5
 8005964:	080059d5 	.word	0x080059d5
 8005968:	080059d5 	.word	0x080059d5
 800596c:	080059d5 	.word	0x080059d5
 8005970:	080059d5 	.word	0x080059d5
 8005974:	08005997 	.word	0x08005997
 8005978:	2b78      	cmp	r3, #120	; 0x78
 800597a:	d014      	beq.n	80059a6 <handler+0xc2>
        break;
    case 0xC0:
    	osThreadResume(gyroCalibrationTaskHandle);
    	break;
    default:
        break;
 800597c:	e02a      	b.n	80059d4 <handler+0xf0>
        flag_connected_toIris = 1;
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <handler+0x100>)
 8005980:	2201      	movs	r2, #1
 8005982:	701a      	strb	r2, [r3, #0]
        break;
 8005984:	e027      	b.n	80059d6 <handler+0xf2>
        ublox_transmit_message(msg.cmd, device);
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <handler+0xfc>)
 8005988:	795b      	ldrb	r3, [r3, #5]
 800598a:	79fa      	ldrb	r2, [r7, #7]
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fa68 	bl	8003e64 <ublox_transmit_message>
        break;
 8005994:	e01f      	b.n	80059d6 <handler+0xf2>
        reportFW(msg.cmd, device);
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <handler+0xfc>)
 8005998:	795b      	ldrb	r3, [r3, #5]
 800599a:	79fa      	ldrb	r2, [r7, #7]
 800599c:	4611      	mov	r1, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f850 	bl	8005a44 <reportFW>
        break;
 80059a4:	e017      	b.n	80059d6 <handler+0xf2>
    	powerManageCfgSet(0x78);
 80059a6:	2078      	movs	r0, #120	; 0x78
 80059a8:	f7fe fd02 	bl	80043b0 <powerManageCfgSet>
        break;
 80059ac:	e013      	b.n	80059d6 <handler+0xf2>
        ublox_transmit_rtc(msg.cmd, device);
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <handler+0xfc>)
 80059b0:	795b      	ldrb	r3, [r3, #5]
 80059b2:	79fa      	ldrb	r2, [r7, #7]
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fa40 	bl	8003e3c <ublox_transmit_rtc>
        break;
 80059bc:	e00b      	b.n	80059d6 <handler+0xf2>
        HAL_Delay(500);
 80059be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059c2:	f000 ff97 	bl	80068f4 <HAL_Delay>
        break;
 80059c6:	e006      	b.n	80059d6 <handler+0xf2>
    	osThreadResume(gyroCalibrationTaskHandle);
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <handler+0x104>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f007 f801 	bl	800c9d4 <osThreadResume>
    	break;
 80059d2:	e000      	b.n	80059d6 <handler+0xf2>
        break;
 80059d4:	bf00      	nop
    }
}
 80059d6:	bf00      	nop
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	2000045c 	.word	0x2000045c
 80059e4:	20000459 	.word	0x20000459
 80059e8:	2000043c 	.word	0x2000043c

080059ec <init_message_t>:

void init_message_t(void){
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <init_message_t+0x50>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <init_message_t+0x50>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <init_message_t+0x50>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <init_message_t+0x50>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <init_message_t+0x50>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <init_message_t+0x50>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 8005a14:	2214      	movs	r2, #20
 8005a16:	2100      	movs	r1, #0
 8005a18:	4809      	ldr	r0, [pc, #36]	; (8005a40 <init_message_t+0x54>)
 8005a1a:	f00b fd56 	bl	80114ca <memset>
    msg.checksum[0] = 0;
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <init_message_t+0x50>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <init_message_t+0x50>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <init_message_t+0x50>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 8005a30:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <init_message_t+0x50>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	77da      	strb	r2, [r3, #31]
}
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	2000045c 	.word	0x2000045c
 8005a40:	20000464 	.word	0x20000464

08005a44 <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	71fb      	strb	r3, [r7, #7]
 8005a50:	4613      	mov	r3, r2
 8005a52:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 8005a54:	236e      	movs	r3, #110	; 0x6e
 8005a56:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 8005a58:	79bb      	ldrb	r3, [r7, #6]
 8005a5a:	79fa      	ldrb	r2, [r7, #7]
 8005a5c:	f107 000c 	add.w	r0, r7, #12
 8005a60:	2101      	movs	r1, #1
 8005a62:	f7ff fcc3 	bl	80053ec <transmitMessage>
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f00b fd22 	bl	80114ca <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <RB_init+0x22>
    return 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e00a      	b.n	8005aa6 <RB_init+0x38>
  }
  rb->rdpos = 0;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 8005aa4:	2301      	movs	r3, #1
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	3301      	adds	r3, #1
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005ac6:	fb93 f1f2 	sdiv	r1, r3, r2
 8005aca:	fb01 f202 	mul.w	r2, r1, r2
 8005ace:	1a9a      	subs	r2, r3, r2
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d012      	beq.n	8005afe <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	78f9      	ldrb	r1, [r7, #3]
 8005ae0:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005aee:	fb93 f1f2 	sdiv	r1, r3, r2
 8005af2:	fb01 f202 	mul.w	r2, r1, r2
 8005af6:	1a9a      	subs	r2, r3, r2
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c
 8005afc:	e000      	b.n	8005b00 <RB_push+0x52>
    return;
 8005afe:	bf00      	nop
}
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d101      	bne.n	8005b22 <RB_pop+0x18>
 8005b1e:	23ff      	movs	r3, #255	; 0xff
 8005b20:	e012      	b.n	8005b48 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	5cd3      	ldrb	r3, [r2, r3]
 8005b2a:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	3301      	adds	r3, #1
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005b38:	fb93 f1f2 	sdiv	r1, r3, r2
 8005b3c:	fb01 f202 	mul.w	r2, r1, r2
 8005b40:	1a9a      	subs	r2, r3, r2
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dc05      	bgt.n	8005b74 <RB_pushFront+0x20>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e004      	b.n	8005b7e <RB_pushFront+0x2a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 8005b80:	7bfa      	ldrb	r2, [r7, #15]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d008      	beq.n	8005b9c <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 8005b8a:	7bfa      	ldrb	r2, [r7, #15]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	78f9      	ldrb	r1, [r7, #3]
 8005b98:	54d1      	strb	r1, [r2, r3]
 8005b9a:	e000      	b.n	8005b9e <RB_pushFront+0x4a>
    return;
 8005b9c:	bf00      	nop
}
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005bba:	441a      	add	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005bc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8005bcc:	fb01 f202 	mul.w	r2, r1, r2
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	b2db      	uxtb	r3, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2228      	movs	r2, #40	; 0x28
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f00b fc6b 	bl	80114ca <memset>
  rb->rdpos = 0;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0e:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <HAL_MspInit+0x4c>)
 8005c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c12:	4a10      	ldr	r2, [pc, #64]	; (8005c54 <HAL_MspInit+0x4c>)
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	6613      	str	r3, [r2, #96]	; 0x60
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <HAL_MspInit+0x4c>)
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_MspInit+0x4c>)
 8005c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <HAL_MspInit+0x4c>)
 8005c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6593      	str	r3, [r2, #88]	; 0x58
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_MspInit+0x4c>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	210f      	movs	r1, #15
 8005c42:	f06f 0001 	mvn.w	r0, #1
 8005c46:	f000 ff31 	bl	8006aac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40021000 	.word	0x40021000

08005c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b0b0      	sub	sp, #192	; 0xc0
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c70:	f107 0318 	add.w	r3, r7, #24
 8005c74:	2294      	movs	r2, #148	; 0x94
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f00b fc26 	bl	80114ca <memset>
  if(hi2c->Instance==I2C2)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a4a      	ldr	r2, [pc, #296]	; (8005dac <HAL_I2C_MspInit+0x154>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d144      	bne.n	8005d12 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c90:	f107 0318 	add.w	r3, r7, #24
 8005c94:	4618      	mov	r0, r3
 8005c96:	f003 fcdd 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005ca0:	f7ff fae0 	bl	8005264 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ca4:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca8:	4a41      	ldr	r2, [pc, #260]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8005cbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cc4:	2312      	movs	r3, #18
 8005cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cdc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4834      	ldr	r0, [pc, #208]	; (8005db4 <HAL_I2C_MspInit+0x15c>)
 8005ce4:	f001 fa88 	bl	80071f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005ce8:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	4a30      	ldr	r2, [pc, #192]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005d00:	2200      	movs	r2, #0
 8005d02:	2105      	movs	r1, #5
 8005d04:	2021      	movs	r0, #33	; 0x21
 8005d06:	f000 fed1 	bl	8006aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005d0a:	2021      	movs	r0, #33	; 0x21
 8005d0c:	f000 feea 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005d10:	e048      	b.n	8005da4 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a28      	ldr	r2, [pc, #160]	; (8005db8 <HAL_I2C_MspInit+0x160>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d143      	bne.n	8005da4 <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005d1c:	2340      	movs	r3, #64	; 0x40
 8005d1e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005d20:	2300      	movs	r3, #0
 8005d22:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d24:	f107 0318 	add.w	r3, r7, #24
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f003 fc93 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 8005d34:	f7ff fa96 	bl	8005264 <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8005d50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d58:	2312      	movs	r3, #18
 8005d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d64:	2303      	movs	r3, #3
 8005d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d74:	4619      	mov	r1, r3
 8005d76:	480f      	ldr	r0, [pc, #60]	; (8005db4 <HAL_I2C_MspInit+0x15c>)
 8005d78:	f001 fa3e 	bl	80071f8 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	4a0b      	ldr	r2, [pc, #44]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d86:	6593      	str	r3, [r2, #88]	; 0x58
 8005d88:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <HAL_I2C_MspInit+0x158>)
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005d94:	2200      	movs	r2, #0
 8005d96:	2105      	movs	r1, #5
 8005d98:	201f      	movs	r0, #31
 8005d9a:	f000 fe87 	bl	8006aac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005d9e:	201f      	movs	r0, #31
 8005da0:	f000 fea0 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
}
 8005da4:	bf00      	nop
 8005da6:	37c0      	adds	r7, #192	; 0xc0
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40005800 	.word	0x40005800
 8005db0:	40021000 	.word	0x40021000
 8005db4:	48000400 	.word	0x48000400
 8005db8:	40005400 	.word	0x40005400

08005dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b0b4      	sub	sp, #208	; 0xd0
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd8:	2294      	movs	r2, #148	; 0x94
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f00b fb74 	bl	80114ca <memset>
  if(huart->Instance==UART4)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a8b      	ldr	r2, [pc, #556]	; (8006014 <HAL_UART_MspInit+0x258>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d144      	bne.n	8005e76 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005dec:	2308      	movs	r3, #8
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005df0:	2300      	movs	r3, #0
 8005df2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f003 fc2b 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005e04:	f7ff fa2e 	bl	8005264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005e08:	4b83      	ldr	r3, [pc, #524]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	4a82      	ldr	r2, [pc, #520]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005e0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e12:	6593      	str	r3, [r2, #88]	; 0x58
 8005e14:	4b80      	ldr	r3, [pc, #512]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e20:	4b7d      	ldr	r3, [pc, #500]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e24:	4a7c      	ldr	r2, [pc, #496]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e2c:	4b7a      	ldr	r3, [pc, #488]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005e50:	2308      	movs	r3, #8
 8005e52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e56:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e60:	f001 f9ca 	bl	80071f8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005e64:	2200      	movs	r2, #0
 8005e66:	2105      	movs	r1, #5
 8005e68:	2034      	movs	r0, #52	; 0x34
 8005e6a:	f000 fe1f 	bl	8006aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005e6e:	2034      	movs	r0, #52	; 0x34
 8005e70:	f000 fe38 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005e74:	e0ca      	b.n	800600c <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a68      	ldr	r2, [pc, #416]	; (800601c <HAL_UART_MspInit+0x260>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d143      	bne.n	8005f08 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005e80:	2301      	movs	r3, #1
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005e84:	2300      	movs	r3, #0
 8005e86:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f003 fbe1 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005e98:	f7ff f9e4 	bl	8005264 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e9c:	4b5e      	ldr	r3, [pc, #376]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea0:	4a5d      	ldr	r2, [pc, #372]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ea6:	6613      	str	r3, [r2, #96]	; 0x60
 8005ea8:	4b5b      	ldr	r3, [pc, #364]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb4:	4b58      	ldr	r3, [pc, #352]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb8:	4a57      	ldr	r2, [pc, #348]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005eba:	f043 0302 	orr.w	r3, r3, #2
 8005ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ec0:	4b55      	ldr	r3, [pc, #340]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8005ecc:	23c0      	movs	r3, #192	; 0xc0
 8005ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ee4:	2307      	movs	r3, #7
 8005ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005eee:	4619      	mov	r1, r3
 8005ef0:	484b      	ldr	r0, [pc, #300]	; (8006020 <HAL_UART_MspInit+0x264>)
 8005ef2:	f001 f981 	bl	80071f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2105      	movs	r1, #5
 8005efa:	2025      	movs	r0, #37	; 0x25
 8005efc:	f000 fdd6 	bl	8006aac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f00:	2025      	movs	r0, #37	; 0x25
 8005f02:	f000 fdef 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
}
 8005f06:	e081      	b.n	800600c <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a45      	ldr	r2, [pc, #276]	; (8006024 <HAL_UART_MspInit+0x268>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d13b      	bne.n	8005f8a <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005f12:	2302      	movs	r3, #2
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005f16:	2300      	movs	r3, #0
 8005f18:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f003 fb98 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8005f2a:	f7ff f99b 	bl	8005264 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	4a39      	ldr	r2, [pc, #228]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f38:	6593      	str	r3, [r2, #88]	; 0x58
 8005f3a:	4b37      	ldr	r3, [pc, #220]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f46:	4b34      	ldr	r3, [pc, #208]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	4a33      	ldr	r2, [pc, #204]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005f4c:	f043 0308 	orr.w	r3, r3, #8
 8005f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f52:	4b31      	ldr	r3, [pc, #196]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8005f5e:	2378      	movs	r3, #120	; 0x78
 8005f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f64:	2302      	movs	r3, #2
 8005f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f70:	2303      	movs	r3, #3
 8005f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f76:	2307      	movs	r3, #7
 8005f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f80:	4619      	mov	r1, r3
 8005f82:	4829      	ldr	r0, [pc, #164]	; (8006028 <HAL_UART_MspInit+0x26c>)
 8005f84:	f001 f938 	bl	80071f8 <HAL_GPIO_Init>
}
 8005f88:	e040      	b.n	800600c <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a27      	ldr	r2, [pc, #156]	; (800602c <HAL_UART_MspInit+0x270>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d13b      	bne.n	800600c <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f94:	2304      	movs	r3, #4
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f003 fb57 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8005fac:	f7ff f95a 	bl	8005264 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fb0:	4b19      	ldr	r3, [pc, #100]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	4a18      	ldr	r2, [pc, #96]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005fb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fba:	6593      	str	r3, [r2, #88]	; 0x58
 8005fbc:	4b16      	ldr	r3, [pc, #88]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fc8:	4b13      	ldr	r3, [pc, #76]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fcc:	4a12      	ldr	r2, [pc, #72]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005fce:	f043 0308 	orr.w	r3, r3, #8
 8005fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <HAL_UART_MspInit+0x25c>)
 8005fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	60bb      	str	r3, [r7, #8]
 8005fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ffa:	2307      	movs	r3, #7
 8005ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006000:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006004:	4619      	mov	r1, r3
 8006006:	4808      	ldr	r0, [pc, #32]	; (8006028 <HAL_UART_MspInit+0x26c>)
 8006008:	f001 f8f6 	bl	80071f8 <HAL_GPIO_Init>
}
 800600c:	bf00      	nop
 800600e:	37d0      	adds	r7, #208	; 0xd0
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40004c00 	.word	0x40004c00
 8006018:	40021000 	.word	0x40021000
 800601c:	40013800 	.word	0x40013800
 8006020:	48000400 	.word	0x48000400
 8006024:	40004400 	.word	0x40004400
 8006028:	48000c00 	.word	0x48000c00
 800602c:	40004800 	.word	0x40004800

08006030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	; 0x30
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800603e:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <HAL_InitTick+0xc8>)
 8006040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006042:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_InitTick+0xc8>)
 8006044:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006048:	6613      	str	r3, [r2, #96]	; 0x60
 800604a:	4b2b      	ldr	r3, [pc, #172]	; (80060f8 <HAL_InitTick+0xc8>)
 800604c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006056:	f107 020c 	add.w	r2, r7, #12
 800605a:	f107 0310 	add.w	r3, r7, #16
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f003 fa05 	bl	8009470 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006066:	f003 f9ed 	bl	8009444 <HAL_RCC_GetPCLK2Freq>
 800606a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	4a23      	ldr	r2, [pc, #140]	; (80060fc <HAL_InitTick+0xcc>)
 8006070:	fba2 2303 	umull	r2, r3, r2, r3
 8006074:	0c9b      	lsrs	r3, r3, #18
 8006076:	3b01      	subs	r3, #1
 8006078:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800607a:	4b21      	ldr	r3, [pc, #132]	; (8006100 <HAL_InitTick+0xd0>)
 800607c:	4a21      	ldr	r2, [pc, #132]	; (8006104 <HAL_InitTick+0xd4>)
 800607e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <HAL_InitTick+0xd0>)
 8006082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006086:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006088:	4a1d      	ldr	r2, [pc, #116]	; (8006100 <HAL_InitTick+0xd0>)
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <HAL_InitTick+0xd0>)
 8006090:	2200      	movs	r2, #0
 8006092:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006094:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <HAL_InitTick+0xd0>)
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800609a:	4b19      	ldr	r3, [pc, #100]	; (8006100 <HAL_InitTick+0xd0>)
 800609c:	2200      	movs	r2, #0
 800609e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80060a0:	4817      	ldr	r0, [pc, #92]	; (8006100 <HAL_InitTick+0xd0>)
 80060a2:	f003 ffef 	bl	800a084 <HAL_TIM_Base_Init>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80060ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d11b      	bne.n	80060ec <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80060b4:	4812      	ldr	r0, [pc, #72]	; (8006100 <HAL_InitTick+0xd0>)
 80060b6:	f004 f847 	bl	800a148 <HAL_TIM_Base_Start_IT>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80060c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d111      	bne.n	80060ec <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80060c8:	2019      	movs	r0, #25
 80060ca:	f000 fd0b 	bl	8006ae4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b0f      	cmp	r3, #15
 80060d2:	d808      	bhi.n	80060e6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80060d4:	2200      	movs	r2, #0
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	2019      	movs	r0, #25
 80060da:	f000 fce7 	bl	8006aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <HAL_InitTick+0xd8>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	e002      	b.n	80060ec <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80060ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3730      	adds	r7, #48	; 0x30
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000
 80060fc:	431bde83 	.word	0x431bde83
 8006100:	2000047c 	.word	0x2000047c
 8006104:	40012c00 	.word	0x40012c00
 8006108:	20000040 	.word	0x20000040

0800610c <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006110:	e7fe      	b.n	8006110 <NMI_Handler+0x4>

08006112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006112:	b480      	push	{r7}
 8006114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006116:	e7fe      	b.n	8006116 <HardFault_Handler+0x4>

08006118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800611c:	e7fe      	b.n	800611c <MemManage_Handler+0x4>

0800611e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800611e:	b480      	push	{r7}
 8006120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006122:	e7fe      	b.n	8006122 <BusFault_Handler+0x4>

08006124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006128:	e7fe      	b.n	8006128 <UsageFault_Handler+0x4>

0800612a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800612a:	b480      	push	{r7}
 800612c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800613c:	2020      	movs	r0, #32
 800613e:	f001 fa1f 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8006142:	2040      	movs	r0, #64	; 0x40
 8006144:	f001 fa1c 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8006148:	2080      	movs	r0, #128	; 0x80
 800614a:	f001 fa19 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800614e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006152:	f001 fa15 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006160:	4802      	ldr	r0, [pc, #8]	; (800616c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8006162:	f004 f861 	bl	800a228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	2000047c 	.word	0x2000047c

08006170 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006174:	4802      	ldr	r0, [pc, #8]	; (8006180 <I2C1_EV_IRQHandler+0x10>)
 8006176:	f001 fecd 	bl	8007f14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200002f0 	.word	0x200002f0

08006184 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006188:	4802      	ldr	r0, [pc, #8]	; (8006194 <I2C2_EV_IRQHandler+0x10>)
 800618a:	f001 fec3 	bl	8007f14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800618e:	bf00      	nop
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200003bc 	.word	0x200003bc

08006198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800619c:	4802      	ldr	r0, [pc, #8]	; (80061a8 <USART1_IRQHandler+0x10>)
 800619e:	f004 fb81 	bl	800a8a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200004cc 	.word	0x200004cc

080061ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80061b0:	4802      	ldr	r0, [pc, #8]	; (80061bc <UART4_IRQHandler+0x10>)
 80061b2:	f004 fb77 	bl	800a8a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2000055c 	.word	0x2000055c

080061c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80061c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80061c8:	f001 f9da 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80061cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80061d0:	f001 f9d6 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80061d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80061d8:	f001 f9d2 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80061dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80061e0:	f001 f9ce 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80061e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80061e8:	f001 f9ca 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80061ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80061f0:	f001 f9c6 	bl	8007580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  return 1;
 80061fc:	2301      	movs	r3, #1
}
 80061fe:	4618      	mov	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <_kill>:

int _kill(int pid, int sig)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006212:	f00b f9bd 	bl	8011590 <__errno>
 8006216:	4603      	mov	r3, r0
 8006218:	2216      	movs	r2, #22
 800621a:	601a      	str	r2, [r3, #0]
  return -1;
 800621c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <_exit>:

void _exit (int status)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006230:	f04f 31ff 	mov.w	r1, #4294967295
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ffe7 	bl	8006208 <_kill>
  while (1) {}    /* Make sure we hang here */
 800623a:	e7fe      	b.n	800623a <_exit+0x12>

0800623c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e00a      	b.n	8006264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800624e:	f3af 8000 	nop.w
 8006252:	4601      	mov	r1, r0
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	60ba      	str	r2, [r7, #8]
 800625a:	b2ca      	uxtb	r2, r1
 800625c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	3301      	adds	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	dbf0      	blt.n	800624e <_read+0x12>
  }

  return len;
 800626c:	687b      	ldr	r3, [r7, #4]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b086      	sub	sp, #24
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	e009      	b.n	800629c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	60ba      	str	r2, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	3301      	adds	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	dbf1      	blt.n	8006288 <_write+0x12>
  }
  return len;
 80062a4:	687b      	ldr	r3, [r7, #4]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <_close>:

int _close(int file)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062d6:	605a      	str	r2, [r3, #4]
  return 0;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <_isatty>:

int _isatty(int file)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80062ee:	2301      	movs	r3, #1
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <_sbrk+0x5c>)
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <_sbrk+0x60>)
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800632c:	4b13      	ldr	r3, [pc, #76]	; (800637c <_sbrk+0x64>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <_sbrk+0x64>)
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <_sbrk+0x68>)
 8006338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <_sbrk+0x64>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	429a      	cmp	r2, r3
 8006346:	d207      	bcs.n	8006358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006348:	f00b f922 	bl	8011590 <__errno>
 800634c:	4603      	mov	r3, r0
 800634e:	220c      	movs	r2, #12
 8006350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	e009      	b.n	800636c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006358:	4b08      	ldr	r3, [pc, #32]	; (800637c <_sbrk+0x64>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <_sbrk+0x64>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	4a05      	ldr	r2, [pc, #20]	; (800637c <_sbrk+0x64>)
 8006368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800636a:	68fb      	ldr	r3, [r7, #12]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	200a0000 	.word	0x200a0000
 8006378:	00000400 	.word	0x00000400
 800637c:	200004c8 	.word	0x200004c8
 8006380:	200064f8 	.word	0x200064f8

08006384 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <SystemInit+0x20>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638e:	4a05      	ldr	r2, [pc, #20]	; (80063a4 <SystemInit+0x20>)
 8006390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006398:	bf00      	nop
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	e000ed00 	.word	0xe000ed00

080063a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80063ac:	4b24      	ldr	r3, [pc, #144]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063ae:	4a25      	ldr	r2, [pc, #148]	; (8006444 <MX_USART1_UART_Init+0x9c>)
 80063b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80063b2:	4b23      	ldr	r3, [pc, #140]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80063b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80063ba:	4b21      	ldr	r3, [pc, #132]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063bc:	2200      	movs	r2, #0
 80063be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80063c0:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80063c6:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80063cc:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063ce:	220c      	movs	r2, #12
 80063d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063d2:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80063d8:	4b19      	ldr	r3, [pc, #100]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063da:	2200      	movs	r2, #0
 80063dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063de:	4b18      	ldr	r3, [pc, #96]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80063f0:	4813      	ldr	r0, [pc, #76]	; (8006440 <MX_USART1_UART_Init+0x98>)
 80063f2:	f004 f919 	bl	800a628 <HAL_UART_Init>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80063fc:	f7fe ff32 	bl	8005264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006400:	2100      	movs	r1, #0
 8006402:	480f      	ldr	r0, [pc, #60]	; (8006440 <MX_USART1_UART_Init+0x98>)
 8006404:	f006 f8c5 	bl	800c592 <HAL_UARTEx_SetTxFifoThreshold>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800640e:	f7fe ff29 	bl	8005264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006412:	2100      	movs	r1, #0
 8006414:	480a      	ldr	r0, [pc, #40]	; (8006440 <MX_USART1_UART_Init+0x98>)
 8006416:	f006 f8fa 	bl	800c60e <HAL_UARTEx_SetRxFifoThreshold>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006420:	f7fe ff20 	bl	8005264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006424:	4806      	ldr	r0, [pc, #24]	; (8006440 <MX_USART1_UART_Init+0x98>)
 8006426:	f006 f87b 	bl	800c520 <HAL_UARTEx_DisableFifoMode>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006430:	f7fe ff18 	bl	8005264 <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 8006434:	2128      	movs	r1, #40	; 0x28
 8006436:	4804      	ldr	r0, [pc, #16]	; (8006448 <MX_USART1_UART_Init+0xa0>)
 8006438:	f7ff fb19 	bl	8005a6e <RB_init>

}
 800643c:	bf00      	nop
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200004cc 	.word	0x200004cc
 8006444:	40013800 	.word	0x40013800
 8006448:	20000620 	.word	0x20000620

0800644c <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8006450:	4b26      	ldr	r3, [pc, #152]	; (80064ec <MX_UART4_Init+0xa0>)
 8006452:	4a27      	ldr	r2, [pc, #156]	; (80064f0 <MX_UART4_Init+0xa4>)
 8006454:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8006456:	4b25      	ldr	r3, [pc, #148]	; (80064ec <MX_UART4_Init+0xa0>)
 8006458:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800645c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800645e:	4b23      	ldr	r3, [pc, #140]	; (80064ec <MX_UART4_Init+0xa0>)
 8006460:	2200      	movs	r2, #0
 8006462:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006464:	4b21      	ldr	r3, [pc, #132]	; (80064ec <MX_UART4_Init+0xa0>)
 8006466:	2200      	movs	r2, #0
 8006468:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800646a:	4b20      	ldr	r3, [pc, #128]	; (80064ec <MX_UART4_Init+0xa0>)
 800646c:	2200      	movs	r2, #0
 800646e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006470:	4b1e      	ldr	r3, [pc, #120]	; (80064ec <MX_UART4_Init+0xa0>)
 8006472:	220c      	movs	r2, #12
 8006474:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006476:	4b1d      	ldr	r3, [pc, #116]	; (80064ec <MX_UART4_Init+0xa0>)
 8006478:	2200      	movs	r2, #0
 800647a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <MX_UART4_Init+0xa0>)
 800647e:	2200      	movs	r2, #0
 8006480:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <MX_UART4_Init+0xa0>)
 8006484:	2200      	movs	r2, #0
 8006486:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006488:	4b18      	ldr	r3, [pc, #96]	; (80064ec <MX_UART4_Init+0xa0>)
 800648a:	2200      	movs	r2, #0
 800648c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800648e:	4b17      	ldr	r3, [pc, #92]	; (80064ec <MX_UART4_Init+0xa0>)
 8006490:	2200      	movs	r2, #0
 8006492:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006494:	4815      	ldr	r0, [pc, #84]	; (80064ec <MX_UART4_Init+0xa0>)
 8006496:	f004 f8c7 	bl	800a628 <HAL_UART_Init>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <MX_UART4_Init+0x58>
  {
    error_Handler();
 80064a0:	f000 f82c 	bl	80064fc <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064a4:	2100      	movs	r1, #0
 80064a6:	4811      	ldr	r0, [pc, #68]	; (80064ec <MX_UART4_Init+0xa0>)
 80064a8:	f006 f873 	bl	800c592 <HAL_UARTEx_SetTxFifoThreshold>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <MX_UART4_Init+0x6a>
  {
    error_Handler();
 80064b2:	f000 f823 	bl	80064fc <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064b6:	2100      	movs	r1, #0
 80064b8:	480c      	ldr	r0, [pc, #48]	; (80064ec <MX_UART4_Init+0xa0>)
 80064ba:	f006 f8a8 	bl	800c60e <HAL_UARTEx_SetRxFifoThreshold>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 80064c4:	f000 f81a 	bl	80064fc <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80064c8:	4808      	ldr	r0, [pc, #32]	; (80064ec <MX_UART4_Init+0xa0>)
 80064ca:	f006 f829 	bl	800c520 <HAL_UARTEx_DisableFifoMode>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 80064d4:	f000 f812 	bl	80064fc <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 80064d8:	2128      	movs	r1, #40	; 0x28
 80064da:	4806      	ldr	r0, [pc, #24]	; (80064f4 <MX_UART4_Init+0xa8>)
 80064dc:	f7ff fac7 	bl	8005a6e <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 80064e0:	210a      	movs	r1, #10
 80064e2:	4805      	ldr	r0, [pc, #20]	; (80064f8 <MX_UART4_Init+0xac>)
 80064e4:	f000 f83c 	bl	8006560 <uart_write_debug>

}
 80064e8:	bf00      	nop
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000055c 	.word	0x2000055c
 80064f0:	40004c00 	.word	0x40004c00
 80064f4:	200005ec 	.word	0x200005ec
 80064f8:	08014ef4 	.word	0x08014ef4

080064fc <error_Handler>:

void error_Handler(void){
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 8006500:	210a      	movs	r1, #10
 8006502:	4802      	ldr	r0, [pc, #8]	; (800650c <error_Handler+0x10>)
 8006504:	f000 f82c 	bl	8006560 <uart_write_debug>
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}
 800650c:	08014f08 	.word	0x08014f08

08006510 <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d00c      	beq.n	800653a <uart_receive_it+0x2a>
 8006520:	2b02      	cmp	r3, #2
 8006522:	dc0d      	bgt.n	8006540 <uart_receive_it+0x30>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <uart_receive_it+0x1e>
 8006528:	2b01      	cmp	r3, #1
 800652a:	d003      	beq.n	8006534 <uart_receive_it+0x24>
 800652c:	e008      	b.n	8006540 <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <uart_receive_it+0x44>)
 8006530:	60fb      	str	r3, [r7, #12]
		break;
 8006532:	e005      	b.n	8006540 <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <uart_receive_it+0x48>)
 8006536:	60fb      	str	r3, [r7, #12]
		break;
 8006538:	e002      	b.n	8006540 <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <uart_receive_it+0x44>)
 800653c:	60fb      	str	r3, [r7, #12]
		break;
 800653e:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 8006540:	2201      	movs	r2, #1
 8006542:	4906      	ldr	r1, [pc, #24]	; (800655c <uart_receive_it+0x4c>)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f004 f957 	bl	800a7f8 <HAL_UART_Receive_IT>
 800654a:	4603      	mov	r3, r0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	200004cc 	.word	0x200004cc
 8006558:	2000055c 	.word	0x2000055c
 800655c:	20000654 	.word	0x20000654

08006560 <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7f9 fe98 	bl	80002a0 <strlen>
 8006570:	4603      	mov	r3, r0
 8006572:	b29a      	uxth	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4803      	ldr	r0, [pc, #12]	; (8006588 <uart_write_debug+0x28>)
 800657a:	f004 f8a5 	bl	800a6c8 <HAL_UART_Transmit>
 800657e:	4603      	mov	r3, r0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	200004cc 	.word	0x200004cc

0800658c <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	72fb      	strb	r3, [r7, #11]
 800659a:	4613      	mov	r3, r2
 800659c:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 800659e:	7abb      	ldrb	r3, [r7, #10]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d00c      	beq.n	80065be <uart_write+0x32>
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	dc0d      	bgt.n	80065c4 <uart_write+0x38>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <uart_write+0x26>
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d003      	beq.n	80065b8 <uart_write+0x2c>
 80065b0:	e008      	b.n	80065c4 <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 80065b2:	4b12      	ldr	r3, [pc, #72]	; (80065fc <uart_write+0x70>)
 80065b4:	617b      	str	r3, [r7, #20]
		break;
 80065b6:	e005      	b.n	80065c4 <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 80065b8:	4b11      	ldr	r3, [pc, #68]	; (8006600 <uart_write+0x74>)
 80065ba:	617b      	str	r3, [r7, #20]
		break;
 80065bc:	e002      	b.n	80065c4 <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <uart_write+0x70>)
 80065c0:	617b      	str	r3, [r7, #20]
		break;
 80065c2:	bf00      	nop
	}
	if (len == 0){
 80065c4:	7afb      	ldrb	r3, [r7, #11]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7f9 fe68 	bl	80002a0 <strlen>
 80065d0:	4603      	mov	r3, r0
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6978      	ldr	r0, [r7, #20]
 80065da:	f004 f875 	bl	800a6c8 <HAL_UART_Transmit>
 80065de:	4603      	mov	r3, r0
 80065e0:	e007      	b.n	80065f2 <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 80065e2:	7afb      	ldrb	r3, [r7, #11]
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68f9      	ldr	r1, [r7, #12]
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	f004 f86c 	bl	800a6c8 <HAL_UART_Transmit>
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200004cc 	.word	0x200004cc
 8006600:	2000055c 	.word	0x2000055c

08006604 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a7c      	ldr	r2, [pc, #496]	; (8006804 <HAL_UART_RxCpltCallback+0x200>)
 8006612:	4293      	cmp	r3, r2
 8006614:	f040 80a2 	bne.w	800675c <HAL_UART_RxCpltCallback+0x158>
	{
		if (ack_rcv_flag == 1){
 8006618:	4b7b      	ldr	r3, [pc, #492]	; (8006808 <HAL_UART_RxCpltCallback+0x204>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d129      	bne.n	8006674 <HAL_UART_RxCpltCallback+0x70>
			if ((rxChar != ESC) && (prvRxChar == ACK)){
 8006620:	4b7a      	ldr	r3, [pc, #488]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b1b      	cmp	r3, #27
 8006626:	d010      	beq.n	800664a <HAL_UART_RxCpltCallback+0x46>
 8006628:	4b79      	ldr	r3, [pc, #484]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b06      	cmp	r3, #6
 800662e:	d10c      	bne.n	800664a <HAL_UART_RxCpltCallback+0x46>
				osEventFlagsSet(ack_rcvd, ACK_FLAG);
 8006630:	4b78      	ldr	r3, [pc, #480]	; (8006814 <HAL_UART_RxCpltCallback+0x210>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2101      	movs	r1, #1
 8006636:	4618      	mov	r0, r3
 8006638:	f006 fa48 	bl	800cacc <osEventFlagsSet>
				prvRxChar = 0x00;
 800663c:	4b74      	ldr	r3, [pc, #464]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 8006642:	4b71      	ldr	r3, [pc, #452]	; (8006808 <HAL_UART_RxCpltCallback+0x204>)
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e082      	b.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar != ESC) && (prvRxChar == NACK)){
 800664a:	4b70      	ldr	r3, [pc, #448]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b1b      	cmp	r3, #27
 8006650:	d07e      	beq.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
 8006652:	4b6f      	ldr	r3, [pc, #444]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b15      	cmp	r3, #21
 8006658:	d17a      	bne.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
				osEventFlagsSet(ack_rcvd, NACK_FLAG);
 800665a:	4b6e      	ldr	r3, [pc, #440]	; (8006814 <HAL_UART_RxCpltCallback+0x210>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2100      	movs	r1, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f006 fa33 	bl	800cacc <osEventFlagsSet>
				prvRxChar = 0x00;
 8006666:	4b6a      	ldr	r3, [pc, #424]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 800666c:	4b66      	ldr	r3, [pc, #408]	; (8006808 <HAL_UART_RxCpltCallback+0x204>)
 800666e:	2200      	movs	r2, #0
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	e06d      	b.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
			}
		}
		else{
			if (((rxChar == ACK) || (rxChar == NACK)) && (prvRxChar == 0xFF)){
 8006674:	4b65      	ldr	r3, [pc, #404]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b06      	cmp	r3, #6
 800667a:	d003      	beq.n	8006684 <HAL_UART_RxCpltCallback+0x80>
 800667c:	4b63      	ldr	r3, [pc, #396]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b15      	cmp	r3, #21
 8006682:	d10b      	bne.n	800669c <HAL_UART_RxCpltCallback+0x98>
 8006684:	4b62      	ldr	r3, [pc, #392]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2bff      	cmp	r3, #255	; 0xff
 800668a:	d107      	bne.n	800669c <HAL_UART_RxCpltCallback+0x98>
				ack_rcv_flag = 1;
 800668c:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <HAL_UART_RxCpltCallback+0x204>)
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
				prvRxChar = rxChar;
 8006692:	4b5e      	ldr	r3, [pc, #376]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	4b5e      	ldr	r3, [pc, #376]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e059      	b.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 800669c:	4b5b      	ldr	r3, [pc, #364]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d125      	bne.n	80066f0 <HAL_UART_RxCpltCallback+0xec>
 80066a4:	4b5a      	ldr	r3, [pc, #360]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b1b      	cmp	r3, #27
 80066aa:	d021      	beq.n	80066f0 <HAL_UART_RxCpltCallback+0xec>
				uint8_t start_ch = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73bb      	strb	r3, [r7, #14]
				start_ch = RB_pop(&uart4RXrb);
 80066b0:	4859      	ldr	r0, [pc, #356]	; (8006818 <HAL_UART_RxCpltCallback+0x214>)
 80066b2:	f7ff fa2a 	bl	8005b0a <RB_pop>
 80066b6:	4603      	mov	r3, r0
 80066b8:	73bb      	strb	r3, [r7, #14]
				if (start_ch == STX){
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d113      	bne.n	80066e8 <HAL_UART_RxCpltCallback+0xe4>
					uint8_t rb_len = RB_size(&uart4RXrb);
 80066c0:	4855      	ldr	r0, [pc, #340]	; (8006818 <HAL_UART_RxCpltCallback+0x214>)
 80066c2:	f7ff fa71 	bl	8005ba8 <RB_size>
 80066c6:	4603      	mov	r3, r0
 80066c8:	737b      	strb	r3, [r7, #13]
					RB_pushFront(&uart4RXrb, rb_len);
 80066ca:	7b7b      	ldrb	r3, [r7, #13]
 80066cc:	4619      	mov	r1, r3
 80066ce:	4852      	ldr	r0, [pc, #328]	; (8006818 <HAL_UART_RxCpltCallback+0x214>)
 80066d0:	f7ff fa40 	bl	8005b54 <RB_pushFront>
					osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 80066d4:	4b51      	ldr	r3, [pc, #324]	; (800681c <HAL_UART_RxCpltCallback+0x218>)
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	2300      	movs	r3, #0
 80066da:	2200      	movs	r2, #0
 80066dc:	494e      	ldr	r1, [pc, #312]	; (8006818 <HAL_UART_RxCpltCallback+0x214>)
 80066de:	f006 fc21 	bl	800cf24 <osMessageQueuePut>
					prvRxChar = 0xFF;
 80066e2:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80066e4:	22ff      	movs	r2, #255	; 0xff
 80066e6:	701a      	strb	r2, [r3, #0]
				}
				RB_clear(&uart4RXrb);
 80066e8:	484b      	ldr	r0, [pc, #300]	; (8006818 <HAL_UART_RxCpltCallback+0x214>)
 80066ea:	f7ff fa79 	bl	8005be0 <RB_clear>
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 80066ee:	e02f      	b.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar != ESC)){
 80066f0:	4b46      	ldr	r3, [pc, #280]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b1b      	cmp	r3, #27
 80066f6:	d108      	bne.n	800670a <HAL_UART_RxCpltCallback+0x106>
 80066f8:	4b45      	ldr	r3, [pc, #276]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b1b      	cmp	r3, #27
 80066fe:	d004      	beq.n	800670a <HAL_UART_RxCpltCallback+0x106>
				 prvRxChar = rxChar;
 8006700:	4b42      	ldr	r3, [pc, #264]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	4b42      	ldr	r3, [pc, #264]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	e022      	b.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar == ESC)){
 800670a:	4b40      	ldr	r3, [pc, #256]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b1b      	cmp	r3, #27
 8006710:	d10d      	bne.n	800672e <HAL_UART_RxCpltCallback+0x12a>
 8006712:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b1b      	cmp	r3, #27
 8006718:	d109      	bne.n	800672e <HAL_UART_RxCpltCallback+0x12a>
				RB_push(&uart4RXrb, rxChar);
 800671a:	4b3c      	ldr	r3, [pc, #240]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	483d      	ldr	r0, [pc, #244]	; (8006818 <HAL_UART_RxCpltCallback+0x214>)
 8006722:	f7ff f9c4 	bl	8005aae <RB_push>
				prvRxChar = 0x00;
 8006726:	4b3a      	ldr	r3, [pc, #232]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e010      	b.n	8006750 <HAL_UART_RxCpltCallback+0x14c>
			}
			else {
			  RB_push(&uart4RXrb, rxChar);
 800672e:	4b37      	ldr	r3, [pc, #220]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	4619      	mov	r1, r3
 8006734:	4838      	ldr	r0, [pc, #224]	; (8006818 <HAL_UART_RxCpltCallback+0x214>)
 8006736:	f7ff f9ba 	bl	8005aae <RB_push>
			  if (rxChar == 0xFF) prvRxChar = 0x00;
 800673a:	4b34      	ldr	r3, [pc, #208]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2bff      	cmp	r3, #255	; 0xff
 8006740:	d102      	bne.n	8006748 <HAL_UART_RxCpltCallback+0x144>
 8006742:	4b33      	ldr	r3, [pc, #204]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
			  prvRxChar = rxChar;
 8006748:	4b30      	ldr	r3, [pc, #192]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	4b30      	ldr	r3, [pc, #192]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 800674e:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 8006750:	2201      	movs	r2, #1
 8006752:	492e      	ldr	r1, [pc, #184]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 8006754:	4832      	ldr	r0, [pc, #200]	; (8006820 <HAL_UART_RxCpltCallback+0x21c>)
 8006756:	f004 f84f 	bl	800a7f8 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 800675a:	e04f      	b.n	80067fc <HAL_UART_RxCpltCallback+0x1f8>
	else if (UartHandle->Instance == USART1){
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a30      	ldr	r2, [pc, #192]	; (8006824 <HAL_UART_RxCpltCallback+0x220>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d14a      	bne.n	80067fc <HAL_UART_RxCpltCallback+0x1f8>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006766:	4b29      	ldr	r3, [pc, #164]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b03      	cmp	r3, #3
 800676c:	d118      	bne.n	80067a0 <HAL_UART_RxCpltCallback+0x19c>
 800676e:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b1b      	cmp	r3, #27
 8006774:	d014      	beq.n	80067a0 <HAL_UART_RxCpltCallback+0x19c>
		uint8_t start_ch = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 800677a:	482b      	ldr	r0, [pc, #172]	; (8006828 <HAL_UART_RxCpltCallback+0x224>)
 800677c:	f7ff f9c5 	bl	8005b0a <RB_pop>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d106      	bne.n	8006798 <HAL_UART_RxCpltCallback+0x194>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 800678a:	4b24      	ldr	r3, [pc, #144]	; (800681c <HAL_UART_RxCpltCallback+0x218>)
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	2300      	movs	r3, #0
 8006790:	2200      	movs	r2, #0
 8006792:	4925      	ldr	r1, [pc, #148]	; (8006828 <HAL_UART_RxCpltCallback+0x224>)
 8006794:	f006 fbc6 	bl	800cf24 <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 8006798:	4823      	ldr	r0, [pc, #140]	; (8006828 <HAL_UART_RxCpltCallback+0x224>)
 800679a:	f7ff fa21 	bl	8005be0 <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 800679e:	e028      	b.n	80067f2 <HAL_UART_RxCpltCallback+0x1ee>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 80067a0:	4b1a      	ldr	r3, [pc, #104]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b1b      	cmp	r3, #27
 80067a6:	d108      	bne.n	80067ba <HAL_UART_RxCpltCallback+0x1b6>
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b1b      	cmp	r3, #27
 80067ae:	d004      	beq.n	80067ba <HAL_UART_RxCpltCallback+0x1b6>
			 prvRxChar = rxChar;
 80067b0:	4b16      	ldr	r3, [pc, #88]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	4b16      	ldr	r3, [pc, #88]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	e01b      	b.n	80067f2 <HAL_UART_RxCpltCallback+0x1ee>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b1b      	cmp	r3, #27
 80067c0:	d10d      	bne.n	80067de <HAL_UART_RxCpltCallback+0x1da>
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b1b      	cmp	r3, #27
 80067c8:	d109      	bne.n	80067de <HAL_UART_RxCpltCallback+0x1da>
			RB_push(&uart1RXrb, rxChar);
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	4815      	ldr	r0, [pc, #84]	; (8006828 <HAL_UART_RxCpltCallback+0x224>)
 80067d2:	f7ff f96c 	bl	8005aae <RB_push>
			prvRxChar = 0x00;
 80067d6:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e009      	b.n	80067f2 <HAL_UART_RxCpltCallback+0x1ee>
		  RB_push(&uart1RXrb, rxChar);
 80067de:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	4810      	ldr	r0, [pc, #64]	; (8006828 <HAL_UART_RxCpltCallback+0x224>)
 80067e6:	f7ff f962 	bl	8005aae <RB_push>
		  prvRxChar = rxChar;
 80067ea:	4b08      	ldr	r3, [pc, #32]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80067ec:	781a      	ldrb	r2, [r3, #0]
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <HAL_UART_RxCpltCallback+0x20c>)
 80067f0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 80067f2:	2201      	movs	r2, #1
 80067f4:	4905      	ldr	r1, [pc, #20]	; (800680c <HAL_UART_RxCpltCallback+0x208>)
 80067f6:	480d      	ldr	r0, [pc, #52]	; (800682c <HAL_UART_RxCpltCallback+0x228>)
 80067f8:	f003 fffe 	bl	800a7f8 <HAL_UART_Receive_IT>
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40004c00 	.word	0x40004c00
 8006808:	20000656 	.word	0x20000656
 800680c:	20000654 	.word	0x20000654
 8006810:	20000655 	.word	0x20000655
 8006814:	20000454 	.word	0x20000454
 8006818:	200005ec 	.word	0x200005ec
 800681c:	20000450 	.word	0x20000450
 8006820:	2000055c 	.word	0x2000055c
 8006824:	40013800 	.word	0x40013800
 8006828:	20000620 	.word	0x20000620
 800682c:	200004cc 	.word	0x200004cc

08006830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006868 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006834:	f7ff fda6 	bl	8006384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006838:	480c      	ldr	r0, [pc, #48]	; (800686c <LoopForever+0x6>)
  ldr r1, =_edata
 800683a:	490d      	ldr	r1, [pc, #52]	; (8006870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800683c:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <LoopForever+0xe>)
  movs r3, #0
 800683e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006840:	e002      	b.n	8006848 <LoopCopyDataInit>

08006842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006846:	3304      	adds	r3, #4

08006848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800684a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800684c:	d3f9      	bcc.n	8006842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800684e:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006850:	4c0a      	ldr	r4, [pc, #40]	; (800687c <LoopForever+0x16>)
  movs r3, #0
 8006852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006854:	e001      	b.n	800685a <LoopFillZerobss>

08006856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006858:	3204      	adds	r2, #4

0800685a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800685a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800685c:	d3fb      	bcc.n	8006856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800685e:	f00a fe9d 	bl	801159c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006862:	f7fe f8df 	bl	8004a24 <main>

08006866 <LoopForever>:

LoopForever:
    b LoopForever
 8006866:	e7fe      	b.n	8006866 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006868:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800686c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006870:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8006874:	08015894 	.word	0x08015894
  ldr r2, =_sbss
 8006878:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 800687c:	200064f8 	.word	0x200064f8

08006880 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006880:	e7fe      	b.n	8006880 <ADC1_IRQHandler>

08006882 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800688c:	2003      	movs	r0, #3
 800688e:	f000 f902 	bl	8006a96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006892:	200f      	movs	r0, #15
 8006894:	f7ff fbcc 	bl	8006030 <HAL_InitTick>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	71fb      	strb	r3, [r7, #7]
 80068a2:	e001      	b.n	80068a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068a4:	f7ff f9b0 	bl	8005c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068a8:	79fb      	ldrb	r3, [r7, #7]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <HAL_IncTick+0x20>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_IncTick+0x24>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4413      	add	r3, r2
 80068c4:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <HAL_IncTick+0x24>)
 80068c6:	6013      	str	r3, [r2, #0]
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000044 	.word	0x20000044
 80068d8:	20000658 	.word	0x20000658

080068dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  return uwTick;
 80068e0:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <HAL_GetTick+0x14>)
 80068e2:	681b      	ldr	r3, [r3, #0]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000658 	.word	0x20000658

080068f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068fc:	f7ff ffee 	bl	80068dc <HAL_GetTick>
 8006900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d005      	beq.n	800691a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <HAL_Delay+0x44>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800691a:	bf00      	nop
 800691c:	f7ff ffde 	bl	80068dc <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	429a      	cmp	r2, r3
 800692a:	d8f7      	bhi.n	800691c <HAL_Delay+0x28>
  {
  }
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000044 	.word	0x20000044

0800693c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <__NVIC_SetPriorityGrouping+0x44>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006958:	4013      	ands	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800696c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800696e:	4a04      	ldr	r2, [pc, #16]	; (8006980 <__NVIC_SetPriorityGrouping+0x44>)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	60d3      	str	r3, [r2, #12]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	e000ed00 	.word	0xe000ed00

08006984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006988:	4b04      	ldr	r3, [pc, #16]	; (800699c <__NVIC_GetPriorityGrouping+0x18>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	0a1b      	lsrs	r3, r3, #8
 800698e:	f003 0307 	and.w	r3, r3, #7
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	e000ed00 	.word	0xe000ed00

080069a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	db0b      	blt.n	80069ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	f003 021f 	and.w	r2, r3, #31
 80069b8:	4907      	ldr	r1, [pc, #28]	; (80069d8 <__NVIC_EnableIRQ+0x38>)
 80069ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	2001      	movs	r0, #1
 80069c2:	fa00 f202 	lsl.w	r2, r0, r2
 80069c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	e000e100 	.word	0xe000e100

080069dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	6039      	str	r1, [r7, #0]
 80069e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	db0a      	blt.n	8006a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	490c      	ldr	r1, [pc, #48]	; (8006a28 <__NVIC_SetPriority+0x4c>)
 80069f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fa:	0112      	lsls	r2, r2, #4
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	440b      	add	r3, r1
 8006a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a04:	e00a      	b.n	8006a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	4908      	ldr	r1, [pc, #32]	; (8006a2c <__NVIC_SetPriority+0x50>)
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	3b04      	subs	r3, #4
 8006a14:	0112      	lsls	r2, r2, #4
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	440b      	add	r3, r1
 8006a1a:	761a      	strb	r2, [r3, #24]
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	e000e100 	.word	0xe000e100
 8006a2c:	e000ed00 	.word	0xe000ed00

08006a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f1c3 0307 	rsb	r3, r3, #7
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	bf28      	it	cs
 8006a4e:	2304      	movcs	r3, #4
 8006a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d902      	bls.n	8006a60 <NVIC_EncodePriority+0x30>
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	3b03      	subs	r3, #3
 8006a5e:	e000      	b.n	8006a62 <NVIC_EncodePriority+0x32>
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a64:	f04f 32ff 	mov.w	r2, #4294967295
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	43da      	mvns	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	401a      	ands	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a78:	f04f 31ff 	mov.w	r1, #4294967295
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	43d9      	mvns	r1, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a88:	4313      	orrs	r3, r2
         );
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3724      	adds	r7, #36	; 0x24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff ff4c 	bl	800693c <__NVIC_SetPriorityGrouping>
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006abe:	f7ff ff61 	bl	8006984 <__NVIC_GetPriorityGrouping>
 8006ac2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	6978      	ldr	r0, [r7, #20]
 8006aca:	f7ff ffb1 	bl	8006a30 <NVIC_EncodePriority>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff ff80 	bl	80069dc <__NVIC_SetPriority>
}
 8006adc:	bf00      	nop
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff ff54 	bl	80069a0 <__NVIC_EnableIRQ>
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d008      	beq.n	8006b2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2204      	movs	r2, #4
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e040      	b.n	8006bac <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 020e 	bic.w	r2, r2, #14
 8006b38:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0201 	bic.w	r2, r2, #1
 8006b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	f003 021c 	and.w	r2, r3, #28
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	2101      	movs	r1, #1
 8006b68:	fa01 f202 	lsl.w	r2, r1, r2
 8006b6c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b76:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00c      	beq.n	8006b9a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b98:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d005      	beq.n	8006bdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	73fb      	strb	r3, [r7, #15]
 8006bda:	e047      	b.n	8006c6c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 020e 	bic.w	r2, r2, #14
 8006bea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0201 	bic.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	f003 021c 	and.w	r2, r3, #28
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	2101      	movs	r1, #1
 8006c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00c      	beq.n	8006c4c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006c4a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
    }
  }
  return status;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_FLASH_Program+0x1e>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e053      	b.n	8006d3e <HAL_FLASH_Program+0xc6>
 8006c96:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ca0:	f000 f894 	bl	8006dcc <FLASH_WaitForLastOperation>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d143      	bne.n	8006d36 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006cce:	2202      	movs	r2, #2
 8006cd0:	771a      	strb	r2, [r3, #28]
 8006cd2:	e002      	b.n	8006cda <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006cd4:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d107      	bne.n	8006cf0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce4:	68b8      	ldr	r0, [r7, #8]
 8006ce6:	f000 f8c9 	bl	8006e7c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006cea:	2301      	movs	r3, #1
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	e010      	b.n	8006d12 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d002      	beq.n	8006cfc <HAL_FLASH_Program+0x84>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d10a      	bne.n	8006d12 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	68b8      	ldr	r0, [r7, #8]
 8006d02:	f000 f8e1 	bl	8006ec8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d102      	bne.n	8006d12 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006d0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d10:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d16:	f000 f859 	bl	8006dcc <FLASH_WaitForLastOperation>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006d24:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	4907      	ldr	r1, [pc, #28]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006d32:	f000 fa17 	bl	8007164 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006d36:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]

  return status;
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000048 	.word	0x20000048
 8006d4c:	40022000 	.word	0x40022000

08006d50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da0b      	bge.n	8006d7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d64:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_FLASH_Unlock+0x3c>)
 8006d66:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d6a:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <HAL_FLASH_Unlock+0x40>)
 8006d6c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006d6e:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da01      	bge.n	8006d7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40022000 	.word	0x40022000
 8006d8c:	45670123 	.word	0x45670123
 8006d90:	cdef89ab 	.word	0xcdef89ab

08006d94 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <HAL_FLASH_Lock+0x1c>)
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <HAL_FLASH_Lock+0x1c>)
 8006d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006da2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40022000 	.word	0x40022000

08006db4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <HAL_FLASH_GetError+0x14>)
 8006dba:	685b      	ldr	r3, [r3, #4]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000048 	.word	0x20000048

08006dcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006dd4:	f7ff fd82 	bl	80068dc <HAL_GetTick>
 8006dd8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006dda:	e00d      	b.n	8006df8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d009      	beq.n	8006df8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8006de4:	f7ff fd7a 	bl	80068dc <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d801      	bhi.n	8006df8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e036      	b.n	8006e66 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006df8:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <FLASH_WaitForLastOperation+0xa4>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1eb      	bne.n	8006ddc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006e04:	4b1a      	ldr	r3, [pc, #104]	; (8006e70 <FLASH_WaitForLastOperation+0xa4>)
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <FLASH_WaitForLastOperation+0xa8>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01e      	beq.n	8006e52 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006e14:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <FLASH_WaitForLastOperation+0xac>)
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	4a16      	ldr	r2, [pc, #88]	; (8006e78 <FLASH_WaitForLastOperation+0xac>)
 8006e1e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d007      	beq.n	8006e3a <FLASH_WaitForLastOperation+0x6e>
 8006e2a:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <FLASH_WaitForLastOperation+0xa4>)
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e34:	490e      	ldr	r1, [pc, #56]	; (8006e70 <FLASH_WaitForLastOperation+0xa4>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	618b      	str	r3, [r1, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <FLASH_WaitForLastOperation+0x82>
 8006e44:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <FLASH_WaitForLastOperation+0xa4>)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e4c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e009      	b.n	8006e66 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <FLASH_WaitForLastOperation+0xa4>)
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006e5e:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <FLASH_WaitForLastOperation+0xa4>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40022000 	.word	0x40022000
 8006e74:	0002c3fa 	.word	0x0002c3fa
 8006e78:	20000048 	.word	0x20000048

08006e7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006e88:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <FLASH_Program_DoubleWord+0x48>)
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	4a0d      	ldr	r2, [pc, #52]	; (8006ec4 <FLASH_Program_DoubleWord+0x48>)
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006e9a:	f3bf 8f6f 	isb	sy
}
 8006e9e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	000a      	movs	r2, r1
 8006eae:	2300      	movs	r3, #0
 8006eb0:	68f9      	ldr	r1, [r7, #12]
 8006eb2:	3104      	adds	r1, #4
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	40022000 	.word	0x40022000

08006ec8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b089      	sub	sp, #36	; 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006ed2:	2380      	movs	r3, #128	; 0x80
 8006ed4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <FLASH_Program_Fast+0x68>)
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <FLASH_Program_Fast+0x68>)
 8006ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ee8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eea:	f3ef 8310 	mrs	r3, PRIMASK
 8006eee:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ef0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ef4:	b672      	cpsid	i
}
 8006ef6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	3304      	adds	r3, #4
 8006f04:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	617b      	str	r3, [r7, #20]
    row_index--;
 8006f0c:	7ffb      	ldrb	r3, [r7, #31]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006f12:	7ffb      	ldrb	r3, [r7, #31]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1ef      	bne.n	8006ef8 <FLASH_Program_Fast+0x30>
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f383 8810 	msr	PRIMASK, r3
}
 8006f22:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006f24:	bf00      	nop
 8006f26:	3724      	adds	r7, #36	; 0x24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40022000 	.word	0x40022000

08006f34 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f3e:	4b49      	ldr	r3, [pc, #292]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_FLASHEx_Erase+0x16>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e087      	b.n	800705a <HAL_FLASHEx_Erase+0x126>
 8006f4a:	4b46      	ldr	r3, [pc, #280]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006f54:	f7ff ff3a 	bl	8006dcc <FLASH_WaitForLastOperation>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d177      	bne.n	8007052 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f62:	4b40      	ldr	r3, [pc, #256]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006f68:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d013      	beq.n	8006f9c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006f74:	4b3c      	ldr	r3, [pc, #240]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006f80:	4b39      	ldr	r3, [pc, #228]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a38      	ldr	r2, [pc, #224]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f8a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006f8c:	4b35      	ldr	r3, [pc, #212]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8006f8e:	2203      	movs	r2, #3
 8006f90:	771a      	strb	r2, [r3, #28]
 8006f92:	e016      	b.n	8006fc2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006f94:	4b33      	ldr	r3, [pc, #204]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	771a      	strb	r2, [r3, #28]
 8006f9a:	e012      	b.n	8006fc2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006f9c:	4b32      	ldr	r3, [pc, #200]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d009      	beq.n	8006fbc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006fa8:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2e      	ldr	r2, [pc, #184]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006fb4:	4b2b      	ldr	r3, [pc, #172]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	771a      	strb	r2, [r3, #28]
 8006fba:	e002      	b.n	8006fc2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006fbc:	4b29      	ldr	r3, [pc, #164]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d113      	bne.n	8006ff2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f84c 	bl	800706c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006fd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006fd8:	f7ff fef8 	bl	8006dcc <FLASH_WaitForLastOperation>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006fe0:	4b21      	ldr	r3, [pc, #132]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	4a20      	ldr	r2, [pc, #128]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8006fe6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fea:	f023 0304 	bic.w	r3, r3, #4
 8006fee:	6153      	str	r3, [r2, #20]
 8006ff0:	e02d      	b.n	800704e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	e01d      	b.n	800703e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4619      	mov	r1, r3
 8007008:	68b8      	ldr	r0, [r7, #8]
 800700a:	f000 f867 	bl	80070dc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800700e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007012:	f7ff fedb 	bl	8006dcc <FLASH_WaitForLastOperation>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	4a12      	ldr	r2, [pc, #72]	; (8007068 <HAL_FLASHEx_Erase+0x134>)
 8007020:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007024:	f023 0302 	bic.w	r3, r3, #2
 8007028:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	601a      	str	r2, [r3, #0]
          break;
 8007036:	e00a      	b.n	800704e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3301      	adds	r3, #1
 800703c:	60bb      	str	r3, [r7, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	4413      	add	r3, r2
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	d3d9      	bcc.n	8007002 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800704e:	f000 f889 	bl	8007164 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <HAL_FLASHEx_Erase+0x130>)
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]

  return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000048 	.word	0x20000048
 8007068:	40022000 	.word	0x40022000

0800706c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8007074:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <FLASH_MassErase+0x6c>)
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <FLASH_MassErase+0x6c>)
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	4a12      	ldr	r2, [pc, #72]	; (80070d8 <FLASH_MassErase+0x6c>)
 8007090:	f043 0304 	orr.w	r3, r3, #4
 8007094:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00e      	beq.n	80070be <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <FLASH_MassErase+0x6c>)
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <FLASH_MassErase+0x6c>)
 80070a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070aa:	6153      	str	r3, [r2, #20]
 80070ac:	e007      	b.n	80070be <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <FLASH_MassErase+0x6c>)
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <FLASH_MassErase+0x6c>)
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b8:	f043 0304 	orr.w	r3, r3, #4
 80070bc:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80070be:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <FLASH_MassErase+0x6c>)
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	4a05      	ldr	r2, [pc, #20]	; (80070d8 <FLASH_MassErase+0x6c>)
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c8:	6153      	str	r3, [r2, #20]
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40022000 	.word	0x40022000

080070dc <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80070e6:	4b1e      	ldr	r3, [pc, #120]	; (8007160 <FLASH_PageErase+0x84>)
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80070f2:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <FLASH_PageErase+0x84>)
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	4a1a      	ldr	r2, [pc, #104]	; (8007160 <FLASH_PageErase+0x84>)
 80070f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070fc:	6153      	str	r3, [r2, #20]
 80070fe:	e011      	b.n	8007124 <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d006      	beq.n	8007118 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800710a:	4b15      	ldr	r3, [pc, #84]	; (8007160 <FLASH_PageErase+0x84>)
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	4a14      	ldr	r2, [pc, #80]	; (8007160 <FLASH_PageErase+0x84>)
 8007110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007114:	6153      	str	r3, [r2, #20]
 8007116:	e005      	b.n	8007124 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <FLASH_PageErase+0x84>)
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	4a10      	ldr	r2, [pc, #64]	; (8007160 <FLASH_PageErase+0x84>)
 800711e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007122:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007124:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <FLASH_PageErase+0x84>)
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007134:	490a      	ldr	r1, [pc, #40]	; (8007160 <FLASH_PageErase+0x84>)
 8007136:	4313      	orrs	r3, r2
 8007138:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <FLASH_PageErase+0x84>)
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	4a08      	ldr	r2, [pc, #32]	; (8007160 <FLASH_PageErase+0x84>)
 8007140:	f043 0302 	orr.w	r3, r3, #2
 8007144:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <FLASH_PageErase+0x84>)
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	4a05      	ldr	r2, [pc, #20]	; (8007160 <FLASH_PageErase+0x84>)
 800714c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007150:	6153      	str	r3, [r2, #20]
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40022000 	.word	0x40022000

08007164 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800716a:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <FLASH_FlushCaches+0x8c>)
 800716c:	7f1b      	ldrb	r3, [r3, #28]
 800716e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d002      	beq.n	800717c <FLASH_FlushCaches+0x18>
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	2b03      	cmp	r3, #3
 800717a:	d117      	bne.n	80071ac <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800717c:	4b1d      	ldr	r3, [pc, #116]	; (80071f4 <FLASH_FlushCaches+0x90>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <FLASH_FlushCaches+0x90>)
 8007182:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007186:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007188:	4b1a      	ldr	r3, [pc, #104]	; (80071f4 <FLASH_FlushCaches+0x90>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <FLASH_FlushCaches+0x90>)
 800718e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <FLASH_FlushCaches+0x90>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <FLASH_FlushCaches+0x90>)
 800719a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800719e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071a0:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a13      	ldr	r2, [pc, #76]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071aa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d002      	beq.n	80071b8 <FLASH_FlushCaches+0x54>
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d111      	bne.n	80071dc <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a0a      	ldr	r2, [pc, #40]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80071d0:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a07      	ldr	r2, [pc, #28]	; (80071f4 <FLASH_FlushCaches+0x90>)
 80071d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071da:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <FLASH_FlushCaches+0x8c>)
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000048 	.word	0x20000048
 80071f4:	40022000 	.word	0x40022000

080071f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007206:	e166      	b.n	80074d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	2101      	movs	r1, #1
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	fa01 f303 	lsl.w	r3, r1, r3
 8007214:	4013      	ands	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8158 	beq.w	80074d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	2b01      	cmp	r3, #1
 800722a:	d005      	beq.n	8007238 <HAL_GPIO_Init+0x40>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d130      	bne.n	800729a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	2203      	movs	r2, #3
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	43db      	mvns	r3, r3
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4013      	ands	r3, r2
 800724e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800726e:	2201      	movs	r2, #1
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43db      	mvns	r3, r3
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4013      	ands	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	f003 0201 	and.w	r2, r3, #1
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d017      	beq.n	80072d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	2203      	movs	r2, #3
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	43db      	mvns	r3, r3
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4013      	ands	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d123      	bne.n	800732a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	08da      	lsrs	r2, r3, #3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3208      	adds	r2, #8
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	220f      	movs	r2, #15
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43db      	mvns	r3, r3
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4013      	ands	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	691a      	ldr	r2, [r3, #16]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	fa02 f303 	lsl.w	r3, r2, r3
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	08da      	lsrs	r2, r3, #3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3208      	adds	r2, #8
 8007324:	6939      	ldr	r1, [r7, #16]
 8007326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	2203      	movs	r2, #3
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43db      	mvns	r3, r3
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4013      	ands	r3, r2
 8007340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f003 0203 	and.w	r2, r3, #3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80b2 	beq.w	80074d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800736c:	4b61      	ldr	r3, [pc, #388]	; (80074f4 <HAL_GPIO_Init+0x2fc>)
 800736e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007370:	4a60      	ldr	r2, [pc, #384]	; (80074f4 <HAL_GPIO_Init+0x2fc>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	6613      	str	r3, [r2, #96]	; 0x60
 8007378:	4b5e      	ldr	r3, [pc, #376]	; (80074f4 <HAL_GPIO_Init+0x2fc>)
 800737a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007384:	4a5c      	ldr	r2, [pc, #368]	; (80074f8 <HAL_GPIO_Init+0x300>)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	089b      	lsrs	r3, r3, #2
 800738a:	3302      	adds	r3, #2
 800738c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	220f      	movs	r2, #15
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	43db      	mvns	r3, r3
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4013      	ands	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073ae:	d02b      	beq.n	8007408 <HAL_GPIO_Init+0x210>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a52      	ldr	r2, [pc, #328]	; (80074fc <HAL_GPIO_Init+0x304>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d025      	beq.n	8007404 <HAL_GPIO_Init+0x20c>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a51      	ldr	r2, [pc, #324]	; (8007500 <HAL_GPIO_Init+0x308>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d01f      	beq.n	8007400 <HAL_GPIO_Init+0x208>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a50      	ldr	r2, [pc, #320]	; (8007504 <HAL_GPIO_Init+0x30c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d019      	beq.n	80073fc <HAL_GPIO_Init+0x204>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a4f      	ldr	r2, [pc, #316]	; (8007508 <HAL_GPIO_Init+0x310>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d013      	beq.n	80073f8 <HAL_GPIO_Init+0x200>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a4e      	ldr	r2, [pc, #312]	; (800750c <HAL_GPIO_Init+0x314>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00d      	beq.n	80073f4 <HAL_GPIO_Init+0x1fc>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a4d      	ldr	r2, [pc, #308]	; (8007510 <HAL_GPIO_Init+0x318>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <HAL_GPIO_Init+0x1f8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a4c      	ldr	r2, [pc, #304]	; (8007514 <HAL_GPIO_Init+0x31c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d101      	bne.n	80073ec <HAL_GPIO_Init+0x1f4>
 80073e8:	2307      	movs	r3, #7
 80073ea:	e00e      	b.n	800740a <HAL_GPIO_Init+0x212>
 80073ec:	2308      	movs	r3, #8
 80073ee:	e00c      	b.n	800740a <HAL_GPIO_Init+0x212>
 80073f0:	2306      	movs	r3, #6
 80073f2:	e00a      	b.n	800740a <HAL_GPIO_Init+0x212>
 80073f4:	2305      	movs	r3, #5
 80073f6:	e008      	b.n	800740a <HAL_GPIO_Init+0x212>
 80073f8:	2304      	movs	r3, #4
 80073fa:	e006      	b.n	800740a <HAL_GPIO_Init+0x212>
 80073fc:	2303      	movs	r3, #3
 80073fe:	e004      	b.n	800740a <HAL_GPIO_Init+0x212>
 8007400:	2302      	movs	r3, #2
 8007402:	e002      	b.n	800740a <HAL_GPIO_Init+0x212>
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <HAL_GPIO_Init+0x212>
 8007408:	2300      	movs	r3, #0
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	f002 0203 	and.w	r2, r2, #3
 8007410:	0092      	lsls	r2, r2, #2
 8007412:	4093      	lsls	r3, r2
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800741a:	4937      	ldr	r1, [pc, #220]	; (80074f8 <HAL_GPIO_Init+0x300>)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	089b      	lsrs	r3, r3, #2
 8007420:	3302      	adds	r3, #2
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007428:	4b3b      	ldr	r3, [pc, #236]	; (8007518 <HAL_GPIO_Init+0x320>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	43db      	mvns	r3, r3
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	4013      	ands	r3, r2
 8007436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800744c:	4a32      	ldr	r2, [pc, #200]	; (8007518 <HAL_GPIO_Init+0x320>)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007452:	4b31      	ldr	r3, [pc, #196]	; (8007518 <HAL_GPIO_Init+0x320>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	43db      	mvns	r3, r3
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4013      	ands	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007476:	4a28      	ldr	r2, [pc, #160]	; (8007518 <HAL_GPIO_Init+0x320>)
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800747c:	4b26      	ldr	r3, [pc, #152]	; (8007518 <HAL_GPIO_Init+0x320>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	43db      	mvns	r3, r3
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4013      	ands	r3, r2
 800748a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <HAL_GPIO_Init+0x320>)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80074a6:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <HAL_GPIO_Init+0x320>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	43db      	mvns	r3, r3
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4013      	ands	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80074ca:	4a13      	ldr	r2, [pc, #76]	; (8007518 <HAL_GPIO_Init+0x320>)
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3301      	adds	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f47f ae91 	bne.w	8007208 <HAL_GPIO_Init+0x10>
  }
}
 80074e6:	bf00      	nop
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40021000 	.word	0x40021000
 80074f8:	40010000 	.word	0x40010000
 80074fc:	48000400 	.word	0x48000400
 8007500:	48000800 	.word	0x48000800
 8007504:	48000c00 	.word	0x48000c00
 8007508:	48001000 	.word	0x48001000
 800750c:	48001400 	.word	0x48001400
 8007510:	48001800 	.word	0x48001800
 8007514:	48001c00 	.word	0x48001c00
 8007518:	40010400 	.word	0x40010400

0800751c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	807b      	strh	r3, [r7, #2]
 8007528:	4613      	mov	r3, r2
 800752a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800752c:	787b      	ldrb	r3, [r7, #1]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007532:	887a      	ldrh	r2, [r7, #2]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007538:	e002      	b.n	8007540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800753a:	887a      	ldrh	r2, [r7, #2]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800755e:	887a      	ldrh	r2, [r7, #2]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4013      	ands	r3, r2
 8007564:	041a      	lsls	r2, r3, #16
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	43d9      	mvns	r1, r3
 800756a:	887b      	ldrh	r3, [r7, #2]
 800756c:	400b      	ands	r3, r1
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	619a      	str	r2, [r3, #24]
}
 8007574:	bf00      	nop
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	4013      	ands	r3, r2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007596:	4a05      	ldr	r2, [pc, #20]	; (80075ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800759c:	88fb      	ldrh	r3, [r7, #6]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f806 	bl	80075b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40010400 	.word	0x40010400

080075b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e081      	b.n	80076dc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7fe fb33 	bl	8005c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2224      	movs	r2, #36	; 0x24
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0201 	bic.w	r2, r2, #1
 8007608:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007616:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007626:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d107      	bne.n	8007640 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800763c:	609a      	str	r2, [r3, #8]
 800763e:	e006      	b.n	800764e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800764c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d104      	bne.n	8007660 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800765e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800766e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007672:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007682:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69d9      	ldr	r1, [r3, #28]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0201 	orr.w	r2, r2, #1
 80076bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	461a      	mov	r2, r3
 80076f0:	460b      	mov	r3, r1
 80076f2:	817b      	strh	r3, [r7, #10]
 80076f4:	4613      	mov	r3, r2
 80076f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b20      	cmp	r3, #32
 8007702:	f040 80da 	bne.w	80078ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_I2C_Master_Transmit+0x30>
 8007710:	2302      	movs	r3, #2
 8007712:	e0d3      	b.n	80078bc <HAL_I2C_Master_Transmit+0x1d8>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800771c:	f7ff f8de 	bl	80068dc <HAL_GetTick>
 8007720:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2319      	movs	r3, #25
 8007728:	2201      	movs	r2, #1
 800772a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fcd6 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e0be      	b.n	80078bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2221      	movs	r2, #33	; 0x21
 8007742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2210      	movs	r2, #16
 800774a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	893a      	ldrh	r2, [r7, #8]
 800775e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776a:	b29b      	uxth	r3, r3
 800776c:	2bff      	cmp	r3, #255	; 0xff
 800776e:	d90e      	bls.n	800778e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	22ff      	movs	r2, #255	; 0xff
 8007774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777a:	b2da      	uxtb	r2, r3
 800777c:	8979      	ldrh	r1, [r7, #10]
 800777e:	4b51      	ldr	r3, [pc, #324]	; (80078c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fecc 	bl	8008524 <I2C_TransferConfig>
 800778c:	e06c      	b.n	8007868 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779c:	b2da      	uxtb	r2, r3
 800779e:	8979      	ldrh	r1, [r7, #10]
 80077a0:	4b48      	ldr	r3, [pc, #288]	; (80078c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 febb 	bl	8008524 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80077ae:	e05b      	b.n	8007868 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	6a39      	ldr	r1, [r7, #32]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fcd3 	bl	8008160 <I2C_WaitOnTXISFlagUntilTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e07b      	b.n	80078bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d034      	beq.n	8007868 <HAL_I2C_Master_Transmit+0x184>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d130      	bne.n	8007868 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	2200      	movs	r2, #0
 800780e:	2180      	movs	r1, #128	; 0x80
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fc65 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e04d      	b.n	80078bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	2bff      	cmp	r3, #255	; 0xff
 8007828:	d90e      	bls.n	8007848 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	22ff      	movs	r2, #255	; 0xff
 800782e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007834:	b2da      	uxtb	r2, r3
 8007836:	8979      	ldrh	r1, [r7, #10]
 8007838:	2300      	movs	r3, #0
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fe6f 	bl	8008524 <I2C_TransferConfig>
 8007846:	e00f      	b.n	8007868 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007856:	b2da      	uxtb	r2, r3
 8007858:	8979      	ldrh	r1, [r7, #10]
 800785a:	2300      	movs	r3, #0
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fe5e 	bl	8008524 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d19e      	bne.n	80077b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	6a39      	ldr	r1, [r7, #32]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fcb2 	bl	80081e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e01a      	b.n	80078bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2220      	movs	r2, #32
 800788c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800789a:	400b      	ands	r3, r1
 800789c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	80002000 	.word	0x80002000
 80078c8:	fe00e800 	.word	0xfe00e800

080078cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	607a      	str	r2, [r7, #4]
 80078d6:	461a      	mov	r2, r3
 80078d8:	460b      	mov	r3, r1
 80078da:	817b      	strh	r3, [r7, #10]
 80078dc:	4613      	mov	r3, r2
 80078de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	f040 80db 	bne.w	8007aa4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_I2C_Master_Receive+0x30>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e0d4      	b.n	8007aa6 <HAL_I2C_Master_Receive+0x1da>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007904:	f7fe ffea 	bl	80068dc <HAL_GetTick>
 8007908:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	2319      	movs	r3, #25
 8007910:	2201      	movs	r2, #1
 8007912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fbe2 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0bf      	b.n	8007aa6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2222      	movs	r2, #34	; 0x22
 800792a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2210      	movs	r2, #16
 8007932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	893a      	ldrh	r2, [r7, #8]
 8007946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007952:	b29b      	uxth	r3, r3
 8007954:	2bff      	cmp	r3, #255	; 0xff
 8007956:	d90e      	bls.n	8007976 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	22ff      	movs	r2, #255	; 0xff
 800795c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007962:	b2da      	uxtb	r2, r3
 8007964:	8979      	ldrh	r1, [r7, #10]
 8007966:	4b52      	ldr	r3, [pc, #328]	; (8007ab0 <HAL_I2C_Master_Receive+0x1e4>)
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fdd8 	bl	8008524 <I2C_TransferConfig>
 8007974:	e06d      	b.n	8007a52 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007984:	b2da      	uxtb	r2, r3
 8007986:	8979      	ldrh	r1, [r7, #10]
 8007988:	4b49      	ldr	r3, [pc, #292]	; (8007ab0 <HAL_I2C_Master_Receive+0x1e4>)
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fdc7 	bl	8008524 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007996:	e05c      	b.n	8007a52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	6a39      	ldr	r1, [r7, #32]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fc5b 	bl	8008258 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e07c      	b.n	8007aa6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d034      	beq.n	8007a52 <HAL_I2C_Master_Receive+0x186>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d130      	bne.n	8007a52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	2200      	movs	r2, #0
 80079f8:	2180      	movs	r1, #128	; 0x80
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fb70 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e04d      	b.n	8007aa6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2bff      	cmp	r3, #255	; 0xff
 8007a12:	d90e      	bls.n	8007a32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	22ff      	movs	r2, #255	; 0xff
 8007a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	8979      	ldrh	r1, [r7, #10]
 8007a22:	2300      	movs	r3, #0
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 fd7a 	bl	8008524 <I2C_TransferConfig>
 8007a30:	e00f      	b.n	8007a52 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	8979      	ldrh	r1, [r7, #10]
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fd69 	bl	8008524 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d19d      	bne.n	8007998 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	6a39      	ldr	r1, [r7, #32]
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fbbd 	bl	80081e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e01a      	b.n	8007aa6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2220      	movs	r2, #32
 8007a76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <HAL_I2C_Master_Receive+0x1e8>)
 8007a84:	400b      	ands	r3, r1
 8007a86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e000      	b.n	8007aa6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007aa4:	2302      	movs	r3, #2
  }
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	80002400 	.word	0x80002400
 8007ab4:	fe00e800 	.word	0xfe00e800

08007ab8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	817b      	strh	r3, [r7, #10]
 8007aca:	460b      	mov	r3, r1
 8007acc:	813b      	strh	r3, [r7, #8]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	f040 80f9 	bne.w	8007cd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_I2C_Mem_Write+0x34>
 8007ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d105      	bne.n	8007af8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0ed      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <HAL_I2C_Mem_Write+0x4e>
 8007b02:	2302      	movs	r3, #2
 8007b04:	e0e6      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b0e:	f7fe fee5 	bl	80068dc <HAL_GetTick>
 8007b12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	2319      	movs	r3, #25
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 fadd 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e0d1      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2221      	movs	r2, #33	; 0x21
 8007b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2240      	movs	r2, #64	; 0x40
 8007b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b58:	88f8      	ldrh	r0, [r7, #6]
 8007b5a:	893a      	ldrh	r2, [r7, #8]
 8007b5c:	8979      	ldrh	r1, [r7, #10]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4603      	mov	r3, r0
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 f9ed 	bl	8007f48 <I2C_RequestMemoryWrite>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0a9      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2bff      	cmp	r3, #255	; 0xff
 8007b88:	d90e      	bls.n	8007ba8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	22ff      	movs	r2, #255	; 0xff
 8007b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	8979      	ldrh	r1, [r7, #10]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fcbf 	bl	8008524 <I2C_TransferConfig>
 8007ba6:	e00f      	b.n	8007bc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	8979      	ldrh	r1, [r7, #10]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fcae 	bl	8008524 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fac7 	bl	8008160 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e07b      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	781a      	ldrb	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d034      	beq.n	8007c80 <HAL_I2C_Mem_Write+0x1c8>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d130      	bne.n	8007c80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	2200      	movs	r2, #0
 8007c26:	2180      	movs	r1, #128	; 0x80
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fa59 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e04d      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2bff      	cmp	r3, #255	; 0xff
 8007c40:	d90e      	bls.n	8007c60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	8979      	ldrh	r1, [r7, #10]
 8007c50:	2300      	movs	r3, #0
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 fc63 	bl	8008524 <I2C_TransferConfig>
 8007c5e:	e00f      	b.n	8007c80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	8979      	ldrh	r1, [r7, #10]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fc52 	bl	8008524 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d19e      	bne.n	8007bc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 faa6 	bl	80081e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e01a      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <HAL_I2C_Mem_Write+0x224>)
 8007cb2:	400b      	ands	r3, r1
 8007cb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e000      	b.n	8007cd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007cd2:	2302      	movs	r3, #2
  }
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	fe00e800 	.word	0xfe00e800

08007ce0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	4608      	mov	r0, r1
 8007cea:	4611      	mov	r1, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	817b      	strh	r3, [r7, #10]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	813b      	strh	r3, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	f040 80fd 	bne.w	8007f02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <HAL_I2C_Mem_Read+0x34>
 8007d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d105      	bne.n	8007d20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e0f1      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d101      	bne.n	8007d2e <HAL_I2C_Mem_Read+0x4e>
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e0ea      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d36:	f7fe fdd1 	bl	80068dc <HAL_GetTick>
 8007d3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	2319      	movs	r3, #25
 8007d42:	2201      	movs	r2, #1
 8007d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f9c9 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0d5      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2222      	movs	r2, #34	; 0x22
 8007d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2240      	movs	r2, #64	; 0x40
 8007d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a3a      	ldr	r2, [r7, #32]
 8007d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d80:	88f8      	ldrh	r0, [r7, #6]
 8007d82:	893a      	ldrh	r2, [r7, #8]
 8007d84:	8979      	ldrh	r1, [r7, #10]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	4603      	mov	r3, r0
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 f92d 	bl	8007ff0 <I2C_RequestMemoryRead>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e0ad      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2bff      	cmp	r3, #255	; 0xff
 8007db0:	d90e      	bls.n	8007dd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	22ff      	movs	r2, #255	; 0xff
 8007db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	8979      	ldrh	r1, [r7, #10]
 8007dc0:	4b52      	ldr	r3, [pc, #328]	; (8007f0c <HAL_I2C_Mem_Read+0x22c>)
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fbab 	bl	8008524 <I2C_TransferConfig>
 8007dce:	e00f      	b.n	8007df0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	8979      	ldrh	r1, [r7, #10]
 8007de2:	4b4a      	ldr	r3, [pc, #296]	; (8007f0c <HAL_I2C_Mem_Read+0x22c>)
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fb9a 	bl	8008524 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	2200      	movs	r2, #0
 8007df8:	2104      	movs	r1, #4
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f970 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e07c      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d034      	beq.n	8007eb0 <HAL_I2C_Mem_Read+0x1d0>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d130      	bne.n	8007eb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e54:	2200      	movs	r2, #0
 8007e56:	2180      	movs	r1, #128	; 0x80
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f941 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e04d      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2bff      	cmp	r3, #255	; 0xff
 8007e70:	d90e      	bls.n	8007e90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	8979      	ldrh	r1, [r7, #10]
 8007e80:	2300      	movs	r3, #0
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 fb4b 	bl	8008524 <I2C_TransferConfig>
 8007e8e:	e00f      	b.n	8007eb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	8979      	ldrh	r1, [r7, #10]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fb3a 	bl	8008524 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d19a      	bne.n	8007df0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 f98e 	bl	80081e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e01a      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6859      	ldr	r1, [r3, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <HAL_I2C_Mem_Read+0x230>)
 8007ee2:	400b      	ands	r3, r1
 8007ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e000      	b.n	8007f04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007f02:	2302      	movs	r3, #2
  }
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	80002400 	.word	0x80002400
 8007f10:	fe00e800 	.word	0xfe00e800

08007f14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
  }
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	4608      	mov	r0, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	461a      	mov	r2, r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	817b      	strh	r3, [r7, #10]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	813b      	strh	r3, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	8979      	ldrh	r1, [r7, #10]
 8007f68:	4b20      	ldr	r3, [pc, #128]	; (8007fec <I2C_RequestMemoryWrite+0xa4>)
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fad7 	bl	8008524 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	69b9      	ldr	r1, [r7, #24]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f8f0 	bl	8008160 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e02c      	b.n	8007fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d105      	bne.n	8007f9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f90:	893b      	ldrh	r3, [r7, #8]
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	629a      	str	r2, [r3, #40]	; 0x28
 8007f9a:	e015      	b.n	8007fc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f9c:	893b      	ldrh	r3, [r7, #8]
 8007f9e:	0a1b      	lsrs	r3, r3, #8
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	69b9      	ldr	r1, [r7, #24]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f8d6 	bl	8008160 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e012      	b.n	8007fe4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fbe:	893b      	ldrh	r3, [r7, #8]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2180      	movs	r1, #128	; 0x80
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f884 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	80002000 	.word	0x80002000

08007ff0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	817b      	strh	r3, [r7, #10]
 8008002:	460b      	mov	r3, r1
 8008004:	813b      	strh	r3, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	b2da      	uxtb	r2, r3
 800800e:	8979      	ldrh	r1, [r7, #10]
 8008010:	4b20      	ldr	r3, [pc, #128]	; (8008094 <I2C_RequestMemoryRead+0xa4>)
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	2300      	movs	r3, #0
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 fa84 	bl	8008524 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	69b9      	ldr	r1, [r7, #24]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f89d 	bl	8008160 <I2C_WaitOnTXISFlagUntilTimeout>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e02c      	b.n	800808a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d105      	bne.n	8008042 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008036:	893b      	ldrh	r3, [r7, #8]
 8008038:	b2da      	uxtb	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	629a      	str	r2, [r3, #40]	; 0x28
 8008040:	e015      	b.n	800806e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008042:	893b      	ldrh	r3, [r7, #8]
 8008044:	0a1b      	lsrs	r3, r3, #8
 8008046:	b29b      	uxth	r3, r3
 8008048:	b2da      	uxtb	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	69b9      	ldr	r1, [r7, #24]
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f883 	bl	8008160 <I2C_WaitOnTXISFlagUntilTimeout>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e012      	b.n	800808a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008064:	893b      	ldrh	r3, [r7, #8]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2200      	movs	r2, #0
 8008076:	2140      	movs	r1, #64	; 0x40
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f831 	bl	80080e0 <I2C_WaitOnFlagUntilTimeout>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	80002000 	.word	0x80002000

08008098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d103      	bne.n	80080b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2200      	movs	r2, #0
 80080b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d007      	beq.n	80080d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	699a      	ldr	r2, [r3, #24]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0201 	orr.w	r2, r2, #1
 80080d2:	619a      	str	r2, [r3, #24]
  }
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080f0:	e022      	b.n	8008138 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f8:	d01e      	beq.n	8008138 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080fa:	f7fe fbef 	bl	80068dc <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d302      	bcc.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d113      	bne.n	8008138 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008114:	f043 0220 	orr.w	r2, r3, #32
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e00f      	b.n	8008158 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4013      	ands	r3, r2
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	429a      	cmp	r2, r3
 8008146:	bf0c      	ite	eq
 8008148:	2301      	moveq	r3, #1
 800814a:	2300      	movne	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	429a      	cmp	r2, r3
 8008154:	d0cd      	beq.n	80080f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800816c:	e02c      	b.n	80081c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f8ea 	bl	800834c <I2C_IsErrorOccurred>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e02a      	b.n	80081d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d01e      	beq.n	80081c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7fe fba7 	bl	80068dc <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d113      	bne.n	80081c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e007      	b.n	80081d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d1cb      	bne.n	800816e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081ec:	e028      	b.n	8008240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	68b9      	ldr	r1, [r7, #8]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f8aa 	bl	800834c <I2C_IsErrorOccurred>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e026      	b.n	8008250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008202:	f7fe fb6b 	bl	80068dc <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	429a      	cmp	r2, r3
 8008210:	d302      	bcc.n	8008218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d113      	bne.n	8008240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821c:	f043 0220 	orr.w	r2, r3, #32
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e007      	b.n	8008250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b20      	cmp	r3, #32
 800824c:	d1cf      	bne.n	80081ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008264:	e064      	b.n	8008330 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f86e 	bl	800834c <I2C_IsErrorOccurred>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e062      	b.n	8008340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b20      	cmp	r3, #32
 8008286:	d138      	bne.n	80082fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b04      	cmp	r3, #4
 8008294:	d105      	bne.n	80082a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e04e      	b.n	8008340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d107      	bne.n	80082c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2210      	movs	r2, #16
 80082b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2204      	movs	r2, #4
 80082bc:	645a      	str	r2, [r3, #68]	; 0x44
 80082be:	e002      	b.n	80082c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2220      	movs	r2, #32
 80082cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6859      	ldr	r1, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80082da:	400b      	ands	r3, r1
 80082dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e022      	b.n	8008340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fa:	f7fe faef 	bl	80068dc <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10f      	bne.n	8008330 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008314:	f043 0220 	orr.w	r2, r3, #32
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e007      	b.n	8008340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b04      	cmp	r3, #4
 800833c:	d193      	bne.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	fe00e800 	.word	0xfe00e800

0800834c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	; 0x28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b00      	cmp	r3, #0
 8008376:	d075      	beq.n	8008464 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2210      	movs	r2, #16
 800837e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008380:	e056      	b.n	8008430 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d052      	beq.n	8008430 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800838a:	f7fe faa7 	bl	80068dc <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	429a      	cmp	r2, r3
 8008398:	d302      	bcc.n	80083a0 <I2C_IsErrorOccurred+0x54>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d147      	bne.n	8008430 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c2:	d12e      	bne.n	8008422 <I2C_IsErrorOccurred+0xd6>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ca:	d02a      	beq.n	8008422 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80083cc:	7cfb      	ldrb	r3, [r7, #19]
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d027      	beq.n	8008422 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80083e2:	f7fe fa7b 	bl	80068dc <HAL_GetTick>
 80083e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083e8:	e01b      	b.n	8008422 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80083ea:	f7fe fa77 	bl	80068dc <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	2b19      	cmp	r3, #25
 80083f6:	d914      	bls.n	8008422 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fc:	f043 0220 	orr.w	r2, r3, #32
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b20      	cmp	r3, #32
 800842e:	d1dc      	bne.n	80083ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b20      	cmp	r3, #32
 800843c:	d003      	beq.n	8008446 <I2C_IsErrorOccurred+0xfa>
 800843e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008442:	2b00      	cmp	r3, #0
 8008444:	d09d      	beq.n	8008382 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2220      	movs	r2, #32
 8008454:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	f043 0304 	orr.w	r3, r3, #4
 800845c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00b      	beq.n	800848e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	f043 0301 	orr.w	r3, r3, #1
 800847c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008486:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	f043 0308 	orr.w	r3, r3, #8
 800849e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	f043 0302 	orr.w	r3, r3, #2
 80084c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80084d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01c      	beq.n	8008514 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7ff fddc 	bl	8008098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6859      	ldr	r1, [r3, #4]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <I2C_IsErrorOccurred+0x1d4>)
 80084ec:	400b      	ands	r3, r1
 80084ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008518:	4618      	mov	r0, r3
 800851a:	3728      	adds	r7, #40	; 0x28
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	fe00e800 	.word	0xfe00e800

08008524 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	607b      	str	r3, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	817b      	strh	r3, [r7, #10]
 8008532:	4613      	mov	r3, r2
 8008534:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008536:	897b      	ldrh	r3, [r7, #10]
 8008538:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800853c:	7a7b      	ldrb	r3, [r7, #9]
 800853e:	041b      	lsls	r3, r3, #16
 8008540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008544:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	4313      	orrs	r3, r2
 800854e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008552:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	0d5b      	lsrs	r3, r3, #21
 800855e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <I2C_TransferConfig+0x60>)
 8008564:	430b      	orrs	r3, r1
 8008566:	43db      	mvns	r3, r3
 8008568:	ea02 0103 	and.w	r1, r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	430a      	orrs	r2, r1
 8008574:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008576:	bf00      	nop
 8008578:	371c      	adds	r7, #28
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	03ff63ff 	.word	0x03ff63ff

08008588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b20      	cmp	r3, #32
 800859c:	d138      	bne.n	8008610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e032      	b.n	8008612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2224      	movs	r2, #36	; 0x24
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b20      	cmp	r3, #32
 8008632:	d139      	bne.n	80086a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800863a:	2b01      	cmp	r3, #1
 800863c:	d101      	bne.n	8008642 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800863e:	2302      	movs	r3, #2
 8008640:	e033      	b.n	80086aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2224      	movs	r2, #36	; 0x24
 800864e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0201 	bic.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008670:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	021b      	lsls	r3, r3, #8
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0201 	orr.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e000      	b.n	80086aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086a8:	2302      	movs	r3, #2
  }
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c8:	d102      	bne.n	80086d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80086ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ce:	e00b      	b.n	80086e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80086d0:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80086d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086de:	d102      	bne.n	80086e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80086e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e4:	e000      	b.n	80086e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80086e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40007000 	.word	0x40007000

080086f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d141      	bne.n	800878a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008706:	4b4b      	ldr	r3, [pc, #300]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800870e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008712:	d131      	bne.n	8008778 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008714:	4b47      	ldr	r3, [pc, #284]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800871a:	4a46      	ldr	r2, [pc, #280]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800871c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008724:	4b43      	ldr	r3, [pc, #268]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800872c:	4a41      	ldr	r2, [pc, #260]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800872e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008734:	4b40      	ldr	r3, [pc, #256]	; (8008838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2232      	movs	r2, #50	; 0x32
 800873a:	fb02 f303 	mul.w	r3, r2, r3
 800873e:	4a3f      	ldr	r2, [pc, #252]	; (800883c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	0c9b      	lsrs	r3, r3, #18
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800874a:	e002      	b.n	8008752 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3b01      	subs	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008752:	4b38      	ldr	r3, [pc, #224]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800875a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800875e:	d102      	bne.n	8008766 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f2      	bne.n	800874c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008766:	4b33      	ldr	r3, [pc, #204]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800876e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008772:	d158      	bne.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e057      	b.n	8008828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008778:	4b2e      	ldr	r3, [pc, #184]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800877a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800877e:	4a2d      	ldr	r2, [pc, #180]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008788:	e04d      	b.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008790:	d141      	bne.n	8008816 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008792:	4b28      	ldr	r3, [pc, #160]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800879a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879e:	d131      	bne.n	8008804 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087a0:	4b24      	ldr	r3, [pc, #144]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a6:	4a23      	ldr	r2, [pc, #140]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087b0:	4b20      	ldr	r3, [pc, #128]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80087b8:	4a1e      	ldr	r2, [pc, #120]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80087c0:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2232      	movs	r2, #50	; 0x32
 80087c6:	fb02 f303 	mul.w	r3, r2, r3
 80087ca:	4a1c      	ldr	r2, [pc, #112]	; (800883c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087cc:	fba2 2303 	umull	r2, r3, r2, r3
 80087d0:	0c9b      	lsrs	r3, r3, #18
 80087d2:	3301      	adds	r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087d6:	e002      	b.n	80087de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3b01      	subs	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087de:	4b15      	ldr	r3, [pc, #84]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ea:	d102      	bne.n	80087f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1f2      	bne.n	80087d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087f2:	4b10      	ldr	r3, [pc, #64]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fe:	d112      	bne.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e011      	b.n	8008828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008804:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800880a:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800880c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008814:	e007      	b.n	8008826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800881e:	4a05      	ldr	r2, [pc, #20]	; (8008834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008824:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	40007000 	.word	0x40007000
 8008838:	2000003c 	.word	0x2000003c
 800883c:	431bde83 	.word	0x431bde83

08008840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d102      	bne.n	8008854 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	f000 bc08 	b.w	8009064 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008854:	4b96      	ldr	r3, [pc, #600]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 030c 	and.w	r3, r3, #12
 800885c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800885e:	4b94      	ldr	r3, [pc, #592]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80e4 	beq.w	8008a3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <HAL_RCC_OscConfig+0x4c>
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b0c      	cmp	r3, #12
 8008880:	f040 808b 	bne.w	800899a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b01      	cmp	r3, #1
 8008888:	f040 8087 	bne.w	800899a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800888c:	4b88      	ldr	r3, [pc, #544]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <HAL_RCC_OscConfig+0x64>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e3df      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a1a      	ldr	r2, [r3, #32]
 80088a8:	4b81      	ldr	r3, [pc, #516]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d004      	beq.n	80088be <HAL_RCC_OscConfig+0x7e>
 80088b4:	4b7e      	ldr	r3, [pc, #504]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088bc:	e005      	b.n	80088ca <HAL_RCC_OscConfig+0x8a>
 80088be:	4b7c      	ldr	r3, [pc, #496]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80088c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088c4:	091b      	lsrs	r3, r3, #4
 80088c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d223      	bcs.n	8008916 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fdfe 	bl	80094d4 <RCC_SetFlashLatencyFromMSIRange>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e3c0      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80088e2:	4b73      	ldr	r3, [pc, #460]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a72      	ldr	r2, [pc, #456]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80088e8:	f043 0308 	orr.w	r3, r3, #8
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	4b70      	ldr	r3, [pc, #448]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	496d      	ldr	r1, [pc, #436]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008900:	4b6b      	ldr	r3, [pc, #428]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	4968      	ldr	r1, [pc, #416]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008910:	4313      	orrs	r3, r2
 8008912:	604b      	str	r3, [r1, #4]
 8008914:	e025      	b.n	8008962 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008916:	4b66      	ldr	r3, [pc, #408]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a65      	ldr	r2, [pc, #404]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 800891c:	f043 0308 	orr.w	r3, r3, #8
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	4b63      	ldr	r3, [pc, #396]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	4960      	ldr	r1, [pc, #384]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008930:	4313      	orrs	r3, r2
 8008932:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008934:	4b5e      	ldr	r3, [pc, #376]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	495b      	ldr	r1, [pc, #364]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008944:	4313      	orrs	r3, r2
 8008946:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fdbe 	bl	80094d4 <RCC_SetFlashLatencyFromMSIRange>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e380      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008962:	f000 fcc1 	bl	80092e8 <HAL_RCC_GetSysClockFreq>
 8008966:	4602      	mov	r2, r0
 8008968:	4b51      	ldr	r3, [pc, #324]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	091b      	lsrs	r3, r3, #4
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	4950      	ldr	r1, [pc, #320]	; (8008ab4 <HAL_RCC_OscConfig+0x274>)
 8008974:	5ccb      	ldrb	r3, [r1, r3]
 8008976:	f003 031f 	and.w	r3, r3, #31
 800897a:	fa22 f303 	lsr.w	r3, r2, r3
 800897e:	4a4e      	ldr	r2, [pc, #312]	; (8008ab8 <HAL_RCC_OscConfig+0x278>)
 8008980:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008982:	4b4e      	ldr	r3, [pc, #312]	; (8008abc <HAL_RCC_OscConfig+0x27c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f7fd fb52 	bl	8006030 <HAL_InitTick>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d052      	beq.n	8008a3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	e364      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d032      	beq.n	8008a08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80089a2:	4b43      	ldr	r3, [pc, #268]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a42      	ldr	r2, [pc, #264]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80089ae:	f7fd ff95 	bl	80068dc <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80089b6:	f7fd ff91 	bl	80068dc <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e34d      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089c8:	4b39      	ldr	r3, [pc, #228]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80089d4:	4b36      	ldr	r3, [pc, #216]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a35      	ldr	r2, [pc, #212]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089da:	f043 0308 	orr.w	r3, r3, #8
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	4b33      	ldr	r3, [pc, #204]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	4930      	ldr	r1, [pc, #192]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80089f2:	4b2f      	ldr	r3, [pc, #188]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	492b      	ldr	r1, [pc, #172]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	604b      	str	r3, [r1, #4]
 8008a06:	e01a      	b.n	8008a3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008a08:	4b29      	ldr	r3, [pc, #164]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a28      	ldr	r2, [pc, #160]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008a14:	f7fd ff62 	bl	80068dc <HAL_GetTick>
 8008a18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008a1a:	e008      	b.n	8008a2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a1c:	f7fd ff5e 	bl	80068dc <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e31a      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008a2e:	4b20      	ldr	r3, [pc, #128]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1f0      	bne.n	8008a1c <HAL_RCC_OscConfig+0x1dc>
 8008a3a:	e000      	b.n	8008a3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008a3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d073      	beq.n	8008b32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d005      	beq.n	8008a5c <HAL_RCC_OscConfig+0x21c>
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b0c      	cmp	r3, #12
 8008a54:	d10e      	bne.n	8008a74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d10b      	bne.n	8008a74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a5c:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d063      	beq.n	8008b30 <HAL_RCC_OscConfig+0x2f0>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d15f      	bne.n	8008b30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e2f7      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a7c:	d106      	bne.n	8008a8c <HAL_RCC_OscConfig+0x24c>
 8008a7e:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	e025      	b.n	8008ad8 <HAL_RCC_OscConfig+0x298>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a94:	d114      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x280>
 8008a96:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a02      	ldr	r2, [pc, #8]	; (8008ab0 <HAL_RCC_OscConfig+0x270>)
 8008aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	e013      	b.n	8008ad8 <HAL_RCC_OscConfig+0x298>
 8008ab0:	40021000 	.word	0x40021000
 8008ab4:	08015084 	.word	0x08015084
 8008ab8:	2000003c 	.word	0x2000003c
 8008abc:	20000040 	.word	0x20000040
 8008ac0:	4ba0      	ldr	r3, [pc, #640]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a9f      	ldr	r2, [pc, #636]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	4b9d      	ldr	r3, [pc, #628]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a9c      	ldr	r2, [pc, #624]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d013      	beq.n	8008b08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae0:	f7fd fefc 	bl	80068dc <HAL_GetTick>
 8008ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ae8:	f7fd fef8 	bl	80068dc <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b64      	cmp	r3, #100	; 0x64
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e2b4      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008afa:	4b92      	ldr	r3, [pc, #584]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0f0      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x2a8>
 8008b06:	e014      	b.n	8008b32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b08:	f7fd fee8 	bl	80068dc <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b10:	f7fd fee4 	bl	80068dc <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b64      	cmp	r3, #100	; 0x64
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e2a0      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b22:	4b88      	ldr	r3, [pc, #544]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1f0      	bne.n	8008b10 <HAL_RCC_OscConfig+0x2d0>
 8008b2e:	e000      	b.n	8008b32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d060      	beq.n	8008c00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d005      	beq.n	8008b50 <HAL_RCC_OscConfig+0x310>
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b0c      	cmp	r3, #12
 8008b48:	d119      	bne.n	8008b7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d116      	bne.n	8008b7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b50:	4b7c      	ldr	r3, [pc, #496]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <HAL_RCC_OscConfig+0x328>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e27d      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b68:	4b76      	ldr	r3, [pc, #472]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	061b      	lsls	r3, r3, #24
 8008b76:	4973      	ldr	r1, [pc, #460]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b7c:	e040      	b.n	8008c00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d023      	beq.n	8008bce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b86:	4b6f      	ldr	r3, [pc, #444]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a6e      	ldr	r2, [pc, #440]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b92:	f7fd fea3 	bl	80068dc <HAL_GetTick>
 8008b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b98:	e008      	b.n	8008bac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b9a:	f7fd fe9f 	bl	80068dc <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d901      	bls.n	8008bac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e25b      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bac:	4b65      	ldr	r3, [pc, #404]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0f0      	beq.n	8008b9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb8:	4b62      	ldr	r3, [pc, #392]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	061b      	lsls	r3, r3, #24
 8008bc6:	495f      	ldr	r1, [pc, #380]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	604b      	str	r3, [r1, #4]
 8008bcc:	e018      	b.n	8008c00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bce:	4b5d      	ldr	r3, [pc, #372]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a5c      	ldr	r2, [pc, #368]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bda:	f7fd fe7f 	bl	80068dc <HAL_GetTick>
 8008bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008be2:	f7fd fe7b 	bl	80068dc <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e237      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bf4:	4b53      	ldr	r3, [pc, #332]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f0      	bne.n	8008be2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0308 	and.w	r3, r3, #8
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d03c      	beq.n	8008c86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01c      	beq.n	8008c4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c14:	4b4b      	ldr	r3, [pc, #300]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c1a:	4a4a      	ldr	r2, [pc, #296]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c24:	f7fd fe5a 	bl	80068dc <HAL_GetTick>
 8008c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c2c:	f7fd fe56 	bl	80068dc <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e212      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c3e:	4b41      	ldr	r3, [pc, #260]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0ef      	beq.n	8008c2c <HAL_RCC_OscConfig+0x3ec>
 8008c4c:	e01b      	b.n	8008c86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c4e:	4b3d      	ldr	r3, [pc, #244]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c54:	4a3b      	ldr	r2, [pc, #236]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008c56:	f023 0301 	bic.w	r3, r3, #1
 8008c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c5e:	f7fd fe3d 	bl	80068dc <HAL_GetTick>
 8008c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c64:	e008      	b.n	8008c78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c66:	f7fd fe39 	bl	80068dc <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d901      	bls.n	8008c78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e1f5      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c78:	4b32      	ldr	r3, [pc, #200]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1ef      	bne.n	8008c66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 80a6 	beq.w	8008de0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c94:	2300      	movs	r3, #0
 8008c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008c98:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10d      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ca4:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca8:	4a26      	ldr	r2, [pc, #152]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cae:	6593      	str	r3, [r2, #88]	; 0x58
 8008cb0:	4b24      	ldr	r3, [pc, #144]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cc0:	4b21      	ldr	r3, [pc, #132]	; (8008d48 <HAL_RCC_OscConfig+0x508>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d118      	bne.n	8008cfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ccc:	4b1e      	ldr	r3, [pc, #120]	; (8008d48 <HAL_RCC_OscConfig+0x508>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a1d      	ldr	r2, [pc, #116]	; (8008d48 <HAL_RCC_OscConfig+0x508>)
 8008cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cd8:	f7fd fe00 	bl	80068dc <HAL_GetTick>
 8008cdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cde:	e008      	b.n	8008cf2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ce0:	f7fd fdfc 	bl	80068dc <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e1b8      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <HAL_RCC_OscConfig+0x508>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f0      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d108      	bne.n	8008d18 <HAL_RCC_OscConfig+0x4d8>
 8008d06:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008d0e:	f043 0301 	orr.w	r3, r3, #1
 8008d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d16:	e029      	b.n	8008d6c <HAL_RCC_OscConfig+0x52c>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2b05      	cmp	r3, #5
 8008d1e:	d115      	bne.n	8008d4c <HAL_RCC_OscConfig+0x50c>
 8008d20:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d26:	4a07      	ldr	r2, [pc, #28]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008d28:	f043 0304 	orr.w	r3, r3, #4
 8008d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d30:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d36:	4a03      	ldr	r2, [pc, #12]	; (8008d44 <HAL_RCC_OscConfig+0x504>)
 8008d38:	f043 0301 	orr.w	r3, r3, #1
 8008d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d40:	e014      	b.n	8008d6c <HAL_RCC_OscConfig+0x52c>
 8008d42:	bf00      	nop
 8008d44:	40021000 	.word	0x40021000
 8008d48:	40007000 	.word	0x40007000
 8008d4c:	4b9d      	ldr	r3, [pc, #628]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d52:	4a9c      	ldr	r2, [pc, #624]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d5c:	4b99      	ldr	r3, [pc, #612]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d62:	4a98      	ldr	r2, [pc, #608]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008d64:	f023 0304 	bic.w	r3, r3, #4
 8008d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d016      	beq.n	8008da2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d74:	f7fd fdb2 	bl	80068dc <HAL_GetTick>
 8008d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d7a:	e00a      	b.n	8008d92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d7c:	f7fd fdae 	bl	80068dc <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e168      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d92:	4b8c      	ldr	r3, [pc, #560]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0ed      	beq.n	8008d7c <HAL_RCC_OscConfig+0x53c>
 8008da0:	e015      	b.n	8008dce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008da2:	f7fd fd9b 	bl	80068dc <HAL_GetTick>
 8008da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008da8:	e00a      	b.n	8008dc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008daa:	f7fd fd97 	bl	80068dc <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e151      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dc0:	4b80      	ldr	r3, [pc, #512]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1ed      	bne.n	8008daa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008dce:	7ffb      	ldrb	r3, [r7, #31]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d105      	bne.n	8008de0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dd4:	4b7b      	ldr	r3, [pc, #492]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd8:	4a7a      	ldr	r2, [pc, #488]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d03c      	beq.n	8008e66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01c      	beq.n	8008e2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008df4:	4b73      	ldr	r3, [pc, #460]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dfa:	4a72      	ldr	r2, [pc, #456]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e04:	f7fd fd6a 	bl	80068dc <HAL_GetTick>
 8008e08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e0a:	e008      	b.n	8008e1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e0c:	f7fd fd66 	bl	80068dc <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d901      	bls.n	8008e1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e122      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e1e:	4b69      	ldr	r3, [pc, #420]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0ef      	beq.n	8008e0c <HAL_RCC_OscConfig+0x5cc>
 8008e2c:	e01b      	b.n	8008e66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e2e:	4b65      	ldr	r3, [pc, #404]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e34:	4a63      	ldr	r2, [pc, #396]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008e36:	f023 0301 	bic.w	r3, r3, #1
 8008e3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3e:	f7fd fd4d 	bl	80068dc <HAL_GetTick>
 8008e42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e44:	e008      	b.n	8008e58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e46:	f7fd fd49 	bl	80068dc <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d901      	bls.n	8008e58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e105      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e58:	4b5a      	ldr	r3, [pc, #360]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1ef      	bne.n	8008e46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80f9 	beq.w	8009062 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	f040 80cf 	bne.w	8009018 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008e7a:	4b52      	ldr	r3, [pc, #328]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f003 0203 	and.w	r2, r3, #3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d12c      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d123      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eaa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d11b      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d113      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d109      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d071      	beq.n	8008fcc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2b0c      	cmp	r3, #12
 8008eec:	d068      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008eee:	4b35      	ldr	r3, [pc, #212]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d105      	bne.n	8008f06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008efa:	4b32      	ldr	r3, [pc, #200]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e0ac      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008f0a:	4b2e      	ldr	r3, [pc, #184]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a2d      	ldr	r2, [pc, #180]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008f16:	f7fd fce1 	bl	80068dc <HAL_GetTick>
 8008f1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f1c:	e008      	b.n	8008f30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f1e:	f7fd fcdd 	bl	80068dc <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d901      	bls.n	8008f30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e099      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f30:	4b24      	ldr	r3, [pc, #144]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f0      	bne.n	8008f1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f3c:	4b21      	ldr	r3, [pc, #132]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	4b21      	ldr	r3, [pc, #132]	; (8008fc8 <HAL_RCC_OscConfig+0x788>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	0112      	lsls	r2, r2, #4
 8008f50:	4311      	orrs	r1, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f56:	0212      	lsls	r2, r2, #8
 8008f58:	4311      	orrs	r1, r2
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008f5e:	0852      	lsrs	r2, r2, #1
 8008f60:	3a01      	subs	r2, #1
 8008f62:	0552      	lsls	r2, r2, #21
 8008f64:	4311      	orrs	r1, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008f6a:	0852      	lsrs	r2, r2, #1
 8008f6c:	3a01      	subs	r2, #1
 8008f6e:	0652      	lsls	r2, r2, #25
 8008f70:	4311      	orrs	r1, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f76:	06d2      	lsls	r2, r2, #27
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	4912      	ldr	r1, [pc, #72]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008f80:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0f      	ldr	r2, [pc, #60]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f8c:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	4a0c      	ldr	r2, [pc, #48]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008f98:	f7fd fca0 	bl	80068dc <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fa0:	f7fd fc9c 	bl	80068dc <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e058      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fb2:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <HAL_RCC_OscConfig+0x784>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0f0      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008fbe:	e050      	b.n	8009062 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e04f      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
 8008fc4:	40021000 	.word	0x40021000
 8008fc8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d144      	bne.n	8009062 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008fd8:	4b24      	ldr	r3, [pc, #144]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a23      	ldr	r2, [pc, #140]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8008fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fe2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fe4:	4b21      	ldr	r3, [pc, #132]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	4a20      	ldr	r2, [pc, #128]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8008fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ff0:	f7fd fc74 	bl	80068dc <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ff8:	f7fd fc70 	bl	80068dc <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e02c      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800900a:	4b18      	ldr	r3, [pc, #96]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x7b8>
 8009016:	e024      	b.n	8009062 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2b0c      	cmp	r3, #12
 800901c:	d01f      	beq.n	800905e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a12      	ldr	r2, [pc, #72]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8009024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902a:	f7fd fc57 	bl	80068dc <HAL_GetTick>
 800902e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009032:	f7fd fc53 	bl	80068dc <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e00f      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009044:	4b09      	ldr	r3, [pc, #36]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f0      	bne.n	8009032 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	4905      	ldr	r1, [pc, #20]	; (800906c <HAL_RCC_OscConfig+0x82c>)
 8009056:	4b06      	ldr	r3, [pc, #24]	; (8009070 <HAL_RCC_OscConfig+0x830>)
 8009058:	4013      	ands	r3, r2
 800905a:	60cb      	str	r3, [r1, #12]
 800905c:	e001      	b.n	8009062 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3720      	adds	r7, #32
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	40021000 	.word	0x40021000
 8009070:	feeefffc 	.word	0xfeeefffc

08009074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e11d      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800908c:	4b90      	ldr	r3, [pc, #576]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d910      	bls.n	80090bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909a:	4b8d      	ldr	r3, [pc, #564]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f023 020f 	bic.w	r2, r3, #15
 80090a2:	498b      	ldr	r1, [pc, #556]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090aa:	4b89      	ldr	r3, [pc, #548]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d001      	beq.n	80090bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e105      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d010      	beq.n	80090ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	4b81      	ldr	r3, [pc, #516]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d908      	bls.n	80090ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090d8:	4b7e      	ldr	r3, [pc, #504]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	497b      	ldr	r1, [pc, #492]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d079      	beq.n	80091ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d11e      	bne.n	800913c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090fe:	4b75      	ldr	r3, [pc, #468]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e0dc      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800910e:	f000 fa3b 	bl	8009588 <RCC_GetSysClockFreqFromPLLSource>
 8009112:	4603      	mov	r3, r0
 8009114:	4a70      	ldr	r2, [pc, #448]	; (80092d8 <HAL_RCC_ClockConfig+0x264>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d946      	bls.n	80091a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800911a:	4b6e      	ldr	r3, [pc, #440]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d140      	bne.n	80091a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009126:	4b6b      	ldr	r3, [pc, #428]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800912e:	4a69      	ldr	r2, [pc, #420]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009134:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009136:	2380      	movs	r3, #128	; 0x80
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	e035      	b.n	80091a8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2b02      	cmp	r3, #2
 8009142:	d107      	bne.n	8009154 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009144:	4b63      	ldr	r3, [pc, #396]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d115      	bne.n	800917c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e0b9      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d107      	bne.n	800916c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800915c:	4b5d      	ldr	r3, [pc, #372]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e0ad      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800916c:	4b59      	ldr	r3, [pc, #356]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e0a5      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800917c:	f000 f8b4 	bl	80092e8 <HAL_RCC_GetSysClockFreq>
 8009180:	4603      	mov	r3, r0
 8009182:	4a55      	ldr	r2, [pc, #340]	; (80092d8 <HAL_RCC_ClockConfig+0x264>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d90f      	bls.n	80091a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009188:	4b52      	ldr	r3, [pc, #328]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009194:	4b4f      	ldr	r3, [pc, #316]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800919c:	4a4d      	ldr	r2, [pc, #308]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800919e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80091a4:	2380      	movs	r3, #128	; 0x80
 80091a6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091a8:	4b4a      	ldr	r3, [pc, #296]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f023 0203 	bic.w	r2, r3, #3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	4947      	ldr	r1, [pc, #284]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ba:	f7fd fb8f 	bl	80068dc <HAL_GetTick>
 80091be:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091c0:	e00a      	b.n	80091d8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091c2:	f7fd fb8b 	bl	80068dc <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d901      	bls.n	80091d8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e077      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091d8:	4b3e      	ldr	r3, [pc, #248]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f003 020c 	and.w	r2, r3, #12
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d1eb      	bne.n	80091c2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b80      	cmp	r3, #128	; 0x80
 80091ee:	d105      	bne.n	80091fc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80091f0:	4b38      	ldr	r3, [pc, #224]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	4a37      	ldr	r2, [pc, #220]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80091f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091fa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b00      	cmp	r3, #0
 8009206:	d010      	beq.n	800922a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	4b31      	ldr	r3, [pc, #196]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009214:	429a      	cmp	r2, r3
 8009216:	d208      	bcs.n	800922a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009218:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	492b      	ldr	r1, [pc, #172]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009226:	4313      	orrs	r3, r2
 8009228:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800922a:	4b29      	ldr	r3, [pc, #164]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d210      	bcs.n	800925a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009238:	4b25      	ldr	r3, [pc, #148]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f023 020f 	bic.w	r2, r3, #15
 8009240:	4923      	ldr	r1, [pc, #140]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	4313      	orrs	r3, r2
 8009246:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009248:	4b21      	ldr	r3, [pc, #132]	; (80092d0 <HAL_RCC_ClockConfig+0x25c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	429a      	cmp	r2, r3
 8009254:	d001      	beq.n	800925a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e036      	b.n	80092c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b00      	cmp	r3, #0
 8009264:	d008      	beq.n	8009278 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009266:	4b1b      	ldr	r3, [pc, #108]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	4918      	ldr	r1, [pc, #96]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009274:	4313      	orrs	r3, r2
 8009276:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0308 	and.w	r3, r3, #8
 8009280:	2b00      	cmp	r3, #0
 8009282:	d009      	beq.n	8009298 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009284:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	4910      	ldr	r1, [pc, #64]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 8009294:	4313      	orrs	r3, r2
 8009296:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009298:	f000 f826 	bl	80092e8 <HAL_RCC_GetSysClockFreq>
 800929c:	4602      	mov	r2, r0
 800929e:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <HAL_RCC_ClockConfig+0x260>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	091b      	lsrs	r3, r3, #4
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	490c      	ldr	r1, [pc, #48]	; (80092dc <HAL_RCC_ClockConfig+0x268>)
 80092aa:	5ccb      	ldrb	r3, [r1, r3]
 80092ac:	f003 031f 	and.w	r3, r3, #31
 80092b0:	fa22 f303 	lsr.w	r3, r2, r3
 80092b4:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <HAL_RCC_ClockConfig+0x26c>)
 80092b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80092b8:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <HAL_RCC_ClockConfig+0x270>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fc feb7 	bl	8006030 <HAL_InitTick>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	40022000 	.word	0x40022000
 80092d4:	40021000 	.word	0x40021000
 80092d8:	04c4b400 	.word	0x04c4b400
 80092dc:	08015084 	.word	0x08015084
 80092e0:	2000003c 	.word	0x2000003c
 80092e4:	20000040 	.word	0x20000040

080092e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b089      	sub	sp, #36	; 0x24
 80092ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	2300      	movs	r3, #0
 80092f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092f6:	4b3e      	ldr	r3, [pc, #248]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 030c 	and.w	r3, r3, #12
 80092fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009300:	4b3b      	ldr	r3, [pc, #236]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	f003 0303 	and.w	r3, r3, #3
 8009308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_RCC_GetSysClockFreq+0x34>
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	2b0c      	cmp	r3, #12
 8009314:	d121      	bne.n	800935a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d11e      	bne.n	800935a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800931c:	4b34      	ldr	r3, [pc, #208]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b00      	cmp	r3, #0
 8009326:	d107      	bne.n	8009338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009328:	4b31      	ldr	r3, [pc, #196]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800932a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	e005      	b.n	8009344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009338:	4b2d      	ldr	r3, [pc, #180]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	091b      	lsrs	r3, r3, #4
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009344:	4a2b      	ldr	r2, [pc, #172]	; (80093f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800934c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10d      	bne.n	8009370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009358:	e00a      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b04      	cmp	r3, #4
 800935e:	d102      	bne.n	8009366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009360:	4b25      	ldr	r3, [pc, #148]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009362:	61bb      	str	r3, [r7, #24]
 8009364:	e004      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b08      	cmp	r3, #8
 800936a:	d101      	bne.n	8009370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800936c:	4b23      	ldr	r3, [pc, #140]	; (80093fc <HAL_RCC_GetSysClockFreq+0x114>)
 800936e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2b0c      	cmp	r3, #12
 8009374:	d134      	bne.n	80093e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009376:	4b1e      	ldr	r3, [pc, #120]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b02      	cmp	r3, #2
 8009384:	d003      	beq.n	800938e <HAL_RCC_GetSysClockFreq+0xa6>
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d003      	beq.n	8009394 <HAL_RCC_GetSysClockFreq+0xac>
 800938c:	e005      	b.n	800939a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800938e:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009390:	617b      	str	r3, [r7, #20]
      break;
 8009392:	e005      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009394:	4b19      	ldr	r3, [pc, #100]	; (80093fc <HAL_RCC_GetSysClockFreq+0x114>)
 8009396:	617b      	str	r3, [r7, #20]
      break;
 8009398:	e002      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	617b      	str	r3, [r7, #20]
      break;
 800939e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093a0:	4b13      	ldr	r3, [pc, #76]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	091b      	lsrs	r3, r3, #4
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	3301      	adds	r3, #1
 80093ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80093ae:	4b10      	ldr	r3, [pc, #64]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	0a1b      	lsrs	r3, r3, #8
 80093b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	fb03 f202 	mul.w	r2, r3, r2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093c6:	4b0a      	ldr	r3, [pc, #40]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	0e5b      	lsrs	r3, r3, #25
 80093cc:	f003 0303 	and.w	r3, r3, #3
 80093d0:	3301      	adds	r3, #1
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	fbb2 f3f3 	udiv	r3, r2, r3
 80093de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80093e0:	69bb      	ldr	r3, [r7, #24]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3724      	adds	r7, #36	; 0x24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40021000 	.word	0x40021000
 80093f4:	0801509c 	.word	0x0801509c
 80093f8:	00f42400 	.word	0x00f42400
 80093fc:	007a1200 	.word	0x007a1200

08009400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009404:	4b03      	ldr	r3, [pc, #12]	; (8009414 <HAL_RCC_GetHCLKFreq+0x14>)
 8009406:	681b      	ldr	r3, [r3, #0]
}
 8009408:	4618      	mov	r0, r3
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	2000003c 	.word	0x2000003c

08009418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800941c:	f7ff fff0 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 8009420:	4602      	mov	r2, r0
 8009422:	4b06      	ldr	r3, [pc, #24]	; (800943c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	0a1b      	lsrs	r3, r3, #8
 8009428:	f003 0307 	and.w	r3, r3, #7
 800942c:	4904      	ldr	r1, [pc, #16]	; (8009440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800942e:	5ccb      	ldrb	r3, [r1, r3]
 8009430:	f003 031f 	and.w	r3, r3, #31
 8009434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009438:	4618      	mov	r0, r3
 800943a:	bd80      	pop	{r7, pc}
 800943c:	40021000 	.word	0x40021000
 8009440:	08015094 	.word	0x08015094

08009444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009448:	f7ff ffda 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 800944c:	4602      	mov	r2, r0
 800944e:	4b06      	ldr	r3, [pc, #24]	; (8009468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	0adb      	lsrs	r3, r3, #11
 8009454:	f003 0307 	and.w	r3, r3, #7
 8009458:	4904      	ldr	r1, [pc, #16]	; (800946c <HAL_RCC_GetPCLK2Freq+0x28>)
 800945a:	5ccb      	ldrb	r3, [r1, r3]
 800945c:	f003 031f 	and.w	r3, r3, #31
 8009460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40021000 	.word	0x40021000
 800946c:	08015094 	.word	0x08015094

08009470 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	220f      	movs	r2, #15
 800947e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009480:	4b12      	ldr	r3, [pc, #72]	; (80094cc <HAL_RCC_GetClockConfig+0x5c>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0203 	and.w	r2, r3, #3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800948c:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <HAL_RCC_GetClockConfig+0x5c>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <HAL_RCC_GetClockConfig+0x5c>)
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80094a4:	4b09      	ldr	r3, [pc, #36]	; (80094cc <HAL_RCC_GetClockConfig+0x5c>)
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	08db      	lsrs	r3, r3, #3
 80094aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80094b2:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <HAL_RCC_GetClockConfig+0x60>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 020f 	and.w	r2, r3, #15
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	601a      	str	r2, [r3, #0]
}
 80094be:	bf00      	nop
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	40021000 	.word	0x40021000
 80094d0:	40022000 	.word	0x40022000

080094d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80094dc:	2300      	movs	r3, #0
 80094de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80094e0:	4b27      	ldr	r3, [pc, #156]	; (8009580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80094ec:	f7ff f8e4 	bl	80086b8 <HAL_PWREx_GetVoltageRange>
 80094f0:	6178      	str	r0, [r7, #20]
 80094f2:	e014      	b.n	800951e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80094f4:	4b22      	ldr	r3, [pc, #136]	; (8009580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f8:	4a21      	ldr	r2, [pc, #132]	; (8009580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80094fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009500:	4b1f      	ldr	r3, [pc, #124]	; (8009580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800950c:	f7ff f8d4 	bl	80086b8 <HAL_PWREx_GetVoltageRange>
 8009510:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009512:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	4a1a      	ldr	r2, [pc, #104]	; (8009580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800951c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009524:	d10b      	bne.n	800953e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b80      	cmp	r3, #128	; 0x80
 800952a:	d913      	bls.n	8009554 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2ba0      	cmp	r3, #160	; 0xa0
 8009530:	d902      	bls.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009532:	2302      	movs	r3, #2
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	e00d      	b.n	8009554 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009538:	2301      	movs	r3, #1
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	e00a      	b.n	8009554 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b7f      	cmp	r3, #127	; 0x7f
 8009542:	d902      	bls.n	800954a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009544:	2302      	movs	r3, #2
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	e004      	b.n	8009554 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b70      	cmp	r3, #112	; 0x70
 800954e:	d101      	bne.n	8009554 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009550:	2301      	movs	r3, #1
 8009552:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009554:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f023 020f 	bic.w	r2, r3, #15
 800955c:	4909      	ldr	r1, [pc, #36]	; (8009584 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	4313      	orrs	r3, r2
 8009562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009564:	4b07      	ldr	r3, [pc, #28]	; (8009584 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 030f 	and.w	r3, r3, #15
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	429a      	cmp	r2, r3
 8009570:	d001      	beq.n	8009576 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	40021000 	.word	0x40021000
 8009584:	40022000 	.word	0x40022000

08009588 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800958e:	4b2d      	ldr	r3, [pc, #180]	; (8009644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b03      	cmp	r3, #3
 800959c:	d00b      	beq.n	80095b6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d825      	bhi.n	80095f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d008      	beq.n	80095bc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d11f      	bne.n	80095f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80095b0:	4b25      	ldr	r3, [pc, #148]	; (8009648 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80095b2:	613b      	str	r3, [r7, #16]
    break;
 80095b4:	e01f      	b.n	80095f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80095b6:	4b25      	ldr	r3, [pc, #148]	; (800964c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80095b8:	613b      	str	r3, [r7, #16]
    break;
 80095ba:	e01c      	b.n	80095f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80095bc:	4b21      	ldr	r3, [pc, #132]	; (8009644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0308 	and.w	r3, r3, #8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d107      	bne.n	80095d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80095c8:	4b1e      	ldr	r3, [pc, #120]	; (8009644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80095ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	f003 030f 	and.w	r3, r3, #15
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	e005      	b.n	80095e4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80095d8:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	091b      	lsrs	r3, r3, #4
 80095de:	f003 030f 	and.w	r3, r3, #15
 80095e2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80095e4:	4a1a      	ldr	r2, [pc, #104]	; (8009650 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ec:	613b      	str	r3, [r7, #16]
    break;
 80095ee:	e002      	b.n	80095f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]
    break;
 80095f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095f6:	4b13      	ldr	r3, [pc, #76]	; (8009644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	091b      	lsrs	r3, r3, #4
 80095fc:	f003 030f 	and.w	r3, r3, #15
 8009600:	3301      	adds	r3, #1
 8009602:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	0a1b      	lsrs	r3, r3, #8
 800960a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	fb03 f202 	mul.w	r2, r3, r2
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	fbb2 f3f3 	udiv	r3, r2, r3
 800961a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	0e5b      	lsrs	r3, r3, #25
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	3301      	adds	r3, #1
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	fbb2 f3f3 	udiv	r3, r2, r3
 8009634:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009636:	683b      	ldr	r3, [r7, #0]
}
 8009638:	4618      	mov	r0, r3
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	40021000 	.word	0x40021000
 8009648:	00f42400 	.word	0x00f42400
 800964c:	007a1200 	.word	0x007a1200
 8009650:	0801509c 	.word	0x0801509c

08009654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800965c:	2300      	movs	r3, #0
 800965e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009660:	2300      	movs	r3, #0
 8009662:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800966c:	2b00      	cmp	r3, #0
 800966e:	d040      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009674:	2b80      	cmp	r3, #128	; 0x80
 8009676:	d02a      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009678:	2b80      	cmp	r3, #128	; 0x80
 800967a:	d825      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800967c:	2b60      	cmp	r3, #96	; 0x60
 800967e:	d026      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009680:	2b60      	cmp	r3, #96	; 0x60
 8009682:	d821      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009684:	2b40      	cmp	r3, #64	; 0x40
 8009686:	d006      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009688:	2b40      	cmp	r3, #64	; 0x40
 800968a:	d81d      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009690:	2b20      	cmp	r3, #32
 8009692:	d010      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009694:	e018      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009696:	4b89      	ldr	r3, [pc, #548]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	4a88      	ldr	r2, [pc, #544]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800969c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80096a2:	e015      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3304      	adds	r3, #4
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fb02 	bl	8009cb4 <RCCEx_PLLSAI1_Config>
 80096b0:	4603      	mov	r3, r0
 80096b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80096b4:	e00c      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3320      	adds	r3, #32
 80096ba:	2100      	movs	r1, #0
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fbed 	bl	8009e9c <RCCEx_PLLSAI2_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80096c6:	e003      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	74fb      	strb	r3, [r7, #19]
      break;
 80096cc:	e000      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80096ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d0:	7cfb      	ldrb	r3, [r7, #19]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10b      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096d6:	4b79      	ldr	r3, [pc, #484]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80096d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e4:	4975      	ldr	r1, [pc, #468]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80096ec:	e001      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ee:	7cfb      	ldrb	r3, [r7, #19]
 80096f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d047      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009706:	d030      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800970c:	d82a      	bhi.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800970e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009712:	d02a      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009718:	d824      	bhi.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800971a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971e:	d008      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009724:	d81e      	bhi.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800972a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972e:	d010      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009730:	e018      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009732:	4b62      	ldr	r3, [pc, #392]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	4a61      	ldr	r2, [pc, #388]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800973c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800973e:	e015      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	2100      	movs	r1, #0
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fab4 	bl	8009cb4 <RCCEx_PLLSAI1_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009750:	e00c      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3320      	adds	r3, #32
 8009756:	2100      	movs	r1, #0
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fb9f 	bl	8009e9c <RCCEx_PLLSAI2_Config>
 800975e:	4603      	mov	r3, r0
 8009760:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009762:	e003      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	74fb      	strb	r3, [r7, #19]
      break;
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800976a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800976c:	7cfb      	ldrb	r3, [r7, #19]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10b      	bne.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009772:	4b52      	ldr	r3, [pc, #328]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009780:	494e      	ldr	r1, [pc, #312]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009782:	4313      	orrs	r3, r2
 8009784:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009788:	e001      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800978a:	7cfb      	ldrb	r3, [r7, #19]
 800978c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 809f 	beq.w	80098da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800979c:	2300      	movs	r3, #0
 800979e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80097a0:	4b46      	ldr	r3, [pc, #280]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e000      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80097b0:	2300      	movs	r3, #0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00d      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097b6:	4b41      	ldr	r3, [pc, #260]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ba:	4a40      	ldr	r2, [pc, #256]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c0:	6593      	str	r3, [r2, #88]	; 0x58
 80097c2:	4b3e      	ldr	r3, [pc, #248]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80097c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ca:	60bb      	str	r3, [r7, #8]
 80097cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097ce:	2301      	movs	r3, #1
 80097d0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097d2:	4b3b      	ldr	r3, [pc, #236]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a3a      	ldr	r2, [pc, #232]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80097d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097de:	f7fd f87d 	bl	80068dc <HAL_GetTick>
 80097e2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80097e4:	e009      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097e6:	f7fd f879 	bl	80068dc <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d902      	bls.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	74fb      	strb	r3, [r7, #19]
        break;
 80097f8:	e005      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80097fa:	4b31      	ldr	r3, [pc, #196]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0ef      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009806:	7cfb      	ldrb	r3, [r7, #19]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d15b      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800980c:	4b2b      	ldr	r3, [pc, #172]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800980e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009816:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d01f      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	429a      	cmp	r2, r3
 8009828:	d019      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800982a:	4b24      	ldr	r3, [pc, #144]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800982c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009834:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009836:	4b21      	ldr	r3, [pc, #132]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983c:	4a1f      	ldr	r2, [pc, #124]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800983e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009846:	4b1d      	ldr	r3, [pc, #116]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984c:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800984e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009856:	4a19      	ldr	r2, [pc, #100]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d016      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009868:	f7fd f838 	bl	80068dc <HAL_GetTick>
 800986c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800986e:	e00b      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009870:	f7fd f834 	bl	80068dc <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	f241 3288 	movw	r2, #5000	; 0x1388
 800987e:	4293      	cmp	r3, r2
 8009880:	d902      	bls.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	74fb      	strb	r3, [r7, #19]
            break;
 8009886:	e006      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009888:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800988a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0ec      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009896:	7cfb      	ldrb	r3, [r7, #19]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10c      	bne.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800989c:	4b07      	ldr	r3, [pc, #28]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800989e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ac:	4903      	ldr	r1, [pc, #12]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80098b4:	e008      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098b6:	7cfb      	ldrb	r3, [r7, #19]
 80098b8:	74bb      	strb	r3, [r7, #18]
 80098ba:	e005      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80098bc:	40021000 	.word	0x40021000
 80098c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c4:	7cfb      	ldrb	r3, [r7, #19]
 80098c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098c8:	7c7b      	ldrb	r3, [r7, #17]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d105      	bne.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098ce:	4ba0      	ldr	r3, [pc, #640]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d2:	4a9f      	ldr	r2, [pc, #636]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80098e6:	4b9a      	ldr	r3, [pc, #616]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ec:	f023 0203 	bic.w	r2, r3, #3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f4:	4996      	ldr	r1, [pc, #600]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009908:	4b91      	ldr	r3, [pc, #580]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800990a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800990e:	f023 020c 	bic.w	r2, r3, #12
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009916:	498e      	ldr	r1, [pc, #568]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009918:	4313      	orrs	r3, r2
 800991a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800992a:	4b89      	ldr	r3, [pc, #548]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800992c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009938:	4985      	ldr	r1, [pc, #532]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800993a:	4313      	orrs	r3, r2
 800993c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0308 	and.w	r3, r3, #8
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800994c:	4b80      	ldr	r3, [pc, #512]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800995a:	497d      	ldr	r1, [pc, #500]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800995c:	4313      	orrs	r3, r2
 800995e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0310 	and.w	r3, r3, #16
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800996e:	4b78      	ldr	r3, [pc, #480]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800997c:	4974      	ldr	r1, [pc, #464]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800997e:	4313      	orrs	r3, r2
 8009980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0320 	and.w	r3, r3, #32
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00a      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009990:	4b6f      	ldr	r3, [pc, #444]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999e:	496c      	ldr	r1, [pc, #432]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099b2:	4b67      	ldr	r3, [pc, #412]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c0:	4963      	ldr	r1, [pc, #396]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00a      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80099d4:	4b5e      	ldr	r3, [pc, #376]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e2:	495b      	ldr	r1, [pc, #364]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00a      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099f6:	4b56      	ldr	r3, [pc, #344]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80099f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a04:	4952      	ldr	r1, [pc, #328]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00a      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a18:	4b4d      	ldr	r3, [pc, #308]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a26:	494a      	ldr	r1, [pc, #296]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a3a:	4b45      	ldr	r3, [pc, #276]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a48:	4941      	ldr	r1, [pc, #260]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00a      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a5c:	4b3c      	ldr	r3, [pc, #240]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a62:	f023 0203 	bic.w	r2, r3, #3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a6a:	4939      	ldr	r1, [pc, #228]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d028      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a7e:	4b34      	ldr	r3, [pc, #208]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8c:	4930      	ldr	r1, [pc, #192]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a9c:	d106      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a9e:	4b2c      	ldr	r3, [pc, #176]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	4a2b      	ldr	r2, [pc, #172]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa8:	60d3      	str	r3, [r2, #12]
 8009aaa:	e011      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ab4:	d10c      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	2101      	movs	r1, #1
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f8f9 	bl	8009cb4 <RCCEx_PLLSAI1_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009ac6:	7cfb      	ldrb	r3, [r7, #19]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009acc:	7cfb      	ldrb	r3, [r7, #19]
 8009ace:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d04d      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ae4:	d108      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009ae6:	4b1a      	ldr	r3, [pc, #104]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009aec:	4a18      	ldr	r2, [pc, #96]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009af2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009af6:	e012      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009af8:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009afe:	4a14      	ldr	r2, [pc, #80]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b04:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b16:	490e      	ldr	r1, [pc, #56]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b26:	d106      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	4a08      	ldr	r2, [pc, #32]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b32:	60d3      	str	r3, [r2, #12]
 8009b34:	e020      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b3e:	d109      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009b40:	4b03      	ldr	r3, [pc, #12]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	4a02      	ldr	r2, [pc, #8]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b4a:	60d3      	str	r3, [r2, #12]
 8009b4c:	e014      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009b4e:	bf00      	nop
 8009b50:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b5c:	d10c      	bne.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3304      	adds	r3, #4
 8009b62:	2101      	movs	r1, #1
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 f8a5 	bl	8009cb4 <RCCEx_PLLSAI1_Config>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b6e:	7cfb      	ldrb	r3, [r7, #19]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009b74:	7cfb      	ldrb	r3, [r7, #19]
 8009b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d028      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b84:	4b4a      	ldr	r3, [pc, #296]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b92:	4947      	ldr	r1, [pc, #284]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ba2:	d106      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ba4:	4b42      	ldr	r3, [pc, #264]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	4a41      	ldr	r2, [pc, #260]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bae:	60d3      	str	r3, [r2, #12]
 8009bb0:	e011      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bba:	d10c      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f876 	bl	8009cb4 <RCCEx_PLLSAI1_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bcc:	7cfb      	ldrb	r3, [r7, #19]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8009bd2:	7cfb      	ldrb	r3, [r7, #19]
 8009bd4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01e      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009be2:	4b33      	ldr	r3, [pc, #204]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bf2:	492f      	ldr	r1, [pc, #188]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c04:	d10c      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 f851 	bl	8009cb4 <RCCEx_PLLSAI1_Config>
 8009c12:	4603      	mov	r3, r0
 8009c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c16:	7cfb      	ldrb	r3, [r7, #19]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009c1c:	7cfb      	ldrb	r3, [r7, #19]
 8009c1e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00b      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c2c:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c32:	f023 0204 	bic.w	r2, r3, #4
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c3c:	491c      	ldr	r1, [pc, #112]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009c50:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c56:	f023 0218 	bic.w	r2, r3, #24
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c60:	4913      	ldr	r1, [pc, #76]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d017      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c84:	490a      	ldr	r1, [pc, #40]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c96:	d105      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	4a04      	ldr	r2, [pc, #16]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ca2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009ca4:	7cbb      	ldrb	r3, [r7, #18]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40021000 	.word	0x40021000

08009cb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009cc2:	4b72      	ldr	r3, [pc, #456]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00e      	beq.n	8009cec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009cce:	4b6f      	ldr	r3, [pc, #444]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f003 0203 	and.w	r2, r3, #3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d103      	bne.n	8009ce6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d142      	bne.n	8009d6c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	73fb      	strb	r3, [r7, #15]
 8009cea:	e03f      	b.n	8009d6c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d018      	beq.n	8009d26 <RCCEx_PLLSAI1_Config+0x72>
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d825      	bhi.n	8009d44 <RCCEx_PLLSAI1_Config+0x90>
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d002      	beq.n	8009d02 <RCCEx_PLLSAI1_Config+0x4e>
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d009      	beq.n	8009d14 <RCCEx_PLLSAI1_Config+0x60>
 8009d00:	e020      	b.n	8009d44 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009d02:	4b62      	ldr	r3, [pc, #392]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d11d      	bne.n	8009d4a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d12:	e01a      	b.n	8009d4a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009d14:	4b5d      	ldr	r3, [pc, #372]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d116      	bne.n	8009d4e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d24:	e013      	b.n	8009d4e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d26:	4b59      	ldr	r3, [pc, #356]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10f      	bne.n	8009d52 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d32:	4b56      	ldr	r3, [pc, #344]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d109      	bne.n	8009d52 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d42:	e006      	b.n	8009d52 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	73fb      	strb	r3, [r7, #15]
      break;
 8009d48:	e004      	b.n	8009d54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009d4a:	bf00      	nop
 8009d4c:	e002      	b.n	8009d54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009d4e:	bf00      	nop
 8009d50:	e000      	b.n	8009d54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d108      	bne.n	8009d6c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009d5a:	4b4c      	ldr	r3, [pc, #304]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f023 0203 	bic.w	r2, r3, #3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4949      	ldr	r1, [pc, #292]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 8086 	bne.w	8009e80 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009d74:	4b45      	ldr	r3, [pc, #276]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a44      	ldr	r2, [pc, #272]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d80:	f7fc fdac 	bl	80068dc <HAL_GetTick>
 8009d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d86:	e009      	b.n	8009d9c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009d88:	f7fc fda8 	bl	80068dc <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d902      	bls.n	8009d9c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	73fb      	strb	r3, [r7, #15]
        break;
 8009d9a:	e005      	b.n	8009da8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d9c:	4b3b      	ldr	r3, [pc, #236]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1ef      	bne.n	8009d88 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d168      	bne.n	8009e80 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d113      	bne.n	8009ddc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009db4:	4b35      	ldr	r3, [pc, #212]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	4b35      	ldr	r3, [pc, #212]	; (8009e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009dba:	4013      	ands	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6892      	ldr	r2, [r2, #8]
 8009dc0:	0211      	lsls	r1, r2, #8
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	68d2      	ldr	r2, [r2, #12]
 8009dc6:	06d2      	lsls	r2, r2, #27
 8009dc8:	4311      	orrs	r1, r2
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6852      	ldr	r2, [r2, #4]
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	0112      	lsls	r2, r2, #4
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	492d      	ldr	r1, [pc, #180]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	610b      	str	r3, [r1, #16]
 8009dda:	e02d      	b.n	8009e38 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d115      	bne.n	8009e0e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009de2:	4b2a      	ldr	r3, [pc, #168]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009de4:	691a      	ldr	r2, [r3, #16]
 8009de6:	4b2b      	ldr	r3, [pc, #172]	; (8009e94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6892      	ldr	r2, [r2, #8]
 8009dee:	0211      	lsls	r1, r2, #8
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6912      	ldr	r2, [r2, #16]
 8009df4:	0852      	lsrs	r2, r2, #1
 8009df6:	3a01      	subs	r2, #1
 8009df8:	0552      	lsls	r2, r2, #21
 8009dfa:	4311      	orrs	r1, r2
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	6852      	ldr	r2, [r2, #4]
 8009e00:	3a01      	subs	r2, #1
 8009e02:	0112      	lsls	r2, r2, #4
 8009e04:	430a      	orrs	r2, r1
 8009e06:	4921      	ldr	r1, [pc, #132]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	610b      	str	r3, [r1, #16]
 8009e0c:	e014      	b.n	8009e38 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e0e:	4b1f      	ldr	r3, [pc, #124]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	4b21      	ldr	r3, [pc, #132]	; (8009e98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	6892      	ldr	r2, [r2, #8]
 8009e1a:	0211      	lsls	r1, r2, #8
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6952      	ldr	r2, [r2, #20]
 8009e20:	0852      	lsrs	r2, r2, #1
 8009e22:	3a01      	subs	r2, #1
 8009e24:	0652      	lsls	r2, r2, #25
 8009e26:	4311      	orrs	r1, r2
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6852      	ldr	r2, [r2, #4]
 8009e2c:	3a01      	subs	r2, #1
 8009e2e:	0112      	lsls	r2, r2, #4
 8009e30:	430a      	orrs	r2, r1
 8009e32:	4916      	ldr	r1, [pc, #88]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009e38:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a13      	ldr	r2, [pc, #76]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e44:	f7fc fd4a 	bl	80068dc <HAL_GetTick>
 8009e48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e4a:	e009      	b.n	8009e60 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e4c:	f7fc fd46 	bl	80068dc <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d902      	bls.n	8009e60 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	73fb      	strb	r3, [r7, #15]
          break;
 8009e5e:	e005      	b.n	8009e6c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0ef      	beq.n	8009e4c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009e72:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	4904      	ldr	r1, [pc, #16]	; (8009e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	40021000 	.word	0x40021000
 8009e90:	07ff800f 	.word	0x07ff800f
 8009e94:	ff9f800f 	.word	0xff9f800f
 8009e98:	f9ff800f 	.word	0xf9ff800f

08009e9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009eaa:	4b72      	ldr	r3, [pc, #456]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f003 0303 	and.w	r3, r3, #3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00e      	beq.n	8009ed4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009eb6:	4b6f      	ldr	r3, [pc, #444]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f003 0203 	and.w	r2, r3, #3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d103      	bne.n	8009ece <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d142      	bne.n	8009f54 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	73fb      	strb	r3, [r7, #15]
 8009ed2:	e03f      	b.n	8009f54 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b03      	cmp	r3, #3
 8009eda:	d018      	beq.n	8009f0e <RCCEx_PLLSAI2_Config+0x72>
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d825      	bhi.n	8009f2c <RCCEx_PLLSAI2_Config+0x90>
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d002      	beq.n	8009eea <RCCEx_PLLSAI2_Config+0x4e>
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d009      	beq.n	8009efc <RCCEx_PLLSAI2_Config+0x60>
 8009ee8:	e020      	b.n	8009f2c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009eea:	4b62      	ldr	r3, [pc, #392]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d11d      	bne.n	8009f32 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009efa:	e01a      	b.n	8009f32 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009efc:	4b5d      	ldr	r3, [pc, #372]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d116      	bne.n	8009f36 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f0c:	e013      	b.n	8009f36 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009f0e:	4b59      	ldr	r3, [pc, #356]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10f      	bne.n	8009f3a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009f1a:	4b56      	ldr	r3, [pc, #344]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f2a:	e006      	b.n	8009f3a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f30:	e004      	b.n	8009f3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f32:	bf00      	nop
 8009f34:	e002      	b.n	8009f3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f36:	bf00      	nop
 8009f38:	e000      	b.n	8009f3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d108      	bne.n	8009f54 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009f42:	4b4c      	ldr	r3, [pc, #304]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f023 0203 	bic.w	r2, r3, #3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4949      	ldr	r1, [pc, #292]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f040 8086 	bne.w	800a068 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009f5c:	4b45      	ldr	r3, [pc, #276]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a44      	ldr	r2, [pc, #272]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f68:	f7fc fcb8 	bl	80068dc <HAL_GetTick>
 8009f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009f6e:	e009      	b.n	8009f84 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009f70:	f7fc fcb4 	bl	80068dc <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d902      	bls.n	8009f84 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	73fb      	strb	r3, [r7, #15]
        break;
 8009f82:	e005      	b.n	8009f90 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009f84:	4b3b      	ldr	r3, [pc, #236]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1ef      	bne.n	8009f70 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d168      	bne.n	800a068 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d113      	bne.n	8009fc4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009f9c:	4b35      	ldr	r3, [pc, #212]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009f9e:	695a      	ldr	r2, [r3, #20]
 8009fa0:	4b35      	ldr	r3, [pc, #212]	; (800a078 <RCCEx_PLLSAI2_Config+0x1dc>)
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6892      	ldr	r2, [r2, #8]
 8009fa8:	0211      	lsls	r1, r2, #8
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	68d2      	ldr	r2, [r2, #12]
 8009fae:	06d2      	lsls	r2, r2, #27
 8009fb0:	4311      	orrs	r1, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6852      	ldr	r2, [r2, #4]
 8009fb6:	3a01      	subs	r2, #1
 8009fb8:	0112      	lsls	r2, r2, #4
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	492d      	ldr	r1, [pc, #180]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	614b      	str	r3, [r1, #20]
 8009fc2:	e02d      	b.n	800a020 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d115      	bne.n	8009ff6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009fca:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009fcc:	695a      	ldr	r2, [r3, #20]
 8009fce:	4b2b      	ldr	r3, [pc, #172]	; (800a07c <RCCEx_PLLSAI2_Config+0x1e0>)
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6892      	ldr	r2, [r2, #8]
 8009fd6:	0211      	lsls	r1, r2, #8
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6912      	ldr	r2, [r2, #16]
 8009fdc:	0852      	lsrs	r2, r2, #1
 8009fde:	3a01      	subs	r2, #1
 8009fe0:	0552      	lsls	r2, r2, #21
 8009fe2:	4311      	orrs	r1, r2
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6852      	ldr	r2, [r2, #4]
 8009fe8:	3a01      	subs	r2, #1
 8009fea:	0112      	lsls	r2, r2, #4
 8009fec:	430a      	orrs	r2, r1
 8009fee:	4921      	ldr	r1, [pc, #132]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	614b      	str	r3, [r1, #20]
 8009ff4:	e014      	b.n	800a020 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009ff6:	4b1f      	ldr	r3, [pc, #124]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ff8:	695a      	ldr	r2, [r3, #20]
 8009ffa:	4b21      	ldr	r3, [pc, #132]	; (800a080 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6892      	ldr	r2, [r2, #8]
 800a002:	0211      	lsls	r1, r2, #8
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6952      	ldr	r2, [r2, #20]
 800a008:	0852      	lsrs	r2, r2, #1
 800a00a:	3a01      	subs	r2, #1
 800a00c:	0652      	lsls	r2, r2, #25
 800a00e:	4311      	orrs	r1, r2
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6852      	ldr	r2, [r2, #4]
 800a014:	3a01      	subs	r2, #1
 800a016:	0112      	lsls	r2, r2, #4
 800a018:	430a      	orrs	r2, r1
 800a01a:	4916      	ldr	r1, [pc, #88]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a020:	4b14      	ldr	r3, [pc, #80]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a13      	ldr	r2, [pc, #76]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a02a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a02c:	f7fc fc56 	bl	80068dc <HAL_GetTick>
 800a030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a032:	e009      	b.n	800a048 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a034:	f7fc fc52 	bl	80068dc <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d902      	bls.n	800a048 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	73fb      	strb	r3, [r7, #15]
          break;
 800a046:	e005      	b.n	800a054 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0ef      	beq.n	800a034 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a05c:	695a      	ldr	r2, [r3, #20]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	4904      	ldr	r1, [pc, #16]	; (800a074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a064:	4313      	orrs	r3, r2
 800a066:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	40021000 	.word	0x40021000
 800a078:	07ff800f 	.word	0x07ff800f
 800a07c:	ff9f800f 	.word	0xff9f800f
 800a080:	f9ff800f 	.word	0xf9ff800f

0800a084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e049      	b.n	800a12a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f841 	bl	800a132 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f000 f9f8 	bl	800a4b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
	...

0800a148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d001      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e04f      	b.n	800a200 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0201 	orr.w	r2, r2, #1
 800a176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a23      	ldr	r2, [pc, #140]	; (800a20c <HAL_TIM_Base_Start_IT+0xc4>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d01d      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x76>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18a:	d018      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x76>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a1f      	ldr	r2, [pc, #124]	; (800a210 <HAL_TIM_Base_Start_IT+0xc8>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x76>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a1e      	ldr	r2, [pc, #120]	; (800a214 <HAL_TIM_Base_Start_IT+0xcc>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00e      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x76>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1c      	ldr	r2, [pc, #112]	; (800a218 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d009      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x76>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a1b      	ldr	r2, [pc, #108]	; (800a21c <HAL_TIM_Base_Start_IT+0xd4>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d004      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x76>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a19      	ldr	r2, [pc, #100]	; (800a220 <HAL_TIM_Base_Start_IT+0xd8>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d115      	bne.n	800a1ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	4b17      	ldr	r3, [pc, #92]	; (800a224 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b06      	cmp	r3, #6
 800a1ce:	d015      	beq.n	800a1fc <HAL_TIM_Base_Start_IT+0xb4>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d6:	d011      	beq.n	800a1fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0201 	orr.w	r2, r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e8:	e008      	b.n	800a1fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f042 0201 	orr.w	r2, r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	e000      	b.n	800a1fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	40012c00 	.word	0x40012c00
 800a210:	40000400 	.word	0x40000400
 800a214:	40000800 	.word	0x40000800
 800a218:	40000c00 	.word	0x40000c00
 800a21c:	40013400 	.word	0x40013400
 800a220:	40014000 	.word	0x40014000
 800a224:	00010007 	.word	0x00010007

0800a228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d122      	bne.n	800a284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d11b      	bne.n	800a284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0202 	mvn.w	r2, #2
 800a254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f905 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a270:	e005      	b.n	800a27e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f8f7 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f908 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	f003 0304 	and.w	r3, r3, #4
 800a28e:	2b04      	cmp	r3, #4
 800a290:	d122      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d11b      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f06f 0204 	mvn.w	r2, #4
 800a2a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8db 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a2c4:	e005      	b.n	800a2d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f8cd 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f8de 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 0308 	and.w	r3, r3, #8
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d122      	bne.n	800a32c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f003 0308 	and.w	r3, r3, #8
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d11b      	bne.n	800a32c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f06f 0208 	mvn.w	r2, #8
 800a2fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2204      	movs	r2, #4
 800a302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f8b1 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a318:	e005      	b.n	800a326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f8a3 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f8b4 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	f003 0310 	and.w	r3, r3, #16
 800a336:	2b10      	cmp	r3, #16
 800a338:	d122      	bne.n	800a380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b10      	cmp	r3, #16
 800a346:	d11b      	bne.n	800a380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f06f 0210 	mvn.w	r2, #16
 800a350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2208      	movs	r2, #8
 800a356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f887 	bl	800a47a <HAL_TIM_IC_CaptureCallback>
 800a36c:	e005      	b.n	800a37a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f879 	bl	800a466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f88a 	bl	800a48e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d10e      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d107      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f06f 0201 	mvn.w	r2, #1
 800a3a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7fa ff4a 	bl	8005240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b6:	2b80      	cmp	r3, #128	; 0x80
 800a3b8:	d10e      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c4:	2b80      	cmp	r3, #128	; 0x80
 800a3c6:	d107      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f914 	bl	800a600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3e6:	d10e      	bne.n	800a406 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f2:	2b80      	cmp	r3, #128	; 0x80
 800a3f4:	d107      	bne.n	800a406 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f907 	bl	800a614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a410:	2b40      	cmp	r3, #64	; 0x40
 800a412:	d10e      	bne.n	800a432 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d107      	bne.n	800a432 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f838 	bl	800a4a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f003 0320 	and.w	r3, r3, #32
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	d10e      	bne.n	800a45e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d107      	bne.n	800a45e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f06f 0220 	mvn.w	r2, #32
 800a456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f8c7 	bl	800a5ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a40      	ldr	r2, [pc, #256]	; (800a5cc <TIM_Base_SetConfig+0x114>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d013      	beq.n	800a4f8 <TIM_Base_SetConfig+0x40>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d6:	d00f      	beq.n	800a4f8 <TIM_Base_SetConfig+0x40>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a3d      	ldr	r2, [pc, #244]	; (800a5d0 <TIM_Base_SetConfig+0x118>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d00b      	beq.n	800a4f8 <TIM_Base_SetConfig+0x40>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a3c      	ldr	r2, [pc, #240]	; (800a5d4 <TIM_Base_SetConfig+0x11c>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d007      	beq.n	800a4f8 <TIM_Base_SetConfig+0x40>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a3b      	ldr	r2, [pc, #236]	; (800a5d8 <TIM_Base_SetConfig+0x120>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d003      	beq.n	800a4f8 <TIM_Base_SetConfig+0x40>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a3a      	ldr	r2, [pc, #232]	; (800a5dc <TIM_Base_SetConfig+0x124>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d108      	bne.n	800a50a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a2f      	ldr	r2, [pc, #188]	; (800a5cc <TIM_Base_SetConfig+0x114>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d01f      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a518:	d01b      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2c      	ldr	r2, [pc, #176]	; (800a5d0 <TIM_Base_SetConfig+0x118>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d017      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a2b      	ldr	r2, [pc, #172]	; (800a5d4 <TIM_Base_SetConfig+0x11c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d013      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a2a      	ldr	r2, [pc, #168]	; (800a5d8 <TIM_Base_SetConfig+0x120>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d00f      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a29      	ldr	r2, [pc, #164]	; (800a5dc <TIM_Base_SetConfig+0x124>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d00b      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a28      	ldr	r2, [pc, #160]	; (800a5e0 <TIM_Base_SetConfig+0x128>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d007      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a27      	ldr	r2, [pc, #156]	; (800a5e4 <TIM_Base_SetConfig+0x12c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d003      	beq.n	800a552 <TIM_Base_SetConfig+0x9a>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a26      	ldr	r2, [pc, #152]	; (800a5e8 <TIM_Base_SetConfig+0x130>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d108      	bne.n	800a564 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4313      	orrs	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a10      	ldr	r2, [pc, #64]	; (800a5cc <TIM_Base_SetConfig+0x114>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d00f      	beq.n	800a5b0 <TIM_Base_SetConfig+0xf8>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a12      	ldr	r2, [pc, #72]	; (800a5dc <TIM_Base_SetConfig+0x124>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d00b      	beq.n	800a5b0 <TIM_Base_SetConfig+0xf8>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a11      	ldr	r2, [pc, #68]	; (800a5e0 <TIM_Base_SetConfig+0x128>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d007      	beq.n	800a5b0 <TIM_Base_SetConfig+0xf8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a10      	ldr	r2, [pc, #64]	; (800a5e4 <TIM_Base_SetConfig+0x12c>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d003      	beq.n	800a5b0 <TIM_Base_SetConfig+0xf8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a0f      	ldr	r2, [pc, #60]	; (800a5e8 <TIM_Base_SetConfig+0x130>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d103      	bne.n	800a5b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	691a      	ldr	r2, [r3, #16]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	615a      	str	r2, [r3, #20]
}
 800a5be:	bf00      	nop
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	40012c00 	.word	0x40012c00
 800a5d0:	40000400 	.word	0x40000400
 800a5d4:	40000800 	.word	0x40000800
 800a5d8:	40000c00 	.word	0x40000c00
 800a5dc:	40013400 	.word	0x40013400
 800a5e0:	40014000 	.word	0x40014000
 800a5e4:	40014400 	.word	0x40014400
 800a5e8:	40014800 	.word	0x40014800

0800a5ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e042      	b.n	800a6c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a640:	2b00      	cmp	r3, #0
 800a642:	d106      	bne.n	800a652 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7fb fbb5 	bl	8005dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2224      	movs	r2, #36	; 0x24
 800a656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 0201 	bic.w	r2, r2, #1
 800a668:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fc52 	bl	800af14 <UART_SetConfig>
 800a670:	4603      	mov	r3, r0
 800a672:	2b01      	cmp	r3, #1
 800a674:	d101      	bne.n	800a67a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e022      	b.n	800a6c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 ff42 	bl	800b50c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f042 0201 	orr.w	r2, r2, #1
 800a6b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 ffc9 	bl	800b650 <UART_CheckIdleState>
 800a6be:	4603      	mov	r3, r0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08a      	sub	sp, #40	; 0x28
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	f040 8084 	bne.w	800a7ec <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <HAL_UART_Transmit+0x28>
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e07c      	b.n	800a7ee <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_UART_Transmit+0x3a>
 800a6fe:	2302      	movs	r3, #2
 800a700:	e075      	b.n	800a7ee <HAL_UART_Transmit+0x126>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2221      	movs	r2, #33	; 0x21
 800a716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a71a:	f7fc f8df 	bl	80068dc <HAL_GetTick>
 800a71e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	88fa      	ldrh	r2, [r7, #6]
 800a724:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	88fa      	ldrh	r2, [r7, #6]
 800a72c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a738:	d108      	bne.n	800a74c <HAL_UART_Transmit+0x84>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d104      	bne.n	800a74c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a742:	2300      	movs	r3, #0
 800a744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	e003      	b.n	800a754 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a750:	2300      	movs	r3, #0
 800a752:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a75c:	e02d      	b.n	800a7ba <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2200      	movs	r2, #0
 800a766:	2180      	movs	r1, #128	; 0x80
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 ffbc 	bl	800b6e6 <UART_WaitOnFlagUntilTimeout>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e03a      	b.n	800a7ee <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10b      	bne.n	800a796 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	881a      	ldrh	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a78a:	b292      	uxth	r2, r2
 800a78c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	3302      	adds	r3, #2
 800a792:	61bb      	str	r3, [r7, #24]
 800a794:	e008      	b.n	800a7a8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	781a      	ldrb	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	b292      	uxth	r2, r2
 800a7a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1cb      	bne.n	800a75e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2140      	movs	r1, #64	; 0x40
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 ff88 	bl	800b6e6 <UART_WaitOnFlagUntilTimeout>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e006      	b.n	800a7ee <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	e000      	b.n	800a7ee <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a7ec:	2302      	movs	r3, #2
  }
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3720      	adds	r7, #32
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08a      	sub	sp, #40	; 0x28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d142      	bne.n	800a896 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <HAL_UART_Receive_IT+0x24>
 800a816:	88fb      	ldrh	r3, [r7, #6]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e03b      	b.n	800a898 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a826:	2b01      	cmp	r3, #1
 800a828:	d101      	bne.n	800a82e <HAL_UART_Receive_IT+0x36>
 800a82a:	2302      	movs	r3, #2
 800a82c:	e034      	b.n	800a898 <HAL_UART_Receive_IT+0xa0>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a17      	ldr	r2, [pc, #92]	; (800a8a0 <HAL_UART_Receive_IT+0xa8>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d01f      	beq.n	800a886 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a850:	2b00      	cmp	r3, #0
 800a852:	d018      	beq.n	800a886 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	613b      	str	r3, [r7, #16]
   return(result);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	623b      	str	r3, [r7, #32]
 800a874:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	69f9      	ldr	r1, [r7, #28]
 800a878:	6a3a      	ldr	r2, [r7, #32]
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e6      	bne.n	800a854 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a886:	88fb      	ldrh	r3, [r7, #6]
 800a888:	461a      	mov	r2, r3
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 fff3 	bl	800b878 <UART_Start_Receive_IT>
 800a892:	4603      	mov	r3, r0
 800a894:	e000      	b.n	800a898 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a896:	2302      	movs	r3, #2
  }
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3728      	adds	r7, #40	; 0x28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	40008000 	.word	0x40008000

0800a8a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b0ba      	sub	sp, #232	; 0xe8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a8ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a8ce:	f640 030f 	movw	r3, #2063	; 0x80f
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a8d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d11b      	bne.n	800a918 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d015      	beq.n	800a918 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d105      	bne.n	800a904 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d009      	beq.n	800a918 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 82d6 	beq.w	800aeba <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	4798      	blx	r3
      }
      return;
 800a916:	e2d0      	b.n	800aeba <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 811f 	beq.w	800ab60 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a922:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a926:	4b8b      	ldr	r3, [pc, #556]	; (800ab54 <HAL_UART_IRQHandler+0x2b0>)
 800a928:	4013      	ands	r3, r2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a92e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a932:	4b89      	ldr	r3, [pc, #548]	; (800ab58 <HAL_UART_IRQHandler+0x2b4>)
 800a934:	4013      	ands	r3, r2
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 8112 	beq.w	800ab60 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	d011      	beq.n	800a96c <HAL_UART_IRQHandler+0xc8>
 800a948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2201      	movs	r2, #1
 800a95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a962:	f043 0201 	orr.w	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d011      	beq.n	800a99c <HAL_UART_IRQHandler+0xf8>
 800a978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00b      	beq.n	800a99c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2202      	movs	r2, #2
 800a98a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a992:	f043 0204 	orr.w	r2, r3, #4
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d011      	beq.n	800a9cc <HAL_UART_IRQHandler+0x128>
 800a9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2204      	movs	r2, #4
 800a9ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c2:	f043 0202 	orr.w	r2, r3, #2
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d017      	beq.n	800aa08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9dc:	f003 0320 	and.w	r3, r3, #32
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a9e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a9e8:	4b5a      	ldr	r3, [pc, #360]	; (800ab54 <HAL_UART_IRQHandler+0x2b0>)
 800a9ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2208      	movs	r2, #8
 800a9f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9fe:	f043 0208 	orr.w	r2, r3, #8
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d012      	beq.n	800aa3a <HAL_UART_IRQHandler+0x196>
 800aa14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00c      	beq.n	800aa3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa30:	f043 0220 	orr.w	r2, r3, #32
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 823c 	beq.w	800aebe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa4a:	f003 0320 	and.w	r3, r3, #32
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d013      	beq.n	800aa7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d105      	bne.n	800aa6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d007      	beq.n	800aa7a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8e:	2b40      	cmp	r3, #64	; 0x40
 800aa90:	d005      	beq.n	800aa9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d04f      	beq.n	800ab3e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f001 f814 	bl	800bacc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaae:	2b40      	cmp	r3, #64	; 0x40
 800aab0:	d141      	bne.n	800ab36 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3308      	adds	r3, #8
 800aab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aacc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3308      	adds	r3, #8
 800aada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aaea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aaee:	e841 2300 	strex	r3, r2, [r1]
 800aaf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aaf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1d9      	bne.n	800aab2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d013      	beq.n	800ab2e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab0a:	4a14      	ldr	r2, [pc, #80]	; (800ab5c <HAL_UART_IRQHandler+0x2b8>)
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fc f850 	bl	8006bb8 <HAL_DMA_Abort_IT>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d017      	beq.n	800ab4e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab2c:	e00f      	b.n	800ab4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f9da 	bl	800aee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab34:	e00b      	b.n	800ab4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9d6 	bl	800aee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab3c:	e007      	b.n	800ab4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f9d2 	bl	800aee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ab4c:	e1b7      	b.n	800aebe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab4e:	bf00      	nop
    return;
 800ab50:	e1b5      	b.n	800aebe <HAL_UART_IRQHandler+0x61a>
 800ab52:	bf00      	nop
 800ab54:	10000001 	.word	0x10000001
 800ab58:	04000120 	.word	0x04000120
 800ab5c:	0800bb99 	.word	0x0800bb99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	f040 814a 	bne.w	800adfe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab6e:	f003 0310 	and.w	r3, r3, #16
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 8143 	beq.w	800adfe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 813c 	beq.w	800adfe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2210      	movs	r2, #16
 800ab8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab98:	2b40      	cmp	r3, #64	; 0x40
 800ab9a:	f040 80b5 	bne.w	800ad08 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 8187 	beq.w	800aec2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800abba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abbe:	429a      	cmp	r2, r3
 800abc0:	f080 817f 	bcs.w	800aec2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0320 	and.w	r3, r3, #32
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f040 8086 	bne.w	800acec <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800abec:	e853 3f00 	ldrex	r3, [r3]
 800abf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800abf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac1a:	e841 2300 	strex	r3, r2, [r1]
 800ac1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1da      	bne.n	800abe0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3308      	adds	r3, #8
 800ac4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e1      	bne.n	800ac2a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3308      	adds	r3, #8
 800ac86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac92:	e841 2300 	strex	r3, r2, [r1]
 800ac96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1e3      	bne.n	800ac66 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2220      	movs	r2, #32
 800aca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acbc:	f023 0310 	bic.w	r3, r3, #16
 800acc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acce:	65bb      	str	r3, [r7, #88]	; 0x58
 800acd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e4      	bne.n	800acac <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fb ff0a 	bl	8006b00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f8fb 	bl	800aefc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad06:	e0dc      	b.n	800aec2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 80ce 	beq.w	800aec6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ad2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 80c9 	beq.w	800aec6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	461a      	mov	r2, r3
 800ad52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad56:	647b      	str	r3, [r7, #68]	; 0x44
 800ad58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e4      	bne.n	800ad34 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	e853 3f00 	ldrex	r3, [r3]
 800ad78:	623b      	str	r3, [r7, #32]
   return(result);
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad80:	f023 0301 	bic.w	r3, r3, #1
 800ad84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad92:	633a      	str	r2, [r7, #48]	; 0x30
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e1      	bne.n	800ad6a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	60fb      	str	r3, [r7, #12]
   return(result);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f023 0310 	bic.w	r3, r3, #16
 800adce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade0:	69b9      	ldr	r1, [r7, #24]
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	e841 2300 	strex	r3, r2, [r1]
 800ade8:	617b      	str	r3, [r7, #20]
   return(result);
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e4      	bne.n	800adba <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f880 	bl	800aefc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800adfc:	e063      	b.n	800aec6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800adfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00e      	beq.n	800ae28 <HAL_UART_IRQHandler+0x584>
 800ae0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d008      	beq.n	800ae28 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ae1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 fb5f 	bl	800c4e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae26:	e051      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d014      	beq.n	800ae5e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d105      	bne.n	800ae4c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d008      	beq.n	800ae5e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d03a      	beq.n	800aeca <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	4798      	blx	r3
    }
    return;
 800ae5c:	e035      	b.n	800aeca <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <HAL_UART_IRQHandler+0x5da>
 800ae6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fea4 	bl	800bbc4 <UART_EndTransmit_IT>
    return;
 800ae7c:	e026      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d009      	beq.n	800ae9e <HAL_UART_IRQHandler+0x5fa>
 800ae8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d003      	beq.n	800ae9e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 fb38 	bl	800c50c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae9c:	e016      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d010      	beq.n	800aecc <HAL_UART_IRQHandler+0x628>
 800aeaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	da0c      	bge.n	800aecc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 fb20 	bl	800c4f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aeb8:	e008      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
      return;
 800aeba:	bf00      	nop
 800aebc:	e006      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
    return;
 800aebe:	bf00      	nop
 800aec0:	e004      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
      return;
 800aec2:	bf00      	nop
 800aec4:	e002      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
      return;
 800aec6:	bf00      	nop
 800aec8:	e000      	b.n	800aecc <HAL_UART_IRQHandler+0x628>
    return;
 800aeca:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800aecc:	37e8      	adds	r7, #232	; 0xe8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop

0800aed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af18:	b08c      	sub	sp, #48	; 0x30
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	431a      	orrs	r2, r3
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	431a      	orrs	r2, r3
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	4313      	orrs	r3, r2
 800af3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4baa      	ldr	r3, [pc, #680]	; (800b1ec <UART_SetConfig+0x2d8>)
 800af44:	4013      	ands	r3, r2
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	6812      	ldr	r2, [r2, #0]
 800af4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af4c:	430b      	orrs	r3, r1
 800af4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a9f      	ldr	r2, [pc, #636]	; (800b1f0 <UART_SetConfig+0x2dc>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d004      	beq.n	800af80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af7c:	4313      	orrs	r3, r2
 800af7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800af8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	6812      	ldr	r2, [r2, #0]
 800af92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af94:	430b      	orrs	r3, r1
 800af96:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	f023 010f 	bic.w	r1, r3, #15
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	430a      	orrs	r2, r1
 800afac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a90      	ldr	r2, [pc, #576]	; (800b1f4 <UART_SetConfig+0x2e0>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d125      	bne.n	800b004 <UART_SetConfig+0xf0>
 800afb8:	4b8f      	ldr	r3, [pc, #572]	; (800b1f8 <UART_SetConfig+0x2e4>)
 800afba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afbe:	f003 0303 	and.w	r3, r3, #3
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d81a      	bhi.n	800affc <UART_SetConfig+0xe8>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <UART_SetConfig+0xb8>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800afed 	.word	0x0800afed
 800afd4:	0800afe5 	.word	0x0800afe5
 800afd8:	0800aff5 	.word	0x0800aff5
 800afdc:	2301      	movs	r3, #1
 800afde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afe2:	e116      	b.n	800b212 <UART_SetConfig+0x2fe>
 800afe4:	2302      	movs	r3, #2
 800afe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afea:	e112      	b.n	800b212 <UART_SetConfig+0x2fe>
 800afec:	2304      	movs	r3, #4
 800afee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aff2:	e10e      	b.n	800b212 <UART_SetConfig+0x2fe>
 800aff4:	2308      	movs	r3, #8
 800aff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800affa:	e10a      	b.n	800b212 <UART_SetConfig+0x2fe>
 800affc:	2310      	movs	r3, #16
 800affe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b002:	e106      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a7c      	ldr	r2, [pc, #496]	; (800b1fc <UART_SetConfig+0x2e8>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d138      	bne.n	800b080 <UART_SetConfig+0x16c>
 800b00e:	4b7a      	ldr	r3, [pc, #488]	; (800b1f8 <UART_SetConfig+0x2e4>)
 800b010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b014:	f003 030c 	and.w	r3, r3, #12
 800b018:	2b0c      	cmp	r3, #12
 800b01a:	d82d      	bhi.n	800b078 <UART_SetConfig+0x164>
 800b01c:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <UART_SetConfig+0x110>)
 800b01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b022:	bf00      	nop
 800b024:	0800b059 	.word	0x0800b059
 800b028:	0800b079 	.word	0x0800b079
 800b02c:	0800b079 	.word	0x0800b079
 800b030:	0800b079 	.word	0x0800b079
 800b034:	0800b069 	.word	0x0800b069
 800b038:	0800b079 	.word	0x0800b079
 800b03c:	0800b079 	.word	0x0800b079
 800b040:	0800b079 	.word	0x0800b079
 800b044:	0800b061 	.word	0x0800b061
 800b048:	0800b079 	.word	0x0800b079
 800b04c:	0800b079 	.word	0x0800b079
 800b050:	0800b079 	.word	0x0800b079
 800b054:	0800b071 	.word	0x0800b071
 800b058:	2300      	movs	r3, #0
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b05e:	e0d8      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b060:	2302      	movs	r3, #2
 800b062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b066:	e0d4      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b068:	2304      	movs	r3, #4
 800b06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b06e:	e0d0      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b070:	2308      	movs	r3, #8
 800b072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b076:	e0cc      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b078:	2310      	movs	r3, #16
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b07e:	e0c8      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a5e      	ldr	r2, [pc, #376]	; (800b200 <UART_SetConfig+0x2ec>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d125      	bne.n	800b0d6 <UART_SetConfig+0x1c2>
 800b08a:	4b5b      	ldr	r3, [pc, #364]	; (800b1f8 <UART_SetConfig+0x2e4>)
 800b08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b090:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b094:	2b30      	cmp	r3, #48	; 0x30
 800b096:	d016      	beq.n	800b0c6 <UART_SetConfig+0x1b2>
 800b098:	2b30      	cmp	r3, #48	; 0x30
 800b09a:	d818      	bhi.n	800b0ce <UART_SetConfig+0x1ba>
 800b09c:	2b20      	cmp	r3, #32
 800b09e:	d00a      	beq.n	800b0b6 <UART_SetConfig+0x1a2>
 800b0a0:	2b20      	cmp	r3, #32
 800b0a2:	d814      	bhi.n	800b0ce <UART_SetConfig+0x1ba>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <UART_SetConfig+0x19a>
 800b0a8:	2b10      	cmp	r3, #16
 800b0aa:	d008      	beq.n	800b0be <UART_SetConfig+0x1aa>
 800b0ac:	e00f      	b.n	800b0ce <UART_SetConfig+0x1ba>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0b4:	e0ad      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0bc:	e0a9      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b0be:	2304      	movs	r3, #4
 800b0c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0c4:	e0a5      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b0c6:	2308      	movs	r3, #8
 800b0c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0cc:	e0a1      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b0ce:	2310      	movs	r3, #16
 800b0d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0d4:	e09d      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a4a      	ldr	r2, [pc, #296]	; (800b204 <UART_SetConfig+0x2f0>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d125      	bne.n	800b12c <UART_SetConfig+0x218>
 800b0e0:	4b45      	ldr	r3, [pc, #276]	; (800b1f8 <UART_SetConfig+0x2e4>)
 800b0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b0ea:	2bc0      	cmp	r3, #192	; 0xc0
 800b0ec:	d016      	beq.n	800b11c <UART_SetConfig+0x208>
 800b0ee:	2bc0      	cmp	r3, #192	; 0xc0
 800b0f0:	d818      	bhi.n	800b124 <UART_SetConfig+0x210>
 800b0f2:	2b80      	cmp	r3, #128	; 0x80
 800b0f4:	d00a      	beq.n	800b10c <UART_SetConfig+0x1f8>
 800b0f6:	2b80      	cmp	r3, #128	; 0x80
 800b0f8:	d814      	bhi.n	800b124 <UART_SetConfig+0x210>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <UART_SetConfig+0x1f0>
 800b0fe:	2b40      	cmp	r3, #64	; 0x40
 800b100:	d008      	beq.n	800b114 <UART_SetConfig+0x200>
 800b102:	e00f      	b.n	800b124 <UART_SetConfig+0x210>
 800b104:	2300      	movs	r3, #0
 800b106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b10a:	e082      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b10c:	2302      	movs	r3, #2
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b112:	e07e      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b114:	2304      	movs	r3, #4
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b11a:	e07a      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b11c:	2308      	movs	r3, #8
 800b11e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b122:	e076      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b124:	2310      	movs	r3, #16
 800b126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b12a:	e072      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a35      	ldr	r2, [pc, #212]	; (800b208 <UART_SetConfig+0x2f4>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d12a      	bne.n	800b18c <UART_SetConfig+0x278>
 800b136:	4b30      	ldr	r3, [pc, #192]	; (800b1f8 <UART_SetConfig+0x2e4>)
 800b138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b144:	d01a      	beq.n	800b17c <UART_SetConfig+0x268>
 800b146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b14a:	d81b      	bhi.n	800b184 <UART_SetConfig+0x270>
 800b14c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b150:	d00c      	beq.n	800b16c <UART_SetConfig+0x258>
 800b152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b156:	d815      	bhi.n	800b184 <UART_SetConfig+0x270>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <UART_SetConfig+0x250>
 800b15c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b160:	d008      	beq.n	800b174 <UART_SetConfig+0x260>
 800b162:	e00f      	b.n	800b184 <UART_SetConfig+0x270>
 800b164:	2300      	movs	r3, #0
 800b166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b16a:	e052      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b16c:	2302      	movs	r3, #2
 800b16e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b172:	e04e      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b174:	2304      	movs	r3, #4
 800b176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b17a:	e04a      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b17c:	2308      	movs	r3, #8
 800b17e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b182:	e046      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b184:	2310      	movs	r3, #16
 800b186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b18a:	e042      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a17      	ldr	r2, [pc, #92]	; (800b1f0 <UART_SetConfig+0x2dc>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d13a      	bne.n	800b20c <UART_SetConfig+0x2f8>
 800b196:	4b18      	ldr	r3, [pc, #96]	; (800b1f8 <UART_SetConfig+0x2e4>)
 800b198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b1a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1a4:	d01a      	beq.n	800b1dc <UART_SetConfig+0x2c8>
 800b1a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1aa:	d81b      	bhi.n	800b1e4 <UART_SetConfig+0x2d0>
 800b1ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1b0:	d00c      	beq.n	800b1cc <UART_SetConfig+0x2b8>
 800b1b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1b6:	d815      	bhi.n	800b1e4 <UART_SetConfig+0x2d0>
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <UART_SetConfig+0x2b0>
 800b1bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1c0:	d008      	beq.n	800b1d4 <UART_SetConfig+0x2c0>
 800b1c2:	e00f      	b.n	800b1e4 <UART_SetConfig+0x2d0>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1ca:	e022      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1d2:	e01e      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1da:	e01a      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b1dc:	2308      	movs	r3, #8
 800b1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1e2:	e016      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1ea:	e012      	b.n	800b212 <UART_SetConfig+0x2fe>
 800b1ec:	cfff69f3 	.word	0xcfff69f3
 800b1f0:	40008000 	.word	0x40008000
 800b1f4:	40013800 	.word	0x40013800
 800b1f8:	40021000 	.word	0x40021000
 800b1fc:	40004400 	.word	0x40004400
 800b200:	40004800 	.word	0x40004800
 800b204:	40004c00 	.word	0x40004c00
 800b208:	40005000 	.word	0x40005000
 800b20c:	2310      	movs	r3, #16
 800b20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4aae      	ldr	r2, [pc, #696]	; (800b4d0 <UART_SetConfig+0x5bc>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	f040 8097 	bne.w	800b34c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b21e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b222:	2b08      	cmp	r3, #8
 800b224:	d823      	bhi.n	800b26e <UART_SetConfig+0x35a>
 800b226:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <UART_SetConfig+0x318>)
 800b228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b26f 	.word	0x0800b26f
 800b234:	0800b259 	.word	0x0800b259
 800b238:	0800b26f 	.word	0x0800b26f
 800b23c:	0800b25f 	.word	0x0800b25f
 800b240:	0800b26f 	.word	0x0800b26f
 800b244:	0800b26f 	.word	0x0800b26f
 800b248:	0800b26f 	.word	0x0800b26f
 800b24c:	0800b267 	.word	0x0800b267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b250:	f7fe f8e2 	bl	8009418 <HAL_RCC_GetPCLK1Freq>
 800b254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b256:	e010      	b.n	800b27a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b258:	4b9e      	ldr	r3, [pc, #632]	; (800b4d4 <UART_SetConfig+0x5c0>)
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b25c:	e00d      	b.n	800b27a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b25e:	f7fe f843 	bl	80092e8 <HAL_RCC_GetSysClockFreq>
 800b262:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b264:	e009      	b.n	800b27a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b26c:	e005      	b.n	800b27a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 8130 	beq.w	800b4e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	4a94      	ldr	r2, [pc, #592]	; (800b4d8 <UART_SetConfig+0x5c4>)
 800b288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b28c:	461a      	mov	r2, r3
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	fbb3 f3f2 	udiv	r3, r3, r2
 800b294:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	4613      	mov	r3, r2
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	4413      	add	r3, r2
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d305      	bcc.n	800b2b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d903      	bls.n	800b2ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b2b8:	e113      	b.n	800b4e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	2200      	movs	r2, #0
 800b2be:	60bb      	str	r3, [r7, #8]
 800b2c0:	60fa      	str	r2, [r7, #12]
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c6:	4a84      	ldr	r2, [pc, #528]	; (800b4d8 <UART_SetConfig+0x5c4>)
 800b2c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	603b      	str	r3, [r7, #0]
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2dc:	f7f5 fccc 	bl	8000c78 <__aeabi_uldivmod>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	f04f 0200 	mov.w	r2, #0
 800b2ec:	f04f 0300 	mov.w	r3, #0
 800b2f0:	020b      	lsls	r3, r1, #8
 800b2f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2f6:	0202      	lsls	r2, r0, #8
 800b2f8:	6979      	ldr	r1, [r7, #20]
 800b2fa:	6849      	ldr	r1, [r1, #4]
 800b2fc:	0849      	lsrs	r1, r1, #1
 800b2fe:	2000      	movs	r0, #0
 800b300:	460c      	mov	r4, r1
 800b302:	4605      	mov	r5, r0
 800b304:	eb12 0804 	adds.w	r8, r2, r4
 800b308:	eb43 0905 	adc.w	r9, r3, r5
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	469a      	mov	sl, r3
 800b314:	4693      	mov	fp, r2
 800b316:	4652      	mov	r2, sl
 800b318:	465b      	mov	r3, fp
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f7f5 fcab 	bl	8000c78 <__aeabi_uldivmod>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	4613      	mov	r3, r2
 800b328:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b330:	d308      	bcc.n	800b344 <UART_SetConfig+0x430>
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b338:	d204      	bcs.n	800b344 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6a3a      	ldr	r2, [r7, #32]
 800b340:	60da      	str	r2, [r3, #12]
 800b342:	e0ce      	b.n	800b4e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b34a:	e0ca      	b.n	800b4e2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b354:	d166      	bne.n	800b424 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b356:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b35a:	2b08      	cmp	r3, #8
 800b35c:	d827      	bhi.n	800b3ae <UART_SetConfig+0x49a>
 800b35e:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <UART_SetConfig+0x450>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b389 	.word	0x0800b389
 800b368:	0800b391 	.word	0x0800b391
 800b36c:	0800b399 	.word	0x0800b399
 800b370:	0800b3af 	.word	0x0800b3af
 800b374:	0800b39f 	.word	0x0800b39f
 800b378:	0800b3af 	.word	0x0800b3af
 800b37c:	0800b3af 	.word	0x0800b3af
 800b380:	0800b3af 	.word	0x0800b3af
 800b384:	0800b3a7 	.word	0x0800b3a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b388:	f7fe f846 	bl	8009418 <HAL_RCC_GetPCLK1Freq>
 800b38c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b38e:	e014      	b.n	800b3ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b390:	f7fe f858 	bl	8009444 <HAL_RCC_GetPCLK2Freq>
 800b394:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b396:	e010      	b.n	800b3ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b398:	4b4e      	ldr	r3, [pc, #312]	; (800b4d4 <UART_SetConfig+0x5c0>)
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b39c:	e00d      	b.n	800b3ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b39e:	f7fd ffa3 	bl	80092e8 <HAL_RCC_GetSysClockFreq>
 800b3a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3a4:	e009      	b.n	800b3ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b3ac:	e005      	b.n	800b3ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b3b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 8090 	beq.w	800b4e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	4a44      	ldr	r2, [pc, #272]	; (800b4d8 <UART_SetConfig+0x5c4>)
 800b3c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3d4:	005a      	lsls	r2, r3, #1
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	085b      	lsrs	r3, r3, #1
 800b3dc:	441a      	add	r2, r3
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	2b0f      	cmp	r3, #15
 800b3ec:	d916      	bls.n	800b41c <UART_SetConfig+0x508>
 800b3ee:	6a3b      	ldr	r3, [r7, #32]
 800b3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f4:	d212      	bcs.n	800b41c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	f023 030f 	bic.w	r3, r3, #15
 800b3fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	085b      	lsrs	r3, r3, #1
 800b404:	b29b      	uxth	r3, r3
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	8bfb      	ldrh	r3, [r7, #30]
 800b40e:	4313      	orrs	r3, r2
 800b410:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	8bfa      	ldrh	r2, [r7, #30]
 800b418:	60da      	str	r2, [r3, #12]
 800b41a:	e062      	b.n	800b4e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b422:	e05e      	b.n	800b4e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b428:	2b08      	cmp	r3, #8
 800b42a:	d828      	bhi.n	800b47e <UART_SetConfig+0x56a>
 800b42c:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <UART_SetConfig+0x520>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b459 	.word	0x0800b459
 800b438:	0800b461 	.word	0x0800b461
 800b43c:	0800b469 	.word	0x0800b469
 800b440:	0800b47f 	.word	0x0800b47f
 800b444:	0800b46f 	.word	0x0800b46f
 800b448:	0800b47f 	.word	0x0800b47f
 800b44c:	0800b47f 	.word	0x0800b47f
 800b450:	0800b47f 	.word	0x0800b47f
 800b454:	0800b477 	.word	0x0800b477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b458:	f7fd ffde 	bl	8009418 <HAL_RCC_GetPCLK1Freq>
 800b45c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b45e:	e014      	b.n	800b48a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b460:	f7fd fff0 	bl	8009444 <HAL_RCC_GetPCLK2Freq>
 800b464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b466:	e010      	b.n	800b48a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b468:	4b1a      	ldr	r3, [pc, #104]	; (800b4d4 <UART_SetConfig+0x5c0>)
 800b46a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b46c:	e00d      	b.n	800b48a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b46e:	f7fd ff3b 	bl	80092e8 <HAL_RCC_GetSysClockFreq>
 800b472:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b474:	e009      	b.n	800b48a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b47c:	e005      	b.n	800b48a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b488:	bf00      	nop
    }

    if (pclk != 0U)
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d028      	beq.n	800b4e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b494:	4a10      	ldr	r2, [pc, #64]	; (800b4d8 <UART_SetConfig+0x5c4>)
 800b496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b49a:	461a      	mov	r2, r3
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	085b      	lsrs	r3, r3, #1
 800b4a8:	441a      	add	r2, r3
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	2b0f      	cmp	r3, #15
 800b4b8:	d910      	bls.n	800b4dc <UART_SetConfig+0x5c8>
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4c0:	d20c      	bcs.n	800b4dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60da      	str	r2, [r3, #12]
 800b4cc:	e009      	b.n	800b4e2 <UART_SetConfig+0x5ce>
 800b4ce:	bf00      	nop
 800b4d0:	40008000 	.word	0x40008000
 800b4d4:	00f42400 	.word	0x00f42400
 800b4d8:	080150cc 	.word	0x080150cc
      }
      else
      {
        ret = HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b4fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b502:	4618      	mov	r0, r3
 800b504:	3730      	adds	r7, #48	; 0x30
 800b506:	46bd      	mov	sp, r7
 800b508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b50c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00a      	beq.n	800b536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00a      	beq.n	800b558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00a      	beq.n	800b57a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	430a      	orrs	r2, r1
 800b578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57e:	f003 0308 	and.w	r3, r3, #8
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	430a      	orrs	r2, r1
 800b59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00a      	beq.n	800b5be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c2:	f003 0320 	and.w	r3, r3, #32
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d01a      	beq.n	800b622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	430a      	orrs	r2, r1
 800b600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b60a:	d10a      	bne.n	800b622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	430a      	orrs	r2, r1
 800b642:	605a      	str	r2, [r3, #4]
  }
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af02      	add	r7, sp, #8
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b660:	f7fb f93c 	bl	80068dc <HAL_GetTick>
 800b664:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b08      	cmp	r3, #8
 800b672:	d10e      	bne.n	800b692 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f82f 	bl	800b6e6 <UART_WaitOnFlagUntilTimeout>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e025      	b.n	800b6de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0304 	and.w	r3, r3, #4
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	d10e      	bne.n	800b6be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f819 	bl	800b6e6 <UART_WaitOnFlagUntilTimeout>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e00f      	b.n	800b6de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2220      	movs	r2, #32
 800b6c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b09c      	sub	sp, #112	; 0x70
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	60b9      	str	r1, [r7, #8]
 800b6f0:	603b      	str	r3, [r7, #0]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6f6:	e0a9      	b.n	800b84c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fe:	f000 80a5 	beq.w	800b84c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b702:	f7fb f8eb 	bl	80068dc <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b70e:	429a      	cmp	r2, r3
 800b710:	d302      	bcc.n	800b718 <UART_WaitOnFlagUntilTimeout+0x32>
 800b712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b714:	2b00      	cmp	r3, #0
 800b716:	d140      	bne.n	800b79a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b72c:	667b      	str	r3, [r7, #100]	; 0x64
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b736:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b738:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b73c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e6      	bne.n	800b718 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75c:	f023 0301 	bic.w	r3, r3, #1
 800b760:	663b      	str	r3, [r7, #96]	; 0x60
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3308      	adds	r3, #8
 800b768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b76a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b76c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e5      	bne.n	800b74a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2220      	movs	r2, #32
 800b782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2220      	movs	r2, #32
 800b78a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e069      	b.n	800b86e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0304 	and.w	r3, r3, #4
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d051      	beq.n	800b84c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7b6:	d149      	bne.n	800b84c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b7e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e6      	bne.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	613b      	str	r3, [r7, #16]
   return(result);
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f023 0301 	bic.w	r3, r3, #1
 800b80a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3308      	adds	r3, #8
 800b812:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b814:	623a      	str	r2, [r7, #32]
 800b816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b818:	69f9      	ldr	r1, [r7, #28]
 800b81a:	6a3a      	ldr	r2, [r7, #32]
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	61bb      	str	r3, [r7, #24]
   return(result);
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e5      	bne.n	800b7f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2220      	movs	r2, #32
 800b82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2220      	movs	r2, #32
 800b834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b848:	2303      	movs	r3, #3
 800b84a:	e010      	b.n	800b86e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	69da      	ldr	r2, [r3, #28]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	4013      	ands	r3, r2
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	429a      	cmp	r2, r3
 800b85a:	bf0c      	ite	eq
 800b85c:	2301      	moveq	r3, #1
 800b85e:	2300      	movne	r3, #0
 800b860:	b2db      	uxtb	r3, r3
 800b862:	461a      	mov	r2, r3
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	429a      	cmp	r2, r3
 800b868:	f43f af46 	beq.w	800b6f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3770      	adds	r7, #112	; 0x70
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b878:	b480      	push	{r7}
 800b87a:	b0a3      	sub	sp, #140	; 0x8c
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	4613      	mov	r3, r2
 800b884:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	88fa      	ldrh	r2, [r7, #6]
 800b890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	88fa      	ldrh	r2, [r7, #6]
 800b898:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8aa:	d10e      	bne.n	800b8ca <UART_Start_Receive_IT+0x52>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d105      	bne.n	800b8c0 <UART_Start_Receive_IT+0x48>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b8ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8be:	e02d      	b.n	800b91c <UART_Start_Receive_IT+0xa4>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	22ff      	movs	r2, #255	; 0xff
 800b8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8c8:	e028      	b.n	800b91c <UART_Start_Receive_IT+0xa4>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10d      	bne.n	800b8ee <UART_Start_Receive_IT+0x76>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d104      	bne.n	800b8e4 <UART_Start_Receive_IT+0x6c>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	22ff      	movs	r2, #255	; 0xff
 800b8de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8e2:	e01b      	b.n	800b91c <UART_Start_Receive_IT+0xa4>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	227f      	movs	r2, #127	; 0x7f
 800b8e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8ec:	e016      	b.n	800b91c <UART_Start_Receive_IT+0xa4>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8f6:	d10d      	bne.n	800b914 <UART_Start_Receive_IT+0x9c>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d104      	bne.n	800b90a <UART_Start_Receive_IT+0x92>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	227f      	movs	r2, #127	; 0x7f
 800b904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b908:	e008      	b.n	800b91c <UART_Start_Receive_IT+0xa4>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	223f      	movs	r2, #63	; 0x3f
 800b90e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b912:	e003      	b.n	800b91c <UART_Start_Receive_IT+0xa4>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2222      	movs	r2, #34	; 0x22
 800b928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3308      	adds	r3, #8
 800b932:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b936:	e853 3f00 	ldrex	r3, [r3]
 800b93a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b93e:	f043 0301 	orr.w	r3, r3, #1
 800b942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3308      	adds	r3, #8
 800b94c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b950:	673a      	str	r2, [r7, #112]	; 0x70
 800b952:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b954:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b956:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b958:	e841 2300 	strex	r3, r2, [r1]
 800b95c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b95e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1e3      	bne.n	800b92c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b96c:	d153      	bne.n	800ba16 <UART_Start_Receive_IT+0x19e>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b974:	88fa      	ldrh	r2, [r7, #6]
 800b976:	429a      	cmp	r2, r3
 800b978:	d34d      	bcc.n	800ba16 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b982:	d107      	bne.n	800b994 <UART_Start_Receive_IT+0x11c>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d103      	bne.n	800b994 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4a4b      	ldr	r2, [pc, #300]	; (800babc <UART_Start_Receive_IT+0x244>)
 800b990:	671a      	str	r2, [r3, #112]	; 0x70
 800b992:	e002      	b.n	800b99a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	4a4a      	ldr	r2, [pc, #296]	; (800bac0 <UART_Start_Receive_IT+0x248>)
 800b998:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d01a      	beq.n	800b9e0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b2:	e853 3f00 	ldrex	r3, [r3]
 800b9b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b9d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e4      	bne.n	800b9aa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ba00:	64ba      	str	r2, [r7, #72]	; 0x48
 800ba02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba08:	e841 2300 	strex	r3, r2, [r1]
 800ba0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ba0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e5      	bne.n	800b9e0 <UART_Start_Receive_IT+0x168>
 800ba14:	e04a      	b.n	800baac <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba1e:	d107      	bne.n	800ba30 <UART_Start_Receive_IT+0x1b8>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d103      	bne.n	800ba30 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4a26      	ldr	r2, [pc, #152]	; (800bac4 <UART_Start_Receive_IT+0x24c>)
 800ba2c:	671a      	str	r2, [r3, #112]	; 0x70
 800ba2e:	e002      	b.n	800ba36 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	4a25      	ldr	r2, [pc, #148]	; (800bac8 <UART_Start_Receive_IT+0x250>)
 800ba34:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d019      	beq.n	800ba7a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	e853 3f00 	ldrex	r3, [r3]
 800ba52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ba5a:	677b      	str	r3, [r7, #116]	; 0x74
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba64:	637b      	str	r3, [r7, #52]	; 0x34
 800ba66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba6c:	e841 2300 	strex	r3, r2, [r1]
 800ba70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1e6      	bne.n	800ba46 <UART_Start_Receive_IT+0x1ce>
 800ba78:	e018      	b.n	800baac <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	e853 3f00 	ldrex	r3, [r3]
 800ba86:	613b      	str	r3, [r7, #16]
   return(result);
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	f043 0320 	orr.w	r3, r3, #32
 800ba8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	461a      	mov	r2, r3
 800ba96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba98:	623b      	str	r3, [r7, #32]
 800ba9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9c:	69f9      	ldr	r1, [r7, #28]
 800ba9e:	6a3a      	ldr	r2, [r7, #32]
 800baa0:	e841 2300 	strex	r3, r2, [r1]
 800baa4:	61bb      	str	r3, [r7, #24]
   return(result);
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e6      	bne.n	800ba7a <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	378c      	adds	r7, #140	; 0x8c
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	0800c1e1 	.word	0x0800c1e1
 800bac0:	0800bee5 	.word	0x0800bee5
 800bac4:	0800bd7f 	.word	0x0800bd7f
 800bac8:	0800bc1b 	.word	0x0800bc1b

0800bacc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bacc:	b480      	push	{r7}
 800bace:	b095      	sub	sp, #84	; 0x54
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf2:	643b      	str	r3, [r7, #64]	; 0x40
 800baf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800baf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e6      	bne.n	800bad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	e853 3f00 	ldrex	r3, [r3]
 800bb14:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb1c:	f023 0301 	bic.w	r3, r3, #1
 800bb20:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e3      	bne.n	800bb06 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d118      	bne.n	800bb78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f023 0310 	bic.w	r3, r3, #16
 800bb5a:	647b      	str	r3, [r7, #68]	; 0x44
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb64:	61bb      	str	r3, [r7, #24]
 800bb66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	6979      	ldr	r1, [r7, #20]
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	613b      	str	r3, [r7, #16]
   return(result);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e6      	bne.n	800bb46 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2220      	movs	r2, #32
 800bb7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bb8c:	bf00      	nop
 800bb8e:	3754      	adds	r7, #84	; 0x54
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7ff f996 	bl	800aee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbbc:	bf00      	nop
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbe0:	61fb      	str	r3, [r7, #28]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	61bb      	str	r3, [r7, #24]
 800bbec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbee:	6979      	ldr	r1, [r7, #20]
 800bbf0:	69ba      	ldr	r2, [r7, #24]
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1e6      	bne.n	800bbcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2220      	movs	r2, #32
 800bc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff f961 	bl	800aed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc12:	bf00      	nop
 800bc14:	3720      	adds	r7, #32
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b096      	sub	sp, #88	; 0x58
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc32:	2b22      	cmp	r3, #34	; 0x22
 800bc34:	f040 8095 	bne.w	800bd62 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bc3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc46:	b2d9      	uxtb	r1, r3
 800bc48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc52:	400a      	ands	r2, r1
 800bc54:	b2d2      	uxtb	r2, r2
 800bc56:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d17a      	bne.n	800bd76 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	e853 3f00 	ldrex	r3, [r3]
 800bc8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc94:	653b      	str	r3, [r7, #80]	; 0x50
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9e:	647b      	str	r3, [r7, #68]	; 0x44
 800bca0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bca6:	e841 2300 	strex	r3, r2, [r1]
 800bcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1e6      	bne.n	800bc80 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	623b      	str	r3, [r7, #32]
   return(result);
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	f023 0301 	bic.w	r3, r3, #1
 800bcc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3308      	adds	r3, #8
 800bcd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcd2:	633a      	str	r2, [r7, #48]	; 0x30
 800bcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e5      	bne.n	800bcb2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d12e      	bne.n	800bd5a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	e853 3f00 	ldrex	r3, [r3]
 800bd0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0310 	bic.w	r3, r3, #16
 800bd16:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd24:	69b9      	ldr	r1, [r7, #24]
 800bd26:	69fa      	ldr	r2, [r7, #28]
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e6      	bne.n	800bd02 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	f003 0310 	and.w	r3, r3, #16
 800bd3e:	2b10      	cmp	r3, #16
 800bd40:	d103      	bne.n	800bd4a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2210      	movs	r2, #16
 800bd48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd50:	4619      	mov	r1, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff f8d2 	bl	800aefc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd58:	e00d      	b.n	800bd76 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7fa fc52 	bl	8006604 <HAL_UART_RxCpltCallback>
}
 800bd60:	e009      	b.n	800bd76 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	8b1b      	ldrh	r3, [r3, #24]
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f042 0208 	orr.w	r2, r2, #8
 800bd72:	b292      	uxth	r2, r2
 800bd74:	831a      	strh	r2, [r3, #24]
}
 800bd76:	bf00      	nop
 800bd78:	3758      	adds	r7, #88	; 0x58
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b096      	sub	sp, #88	; 0x58
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd96:	2b22      	cmp	r3, #34	; 0x22
 800bd98:	f040 8095 	bne.w	800bec6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bda2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdaa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bdac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bdb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc0:	1c9a      	adds	r2, r3, #2
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d17a      	bne.n	800beda <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdec:	e853 3f00 	ldrex	r3, [r3]
 800bdf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be02:	643b      	str	r3, [r7, #64]	; 0x40
 800be04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be0a:	e841 2300 	strex	r3, r2, [r1]
 800be0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1e6      	bne.n	800bde4 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3308      	adds	r3, #8
 800be1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	61fb      	str	r3, [r7, #28]
   return(result);
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	f023 0301 	bic.w	r3, r3, #1
 800be2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3308      	adds	r3, #8
 800be34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e5      	bne.n	800be16 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2220      	movs	r2, #32
 800be4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d12e      	bne.n	800bebe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	60bb      	str	r3, [r7, #8]
   return(result);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f023 0310 	bic.w	r3, r3, #16
 800be7a:	647b      	str	r3, [r7, #68]	; 0x44
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be84:	61bb      	str	r3, [r7, #24]
 800be86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6979      	ldr	r1, [r7, #20]
 800be8a:	69ba      	ldr	r2, [r7, #24]
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	613b      	str	r3, [r7, #16]
   return(result);
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e6      	bne.n	800be66 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	f003 0310 	and.w	r3, r3, #16
 800bea2:	2b10      	cmp	r3, #16
 800bea4:	d103      	bne.n	800beae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2210      	movs	r2, #16
 800beac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff f820 	bl	800aefc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bebc:	e00d      	b.n	800beda <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7fa fba0 	bl	8006604 <HAL_UART_RxCpltCallback>
}
 800bec4:	e009      	b.n	800beda <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	8b1b      	ldrh	r3, [r3, #24]
 800becc:	b29a      	uxth	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f042 0208 	orr.w	r2, r2, #8
 800bed6:	b292      	uxth	r2, r2
 800bed8:	831a      	strh	r2, [r3, #24]
}
 800beda:	bf00      	nop
 800bedc:	3758      	adds	r7, #88	; 0x58
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
	...

0800bee4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b0a6      	sub	sp, #152	; 0x98
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bef2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf1a:	2b22      	cmp	r3, #34	; 0x22
 800bf1c:	f040 814f 	bne.w	800c1be <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bf26:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf2a:	e0f6      	b.n	800c11a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bf32:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf36:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bf3a:	b2d9      	uxtb	r1, r3
 800bf3c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	400a      	ands	r2, r1
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bf72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d053      	beq.n	800c026 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d011      	beq.n	800bfae <UART_RxISR_8BIT_FIFOEN+0xca>
 800bf8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfa4:	f043 0201 	orr.w	r2, r3, #1
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d011      	beq.n	800bfde <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bfba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00b      	beq.n	800bfde <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd4:	f043 0204 	orr.w	r2, r3, #4
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bfe2:	f003 0304 	and.w	r3, r3, #4
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d011      	beq.n	800c00e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bfea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00b      	beq.n	800c00e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2204      	movs	r2, #4
 800bffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c004:	f043 0202 	orr.w	r2, r3, #2
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7fe ff65 	bl	800aee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d173      	bne.n	800c11a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c054:	66bb      	str	r3, [r7, #104]	; 0x68
 800c056:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c058:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c05a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c05c:	e841 2300 	strex	r3, r2, [r1]
 800c060:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1e4      	bne.n	800c032 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3308      	adds	r3, #8
 800c06e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c072:	e853 3f00 	ldrex	r3, [r3]
 800c076:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c07a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c07e:	f023 0301 	bic.w	r3, r3, #1
 800c082:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3308      	adds	r3, #8
 800c08a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c08c:	657a      	str	r2, [r7, #84]	; 0x54
 800c08e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c090:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c094:	e841 2300 	strex	r3, r2, [r1]
 800c098:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1e3      	bne.n	800c068 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2220      	movs	r2, #32
 800c0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d12e      	bne.n	800c114 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	f023 0310 	bic.w	r3, r3, #16
 800c0d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0da:	643b      	str	r3, [r7, #64]	; 0x40
 800c0dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e6      	bne.n	800c0bc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	69db      	ldr	r3, [r3, #28]
 800c0f4:	f003 0310 	and.w	r3, r3, #16
 800c0f8:	2b10      	cmp	r3, #16
 800c0fa:	d103      	bne.n	800c104 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2210      	movs	r2, #16
 800c102:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7fe fef5 	bl	800aefc <HAL_UARTEx_RxEventCallback>
 800c112:	e002      	b.n	800c11a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7fa fa75 	bl	8006604 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c11a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d006      	beq.n	800c130 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c122:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c126:	f003 0320 	and.w	r3, r3, #32
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f47f aefe 	bne.w	800bf2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c136:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c13a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d047      	beq.n	800c1d2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c148:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d240      	bcs.n	800c1d2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3308      	adds	r3, #8
 800c156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c166:	673b      	str	r3, [r7, #112]	; 0x70
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3308      	adds	r3, #8
 800c16e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c170:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e5      	bne.n	800c150 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a15      	ldr	r2, [pc, #84]	; (800c1dc <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800c188:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	e853 3f00 	ldrex	r3, [r3]
 800c196:	60bb      	str	r3, [r7, #8]
   return(result);
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	f043 0320 	orr.w	r3, r3, #32
 800c19e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1a8:	61bb      	str	r3, [r7, #24]
 800c1aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	6979      	ldr	r1, [r7, #20]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	613b      	str	r3, [r7, #16]
   return(result);
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e6      	bne.n	800c18a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1bc:	e009      	b.n	800c1d2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	8b1b      	ldrh	r3, [r3, #24]
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f042 0208 	orr.w	r2, r2, #8
 800c1ce:	b292      	uxth	r2, r2
 800c1d0:	831a      	strh	r2, [r3, #24]
}
 800c1d2:	bf00      	nop
 800c1d4:	3798      	adds	r7, #152	; 0x98
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	0800bc1b 	.word	0x0800bc1b

0800c1e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b0a8      	sub	sp, #160	; 0xa0
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1ee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69db      	ldr	r3, [r3, #28]
 800c1f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c216:	2b22      	cmp	r3, #34	; 0x22
 800c218:	f040 8153 	bne.w	800c4c2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c222:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c226:	e0fa      	b.n	800c41e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c22e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c23a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c23e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c242:	4013      	ands	r3, r2
 800c244:	b29a      	uxth	r2, r3
 800c246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c24a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c250:	1c9a      	adds	r2, r3, #2
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	3b01      	subs	r3, #1
 800c260:	b29a      	uxth	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d053      	beq.n	800c326 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c27e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d011      	beq.n	800c2ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800c28a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00b      	beq.n	800c2ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2201      	movs	r2, #1
 800c29c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a4:	f043 0201 	orr.w	r2, r3, #1
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2b2:	f003 0302 	and.w	r3, r3, #2
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d011      	beq.n	800c2de <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c2ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2be:	f003 0301 	and.w	r3, r3, #1
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00b      	beq.n	800c2de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2d4:	f043 0204 	orr.w	r2, r3, #4
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2e2:	f003 0304 	and.w	r3, r3, #4
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d011      	beq.n	800c30e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c2ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00b      	beq.n	800c30e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2204      	movs	r2, #4
 800c2fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c304:	f043 0202 	orr.w	r2, r3, #2
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7fe fde5 	bl	800aee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d175      	bne.n	800c41e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c354:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c356:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c358:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c35a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c35c:	e841 2300 	strex	r3, r2, [r1]
 800c360:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1e4      	bne.n	800c332 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3308      	adds	r3, #8
 800c36e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c372:	e853 3f00 	ldrex	r3, [r3]
 800c376:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c37a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c37e:	f023 0301 	bic.w	r3, r3, #1
 800c382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3308      	adds	r3, #8
 800c38c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c390:	65ba      	str	r2, [r7, #88]	; 0x58
 800c392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c398:	e841 2300 	strex	r3, r2, [r1]
 800c39c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c39e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1e1      	bne.n	800c368 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2220      	movs	r2, #32
 800c3a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d12e      	bne.n	800c418 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d0:	f023 0310 	bic.w	r3, r3, #16
 800c3d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3de:	647b      	str	r3, [r7, #68]	; 0x44
 800c3e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3e6:	e841 2300 	strex	r3, r2, [r1]
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e6      	bne.n	800c3c0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	69db      	ldr	r3, [r3, #28]
 800c3f8:	f003 0310 	and.w	r3, r3, #16
 800c3fc:	2b10      	cmp	r3, #16
 800c3fe:	d103      	bne.n	800c408 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2210      	movs	r2, #16
 800c406:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7fe fd73 	bl	800aefc <HAL_UARTEx_RxEventCallback>
 800c416:	e002      	b.n	800c41e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7fa f8f3 	bl	8006604 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c41e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c422:	2b00      	cmp	r3, #0
 800c424:	d006      	beq.n	800c434 <UART_RxISR_16BIT_FIFOEN+0x254>
 800c426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c42a:	f003 0320 	and.w	r3, r3, #32
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f47f aefa 	bne.w	800c228 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c43a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c43e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c442:	2b00      	cmp	r3, #0
 800c444:	d047      	beq.n	800c4d6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c44c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c450:	429a      	cmp	r2, r3
 800c452:	d240      	bcs.n	800c4d6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	3308      	adds	r3, #8
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	623b      	str	r3, [r7, #32]
   return(result);
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c46a:	677b      	str	r3, [r7, #116]	; 0x74
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3308      	adds	r3, #8
 800c472:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c474:	633a      	str	r2, [r7, #48]	; 0x30
 800c476:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e5      	bne.n	800c454 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a15      	ldr	r2, [pc, #84]	; (800c4e0 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800c48c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	e853 3f00 	ldrex	r3, [r3]
 800c49a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f043 0320 	orr.w	r3, r3, #32
 800c4a2:	673b      	str	r3, [r7, #112]	; 0x70
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4ac:	61fb      	str	r3, [r7, #28]
 800c4ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	69b9      	ldr	r1, [r7, #24]
 800c4b2:	69fa      	ldr	r2, [r7, #28]
 800c4b4:	e841 2300 	strex	r3, r2, [r1]
 800c4b8:	617b      	str	r3, [r7, #20]
   return(result);
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e6      	bne.n	800c48e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4c0:	e009      	b.n	800c4d6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	8b1b      	ldrh	r3, [r3, #24]
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f042 0208 	orr.w	r2, r2, #8
 800c4d2:	b292      	uxth	r2, r2
 800c4d4:	831a      	strh	r2, [r3, #24]
}
 800c4d6:	bf00      	nop
 800c4d8:	37a0      	adds	r7, #160	; 0xa0
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	0800bd7f 	.word	0x0800bd7f

0800c4e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d101      	bne.n	800c536 <HAL_UARTEx_DisableFifoMode+0x16>
 800c532:	2302      	movs	r3, #2
 800c534:	e027      	b.n	800c586 <HAL_UARTEx_DisableFifoMode+0x66>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2224      	movs	r2, #36	; 0x24
 800c542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f022 0201 	bic.w	r2, r2, #1
 800c55c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c564:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2220      	movs	r2, #32
 800c578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d101      	bne.n	800c5aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e02d      	b.n	800c606 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2224      	movs	r2, #36	; 0x24
 800c5b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0201 	bic.w	r2, r2, #1
 800c5d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f850 	bl	800c68c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d101      	bne.n	800c626 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c622:	2302      	movs	r3, #2
 800c624:	e02d      	b.n	800c682 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2224      	movs	r2, #36	; 0x24
 800c632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f022 0201 	bic.w	r2, r2, #1
 800c64c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	430a      	orrs	r2, r1
 800c660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f812 	bl	800c68c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2220      	movs	r2, #32
 800c674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
	...

0800c68c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d108      	bne.n	800c6ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c6ac:	e031      	b.n	800c712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c6ae:	2308      	movs	r3, #8
 800c6b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c6b2:	2308      	movs	r3, #8
 800c6b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	0e5b      	lsrs	r3, r3, #25
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	f003 0307 	and.w	r3, r3, #7
 800c6c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	0f5b      	lsrs	r3, r3, #29
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0307 	and.w	r3, r3, #7
 800c6d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6d6:	7bbb      	ldrb	r3, [r7, #14]
 800c6d8:	7b3a      	ldrb	r2, [r7, #12]
 800c6da:	4911      	ldr	r1, [pc, #68]	; (800c720 <UARTEx_SetNbDataToProcess+0x94>)
 800c6dc:	5c8a      	ldrb	r2, [r1, r2]
 800c6de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6e2:	7b3a      	ldrb	r2, [r7, #12]
 800c6e4:	490f      	ldr	r1, [pc, #60]	; (800c724 <UARTEx_SetNbDataToProcess+0x98>)
 800c6e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	7b7a      	ldrb	r2, [r7, #13]
 800c6f8:	4909      	ldr	r1, [pc, #36]	; (800c720 <UARTEx_SetNbDataToProcess+0x94>)
 800c6fa:	5c8a      	ldrb	r2, [r1, r2]
 800c6fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c700:	7b7a      	ldrb	r2, [r7, #13]
 800c702:	4908      	ldr	r1, [pc, #32]	; (800c724 <UARTEx_SetNbDataToProcess+0x98>)
 800c704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c706:	fb93 f3f2 	sdiv	r3, r3, r2
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c712:	bf00      	nop
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	080150e4 	.word	0x080150e4
 800c724:	080150ec 	.word	0x080150ec

0800c728 <__NVIC_SetPriority>:
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	6039      	str	r1, [r7, #0]
 800c732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	db0a      	blt.n	800c752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	490c      	ldr	r1, [pc, #48]	; (800c774 <__NVIC_SetPriority+0x4c>)
 800c742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c746:	0112      	lsls	r2, r2, #4
 800c748:	b2d2      	uxtb	r2, r2
 800c74a:	440b      	add	r3, r1
 800c74c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c750:	e00a      	b.n	800c768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	b2da      	uxtb	r2, r3
 800c756:	4908      	ldr	r1, [pc, #32]	; (800c778 <__NVIC_SetPriority+0x50>)
 800c758:	79fb      	ldrb	r3, [r7, #7]
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	3b04      	subs	r3, #4
 800c760:	0112      	lsls	r2, r2, #4
 800c762:	b2d2      	uxtb	r2, r2
 800c764:	440b      	add	r3, r1
 800c766:	761a      	strb	r2, [r3, #24]
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	e000e100 	.word	0xe000e100
 800c778:	e000ed00 	.word	0xe000ed00

0800c77c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c77c:	b580      	push	{r7, lr}
 800c77e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <SysTick_Handler+0x1c>)
 800c782:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c784:	f002 fec6 	bl	800f514 <xTaskGetSchedulerState>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d001      	beq.n	800c792 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c78e:	f003 fde3 	bl	8010358 <xPortSysTickHandler>
  }
}
 800c792:	bf00      	nop
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	e000e010 	.word	0xe000e010

0800c79c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	f06f 0004 	mvn.w	r0, #4
 800c7a6:	f7ff ffbf 	bl	800c728 <__NVIC_SetPriority>
#endif
}
 800c7aa:	bf00      	nop
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7b6:	f3ef 8305 	mrs	r3, IPSR
 800c7ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c7bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d003      	beq.n	800c7ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c7c2:	f06f 0305 	mvn.w	r3, #5
 800c7c6:	607b      	str	r3, [r7, #4]
 800c7c8:	e00c      	b.n	800c7e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c7ca:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <osKernelInitialize+0x44>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d105      	bne.n	800c7de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7d2:	4b08      	ldr	r3, [pc, #32]	; (800c7f4 <osKernelInitialize+0x44>)
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	607b      	str	r3, [r7, #4]
 800c7dc:	e002      	b.n	800c7e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7de:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7e4:	687b      	ldr	r3, [r7, #4]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	2000065c 	.word	0x2000065c

0800c7f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7fe:	f3ef 8305 	mrs	r3, IPSR
 800c802:	603b      	str	r3, [r7, #0]
  return(result);
 800c804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c80a:	f06f 0305 	mvn.w	r3, #5
 800c80e:	607b      	str	r3, [r7, #4]
 800c810:	e010      	b.n	800c834 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c812:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <osKernelStart+0x48>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d109      	bne.n	800c82e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c81a:	f7ff ffbf 	bl	800c79c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c81e:	4b08      	ldr	r3, [pc, #32]	; (800c840 <osKernelStart+0x48>)
 800c820:	2202      	movs	r2, #2
 800c822:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c824:	f002 f96e 	bl	800eb04 <vTaskStartScheduler>
      stat = osOK;
 800c828:	2300      	movs	r3, #0
 800c82a:	607b      	str	r3, [r7, #4]
 800c82c:	e002      	b.n	800c834 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c82e:	f04f 33ff 	mov.w	r3, #4294967295
 800c832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c834:	687b      	ldr	r3, [r7, #4]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	2000065c 	.word	0x2000065c

0800c844 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c84a:	f3ef 8305 	mrs	r3, IPSR
 800c84e:	603b      	str	r3, [r7, #0]
  return(result);
 800c850:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c852:	2b00      	cmp	r3, #0
 800c854:	d003      	beq.n	800c85e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c856:	f002 fa77 	bl	800ed48 <xTaskGetTickCountFromISR>
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	e002      	b.n	800c864 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c85e:	f002 fa63 	bl	800ed28 <xTaskGetTickCount>
 800c862:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c864:	687b      	ldr	r3, [r7, #4]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c86e:	b580      	push	{r7, lr}
 800c870:	b08e      	sub	sp, #56	; 0x38
 800c872:	af04      	add	r7, sp, #16
 800c874:	60f8      	str	r0, [r7, #12]
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c87e:	f3ef 8305 	mrs	r3, IPSR
 800c882:	617b      	str	r3, [r7, #20]
  return(result);
 800c884:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c886:	2b00      	cmp	r3, #0
 800c888:	d17e      	bne.n	800c988 <osThreadNew+0x11a>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d07b      	beq.n	800c988 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c890:	2380      	movs	r3, #128	; 0x80
 800c892:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c894:	2318      	movs	r3, #24
 800c896:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c898:	2300      	movs	r3, #0
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c89c:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d045      	beq.n	800c934 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <osThreadNew+0x48>
        name = attr->name;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d002      	beq.n	800c8c4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d008      	beq.n	800c8dc <osThreadNew+0x6e>
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	2b38      	cmp	r3, #56	; 0x38
 800c8ce:	d805      	bhi.n	800c8dc <osThreadNew+0x6e>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	f003 0301 	and.w	r3, r3, #1
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <osThreadNew+0x72>
        return (NULL);
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e054      	b.n	800c98a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d003      	beq.n	800c8f0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	089b      	lsrs	r3, r3, #2
 800c8ee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00e      	beq.n	800c916 <osThreadNew+0xa8>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	2b5b      	cmp	r3, #91	; 0x5b
 800c8fe:	d90a      	bls.n	800c916 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c904:	2b00      	cmp	r3, #0
 800c906:	d006      	beq.n	800c916 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <osThreadNew+0xa8>
        mem = 1;
 800c910:	2301      	movs	r3, #1
 800c912:	61bb      	str	r3, [r7, #24]
 800c914:	e010      	b.n	800c938 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10c      	bne.n	800c938 <osThreadNew+0xca>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d108      	bne.n	800c938 <osThreadNew+0xca>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d104      	bne.n	800c938 <osThreadNew+0xca>
          mem = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	61bb      	str	r3, [r7, #24]
 800c932:	e001      	b.n	800c938 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d110      	bne.n	800c960 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c946:	9202      	str	r2, [sp, #8]
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	6a3a      	ldr	r2, [r7, #32]
 800c952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f001 fdf9 	bl	800e54c <xTaskCreateStatic>
 800c95a:	4603      	mov	r3, r0
 800c95c:	613b      	str	r3, [r7, #16]
 800c95e:	e013      	b.n	800c988 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d110      	bne.n	800c988 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	b29a      	uxth	r2, r3
 800c96a:	f107 0310 	add.w	r3, r7, #16
 800c96e:	9301      	str	r3, [sp, #4]
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f001 fe44 	bl	800e606 <xTaskCreate>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b01      	cmp	r3, #1
 800c982:	d001      	beq.n	800c988 <osThreadNew+0x11a>
            hTask = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c988:	693b      	ldr	r3, [r7, #16]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3728      	adds	r7, #40	; 0x28
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800c992:	b580      	push	{r7, lr}
 800c994:	b086      	sub	sp, #24
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c99e:	f3ef 8305 	mrs	r3, IPSR
 800c9a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d003      	beq.n	800c9b2 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800c9aa:	f06f 0305 	mvn.w	r3, #5
 800c9ae:	617b      	str	r3, [r7, #20]
 800c9b0:	e00b      	b.n	800c9ca <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d103      	bne.n	800c9c0 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800c9b8:	f06f 0303 	mvn.w	r3, #3
 800c9bc:	617b      	str	r3, [r7, #20]
 800c9be:	e004      	b.n	800c9ca <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800c9c4:	6938      	ldr	r0, [r7, #16]
 800c9c6:	f001 ff97 	bl	800e8f8 <vTaskSuspend>
  }

  return (stat);
 800c9ca:	697b      	ldr	r3, [r7, #20]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e0:	f3ef 8305 	mrs	r3, IPSR
 800c9e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <osThreadResume+0x20>
    stat = osErrorISR;
 800c9ec:	f06f 0305 	mvn.w	r3, #5
 800c9f0:	617b      	str	r3, [r7, #20]
 800c9f2:	e00b      	b.n	800ca0c <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d103      	bne.n	800ca02 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800c9fa:	f06f 0303 	mvn.w	r3, #3
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	e004      	b.n	800ca0c <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800ca06:	6938      	ldr	r0, [r7, #16]
 800ca08:	f002 f81e 	bl	800ea48 <vTaskResume>
  }

  return (stat);
 800ca0c:	697b      	ldr	r3, [r7, #20]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca1e:	f3ef 8305 	mrs	r3, IPSR
 800ca22:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d003      	beq.n	800ca32 <osDelay+0x1c>
    stat = osErrorISR;
 800ca2a:	f06f 0305 	mvn.w	r3, #5
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	e007      	b.n	800ca42 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f001 ff27 	bl	800e890 <vTaskDelay>
    }
  }

  return (stat);
 800ca42:	68fb      	ldr	r3, [r7, #12]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ca54:	2300      	movs	r3, #0
 800ca56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca58:	f3ef 8305 	mrs	r3, IPSR
 800ca5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca5e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d12d      	bne.n	800cac0 <osEventFlagsNew+0x74>
    mem = -1;
 800ca64:	f04f 33ff 	mov.w	r3, #4294967295
 800ca68:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d015      	beq.n	800ca9c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d006      	beq.n	800ca86 <osEventFlagsNew+0x3a>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	2b1f      	cmp	r3, #31
 800ca7e:	d902      	bls.n	800ca86 <osEventFlagsNew+0x3a>
        mem = 1;
 800ca80:	2301      	movs	r3, #1
 800ca82:	613b      	str	r3, [r7, #16]
 800ca84:	e00c      	b.n	800caa0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d108      	bne.n	800caa0 <osEventFlagsNew+0x54>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d104      	bne.n	800caa0 <osEventFlagsNew+0x54>
          mem = 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	613b      	str	r3, [r7, #16]
 800ca9a:	e001      	b.n	800caa0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d106      	bne.n	800cab4 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 fb2c 	bl	800d108 <xEventGroupCreateStatic>
 800cab0:	6178      	str	r0, [r7, #20]
 800cab2:	e005      	b.n	800cac0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d102      	bne.n	800cac0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800caba:	f000 fb5c 	bl	800d176 <xEventGroupCreate>
 800cabe:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800cac0:	697b      	ldr	r3, [r7, #20]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d004      	beq.n	800caea <osEventFlagsSet+0x1e>
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800caea:	f06f 0303 	mvn.w	r3, #3
 800caee:	617b      	str	r3, [r7, #20]
 800caf0:	e028      	b.n	800cb44 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caf2:	f3ef 8305 	mrs	r3, IPSR
 800caf6:	60fb      	str	r3, [r7, #12]
  return(result);
 800caf8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d01d      	beq.n	800cb3a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800cafe:	2300      	movs	r3, #0
 800cb00:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cb02:	f107 0308 	add.w	r3, r7, #8
 800cb06:	461a      	mov	r2, r3
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6938      	ldr	r0, [r7, #16]
 800cb0c:	f000 fcd6 	bl	800d4bc <xEventGroupSetBitsFromISR>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d103      	bne.n	800cb1e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800cb16:	f06f 0302 	mvn.w	r3, #2
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	e012      	b.n	800cb44 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00d      	beq.n	800cb44 <osEventFlagsSet+0x78>
 800cb28:	4b09      	ldr	r3, [pc, #36]	; (800cb50 <osEventFlagsSet+0x84>)
 800cb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	e004      	b.n	800cb44 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6938      	ldr	r0, [r7, #16]
 800cb3e:	f000 fc03 	bl	800d348 <xEventGroupSetBits>
 800cb42:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800cb44:	697b      	ldr	r3, [r7, #20]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	e000ed04 	.word	0xe000ed04

0800cb54 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08c      	sub	sp, #48	; 0x30
 800cb58:	af02      	add	r7, sp, #8
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <osEventFlagsWait+0x22>
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800cb76:	f06f 0303 	mvn.w	r3, #3
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	e04b      	b.n	800cc16 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb7e:	f3ef 8305 	mrs	r3, IPSR
 800cb82:	617b      	str	r3, [r7, #20]
  return(result);
 800cb84:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d003      	beq.n	800cb92 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800cb8a:	f06f 0305 	mvn.w	r3, #5
 800cb8e:	61fb      	str	r3, [r7, #28]
 800cb90:	e041      	b.n	800cc16 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
 800cba0:	e001      	b.n	800cba6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	623b      	str	r3, [r7, #32]
 800cbb4:	e001      	b.n	800cbba <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	6a3a      	ldr	r2, [r7, #32]
 800cbc2:	68b9      	ldr	r1, [r7, #8]
 800cbc4:	69b8      	ldr	r0, [r7, #24]
 800cbc6:	f000 faf1 	bl	800d1ac <xEventGroupWaitBits>
 800cbca:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d010      	beq.n	800cbf8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	4013      	ands	r3, r2
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d019      	beq.n	800cc16 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d003      	beq.n	800cbf0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800cbe8:	f06f 0301 	mvn.w	r3, #1
 800cbec:	61fb      	str	r3, [r7, #28]
 800cbee:	e012      	b.n	800cc16 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cbf0:	f06f 0302 	mvn.w	r3, #2
 800cbf4:	61fb      	str	r3, [r7, #28]
 800cbf6:	e00e      	b.n	800cc16 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d109      	bne.n	800cc16 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d003      	beq.n	800cc10 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800cc08:	f06f 0301 	mvn.w	r3, #1
 800cc0c:	61fb      	str	r3, [r7, #28]
 800cc0e:	e002      	b.n	800cc16 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cc10:	f06f 0302 	mvn.w	r3, #2
 800cc14:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800cc16:	69fb      	ldr	r3, [r7, #28]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3728      	adds	r7, #40	; 0x28
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b088      	sub	sp, #32
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc2c:	f3ef 8305 	mrs	r3, IPSR
 800cc30:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc32:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d174      	bne.n	800cd22 <osMutexNew+0x102>
    if (attr != NULL) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <osMutexNew+0x26>
      type = attr->attr_bits;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	61bb      	str	r3, [r7, #24]
 800cc44:	e001      	b.n	800cc4a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <osMutexNew+0x3a>
      rmtx = 1U;
 800cc54:	2301      	movs	r3, #1
 800cc56:	617b      	str	r3, [r7, #20]
 800cc58:	e001      	b.n	800cc5e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	f003 0308 	and.w	r3, r3, #8
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d15c      	bne.n	800cd22 <osMutexNew+0x102>
      mem = -1;
 800cc68:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d015      	beq.n	800cca0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d006      	beq.n	800cc8a <osMutexNew+0x6a>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2b4f      	cmp	r3, #79	; 0x4f
 800cc82:	d902      	bls.n	800cc8a <osMutexNew+0x6a>
          mem = 1;
 800cc84:	2301      	movs	r3, #1
 800cc86:	613b      	str	r3, [r7, #16]
 800cc88:	e00c      	b.n	800cca4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d108      	bne.n	800cca4 <osMutexNew+0x84>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d104      	bne.n	800cca4 <osMutexNew+0x84>
            mem = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	613b      	str	r3, [r7, #16]
 800cc9e:	e001      	b.n	800cca4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cca0:	2300      	movs	r3, #0
 800cca2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d112      	bne.n	800ccd0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d007      	beq.n	800ccc0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	2004      	movs	r0, #4
 800ccb8:	f000 fe37 	bl	800d92a <xQueueCreateMutexStatic>
 800ccbc:	61f8      	str	r0, [r7, #28]
 800ccbe:	e016      	b.n	800ccee <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	f000 fe2f 	bl	800d92a <xQueueCreateMutexStatic>
 800cccc:	61f8      	str	r0, [r7, #28]
 800ccce:	e00e      	b.n	800ccee <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10b      	bne.n	800ccee <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d004      	beq.n	800cce6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ccdc:	2004      	movs	r0, #4
 800ccde:	f000 fe0c 	bl	800d8fa <xQueueCreateMutex>
 800cce2:	61f8      	str	r0, [r7, #28]
 800cce4:	e003      	b.n	800ccee <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cce6:	2001      	movs	r0, #1
 800cce8:	f000 fe07 	bl	800d8fa <xQueueCreateMutex>
 800ccec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00c      	beq.n	800cd0e <osMutexNew+0xee>
        if (attr != NULL) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <osMutexNew+0xe2>
          name = attr->name;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	e001      	b.n	800cd06 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cd06:	68f9      	ldr	r1, [r7, #12]
 800cd08:	69f8      	ldr	r0, [r7, #28]
 800cd0a:	f001 fbc1 	bl	800e490 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d006      	beq.n	800cd22 <osMutexNew+0x102>
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	f043 0301 	orr.w	r3, r3, #1
 800cd20:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cd22:	69fb      	ldr	r3, [r7, #28]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3720      	adds	r7, #32
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f023 0301 	bic.w	r3, r3, #1
 800cd3c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd4a:	f3ef 8305 	mrs	r3, IPSR
 800cd4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd50:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d003      	beq.n	800cd5e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cd56:	f06f 0305 	mvn.w	r3, #5
 800cd5a:	617b      	str	r3, [r7, #20]
 800cd5c:	e02c      	b.n	800cdb8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cd64:	f06f 0303 	mvn.w	r3, #3
 800cd68:	617b      	str	r3, [r7, #20]
 800cd6a:	e025      	b.n	800cdb8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d011      	beq.n	800cd96 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cd72:	6839      	ldr	r1, [r7, #0]
 800cd74:	6938      	ldr	r0, [r7, #16]
 800cd76:	f000 fe27 	bl	800d9c8 <xQueueTakeMutexRecursive>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d01b      	beq.n	800cdb8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d003      	beq.n	800cd8e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cd86:	f06f 0301 	mvn.w	r3, #1
 800cd8a:	617b      	str	r3, [r7, #20]
 800cd8c:	e014      	b.n	800cdb8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cd8e:	f06f 0302 	mvn.w	r3, #2
 800cd92:	617b      	str	r3, [r7, #20]
 800cd94:	e010      	b.n	800cdb8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cd96:	6839      	ldr	r1, [r7, #0]
 800cd98:	6938      	ldr	r0, [r7, #16]
 800cd9a:	f001 f8c5 	bl	800df28 <xQueueSemaphoreTake>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d009      	beq.n	800cdb8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cdaa:	f06f 0301 	mvn.w	r3, #1
 800cdae:	617b      	str	r3, [r7, #20]
 800cdb0:	e002      	b.n	800cdb8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cdb2:	f06f 0302 	mvn.w	r3, #2
 800cdb6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cdb8:	697b      	ldr	r3, [r7, #20]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b086      	sub	sp, #24
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f023 0301 	bic.w	r3, r3, #1
 800cdd0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdde:	f3ef 8305 	mrs	r3, IPSR
 800cde2:	60bb      	str	r3, [r7, #8]
  return(result);
 800cde4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800cdea:	f06f 0305 	mvn.w	r3, #5
 800cdee:	617b      	str	r3, [r7, #20]
 800cdf0:	e01f      	b.n	800ce32 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d103      	bne.n	800ce00 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cdf8:	f06f 0303 	mvn.w	r3, #3
 800cdfc:	617b      	str	r3, [r7, #20]
 800cdfe:	e018      	b.n	800ce32 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d009      	beq.n	800ce1a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ce06:	6938      	ldr	r0, [r7, #16]
 800ce08:	f000 fdaa 	bl	800d960 <xQueueGiveMutexRecursive>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d00f      	beq.n	800ce32 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ce12:	f06f 0302 	mvn.w	r3, #2
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	e00b      	b.n	800ce32 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2100      	movs	r1, #0
 800ce20:	6938      	ldr	r0, [r7, #16]
 800ce22:	f000 fe07 	bl	800da34 <xQueueGenericSend>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d002      	beq.n	800ce32 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ce2c:	f06f 0302 	mvn.w	r3, #2
 800ce30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ce32:	697b      	ldr	r3, [r7, #20]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3718      	adds	r7, #24
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08a      	sub	sp, #40	; 0x28
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce4c:	f3ef 8305 	mrs	r3, IPSR
 800ce50:	613b      	str	r3, [r7, #16]
  return(result);
 800ce52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d15f      	bne.n	800cf18 <osMessageQueueNew+0xdc>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d05c      	beq.n	800cf18 <osMessageQueueNew+0xdc>
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d059      	beq.n	800cf18 <osMessageQueueNew+0xdc>
    mem = -1;
 800ce64:	f04f 33ff 	mov.w	r3, #4294967295
 800ce68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d029      	beq.n	800cec4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d012      	beq.n	800ce9e <osMessageQueueNew+0x62>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	2b4f      	cmp	r3, #79	; 0x4f
 800ce7e:	d90e      	bls.n	800ce9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00a      	beq.n	800ce9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	695a      	ldr	r2, [r3, #20]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	fb01 f303 	mul.w	r3, r1, r3
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d302      	bcc.n	800ce9e <osMessageQueueNew+0x62>
        mem = 1;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	61bb      	str	r3, [r7, #24]
 800ce9c:	e014      	b.n	800cec8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d110      	bne.n	800cec8 <osMessageQueueNew+0x8c>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10c      	bne.n	800cec8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d108      	bne.n	800cec8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	695b      	ldr	r3, [r3, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d104      	bne.n	800cec8 <osMessageQueueNew+0x8c>
          mem = 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	61bb      	str	r3, [r7, #24]
 800cec2:	e001      	b.n	800cec8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d10b      	bne.n	800cee6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	691a      	ldr	r2, [r3, #16]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	2100      	movs	r1, #0
 800ced8:	9100      	str	r1, [sp, #0]
 800ceda:	68b9      	ldr	r1, [r7, #8]
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f000 fc1d 	bl	800d71c <xQueueGenericCreateStatic>
 800cee2:	61f8      	str	r0, [r7, #28]
 800cee4:	e008      	b.n	800cef8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d105      	bne.n	800cef8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ceec:	2200      	movs	r2, #0
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 fc8b 	bl	800d80c <xQueueGenericCreate>
 800cef6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00c      	beq.n	800cf18 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d003      	beq.n	800cf0c <osMessageQueueNew+0xd0>
        name = attr->name;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	617b      	str	r3, [r7, #20]
 800cf0a:	e001      	b.n	800cf10 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cf10:	6979      	ldr	r1, [r7, #20]
 800cf12:	69f8      	ldr	r0, [r7, #28]
 800cf14:	f001 fabc 	bl	800e490 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cf18:	69fb      	ldr	r3, [r7, #28]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3720      	adds	r7, #32
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	4613      	mov	r3, r2
 800cf32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf3c:	f3ef 8305 	mrs	r3, IPSR
 800cf40:	617b      	str	r3, [r7, #20]
  return(result);
 800cf42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d028      	beq.n	800cf9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d005      	beq.n	800cf5a <osMessageQueuePut+0x36>
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <osMessageQueuePut+0x36>
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cf5a:	f06f 0303 	mvn.w	r3, #3
 800cf5e:	61fb      	str	r3, [r7, #28]
 800cf60:	e038      	b.n	800cfd4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cf66:	f107 0210 	add.w	r2, r7, #16
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	68b9      	ldr	r1, [r7, #8]
 800cf6e:	69b8      	ldr	r0, [r7, #24]
 800cf70:	f000 fe5e 	bl	800dc30 <xQueueGenericSendFromISR>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d003      	beq.n	800cf82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cf7a:	f06f 0302 	mvn.w	r3, #2
 800cf7e:	61fb      	str	r3, [r7, #28]
 800cf80:	e028      	b.n	800cfd4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d025      	beq.n	800cfd4 <osMessageQueuePut+0xb0>
 800cf88:	4b15      	ldr	r3, [pc, #84]	; (800cfe0 <osMessageQueuePut+0xbc>)
 800cf8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf8e:	601a      	str	r2, [r3, #0]
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	e01c      	b.n	800cfd4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <osMessageQueuePut+0x82>
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d103      	bne.n	800cfae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cfa6:	f06f 0303 	mvn.w	r3, #3
 800cfaa:	61fb      	str	r3, [r7, #28]
 800cfac:	e012      	b.n	800cfd4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfae:	2300      	movs	r3, #0
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	68b9      	ldr	r1, [r7, #8]
 800cfb4:	69b8      	ldr	r0, [r7, #24]
 800cfb6:	f000 fd3d 	bl	800da34 <xQueueGenericSend>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d009      	beq.n	800cfd4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cfc6:	f06f 0301 	mvn.w	r3, #1
 800cfca:	61fb      	str	r3, [r7, #28]
 800cfcc:	e002      	b.n	800cfd4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cfce:	f06f 0302 	mvn.w	r3, #2
 800cfd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfd4:	69fb      	ldr	r3, [r7, #28]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3720      	adds	r7, #32
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	e000ed04 	.word	0xe000ed04

0800cfe4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
 800cff0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cffa:	f3ef 8305 	mrs	r3, IPSR
 800cffe:	617b      	str	r3, [r7, #20]
  return(result);
 800d000:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d002:	2b00      	cmp	r3, #0
 800d004:	d028      	beq.n	800d058 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d005      	beq.n	800d018 <osMessageQueueGet+0x34>
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <osMessageQueueGet+0x34>
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d018:	f06f 0303 	mvn.w	r3, #3
 800d01c:	61fb      	str	r3, [r7, #28]
 800d01e:	e037      	b.n	800d090 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d020:	2300      	movs	r3, #0
 800d022:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d024:	f107 0310 	add.w	r3, r7, #16
 800d028:	461a      	mov	r2, r3
 800d02a:	68b9      	ldr	r1, [r7, #8]
 800d02c:	69b8      	ldr	r0, [r7, #24]
 800d02e:	f001 f887 	bl	800e140 <xQueueReceiveFromISR>
 800d032:	4603      	mov	r3, r0
 800d034:	2b01      	cmp	r3, #1
 800d036:	d003      	beq.n	800d040 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d038:	f06f 0302 	mvn.w	r3, #2
 800d03c:	61fb      	str	r3, [r7, #28]
 800d03e:	e027      	b.n	800d090 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d024      	beq.n	800d090 <osMessageQueueGet+0xac>
 800d046:	4b15      	ldr	r3, [pc, #84]	; (800d09c <osMessageQueueGet+0xb8>)
 800d048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	e01b      	b.n	800d090 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d002      	beq.n	800d064 <osMessageQueueGet+0x80>
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d064:	f06f 0303 	mvn.w	r3, #3
 800d068:	61fb      	str	r3, [r7, #28]
 800d06a:	e011      	b.n	800d090 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	68b9      	ldr	r1, [r7, #8]
 800d070:	69b8      	ldr	r0, [r7, #24]
 800d072:	f000 fe79 	bl	800dd68 <xQueueReceive>
 800d076:	4603      	mov	r3, r0
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d009      	beq.n	800d090 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d082:	f06f 0301 	mvn.w	r3, #1
 800d086:	61fb      	str	r3, [r7, #28]
 800d088:	e002      	b.n	800d090 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d08a:	f06f 0302 	mvn.w	r3, #2
 800d08e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d090:	69fb      	ldr	r3, [r7, #28]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3720      	adds	r7, #32
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	e000ed04 	.word	0xe000ed04

0800d0a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4a07      	ldr	r2, [pc, #28]	; (800d0cc <vApplicationGetIdleTaskMemory+0x2c>)
 800d0b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	4a06      	ldr	r2, [pc, #24]	; (800d0d0 <vApplicationGetIdleTaskMemory+0x30>)
 800d0b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2280      	movs	r2, #128	; 0x80
 800d0bc:	601a      	str	r2, [r3, #0]
}
 800d0be:	bf00      	nop
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	20000660 	.word	0x20000660
 800d0d0:	200006bc 	.word	0x200006bc

0800d0d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4a07      	ldr	r2, [pc, #28]	; (800d100 <vApplicationGetTimerTaskMemory+0x2c>)
 800d0e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	4a06      	ldr	r2, [pc, #24]	; (800d104 <vApplicationGetTimerTaskMemory+0x30>)
 800d0ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0f2:	601a      	str	r2, [r3, #0]
}
 800d0f4:	bf00      	nop
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	200008bc 	.word	0x200008bc
 800d104:	20000918 	.word	0x20000918

0800d108 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d128:	bf00      	nop
 800d12a:	e7fe      	b.n	800d12a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800d12c:	2320      	movs	r3, #32
 800d12e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b20      	cmp	r3, #32
 800d134:	d00a      	beq.n	800d14c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	60fb      	str	r3, [r7, #12]
}
 800d148:	bf00      	nop
 800d14a:	e7fe      	b.n	800d14a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00a      	beq.n	800d16c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	3304      	adds	r3, #4
 800d160:	4618      	mov	r0, r3
 800d162:	f000 f9bf 	bl	800d4e4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2201      	movs	r2, #1
 800d16a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800d16c:	697b      	ldr	r3, [r7, #20]
	}
 800d16e:	4618      	mov	r0, r3
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d176:	b580      	push	{r7, lr}
 800d178:	b082      	sub	sp, #8
 800d17a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d17c:	2020      	movs	r0, #32
 800d17e:	f003 f97b 	bl	8010478 <pvPortMalloc>
 800d182:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00a      	beq.n	800d1a0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	3304      	adds	r3, #4
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f9a5 	bl	800d4e4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d1a0:	687b      	ldr	r3, [r7, #4]
	}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b090      	sub	sp, #64	; 0x40
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10a      	bne.n	800d1e2 <xEventGroupWaitBits+0x36>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	623b      	str	r3, [r7, #32]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00a      	beq.n	800d202 <xEventGroupWaitBits+0x56>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	61fb      	str	r3, [r7, #28]
}
 800d1fe:	bf00      	nop
 800d200:	e7fe      	b.n	800d200 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10a      	bne.n	800d21e <xEventGroupWaitBits+0x72>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	61bb      	str	r3, [r7, #24]
}
 800d21a:	bf00      	nop
 800d21c:	e7fe      	b.n	800d21c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d21e:	f002 f979 	bl	800f514 <xTaskGetSchedulerState>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <xEventGroupWaitBits+0x82>
 800d228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d101      	bne.n	800d232 <xEventGroupWaitBits+0x86>
 800d22e:	2301      	movs	r3, #1
 800d230:	e000      	b.n	800d234 <xEventGroupWaitBits+0x88>
 800d232:	2300      	movs	r3, #0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10a      	bne.n	800d24e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	617b      	str	r3, [r7, #20]
}
 800d24a:	bf00      	nop
 800d24c:	e7fe      	b.n	800d24c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800d24e:	f001 fcbf 	bl	800ebd0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	68b9      	ldr	r1, [r7, #8]
 800d25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d25e:	f000 f90b 	bl	800d478 <prvTestWaitCondition>
 800d262:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00e      	beq.n	800d288 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d028      	beq.n	800d2ca <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	43db      	mvns	r3, r3
 800d280:	401a      	ands	r2, r3
 800d282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	e020      	b.n	800d2ca <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d104      	bne.n	800d298 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800d292:	2301      	movs	r3, #1
 800d294:	633b      	str	r3, [r7, #48]	; 0x30
 800d296:	e018      	b.n	800d2ca <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d003      	beq.n	800d2a6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2a4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d003      	beq.n	800d2b4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2b2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b6:	1d18      	adds	r0, r3, #4
 800d2b8:	68ba      	ldr	r2, [r7, #8]
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	f001 fe8f 	bl	800efe4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d2ca:	f001 fc8f 	bl	800ebec <xTaskResumeAll>
 800d2ce:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d2d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d031      	beq.n	800d33a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d107      	bne.n	800d2ec <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800d2dc:	4b19      	ldr	r3, [pc, #100]	; (800d344 <xEventGroupWaitBits+0x198>)
 800d2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d2ec:	f002 fa88 	bl	800f800 <uxTaskResetEventItemValue>
 800d2f0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d11a      	bne.n	800d332 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800d2fc:	f002 ff9a 	bl	8010234 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	68b9      	ldr	r1, [r7, #8]
 800d30a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d30c:	f000 f8b4 	bl	800d478 <prvTestWaitCondition>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d009      	beq.n	800d32a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d006      	beq.n	800d32a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	43db      	mvns	r3, r3
 800d324:	401a      	ands	r2, r3
 800d326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d328:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d32a:	2301      	movs	r3, #1
 800d32c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800d32e:	f002 ffb1 	bl	8010294 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d338:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3740      	adds	r7, #64	; 0x40
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	e000ed04 	.word	0xe000ed04

0800d348 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08e      	sub	sp, #56	; 0x38
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d352:	2300      	movs	r3, #0
 800d354:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800d35a:	2300      	movs	r3, #0
 800d35c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <xEventGroupSetBits+0x32>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	613b      	str	r3, [r7, #16]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00a      	beq.n	800d39a <xEventGroupSetBits+0x52>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	60fb      	str	r3, [r7, #12]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39c:	3304      	adds	r3, #4
 800d39e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	3308      	adds	r3, #8
 800d3a4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d3a6:	f001 fc13 	bl	800ebd0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	431a      	orrs	r2, r3
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d3bc:	e03c      	b.n	800d438 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d3d4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d3dc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d108      	bne.n	800d3fa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00b      	beq.n	800d40c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3f8:	e008      	b.n	800d40c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	4013      	ands	r3, r2
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	429a      	cmp	r2, r3
 800d406:	d101      	bne.n	800d40c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d408:	2301      	movs	r3, #1
 800d40a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d010      	beq.n	800d434 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d003      	beq.n	800d424 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	4313      	orrs	r3, r2
 800d422:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d42c:	4619      	mov	r1, r3
 800d42e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d430:	f001 fea4 	bl	800f17c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800d438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d43a:	6a3b      	ldr	r3, [r7, #32]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d1be      	bne.n	800d3be <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	43db      	mvns	r3, r3
 800d448:	401a      	ands	r2, r3
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d44e:	f001 fbcd 	bl	800ebec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	681b      	ldr	r3, [r3, #0]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3738      	adds	r7, #56	; 0x38
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b082      	sub	sp, #8
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
 800d466:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7ff ff6c 	bl	800d348 <xEventGroupSetBits>
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d484:	2300      	movs	r3, #0
 800d486:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d107      	bne.n	800d49e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	4013      	ands	r3, r2
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00a      	beq.n	800d4ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d498:	2301      	movs	r3, #1
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	e007      	b.n	800d4ae <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	68ba      	ldr	r2, [r7, #8]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d101      	bne.n	800d4ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d4ae:	697b      	ldr	r3, [r7, #20]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	371c      	adds	r7, #28
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	68f9      	ldr	r1, [r7, #12]
 800d4ce:	4804      	ldr	r0, [pc, #16]	; (800d4e0 <xEventGroupSetBitsFromISR+0x24>)
 800d4d0:	f002 fd64 	bl	800ff9c <xTimerPendFunctionCallFromISR>
 800d4d4:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d4d6:	697b      	ldr	r3, [r7, #20]
	}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	0800d45f 	.word	0x0800d45f

0800d4e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f103 0208 	add.w	r2, r3, #8
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f103 0208 	add.w	r2, r3, #8
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f103 0208 	add.w	r2, r3, #8
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d532:	bf00      	nop
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d53e:	b480      	push	{r7}
 800d540:	b085      	sub	sp, #20
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	689a      	ldr	r2, [r3, #8]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	1c5a      	adds	r2, r3, #1
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	601a      	str	r2, [r3, #0]
}
 800d57a:	bf00      	nop
 800d57c:	3714      	adds	r7, #20
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr

0800d586 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d586:	b480      	push	{r7}
 800d588:	b085      	sub	sp, #20
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59c:	d103      	bne.n	800d5a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	60fb      	str	r3, [r7, #12]
 800d5a4:	e00c      	b.n	800d5c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	e002      	b.n	800d5b4 <vListInsert+0x2e>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d2f6      	bcs.n	800d5ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	683a      	ldr	r2, [r7, #0]
 800d5da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	601a      	str	r2, [r3, #0]
}
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	6892      	ldr	r2, [r2, #8]
 800d60e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	6852      	ldr	r2, [r2, #4]
 800d618:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	429a      	cmp	r2, r3
 800d622:	d103      	bne.n	800d62c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689a      	ldr	r2, [r3, #8]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	1e5a      	subs	r2, r3, #1
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3714      	adds	r7, #20
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10a      	bne.n	800d676 <xQueueGenericReset+0x2a>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	60bb      	str	r3, [r7, #8]
}
 800d672:	bf00      	nop
 800d674:	e7fe      	b.n	800d674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d676:	f002 fddd 	bl	8010234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d682:	68f9      	ldr	r1, [r7, #12]
 800d684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d686:	fb01 f303 	mul.w	r3, r1, r3
 800d68a:	441a      	add	r2, r3
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2200      	movs	r2, #0
 800d694:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	68f9      	ldr	r1, [r7, #12]
 800d6aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d6ac:	fb01 f303 	mul.w	r3, r1, r3
 800d6b0:	441a      	add	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	22ff      	movs	r2, #255	; 0xff
 800d6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	22ff      	movs	r2, #255	; 0xff
 800d6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d114      	bne.n	800d6f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d01a      	beq.n	800d70a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	3310      	adds	r3, #16
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f001 fceb 	bl	800f0b4 <xTaskRemoveFromEventList>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d012      	beq.n	800d70a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d6e4:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <xQueueGenericReset+0xcc>)
 800d6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	e009      	b.n	800d70a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3310      	adds	r3, #16
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7ff fef2 	bl	800d4e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	3324      	adds	r3, #36	; 0x24
 800d704:	4618      	mov	r0, r3
 800d706:	f7ff feed 	bl	800d4e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d70a:	f002 fdc3 	bl	8010294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d70e:	2301      	movs	r3, #1
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	e000ed04 	.word	0xe000ed04

0800d71c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08e      	sub	sp, #56	; 0x38
 800d720:	af02      	add	r7, sp, #8
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10a      	bne.n	800d746 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10a      	bne.n	800d762 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d75e:	bf00      	nop
 800d760:	e7fe      	b.n	800d760 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <xQueueGenericCreateStatic+0x52>
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <xQueueGenericCreateStatic+0x56>
 800d76e:	2301      	movs	r3, #1
 800d770:	e000      	b.n	800d774 <xQueueGenericCreateStatic+0x58>
 800d772:	2300      	movs	r3, #0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10a      	bne.n	800d78e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	623b      	str	r3, [r7, #32]
}
 800d78a:	bf00      	nop
 800d78c:	e7fe      	b.n	800d78c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d102      	bne.n	800d79a <xQueueGenericCreateStatic+0x7e>
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <xQueueGenericCreateStatic+0x82>
 800d79a:	2301      	movs	r3, #1
 800d79c:	e000      	b.n	800d7a0 <xQueueGenericCreateStatic+0x84>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10a      	bne.n	800d7ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	61fb      	str	r3, [r7, #28]
}
 800d7b6:	bf00      	nop
 800d7b8:	e7fe      	b.n	800d7b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d7ba:	2350      	movs	r3, #80	; 0x50
 800d7bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	2b50      	cmp	r3, #80	; 0x50
 800d7c2:	d00a      	beq.n	800d7da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	61bb      	str	r3, [r7, #24]
}
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00d      	beq.n	800d802 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	68b9      	ldr	r1, [r7, #8]
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f000 f83f 	bl	800d880 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d804:	4618      	mov	r0, r3
 800d806:	3730      	adds	r7, #48	; 0x30
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08a      	sub	sp, #40	; 0x28
 800d810:	af02      	add	r7, sp, #8
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	4613      	mov	r3, r2
 800d818:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10a      	bne.n	800d836 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	613b      	str	r3, [r7, #16]
}
 800d832:	bf00      	nop
 800d834:	e7fe      	b.n	800d834 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	fb02 f303 	mul.w	r3, r2, r3
 800d83e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	3350      	adds	r3, #80	; 0x50
 800d844:	4618      	mov	r0, r3
 800d846:	f002 fe17 	bl	8010478 <pvPortMalloc>
 800d84a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d011      	beq.n	800d876 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	3350      	adds	r3, #80	; 0x50
 800d85a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d864:	79fa      	ldrb	r2, [r7, #7]
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	4613      	mov	r3, r2
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	68b9      	ldr	r1, [r7, #8]
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f000 f805 	bl	800d880 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d876:	69bb      	ldr	r3, [r7, #24]
	}
 800d878:	4618      	mov	r0, r3
 800d87a:	3720      	adds	r7, #32
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d103      	bne.n	800d89c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	69ba      	ldr	r2, [r7, #24]
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	e002      	b.n	800d8a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d8ae:	2101      	movs	r1, #1
 800d8b0:	69b8      	ldr	r0, [r7, #24]
 800d8b2:	f7ff fecb 	bl	800d64c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	78fa      	ldrb	r2, [r7, #3]
 800d8ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d8be:	bf00      	nop
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b082      	sub	sp, #8
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00e      	beq.n	800d8f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f8a1 	bl	800da34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b086      	sub	sp, #24
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	4603      	mov	r3, r0
 800d902:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d904:	2301      	movs	r3, #1
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	2300      	movs	r3, #0
 800d90a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	461a      	mov	r2, r3
 800d910:	6939      	ldr	r1, [r7, #16]
 800d912:	6978      	ldr	r0, [r7, #20]
 800d914:	f7ff ff7a 	bl	800d80c <xQueueGenericCreate>
 800d918:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f7ff ffd3 	bl	800d8c6 <prvInitialiseMutex>

		return xNewQueue;
 800d920:	68fb      	ldr	r3, [r7, #12]
	}
 800d922:	4618      	mov	r0, r3
 800d924:	3718      	adds	r7, #24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b088      	sub	sp, #32
 800d92e:	af02      	add	r7, sp, #8
 800d930:	4603      	mov	r3, r0
 800d932:	6039      	str	r1, [r7, #0]
 800d934:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d936:	2301      	movs	r3, #1
 800d938:	617b      	str	r3, [r7, #20]
 800d93a:	2300      	movs	r3, #0
 800d93c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d93e:	79fb      	ldrb	r3, [r7, #7]
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2200      	movs	r2, #0
 800d946:	6939      	ldr	r1, [r7, #16]
 800d948:	6978      	ldr	r0, [r7, #20]
 800d94a:	f7ff fee7 	bl	800d71c <xQueueGenericCreateStatic>
 800d94e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff ffb8 	bl	800d8c6 <prvInitialiseMutex>

		return xNewQueue;
 800d956:	68fb      	ldr	r3, [r7, #12]
	}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d960:	b590      	push	{r4, r7, lr}
 800d962:	b087      	sub	sp, #28
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10a      	bne.n	800d988 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	60fb      	str	r3, [r7, #12]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	689c      	ldr	r4, [r3, #8]
 800d98c:	f001 fdb2 	bl	800f4f4 <xTaskGetCurrentTaskHandle>
 800d990:	4603      	mov	r3, r0
 800d992:	429c      	cmp	r4, r3
 800d994:	d111      	bne.n	800d9ba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	1e5a      	subs	r2, r3, #1
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d105      	bne.n	800d9b4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	6938      	ldr	r0, [r7, #16]
 800d9b0:	f000 f840 	bl	800da34 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	617b      	str	r3, [r7, #20]
 800d9b8:	e001      	b.n	800d9be <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d9be:	697b      	ldr	r3, [r7, #20]
	}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	371c      	adds	r7, #28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd90      	pop	{r4, r7, pc}

0800d9c8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d9c8:	b590      	push	{r4, r7, lr}
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10a      	bne.n	800d9f2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	60fb      	str	r3, [r7, #12]
}
 800d9ee:	bf00      	nop
 800d9f0:	e7fe      	b.n	800d9f0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	689c      	ldr	r4, [r3, #8]
 800d9f6:	f001 fd7d 	bl	800f4f4 <xTaskGetCurrentTaskHandle>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	429c      	cmp	r4, r3
 800d9fe:	d107      	bne.n	800da10 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	1c5a      	adds	r2, r3, #1
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800da0a:	2301      	movs	r3, #1
 800da0c:	617b      	str	r3, [r7, #20]
 800da0e:	e00c      	b.n	800da2a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	6938      	ldr	r0, [r7, #16]
 800da14:	f000 fa88 	bl	800df28 <xQueueSemaphoreTake>
 800da18:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d004      	beq.n	800da2a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	1c5a      	adds	r2, r3, #1
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800da2a:	697b      	ldr	r3, [r7, #20]
	}
 800da2c:	4618      	mov	r0, r3
 800da2e:	371c      	adds	r7, #28
 800da30:	46bd      	mov	sp, r7
 800da32:	bd90      	pop	{r4, r7, pc}

0800da34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b08e      	sub	sp, #56	; 0x38
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800da42:	2300      	movs	r3, #0
 800da44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10a      	bne.n	800da66 <xQueueGenericSend+0x32>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da62:	bf00      	nop
 800da64:	e7fe      	b.n	800da64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d103      	bne.n	800da74 <xQueueGenericSend+0x40>
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <xQueueGenericSend+0x44>
 800da74:	2301      	movs	r3, #1
 800da76:	e000      	b.n	800da7a <xQueueGenericSend+0x46>
 800da78:	2300      	movs	r3, #0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d10a      	bne.n	800da94 <xQueueGenericSend+0x60>
	__asm volatile
 800da7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da90:	bf00      	nop
 800da92:	e7fe      	b.n	800da92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b02      	cmp	r3, #2
 800da98:	d103      	bne.n	800daa2 <xQueueGenericSend+0x6e>
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d101      	bne.n	800daa6 <xQueueGenericSend+0x72>
 800daa2:	2301      	movs	r3, #1
 800daa4:	e000      	b.n	800daa8 <xQueueGenericSend+0x74>
 800daa6:	2300      	movs	r3, #0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10a      	bne.n	800dac2 <xQueueGenericSend+0x8e>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	623b      	str	r3, [r7, #32]
}
 800dabe:	bf00      	nop
 800dac0:	e7fe      	b.n	800dac0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dac2:	f001 fd27 	bl	800f514 <xTaskGetSchedulerState>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d102      	bne.n	800dad2 <xQueueGenericSend+0x9e>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <xQueueGenericSend+0xa2>
 800dad2:	2301      	movs	r3, #1
 800dad4:	e000      	b.n	800dad8 <xQueueGenericSend+0xa4>
 800dad6:	2300      	movs	r3, #0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d10a      	bne.n	800daf2 <xQueueGenericSend+0xbe>
	__asm volatile
 800dadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae0:	f383 8811 	msr	BASEPRI, r3
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	61fb      	str	r3, [r7, #28]
}
 800daee:	bf00      	nop
 800daf0:	e7fe      	b.n	800daf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800daf2:	f002 fb9f 	bl	8010234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dafe:	429a      	cmp	r2, r3
 800db00:	d302      	bcc.n	800db08 <xQueueGenericSend+0xd4>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b02      	cmp	r3, #2
 800db06:	d129      	bne.n	800db5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	68b9      	ldr	r1, [r7, #8]
 800db0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db0e:	f000 fbaf 	bl	800e270 <prvCopyDataToQueue>
 800db12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d010      	beq.n	800db3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	3324      	adds	r3, #36	; 0x24
 800db20:	4618      	mov	r0, r3
 800db22:	f001 fac7 	bl	800f0b4 <xTaskRemoveFromEventList>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d013      	beq.n	800db54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db2c:	4b3f      	ldr	r3, [pc, #252]	; (800dc2c <xQueueGenericSend+0x1f8>)
 800db2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	e00a      	b.n	800db54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	2b00      	cmp	r3, #0
 800db42:	d007      	beq.n	800db54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800db44:	4b39      	ldr	r3, [pc, #228]	; (800dc2c <xQueueGenericSend+0x1f8>)
 800db46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db54:	f002 fb9e 	bl	8010294 <vPortExitCritical>
				return pdPASS;
 800db58:	2301      	movs	r3, #1
 800db5a:	e063      	b.n	800dc24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d103      	bne.n	800db6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db62:	f002 fb97 	bl	8010294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db66:	2300      	movs	r3, #0
 800db68:	e05c      	b.n	800dc24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d106      	bne.n	800db7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db70:	f107 0314 	add.w	r3, r7, #20
 800db74:	4618      	mov	r0, r3
 800db76:	f001 fb63 	bl	800f240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db7a:	2301      	movs	r3, #1
 800db7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db7e:	f002 fb89 	bl	8010294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db82:	f001 f825 	bl	800ebd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db86:	f002 fb55 	bl	8010234 <vPortEnterCritical>
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db90:	b25b      	sxtb	r3, r3
 800db92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db96:	d103      	bne.n	800dba0 <xQueueGenericSend+0x16c>
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dba6:	b25b      	sxtb	r3, r3
 800dba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbac:	d103      	bne.n	800dbb6 <xQueueGenericSend+0x182>
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbb6:	f002 fb6d 	bl	8010294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbba:	1d3a      	adds	r2, r7, #4
 800dbbc:	f107 0314 	add.w	r3, r7, #20
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f001 fb52 	bl	800f26c <xTaskCheckForTimeOut>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d124      	bne.n	800dc18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dbce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbd0:	f000 fc46 	bl	800e460 <prvIsQueueFull>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d018      	beq.n	800dc0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	3310      	adds	r3, #16
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f001 f9da 	bl	800ef9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dbe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbea:	f000 fbd1 	bl	800e390 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dbee:	f000 fffd 	bl	800ebec <xTaskResumeAll>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f47f af7c 	bne.w	800daf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dbfa:	4b0c      	ldr	r3, [pc, #48]	; (800dc2c <xQueueGenericSend+0x1f8>)
 800dbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	e772      	b.n	800daf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc0e:	f000 fbbf 	bl	800e390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc12:	f000 ffeb 	bl	800ebec <xTaskResumeAll>
 800dc16:	e76c      	b.n	800daf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc1a:	f000 fbb9 	bl	800e390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc1e:	f000 ffe5 	bl	800ebec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3738      	adds	r7, #56	; 0x38
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	e000ed04 	.word	0xe000ed04

0800dc30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b090      	sub	sp, #64	; 0x40
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
 800dc3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10a      	bne.n	800dc5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dc5a:	bf00      	nop
 800dc5c:	e7fe      	b.n	800dc5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d103      	bne.n	800dc6c <xQueueGenericSendFromISR+0x3c>
 800dc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d101      	bne.n	800dc70 <xQueueGenericSendFromISR+0x40>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e000      	b.n	800dc72 <xQueueGenericSendFromISR+0x42>
 800dc70:	2300      	movs	r3, #0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d10a      	bne.n	800dc8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7a:	f383 8811 	msr	BASEPRI, r3
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc88:	bf00      	nop
 800dc8a:	e7fe      	b.n	800dc8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d103      	bne.n	800dc9a <xQueueGenericSendFromISR+0x6a>
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d101      	bne.n	800dc9e <xQueueGenericSendFromISR+0x6e>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e000      	b.n	800dca0 <xQueueGenericSendFromISR+0x70>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10a      	bne.n	800dcba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	623b      	str	r3, [r7, #32]
}
 800dcb6:	bf00      	nop
 800dcb8:	e7fe      	b.n	800dcb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcba:	f002 fb9d 	bl	80103f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dcbe:	f3ef 8211 	mrs	r2, BASEPRI
 800dcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	61fa      	str	r2, [r7, #28]
 800dcd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dcd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d302      	bcc.n	800dcec <xQueueGenericSendFromISR+0xbc>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d12f      	bne.n	800dd4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	68b9      	ldr	r1, [r7, #8]
 800dd00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd02:	f000 fab5 	bl	800e270 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0e:	d112      	bne.n	800dd36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d016      	beq.n	800dd46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1a:	3324      	adds	r3, #36	; 0x24
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f001 f9c9 	bl	800f0b4 <xTaskRemoveFromEventList>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00e      	beq.n	800dd46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00b      	beq.n	800dd46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2201      	movs	r2, #1
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	e007      	b.n	800dd46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	b25a      	sxtb	r2, r3
 800dd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dd46:	2301      	movs	r3, #1
 800dd48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dd4a:	e001      	b.n	800dd50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3740      	adds	r7, #64	; 0x40
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08c      	sub	sp, #48	; 0x30
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10a      	bne.n	800dd98 <xQueueReceive+0x30>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	623b      	str	r3, [r7, #32]
}
 800dd94:	bf00      	nop
 800dd96:	e7fe      	b.n	800dd96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d103      	bne.n	800dda6 <xQueueReceive+0x3e>
 800dd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <xQueueReceive+0x42>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e000      	b.n	800ddac <xQueueReceive+0x44>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10a      	bne.n	800ddc6 <xQueueReceive+0x5e>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	61fb      	str	r3, [r7, #28]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddc6:	f001 fba5 	bl	800f514 <xTaskGetSchedulerState>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d102      	bne.n	800ddd6 <xQueueReceive+0x6e>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <xQueueReceive+0x72>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e000      	b.n	800dddc <xQueueReceive+0x74>
 800ddda:	2300      	movs	r3, #0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10a      	bne.n	800ddf6 <xQueueReceive+0x8e>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	61bb      	str	r3, [r7, #24]
}
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ddf6:	f002 fa1d 	bl	8010234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	2b00      	cmp	r3, #0
 800de04:	d01f      	beq.n	800de46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de0a:	f000 fa9b 	bl	800e344 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	1e5a      	subs	r2, r3, #1
 800de12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00f      	beq.n	800de3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de20:	3310      	adds	r3, #16
 800de22:	4618      	mov	r0, r3
 800de24:	f001 f946 	bl	800f0b4 <xTaskRemoveFromEventList>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d007      	beq.n	800de3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de2e:	4b3d      	ldr	r3, [pc, #244]	; (800df24 <xQueueReceive+0x1bc>)
 800de30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de3e:	f002 fa29 	bl	8010294 <vPortExitCritical>
				return pdPASS;
 800de42:	2301      	movs	r3, #1
 800de44:	e069      	b.n	800df1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d103      	bne.n	800de54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de4c:	f002 fa22 	bl	8010294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de50:	2300      	movs	r3, #0
 800de52:	e062      	b.n	800df1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de5a:	f107 0310 	add.w	r3, r7, #16
 800de5e:	4618      	mov	r0, r3
 800de60:	f001 f9ee 	bl	800f240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de68:	f002 fa14 	bl	8010294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de6c:	f000 feb0 	bl	800ebd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de70:	f002 f9e0 	bl	8010234 <vPortEnterCritical>
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de7a:	b25b      	sxtb	r3, r3
 800de7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de80:	d103      	bne.n	800de8a <xQueueReceive+0x122>
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de84:	2200      	movs	r2, #0
 800de86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de90:	b25b      	sxtb	r3, r3
 800de92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de96:	d103      	bne.n	800dea0 <xQueueReceive+0x138>
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dea0:	f002 f9f8 	bl	8010294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dea4:	1d3a      	adds	r2, r7, #4
 800dea6:	f107 0310 	add.w	r3, r7, #16
 800deaa:	4611      	mov	r1, r2
 800deac:	4618      	mov	r0, r3
 800deae:	f001 f9dd 	bl	800f26c <xTaskCheckForTimeOut>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d123      	bne.n	800df00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800deb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deba:	f000 fabb 	bl	800e434 <prvIsQueueEmpty>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d017      	beq.n	800def4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec6:	3324      	adds	r3, #36	; 0x24
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	4611      	mov	r1, r2
 800decc:	4618      	mov	r0, r3
 800dece:	f001 f865 	bl	800ef9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ded2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ded4:	f000 fa5c 	bl	800e390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ded8:	f000 fe88 	bl	800ebec <xTaskResumeAll>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d189      	bne.n	800ddf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dee2:	4b10      	ldr	r3, [pc, #64]	; (800df24 <xQueueReceive+0x1bc>)
 800dee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee8:	601a      	str	r2, [r3, #0]
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	f3bf 8f6f 	isb	sy
 800def2:	e780      	b.n	800ddf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800def4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800def6:	f000 fa4b 	bl	800e390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800defa:	f000 fe77 	bl	800ebec <xTaskResumeAll>
 800defe:	e77a      	b.n	800ddf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df02:	f000 fa45 	bl	800e390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df06:	f000 fe71 	bl	800ebec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df0c:	f000 fa92 	bl	800e434 <prvIsQueueEmpty>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	f43f af6f 	beq.w	800ddf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3730      	adds	r7, #48	; 0x30
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	e000ed04 	.word	0xe000ed04

0800df28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08e      	sub	sp, #56	; 0x38
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800df32:	2300      	movs	r3, #0
 800df34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800df3a:	2300      	movs	r3, #0
 800df3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10a      	bne.n	800df5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	623b      	str	r3, [r7, #32]
}
 800df56:	bf00      	nop
 800df58:	e7fe      	b.n	800df58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	61fb      	str	r3, [r7, #28]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df78:	f001 facc 	bl	800f514 <xTaskGetSchedulerState>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d102      	bne.n	800df88 <xQueueSemaphoreTake+0x60>
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <xQueueSemaphoreTake+0x64>
 800df88:	2301      	movs	r3, #1
 800df8a:	e000      	b.n	800df8e <xQueueSemaphoreTake+0x66>
 800df8c:	2300      	movs	r3, #0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10a      	bne.n	800dfa8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	61bb      	str	r3, [r7, #24]
}
 800dfa4:	bf00      	nop
 800dfa6:	e7fe      	b.n	800dfa6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfa8:	f002 f944 	bl	8010234 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d024      	beq.n	800e002 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	1e5a      	subs	r2, r3, #1
 800dfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d104      	bne.n	800dfd2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dfc8:	f001 fc32 	bl	800f830 <pvTaskIncrementMutexHeldCount>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00f      	beq.n	800dffa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfdc:	3310      	adds	r3, #16
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f001 f868 	bl	800f0b4 <xTaskRemoveFromEventList>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d007      	beq.n	800dffa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dfea:	4b54      	ldr	r3, [pc, #336]	; (800e13c <xQueueSemaphoreTake+0x214>)
 800dfec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dffa:	f002 f94b 	bl	8010294 <vPortExitCritical>
				return pdPASS;
 800dffe:	2301      	movs	r3, #1
 800e000:	e097      	b.n	800e132 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d111      	bne.n	800e02c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00a      	beq.n	800e024 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	617b      	str	r3, [r7, #20]
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e024:	f002 f936 	bl	8010294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e028:	2300      	movs	r3, #0
 800e02a:	e082      	b.n	800e132 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d106      	bne.n	800e040 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e032:	f107 030c 	add.w	r3, r7, #12
 800e036:	4618      	mov	r0, r3
 800e038:	f001 f902 	bl	800f240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e03c:	2301      	movs	r3, #1
 800e03e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e040:	f002 f928 	bl	8010294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e044:	f000 fdc4 	bl	800ebd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e048:	f002 f8f4 	bl	8010234 <vPortEnterCritical>
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e052:	b25b      	sxtb	r3, r3
 800e054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e058:	d103      	bne.n	800e062 <xQueueSemaphoreTake+0x13a>
 800e05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e068:	b25b      	sxtb	r3, r3
 800e06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e06e:	d103      	bne.n	800e078 <xQueueSemaphoreTake+0x150>
 800e070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e078:	f002 f90c 	bl	8010294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e07c:	463a      	mov	r2, r7
 800e07e:	f107 030c 	add.w	r3, r7, #12
 800e082:	4611      	mov	r1, r2
 800e084:	4618      	mov	r0, r3
 800e086:	f001 f8f1 	bl	800f26c <xTaskCheckForTimeOut>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d132      	bne.n	800e0f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e092:	f000 f9cf 	bl	800e434 <prvIsQueueEmpty>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d026      	beq.n	800e0ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d109      	bne.n	800e0b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e0a4:	f002 f8c6 	bl	8010234 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f001 fa4f 	bl	800f550 <xTaskPriorityInherit>
 800e0b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e0b4:	f002 f8ee 	bl	8010294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ba:	3324      	adds	r3, #36	; 0x24
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	4611      	mov	r1, r2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f000 ff6b 	bl	800ef9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0c8:	f000 f962 	bl	800e390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0cc:	f000 fd8e 	bl	800ebec <xTaskResumeAll>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f47f af68 	bne.w	800dfa8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e0d8:	4b18      	ldr	r3, [pc, #96]	; (800e13c <xQueueSemaphoreTake+0x214>)
 800e0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0de:	601a      	str	r2, [r3, #0]
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	e75e      	b.n	800dfa8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e0ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0ec:	f000 f950 	bl	800e390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0f0:	f000 fd7c 	bl	800ebec <xTaskResumeAll>
 800e0f4:	e758      	b.n	800dfa8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e0f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0f8:	f000 f94a 	bl	800e390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0fc:	f000 fd76 	bl	800ebec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e102:	f000 f997 	bl	800e434 <prvIsQueueEmpty>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f43f af4d 	beq.w	800dfa8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00d      	beq.n	800e130 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e114:	f002 f88e 	bl	8010234 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e11a:	f000 f891 	bl	800e240 <prvGetDisinheritPriorityAfterTimeout>
 800e11e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e126:	4618      	mov	r0, r3
 800e128:	f001 fae8 	bl	800f6fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e12c:	f002 f8b2 	bl	8010294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e132:	4618      	mov	r0, r3
 800e134:	3738      	adds	r7, #56	; 0x38
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	e000ed04 	.word	0xe000ed04

0800e140 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b08e      	sub	sp, #56	; 0x38
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10a      	bne.n	800e16c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	623b      	str	r3, [r7, #32]
}
 800e168:	bf00      	nop
 800e16a:	e7fe      	b.n	800e16a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d103      	bne.n	800e17a <xQueueReceiveFromISR+0x3a>
 800e172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e176:	2b00      	cmp	r3, #0
 800e178:	d101      	bne.n	800e17e <xQueueReceiveFromISR+0x3e>
 800e17a:	2301      	movs	r3, #1
 800e17c:	e000      	b.n	800e180 <xQueueReceiveFromISR+0x40>
 800e17e:	2300      	movs	r3, #0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10a      	bne.n	800e19a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	61fb      	str	r3, [r7, #28]
}
 800e196:	bf00      	nop
 800e198:	e7fe      	b.n	800e198 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e19a:	f002 f92d 	bl	80103f8 <vPortValidateInterruptPriority>
	__asm volatile
 800e19e:	f3ef 8211 	mrs	r2, BASEPRI
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	61ba      	str	r2, [r7, #24]
 800e1b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e1b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d02f      	beq.n	800e226 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1d0:	68b9      	ldr	r1, [r7, #8]
 800e1d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1d4:	f000 f8b6 	bl	800e344 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	1e5a      	subs	r2, r3, #1
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e1e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e8:	d112      	bne.n	800e210 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d016      	beq.n	800e220 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	3310      	adds	r3, #16
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f000 ff5c 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00e      	beq.n	800e220 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00b      	beq.n	800e220 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	601a      	str	r2, [r3, #0]
 800e20e:	e007      	b.n	800e220 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e214:	3301      	adds	r3, #1
 800e216:	b2db      	uxtb	r3, r3
 800e218:	b25a      	sxtb	r2, r3
 800e21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e220:	2301      	movs	r3, #1
 800e222:	637b      	str	r3, [r7, #52]	; 0x34
 800e224:	e001      	b.n	800e22a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e226:	2300      	movs	r3, #0
 800e228:	637b      	str	r3, [r7, #52]	; 0x34
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	f383 8811 	msr	BASEPRI, r3
}
 800e234:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3738      	adds	r7, #56	; 0x38
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d006      	beq.n	800e25e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e25a:	60fb      	str	r3, [r7, #12]
 800e25c:	e001      	b.n	800e262 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e25e:	2300      	movs	r3, #0
 800e260:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e262:	68fb      	ldr	r3, [r7, #12]
	}
 800e264:	4618      	mov	r0, r3
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b086      	sub	sp, #24
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e27c:	2300      	movs	r3, #0
 800e27e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e284:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10d      	bne.n	800e2aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d14d      	bne.n	800e332 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	689b      	ldr	r3, [r3, #8]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f001 f9c0 	bl	800f620 <xTaskPriorityDisinherit>
 800e2a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	609a      	str	r2, [r3, #8]
 800e2a8:	e043      	b.n	800e332 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d119      	bne.n	800e2e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6858      	ldr	r0, [r3, #4]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	68b9      	ldr	r1, [r7, #8]
 800e2bc:	f003 f995 	bl	80115ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	685a      	ldr	r2, [r3, #4]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c8:	441a      	add	r2, r3
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d32b      	bcc.n	800e332 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	605a      	str	r2, [r3, #4]
 800e2e2:	e026      	b.n	800e332 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	68d8      	ldr	r0, [r3, #12]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	f003 f97b 	bl	80115ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68da      	ldr	r2, [r3, #12]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fc:	425b      	negs	r3, r3
 800e2fe:	441a      	add	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d207      	bcs.n	800e320 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	689a      	ldr	r2, [r3, #8]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e318:	425b      	negs	r3, r3
 800e31a:	441a      	add	r2, r3
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b02      	cmp	r3, #2
 800e324:	d105      	bne.n	800e332 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	3b01      	subs	r3, #1
 800e330:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	1c5a      	adds	r2, r3, #1
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e33a:	697b      	ldr	r3, [r7, #20]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e352:	2b00      	cmp	r3, #0
 800e354:	d018      	beq.n	800e388 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68da      	ldr	r2, [r3, #12]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35e:	441a      	add	r2, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	68da      	ldr	r2, [r3, #12]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d303      	bcc.n	800e378 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68d9      	ldr	r1, [r3, #12]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e380:	461a      	mov	r2, r3
 800e382:	6838      	ldr	r0, [r7, #0]
 800e384:	f003 f931 	bl	80115ea <memcpy>
	}
}
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e398:	f001 ff4c 	bl	8010234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3a4:	e011      	b.n	800e3ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d012      	beq.n	800e3d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3324      	adds	r3, #36	; 0x24
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 fe7e 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3be:	f000 ffb7 	bl	800f330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	dce9      	bgt.n	800e3a6 <prvUnlockQueue+0x16>
 800e3d2:	e000      	b.n	800e3d6 <prvUnlockQueue+0x46>
					break;
 800e3d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	22ff      	movs	r2, #255	; 0xff
 800e3da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e3de:	f001 ff59 	bl	8010294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3e2:	f001 ff27 	bl	8010234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3ee:	e011      	b.n	800e414 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d012      	beq.n	800e41e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	3310      	adds	r3, #16
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f000 fe59 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d001      	beq.n	800e40c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e408:	f000 ff92 	bl	800f330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e40c:	7bbb      	ldrb	r3, [r7, #14]
 800e40e:	3b01      	subs	r3, #1
 800e410:	b2db      	uxtb	r3, r3
 800e412:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dce9      	bgt.n	800e3f0 <prvUnlockQueue+0x60>
 800e41c:	e000      	b.n	800e420 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e41e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	22ff      	movs	r2, #255	; 0xff
 800e424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e428:	f001 ff34 	bl	8010294 <vPortExitCritical>
}
 800e42c:	bf00      	nop
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e43c:	f001 fefa 	bl	8010234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e444:	2b00      	cmp	r3, #0
 800e446:	d102      	bne.n	800e44e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e448:	2301      	movs	r3, #1
 800e44a:	60fb      	str	r3, [r7, #12]
 800e44c:	e001      	b.n	800e452 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e44e:	2300      	movs	r3, #0
 800e450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e452:	f001 ff1f 	bl	8010294 <vPortExitCritical>

	return xReturn;
 800e456:	68fb      	ldr	r3, [r7, #12]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e468:	f001 fee4 	bl	8010234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e474:	429a      	cmp	r2, r3
 800e476:	d102      	bne.n	800e47e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e478:	2301      	movs	r3, #1
 800e47a:	60fb      	str	r3, [r7, #12]
 800e47c:	e001      	b.n	800e482 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e47e:	2300      	movs	r3, #0
 800e480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e482:	f001 ff07 	bl	8010294 <vPortExitCritical>

	return xReturn;
 800e486:	68fb      	ldr	r3, [r7, #12]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e49a:	2300      	movs	r3, #0
 800e49c:	60fb      	str	r3, [r7, #12]
 800e49e:	e014      	b.n	800e4ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e4a0:	4a0f      	ldr	r2, [pc, #60]	; (800e4e0 <vQueueAddToRegistry+0x50>)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10b      	bne.n	800e4c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e4ac:	490c      	ldr	r1, [pc, #48]	; (800e4e0 <vQueueAddToRegistry+0x50>)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	683a      	ldr	r2, [r7, #0]
 800e4b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e4b6:	4a0a      	ldr	r2, [pc, #40]	; (800e4e0 <vQueueAddToRegistry+0x50>)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	4413      	add	r3, r2
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e4c2:	e006      	b.n	800e4d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	60fb      	str	r3, [r7, #12]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2b07      	cmp	r3, #7
 800e4ce:	d9e7      	bls.n	800e4a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e4d0:	bf00      	nop
 800e4d2:	bf00      	nop
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	20000d18 	.word	0x20000d18

0800e4e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e4f4:	f001 fe9e 	bl	8010234 <vPortEnterCritical>
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4fe:	b25b      	sxtb	r3, r3
 800e500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e504:	d103      	bne.n	800e50e <vQueueWaitForMessageRestricted+0x2a>
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e514:	b25b      	sxtb	r3, r3
 800e516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51a:	d103      	bne.n	800e524 <vQueueWaitForMessageRestricted+0x40>
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e524:	f001 feb6 	bl	8010294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d106      	bne.n	800e53e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	3324      	adds	r3, #36	; 0x24
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	68b9      	ldr	r1, [r7, #8]
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 fd8f 	bl	800f05c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e53e:	6978      	ldr	r0, [r7, #20]
 800e540:	f7ff ff26 	bl	800e390 <prvUnlockQueue>
	}
 800e544:	bf00      	nop
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08e      	sub	sp, #56	; 0x38
 800e550:	af04      	add	r7, sp, #16
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
 800e558:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10a      	bne.n	800e576 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	623b      	str	r3, [r7, #32]
}
 800e572:	bf00      	nop
 800e574:	e7fe      	b.n	800e574 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10a      	bne.n	800e592 <xTaskCreateStatic+0x46>
	__asm volatile
 800e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	61fb      	str	r3, [r7, #28]
}
 800e58e:	bf00      	nop
 800e590:	e7fe      	b.n	800e590 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e592:	235c      	movs	r3, #92	; 0x5c
 800e594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	2b5c      	cmp	r3, #92	; 0x5c
 800e59a:	d00a      	beq.n	800e5b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	61bb      	str	r3, [r7, #24]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e5b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d01e      	beq.n	800e5f8 <xTaskCreateStatic+0xac>
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d01b      	beq.n	800e5f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9303      	str	r3, [sp, #12]
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	9302      	str	r3, [sp, #8]
 800e5da:	f107 0314 	add.w	r3, r7, #20
 800e5de:	9301      	str	r3, [sp, #4]
 800e5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e2:	9300      	str	r3, [sp, #0]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	68b9      	ldr	r1, [r7, #8]
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 f850 	bl	800e690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5f2:	f000 f8dd 	bl	800e7b0 <prvAddNewTaskToReadyList>
 800e5f6:	e001      	b.n	800e5fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e5fc:	697b      	ldr	r3, [r7, #20]
	}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3728      	adds	r7, #40	; 0x28
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e606:	b580      	push	{r7, lr}
 800e608:	b08c      	sub	sp, #48	; 0x30
 800e60a:	af04      	add	r7, sp, #16
 800e60c:	60f8      	str	r0, [r7, #12]
 800e60e:	60b9      	str	r1, [r7, #8]
 800e610:	603b      	str	r3, [r7, #0]
 800e612:	4613      	mov	r3, r2
 800e614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e616:	88fb      	ldrh	r3, [r7, #6]
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4618      	mov	r0, r3
 800e61c:	f001 ff2c 	bl	8010478 <pvPortMalloc>
 800e620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00e      	beq.n	800e646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e628:	205c      	movs	r0, #92	; 0x5c
 800e62a:	f001 ff25 	bl	8010478 <pvPortMalloc>
 800e62e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d003      	beq.n	800e63e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	631a      	str	r2, [r3, #48]	; 0x30
 800e63c:	e005      	b.n	800e64a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e63e:	6978      	ldr	r0, [r7, #20]
 800e640:	f001 ffe6 	bl	8010610 <vPortFree>
 800e644:	e001      	b.n	800e64a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d017      	beq.n	800e680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	2200      	movs	r2, #0
 800e654:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e658:	88fa      	ldrh	r2, [r7, #6]
 800e65a:	2300      	movs	r3, #0
 800e65c:	9303      	str	r3, [sp, #12]
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	9302      	str	r3, [sp, #8]
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	68b9      	ldr	r1, [r7, #8]
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f000 f80e 	bl	800e690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e674:	69f8      	ldr	r0, [r7, #28]
 800e676:	f000 f89b 	bl	800e7b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e67a:	2301      	movs	r3, #1
 800e67c:	61bb      	str	r3, [r7, #24]
 800e67e:	e002      	b.n	800e686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e680:	f04f 33ff 	mov.w	r3, #4294967295
 800e684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e686:	69bb      	ldr	r3, [r7, #24]
	}
 800e688:	4618      	mov	r0, r3
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b088      	sub	sp, #32
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	21a5      	movs	r1, #165	; 0xa5
 800e6aa:	f002 ff0e 	bl	80114ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	f023 0307 	bic.w	r3, r3, #7
 800e6c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	f003 0307 	and.w	r3, r3, #7
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00a      	beq.n	800e6e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	617b      	str	r3, [r7, #20]
}
 800e6e4:	bf00      	nop
 800e6e6:	e7fe      	b.n	800e6e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d01f      	beq.n	800e72e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	61fb      	str	r3, [r7, #28]
 800e6f2:	e012      	b.n	800e71a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	7819      	ldrb	r1, [r3, #0]
 800e6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	4413      	add	r3, r2
 800e702:	3334      	adds	r3, #52	; 0x34
 800e704:	460a      	mov	r2, r1
 800e706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	4413      	add	r3, r2
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d006      	beq.n	800e722 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	3301      	adds	r3, #1
 800e718:	61fb      	str	r3, [r7, #28]
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	2b0f      	cmp	r3, #15
 800e71e:	d9e9      	bls.n	800e6f4 <prvInitialiseNewTask+0x64>
 800e720:	e000      	b.n	800e724 <prvInitialiseNewTask+0x94>
			{
				break;
 800e722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e726:	2200      	movs	r2, #0
 800e728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e72c:	e003      	b.n	800e736 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e730:	2200      	movs	r2, #0
 800e732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	2b37      	cmp	r3, #55	; 0x37
 800e73a:	d901      	bls.n	800e740 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e73c:	2337      	movs	r3, #55	; 0x37
 800e73e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e74a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74e:	2200      	movs	r2, #0
 800e750:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e754:	3304      	adds	r3, #4
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe fee4 	bl	800d524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75e:	3318      	adds	r3, #24
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe fedf 	bl	800d524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e76a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e77a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77e:	2200      	movs	r2, #0
 800e780:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	68f9      	ldr	r1, [r7, #12]
 800e78e:	69b8      	ldr	r0, [r7, #24]
 800e790:	f001 fc24 	bl	800ffdc <pxPortInitialiseStack>
 800e794:	4602      	mov	r2, r0
 800e796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7a6:	bf00      	nop
 800e7a8:	3720      	adds	r7, #32
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
	...

0800e7b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e7b8:	f001 fd3c 	bl	8010234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e7bc:	4b2d      	ldr	r3, [pc, #180]	; (800e874 <prvAddNewTaskToReadyList+0xc4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	4a2c      	ldr	r2, [pc, #176]	; (800e874 <prvAddNewTaskToReadyList+0xc4>)
 800e7c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e7c6:	4b2c      	ldr	r3, [pc, #176]	; (800e878 <prvAddNewTaskToReadyList+0xc8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d109      	bne.n	800e7e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e7ce:	4a2a      	ldr	r2, [pc, #168]	; (800e878 <prvAddNewTaskToReadyList+0xc8>)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e7d4:	4b27      	ldr	r3, [pc, #156]	; (800e874 <prvAddNewTaskToReadyList+0xc4>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d110      	bne.n	800e7fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e7dc:	f000 fdcc 	bl	800f378 <prvInitialiseTaskLists>
 800e7e0:	e00d      	b.n	800e7fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e7e2:	4b26      	ldr	r3, [pc, #152]	; (800e87c <prvAddNewTaskToReadyList+0xcc>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d109      	bne.n	800e7fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e7ea:	4b23      	ldr	r3, [pc, #140]	; (800e878 <prvAddNewTaskToReadyList+0xc8>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d802      	bhi.n	800e7fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e7f8:	4a1f      	ldr	r2, [pc, #124]	; (800e878 <prvAddNewTaskToReadyList+0xc8>)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e7fe:	4b20      	ldr	r3, [pc, #128]	; (800e880 <prvAddNewTaskToReadyList+0xd0>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3301      	adds	r3, #1
 800e804:	4a1e      	ldr	r2, [pc, #120]	; (800e880 <prvAddNewTaskToReadyList+0xd0>)
 800e806:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e808:	4b1d      	ldr	r3, [pc, #116]	; (800e880 <prvAddNewTaskToReadyList+0xd0>)
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e814:	4b1b      	ldr	r3, [pc, #108]	; (800e884 <prvAddNewTaskToReadyList+0xd4>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d903      	bls.n	800e824 <prvAddNewTaskToReadyList+0x74>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e820:	4a18      	ldr	r2, [pc, #96]	; (800e884 <prvAddNewTaskToReadyList+0xd4>)
 800e822:	6013      	str	r3, [r2, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e828:	4613      	mov	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	4a15      	ldr	r2, [pc, #84]	; (800e888 <prvAddNewTaskToReadyList+0xd8>)
 800e832:	441a      	add	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	3304      	adds	r3, #4
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f7fe fe7f 	bl	800d53e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e840:	f001 fd28 	bl	8010294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e844:	4b0d      	ldr	r3, [pc, #52]	; (800e87c <prvAddNewTaskToReadyList+0xcc>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d00e      	beq.n	800e86a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e84c:	4b0a      	ldr	r3, [pc, #40]	; (800e878 <prvAddNewTaskToReadyList+0xc8>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e856:	429a      	cmp	r2, r3
 800e858:	d207      	bcs.n	800e86a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e85a:	4b0c      	ldr	r3, [pc, #48]	; (800e88c <prvAddNewTaskToReadyList+0xdc>)
 800e85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e86a:	bf00      	nop
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	2000122c 	.word	0x2000122c
 800e878:	20000d58 	.word	0x20000d58
 800e87c:	20001238 	.word	0x20001238
 800e880:	20001248 	.word	0x20001248
 800e884:	20001234 	.word	0x20001234
 800e888:	20000d5c 	.word	0x20000d5c
 800e88c:	e000ed04 	.word	0xe000ed04

0800e890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d017      	beq.n	800e8d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e8a2:	4b13      	ldr	r3, [pc, #76]	; (800e8f0 <vTaskDelay+0x60>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00a      	beq.n	800e8c0 <vTaskDelay+0x30>
	__asm volatile
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	60bb      	str	r3, [r7, #8]
}
 800e8bc:	bf00      	nop
 800e8be:	e7fe      	b.n	800e8be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e8c0:	f000 f986 	bl	800ebd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 ffc6 	bl	800f858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e8cc:	f000 f98e 	bl	800ebec <xTaskResumeAll>
 800e8d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d107      	bne.n	800e8e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e8d8:	4b06      	ldr	r3, [pc, #24]	; (800e8f4 <vTaskDelay+0x64>)
 800e8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8de:	601a      	str	r2, [r3, #0]
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8e8:	bf00      	nop
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20001254 	.word	0x20001254
 800e8f4:	e000ed04 	.word	0xe000ed04

0800e8f8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e900:	f001 fc98 	bl	8010234 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <vTaskSuspend+0x18>
 800e90a:	4b30      	ldr	r3, [pc, #192]	; (800e9cc <vTaskSuspend+0xd4>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	e000      	b.n	800e912 <vTaskSuspend+0x1a>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3304      	adds	r3, #4
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fe fe6d 	bl	800d5f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e922:	2b00      	cmp	r3, #0
 800e924:	d004      	beq.n	800e930 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3318      	adds	r3, #24
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fe fe64 	bl	800d5f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3304      	adds	r3, #4
 800e934:	4619      	mov	r1, r3
 800e936:	4826      	ldr	r0, [pc, #152]	; (800e9d0 <vTaskSuspend+0xd8>)
 800e938:	f7fe fe01 	bl	800d53e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b01      	cmp	r3, #1
 800e946:	d103      	bne.n	800e950 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e950:	f001 fca0 	bl	8010294 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e954:	4b1f      	ldr	r3, [pc, #124]	; (800e9d4 <vTaskSuspend+0xdc>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d005      	beq.n	800e968 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e95c:	f001 fc6a 	bl	8010234 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e960:	f000 fda8 	bl	800f4b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e964:	f001 fc96 	bl	8010294 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e968:	4b18      	ldr	r3, [pc, #96]	; (800e9cc <vTaskSuspend+0xd4>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d127      	bne.n	800e9c2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800e972:	4b18      	ldr	r3, [pc, #96]	; (800e9d4 <vTaskSuspend+0xdc>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d017      	beq.n	800e9aa <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e97a:	4b17      	ldr	r3, [pc, #92]	; (800e9d8 <vTaskSuspend+0xe0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00a      	beq.n	800e998 <vTaskSuspend+0xa0>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	60bb      	str	r3, [r7, #8]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800e998:	4b10      	ldr	r3, [pc, #64]	; (800e9dc <vTaskSuspend+0xe4>)
 800e99a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e99e:	601a      	str	r2, [r3, #0]
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9a8:	e00b      	b.n	800e9c2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e9aa:	4b09      	ldr	r3, [pc, #36]	; (800e9d0 <vTaskSuspend+0xd8>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <vTaskSuspend+0xe8>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d103      	bne.n	800e9be <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800e9b6:	4b05      	ldr	r3, [pc, #20]	; (800e9cc <vTaskSuspend+0xd4>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]
	}
 800e9bc:	e001      	b.n	800e9c2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800e9be:	f000 fa8f 	bl	800eee0 <vTaskSwitchContext>
	}
 800e9c2:	bf00      	nop
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20000d58 	.word	0x20000d58
 800e9d0:	20001218 	.word	0x20001218
 800e9d4:	20001238 	.word	0x20001238
 800e9d8:	20001254 	.word	0x20001254
 800e9dc:	e000ed04 	.word	0xe000ed04
 800e9e0:	2000122c 	.word	0x2000122c

0800e9e4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b087      	sub	sp, #28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10a      	bne.n	800ea10 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800e9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9fe:	f383 8811 	msr	BASEPRI, r3
 800ea02:	f3bf 8f6f 	isb	sy
 800ea06:	f3bf 8f4f 	dsb	sy
 800ea0a:	60fb      	str	r3, [r7, #12]
}
 800ea0c:	bf00      	nop
 800ea0e:	e7fe      	b.n	800ea0e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	695b      	ldr	r3, [r3, #20]
 800ea14:	4a0a      	ldr	r2, [pc, #40]	; (800ea40 <prvTaskIsTaskSuspended+0x5c>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d10a      	bne.n	800ea30 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1e:	4a09      	ldr	r2, [pc, #36]	; (800ea44 <prvTaskIsTaskSuspended+0x60>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d005      	beq.n	800ea30 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d101      	bne.n	800ea30 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea30:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ea32:	4618      	mov	r0, r3
 800ea34:	371c      	adds	r7, #28
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop
 800ea40:	20001218 	.word	0x20001218
 800ea44:	200011ec 	.word	0x200011ec

0800ea48 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10a      	bne.n	800ea70 <vTaskResume+0x28>
	__asm volatile
 800ea5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	60bb      	str	r3, [r7, #8]
}
 800ea6c:	bf00      	nop
 800ea6e:	e7fe      	b.n	800ea6e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ea70:	4b20      	ldr	r3, [pc, #128]	; (800eaf4 <vTaskResume+0xac>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d038      	beq.n	800eaec <vTaskResume+0xa4>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d035      	beq.n	800eaec <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ea80:	f001 fbd8 	bl	8010234 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7ff ffad 	bl	800e9e4 <prvTaskIsTaskSuspended>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d02b      	beq.n	800eae8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	3304      	adds	r3, #4
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fe fdaf 	bl	800d5f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9e:	4b16      	ldr	r3, [pc, #88]	; (800eaf8 <vTaskResume+0xb0>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d903      	bls.n	800eaae <vTaskResume+0x66>
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaaa:	4a13      	ldr	r2, [pc, #76]	; (800eaf8 <vTaskResume+0xb0>)
 800eaac:	6013      	str	r3, [r2, #0]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab2:	4613      	mov	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4413      	add	r3, r2
 800eab8:	009b      	lsls	r3, r3, #2
 800eaba:	4a10      	ldr	r2, [pc, #64]	; (800eafc <vTaskResume+0xb4>)
 800eabc:	441a      	add	r2, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3304      	adds	r3, #4
 800eac2:	4619      	mov	r1, r3
 800eac4:	4610      	mov	r0, r2
 800eac6:	f7fe fd3a 	bl	800d53e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eace:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <vTaskResume+0xac>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d307      	bcc.n	800eae8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ead8:	4b09      	ldr	r3, [pc, #36]	; (800eb00 <vTaskResume+0xb8>)
 800eada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eade:	601a      	str	r2, [r3, #0]
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800eae8:	f001 fbd4 	bl	8010294 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eaec:	bf00      	nop
 800eaee:	3710      	adds	r7, #16
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20000d58 	.word	0x20000d58
 800eaf8:	20001234 	.word	0x20001234
 800eafc:	20000d5c 	.word	0x20000d5c
 800eb00:	e000ed04 	.word	0xe000ed04

0800eb04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b08a      	sub	sp, #40	; 0x28
 800eb08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb12:	463a      	mov	r2, r7
 800eb14:	1d39      	adds	r1, r7, #4
 800eb16:	f107 0308 	add.w	r3, r7, #8
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fe fac0 	bl	800d0a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb20:	6839      	ldr	r1, [r7, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	9202      	str	r2, [sp, #8]
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	460a      	mov	r2, r1
 800eb32:	4921      	ldr	r1, [pc, #132]	; (800ebb8 <vTaskStartScheduler+0xb4>)
 800eb34:	4821      	ldr	r0, [pc, #132]	; (800ebbc <vTaskStartScheduler+0xb8>)
 800eb36:	f7ff fd09 	bl	800e54c <xTaskCreateStatic>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	4a20      	ldr	r2, [pc, #128]	; (800ebc0 <vTaskStartScheduler+0xbc>)
 800eb3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eb40:	4b1f      	ldr	r3, [pc, #124]	; (800ebc0 <vTaskStartScheduler+0xbc>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	617b      	str	r3, [r7, #20]
 800eb4c:	e001      	b.n	800eb52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d102      	bne.n	800eb5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800eb58:	f000 fed2 	bl	800f900 <xTimerCreateTimerTask>
 800eb5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d116      	bne.n	800eb92 <vTaskStartScheduler+0x8e>
	__asm volatile
 800eb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb68:	f383 8811 	msr	BASEPRI, r3
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	613b      	str	r3, [r7, #16]
}
 800eb76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eb78:	4b12      	ldr	r3, [pc, #72]	; (800ebc4 <vTaskStartScheduler+0xc0>)
 800eb7a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eb80:	4b11      	ldr	r3, [pc, #68]	; (800ebc8 <vTaskStartScheduler+0xc4>)
 800eb82:	2201      	movs	r2, #1
 800eb84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eb86:	4b11      	ldr	r3, [pc, #68]	; (800ebcc <vTaskStartScheduler+0xc8>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eb8c:	f001 fab0 	bl	80100f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eb90:	e00e      	b.n	800ebb0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb98:	d10a      	bne.n	800ebb0 <vTaskStartScheduler+0xac>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	60fb      	str	r3, [r7, #12]
}
 800ebac:	bf00      	nop
 800ebae:	e7fe      	b.n	800ebae <vTaskStartScheduler+0xaa>
}
 800ebb0:	bf00      	nop
 800ebb2:	3718      	adds	r7, #24
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	08014f20 	.word	0x08014f20
 800ebbc:	0800f349 	.word	0x0800f349
 800ebc0:	20001250 	.word	0x20001250
 800ebc4:	2000124c 	.word	0x2000124c
 800ebc8:	20001238 	.word	0x20001238
 800ebcc:	20001230 	.word	0x20001230

0800ebd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ebd4:	4b04      	ldr	r3, [pc, #16]	; (800ebe8 <vTaskSuspendAll+0x18>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	4a03      	ldr	r2, [pc, #12]	; (800ebe8 <vTaskSuspendAll+0x18>)
 800ebdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ebde:	bf00      	nop
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr
 800ebe8:	20001254 	.word	0x20001254

0800ebec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ebfa:	4b42      	ldr	r3, [pc, #264]	; (800ed04 <xTaskResumeAll+0x118>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10a      	bne.n	800ec18 <xTaskResumeAll+0x2c>
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec06:	f383 8811 	msr	BASEPRI, r3
 800ec0a:	f3bf 8f6f 	isb	sy
 800ec0e:	f3bf 8f4f 	dsb	sy
 800ec12:	603b      	str	r3, [r7, #0]
}
 800ec14:	bf00      	nop
 800ec16:	e7fe      	b.n	800ec16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec18:	f001 fb0c 	bl	8010234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ec1c:	4b39      	ldr	r3, [pc, #228]	; (800ed04 <xTaskResumeAll+0x118>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3b01      	subs	r3, #1
 800ec22:	4a38      	ldr	r2, [pc, #224]	; (800ed04 <xTaskResumeAll+0x118>)
 800ec24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec26:	4b37      	ldr	r3, [pc, #220]	; (800ed04 <xTaskResumeAll+0x118>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d162      	bne.n	800ecf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec2e:	4b36      	ldr	r3, [pc, #216]	; (800ed08 <xTaskResumeAll+0x11c>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d05e      	beq.n	800ecf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec36:	e02f      	b.n	800ec98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec38:	4b34      	ldr	r3, [pc, #208]	; (800ed0c <xTaskResumeAll+0x120>)
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	3318      	adds	r3, #24
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fe fcd7 	bl	800d5f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fe fcd2 	bl	800d5f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec58:	4b2d      	ldr	r3, [pc, #180]	; (800ed10 <xTaskResumeAll+0x124>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d903      	bls.n	800ec68 <xTaskResumeAll+0x7c>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec64:	4a2a      	ldr	r2, [pc, #168]	; (800ed10 <xTaskResumeAll+0x124>)
 800ec66:	6013      	str	r3, [r2, #0]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6c:	4613      	mov	r3, r2
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4413      	add	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4a27      	ldr	r2, [pc, #156]	; (800ed14 <xTaskResumeAll+0x128>)
 800ec76:	441a      	add	r2, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	3304      	adds	r3, #4
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	f7fe fc5d 	bl	800d53e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec88:	4b23      	ldr	r3, [pc, #140]	; (800ed18 <xTaskResumeAll+0x12c>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d302      	bcc.n	800ec98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ec92:	4b22      	ldr	r3, [pc, #136]	; (800ed1c <xTaskResumeAll+0x130>)
 800ec94:	2201      	movs	r2, #1
 800ec96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec98:	4b1c      	ldr	r3, [pc, #112]	; (800ed0c <xTaskResumeAll+0x120>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1cb      	bne.n	800ec38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eca6:	f000 fc05 	bl	800f4b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ecaa:	4b1d      	ldr	r3, [pc, #116]	; (800ed20 <xTaskResumeAll+0x134>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d010      	beq.n	800ecd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ecb6:	f000 f859 	bl	800ed6c <xTaskIncrementTick>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d002      	beq.n	800ecc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ecc0:	4b16      	ldr	r3, [pc, #88]	; (800ed1c <xTaskResumeAll+0x130>)
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1f1      	bne.n	800ecb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ecd2:	4b13      	ldr	r3, [pc, #76]	; (800ed20 <xTaskResumeAll+0x134>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ecd8:	4b10      	ldr	r3, [pc, #64]	; (800ed1c <xTaskResumeAll+0x130>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d009      	beq.n	800ecf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ece0:	2301      	movs	r3, #1
 800ece2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ece4:	4b0f      	ldr	r3, [pc, #60]	; (800ed24 <xTaskResumeAll+0x138>)
 800ece6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecf4:	f001 face 	bl	8010294 <vPortExitCritical>

	return xAlreadyYielded;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	20001254 	.word	0x20001254
 800ed08:	2000122c 	.word	0x2000122c
 800ed0c:	200011ec 	.word	0x200011ec
 800ed10:	20001234 	.word	0x20001234
 800ed14:	20000d5c 	.word	0x20000d5c
 800ed18:	20000d58 	.word	0x20000d58
 800ed1c:	20001240 	.word	0x20001240
 800ed20:	2000123c 	.word	0x2000123c
 800ed24:	e000ed04 	.word	0xe000ed04

0800ed28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ed2e:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <xTaskGetTickCount+0x1c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ed34:	687b      	ldr	r3, [r7, #4]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	20001230 	.word	0x20001230

0800ed48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed4e:	f001 fb53 	bl	80103f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ed52:	2300      	movs	r3, #0
 800ed54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ed56:	4b04      	ldr	r3, [pc, #16]	; (800ed68 <xTaskGetTickCountFromISR+0x20>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed5c:	683b      	ldr	r3, [r7, #0]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20001230 	.word	0x20001230

0800ed6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ed72:	2300      	movs	r3, #0
 800ed74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed76:	4b4f      	ldr	r3, [pc, #316]	; (800eeb4 <xTaskIncrementTick+0x148>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f040 808f 	bne.w	800ee9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ed80:	4b4d      	ldr	r3, [pc, #308]	; (800eeb8 <xTaskIncrementTick+0x14c>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	3301      	adds	r3, #1
 800ed86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ed88:	4a4b      	ldr	r2, [pc, #300]	; (800eeb8 <xTaskIncrementTick+0x14c>)
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d120      	bne.n	800edd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ed94:	4b49      	ldr	r3, [pc, #292]	; (800eebc <xTaskIncrementTick+0x150>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00a      	beq.n	800edb4 <xTaskIncrementTick+0x48>
	__asm volatile
 800ed9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	603b      	str	r3, [r7, #0]
}
 800edb0:	bf00      	nop
 800edb2:	e7fe      	b.n	800edb2 <xTaskIncrementTick+0x46>
 800edb4:	4b41      	ldr	r3, [pc, #260]	; (800eebc <xTaskIncrementTick+0x150>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	60fb      	str	r3, [r7, #12]
 800edba:	4b41      	ldr	r3, [pc, #260]	; (800eec0 <xTaskIncrementTick+0x154>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a3f      	ldr	r2, [pc, #252]	; (800eebc <xTaskIncrementTick+0x150>)
 800edc0:	6013      	str	r3, [r2, #0]
 800edc2:	4a3f      	ldr	r2, [pc, #252]	; (800eec0 <xTaskIncrementTick+0x154>)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6013      	str	r3, [r2, #0]
 800edc8:	4b3e      	ldr	r3, [pc, #248]	; (800eec4 <xTaskIncrementTick+0x158>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	3301      	adds	r3, #1
 800edce:	4a3d      	ldr	r2, [pc, #244]	; (800eec4 <xTaskIncrementTick+0x158>)
 800edd0:	6013      	str	r3, [r2, #0]
 800edd2:	f000 fb6f 	bl	800f4b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800edd6:	4b3c      	ldr	r3, [pc, #240]	; (800eec8 <xTaskIncrementTick+0x15c>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d349      	bcc.n	800ee74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ede0:	4b36      	ldr	r3, [pc, #216]	; (800eebc <xTaskIncrementTick+0x150>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d104      	bne.n	800edf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edea:	4b37      	ldr	r3, [pc, #220]	; (800eec8 <xTaskIncrementTick+0x15c>)
 800edec:	f04f 32ff 	mov.w	r2, #4294967295
 800edf0:	601a      	str	r2, [r3, #0]
					break;
 800edf2:	e03f      	b.n	800ee74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edf4:	4b31      	ldr	r3, [pc, #196]	; (800eebc <xTaskIncrementTick+0x150>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee04:	693a      	ldr	r2, [r7, #16]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d203      	bcs.n	800ee14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee0c:	4a2e      	ldr	r2, [pc, #184]	; (800eec8 <xTaskIncrementTick+0x15c>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee12:	e02f      	b.n	800ee74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	3304      	adds	r3, #4
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fe fbed 	bl	800d5f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d004      	beq.n	800ee30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	3318      	adds	r3, #24
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fe fbe4 	bl	800d5f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee34:	4b25      	ldr	r3, [pc, #148]	; (800eecc <xTaskIncrementTick+0x160>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d903      	bls.n	800ee44 <xTaskIncrementTick+0xd8>
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee40:	4a22      	ldr	r2, [pc, #136]	; (800eecc <xTaskIncrementTick+0x160>)
 800ee42:	6013      	str	r3, [r2, #0]
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee48:	4613      	mov	r3, r2
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	4413      	add	r3, r2
 800ee4e:	009b      	lsls	r3, r3, #2
 800ee50:	4a1f      	ldr	r2, [pc, #124]	; (800eed0 <xTaskIncrementTick+0x164>)
 800ee52:	441a      	add	r2, r3
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	3304      	adds	r3, #4
 800ee58:	4619      	mov	r1, r3
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	f7fe fb6f 	bl	800d53e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee64:	4b1b      	ldr	r3, [pc, #108]	; (800eed4 <xTaskIncrementTick+0x168>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d3b8      	bcc.n	800ede0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee72:	e7b5      	b.n	800ede0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ee74:	4b17      	ldr	r3, [pc, #92]	; (800eed4 <xTaskIncrementTick+0x168>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7a:	4915      	ldr	r1, [pc, #84]	; (800eed0 <xTaskIncrementTick+0x164>)
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4413      	add	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	440b      	add	r3, r1
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d901      	bls.n	800ee90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ee90:	4b11      	ldr	r3, [pc, #68]	; (800eed8 <xTaskIncrementTick+0x16c>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d007      	beq.n	800eea8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	617b      	str	r3, [r7, #20]
 800ee9c:	e004      	b.n	800eea8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ee9e:	4b0f      	ldr	r3, [pc, #60]	; (800eedc <xTaskIncrementTick+0x170>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3301      	adds	r3, #1
 800eea4:	4a0d      	ldr	r2, [pc, #52]	; (800eedc <xTaskIncrementTick+0x170>)
 800eea6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eea8:	697b      	ldr	r3, [r7, #20]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20001254 	.word	0x20001254
 800eeb8:	20001230 	.word	0x20001230
 800eebc:	200011e4 	.word	0x200011e4
 800eec0:	200011e8 	.word	0x200011e8
 800eec4:	20001244 	.word	0x20001244
 800eec8:	2000124c 	.word	0x2000124c
 800eecc:	20001234 	.word	0x20001234
 800eed0:	20000d5c 	.word	0x20000d5c
 800eed4:	20000d58 	.word	0x20000d58
 800eed8:	20001240 	.word	0x20001240
 800eedc:	2000123c 	.word	0x2000123c

0800eee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eee6:	4b28      	ldr	r3, [pc, #160]	; (800ef88 <vTaskSwitchContext+0xa8>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d003      	beq.n	800eef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eeee:	4b27      	ldr	r3, [pc, #156]	; (800ef8c <vTaskSwitchContext+0xac>)
 800eef0:	2201      	movs	r2, #1
 800eef2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eef4:	e041      	b.n	800ef7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800eef6:	4b25      	ldr	r3, [pc, #148]	; (800ef8c <vTaskSwitchContext+0xac>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eefc:	4b24      	ldr	r3, [pc, #144]	; (800ef90 <vTaskSwitchContext+0xb0>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	60fb      	str	r3, [r7, #12]
 800ef02:	e010      	b.n	800ef26 <vTaskSwitchContext+0x46>
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10a      	bne.n	800ef20 <vTaskSwitchContext+0x40>
	__asm volatile
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	f383 8811 	msr	BASEPRI, r3
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	607b      	str	r3, [r7, #4]
}
 800ef1c:	bf00      	nop
 800ef1e:	e7fe      	b.n	800ef1e <vTaskSwitchContext+0x3e>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	60fb      	str	r3, [r7, #12]
 800ef26:	491b      	ldr	r1, [pc, #108]	; (800ef94 <vTaskSwitchContext+0xb4>)
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	4413      	add	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	440b      	add	r3, r1
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d0e4      	beq.n	800ef04 <vTaskSwitchContext+0x24>
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	4413      	add	r3, r2
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	4a13      	ldr	r2, [pc, #76]	; (800ef94 <vTaskSwitchContext+0xb4>)
 800ef46:	4413      	add	r3, r2
 800ef48:	60bb      	str	r3, [r7, #8]
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	685a      	ldr	r2, [r3, #4]
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	605a      	str	r2, [r3, #4]
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	685a      	ldr	r2, [r3, #4]
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	3308      	adds	r3, #8
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d104      	bne.n	800ef6a <vTaskSwitchContext+0x8a>
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	685a      	ldr	r2, [r3, #4]
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	605a      	str	r2, [r3, #4]
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	4a09      	ldr	r2, [pc, #36]	; (800ef98 <vTaskSwitchContext+0xb8>)
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	4a06      	ldr	r2, [pc, #24]	; (800ef90 <vTaskSwitchContext+0xb0>)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	6013      	str	r3, [r2, #0]
}
 800ef7a:	bf00      	nop
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop
 800ef88:	20001254 	.word	0x20001254
 800ef8c:	20001240 	.word	0x20001240
 800ef90:	20001234 	.word	0x20001234
 800ef94:	20000d5c 	.word	0x20000d5c
 800ef98:	20000d58 	.word	0x20000d58

0800ef9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d10a      	bne.n	800efc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800efac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb0:	f383 8811 	msr	BASEPRI, r3
 800efb4:	f3bf 8f6f 	isb	sy
 800efb8:	f3bf 8f4f 	dsb	sy
 800efbc:	60fb      	str	r3, [r7, #12]
}
 800efbe:	bf00      	nop
 800efc0:	e7fe      	b.n	800efc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efc2:	4b07      	ldr	r3, [pc, #28]	; (800efe0 <vTaskPlaceOnEventList+0x44>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3318      	adds	r3, #24
 800efc8:	4619      	mov	r1, r3
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f7fe fadb 	bl	800d586 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800efd0:	2101      	movs	r1, #1
 800efd2:	6838      	ldr	r0, [r7, #0]
 800efd4:	f000 fc40 	bl	800f858 <prvAddCurrentTaskToDelayedList>
}
 800efd8:	bf00      	nop
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	20000d58 	.word	0x20000d58

0800efe4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b086      	sub	sp, #24
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10a      	bne.n	800f00c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800eff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effa:	f383 8811 	msr	BASEPRI, r3
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	617b      	str	r3, [r7, #20]
}
 800f008:	bf00      	nop
 800f00a:	e7fe      	b.n	800f00a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f00c:	4b11      	ldr	r3, [pc, #68]	; (800f054 <vTaskPlaceOnUnorderedEventList+0x70>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10a      	bne.n	800f02a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	613b      	str	r3, [r7, #16]
}
 800f026:	bf00      	nop
 800f028:	e7fe      	b.n	800f028 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f02a:	4b0b      	ldr	r3, [pc, #44]	; (800f058 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68ba      	ldr	r2, [r7, #8]
 800f030:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f034:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f036:	4b08      	ldr	r3, [pc, #32]	; (800f058 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3318      	adds	r3, #24
 800f03c:	4619      	mov	r1, r3
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f7fe fa7d 	bl	800d53e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f044:	2101      	movs	r1, #1
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 fc06 	bl	800f858 <prvAddCurrentTaskToDelayedList>
}
 800f04c:	bf00      	nop
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	20001254 	.word	0x20001254
 800f058:	20000d58 	.word	0x20000d58

0800f05c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	617b      	str	r3, [r7, #20]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f084:	4b0a      	ldr	r3, [pc, #40]	; (800f0b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3318      	adds	r3, #24
 800f08a:	4619      	mov	r1, r3
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f7fe fa56 	bl	800d53e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d002      	beq.n	800f09e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f098:	f04f 33ff 	mov.w	r3, #4294967295
 800f09c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f09e:	6879      	ldr	r1, [r7, #4]
 800f0a0:	68b8      	ldr	r0, [r7, #8]
 800f0a2:	f000 fbd9 	bl	800f858 <prvAddCurrentTaskToDelayedList>
	}
 800f0a6:	bf00      	nop
 800f0a8:	3718      	adds	r7, #24
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	20000d58 	.word	0x20000d58

0800f0b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10a      	bne.n	800f0e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ce:	f383 8811 	msr	BASEPRI, r3
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	60fb      	str	r3, [r7, #12]
}
 800f0dc:	bf00      	nop
 800f0de:	e7fe      	b.n	800f0de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	3318      	adds	r3, #24
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fe fa87 	bl	800d5f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0ea:	4b1e      	ldr	r3, [pc, #120]	; (800f164 <xTaskRemoveFromEventList+0xb0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d11d      	bne.n	800f12e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	3304      	adds	r3, #4
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fe fa7e 	bl	800d5f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f100:	4b19      	ldr	r3, [pc, #100]	; (800f168 <xTaskRemoveFromEventList+0xb4>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	429a      	cmp	r2, r3
 800f106:	d903      	bls.n	800f110 <xTaskRemoveFromEventList+0x5c>
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10c:	4a16      	ldr	r2, [pc, #88]	; (800f168 <xTaskRemoveFromEventList+0xb4>)
 800f10e:	6013      	str	r3, [r2, #0]
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f114:	4613      	mov	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4413      	add	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4a13      	ldr	r2, [pc, #76]	; (800f16c <xTaskRemoveFromEventList+0xb8>)
 800f11e:	441a      	add	r2, r3
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	3304      	adds	r3, #4
 800f124:	4619      	mov	r1, r3
 800f126:	4610      	mov	r0, r2
 800f128:	f7fe fa09 	bl	800d53e <vListInsertEnd>
 800f12c:	e005      	b.n	800f13a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	3318      	adds	r3, #24
 800f132:	4619      	mov	r1, r3
 800f134:	480e      	ldr	r0, [pc, #56]	; (800f170 <xTaskRemoveFromEventList+0xbc>)
 800f136:	f7fe fa02 	bl	800d53e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f13e:	4b0d      	ldr	r3, [pc, #52]	; (800f174 <xTaskRemoveFromEventList+0xc0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f144:	429a      	cmp	r2, r3
 800f146:	d905      	bls.n	800f154 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f148:	2301      	movs	r3, #1
 800f14a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f14c:	4b0a      	ldr	r3, [pc, #40]	; (800f178 <xTaskRemoveFromEventList+0xc4>)
 800f14e:	2201      	movs	r2, #1
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	e001      	b.n	800f158 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f154:	2300      	movs	r3, #0
 800f156:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f158:	697b      	ldr	r3, [r7, #20]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20001254 	.word	0x20001254
 800f168:	20001234 	.word	0x20001234
 800f16c:	20000d5c 	.word	0x20000d5c
 800f170:	200011ec 	.word	0x200011ec
 800f174:	20000d58 	.word	0x20000d58
 800f178:	20001240 	.word	0x20001240

0800f17c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f186:	4b29      	ldr	r3, [pc, #164]	; (800f22c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10a      	bne.n	800f1a4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	613b      	str	r3, [r7, #16]
}
 800f1a0:	bf00      	nop
 800f1a2:	e7fe      	b.n	800f1a2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d10a      	bne.n	800f1d0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800f1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1be:	f383 8811 	msr	BASEPRI, r3
 800f1c2:	f3bf 8f6f 	isb	sy
 800f1c6:	f3bf 8f4f 	dsb	sy
 800f1ca:	60fb      	str	r3, [r7, #12]
}
 800f1cc:	bf00      	nop
 800f1ce:	e7fe      	b.n	800f1ce <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7fe fa11 	bl	800d5f8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	3304      	adds	r3, #4
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fe fa0c 	bl	800d5f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e4:	4b12      	ldr	r3, [pc, #72]	; (800f230 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d903      	bls.n	800f1f4 <vTaskRemoveFromUnorderedEventList+0x78>
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f0:	4a0f      	ldr	r2, [pc, #60]	; (800f230 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f1f2:	6013      	str	r3, [r2, #0]
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4413      	add	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4a0c      	ldr	r2, [pc, #48]	; (800f234 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f202:	441a      	add	r2, r3
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	3304      	adds	r3, #4
 800f208:	4619      	mov	r1, r3
 800f20a:	4610      	mov	r0, r2
 800f20c:	f7fe f997 	bl	800d53e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f214:	4b08      	ldr	r3, [pc, #32]	; (800f238 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d902      	bls.n	800f224 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f21e:	4b07      	ldr	r3, [pc, #28]	; (800f23c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f220:	2201      	movs	r2, #1
 800f222:	601a      	str	r2, [r3, #0]
	}
}
 800f224:	bf00      	nop
 800f226:	3718      	adds	r7, #24
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	20001254 	.word	0x20001254
 800f230:	20001234 	.word	0x20001234
 800f234:	20000d5c 	.word	0x20000d5c
 800f238:	20000d58 	.word	0x20000d58
 800f23c:	20001240 	.word	0x20001240

0800f240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f248:	4b06      	ldr	r3, [pc, #24]	; (800f264 <vTaskInternalSetTimeOutState+0x24>)
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f250:	4b05      	ldr	r3, [pc, #20]	; (800f268 <vTaskInternalSetTimeOutState+0x28>)
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	605a      	str	r2, [r3, #4]
}
 800f258:	bf00      	nop
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr
 800f264:	20001244 	.word	0x20001244
 800f268:	20001230 	.word	0x20001230

0800f26c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10a      	bne.n	800f292 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	613b      	str	r3, [r7, #16]
}
 800f28e:	bf00      	nop
 800f290:	e7fe      	b.n	800f290 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10a      	bne.n	800f2ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29c:	f383 8811 	msr	BASEPRI, r3
 800f2a0:	f3bf 8f6f 	isb	sy
 800f2a4:	f3bf 8f4f 	dsb	sy
 800f2a8:	60fb      	str	r3, [r7, #12]
}
 800f2aa:	bf00      	nop
 800f2ac:	e7fe      	b.n	800f2ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f2ae:	f000 ffc1 	bl	8010234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f2b2:	4b1d      	ldr	r3, [pc, #116]	; (800f328 <xTaskCheckForTimeOut+0xbc>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	69ba      	ldr	r2, [r7, #24]
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ca:	d102      	bne.n	800f2d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	61fb      	str	r3, [r7, #28]
 800f2d0:	e023      	b.n	800f31a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	4b15      	ldr	r3, [pc, #84]	; (800f32c <xTaskCheckForTimeOut+0xc0>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d007      	beq.n	800f2ee <xTaskCheckForTimeOut+0x82>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	69ba      	ldr	r2, [r7, #24]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d302      	bcc.n	800f2ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	61fb      	str	r3, [r7, #28]
 800f2ec:	e015      	b.n	800f31a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	697a      	ldr	r2, [r7, #20]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d20b      	bcs.n	800f310 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	1ad2      	subs	r2, r2, r3
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f7ff ff9b 	bl	800f240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f30a:	2300      	movs	r3, #0
 800f30c:	61fb      	str	r3, [r7, #28]
 800f30e:	e004      	b.n	800f31a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	2200      	movs	r2, #0
 800f314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f316:	2301      	movs	r3, #1
 800f318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f31a:	f000 ffbb 	bl	8010294 <vPortExitCritical>

	return xReturn;
 800f31e:	69fb      	ldr	r3, [r7, #28]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3720      	adds	r7, #32
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	20001230 	.word	0x20001230
 800f32c:	20001244 	.word	0x20001244

0800f330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f330:	b480      	push	{r7}
 800f332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f334:	4b03      	ldr	r3, [pc, #12]	; (800f344 <vTaskMissedYield+0x14>)
 800f336:	2201      	movs	r2, #1
 800f338:	601a      	str	r2, [r3, #0]
}
 800f33a:	bf00      	nop
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr
 800f344:	20001240 	.word	0x20001240

0800f348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f350:	f000 f852 	bl	800f3f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f354:	4b06      	ldr	r3, [pc, #24]	; (800f370 <prvIdleTask+0x28>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d9f9      	bls.n	800f350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f35c:	4b05      	ldr	r3, [pc, #20]	; (800f374 <prvIdleTask+0x2c>)
 800f35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f362:	601a      	str	r2, [r3, #0]
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f36c:	e7f0      	b.n	800f350 <prvIdleTask+0x8>
 800f36e:	bf00      	nop
 800f370:	20000d5c 	.word	0x20000d5c
 800f374:	e000ed04 	.word	0xe000ed04

0800f378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f37e:	2300      	movs	r3, #0
 800f380:	607b      	str	r3, [r7, #4]
 800f382:	e00c      	b.n	800f39e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f384:	687a      	ldr	r2, [r7, #4]
 800f386:	4613      	mov	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4413      	add	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	4a12      	ldr	r2, [pc, #72]	; (800f3d8 <prvInitialiseTaskLists+0x60>)
 800f390:	4413      	add	r3, r2
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe f8a6 	bl	800d4e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	3301      	adds	r3, #1
 800f39c:	607b      	str	r3, [r7, #4]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2b37      	cmp	r3, #55	; 0x37
 800f3a2:	d9ef      	bls.n	800f384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f3a4:	480d      	ldr	r0, [pc, #52]	; (800f3dc <prvInitialiseTaskLists+0x64>)
 800f3a6:	f7fe f89d 	bl	800d4e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f3aa:	480d      	ldr	r0, [pc, #52]	; (800f3e0 <prvInitialiseTaskLists+0x68>)
 800f3ac:	f7fe f89a 	bl	800d4e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f3b0:	480c      	ldr	r0, [pc, #48]	; (800f3e4 <prvInitialiseTaskLists+0x6c>)
 800f3b2:	f7fe f897 	bl	800d4e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f3b6:	480c      	ldr	r0, [pc, #48]	; (800f3e8 <prvInitialiseTaskLists+0x70>)
 800f3b8:	f7fe f894 	bl	800d4e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f3bc:	480b      	ldr	r0, [pc, #44]	; (800f3ec <prvInitialiseTaskLists+0x74>)
 800f3be:	f7fe f891 	bl	800d4e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f3c2:	4b0b      	ldr	r3, [pc, #44]	; (800f3f0 <prvInitialiseTaskLists+0x78>)
 800f3c4:	4a05      	ldr	r2, [pc, #20]	; (800f3dc <prvInitialiseTaskLists+0x64>)
 800f3c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f3c8:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <prvInitialiseTaskLists+0x7c>)
 800f3ca:	4a05      	ldr	r2, [pc, #20]	; (800f3e0 <prvInitialiseTaskLists+0x68>)
 800f3cc:	601a      	str	r2, [r3, #0]
}
 800f3ce:	bf00      	nop
 800f3d0:	3708      	adds	r7, #8
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20000d5c 	.word	0x20000d5c
 800f3dc:	200011bc 	.word	0x200011bc
 800f3e0:	200011d0 	.word	0x200011d0
 800f3e4:	200011ec 	.word	0x200011ec
 800f3e8:	20001200 	.word	0x20001200
 800f3ec:	20001218 	.word	0x20001218
 800f3f0:	200011e4 	.word	0x200011e4
 800f3f4:	200011e8 	.word	0x200011e8

0800f3f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f3fe:	e019      	b.n	800f434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f400:	f000 ff18 	bl	8010234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f404:	4b10      	ldr	r3, [pc, #64]	; (800f448 <prvCheckTasksWaitingTermination+0x50>)
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3304      	adds	r3, #4
 800f410:	4618      	mov	r0, r3
 800f412:	f7fe f8f1 	bl	800d5f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f416:	4b0d      	ldr	r3, [pc, #52]	; (800f44c <prvCheckTasksWaitingTermination+0x54>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	4a0b      	ldr	r2, [pc, #44]	; (800f44c <prvCheckTasksWaitingTermination+0x54>)
 800f41e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f420:	4b0b      	ldr	r3, [pc, #44]	; (800f450 <prvCheckTasksWaitingTermination+0x58>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	3b01      	subs	r3, #1
 800f426:	4a0a      	ldr	r2, [pc, #40]	; (800f450 <prvCheckTasksWaitingTermination+0x58>)
 800f428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f42a:	f000 ff33 	bl	8010294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f810 	bl	800f454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f434:	4b06      	ldr	r3, [pc, #24]	; (800f450 <prvCheckTasksWaitingTermination+0x58>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d1e1      	bne.n	800f400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f43c:	bf00      	nop
 800f43e:	bf00      	nop
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	20001200 	.word	0x20001200
 800f44c:	2000122c 	.word	0x2000122c
 800f450:	20001214 	.word	0x20001214

0800f454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f462:	2b00      	cmp	r3, #0
 800f464:	d108      	bne.n	800f478 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f46a:	4618      	mov	r0, r3
 800f46c:	f001 f8d0 	bl	8010610 <vPortFree>
				vPortFree( pxTCB );
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f001 f8cd 	bl	8010610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f476:	e018      	b.n	800f4aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d103      	bne.n	800f48a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f001 f8c4 	bl	8010610 <vPortFree>
	}
 800f488:	e00f      	b.n	800f4aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f490:	2b02      	cmp	r3, #2
 800f492:	d00a      	beq.n	800f4aa <prvDeleteTCB+0x56>
	__asm volatile
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	60fb      	str	r3, [r7, #12]
}
 800f4a6:	bf00      	nop
 800f4a8:	e7fe      	b.n	800f4a8 <prvDeleteTCB+0x54>
	}
 800f4aa:	bf00      	nop
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
	...

0800f4b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4ba:	4b0c      	ldr	r3, [pc, #48]	; (800f4ec <prvResetNextTaskUnblockTime+0x38>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d104      	bne.n	800f4ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f4c4:	4b0a      	ldr	r3, [pc, #40]	; (800f4f0 <prvResetNextTaskUnblockTime+0x3c>)
 800f4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f4cc:	e008      	b.n	800f4e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ce:	4b07      	ldr	r3, [pc, #28]	; (800f4ec <prvResetNextTaskUnblockTime+0x38>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	4a04      	ldr	r2, [pc, #16]	; (800f4f0 <prvResetNextTaskUnblockTime+0x3c>)
 800f4de:	6013      	str	r3, [r2, #0]
}
 800f4e0:	bf00      	nop
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	200011e4 	.word	0x200011e4
 800f4f0:	2000124c 	.word	0x2000124c

0800f4f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f4fa:	4b05      	ldr	r3, [pc, #20]	; (800f510 <xTaskGetCurrentTaskHandle+0x1c>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f500:	687b      	ldr	r3, [r7, #4]
	}
 800f502:	4618      	mov	r0, r3
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop
 800f510:	20000d58 	.word	0x20000d58

0800f514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f51a:	4b0b      	ldr	r3, [pc, #44]	; (800f548 <xTaskGetSchedulerState+0x34>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d102      	bne.n	800f528 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f522:	2301      	movs	r3, #1
 800f524:	607b      	str	r3, [r7, #4]
 800f526:	e008      	b.n	800f53a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f528:	4b08      	ldr	r3, [pc, #32]	; (800f54c <xTaskGetSchedulerState+0x38>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d102      	bne.n	800f536 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f530:	2302      	movs	r3, #2
 800f532:	607b      	str	r3, [r7, #4]
 800f534:	e001      	b.n	800f53a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f536:	2300      	movs	r3, #0
 800f538:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f53a:	687b      	ldr	r3, [r7, #4]
	}
 800f53c:	4618      	mov	r0, r3
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr
 800f548:	20001238 	.word	0x20001238
 800f54c:	20001254 	.word	0x20001254

0800f550 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f55c:	2300      	movs	r3, #0
 800f55e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d051      	beq.n	800f60a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f56a:	4b2a      	ldr	r3, [pc, #168]	; (800f614 <xTaskPriorityInherit+0xc4>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f570:	429a      	cmp	r2, r3
 800f572:	d241      	bcs.n	800f5f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	699b      	ldr	r3, [r3, #24]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	db06      	blt.n	800f58a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f57c:	4b25      	ldr	r3, [pc, #148]	; (800f614 <xTaskPriorityInherit+0xc4>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f582:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	6959      	ldr	r1, [r3, #20]
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f592:	4613      	mov	r3, r2
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	4413      	add	r3, r2
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	4a1f      	ldr	r2, [pc, #124]	; (800f618 <xTaskPriorityInherit+0xc8>)
 800f59c:	4413      	add	r3, r2
 800f59e:	4299      	cmp	r1, r3
 800f5a0:	d122      	bne.n	800f5e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe f826 	bl	800d5f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f5ac:	4b19      	ldr	r3, [pc, #100]	; (800f614 <xTaskPriorityInherit+0xc4>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ba:	4b18      	ldr	r3, [pc, #96]	; (800f61c <xTaskPriorityInherit+0xcc>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d903      	bls.n	800f5ca <xTaskPriorityInherit+0x7a>
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c6:	4a15      	ldr	r2, [pc, #84]	; (800f61c <xTaskPriorityInherit+0xcc>)
 800f5c8:	6013      	str	r3, [r2, #0]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	4413      	add	r3, r2
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	4a10      	ldr	r2, [pc, #64]	; (800f618 <xTaskPriorityInherit+0xc8>)
 800f5d8:	441a      	add	r2, r3
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	3304      	adds	r3, #4
 800f5de:	4619      	mov	r1, r3
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	f7fd ffac 	bl	800d53e <vListInsertEnd>
 800f5e6:	e004      	b.n	800f5f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <xTaskPriorityInherit+0xc4>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	60fb      	str	r3, [r7, #12]
 800f5f6:	e008      	b.n	800f60a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5fc:	4b05      	ldr	r3, [pc, #20]	; (800f614 <xTaskPriorityInherit+0xc4>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f602:	429a      	cmp	r2, r3
 800f604:	d201      	bcs.n	800f60a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f606:	2301      	movs	r3, #1
 800f608:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f60a:	68fb      	ldr	r3, [r7, #12]
	}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	20000d58 	.word	0x20000d58
 800f618:	20000d5c 	.word	0x20000d5c
 800f61c:	20001234 	.word	0x20001234

0800f620 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f620:	b580      	push	{r7, lr}
 800f622:	b086      	sub	sp, #24
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f62c:	2300      	movs	r3, #0
 800f62e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d056      	beq.n	800f6e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f636:	4b2e      	ldr	r3, [pc, #184]	; (800f6f0 <xTaskPriorityDisinherit+0xd0>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d00a      	beq.n	800f656 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	60fb      	str	r3, [r7, #12]
}
 800f652:	bf00      	nop
 800f654:	e7fe      	b.n	800f654 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10a      	bne.n	800f674 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	60bb      	str	r3, [r7, #8]
}
 800f670:	bf00      	nop
 800f672:	e7fe      	b.n	800f672 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f678:	1e5a      	subs	r2, r3, #1
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f686:	429a      	cmp	r2, r3
 800f688:	d02c      	beq.n	800f6e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d128      	bne.n	800f6e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	3304      	adds	r3, #4
 800f696:	4618      	mov	r0, r3
 800f698:	f7fd ffae 	bl	800d5f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b4:	4b0f      	ldr	r3, [pc, #60]	; (800f6f4 <xTaskPriorityDisinherit+0xd4>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d903      	bls.n	800f6c4 <xTaskPriorityDisinherit+0xa4>
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c0:	4a0c      	ldr	r2, [pc, #48]	; (800f6f4 <xTaskPriorityDisinherit+0xd4>)
 800f6c2:	6013      	str	r3, [r2, #0]
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	4413      	add	r3, r2
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	4a09      	ldr	r2, [pc, #36]	; (800f6f8 <xTaskPriorityDisinherit+0xd8>)
 800f6d2:	441a      	add	r2, r3
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	4619      	mov	r1, r3
 800f6da:	4610      	mov	r0, r2
 800f6dc:	f7fd ff2f 	bl	800d53e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f6e4:	697b      	ldr	r3, [r7, #20]
	}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3718      	adds	r7, #24
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	20000d58 	.word	0x20000d58
 800f6f4:	20001234 	.word	0x20001234
 800f6f8:	20000d5c 	.word	0x20000d5c

0800f6fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b088      	sub	sp, #32
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f70a:	2301      	movs	r3, #1
 800f70c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d06a      	beq.n	800f7ea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10a      	bne.n	800f732 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f720:	f383 8811 	msr	BASEPRI, r3
 800f724:	f3bf 8f6f 	isb	sy
 800f728:	f3bf 8f4f 	dsb	sy
 800f72c:	60fb      	str	r3, [r7, #12]
}
 800f72e:	bf00      	nop
 800f730:	e7fe      	b.n	800f730 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d902      	bls.n	800f742 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	61fb      	str	r3, [r7, #28]
 800f740:	e002      	b.n	800f748 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f746:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	69fa      	ldr	r2, [r7, #28]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d04b      	beq.n	800f7ea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d146      	bne.n	800f7ea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f75c:	4b25      	ldr	r3, [pc, #148]	; (800f7f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	69ba      	ldr	r2, [r7, #24]
 800f762:	429a      	cmp	r2, r3
 800f764:	d10a      	bne.n	800f77c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f76a:	f383 8811 	msr	BASEPRI, r3
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	60bb      	str	r3, [r7, #8]
}
 800f778:	bf00      	nop
 800f77a:	e7fe      	b.n	800f77a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f780:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	69fa      	ldr	r2, [r7, #28]
 800f786:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	db04      	blt.n	800f79a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	6959      	ldr	r1, [r3, #20]
 800f79e:	693a      	ldr	r2, [r7, #16]
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	4413      	add	r3, r2
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	4a13      	ldr	r2, [pc, #76]	; (800f7f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f7aa:	4413      	add	r3, r2
 800f7ac:	4299      	cmp	r1, r3
 800f7ae:	d11c      	bne.n	800f7ea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fd ff1f 	bl	800d5f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7be:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d903      	bls.n	800f7ce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ca:	4a0c      	ldr	r2, [pc, #48]	; (800f7fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f7cc:	6013      	str	r3, [r2, #0]
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4413      	add	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	4a07      	ldr	r2, [pc, #28]	; (800f7f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f7dc:	441a      	add	r2, r3
 800f7de:	69bb      	ldr	r3, [r7, #24]
 800f7e0:	3304      	adds	r3, #4
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	4610      	mov	r0, r2
 800f7e6:	f7fd feaa 	bl	800d53e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f7ea:	bf00      	nop
 800f7ec:	3720      	adds	r7, #32
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	20000d58 	.word	0x20000d58
 800f7f8:	20000d5c 	.word	0x20000d5c
 800f7fc:	20001234 	.word	0x20001234

0800f800 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f806:	4b09      	ldr	r3, [pc, #36]	; (800f82c <uxTaskResetEventItemValue+0x2c>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	699b      	ldr	r3, [r3, #24]
 800f80c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f80e:	4b07      	ldr	r3, [pc, #28]	; (800f82c <uxTaskResetEventItemValue+0x2c>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f814:	4b05      	ldr	r3, [pc, #20]	; (800f82c <uxTaskResetEventItemValue+0x2c>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f81c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f81e:	687b      	ldr	r3, [r7, #4]
}
 800f820:	4618      	mov	r0, r3
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	20000d58 	.word	0x20000d58

0800f830 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f830:	b480      	push	{r7}
 800f832:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f834:	4b07      	ldr	r3, [pc, #28]	; (800f854 <pvTaskIncrementMutexHeldCount+0x24>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d004      	beq.n	800f846 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f83c:	4b05      	ldr	r3, [pc, #20]	; (800f854 <pvTaskIncrementMutexHeldCount+0x24>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f842:	3201      	adds	r2, #1
 800f844:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f846:	4b03      	ldr	r3, [pc, #12]	; (800f854 <pvTaskIncrementMutexHeldCount+0x24>)
 800f848:	681b      	ldr	r3, [r3, #0]
	}
 800f84a:	4618      	mov	r0, r3
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	20000d58 	.word	0x20000d58

0800f858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f862:	4b21      	ldr	r3, [pc, #132]	; (800f8e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f868:	4b20      	ldr	r3, [pc, #128]	; (800f8ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	3304      	adds	r3, #4
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fd fec2 	bl	800d5f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f87a:	d10a      	bne.n	800f892 <prvAddCurrentTaskToDelayedList+0x3a>
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d007      	beq.n	800f892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f882:	4b1a      	ldr	r3, [pc, #104]	; (800f8ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	3304      	adds	r3, #4
 800f888:	4619      	mov	r1, r3
 800f88a:	4819      	ldr	r0, [pc, #100]	; (800f8f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f88c:	f7fd fe57 	bl	800d53e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f890:	e026      	b.n	800f8e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4413      	add	r3, r2
 800f898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f89a:	4b14      	ldr	r3, [pc, #80]	; (800f8ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d209      	bcs.n	800f8be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8aa:	4b12      	ldr	r3, [pc, #72]	; (800f8f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	4b0f      	ldr	r3, [pc, #60]	; (800f8ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	4610      	mov	r0, r2
 800f8b8:	f7fd fe65 	bl	800d586 <vListInsert>
}
 800f8bc:	e010      	b.n	800f8e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8be:	4b0e      	ldr	r3, [pc, #56]	; (800f8f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	4b0a      	ldr	r3, [pc, #40]	; (800f8ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4610      	mov	r0, r2
 800f8cc:	f7fd fe5b 	bl	800d586 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8d0:	4b0a      	ldr	r3, [pc, #40]	; (800f8fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	68ba      	ldr	r2, [r7, #8]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d202      	bcs.n	800f8e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f8da:	4a08      	ldr	r2, [pc, #32]	; (800f8fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	6013      	str	r3, [r2, #0]
}
 800f8e0:	bf00      	nop
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	20001230 	.word	0x20001230
 800f8ec:	20000d58 	.word	0x20000d58
 800f8f0:	20001218 	.word	0x20001218
 800f8f4:	200011e8 	.word	0x200011e8
 800f8f8:	200011e4 	.word	0x200011e4
 800f8fc:	2000124c 	.word	0x2000124c

0800f900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b08a      	sub	sp, #40	; 0x28
 800f904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f906:	2300      	movs	r3, #0
 800f908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f90a:	f000 fb07 	bl	800ff1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f90e:	4b1c      	ldr	r3, [pc, #112]	; (800f980 <xTimerCreateTimerTask+0x80>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d021      	beq.n	800f95a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f916:	2300      	movs	r3, #0
 800f918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f91a:	2300      	movs	r3, #0
 800f91c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f91e:	1d3a      	adds	r2, r7, #4
 800f920:	f107 0108 	add.w	r1, r7, #8
 800f924:	f107 030c 	add.w	r3, r7, #12
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fd fbd3 	bl	800d0d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	9202      	str	r2, [sp, #8]
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	2302      	movs	r3, #2
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	2300      	movs	r3, #0
 800f93e:	460a      	mov	r2, r1
 800f940:	4910      	ldr	r1, [pc, #64]	; (800f984 <xTimerCreateTimerTask+0x84>)
 800f942:	4811      	ldr	r0, [pc, #68]	; (800f988 <xTimerCreateTimerTask+0x88>)
 800f944:	f7fe fe02 	bl	800e54c <xTaskCreateStatic>
 800f948:	4603      	mov	r3, r0
 800f94a:	4a10      	ldr	r2, [pc, #64]	; (800f98c <xTimerCreateTimerTask+0x8c>)
 800f94c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f94e:	4b0f      	ldr	r3, [pc, #60]	; (800f98c <xTimerCreateTimerTask+0x8c>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f956:	2301      	movs	r3, #1
 800f958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10a      	bne.n	800f976 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	613b      	str	r3, [r7, #16]
}
 800f972:	bf00      	nop
 800f974:	e7fe      	b.n	800f974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f976:	697b      	ldr	r3, [r7, #20]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	20001288 	.word	0x20001288
 800f984:	08014f28 	.word	0x08014f28
 800f988:	0800fac5 	.word	0x0800fac5
 800f98c:	2000128c 	.word	0x2000128c

0800f990 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b08a      	sub	sp, #40	; 0x28
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	607a      	str	r2, [r7, #4]
 800f99c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10a      	bne.n	800f9be <xTimerGenericCommand+0x2e>
	__asm volatile
 800f9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ac:	f383 8811 	msr	BASEPRI, r3
 800f9b0:	f3bf 8f6f 	isb	sy
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	623b      	str	r3, [r7, #32]
}
 800f9ba:	bf00      	nop
 800f9bc:	e7fe      	b.n	800f9bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f9be:	4b1a      	ldr	r3, [pc, #104]	; (800fa28 <xTimerGenericCommand+0x98>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d02a      	beq.n	800fa1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	2b05      	cmp	r3, #5
 800f9d6:	dc18      	bgt.n	800fa0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f9d8:	f7ff fd9c 	bl	800f514 <xTaskGetSchedulerState>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b02      	cmp	r3, #2
 800f9e0:	d109      	bne.n	800f9f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f9e2:	4b11      	ldr	r3, [pc, #68]	; (800fa28 <xTimerGenericCommand+0x98>)
 800f9e4:	6818      	ldr	r0, [r3, #0]
 800f9e6:	f107 0110 	add.w	r1, r7, #16
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9ee:	f7fe f821 	bl	800da34 <xQueueGenericSend>
 800f9f2:	6278      	str	r0, [r7, #36]	; 0x24
 800f9f4:	e012      	b.n	800fa1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f9f6:	4b0c      	ldr	r3, [pc, #48]	; (800fa28 <xTimerGenericCommand+0x98>)
 800f9f8:	6818      	ldr	r0, [r3, #0]
 800f9fa:	f107 0110 	add.w	r1, r7, #16
 800f9fe:	2300      	movs	r3, #0
 800fa00:	2200      	movs	r2, #0
 800fa02:	f7fe f817 	bl	800da34 <xQueueGenericSend>
 800fa06:	6278      	str	r0, [r7, #36]	; 0x24
 800fa08:	e008      	b.n	800fa1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa0a:	4b07      	ldr	r3, [pc, #28]	; (800fa28 <xTimerGenericCommand+0x98>)
 800fa0c:	6818      	ldr	r0, [r3, #0]
 800fa0e:	f107 0110 	add.w	r1, r7, #16
 800fa12:	2300      	movs	r3, #0
 800fa14:	683a      	ldr	r2, [r7, #0]
 800fa16:	f7fe f90b 	bl	800dc30 <xQueueGenericSendFromISR>
 800fa1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3728      	adds	r7, #40	; 0x28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	20001288 	.word	0x20001288

0800fa2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b088      	sub	sp, #32
 800fa30:	af02      	add	r7, sp, #8
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa36:	4b22      	ldr	r3, [pc, #136]	; (800fac0 <prvProcessExpiredTimer+0x94>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	3304      	adds	r3, #4
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fd fdd7 	bl	800d5f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa50:	f003 0304 	and.w	r3, r3, #4
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d022      	beq.n	800fa9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	699a      	ldr	r2, [r3, #24]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	18d1      	adds	r1, r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	683a      	ldr	r2, [r7, #0]
 800fa64:	6978      	ldr	r0, [r7, #20]
 800fa66:	f000 f8d1 	bl	800fc0c <prvInsertTimerInActiveList>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d01f      	beq.n	800fab0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa70:	2300      	movs	r3, #0
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	2300      	movs	r3, #0
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	2100      	movs	r1, #0
 800fa7a:	6978      	ldr	r0, [r7, #20]
 800fa7c:	f7ff ff88 	bl	800f990 <xTimerGenericCommand>
 800fa80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d113      	bne.n	800fab0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	60fb      	str	r3, [r7, #12]
}
 800fa9a:	bf00      	nop
 800fa9c:	e7fe      	b.n	800fa9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faa4:	f023 0301 	bic.w	r3, r3, #1
 800faa8:	b2da      	uxtb	r2, r3
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	6a1b      	ldr	r3, [r3, #32]
 800fab4:	6978      	ldr	r0, [r7, #20]
 800fab6:	4798      	blx	r3
}
 800fab8:	bf00      	nop
 800faba:	3718      	adds	r7, #24
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	20001280 	.word	0x20001280

0800fac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800facc:	f107 0308 	add.w	r3, r7, #8
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 f857 	bl	800fb84 <prvGetNextExpireTime>
 800fad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	4619      	mov	r1, r3
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f000 f803 	bl	800fae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fae2:	f000 f8d5 	bl	800fc90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fae6:	e7f1      	b.n	800facc <prvTimerTask+0x8>

0800fae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800faf2:	f7ff f86d 	bl	800ebd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800faf6:	f107 0308 	add.w	r3, r7, #8
 800fafa:	4618      	mov	r0, r3
 800fafc:	f000 f866 	bl	800fbcc <prvSampleTimeNow>
 800fb00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d130      	bne.n	800fb6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d10a      	bne.n	800fb24 <prvProcessTimerOrBlockTask+0x3c>
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d806      	bhi.n	800fb24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb16:	f7ff f869 	bl	800ebec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb1a:	68f9      	ldr	r1, [r7, #12]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7ff ff85 	bl	800fa2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb22:	e024      	b.n	800fb6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d008      	beq.n	800fb3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb2a:	4b13      	ldr	r3, [pc, #76]	; (800fb78 <prvProcessTimerOrBlockTask+0x90>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d101      	bne.n	800fb38 <prvProcessTimerOrBlockTask+0x50>
 800fb34:	2301      	movs	r3, #1
 800fb36:	e000      	b.n	800fb3a <prvProcessTimerOrBlockTask+0x52>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb3c:	4b0f      	ldr	r3, [pc, #60]	; (800fb7c <prvProcessTimerOrBlockTask+0x94>)
 800fb3e:	6818      	ldr	r0, [r3, #0]
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	4619      	mov	r1, r3
 800fb4a:	f7fe fccb 	bl	800e4e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb4e:	f7ff f84d 	bl	800ebec <xTaskResumeAll>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10a      	bne.n	800fb6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fb58:	4b09      	ldr	r3, [pc, #36]	; (800fb80 <prvProcessTimerOrBlockTask+0x98>)
 800fb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb5e:	601a      	str	r2, [r3, #0]
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	f3bf 8f6f 	isb	sy
}
 800fb68:	e001      	b.n	800fb6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fb6a:	f7ff f83f 	bl	800ebec <xTaskResumeAll>
}
 800fb6e:	bf00      	nop
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	20001284 	.word	0x20001284
 800fb7c:	20001288 	.word	0x20001288
 800fb80:	e000ed04 	.word	0xe000ed04

0800fb84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fb8c:	4b0e      	ldr	r3, [pc, #56]	; (800fbc8 <prvGetNextExpireTime+0x44>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d101      	bne.n	800fb9a <prvGetNextExpireTime+0x16>
 800fb96:	2201      	movs	r2, #1
 800fb98:	e000      	b.n	800fb9c <prvGetNextExpireTime+0x18>
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d105      	bne.n	800fbb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fba8:	4b07      	ldr	r3, [pc, #28]	; (800fbc8 <prvGetNextExpireTime+0x44>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	60fb      	str	r3, [r7, #12]
 800fbb2:	e001      	b.n	800fbb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	20001280 	.word	0x20001280

0800fbcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fbd4:	f7ff f8a8 	bl	800ed28 <xTaskGetTickCount>
 800fbd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fbda:	4b0b      	ldr	r3, [pc, #44]	; (800fc08 <prvSampleTimeNow+0x3c>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d205      	bcs.n	800fbf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fbe4:	f000 f936 	bl	800fe54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	e002      	b.n	800fbf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fbf6:	4a04      	ldr	r2, [pc, #16]	; (800fc08 <prvSampleTimeNow+0x3c>)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	20001290 	.word	0x20001290

0800fc0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b086      	sub	sp, #24
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
 800fc18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc2a:	68ba      	ldr	r2, [r7, #8]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d812      	bhi.n	800fc58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	1ad2      	subs	r2, r2, r3
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	699b      	ldr	r3, [r3, #24]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d302      	bcc.n	800fc46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc40:	2301      	movs	r3, #1
 800fc42:	617b      	str	r3, [r7, #20]
 800fc44:	e01b      	b.n	800fc7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc46:	4b10      	ldr	r3, [pc, #64]	; (800fc88 <prvInsertTimerInActiveList+0x7c>)
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	4619      	mov	r1, r3
 800fc50:	4610      	mov	r0, r2
 800fc52:	f7fd fc98 	bl	800d586 <vListInsert>
 800fc56:	e012      	b.n	800fc7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d206      	bcs.n	800fc6e <prvInsertTimerInActiveList+0x62>
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d302      	bcc.n	800fc6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	617b      	str	r3, [r7, #20]
 800fc6c:	e007      	b.n	800fc7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc6e:	4b07      	ldr	r3, [pc, #28]	; (800fc8c <prvInsertTimerInActiveList+0x80>)
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3304      	adds	r3, #4
 800fc76:	4619      	mov	r1, r3
 800fc78:	4610      	mov	r0, r2
 800fc7a:	f7fd fc84 	bl	800d586 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fc7e:	697b      	ldr	r3, [r7, #20]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	20001284 	.word	0x20001284
 800fc8c:	20001280 	.word	0x20001280

0800fc90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b08e      	sub	sp, #56	; 0x38
 800fc94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc96:	e0ca      	b.n	800fe2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	da18      	bge.n	800fcd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fc9e:	1d3b      	adds	r3, r7, #4
 800fca0:	3304      	adds	r3, #4
 800fca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d10a      	bne.n	800fcc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcae:	f383 8811 	msr	BASEPRI, r3
 800fcb2:	f3bf 8f6f 	isb	sy
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	61fb      	str	r3, [r7, #28]
}
 800fcbc:	bf00      	nop
 800fcbe:	e7fe      	b.n	800fcbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcc6:	6850      	ldr	r0, [r2, #4]
 800fcc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcca:	6892      	ldr	r2, [r2, #8]
 800fccc:	4611      	mov	r1, r2
 800fcce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f2c0 80ab 	blt.w	800fe2e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcde:	695b      	ldr	r3, [r3, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d004      	beq.n	800fcee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	3304      	adds	r3, #4
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7fd fc85 	bl	800d5f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fcee:	463b      	mov	r3, r7
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff ff6b 	bl	800fbcc <prvSampleTimeNow>
 800fcf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b09      	cmp	r3, #9
 800fcfc:	f200 8096 	bhi.w	800fe2c <prvProcessReceivedCommands+0x19c>
 800fd00:	a201      	add	r2, pc, #4	; (adr r2, 800fd08 <prvProcessReceivedCommands+0x78>)
 800fd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd06:	bf00      	nop
 800fd08:	0800fd31 	.word	0x0800fd31
 800fd0c:	0800fd31 	.word	0x0800fd31
 800fd10:	0800fd31 	.word	0x0800fd31
 800fd14:	0800fda5 	.word	0x0800fda5
 800fd18:	0800fdb9 	.word	0x0800fdb9
 800fd1c:	0800fe03 	.word	0x0800fe03
 800fd20:	0800fd31 	.word	0x0800fd31
 800fd24:	0800fd31 	.word	0x0800fd31
 800fd28:	0800fda5 	.word	0x0800fda5
 800fd2c:	0800fdb9 	.word	0x0800fdb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd36:	f043 0301 	orr.w	r3, r3, #1
 800fd3a:	b2da      	uxtb	r2, r3
 800fd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd46:	699b      	ldr	r3, [r3, #24]
 800fd48:	18d1      	adds	r1, r2, r3
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd50:	f7ff ff5c 	bl	800fc0c <prvInsertTimerInActiveList>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d069      	beq.n	800fe2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5c:	6a1b      	ldr	r3, [r3, #32]
 800fd5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd68:	f003 0304 	and.w	r3, r3, #4
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d05e      	beq.n	800fe2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd74:	699b      	ldr	r3, [r3, #24]
 800fd76:	441a      	add	r2, r3
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	2100      	movs	r1, #0
 800fd80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd82:	f7ff fe05 	bl	800f990 <xTimerGenericCommand>
 800fd86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fd88:	6a3b      	ldr	r3, [r7, #32]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d14f      	bne.n	800fe2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	61bb      	str	r3, [r7, #24]
}
 800fda0:	bf00      	nop
 800fda2:	e7fe      	b.n	800fda2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdaa:	f023 0301 	bic.w	r3, r3, #1
 800fdae:	b2da      	uxtb	r2, r3
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fdb6:	e03a      	b.n	800fe2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdbe:	f043 0301 	orr.w	r3, r3, #1
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	699b      	ldr	r3, [r3, #24]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10a      	bne.n	800fdee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fddc:	f383 8811 	msr	BASEPRI, r3
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	f3bf 8f4f 	dsb	sy
 800fde8:	617b      	str	r3, [r7, #20]
}
 800fdea:	bf00      	nop
 800fdec:	e7fe      	b.n	800fdec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf0:	699a      	ldr	r2, [r3, #24]
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	18d1      	adds	r1, r2, r3
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdfc:	f7ff ff06 	bl	800fc0c <prvInsertTimerInActiveList>
					break;
 800fe00:	e015      	b.n	800fe2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe08:	f003 0302 	and.w	r3, r3, #2
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d103      	bne.n	800fe18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fe10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe12:	f000 fbfd 	bl	8010610 <vPortFree>
 800fe16:	e00a      	b.n	800fe2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe1e:	f023 0301 	bic.w	r3, r3, #1
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe2a:	e000      	b.n	800fe2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800fe2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe2e:	4b08      	ldr	r3, [pc, #32]	; (800fe50 <prvProcessReceivedCommands+0x1c0>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	1d39      	adds	r1, r7, #4
 800fe34:	2200      	movs	r2, #0
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fd ff96 	bl	800dd68 <xQueueReceive>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f47f af2a 	bne.w	800fc98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop
 800fe48:	3730      	adds	r7, #48	; 0x30
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	20001288 	.word	0x20001288

0800fe54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b088      	sub	sp, #32
 800fe58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe5a:	e048      	b.n	800feee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe5c:	4b2d      	ldr	r3, [pc, #180]	; (800ff14 <prvSwitchTimerLists+0xc0>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe66:	4b2b      	ldr	r3, [pc, #172]	; (800ff14 <prvSwitchTimerLists+0xc0>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	3304      	adds	r3, #4
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7fd fbbf 	bl	800d5f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe88:	f003 0304 	and.w	r3, r3, #4
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d02e      	beq.n	800feee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	4413      	add	r3, r2
 800fe98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d90e      	bls.n	800fec0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	68ba      	ldr	r2, [r7, #8]
 800fea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800feae:	4b19      	ldr	r3, [pc, #100]	; (800ff14 <prvSwitchTimerLists+0xc0>)
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	3304      	adds	r3, #4
 800feb6:	4619      	mov	r1, r3
 800feb8:	4610      	mov	r0, r2
 800feba:	f7fd fb64 	bl	800d586 <vListInsert>
 800febe:	e016      	b.n	800feee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fec0:	2300      	movs	r3, #0
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	2300      	movs	r3, #0
 800fec6:	693a      	ldr	r2, [r7, #16]
 800fec8:	2100      	movs	r1, #0
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f7ff fd60 	bl	800f990 <xTimerGenericCommand>
 800fed0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10a      	bne.n	800feee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	603b      	str	r3, [r7, #0]
}
 800feea:	bf00      	nop
 800feec:	e7fe      	b.n	800feec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800feee:	4b09      	ldr	r3, [pc, #36]	; (800ff14 <prvSwitchTimerLists+0xc0>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1b1      	bne.n	800fe5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fef8:	4b06      	ldr	r3, [pc, #24]	; (800ff14 <prvSwitchTimerLists+0xc0>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fefe:	4b06      	ldr	r3, [pc, #24]	; (800ff18 <prvSwitchTimerLists+0xc4>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4a04      	ldr	r2, [pc, #16]	; (800ff14 <prvSwitchTimerLists+0xc0>)
 800ff04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff06:	4a04      	ldr	r2, [pc, #16]	; (800ff18 <prvSwitchTimerLists+0xc4>)
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	6013      	str	r3, [r2, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	3718      	adds	r7, #24
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	20001280 	.word	0x20001280
 800ff18:	20001284 	.word	0x20001284

0800ff1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff22:	f000 f987 	bl	8010234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff26:	4b15      	ldr	r3, [pc, #84]	; (800ff7c <prvCheckForValidListAndQueue+0x60>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d120      	bne.n	800ff70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff2e:	4814      	ldr	r0, [pc, #80]	; (800ff80 <prvCheckForValidListAndQueue+0x64>)
 800ff30:	f7fd fad8 	bl	800d4e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff34:	4813      	ldr	r0, [pc, #76]	; (800ff84 <prvCheckForValidListAndQueue+0x68>)
 800ff36:	f7fd fad5 	bl	800d4e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff3a:	4b13      	ldr	r3, [pc, #76]	; (800ff88 <prvCheckForValidListAndQueue+0x6c>)
 800ff3c:	4a10      	ldr	r2, [pc, #64]	; (800ff80 <prvCheckForValidListAndQueue+0x64>)
 800ff3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff40:	4b12      	ldr	r3, [pc, #72]	; (800ff8c <prvCheckForValidListAndQueue+0x70>)
 800ff42:	4a10      	ldr	r2, [pc, #64]	; (800ff84 <prvCheckForValidListAndQueue+0x68>)
 800ff44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff46:	2300      	movs	r3, #0
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	4b11      	ldr	r3, [pc, #68]	; (800ff90 <prvCheckForValidListAndQueue+0x74>)
 800ff4c:	4a11      	ldr	r2, [pc, #68]	; (800ff94 <prvCheckForValidListAndQueue+0x78>)
 800ff4e:	2110      	movs	r1, #16
 800ff50:	200a      	movs	r0, #10
 800ff52:	f7fd fbe3 	bl	800d71c <xQueueGenericCreateStatic>
 800ff56:	4603      	mov	r3, r0
 800ff58:	4a08      	ldr	r2, [pc, #32]	; (800ff7c <prvCheckForValidListAndQueue+0x60>)
 800ff5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ff5c:	4b07      	ldr	r3, [pc, #28]	; (800ff7c <prvCheckForValidListAndQueue+0x60>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d005      	beq.n	800ff70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ff64:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <prvCheckForValidListAndQueue+0x60>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	490b      	ldr	r1, [pc, #44]	; (800ff98 <prvCheckForValidListAndQueue+0x7c>)
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fe fa90 	bl	800e490 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff70:	f000 f990 	bl	8010294 <vPortExitCritical>
}
 800ff74:	bf00      	nop
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	20001288 	.word	0x20001288
 800ff80:	20001258 	.word	0x20001258
 800ff84:	2000126c 	.word	0x2000126c
 800ff88:	20001280 	.word	0x20001280
 800ff8c:	20001284 	.word	0x20001284
 800ff90:	20001334 	.word	0x20001334
 800ff94:	20001294 	.word	0x20001294
 800ff98:	08014f30 	.word	0x08014f30

0800ff9c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b08a      	sub	sp, #40	; 0x28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
 800ffa8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ffaa:	f06f 0301 	mvn.w	r3, #1
 800ffae:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ffbc:	4b06      	ldr	r3, [pc, #24]	; (800ffd8 <xTimerPendFunctionCallFromISR+0x3c>)
 800ffbe:	6818      	ldr	r0, [r3, #0]
 800ffc0:	f107 0114 	add.w	r1, r7, #20
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	683a      	ldr	r2, [r7, #0]
 800ffc8:	f7fd fe32 	bl	800dc30 <xQueueGenericSendFromISR>
 800ffcc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ffce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3728      	adds	r7, #40	; 0x28
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	20001288 	.word	0x20001288

0800ffdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	3b04      	subs	r3, #4
 800ffec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	3b04      	subs	r3, #4
 800fffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	f023 0201 	bic.w	r2, r3, #1
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	3b04      	subs	r3, #4
 801000a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801000c:	4a0c      	ldr	r2, [pc, #48]	; (8010040 <pxPortInitialiseStack+0x64>)
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	3b14      	subs	r3, #20
 8010016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3b04      	subs	r3, #4
 8010022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f06f 0202 	mvn.w	r2, #2
 801002a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	3b20      	subs	r3, #32
 8010030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010032:	68fb      	ldr	r3, [r7, #12]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3714      	adds	r7, #20
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	08010045 	.word	0x08010045

08010044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010044:	b480      	push	{r7}
 8010046:	b085      	sub	sp, #20
 8010048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801004a:	2300      	movs	r3, #0
 801004c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801004e:	4b12      	ldr	r3, [pc, #72]	; (8010098 <prvTaskExitError+0x54>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010056:	d00a      	beq.n	801006e <prvTaskExitError+0x2a>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	60fb      	str	r3, [r7, #12]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <prvTaskExitError+0x28>
	__asm volatile
 801006e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010072:	f383 8811 	msr	BASEPRI, r3
 8010076:	f3bf 8f6f 	isb	sy
 801007a:	f3bf 8f4f 	dsb	sy
 801007e:	60bb      	str	r3, [r7, #8]
}
 8010080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010082:	bf00      	nop
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d0fc      	beq.n	8010084 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801008a:	bf00      	nop
 801008c:	bf00      	nop
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr
 8010098:	20000068 	.word	0x20000068
 801009c:	00000000 	.word	0x00000000

080100a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100a0:	4b07      	ldr	r3, [pc, #28]	; (80100c0 <pxCurrentTCBConst2>)
 80100a2:	6819      	ldr	r1, [r3, #0]
 80100a4:	6808      	ldr	r0, [r1, #0]
 80100a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100aa:	f380 8809 	msr	PSP, r0
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f04f 0000 	mov.w	r0, #0
 80100b6:	f380 8811 	msr	BASEPRI, r0
 80100ba:	4770      	bx	lr
 80100bc:	f3af 8000 	nop.w

080100c0 <pxCurrentTCBConst2>:
 80100c0:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100c4:	bf00      	nop
 80100c6:	bf00      	nop

080100c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100c8:	4808      	ldr	r0, [pc, #32]	; (80100ec <prvPortStartFirstTask+0x24>)
 80100ca:	6800      	ldr	r0, [r0, #0]
 80100cc:	6800      	ldr	r0, [r0, #0]
 80100ce:	f380 8808 	msr	MSP, r0
 80100d2:	f04f 0000 	mov.w	r0, #0
 80100d6:	f380 8814 	msr	CONTROL, r0
 80100da:	b662      	cpsie	i
 80100dc:	b661      	cpsie	f
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	f3bf 8f6f 	isb	sy
 80100e6:	df00      	svc	0
 80100e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100ea:	bf00      	nop
 80100ec:	e000ed08 	.word	0xe000ed08

080100f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80100f6:	4b46      	ldr	r3, [pc, #280]	; (8010210 <xPortStartScheduler+0x120>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a46      	ldr	r2, [pc, #280]	; (8010214 <xPortStartScheduler+0x124>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d10a      	bne.n	8010116 <xPortStartScheduler+0x26>
	__asm volatile
 8010100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010104:	f383 8811 	msr	BASEPRI, r3
 8010108:	f3bf 8f6f 	isb	sy
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	613b      	str	r3, [r7, #16]
}
 8010112:	bf00      	nop
 8010114:	e7fe      	b.n	8010114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010116:	4b3e      	ldr	r3, [pc, #248]	; (8010210 <xPortStartScheduler+0x120>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4a3f      	ldr	r2, [pc, #252]	; (8010218 <xPortStartScheduler+0x128>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d10a      	bne.n	8010136 <xPortStartScheduler+0x46>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	60fb      	str	r3, [r7, #12]
}
 8010132:	bf00      	nop
 8010134:	e7fe      	b.n	8010134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010136:	4b39      	ldr	r3, [pc, #228]	; (801021c <xPortStartScheduler+0x12c>)
 8010138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	b2db      	uxtb	r3, r3
 8010140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	22ff      	movs	r2, #255	; 0xff
 8010146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	b2db      	uxtb	r3, r3
 801014e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010150:	78fb      	ldrb	r3, [r7, #3]
 8010152:	b2db      	uxtb	r3, r3
 8010154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010158:	b2da      	uxtb	r2, r3
 801015a:	4b31      	ldr	r3, [pc, #196]	; (8010220 <xPortStartScheduler+0x130>)
 801015c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801015e:	4b31      	ldr	r3, [pc, #196]	; (8010224 <xPortStartScheduler+0x134>)
 8010160:	2207      	movs	r2, #7
 8010162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010164:	e009      	b.n	801017a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010166:	4b2f      	ldr	r3, [pc, #188]	; (8010224 <xPortStartScheduler+0x134>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	3b01      	subs	r3, #1
 801016c:	4a2d      	ldr	r2, [pc, #180]	; (8010224 <xPortStartScheduler+0x134>)
 801016e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	b2db      	uxtb	r3, r3
 8010174:	005b      	lsls	r3, r3, #1
 8010176:	b2db      	uxtb	r3, r3
 8010178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801017a:	78fb      	ldrb	r3, [r7, #3]
 801017c:	b2db      	uxtb	r3, r3
 801017e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010182:	2b80      	cmp	r3, #128	; 0x80
 8010184:	d0ef      	beq.n	8010166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010186:	4b27      	ldr	r3, [pc, #156]	; (8010224 <xPortStartScheduler+0x134>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f1c3 0307 	rsb	r3, r3, #7
 801018e:	2b04      	cmp	r3, #4
 8010190:	d00a      	beq.n	80101a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	60bb      	str	r3, [r7, #8]
}
 80101a4:	bf00      	nop
 80101a6:	e7fe      	b.n	80101a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101a8:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <xPortStartScheduler+0x134>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	021b      	lsls	r3, r3, #8
 80101ae:	4a1d      	ldr	r2, [pc, #116]	; (8010224 <xPortStartScheduler+0x134>)
 80101b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101b2:	4b1c      	ldr	r3, [pc, #112]	; (8010224 <xPortStartScheduler+0x134>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101ba:	4a1a      	ldr	r2, [pc, #104]	; (8010224 <xPortStartScheduler+0x134>)
 80101bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	b2da      	uxtb	r2, r3
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101c6:	4b18      	ldr	r3, [pc, #96]	; (8010228 <xPortStartScheduler+0x138>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a17      	ldr	r2, [pc, #92]	; (8010228 <xPortStartScheduler+0x138>)
 80101cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101d2:	4b15      	ldr	r3, [pc, #84]	; (8010228 <xPortStartScheduler+0x138>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a14      	ldr	r2, [pc, #80]	; (8010228 <xPortStartScheduler+0x138>)
 80101d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80101dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101de:	f000 f8dd 	bl	801039c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101e2:	4b12      	ldr	r3, [pc, #72]	; (801022c <xPortStartScheduler+0x13c>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101e8:	f000 f8fc 	bl	80103e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80101ec:	4b10      	ldr	r3, [pc, #64]	; (8010230 <xPortStartScheduler+0x140>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a0f      	ldr	r2, [pc, #60]	; (8010230 <xPortStartScheduler+0x140>)
 80101f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80101f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80101f8:	f7ff ff66 	bl	80100c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80101fc:	f7fe fe70 	bl	800eee0 <vTaskSwitchContext>
	prvTaskExitError();
 8010200:	f7ff ff20 	bl	8010044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3718      	adds	r7, #24
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	e000ed00 	.word	0xe000ed00
 8010214:	410fc271 	.word	0x410fc271
 8010218:	410fc270 	.word	0x410fc270
 801021c:	e000e400 	.word	0xe000e400
 8010220:	20001384 	.word	0x20001384
 8010224:	20001388 	.word	0x20001388
 8010228:	e000ed20 	.word	0xe000ed20
 801022c:	20000068 	.word	0x20000068
 8010230:	e000ef34 	.word	0xe000ef34

08010234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
	__asm volatile
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	607b      	str	r3, [r7, #4]
}
 801024c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801024e:	4b0f      	ldr	r3, [pc, #60]	; (801028c <vPortEnterCritical+0x58>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3301      	adds	r3, #1
 8010254:	4a0d      	ldr	r2, [pc, #52]	; (801028c <vPortEnterCritical+0x58>)
 8010256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010258:	4b0c      	ldr	r3, [pc, #48]	; (801028c <vPortEnterCritical+0x58>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d10f      	bne.n	8010280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010260:	4b0b      	ldr	r3, [pc, #44]	; (8010290 <vPortEnterCritical+0x5c>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00a      	beq.n	8010280 <vPortEnterCritical+0x4c>
	__asm volatile
 801026a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026e:	f383 8811 	msr	BASEPRI, r3
 8010272:	f3bf 8f6f 	isb	sy
 8010276:	f3bf 8f4f 	dsb	sy
 801027a:	603b      	str	r3, [r7, #0]
}
 801027c:	bf00      	nop
 801027e:	e7fe      	b.n	801027e <vPortEnterCritical+0x4a>
	}
}
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	20000068 	.word	0x20000068
 8010290:	e000ed04 	.word	0xe000ed04

08010294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801029a:	4b12      	ldr	r3, [pc, #72]	; (80102e4 <vPortExitCritical+0x50>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d10a      	bne.n	80102b8 <vPortExitCritical+0x24>
	__asm volatile
 80102a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	607b      	str	r3, [r7, #4]
}
 80102b4:	bf00      	nop
 80102b6:	e7fe      	b.n	80102b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102b8:	4b0a      	ldr	r3, [pc, #40]	; (80102e4 <vPortExitCritical+0x50>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	3b01      	subs	r3, #1
 80102be:	4a09      	ldr	r2, [pc, #36]	; (80102e4 <vPortExitCritical+0x50>)
 80102c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102c2:	4b08      	ldr	r3, [pc, #32]	; (80102e4 <vPortExitCritical+0x50>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d105      	bne.n	80102d6 <vPortExitCritical+0x42>
 80102ca:	2300      	movs	r3, #0
 80102cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	f383 8811 	msr	BASEPRI, r3
}
 80102d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102d6:	bf00      	nop
 80102d8:	370c      	adds	r7, #12
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	20000068 	.word	0x20000068
	...

080102f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80102f0:	f3ef 8009 	mrs	r0, PSP
 80102f4:	f3bf 8f6f 	isb	sy
 80102f8:	4b15      	ldr	r3, [pc, #84]	; (8010350 <pxCurrentTCBConst>)
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	f01e 0f10 	tst.w	lr, #16
 8010300:	bf08      	it	eq
 8010302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030a:	6010      	str	r0, [r2, #0]
 801030c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010314:	f380 8811 	msr	BASEPRI, r0
 8010318:	f3bf 8f4f 	dsb	sy
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f7fe fdde 	bl	800eee0 <vTaskSwitchContext>
 8010324:	f04f 0000 	mov.w	r0, #0
 8010328:	f380 8811 	msr	BASEPRI, r0
 801032c:	bc09      	pop	{r0, r3}
 801032e:	6819      	ldr	r1, [r3, #0]
 8010330:	6808      	ldr	r0, [r1, #0]
 8010332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010336:	f01e 0f10 	tst.w	lr, #16
 801033a:	bf08      	it	eq
 801033c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010340:	f380 8809 	msr	PSP, r0
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	f3af 8000 	nop.w

08010350 <pxCurrentTCBConst>:
 8010350:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010354:	bf00      	nop
 8010356:	bf00      	nop

08010358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	607b      	str	r3, [r7, #4]
}
 8010370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010372:	f7fe fcfb 	bl	800ed6c <xTaskIncrementTick>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d003      	beq.n	8010384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801037c:	4b06      	ldr	r3, [pc, #24]	; (8010398 <xPortSysTickHandler+0x40>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	2300      	movs	r3, #0
 8010386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	f383 8811 	msr	BASEPRI, r3
}
 801038e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010390:	bf00      	nop
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	e000ed04 	.word	0xe000ed04

0801039c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801039c:	b480      	push	{r7}
 801039e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103a0:	4b0b      	ldr	r3, [pc, #44]	; (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103a6:	4b0b      	ldr	r3, [pc, #44]	; (80103d4 <vPortSetupTimerInterrupt+0x38>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <vPortSetupTimerInterrupt+0x3c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a0a      	ldr	r2, [pc, #40]	; (80103dc <vPortSetupTimerInterrupt+0x40>)
 80103b2:	fba2 2303 	umull	r2, r3, r2, r3
 80103b6:	099b      	lsrs	r3, r3, #6
 80103b8:	4a09      	ldr	r2, [pc, #36]	; (80103e0 <vPortSetupTimerInterrupt+0x44>)
 80103ba:	3b01      	subs	r3, #1
 80103bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103be:	4b04      	ldr	r3, [pc, #16]	; (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103c0:	2207      	movs	r2, #7
 80103c2:	601a      	str	r2, [r3, #0]
}
 80103c4:	bf00      	nop
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	e000e010 	.word	0xe000e010
 80103d4:	e000e018 	.word	0xe000e018
 80103d8:	2000003c 	.word	0x2000003c
 80103dc:	10624dd3 	.word	0x10624dd3
 80103e0:	e000e014 	.word	0xe000e014

080103e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80103f4 <vPortEnableVFP+0x10>
 80103e8:	6801      	ldr	r1, [r0, #0]
 80103ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103ee:	6001      	str	r1, [r0, #0]
 80103f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80103f2:	bf00      	nop
 80103f4:	e000ed88 	.word	0xe000ed88

080103f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80103fe:	f3ef 8305 	mrs	r3, IPSR
 8010402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b0f      	cmp	r3, #15
 8010408:	d914      	bls.n	8010434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801040a:	4a17      	ldr	r2, [pc, #92]	; (8010468 <vPortValidateInterruptPriority+0x70>)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4413      	add	r3, r2
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010414:	4b15      	ldr	r3, [pc, #84]	; (801046c <vPortValidateInterruptPriority+0x74>)
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	7afa      	ldrb	r2, [r7, #11]
 801041a:	429a      	cmp	r2, r3
 801041c:	d20a      	bcs.n	8010434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	607b      	str	r3, [r7, #4]
}
 8010430:	bf00      	nop
 8010432:	e7fe      	b.n	8010432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010434:	4b0e      	ldr	r3, [pc, #56]	; (8010470 <vPortValidateInterruptPriority+0x78>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801043c:	4b0d      	ldr	r3, [pc, #52]	; (8010474 <vPortValidateInterruptPriority+0x7c>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	429a      	cmp	r2, r3
 8010442:	d90a      	bls.n	801045a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010448:	f383 8811 	msr	BASEPRI, r3
 801044c:	f3bf 8f6f 	isb	sy
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	603b      	str	r3, [r7, #0]
}
 8010456:	bf00      	nop
 8010458:	e7fe      	b.n	8010458 <vPortValidateInterruptPriority+0x60>
	}
 801045a:	bf00      	nop
 801045c:	3714      	adds	r7, #20
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	e000e3f0 	.word	0xe000e3f0
 801046c:	20001384 	.word	0x20001384
 8010470:	e000ed0c 	.word	0xe000ed0c
 8010474:	20001388 	.word	0x20001388

08010478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b08a      	sub	sp, #40	; 0x28
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010480:	2300      	movs	r3, #0
 8010482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010484:	f7fe fba4 	bl	800ebd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010488:	4b5b      	ldr	r3, [pc, #364]	; (80105f8 <pvPortMalloc+0x180>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d101      	bne.n	8010494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010490:	f000 f920 	bl	80106d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010494:	4b59      	ldr	r3, [pc, #356]	; (80105fc <pvPortMalloc+0x184>)
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4013      	ands	r3, r2
 801049c:	2b00      	cmp	r3, #0
 801049e:	f040 8093 	bne.w	80105c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d01d      	beq.n	80104e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80104a8:	2208      	movs	r2, #8
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4413      	add	r3, r2
 80104ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f003 0307 	and.w	r3, r3, #7
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d014      	beq.n	80104e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f023 0307 	bic.w	r3, r3, #7
 80104c0:	3308      	adds	r3, #8
 80104c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f003 0307 	and.w	r3, r3, #7
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00a      	beq.n	80104e4 <pvPortMalloc+0x6c>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	617b      	str	r3, [r7, #20]
}
 80104e0:	bf00      	nop
 80104e2:	e7fe      	b.n	80104e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d06e      	beq.n	80105c8 <pvPortMalloc+0x150>
 80104ea:	4b45      	ldr	r3, [pc, #276]	; (8010600 <pvPortMalloc+0x188>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d869      	bhi.n	80105c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80104f4:	4b43      	ldr	r3, [pc, #268]	; (8010604 <pvPortMalloc+0x18c>)
 80104f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80104f8:	4b42      	ldr	r3, [pc, #264]	; (8010604 <pvPortMalloc+0x18c>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104fe:	e004      	b.n	801050a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	429a      	cmp	r2, r3
 8010512:	d903      	bls.n	801051c <pvPortMalloc+0xa4>
 8010514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1f1      	bne.n	8010500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801051c:	4b36      	ldr	r3, [pc, #216]	; (80105f8 <pvPortMalloc+0x180>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010522:	429a      	cmp	r2, r3
 8010524:	d050      	beq.n	80105c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010526:	6a3b      	ldr	r3, [r7, #32]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2208      	movs	r2, #8
 801052c:	4413      	add	r3, r2
 801052e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	6a3b      	ldr	r3, [r7, #32]
 8010536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053a:	685a      	ldr	r2, [r3, #4]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	1ad2      	subs	r2, r2, r3
 8010540:	2308      	movs	r3, #8
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	429a      	cmp	r2, r3
 8010546:	d91f      	bls.n	8010588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4413      	add	r3, r2
 801054e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	f003 0307 	and.w	r3, r3, #7
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00a      	beq.n	8010570 <pvPortMalloc+0xf8>
	__asm volatile
 801055a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055e:	f383 8811 	msr	BASEPRI, r3
 8010562:	f3bf 8f6f 	isb	sy
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	613b      	str	r3, [r7, #16]
}
 801056c:	bf00      	nop
 801056e:	e7fe      	b.n	801056e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010572:	685a      	ldr	r2, [r3, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	1ad2      	subs	r2, r2, r3
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010582:	69b8      	ldr	r0, [r7, #24]
 8010584:	f000 f908 	bl	8010798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010588:	4b1d      	ldr	r3, [pc, #116]	; (8010600 <pvPortMalloc+0x188>)
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	4a1b      	ldr	r2, [pc, #108]	; (8010600 <pvPortMalloc+0x188>)
 8010594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010596:	4b1a      	ldr	r3, [pc, #104]	; (8010600 <pvPortMalloc+0x188>)
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	4b1b      	ldr	r3, [pc, #108]	; (8010608 <pvPortMalloc+0x190>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d203      	bcs.n	80105aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105a2:	4b17      	ldr	r3, [pc, #92]	; (8010600 <pvPortMalloc+0x188>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4a18      	ldr	r2, [pc, #96]	; (8010608 <pvPortMalloc+0x190>)
 80105a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ac:	685a      	ldr	r2, [r3, #4]
 80105ae:	4b13      	ldr	r3, [pc, #76]	; (80105fc <pvPortMalloc+0x184>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	431a      	orrs	r2, r3
 80105b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ba:	2200      	movs	r2, #0
 80105bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80105be:	4b13      	ldr	r3, [pc, #76]	; (801060c <pvPortMalloc+0x194>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3301      	adds	r3, #1
 80105c4:	4a11      	ldr	r2, [pc, #68]	; (801060c <pvPortMalloc+0x194>)
 80105c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105c8:	f7fe fb10 	bl	800ebec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	f003 0307 	and.w	r3, r3, #7
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00a      	beq.n	80105ec <pvPortMalloc+0x174>
	__asm volatile
 80105d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105da:	f383 8811 	msr	BASEPRI, r3
 80105de:	f3bf 8f6f 	isb	sy
 80105e2:	f3bf 8f4f 	dsb	sy
 80105e6:	60fb      	str	r3, [r7, #12]
}
 80105e8:	bf00      	nop
 80105ea:	e7fe      	b.n	80105ea <pvPortMalloc+0x172>
	return pvReturn;
 80105ec:	69fb      	ldr	r3, [r7, #28]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3728      	adds	r7, #40	; 0x28
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	20006394 	.word	0x20006394
 80105fc:	200063a8 	.word	0x200063a8
 8010600:	20006398 	.word	0x20006398
 8010604:	2000638c 	.word	0x2000638c
 8010608:	2000639c 	.word	0x2000639c
 801060c:	200063a0 	.word	0x200063a0

08010610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d04d      	beq.n	80106be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010622:	2308      	movs	r3, #8
 8010624:	425b      	negs	r3, r3
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	4413      	add	r3, r2
 801062a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	4b24      	ldr	r3, [pc, #144]	; (80106c8 <vPortFree+0xb8>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4013      	ands	r3, r2
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10a      	bne.n	8010654 <vPortFree+0x44>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	60fb      	str	r3, [r7, #12]
}
 8010650:	bf00      	nop
 8010652:	e7fe      	b.n	8010652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d00a      	beq.n	8010672 <vPortFree+0x62>
	__asm volatile
 801065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	60bb      	str	r3, [r7, #8]
}
 801066e:	bf00      	nop
 8010670:	e7fe      	b.n	8010670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	4b14      	ldr	r3, [pc, #80]	; (80106c8 <vPortFree+0xb8>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4013      	ands	r3, r2
 801067c:	2b00      	cmp	r3, #0
 801067e:	d01e      	beq.n	80106be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d11a      	bne.n	80106be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	685a      	ldr	r2, [r3, #4]
 801068c:	4b0e      	ldr	r3, [pc, #56]	; (80106c8 <vPortFree+0xb8>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	43db      	mvns	r3, r3
 8010692:	401a      	ands	r2, r3
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010698:	f7fe fa9a 	bl	800ebd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	685a      	ldr	r2, [r3, #4]
 80106a0:	4b0a      	ldr	r3, [pc, #40]	; (80106cc <vPortFree+0xbc>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4413      	add	r3, r2
 80106a6:	4a09      	ldr	r2, [pc, #36]	; (80106cc <vPortFree+0xbc>)
 80106a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106aa:	6938      	ldr	r0, [r7, #16]
 80106ac:	f000 f874 	bl	8010798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80106b0:	4b07      	ldr	r3, [pc, #28]	; (80106d0 <vPortFree+0xc0>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	3301      	adds	r3, #1
 80106b6:	4a06      	ldr	r2, [pc, #24]	; (80106d0 <vPortFree+0xc0>)
 80106b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80106ba:	f7fe fa97 	bl	800ebec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106be:	bf00      	nop
 80106c0:	3718      	adds	r7, #24
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	200063a8 	.word	0x200063a8
 80106cc:	20006398 	.word	0x20006398
 80106d0:	200063a4 	.word	0x200063a4

080106d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106d4:	b480      	push	{r7}
 80106d6:	b085      	sub	sp, #20
 80106d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106da:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80106de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80106e0:	4b27      	ldr	r3, [pc, #156]	; (8010780 <prvHeapInit+0xac>)
 80106e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f003 0307 	and.w	r3, r3, #7
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00c      	beq.n	8010708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	3307      	adds	r3, #7
 80106f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f023 0307 	bic.w	r3, r3, #7
 80106fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80106fc:	68ba      	ldr	r2, [r7, #8]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	4a1f      	ldr	r2, [pc, #124]	; (8010780 <prvHeapInit+0xac>)
 8010704:	4413      	add	r3, r2
 8010706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801070c:	4a1d      	ldr	r2, [pc, #116]	; (8010784 <prvHeapInit+0xb0>)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010712:	4b1c      	ldr	r3, [pc, #112]	; (8010784 <prvHeapInit+0xb0>)
 8010714:	2200      	movs	r2, #0
 8010716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	4413      	add	r3, r2
 801071e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010720:	2208      	movs	r2, #8
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	1a9b      	subs	r3, r3, r2
 8010726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f023 0307 	bic.w	r3, r3, #7
 801072e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	4a15      	ldr	r2, [pc, #84]	; (8010788 <prvHeapInit+0xb4>)
 8010734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010736:	4b14      	ldr	r3, [pc, #80]	; (8010788 <prvHeapInit+0xb4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2200      	movs	r2, #0
 801073c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801073e:	4b12      	ldr	r3, [pc, #72]	; (8010788 <prvHeapInit+0xb4>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2200      	movs	r2, #0
 8010744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	1ad2      	subs	r2, r2, r3
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010754:	4b0c      	ldr	r3, [pc, #48]	; (8010788 <prvHeapInit+0xb4>)
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4a0a      	ldr	r2, [pc, #40]	; (801078c <prvHeapInit+0xb8>)
 8010762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	4a09      	ldr	r2, [pc, #36]	; (8010790 <prvHeapInit+0xbc>)
 801076a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801076c:	4b09      	ldr	r3, [pc, #36]	; (8010794 <prvHeapInit+0xc0>)
 801076e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010772:	601a      	str	r2, [r3, #0]
}
 8010774:	bf00      	nop
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr
 8010780:	2000138c 	.word	0x2000138c
 8010784:	2000638c 	.word	0x2000638c
 8010788:	20006394 	.word	0x20006394
 801078c:	2000639c 	.word	0x2000639c
 8010790:	20006398 	.word	0x20006398
 8010794:	200063a8 	.word	0x200063a8

08010798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107a0:	4b28      	ldr	r3, [pc, #160]	; (8010844 <prvInsertBlockIntoFreeList+0xac>)
 80107a2:	60fb      	str	r3, [r7, #12]
 80107a4:	e002      	b.n	80107ac <prvInsertBlockIntoFreeList+0x14>
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d8f7      	bhi.n	80107a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	68ba      	ldr	r2, [r7, #8]
 80107c0:	4413      	add	r3, r2
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d108      	bne.n	80107da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	685a      	ldr	r2, [r3, #4]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	441a      	add	r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	441a      	add	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d118      	bne.n	8010820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	4b15      	ldr	r3, [pc, #84]	; (8010848 <prvInsertBlockIntoFreeList+0xb0>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d00d      	beq.n	8010816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	685a      	ldr	r2, [r3, #4]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	441a      	add	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	e008      	b.n	8010828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010816:	4b0c      	ldr	r3, [pc, #48]	; (8010848 <prvInsertBlockIntoFreeList+0xb0>)
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	e003      	b.n	8010828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	429a      	cmp	r2, r3
 801082e:	d002      	beq.n	8010836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010836:	bf00      	nop
 8010838:	3714      	adds	r7, #20
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr
 8010842:	bf00      	nop
 8010844:	2000638c 	.word	0x2000638c
 8010848:	20006394 	.word	0x20006394

0801084c <malloc>:
 801084c:	4b02      	ldr	r3, [pc, #8]	; (8010858 <malloc+0xc>)
 801084e:	4601      	mov	r1, r0
 8010850:	6818      	ldr	r0, [r3, #0]
 8010852:	f000 b823 	b.w	801089c <_malloc_r>
 8010856:	bf00      	nop
 8010858:	200000c4 	.word	0x200000c4

0801085c <sbrk_aligned>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	4e0e      	ldr	r6, [pc, #56]	; (8010898 <sbrk_aligned+0x3c>)
 8010860:	460c      	mov	r4, r1
 8010862:	6831      	ldr	r1, [r6, #0]
 8010864:	4605      	mov	r5, r0
 8010866:	b911      	cbnz	r1, 801086e <sbrk_aligned+0x12>
 8010868:	f000 fe70 	bl	801154c <_sbrk_r>
 801086c:	6030      	str	r0, [r6, #0]
 801086e:	4621      	mov	r1, r4
 8010870:	4628      	mov	r0, r5
 8010872:	f000 fe6b 	bl	801154c <_sbrk_r>
 8010876:	1c43      	adds	r3, r0, #1
 8010878:	d00a      	beq.n	8010890 <sbrk_aligned+0x34>
 801087a:	1cc4      	adds	r4, r0, #3
 801087c:	f024 0403 	bic.w	r4, r4, #3
 8010880:	42a0      	cmp	r0, r4
 8010882:	d007      	beq.n	8010894 <sbrk_aligned+0x38>
 8010884:	1a21      	subs	r1, r4, r0
 8010886:	4628      	mov	r0, r5
 8010888:	f000 fe60 	bl	801154c <_sbrk_r>
 801088c:	3001      	adds	r0, #1
 801088e:	d101      	bne.n	8010894 <sbrk_aligned+0x38>
 8010890:	f04f 34ff 	mov.w	r4, #4294967295
 8010894:	4620      	mov	r0, r4
 8010896:	bd70      	pop	{r4, r5, r6, pc}
 8010898:	200063b0 	.word	0x200063b0

0801089c <_malloc_r>:
 801089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108a0:	1ccd      	adds	r5, r1, #3
 80108a2:	f025 0503 	bic.w	r5, r5, #3
 80108a6:	3508      	adds	r5, #8
 80108a8:	2d0c      	cmp	r5, #12
 80108aa:	bf38      	it	cc
 80108ac:	250c      	movcc	r5, #12
 80108ae:	2d00      	cmp	r5, #0
 80108b0:	4607      	mov	r7, r0
 80108b2:	db01      	blt.n	80108b8 <_malloc_r+0x1c>
 80108b4:	42a9      	cmp	r1, r5
 80108b6:	d905      	bls.n	80108c4 <_malloc_r+0x28>
 80108b8:	230c      	movs	r3, #12
 80108ba:	603b      	str	r3, [r7, #0]
 80108bc:	2600      	movs	r6, #0
 80108be:	4630      	mov	r0, r6
 80108c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010998 <_malloc_r+0xfc>
 80108c8:	f000 f868 	bl	801099c <__malloc_lock>
 80108cc:	f8d8 3000 	ldr.w	r3, [r8]
 80108d0:	461c      	mov	r4, r3
 80108d2:	bb5c      	cbnz	r4, 801092c <_malloc_r+0x90>
 80108d4:	4629      	mov	r1, r5
 80108d6:	4638      	mov	r0, r7
 80108d8:	f7ff ffc0 	bl	801085c <sbrk_aligned>
 80108dc:	1c43      	adds	r3, r0, #1
 80108de:	4604      	mov	r4, r0
 80108e0:	d155      	bne.n	801098e <_malloc_r+0xf2>
 80108e2:	f8d8 4000 	ldr.w	r4, [r8]
 80108e6:	4626      	mov	r6, r4
 80108e8:	2e00      	cmp	r6, #0
 80108ea:	d145      	bne.n	8010978 <_malloc_r+0xdc>
 80108ec:	2c00      	cmp	r4, #0
 80108ee:	d048      	beq.n	8010982 <_malloc_r+0xe6>
 80108f0:	6823      	ldr	r3, [r4, #0]
 80108f2:	4631      	mov	r1, r6
 80108f4:	4638      	mov	r0, r7
 80108f6:	eb04 0903 	add.w	r9, r4, r3
 80108fa:	f000 fe27 	bl	801154c <_sbrk_r>
 80108fe:	4581      	cmp	r9, r0
 8010900:	d13f      	bne.n	8010982 <_malloc_r+0xe6>
 8010902:	6821      	ldr	r1, [r4, #0]
 8010904:	1a6d      	subs	r5, r5, r1
 8010906:	4629      	mov	r1, r5
 8010908:	4638      	mov	r0, r7
 801090a:	f7ff ffa7 	bl	801085c <sbrk_aligned>
 801090e:	3001      	adds	r0, #1
 8010910:	d037      	beq.n	8010982 <_malloc_r+0xe6>
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	442b      	add	r3, r5
 8010916:	6023      	str	r3, [r4, #0]
 8010918:	f8d8 3000 	ldr.w	r3, [r8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d038      	beq.n	8010992 <_malloc_r+0xf6>
 8010920:	685a      	ldr	r2, [r3, #4]
 8010922:	42a2      	cmp	r2, r4
 8010924:	d12b      	bne.n	801097e <_malloc_r+0xe2>
 8010926:	2200      	movs	r2, #0
 8010928:	605a      	str	r2, [r3, #4]
 801092a:	e00f      	b.n	801094c <_malloc_r+0xb0>
 801092c:	6822      	ldr	r2, [r4, #0]
 801092e:	1b52      	subs	r2, r2, r5
 8010930:	d41f      	bmi.n	8010972 <_malloc_r+0xd6>
 8010932:	2a0b      	cmp	r2, #11
 8010934:	d917      	bls.n	8010966 <_malloc_r+0xca>
 8010936:	1961      	adds	r1, r4, r5
 8010938:	42a3      	cmp	r3, r4
 801093a:	6025      	str	r5, [r4, #0]
 801093c:	bf18      	it	ne
 801093e:	6059      	strne	r1, [r3, #4]
 8010940:	6863      	ldr	r3, [r4, #4]
 8010942:	bf08      	it	eq
 8010944:	f8c8 1000 	streq.w	r1, [r8]
 8010948:	5162      	str	r2, [r4, r5]
 801094a:	604b      	str	r3, [r1, #4]
 801094c:	4638      	mov	r0, r7
 801094e:	f104 060b 	add.w	r6, r4, #11
 8010952:	f000 f829 	bl	80109a8 <__malloc_unlock>
 8010956:	f026 0607 	bic.w	r6, r6, #7
 801095a:	1d23      	adds	r3, r4, #4
 801095c:	1af2      	subs	r2, r6, r3
 801095e:	d0ae      	beq.n	80108be <_malloc_r+0x22>
 8010960:	1b9b      	subs	r3, r3, r6
 8010962:	50a3      	str	r3, [r4, r2]
 8010964:	e7ab      	b.n	80108be <_malloc_r+0x22>
 8010966:	42a3      	cmp	r3, r4
 8010968:	6862      	ldr	r2, [r4, #4]
 801096a:	d1dd      	bne.n	8010928 <_malloc_r+0x8c>
 801096c:	f8c8 2000 	str.w	r2, [r8]
 8010970:	e7ec      	b.n	801094c <_malloc_r+0xb0>
 8010972:	4623      	mov	r3, r4
 8010974:	6864      	ldr	r4, [r4, #4]
 8010976:	e7ac      	b.n	80108d2 <_malloc_r+0x36>
 8010978:	4634      	mov	r4, r6
 801097a:	6876      	ldr	r6, [r6, #4]
 801097c:	e7b4      	b.n	80108e8 <_malloc_r+0x4c>
 801097e:	4613      	mov	r3, r2
 8010980:	e7cc      	b.n	801091c <_malloc_r+0x80>
 8010982:	230c      	movs	r3, #12
 8010984:	603b      	str	r3, [r7, #0]
 8010986:	4638      	mov	r0, r7
 8010988:	f000 f80e 	bl	80109a8 <__malloc_unlock>
 801098c:	e797      	b.n	80108be <_malloc_r+0x22>
 801098e:	6025      	str	r5, [r4, #0]
 8010990:	e7dc      	b.n	801094c <_malloc_r+0xb0>
 8010992:	605b      	str	r3, [r3, #4]
 8010994:	deff      	udf	#255	; 0xff
 8010996:	bf00      	nop
 8010998:	200063ac 	.word	0x200063ac

0801099c <__malloc_lock>:
 801099c:	4801      	ldr	r0, [pc, #4]	; (80109a4 <__malloc_lock+0x8>)
 801099e:	f000 be22 	b.w	80115e6 <__retarget_lock_acquire_recursive>
 80109a2:	bf00      	nop
 80109a4:	200064f4 	.word	0x200064f4

080109a8 <__malloc_unlock>:
 80109a8:	4801      	ldr	r0, [pc, #4]	; (80109b0 <__malloc_unlock+0x8>)
 80109aa:	f000 be1d 	b.w	80115e8 <__retarget_lock_release_recursive>
 80109ae:	bf00      	nop
 80109b0:	200064f4 	.word	0x200064f4

080109b4 <__cvt>:
 80109b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109b8:	ec55 4b10 	vmov	r4, r5, d0
 80109bc:	2d00      	cmp	r5, #0
 80109be:	460e      	mov	r6, r1
 80109c0:	4619      	mov	r1, r3
 80109c2:	462b      	mov	r3, r5
 80109c4:	bfbb      	ittet	lt
 80109c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80109ca:	461d      	movlt	r5, r3
 80109cc:	2300      	movge	r3, #0
 80109ce:	232d      	movlt	r3, #45	; 0x2d
 80109d0:	700b      	strb	r3, [r1, #0]
 80109d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80109d8:	4691      	mov	r9, r2
 80109da:	f023 0820 	bic.w	r8, r3, #32
 80109de:	bfbc      	itt	lt
 80109e0:	4622      	movlt	r2, r4
 80109e2:	4614      	movlt	r4, r2
 80109e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80109e8:	d005      	beq.n	80109f6 <__cvt+0x42>
 80109ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80109ee:	d100      	bne.n	80109f2 <__cvt+0x3e>
 80109f0:	3601      	adds	r6, #1
 80109f2:	2102      	movs	r1, #2
 80109f4:	e000      	b.n	80109f8 <__cvt+0x44>
 80109f6:	2103      	movs	r1, #3
 80109f8:	ab03      	add	r3, sp, #12
 80109fa:	9301      	str	r3, [sp, #4]
 80109fc:	ab02      	add	r3, sp, #8
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	ec45 4b10 	vmov	d0, r4, r5
 8010a04:	4653      	mov	r3, sl
 8010a06:	4632      	mov	r2, r6
 8010a08:	f000 fe86 	bl	8011718 <_dtoa_r>
 8010a0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010a10:	4607      	mov	r7, r0
 8010a12:	d102      	bne.n	8010a1a <__cvt+0x66>
 8010a14:	f019 0f01 	tst.w	r9, #1
 8010a18:	d022      	beq.n	8010a60 <__cvt+0xac>
 8010a1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a1e:	eb07 0906 	add.w	r9, r7, r6
 8010a22:	d110      	bne.n	8010a46 <__cvt+0x92>
 8010a24:	783b      	ldrb	r3, [r7, #0]
 8010a26:	2b30      	cmp	r3, #48	; 0x30
 8010a28:	d10a      	bne.n	8010a40 <__cvt+0x8c>
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4620      	mov	r0, r4
 8010a30:	4629      	mov	r1, r5
 8010a32:	f7f0 f861 	bl	8000af8 <__aeabi_dcmpeq>
 8010a36:	b918      	cbnz	r0, 8010a40 <__cvt+0x8c>
 8010a38:	f1c6 0601 	rsb	r6, r6, #1
 8010a3c:	f8ca 6000 	str.w	r6, [sl]
 8010a40:	f8da 3000 	ldr.w	r3, [sl]
 8010a44:	4499      	add	r9, r3
 8010a46:	2200      	movs	r2, #0
 8010a48:	2300      	movs	r3, #0
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	4629      	mov	r1, r5
 8010a4e:	f7f0 f853 	bl	8000af8 <__aeabi_dcmpeq>
 8010a52:	b108      	cbz	r0, 8010a58 <__cvt+0xa4>
 8010a54:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a58:	2230      	movs	r2, #48	; 0x30
 8010a5a:	9b03      	ldr	r3, [sp, #12]
 8010a5c:	454b      	cmp	r3, r9
 8010a5e:	d307      	bcc.n	8010a70 <__cvt+0xbc>
 8010a60:	9b03      	ldr	r3, [sp, #12]
 8010a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a64:	1bdb      	subs	r3, r3, r7
 8010a66:	4638      	mov	r0, r7
 8010a68:	6013      	str	r3, [r2, #0]
 8010a6a:	b004      	add	sp, #16
 8010a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a70:	1c59      	adds	r1, r3, #1
 8010a72:	9103      	str	r1, [sp, #12]
 8010a74:	701a      	strb	r2, [r3, #0]
 8010a76:	e7f0      	b.n	8010a5a <__cvt+0xa6>

08010a78 <__exponent>:
 8010a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2900      	cmp	r1, #0
 8010a7e:	bfb8      	it	lt
 8010a80:	4249      	neglt	r1, r1
 8010a82:	f803 2b02 	strb.w	r2, [r3], #2
 8010a86:	bfb4      	ite	lt
 8010a88:	222d      	movlt	r2, #45	; 0x2d
 8010a8a:	222b      	movge	r2, #43	; 0x2b
 8010a8c:	2909      	cmp	r1, #9
 8010a8e:	7042      	strb	r2, [r0, #1]
 8010a90:	dd2a      	ble.n	8010ae8 <__exponent+0x70>
 8010a92:	f10d 0207 	add.w	r2, sp, #7
 8010a96:	4617      	mov	r7, r2
 8010a98:	260a      	movs	r6, #10
 8010a9a:	4694      	mov	ip, r2
 8010a9c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010aa0:	fb06 1415 	mls	r4, r6, r5, r1
 8010aa4:	3430      	adds	r4, #48	; 0x30
 8010aa6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010aaa:	460c      	mov	r4, r1
 8010aac:	2c63      	cmp	r4, #99	; 0x63
 8010aae:	f102 32ff 	add.w	r2, r2, #4294967295
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	dcf1      	bgt.n	8010a9a <__exponent+0x22>
 8010ab6:	3130      	adds	r1, #48	; 0x30
 8010ab8:	f1ac 0402 	sub.w	r4, ip, #2
 8010abc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010ac0:	1c41      	adds	r1, r0, #1
 8010ac2:	4622      	mov	r2, r4
 8010ac4:	42ba      	cmp	r2, r7
 8010ac6:	d30a      	bcc.n	8010ade <__exponent+0x66>
 8010ac8:	f10d 0209 	add.w	r2, sp, #9
 8010acc:	eba2 020c 	sub.w	r2, r2, ip
 8010ad0:	42bc      	cmp	r4, r7
 8010ad2:	bf88      	it	hi
 8010ad4:	2200      	movhi	r2, #0
 8010ad6:	4413      	add	r3, r2
 8010ad8:	1a18      	subs	r0, r3, r0
 8010ada:	b003      	add	sp, #12
 8010adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ade:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010ae2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010ae6:	e7ed      	b.n	8010ac4 <__exponent+0x4c>
 8010ae8:	2330      	movs	r3, #48	; 0x30
 8010aea:	3130      	adds	r1, #48	; 0x30
 8010aec:	7083      	strb	r3, [r0, #2]
 8010aee:	70c1      	strb	r1, [r0, #3]
 8010af0:	1d03      	adds	r3, r0, #4
 8010af2:	e7f1      	b.n	8010ad8 <__exponent+0x60>

08010af4 <_printf_float>:
 8010af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af8:	ed2d 8b02 	vpush	{d8}
 8010afc:	b08d      	sub	sp, #52	; 0x34
 8010afe:	460c      	mov	r4, r1
 8010b00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010b04:	4616      	mov	r6, r2
 8010b06:	461f      	mov	r7, r3
 8010b08:	4605      	mov	r5, r0
 8010b0a:	f000 fce7 	bl	80114dc <_localeconv_r>
 8010b0e:	f8d0 a000 	ldr.w	sl, [r0]
 8010b12:	4650      	mov	r0, sl
 8010b14:	f7ef fbc4 	bl	80002a0 <strlen>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	9305      	str	r3, [sp, #20]
 8010b20:	f8d8 3000 	ldr.w	r3, [r8]
 8010b24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010b28:	3307      	adds	r3, #7
 8010b2a:	f023 0307 	bic.w	r3, r3, #7
 8010b2e:	f103 0208 	add.w	r2, r3, #8
 8010b32:	f8c8 2000 	str.w	r2, [r8]
 8010b36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010b3e:	9307      	str	r3, [sp, #28]
 8010b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8010b44:	ee08 0a10 	vmov	s16, r0
 8010b48:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b50:	4b9e      	ldr	r3, [pc, #632]	; (8010dcc <_printf_float+0x2d8>)
 8010b52:	f04f 32ff 	mov.w	r2, #4294967295
 8010b56:	f7f0 f801 	bl	8000b5c <__aeabi_dcmpun>
 8010b5a:	bb88      	cbnz	r0, 8010bc0 <_printf_float+0xcc>
 8010b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b60:	4b9a      	ldr	r3, [pc, #616]	; (8010dcc <_printf_float+0x2d8>)
 8010b62:	f04f 32ff 	mov.w	r2, #4294967295
 8010b66:	f7ef ffdb 	bl	8000b20 <__aeabi_dcmple>
 8010b6a:	bb48      	cbnz	r0, 8010bc0 <_printf_float+0xcc>
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	2300      	movs	r3, #0
 8010b70:	4640      	mov	r0, r8
 8010b72:	4649      	mov	r1, r9
 8010b74:	f7ef ffca 	bl	8000b0c <__aeabi_dcmplt>
 8010b78:	b110      	cbz	r0, 8010b80 <_printf_float+0x8c>
 8010b7a:	232d      	movs	r3, #45	; 0x2d
 8010b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b80:	4a93      	ldr	r2, [pc, #588]	; (8010dd0 <_printf_float+0x2dc>)
 8010b82:	4b94      	ldr	r3, [pc, #592]	; (8010dd4 <_printf_float+0x2e0>)
 8010b84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010b88:	bf94      	ite	ls
 8010b8a:	4690      	movls	r8, r2
 8010b8c:	4698      	movhi	r8, r3
 8010b8e:	2303      	movs	r3, #3
 8010b90:	6123      	str	r3, [r4, #16]
 8010b92:	9b05      	ldr	r3, [sp, #20]
 8010b94:	f023 0304 	bic.w	r3, r3, #4
 8010b98:	6023      	str	r3, [r4, #0]
 8010b9a:	f04f 0900 	mov.w	r9, #0
 8010b9e:	9700      	str	r7, [sp, #0]
 8010ba0:	4633      	mov	r3, r6
 8010ba2:	aa0b      	add	r2, sp, #44	; 0x2c
 8010ba4:	4621      	mov	r1, r4
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f000 f9da 	bl	8010f60 <_printf_common>
 8010bac:	3001      	adds	r0, #1
 8010bae:	f040 8090 	bne.w	8010cd2 <_printf_float+0x1de>
 8010bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb6:	b00d      	add	sp, #52	; 0x34
 8010bb8:	ecbd 8b02 	vpop	{d8}
 8010bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc0:	4642      	mov	r2, r8
 8010bc2:	464b      	mov	r3, r9
 8010bc4:	4640      	mov	r0, r8
 8010bc6:	4649      	mov	r1, r9
 8010bc8:	f7ef ffc8 	bl	8000b5c <__aeabi_dcmpun>
 8010bcc:	b140      	cbz	r0, 8010be0 <_printf_float+0xec>
 8010bce:	464b      	mov	r3, r9
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	bfbc      	itt	lt
 8010bd4:	232d      	movlt	r3, #45	; 0x2d
 8010bd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010bda:	4a7f      	ldr	r2, [pc, #508]	; (8010dd8 <_printf_float+0x2e4>)
 8010bdc:	4b7f      	ldr	r3, [pc, #508]	; (8010ddc <_printf_float+0x2e8>)
 8010bde:	e7d1      	b.n	8010b84 <_printf_float+0x90>
 8010be0:	6863      	ldr	r3, [r4, #4]
 8010be2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010be6:	9206      	str	r2, [sp, #24]
 8010be8:	1c5a      	adds	r2, r3, #1
 8010bea:	d13f      	bne.n	8010c6c <_printf_float+0x178>
 8010bec:	2306      	movs	r3, #6
 8010bee:	6063      	str	r3, [r4, #4]
 8010bf0:	9b05      	ldr	r3, [sp, #20]
 8010bf2:	6861      	ldr	r1, [r4, #4]
 8010bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	9303      	str	r3, [sp, #12]
 8010bfc:	ab0a      	add	r3, sp, #40	; 0x28
 8010bfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010c02:	ab09      	add	r3, sp, #36	; 0x24
 8010c04:	ec49 8b10 	vmov	d0, r8, r9
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	6022      	str	r2, [r4, #0]
 8010c0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c10:	4628      	mov	r0, r5
 8010c12:	f7ff fecf 	bl	80109b4 <__cvt>
 8010c16:	9b06      	ldr	r3, [sp, #24]
 8010c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c1a:	2b47      	cmp	r3, #71	; 0x47
 8010c1c:	4680      	mov	r8, r0
 8010c1e:	d108      	bne.n	8010c32 <_printf_float+0x13e>
 8010c20:	1cc8      	adds	r0, r1, #3
 8010c22:	db02      	blt.n	8010c2a <_printf_float+0x136>
 8010c24:	6863      	ldr	r3, [r4, #4]
 8010c26:	4299      	cmp	r1, r3
 8010c28:	dd41      	ble.n	8010cae <_printf_float+0x1ba>
 8010c2a:	f1ab 0302 	sub.w	r3, fp, #2
 8010c2e:	fa5f fb83 	uxtb.w	fp, r3
 8010c32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010c36:	d820      	bhi.n	8010c7a <_printf_float+0x186>
 8010c38:	3901      	subs	r1, #1
 8010c3a:	465a      	mov	r2, fp
 8010c3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c40:	9109      	str	r1, [sp, #36]	; 0x24
 8010c42:	f7ff ff19 	bl	8010a78 <__exponent>
 8010c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c48:	1813      	adds	r3, r2, r0
 8010c4a:	2a01      	cmp	r2, #1
 8010c4c:	4681      	mov	r9, r0
 8010c4e:	6123      	str	r3, [r4, #16]
 8010c50:	dc02      	bgt.n	8010c58 <_printf_float+0x164>
 8010c52:	6822      	ldr	r2, [r4, #0]
 8010c54:	07d2      	lsls	r2, r2, #31
 8010c56:	d501      	bpl.n	8010c5c <_printf_float+0x168>
 8010c58:	3301      	adds	r3, #1
 8010c5a:	6123      	str	r3, [r4, #16]
 8010c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d09c      	beq.n	8010b9e <_printf_float+0xaa>
 8010c64:	232d      	movs	r3, #45	; 0x2d
 8010c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c6a:	e798      	b.n	8010b9e <_printf_float+0xaa>
 8010c6c:	9a06      	ldr	r2, [sp, #24]
 8010c6e:	2a47      	cmp	r2, #71	; 0x47
 8010c70:	d1be      	bne.n	8010bf0 <_printf_float+0xfc>
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1bc      	bne.n	8010bf0 <_printf_float+0xfc>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e7b9      	b.n	8010bee <_printf_float+0xfa>
 8010c7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010c7e:	d118      	bne.n	8010cb2 <_printf_float+0x1be>
 8010c80:	2900      	cmp	r1, #0
 8010c82:	6863      	ldr	r3, [r4, #4]
 8010c84:	dd0b      	ble.n	8010c9e <_printf_float+0x1aa>
 8010c86:	6121      	str	r1, [r4, #16]
 8010c88:	b913      	cbnz	r3, 8010c90 <_printf_float+0x19c>
 8010c8a:	6822      	ldr	r2, [r4, #0]
 8010c8c:	07d0      	lsls	r0, r2, #31
 8010c8e:	d502      	bpl.n	8010c96 <_printf_float+0x1a2>
 8010c90:	3301      	adds	r3, #1
 8010c92:	440b      	add	r3, r1
 8010c94:	6123      	str	r3, [r4, #16]
 8010c96:	65a1      	str	r1, [r4, #88]	; 0x58
 8010c98:	f04f 0900 	mov.w	r9, #0
 8010c9c:	e7de      	b.n	8010c5c <_printf_float+0x168>
 8010c9e:	b913      	cbnz	r3, 8010ca6 <_printf_float+0x1b2>
 8010ca0:	6822      	ldr	r2, [r4, #0]
 8010ca2:	07d2      	lsls	r2, r2, #31
 8010ca4:	d501      	bpl.n	8010caa <_printf_float+0x1b6>
 8010ca6:	3302      	adds	r3, #2
 8010ca8:	e7f4      	b.n	8010c94 <_printf_float+0x1a0>
 8010caa:	2301      	movs	r3, #1
 8010cac:	e7f2      	b.n	8010c94 <_printf_float+0x1a0>
 8010cae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cb4:	4299      	cmp	r1, r3
 8010cb6:	db05      	blt.n	8010cc4 <_printf_float+0x1d0>
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	6121      	str	r1, [r4, #16]
 8010cbc:	07d8      	lsls	r0, r3, #31
 8010cbe:	d5ea      	bpl.n	8010c96 <_printf_float+0x1a2>
 8010cc0:	1c4b      	adds	r3, r1, #1
 8010cc2:	e7e7      	b.n	8010c94 <_printf_float+0x1a0>
 8010cc4:	2900      	cmp	r1, #0
 8010cc6:	bfd4      	ite	le
 8010cc8:	f1c1 0202 	rsble	r2, r1, #2
 8010ccc:	2201      	movgt	r2, #1
 8010cce:	4413      	add	r3, r2
 8010cd0:	e7e0      	b.n	8010c94 <_printf_float+0x1a0>
 8010cd2:	6823      	ldr	r3, [r4, #0]
 8010cd4:	055a      	lsls	r2, r3, #21
 8010cd6:	d407      	bmi.n	8010ce8 <_printf_float+0x1f4>
 8010cd8:	6923      	ldr	r3, [r4, #16]
 8010cda:	4642      	mov	r2, r8
 8010cdc:	4631      	mov	r1, r6
 8010cde:	4628      	mov	r0, r5
 8010ce0:	47b8      	blx	r7
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	d12c      	bne.n	8010d40 <_printf_float+0x24c>
 8010ce6:	e764      	b.n	8010bb2 <_printf_float+0xbe>
 8010ce8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010cec:	f240 80e0 	bls.w	8010eb0 <_printf_float+0x3bc>
 8010cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	f7ef fefe 	bl	8000af8 <__aeabi_dcmpeq>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d034      	beq.n	8010d6a <_printf_float+0x276>
 8010d00:	4a37      	ldr	r2, [pc, #220]	; (8010de0 <_printf_float+0x2ec>)
 8010d02:	2301      	movs	r3, #1
 8010d04:	4631      	mov	r1, r6
 8010d06:	4628      	mov	r0, r5
 8010d08:	47b8      	blx	r7
 8010d0a:	3001      	adds	r0, #1
 8010d0c:	f43f af51 	beq.w	8010bb2 <_printf_float+0xbe>
 8010d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d14:	429a      	cmp	r2, r3
 8010d16:	db02      	blt.n	8010d1e <_printf_float+0x22a>
 8010d18:	6823      	ldr	r3, [r4, #0]
 8010d1a:	07d8      	lsls	r0, r3, #31
 8010d1c:	d510      	bpl.n	8010d40 <_printf_float+0x24c>
 8010d1e:	ee18 3a10 	vmov	r3, s16
 8010d22:	4652      	mov	r2, sl
 8010d24:	4631      	mov	r1, r6
 8010d26:	4628      	mov	r0, r5
 8010d28:	47b8      	blx	r7
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	f43f af41 	beq.w	8010bb2 <_printf_float+0xbe>
 8010d30:	f04f 0800 	mov.w	r8, #0
 8010d34:	f104 091a 	add.w	r9, r4, #26
 8010d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d3a:	3b01      	subs	r3, #1
 8010d3c:	4543      	cmp	r3, r8
 8010d3e:	dc09      	bgt.n	8010d54 <_printf_float+0x260>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	079b      	lsls	r3, r3, #30
 8010d44:	f100 8107 	bmi.w	8010f56 <_printf_float+0x462>
 8010d48:	68e0      	ldr	r0, [r4, #12]
 8010d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d4c:	4298      	cmp	r0, r3
 8010d4e:	bfb8      	it	lt
 8010d50:	4618      	movlt	r0, r3
 8010d52:	e730      	b.n	8010bb6 <_printf_float+0xc2>
 8010d54:	2301      	movs	r3, #1
 8010d56:	464a      	mov	r2, r9
 8010d58:	4631      	mov	r1, r6
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	47b8      	blx	r7
 8010d5e:	3001      	adds	r0, #1
 8010d60:	f43f af27 	beq.w	8010bb2 <_printf_float+0xbe>
 8010d64:	f108 0801 	add.w	r8, r8, #1
 8010d68:	e7e6      	b.n	8010d38 <_printf_float+0x244>
 8010d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	dc39      	bgt.n	8010de4 <_printf_float+0x2f0>
 8010d70:	4a1b      	ldr	r2, [pc, #108]	; (8010de0 <_printf_float+0x2ec>)
 8010d72:	2301      	movs	r3, #1
 8010d74:	4631      	mov	r1, r6
 8010d76:	4628      	mov	r0, r5
 8010d78:	47b8      	blx	r7
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	f43f af19 	beq.w	8010bb2 <_printf_float+0xbe>
 8010d80:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010d84:	4313      	orrs	r3, r2
 8010d86:	d102      	bne.n	8010d8e <_printf_float+0x29a>
 8010d88:	6823      	ldr	r3, [r4, #0]
 8010d8a:	07d9      	lsls	r1, r3, #31
 8010d8c:	d5d8      	bpl.n	8010d40 <_printf_float+0x24c>
 8010d8e:	ee18 3a10 	vmov	r3, s16
 8010d92:	4652      	mov	r2, sl
 8010d94:	4631      	mov	r1, r6
 8010d96:	4628      	mov	r0, r5
 8010d98:	47b8      	blx	r7
 8010d9a:	3001      	adds	r0, #1
 8010d9c:	f43f af09 	beq.w	8010bb2 <_printf_float+0xbe>
 8010da0:	f04f 0900 	mov.w	r9, #0
 8010da4:	f104 0a1a 	add.w	sl, r4, #26
 8010da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010daa:	425b      	negs	r3, r3
 8010dac:	454b      	cmp	r3, r9
 8010dae:	dc01      	bgt.n	8010db4 <_printf_float+0x2c0>
 8010db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db2:	e792      	b.n	8010cda <_printf_float+0x1e6>
 8010db4:	2301      	movs	r3, #1
 8010db6:	4652      	mov	r2, sl
 8010db8:	4631      	mov	r1, r6
 8010dba:	4628      	mov	r0, r5
 8010dbc:	47b8      	blx	r7
 8010dbe:	3001      	adds	r0, #1
 8010dc0:	f43f aef7 	beq.w	8010bb2 <_printf_float+0xbe>
 8010dc4:	f109 0901 	add.w	r9, r9, #1
 8010dc8:	e7ee      	b.n	8010da8 <_printf_float+0x2b4>
 8010dca:	bf00      	nop
 8010dcc:	7fefffff 	.word	0x7fefffff
 8010dd0:	080150f4 	.word	0x080150f4
 8010dd4:	080150f8 	.word	0x080150f8
 8010dd8:	080150fc 	.word	0x080150fc
 8010ddc:	08015100 	.word	0x08015100
 8010de0:	08015104 	.word	0x08015104
 8010de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010de8:	429a      	cmp	r2, r3
 8010dea:	bfa8      	it	ge
 8010dec:	461a      	movge	r2, r3
 8010dee:	2a00      	cmp	r2, #0
 8010df0:	4691      	mov	r9, r2
 8010df2:	dc37      	bgt.n	8010e64 <_printf_float+0x370>
 8010df4:	f04f 0b00 	mov.w	fp, #0
 8010df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010dfc:	f104 021a 	add.w	r2, r4, #26
 8010e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e02:	9305      	str	r3, [sp, #20]
 8010e04:	eba3 0309 	sub.w	r3, r3, r9
 8010e08:	455b      	cmp	r3, fp
 8010e0a:	dc33      	bgt.n	8010e74 <_printf_float+0x380>
 8010e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e10:	429a      	cmp	r2, r3
 8010e12:	db3b      	blt.n	8010e8c <_printf_float+0x398>
 8010e14:	6823      	ldr	r3, [r4, #0]
 8010e16:	07da      	lsls	r2, r3, #31
 8010e18:	d438      	bmi.n	8010e8c <_printf_float+0x398>
 8010e1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010e1e:	eba2 0903 	sub.w	r9, r2, r3
 8010e22:	9b05      	ldr	r3, [sp, #20]
 8010e24:	1ad2      	subs	r2, r2, r3
 8010e26:	4591      	cmp	r9, r2
 8010e28:	bfa8      	it	ge
 8010e2a:	4691      	movge	r9, r2
 8010e2c:	f1b9 0f00 	cmp.w	r9, #0
 8010e30:	dc35      	bgt.n	8010e9e <_printf_float+0x3aa>
 8010e32:	f04f 0800 	mov.w	r8, #0
 8010e36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e3a:	f104 0a1a 	add.w	sl, r4, #26
 8010e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e42:	1a9b      	subs	r3, r3, r2
 8010e44:	eba3 0309 	sub.w	r3, r3, r9
 8010e48:	4543      	cmp	r3, r8
 8010e4a:	f77f af79 	ble.w	8010d40 <_printf_float+0x24c>
 8010e4e:	2301      	movs	r3, #1
 8010e50:	4652      	mov	r2, sl
 8010e52:	4631      	mov	r1, r6
 8010e54:	4628      	mov	r0, r5
 8010e56:	47b8      	blx	r7
 8010e58:	3001      	adds	r0, #1
 8010e5a:	f43f aeaa 	beq.w	8010bb2 <_printf_float+0xbe>
 8010e5e:	f108 0801 	add.w	r8, r8, #1
 8010e62:	e7ec      	b.n	8010e3e <_printf_float+0x34a>
 8010e64:	4613      	mov	r3, r2
 8010e66:	4631      	mov	r1, r6
 8010e68:	4642      	mov	r2, r8
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	47b8      	blx	r7
 8010e6e:	3001      	adds	r0, #1
 8010e70:	d1c0      	bne.n	8010df4 <_printf_float+0x300>
 8010e72:	e69e      	b.n	8010bb2 <_printf_float+0xbe>
 8010e74:	2301      	movs	r3, #1
 8010e76:	4631      	mov	r1, r6
 8010e78:	4628      	mov	r0, r5
 8010e7a:	9205      	str	r2, [sp, #20]
 8010e7c:	47b8      	blx	r7
 8010e7e:	3001      	adds	r0, #1
 8010e80:	f43f ae97 	beq.w	8010bb2 <_printf_float+0xbe>
 8010e84:	9a05      	ldr	r2, [sp, #20]
 8010e86:	f10b 0b01 	add.w	fp, fp, #1
 8010e8a:	e7b9      	b.n	8010e00 <_printf_float+0x30c>
 8010e8c:	ee18 3a10 	vmov	r3, s16
 8010e90:	4652      	mov	r2, sl
 8010e92:	4631      	mov	r1, r6
 8010e94:	4628      	mov	r0, r5
 8010e96:	47b8      	blx	r7
 8010e98:	3001      	adds	r0, #1
 8010e9a:	d1be      	bne.n	8010e1a <_printf_float+0x326>
 8010e9c:	e689      	b.n	8010bb2 <_printf_float+0xbe>
 8010e9e:	9a05      	ldr	r2, [sp, #20]
 8010ea0:	464b      	mov	r3, r9
 8010ea2:	4442      	add	r2, r8
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	47b8      	blx	r7
 8010eaa:	3001      	adds	r0, #1
 8010eac:	d1c1      	bne.n	8010e32 <_printf_float+0x33e>
 8010eae:	e680      	b.n	8010bb2 <_printf_float+0xbe>
 8010eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010eb2:	2a01      	cmp	r2, #1
 8010eb4:	dc01      	bgt.n	8010eba <_printf_float+0x3c6>
 8010eb6:	07db      	lsls	r3, r3, #31
 8010eb8:	d53a      	bpl.n	8010f30 <_printf_float+0x43c>
 8010eba:	2301      	movs	r3, #1
 8010ebc:	4642      	mov	r2, r8
 8010ebe:	4631      	mov	r1, r6
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	47b8      	blx	r7
 8010ec4:	3001      	adds	r0, #1
 8010ec6:	f43f ae74 	beq.w	8010bb2 <_printf_float+0xbe>
 8010eca:	ee18 3a10 	vmov	r3, s16
 8010ece:	4652      	mov	r2, sl
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	47b8      	blx	r7
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	f43f ae6b 	beq.w	8010bb2 <_printf_float+0xbe>
 8010edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010ee8:	f7ef fe06 	bl	8000af8 <__aeabi_dcmpeq>
 8010eec:	b9d8      	cbnz	r0, 8010f26 <_printf_float+0x432>
 8010eee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010ef2:	f108 0201 	add.w	r2, r8, #1
 8010ef6:	4631      	mov	r1, r6
 8010ef8:	4628      	mov	r0, r5
 8010efa:	47b8      	blx	r7
 8010efc:	3001      	adds	r0, #1
 8010efe:	d10e      	bne.n	8010f1e <_printf_float+0x42a>
 8010f00:	e657      	b.n	8010bb2 <_printf_float+0xbe>
 8010f02:	2301      	movs	r3, #1
 8010f04:	4652      	mov	r2, sl
 8010f06:	4631      	mov	r1, r6
 8010f08:	4628      	mov	r0, r5
 8010f0a:	47b8      	blx	r7
 8010f0c:	3001      	adds	r0, #1
 8010f0e:	f43f ae50 	beq.w	8010bb2 <_printf_float+0xbe>
 8010f12:	f108 0801 	add.w	r8, r8, #1
 8010f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	4543      	cmp	r3, r8
 8010f1c:	dcf1      	bgt.n	8010f02 <_printf_float+0x40e>
 8010f1e:	464b      	mov	r3, r9
 8010f20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f24:	e6da      	b.n	8010cdc <_printf_float+0x1e8>
 8010f26:	f04f 0800 	mov.w	r8, #0
 8010f2a:	f104 0a1a 	add.w	sl, r4, #26
 8010f2e:	e7f2      	b.n	8010f16 <_printf_float+0x422>
 8010f30:	2301      	movs	r3, #1
 8010f32:	4642      	mov	r2, r8
 8010f34:	e7df      	b.n	8010ef6 <_printf_float+0x402>
 8010f36:	2301      	movs	r3, #1
 8010f38:	464a      	mov	r2, r9
 8010f3a:	4631      	mov	r1, r6
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	47b8      	blx	r7
 8010f40:	3001      	adds	r0, #1
 8010f42:	f43f ae36 	beq.w	8010bb2 <_printf_float+0xbe>
 8010f46:	f108 0801 	add.w	r8, r8, #1
 8010f4a:	68e3      	ldr	r3, [r4, #12]
 8010f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f4e:	1a5b      	subs	r3, r3, r1
 8010f50:	4543      	cmp	r3, r8
 8010f52:	dcf0      	bgt.n	8010f36 <_printf_float+0x442>
 8010f54:	e6f8      	b.n	8010d48 <_printf_float+0x254>
 8010f56:	f04f 0800 	mov.w	r8, #0
 8010f5a:	f104 0919 	add.w	r9, r4, #25
 8010f5e:	e7f4      	b.n	8010f4a <_printf_float+0x456>

08010f60 <_printf_common>:
 8010f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f64:	4616      	mov	r6, r2
 8010f66:	4699      	mov	r9, r3
 8010f68:	688a      	ldr	r2, [r1, #8]
 8010f6a:	690b      	ldr	r3, [r1, #16]
 8010f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f70:	4293      	cmp	r3, r2
 8010f72:	bfb8      	it	lt
 8010f74:	4613      	movlt	r3, r2
 8010f76:	6033      	str	r3, [r6, #0]
 8010f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f7c:	4607      	mov	r7, r0
 8010f7e:	460c      	mov	r4, r1
 8010f80:	b10a      	cbz	r2, 8010f86 <_printf_common+0x26>
 8010f82:	3301      	adds	r3, #1
 8010f84:	6033      	str	r3, [r6, #0]
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	0699      	lsls	r1, r3, #26
 8010f8a:	bf42      	ittt	mi
 8010f8c:	6833      	ldrmi	r3, [r6, #0]
 8010f8e:	3302      	addmi	r3, #2
 8010f90:	6033      	strmi	r3, [r6, #0]
 8010f92:	6825      	ldr	r5, [r4, #0]
 8010f94:	f015 0506 	ands.w	r5, r5, #6
 8010f98:	d106      	bne.n	8010fa8 <_printf_common+0x48>
 8010f9a:	f104 0a19 	add.w	sl, r4, #25
 8010f9e:	68e3      	ldr	r3, [r4, #12]
 8010fa0:	6832      	ldr	r2, [r6, #0]
 8010fa2:	1a9b      	subs	r3, r3, r2
 8010fa4:	42ab      	cmp	r3, r5
 8010fa6:	dc26      	bgt.n	8010ff6 <_printf_common+0x96>
 8010fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010fac:	1e13      	subs	r3, r2, #0
 8010fae:	6822      	ldr	r2, [r4, #0]
 8010fb0:	bf18      	it	ne
 8010fb2:	2301      	movne	r3, #1
 8010fb4:	0692      	lsls	r2, r2, #26
 8010fb6:	d42b      	bmi.n	8011010 <_printf_common+0xb0>
 8010fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010fbc:	4649      	mov	r1, r9
 8010fbe:	4638      	mov	r0, r7
 8010fc0:	47c0      	blx	r8
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	d01e      	beq.n	8011004 <_printf_common+0xa4>
 8010fc6:	6823      	ldr	r3, [r4, #0]
 8010fc8:	6922      	ldr	r2, [r4, #16]
 8010fca:	f003 0306 	and.w	r3, r3, #6
 8010fce:	2b04      	cmp	r3, #4
 8010fd0:	bf02      	ittt	eq
 8010fd2:	68e5      	ldreq	r5, [r4, #12]
 8010fd4:	6833      	ldreq	r3, [r6, #0]
 8010fd6:	1aed      	subeq	r5, r5, r3
 8010fd8:	68a3      	ldr	r3, [r4, #8]
 8010fda:	bf0c      	ite	eq
 8010fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fe0:	2500      	movne	r5, #0
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	bfc4      	itt	gt
 8010fe6:	1a9b      	subgt	r3, r3, r2
 8010fe8:	18ed      	addgt	r5, r5, r3
 8010fea:	2600      	movs	r6, #0
 8010fec:	341a      	adds	r4, #26
 8010fee:	42b5      	cmp	r5, r6
 8010ff0:	d11a      	bne.n	8011028 <_printf_common+0xc8>
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	e008      	b.n	8011008 <_printf_common+0xa8>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	4652      	mov	r2, sl
 8010ffa:	4649      	mov	r1, r9
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	47c0      	blx	r8
 8011000:	3001      	adds	r0, #1
 8011002:	d103      	bne.n	801100c <_printf_common+0xac>
 8011004:	f04f 30ff 	mov.w	r0, #4294967295
 8011008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801100c:	3501      	adds	r5, #1
 801100e:	e7c6      	b.n	8010f9e <_printf_common+0x3e>
 8011010:	18e1      	adds	r1, r4, r3
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	2030      	movs	r0, #48	; 0x30
 8011016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801101a:	4422      	add	r2, r4
 801101c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011024:	3302      	adds	r3, #2
 8011026:	e7c7      	b.n	8010fb8 <_printf_common+0x58>
 8011028:	2301      	movs	r3, #1
 801102a:	4622      	mov	r2, r4
 801102c:	4649      	mov	r1, r9
 801102e:	4638      	mov	r0, r7
 8011030:	47c0      	blx	r8
 8011032:	3001      	adds	r0, #1
 8011034:	d0e6      	beq.n	8011004 <_printf_common+0xa4>
 8011036:	3601      	adds	r6, #1
 8011038:	e7d9      	b.n	8010fee <_printf_common+0x8e>
	...

0801103c <_printf_i>:
 801103c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011040:	7e0f      	ldrb	r7, [r1, #24]
 8011042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011044:	2f78      	cmp	r7, #120	; 0x78
 8011046:	4691      	mov	r9, r2
 8011048:	4680      	mov	r8, r0
 801104a:	460c      	mov	r4, r1
 801104c:	469a      	mov	sl, r3
 801104e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011052:	d807      	bhi.n	8011064 <_printf_i+0x28>
 8011054:	2f62      	cmp	r7, #98	; 0x62
 8011056:	d80a      	bhi.n	801106e <_printf_i+0x32>
 8011058:	2f00      	cmp	r7, #0
 801105a:	f000 80d4 	beq.w	8011206 <_printf_i+0x1ca>
 801105e:	2f58      	cmp	r7, #88	; 0x58
 8011060:	f000 80c0 	beq.w	80111e4 <_printf_i+0x1a8>
 8011064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801106c:	e03a      	b.n	80110e4 <_printf_i+0xa8>
 801106e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011072:	2b15      	cmp	r3, #21
 8011074:	d8f6      	bhi.n	8011064 <_printf_i+0x28>
 8011076:	a101      	add	r1, pc, #4	; (adr r1, 801107c <_printf_i+0x40>)
 8011078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801107c:	080110d5 	.word	0x080110d5
 8011080:	080110e9 	.word	0x080110e9
 8011084:	08011065 	.word	0x08011065
 8011088:	08011065 	.word	0x08011065
 801108c:	08011065 	.word	0x08011065
 8011090:	08011065 	.word	0x08011065
 8011094:	080110e9 	.word	0x080110e9
 8011098:	08011065 	.word	0x08011065
 801109c:	08011065 	.word	0x08011065
 80110a0:	08011065 	.word	0x08011065
 80110a4:	08011065 	.word	0x08011065
 80110a8:	080111ed 	.word	0x080111ed
 80110ac:	08011115 	.word	0x08011115
 80110b0:	080111a7 	.word	0x080111a7
 80110b4:	08011065 	.word	0x08011065
 80110b8:	08011065 	.word	0x08011065
 80110bc:	0801120f 	.word	0x0801120f
 80110c0:	08011065 	.word	0x08011065
 80110c4:	08011115 	.word	0x08011115
 80110c8:	08011065 	.word	0x08011065
 80110cc:	08011065 	.word	0x08011065
 80110d0:	080111af 	.word	0x080111af
 80110d4:	682b      	ldr	r3, [r5, #0]
 80110d6:	1d1a      	adds	r2, r3, #4
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	602a      	str	r2, [r5, #0]
 80110dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80110e4:	2301      	movs	r3, #1
 80110e6:	e09f      	b.n	8011228 <_printf_i+0x1ec>
 80110e8:	6820      	ldr	r0, [r4, #0]
 80110ea:	682b      	ldr	r3, [r5, #0]
 80110ec:	0607      	lsls	r7, r0, #24
 80110ee:	f103 0104 	add.w	r1, r3, #4
 80110f2:	6029      	str	r1, [r5, #0]
 80110f4:	d501      	bpl.n	80110fa <_printf_i+0xbe>
 80110f6:	681e      	ldr	r6, [r3, #0]
 80110f8:	e003      	b.n	8011102 <_printf_i+0xc6>
 80110fa:	0646      	lsls	r6, r0, #25
 80110fc:	d5fb      	bpl.n	80110f6 <_printf_i+0xba>
 80110fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011102:	2e00      	cmp	r6, #0
 8011104:	da03      	bge.n	801110e <_printf_i+0xd2>
 8011106:	232d      	movs	r3, #45	; 0x2d
 8011108:	4276      	negs	r6, r6
 801110a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801110e:	485a      	ldr	r0, [pc, #360]	; (8011278 <_printf_i+0x23c>)
 8011110:	230a      	movs	r3, #10
 8011112:	e012      	b.n	801113a <_printf_i+0xfe>
 8011114:	682b      	ldr	r3, [r5, #0]
 8011116:	6820      	ldr	r0, [r4, #0]
 8011118:	1d19      	adds	r1, r3, #4
 801111a:	6029      	str	r1, [r5, #0]
 801111c:	0605      	lsls	r5, r0, #24
 801111e:	d501      	bpl.n	8011124 <_printf_i+0xe8>
 8011120:	681e      	ldr	r6, [r3, #0]
 8011122:	e002      	b.n	801112a <_printf_i+0xee>
 8011124:	0641      	lsls	r1, r0, #25
 8011126:	d5fb      	bpl.n	8011120 <_printf_i+0xe4>
 8011128:	881e      	ldrh	r6, [r3, #0]
 801112a:	4853      	ldr	r0, [pc, #332]	; (8011278 <_printf_i+0x23c>)
 801112c:	2f6f      	cmp	r7, #111	; 0x6f
 801112e:	bf0c      	ite	eq
 8011130:	2308      	moveq	r3, #8
 8011132:	230a      	movne	r3, #10
 8011134:	2100      	movs	r1, #0
 8011136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801113a:	6865      	ldr	r5, [r4, #4]
 801113c:	60a5      	str	r5, [r4, #8]
 801113e:	2d00      	cmp	r5, #0
 8011140:	bfa2      	ittt	ge
 8011142:	6821      	ldrge	r1, [r4, #0]
 8011144:	f021 0104 	bicge.w	r1, r1, #4
 8011148:	6021      	strge	r1, [r4, #0]
 801114a:	b90e      	cbnz	r6, 8011150 <_printf_i+0x114>
 801114c:	2d00      	cmp	r5, #0
 801114e:	d04b      	beq.n	80111e8 <_printf_i+0x1ac>
 8011150:	4615      	mov	r5, r2
 8011152:	fbb6 f1f3 	udiv	r1, r6, r3
 8011156:	fb03 6711 	mls	r7, r3, r1, r6
 801115a:	5dc7      	ldrb	r7, [r0, r7]
 801115c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011160:	4637      	mov	r7, r6
 8011162:	42bb      	cmp	r3, r7
 8011164:	460e      	mov	r6, r1
 8011166:	d9f4      	bls.n	8011152 <_printf_i+0x116>
 8011168:	2b08      	cmp	r3, #8
 801116a:	d10b      	bne.n	8011184 <_printf_i+0x148>
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	07de      	lsls	r6, r3, #31
 8011170:	d508      	bpl.n	8011184 <_printf_i+0x148>
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	6861      	ldr	r1, [r4, #4]
 8011176:	4299      	cmp	r1, r3
 8011178:	bfde      	ittt	le
 801117a:	2330      	movle	r3, #48	; 0x30
 801117c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011184:	1b52      	subs	r2, r2, r5
 8011186:	6122      	str	r2, [r4, #16]
 8011188:	f8cd a000 	str.w	sl, [sp]
 801118c:	464b      	mov	r3, r9
 801118e:	aa03      	add	r2, sp, #12
 8011190:	4621      	mov	r1, r4
 8011192:	4640      	mov	r0, r8
 8011194:	f7ff fee4 	bl	8010f60 <_printf_common>
 8011198:	3001      	adds	r0, #1
 801119a:	d14a      	bne.n	8011232 <_printf_i+0x1f6>
 801119c:	f04f 30ff 	mov.w	r0, #4294967295
 80111a0:	b004      	add	sp, #16
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	6823      	ldr	r3, [r4, #0]
 80111a8:	f043 0320 	orr.w	r3, r3, #32
 80111ac:	6023      	str	r3, [r4, #0]
 80111ae:	4833      	ldr	r0, [pc, #204]	; (801127c <_printf_i+0x240>)
 80111b0:	2778      	movs	r7, #120	; 0x78
 80111b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	6829      	ldr	r1, [r5, #0]
 80111ba:	061f      	lsls	r7, r3, #24
 80111bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80111c0:	d402      	bmi.n	80111c8 <_printf_i+0x18c>
 80111c2:	065f      	lsls	r7, r3, #25
 80111c4:	bf48      	it	mi
 80111c6:	b2b6      	uxthmi	r6, r6
 80111c8:	07df      	lsls	r7, r3, #31
 80111ca:	bf48      	it	mi
 80111cc:	f043 0320 	orrmi.w	r3, r3, #32
 80111d0:	6029      	str	r1, [r5, #0]
 80111d2:	bf48      	it	mi
 80111d4:	6023      	strmi	r3, [r4, #0]
 80111d6:	b91e      	cbnz	r6, 80111e0 <_printf_i+0x1a4>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	f023 0320 	bic.w	r3, r3, #32
 80111de:	6023      	str	r3, [r4, #0]
 80111e0:	2310      	movs	r3, #16
 80111e2:	e7a7      	b.n	8011134 <_printf_i+0xf8>
 80111e4:	4824      	ldr	r0, [pc, #144]	; (8011278 <_printf_i+0x23c>)
 80111e6:	e7e4      	b.n	80111b2 <_printf_i+0x176>
 80111e8:	4615      	mov	r5, r2
 80111ea:	e7bd      	b.n	8011168 <_printf_i+0x12c>
 80111ec:	682b      	ldr	r3, [r5, #0]
 80111ee:	6826      	ldr	r6, [r4, #0]
 80111f0:	6961      	ldr	r1, [r4, #20]
 80111f2:	1d18      	adds	r0, r3, #4
 80111f4:	6028      	str	r0, [r5, #0]
 80111f6:	0635      	lsls	r5, r6, #24
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	d501      	bpl.n	8011200 <_printf_i+0x1c4>
 80111fc:	6019      	str	r1, [r3, #0]
 80111fe:	e002      	b.n	8011206 <_printf_i+0x1ca>
 8011200:	0670      	lsls	r0, r6, #25
 8011202:	d5fb      	bpl.n	80111fc <_printf_i+0x1c0>
 8011204:	8019      	strh	r1, [r3, #0]
 8011206:	2300      	movs	r3, #0
 8011208:	6123      	str	r3, [r4, #16]
 801120a:	4615      	mov	r5, r2
 801120c:	e7bc      	b.n	8011188 <_printf_i+0x14c>
 801120e:	682b      	ldr	r3, [r5, #0]
 8011210:	1d1a      	adds	r2, r3, #4
 8011212:	602a      	str	r2, [r5, #0]
 8011214:	681d      	ldr	r5, [r3, #0]
 8011216:	6862      	ldr	r2, [r4, #4]
 8011218:	2100      	movs	r1, #0
 801121a:	4628      	mov	r0, r5
 801121c:	f7ee fff0 	bl	8000200 <memchr>
 8011220:	b108      	cbz	r0, 8011226 <_printf_i+0x1ea>
 8011222:	1b40      	subs	r0, r0, r5
 8011224:	6060      	str	r0, [r4, #4]
 8011226:	6863      	ldr	r3, [r4, #4]
 8011228:	6123      	str	r3, [r4, #16]
 801122a:	2300      	movs	r3, #0
 801122c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011230:	e7aa      	b.n	8011188 <_printf_i+0x14c>
 8011232:	6923      	ldr	r3, [r4, #16]
 8011234:	462a      	mov	r2, r5
 8011236:	4649      	mov	r1, r9
 8011238:	4640      	mov	r0, r8
 801123a:	47d0      	blx	sl
 801123c:	3001      	adds	r0, #1
 801123e:	d0ad      	beq.n	801119c <_printf_i+0x160>
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	079b      	lsls	r3, r3, #30
 8011244:	d413      	bmi.n	801126e <_printf_i+0x232>
 8011246:	68e0      	ldr	r0, [r4, #12]
 8011248:	9b03      	ldr	r3, [sp, #12]
 801124a:	4298      	cmp	r0, r3
 801124c:	bfb8      	it	lt
 801124e:	4618      	movlt	r0, r3
 8011250:	e7a6      	b.n	80111a0 <_printf_i+0x164>
 8011252:	2301      	movs	r3, #1
 8011254:	4632      	mov	r2, r6
 8011256:	4649      	mov	r1, r9
 8011258:	4640      	mov	r0, r8
 801125a:	47d0      	blx	sl
 801125c:	3001      	adds	r0, #1
 801125e:	d09d      	beq.n	801119c <_printf_i+0x160>
 8011260:	3501      	adds	r5, #1
 8011262:	68e3      	ldr	r3, [r4, #12]
 8011264:	9903      	ldr	r1, [sp, #12]
 8011266:	1a5b      	subs	r3, r3, r1
 8011268:	42ab      	cmp	r3, r5
 801126a:	dcf2      	bgt.n	8011252 <_printf_i+0x216>
 801126c:	e7eb      	b.n	8011246 <_printf_i+0x20a>
 801126e:	2500      	movs	r5, #0
 8011270:	f104 0619 	add.w	r6, r4, #25
 8011274:	e7f5      	b.n	8011262 <_printf_i+0x226>
 8011276:	bf00      	nop
 8011278:	08015106 	.word	0x08015106
 801127c:	08015117 	.word	0x08015117

08011280 <std>:
 8011280:	2300      	movs	r3, #0
 8011282:	b510      	push	{r4, lr}
 8011284:	4604      	mov	r4, r0
 8011286:	e9c0 3300 	strd	r3, r3, [r0]
 801128a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801128e:	6083      	str	r3, [r0, #8]
 8011290:	8181      	strh	r1, [r0, #12]
 8011292:	6643      	str	r3, [r0, #100]	; 0x64
 8011294:	81c2      	strh	r2, [r0, #14]
 8011296:	6183      	str	r3, [r0, #24]
 8011298:	4619      	mov	r1, r3
 801129a:	2208      	movs	r2, #8
 801129c:	305c      	adds	r0, #92	; 0x5c
 801129e:	f000 f914 	bl	80114ca <memset>
 80112a2:	4b0d      	ldr	r3, [pc, #52]	; (80112d8 <std+0x58>)
 80112a4:	6263      	str	r3, [r4, #36]	; 0x24
 80112a6:	4b0d      	ldr	r3, [pc, #52]	; (80112dc <std+0x5c>)
 80112a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80112aa:	4b0d      	ldr	r3, [pc, #52]	; (80112e0 <std+0x60>)
 80112ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112ae:	4b0d      	ldr	r3, [pc, #52]	; (80112e4 <std+0x64>)
 80112b0:	6323      	str	r3, [r4, #48]	; 0x30
 80112b2:	4b0d      	ldr	r3, [pc, #52]	; (80112e8 <std+0x68>)
 80112b4:	6224      	str	r4, [r4, #32]
 80112b6:	429c      	cmp	r4, r3
 80112b8:	d006      	beq.n	80112c8 <std+0x48>
 80112ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80112be:	4294      	cmp	r4, r2
 80112c0:	d002      	beq.n	80112c8 <std+0x48>
 80112c2:	33d0      	adds	r3, #208	; 0xd0
 80112c4:	429c      	cmp	r4, r3
 80112c6:	d105      	bne.n	80112d4 <std+0x54>
 80112c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80112cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112d0:	f000 b988 	b.w	80115e4 <__retarget_lock_init_recursive>
 80112d4:	bd10      	pop	{r4, pc}
 80112d6:	bf00      	nop
 80112d8:	08011445 	.word	0x08011445
 80112dc:	08011467 	.word	0x08011467
 80112e0:	0801149f 	.word	0x0801149f
 80112e4:	080114c3 	.word	0x080114c3
 80112e8:	200063b4 	.word	0x200063b4

080112ec <stdio_exit_handler>:
 80112ec:	4a02      	ldr	r2, [pc, #8]	; (80112f8 <stdio_exit_handler+0xc>)
 80112ee:	4903      	ldr	r1, [pc, #12]	; (80112fc <stdio_exit_handler+0x10>)
 80112f0:	4803      	ldr	r0, [pc, #12]	; (8011300 <stdio_exit_handler+0x14>)
 80112f2:	f000 b869 	b.w	80113c8 <_fwalk_sglue>
 80112f6:	bf00      	nop
 80112f8:	2000006c 	.word	0x2000006c
 80112fc:	08012e49 	.word	0x08012e49
 8011300:	20000078 	.word	0x20000078

08011304 <cleanup_stdio>:
 8011304:	6841      	ldr	r1, [r0, #4]
 8011306:	4b0c      	ldr	r3, [pc, #48]	; (8011338 <cleanup_stdio+0x34>)
 8011308:	4299      	cmp	r1, r3
 801130a:	b510      	push	{r4, lr}
 801130c:	4604      	mov	r4, r0
 801130e:	d001      	beq.n	8011314 <cleanup_stdio+0x10>
 8011310:	f001 fd9a 	bl	8012e48 <_fflush_r>
 8011314:	68a1      	ldr	r1, [r4, #8]
 8011316:	4b09      	ldr	r3, [pc, #36]	; (801133c <cleanup_stdio+0x38>)
 8011318:	4299      	cmp	r1, r3
 801131a:	d002      	beq.n	8011322 <cleanup_stdio+0x1e>
 801131c:	4620      	mov	r0, r4
 801131e:	f001 fd93 	bl	8012e48 <_fflush_r>
 8011322:	68e1      	ldr	r1, [r4, #12]
 8011324:	4b06      	ldr	r3, [pc, #24]	; (8011340 <cleanup_stdio+0x3c>)
 8011326:	4299      	cmp	r1, r3
 8011328:	d004      	beq.n	8011334 <cleanup_stdio+0x30>
 801132a:	4620      	mov	r0, r4
 801132c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011330:	f001 bd8a 	b.w	8012e48 <_fflush_r>
 8011334:	bd10      	pop	{r4, pc}
 8011336:	bf00      	nop
 8011338:	200063b4 	.word	0x200063b4
 801133c:	2000641c 	.word	0x2000641c
 8011340:	20006484 	.word	0x20006484

08011344 <global_stdio_init.part.0>:
 8011344:	b510      	push	{r4, lr}
 8011346:	4b0b      	ldr	r3, [pc, #44]	; (8011374 <global_stdio_init.part.0+0x30>)
 8011348:	4c0b      	ldr	r4, [pc, #44]	; (8011378 <global_stdio_init.part.0+0x34>)
 801134a:	4a0c      	ldr	r2, [pc, #48]	; (801137c <global_stdio_init.part.0+0x38>)
 801134c:	601a      	str	r2, [r3, #0]
 801134e:	4620      	mov	r0, r4
 8011350:	2200      	movs	r2, #0
 8011352:	2104      	movs	r1, #4
 8011354:	f7ff ff94 	bl	8011280 <std>
 8011358:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801135c:	2201      	movs	r2, #1
 801135e:	2109      	movs	r1, #9
 8011360:	f7ff ff8e 	bl	8011280 <std>
 8011364:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011368:	2202      	movs	r2, #2
 801136a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801136e:	2112      	movs	r1, #18
 8011370:	f7ff bf86 	b.w	8011280 <std>
 8011374:	200064ec 	.word	0x200064ec
 8011378:	200063b4 	.word	0x200063b4
 801137c:	080112ed 	.word	0x080112ed

08011380 <__sfp_lock_acquire>:
 8011380:	4801      	ldr	r0, [pc, #4]	; (8011388 <__sfp_lock_acquire+0x8>)
 8011382:	f000 b930 	b.w	80115e6 <__retarget_lock_acquire_recursive>
 8011386:	bf00      	nop
 8011388:	200064f5 	.word	0x200064f5

0801138c <__sfp_lock_release>:
 801138c:	4801      	ldr	r0, [pc, #4]	; (8011394 <__sfp_lock_release+0x8>)
 801138e:	f000 b92b 	b.w	80115e8 <__retarget_lock_release_recursive>
 8011392:	bf00      	nop
 8011394:	200064f5 	.word	0x200064f5

08011398 <__sinit>:
 8011398:	b510      	push	{r4, lr}
 801139a:	4604      	mov	r4, r0
 801139c:	f7ff fff0 	bl	8011380 <__sfp_lock_acquire>
 80113a0:	6a23      	ldr	r3, [r4, #32]
 80113a2:	b11b      	cbz	r3, 80113ac <__sinit+0x14>
 80113a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a8:	f7ff bff0 	b.w	801138c <__sfp_lock_release>
 80113ac:	4b04      	ldr	r3, [pc, #16]	; (80113c0 <__sinit+0x28>)
 80113ae:	6223      	str	r3, [r4, #32]
 80113b0:	4b04      	ldr	r3, [pc, #16]	; (80113c4 <__sinit+0x2c>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1f5      	bne.n	80113a4 <__sinit+0xc>
 80113b8:	f7ff ffc4 	bl	8011344 <global_stdio_init.part.0>
 80113bc:	e7f2      	b.n	80113a4 <__sinit+0xc>
 80113be:	bf00      	nop
 80113c0:	08011305 	.word	0x08011305
 80113c4:	200064ec 	.word	0x200064ec

080113c8 <_fwalk_sglue>:
 80113c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113cc:	4607      	mov	r7, r0
 80113ce:	4688      	mov	r8, r1
 80113d0:	4614      	mov	r4, r2
 80113d2:	2600      	movs	r6, #0
 80113d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113d8:	f1b9 0901 	subs.w	r9, r9, #1
 80113dc:	d505      	bpl.n	80113ea <_fwalk_sglue+0x22>
 80113de:	6824      	ldr	r4, [r4, #0]
 80113e0:	2c00      	cmp	r4, #0
 80113e2:	d1f7      	bne.n	80113d4 <_fwalk_sglue+0xc>
 80113e4:	4630      	mov	r0, r6
 80113e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ea:	89ab      	ldrh	r3, [r5, #12]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d907      	bls.n	8011400 <_fwalk_sglue+0x38>
 80113f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113f4:	3301      	adds	r3, #1
 80113f6:	d003      	beq.n	8011400 <_fwalk_sglue+0x38>
 80113f8:	4629      	mov	r1, r5
 80113fa:	4638      	mov	r0, r7
 80113fc:	47c0      	blx	r8
 80113fe:	4306      	orrs	r6, r0
 8011400:	3568      	adds	r5, #104	; 0x68
 8011402:	e7e9      	b.n	80113d8 <_fwalk_sglue+0x10>

08011404 <siprintf>:
 8011404:	b40e      	push	{r1, r2, r3}
 8011406:	b500      	push	{lr}
 8011408:	b09c      	sub	sp, #112	; 0x70
 801140a:	ab1d      	add	r3, sp, #116	; 0x74
 801140c:	9002      	str	r0, [sp, #8]
 801140e:	9006      	str	r0, [sp, #24]
 8011410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011414:	4809      	ldr	r0, [pc, #36]	; (801143c <siprintf+0x38>)
 8011416:	9107      	str	r1, [sp, #28]
 8011418:	9104      	str	r1, [sp, #16]
 801141a:	4909      	ldr	r1, [pc, #36]	; (8011440 <siprintf+0x3c>)
 801141c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011420:	9105      	str	r1, [sp, #20]
 8011422:	6800      	ldr	r0, [r0, #0]
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	a902      	add	r1, sp, #8
 8011428:	f001 fb8a 	bl	8012b40 <_svfiprintf_r>
 801142c:	9b02      	ldr	r3, [sp, #8]
 801142e:	2200      	movs	r2, #0
 8011430:	701a      	strb	r2, [r3, #0]
 8011432:	b01c      	add	sp, #112	; 0x70
 8011434:	f85d eb04 	ldr.w	lr, [sp], #4
 8011438:	b003      	add	sp, #12
 801143a:	4770      	bx	lr
 801143c:	200000c4 	.word	0x200000c4
 8011440:	ffff0208 	.word	0xffff0208

08011444 <__sread>:
 8011444:	b510      	push	{r4, lr}
 8011446:	460c      	mov	r4, r1
 8011448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801144c:	f000 f86c 	bl	8011528 <_read_r>
 8011450:	2800      	cmp	r0, #0
 8011452:	bfab      	itete	ge
 8011454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011456:	89a3      	ldrhlt	r3, [r4, #12]
 8011458:	181b      	addge	r3, r3, r0
 801145a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801145e:	bfac      	ite	ge
 8011460:	6563      	strge	r3, [r4, #84]	; 0x54
 8011462:	81a3      	strhlt	r3, [r4, #12]
 8011464:	bd10      	pop	{r4, pc}

08011466 <__swrite>:
 8011466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801146a:	461f      	mov	r7, r3
 801146c:	898b      	ldrh	r3, [r1, #12]
 801146e:	05db      	lsls	r3, r3, #23
 8011470:	4605      	mov	r5, r0
 8011472:	460c      	mov	r4, r1
 8011474:	4616      	mov	r6, r2
 8011476:	d505      	bpl.n	8011484 <__swrite+0x1e>
 8011478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801147c:	2302      	movs	r3, #2
 801147e:	2200      	movs	r2, #0
 8011480:	f000 f840 	bl	8011504 <_lseek_r>
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801148a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801148e:	81a3      	strh	r3, [r4, #12]
 8011490:	4632      	mov	r2, r6
 8011492:	463b      	mov	r3, r7
 8011494:	4628      	mov	r0, r5
 8011496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801149a:	f000 b867 	b.w	801156c <_write_r>

0801149e <__sseek>:
 801149e:	b510      	push	{r4, lr}
 80114a0:	460c      	mov	r4, r1
 80114a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114a6:	f000 f82d 	bl	8011504 <_lseek_r>
 80114aa:	1c43      	adds	r3, r0, #1
 80114ac:	89a3      	ldrh	r3, [r4, #12]
 80114ae:	bf15      	itete	ne
 80114b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80114b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80114b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80114ba:	81a3      	strheq	r3, [r4, #12]
 80114bc:	bf18      	it	ne
 80114be:	81a3      	strhne	r3, [r4, #12]
 80114c0:	bd10      	pop	{r4, pc}

080114c2 <__sclose>:
 80114c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114c6:	f000 b80d 	b.w	80114e4 <_close_r>

080114ca <memset>:
 80114ca:	4402      	add	r2, r0
 80114cc:	4603      	mov	r3, r0
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d100      	bne.n	80114d4 <memset+0xa>
 80114d2:	4770      	bx	lr
 80114d4:	f803 1b01 	strb.w	r1, [r3], #1
 80114d8:	e7f9      	b.n	80114ce <memset+0x4>
	...

080114dc <_localeconv_r>:
 80114dc:	4800      	ldr	r0, [pc, #0]	; (80114e0 <_localeconv_r+0x4>)
 80114de:	4770      	bx	lr
 80114e0:	200001b8 	.word	0x200001b8

080114e4 <_close_r>:
 80114e4:	b538      	push	{r3, r4, r5, lr}
 80114e6:	4d06      	ldr	r5, [pc, #24]	; (8011500 <_close_r+0x1c>)
 80114e8:	2300      	movs	r3, #0
 80114ea:	4604      	mov	r4, r0
 80114ec:	4608      	mov	r0, r1
 80114ee:	602b      	str	r3, [r5, #0]
 80114f0:	f7f4 fedd 	bl	80062ae <_close>
 80114f4:	1c43      	adds	r3, r0, #1
 80114f6:	d102      	bne.n	80114fe <_close_r+0x1a>
 80114f8:	682b      	ldr	r3, [r5, #0]
 80114fa:	b103      	cbz	r3, 80114fe <_close_r+0x1a>
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	bd38      	pop	{r3, r4, r5, pc}
 8011500:	200064f0 	.word	0x200064f0

08011504 <_lseek_r>:
 8011504:	b538      	push	{r3, r4, r5, lr}
 8011506:	4d07      	ldr	r5, [pc, #28]	; (8011524 <_lseek_r+0x20>)
 8011508:	4604      	mov	r4, r0
 801150a:	4608      	mov	r0, r1
 801150c:	4611      	mov	r1, r2
 801150e:	2200      	movs	r2, #0
 8011510:	602a      	str	r2, [r5, #0]
 8011512:	461a      	mov	r2, r3
 8011514:	f7f4 fef2 	bl	80062fc <_lseek>
 8011518:	1c43      	adds	r3, r0, #1
 801151a:	d102      	bne.n	8011522 <_lseek_r+0x1e>
 801151c:	682b      	ldr	r3, [r5, #0]
 801151e:	b103      	cbz	r3, 8011522 <_lseek_r+0x1e>
 8011520:	6023      	str	r3, [r4, #0]
 8011522:	bd38      	pop	{r3, r4, r5, pc}
 8011524:	200064f0 	.word	0x200064f0

08011528 <_read_r>:
 8011528:	b538      	push	{r3, r4, r5, lr}
 801152a:	4d07      	ldr	r5, [pc, #28]	; (8011548 <_read_r+0x20>)
 801152c:	4604      	mov	r4, r0
 801152e:	4608      	mov	r0, r1
 8011530:	4611      	mov	r1, r2
 8011532:	2200      	movs	r2, #0
 8011534:	602a      	str	r2, [r5, #0]
 8011536:	461a      	mov	r2, r3
 8011538:	f7f4 fe80 	bl	800623c <_read>
 801153c:	1c43      	adds	r3, r0, #1
 801153e:	d102      	bne.n	8011546 <_read_r+0x1e>
 8011540:	682b      	ldr	r3, [r5, #0]
 8011542:	b103      	cbz	r3, 8011546 <_read_r+0x1e>
 8011544:	6023      	str	r3, [r4, #0]
 8011546:	bd38      	pop	{r3, r4, r5, pc}
 8011548:	200064f0 	.word	0x200064f0

0801154c <_sbrk_r>:
 801154c:	b538      	push	{r3, r4, r5, lr}
 801154e:	4d06      	ldr	r5, [pc, #24]	; (8011568 <_sbrk_r+0x1c>)
 8011550:	2300      	movs	r3, #0
 8011552:	4604      	mov	r4, r0
 8011554:	4608      	mov	r0, r1
 8011556:	602b      	str	r3, [r5, #0]
 8011558:	f7f4 fede 	bl	8006318 <_sbrk>
 801155c:	1c43      	adds	r3, r0, #1
 801155e:	d102      	bne.n	8011566 <_sbrk_r+0x1a>
 8011560:	682b      	ldr	r3, [r5, #0]
 8011562:	b103      	cbz	r3, 8011566 <_sbrk_r+0x1a>
 8011564:	6023      	str	r3, [r4, #0]
 8011566:	bd38      	pop	{r3, r4, r5, pc}
 8011568:	200064f0 	.word	0x200064f0

0801156c <_write_r>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	4d07      	ldr	r5, [pc, #28]	; (801158c <_write_r+0x20>)
 8011570:	4604      	mov	r4, r0
 8011572:	4608      	mov	r0, r1
 8011574:	4611      	mov	r1, r2
 8011576:	2200      	movs	r2, #0
 8011578:	602a      	str	r2, [r5, #0]
 801157a:	461a      	mov	r2, r3
 801157c:	f7f4 fe7b 	bl	8006276 <_write>
 8011580:	1c43      	adds	r3, r0, #1
 8011582:	d102      	bne.n	801158a <_write_r+0x1e>
 8011584:	682b      	ldr	r3, [r5, #0]
 8011586:	b103      	cbz	r3, 801158a <_write_r+0x1e>
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	bd38      	pop	{r3, r4, r5, pc}
 801158c:	200064f0 	.word	0x200064f0

08011590 <__errno>:
 8011590:	4b01      	ldr	r3, [pc, #4]	; (8011598 <__errno+0x8>)
 8011592:	6818      	ldr	r0, [r3, #0]
 8011594:	4770      	bx	lr
 8011596:	bf00      	nop
 8011598:	200000c4 	.word	0x200000c4

0801159c <__libc_init_array>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	4d0d      	ldr	r5, [pc, #52]	; (80115d4 <__libc_init_array+0x38>)
 80115a0:	4c0d      	ldr	r4, [pc, #52]	; (80115d8 <__libc_init_array+0x3c>)
 80115a2:	1b64      	subs	r4, r4, r5
 80115a4:	10a4      	asrs	r4, r4, #2
 80115a6:	2600      	movs	r6, #0
 80115a8:	42a6      	cmp	r6, r4
 80115aa:	d109      	bne.n	80115c0 <__libc_init_array+0x24>
 80115ac:	4d0b      	ldr	r5, [pc, #44]	; (80115dc <__libc_init_array+0x40>)
 80115ae:	4c0c      	ldr	r4, [pc, #48]	; (80115e0 <__libc_init_array+0x44>)
 80115b0:	f003 fb32 	bl	8014c18 <_init>
 80115b4:	1b64      	subs	r4, r4, r5
 80115b6:	10a4      	asrs	r4, r4, #2
 80115b8:	2600      	movs	r6, #0
 80115ba:	42a6      	cmp	r6, r4
 80115bc:	d105      	bne.n	80115ca <__libc_init_array+0x2e>
 80115be:	bd70      	pop	{r4, r5, r6, pc}
 80115c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80115c4:	4798      	blx	r3
 80115c6:	3601      	adds	r6, #1
 80115c8:	e7ee      	b.n	80115a8 <__libc_init_array+0xc>
 80115ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80115ce:	4798      	blx	r3
 80115d0:	3601      	adds	r6, #1
 80115d2:	e7f2      	b.n	80115ba <__libc_init_array+0x1e>
 80115d4:	0801588c 	.word	0x0801588c
 80115d8:	0801588c 	.word	0x0801588c
 80115dc:	0801588c 	.word	0x0801588c
 80115e0:	08015890 	.word	0x08015890

080115e4 <__retarget_lock_init_recursive>:
 80115e4:	4770      	bx	lr

080115e6 <__retarget_lock_acquire_recursive>:
 80115e6:	4770      	bx	lr

080115e8 <__retarget_lock_release_recursive>:
 80115e8:	4770      	bx	lr

080115ea <memcpy>:
 80115ea:	440a      	add	r2, r1
 80115ec:	4291      	cmp	r1, r2
 80115ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80115f2:	d100      	bne.n	80115f6 <memcpy+0xc>
 80115f4:	4770      	bx	lr
 80115f6:	b510      	push	{r4, lr}
 80115f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011600:	4291      	cmp	r1, r2
 8011602:	d1f9      	bne.n	80115f8 <memcpy+0xe>
 8011604:	bd10      	pop	{r4, pc}

08011606 <quorem>:
 8011606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160a:	6903      	ldr	r3, [r0, #16]
 801160c:	690c      	ldr	r4, [r1, #16]
 801160e:	42a3      	cmp	r3, r4
 8011610:	4607      	mov	r7, r0
 8011612:	db7e      	blt.n	8011712 <quorem+0x10c>
 8011614:	3c01      	subs	r4, #1
 8011616:	f101 0814 	add.w	r8, r1, #20
 801161a:	f100 0514 	add.w	r5, r0, #20
 801161e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011622:	9301      	str	r3, [sp, #4]
 8011624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801162c:	3301      	adds	r3, #1
 801162e:	429a      	cmp	r2, r3
 8011630:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011634:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011638:	fbb2 f6f3 	udiv	r6, r2, r3
 801163c:	d331      	bcc.n	80116a2 <quorem+0x9c>
 801163e:	f04f 0e00 	mov.w	lr, #0
 8011642:	4640      	mov	r0, r8
 8011644:	46ac      	mov	ip, r5
 8011646:	46f2      	mov	sl, lr
 8011648:	f850 2b04 	ldr.w	r2, [r0], #4
 801164c:	b293      	uxth	r3, r2
 801164e:	fb06 e303 	mla	r3, r6, r3, lr
 8011652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011656:	0c1a      	lsrs	r2, r3, #16
 8011658:	b29b      	uxth	r3, r3
 801165a:	ebaa 0303 	sub.w	r3, sl, r3
 801165e:	f8dc a000 	ldr.w	sl, [ip]
 8011662:	fa13 f38a 	uxtah	r3, r3, sl
 8011666:	fb06 220e 	mla	r2, r6, lr, r2
 801166a:	9300      	str	r3, [sp, #0]
 801166c:	9b00      	ldr	r3, [sp, #0]
 801166e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011672:	b292      	uxth	r2, r2
 8011674:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801167c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011680:	4581      	cmp	r9, r0
 8011682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011686:	f84c 3b04 	str.w	r3, [ip], #4
 801168a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801168e:	d2db      	bcs.n	8011648 <quorem+0x42>
 8011690:	f855 300b 	ldr.w	r3, [r5, fp]
 8011694:	b92b      	cbnz	r3, 80116a2 <quorem+0x9c>
 8011696:	9b01      	ldr	r3, [sp, #4]
 8011698:	3b04      	subs	r3, #4
 801169a:	429d      	cmp	r5, r3
 801169c:	461a      	mov	r2, r3
 801169e:	d32c      	bcc.n	80116fa <quorem+0xf4>
 80116a0:	613c      	str	r4, [r7, #16]
 80116a2:	4638      	mov	r0, r7
 80116a4:	f001 f8f2 	bl	801288c <__mcmp>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	db22      	blt.n	80116f2 <quorem+0xec>
 80116ac:	3601      	adds	r6, #1
 80116ae:	4629      	mov	r1, r5
 80116b0:	2000      	movs	r0, #0
 80116b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80116b6:	f8d1 c000 	ldr.w	ip, [r1]
 80116ba:	b293      	uxth	r3, r2
 80116bc:	1ac3      	subs	r3, r0, r3
 80116be:	0c12      	lsrs	r2, r2, #16
 80116c0:	fa13 f38c 	uxtah	r3, r3, ip
 80116c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80116c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116d2:	45c1      	cmp	r9, r8
 80116d4:	f841 3b04 	str.w	r3, [r1], #4
 80116d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80116dc:	d2e9      	bcs.n	80116b2 <quorem+0xac>
 80116de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116e6:	b922      	cbnz	r2, 80116f2 <quorem+0xec>
 80116e8:	3b04      	subs	r3, #4
 80116ea:	429d      	cmp	r5, r3
 80116ec:	461a      	mov	r2, r3
 80116ee:	d30a      	bcc.n	8011706 <quorem+0x100>
 80116f0:	613c      	str	r4, [r7, #16]
 80116f2:	4630      	mov	r0, r6
 80116f4:	b003      	add	sp, #12
 80116f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fa:	6812      	ldr	r2, [r2, #0]
 80116fc:	3b04      	subs	r3, #4
 80116fe:	2a00      	cmp	r2, #0
 8011700:	d1ce      	bne.n	80116a0 <quorem+0x9a>
 8011702:	3c01      	subs	r4, #1
 8011704:	e7c9      	b.n	801169a <quorem+0x94>
 8011706:	6812      	ldr	r2, [r2, #0]
 8011708:	3b04      	subs	r3, #4
 801170a:	2a00      	cmp	r2, #0
 801170c:	d1f0      	bne.n	80116f0 <quorem+0xea>
 801170e:	3c01      	subs	r4, #1
 8011710:	e7eb      	b.n	80116ea <quorem+0xe4>
 8011712:	2000      	movs	r0, #0
 8011714:	e7ee      	b.n	80116f4 <quorem+0xee>
	...

08011718 <_dtoa_r>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	ed2d 8b04 	vpush	{d8-d9}
 8011720:	69c5      	ldr	r5, [r0, #28]
 8011722:	b093      	sub	sp, #76	; 0x4c
 8011724:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011728:	ec57 6b10 	vmov	r6, r7, d0
 801172c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011730:	9107      	str	r1, [sp, #28]
 8011732:	4604      	mov	r4, r0
 8011734:	920a      	str	r2, [sp, #40]	; 0x28
 8011736:	930d      	str	r3, [sp, #52]	; 0x34
 8011738:	b975      	cbnz	r5, 8011758 <_dtoa_r+0x40>
 801173a:	2010      	movs	r0, #16
 801173c:	f7ff f886 	bl	801084c <malloc>
 8011740:	4602      	mov	r2, r0
 8011742:	61e0      	str	r0, [r4, #28]
 8011744:	b920      	cbnz	r0, 8011750 <_dtoa_r+0x38>
 8011746:	4bae      	ldr	r3, [pc, #696]	; (8011a00 <_dtoa_r+0x2e8>)
 8011748:	21ef      	movs	r1, #239	; 0xef
 801174a:	48ae      	ldr	r0, [pc, #696]	; (8011a04 <_dtoa_r+0x2ec>)
 801174c:	f001 fbbe 	bl	8012ecc <__assert_func>
 8011750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011754:	6005      	str	r5, [r0, #0]
 8011756:	60c5      	str	r5, [r0, #12]
 8011758:	69e3      	ldr	r3, [r4, #28]
 801175a:	6819      	ldr	r1, [r3, #0]
 801175c:	b151      	cbz	r1, 8011774 <_dtoa_r+0x5c>
 801175e:	685a      	ldr	r2, [r3, #4]
 8011760:	604a      	str	r2, [r1, #4]
 8011762:	2301      	movs	r3, #1
 8011764:	4093      	lsls	r3, r2
 8011766:	608b      	str	r3, [r1, #8]
 8011768:	4620      	mov	r0, r4
 801176a:	f000 fe53 	bl	8012414 <_Bfree>
 801176e:	69e3      	ldr	r3, [r4, #28]
 8011770:	2200      	movs	r2, #0
 8011772:	601a      	str	r2, [r3, #0]
 8011774:	1e3b      	subs	r3, r7, #0
 8011776:	bfbb      	ittet	lt
 8011778:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801177c:	9303      	strlt	r3, [sp, #12]
 801177e:	2300      	movge	r3, #0
 8011780:	2201      	movlt	r2, #1
 8011782:	bfac      	ite	ge
 8011784:	f8c8 3000 	strge.w	r3, [r8]
 8011788:	f8c8 2000 	strlt.w	r2, [r8]
 801178c:	4b9e      	ldr	r3, [pc, #632]	; (8011a08 <_dtoa_r+0x2f0>)
 801178e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011792:	ea33 0308 	bics.w	r3, r3, r8
 8011796:	d11b      	bne.n	80117d0 <_dtoa_r+0xb8>
 8011798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801179a:	f242 730f 	movw	r3, #9999	; 0x270f
 801179e:	6013      	str	r3, [r2, #0]
 80117a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80117a4:	4333      	orrs	r3, r6
 80117a6:	f000 8593 	beq.w	80122d0 <_dtoa_r+0xbb8>
 80117aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117ac:	b963      	cbnz	r3, 80117c8 <_dtoa_r+0xb0>
 80117ae:	4b97      	ldr	r3, [pc, #604]	; (8011a0c <_dtoa_r+0x2f4>)
 80117b0:	e027      	b.n	8011802 <_dtoa_r+0xea>
 80117b2:	4b97      	ldr	r3, [pc, #604]	; (8011a10 <_dtoa_r+0x2f8>)
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	3308      	adds	r3, #8
 80117b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80117ba:	6013      	str	r3, [r2, #0]
 80117bc:	9800      	ldr	r0, [sp, #0]
 80117be:	b013      	add	sp, #76	; 0x4c
 80117c0:	ecbd 8b04 	vpop	{d8-d9}
 80117c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c8:	4b90      	ldr	r3, [pc, #576]	; (8011a0c <_dtoa_r+0x2f4>)
 80117ca:	9300      	str	r3, [sp, #0]
 80117cc:	3303      	adds	r3, #3
 80117ce:	e7f3      	b.n	80117b8 <_dtoa_r+0xa0>
 80117d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117d4:	2200      	movs	r2, #0
 80117d6:	ec51 0b17 	vmov	r0, r1, d7
 80117da:	eeb0 8a47 	vmov.f32	s16, s14
 80117de:	eef0 8a67 	vmov.f32	s17, s15
 80117e2:	2300      	movs	r3, #0
 80117e4:	f7ef f988 	bl	8000af8 <__aeabi_dcmpeq>
 80117e8:	4681      	mov	r9, r0
 80117ea:	b160      	cbz	r0, 8011806 <_dtoa_r+0xee>
 80117ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117ee:	2301      	movs	r3, #1
 80117f0:	6013      	str	r3, [r2, #0]
 80117f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f000 8568 	beq.w	80122ca <_dtoa_r+0xbb2>
 80117fa:	4b86      	ldr	r3, [pc, #536]	; (8011a14 <_dtoa_r+0x2fc>)
 80117fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80117fe:	6013      	str	r3, [r2, #0]
 8011800:	3b01      	subs	r3, #1
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	e7da      	b.n	80117bc <_dtoa_r+0xa4>
 8011806:	aa10      	add	r2, sp, #64	; 0x40
 8011808:	a911      	add	r1, sp, #68	; 0x44
 801180a:	4620      	mov	r0, r4
 801180c:	eeb0 0a48 	vmov.f32	s0, s16
 8011810:	eef0 0a68 	vmov.f32	s1, s17
 8011814:	f001 f8e0 	bl	80129d8 <__d2b>
 8011818:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801181c:	4682      	mov	sl, r0
 801181e:	2d00      	cmp	r5, #0
 8011820:	d07f      	beq.n	8011922 <_dtoa_r+0x20a>
 8011822:	ee18 3a90 	vmov	r3, s17
 8011826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801182a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801182e:	ec51 0b18 	vmov	r0, r1, d8
 8011832:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801183a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801183e:	4619      	mov	r1, r3
 8011840:	2200      	movs	r2, #0
 8011842:	4b75      	ldr	r3, [pc, #468]	; (8011a18 <_dtoa_r+0x300>)
 8011844:	f7ee fd38 	bl	80002b8 <__aeabi_dsub>
 8011848:	a367      	add	r3, pc, #412	; (adr r3, 80119e8 <_dtoa_r+0x2d0>)
 801184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184e:	f7ee feeb 	bl	8000628 <__aeabi_dmul>
 8011852:	a367      	add	r3, pc, #412	; (adr r3, 80119f0 <_dtoa_r+0x2d8>)
 8011854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011858:	f7ee fd30 	bl	80002bc <__adddf3>
 801185c:	4606      	mov	r6, r0
 801185e:	4628      	mov	r0, r5
 8011860:	460f      	mov	r7, r1
 8011862:	f7ee fe77 	bl	8000554 <__aeabi_i2d>
 8011866:	a364      	add	r3, pc, #400	; (adr r3, 80119f8 <_dtoa_r+0x2e0>)
 8011868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186c:	f7ee fedc 	bl	8000628 <__aeabi_dmul>
 8011870:	4602      	mov	r2, r0
 8011872:	460b      	mov	r3, r1
 8011874:	4630      	mov	r0, r6
 8011876:	4639      	mov	r1, r7
 8011878:	f7ee fd20 	bl	80002bc <__adddf3>
 801187c:	4606      	mov	r6, r0
 801187e:	460f      	mov	r7, r1
 8011880:	f7ef f982 	bl	8000b88 <__aeabi_d2iz>
 8011884:	2200      	movs	r2, #0
 8011886:	4683      	mov	fp, r0
 8011888:	2300      	movs	r3, #0
 801188a:	4630      	mov	r0, r6
 801188c:	4639      	mov	r1, r7
 801188e:	f7ef f93d 	bl	8000b0c <__aeabi_dcmplt>
 8011892:	b148      	cbz	r0, 80118a8 <_dtoa_r+0x190>
 8011894:	4658      	mov	r0, fp
 8011896:	f7ee fe5d 	bl	8000554 <__aeabi_i2d>
 801189a:	4632      	mov	r2, r6
 801189c:	463b      	mov	r3, r7
 801189e:	f7ef f92b 	bl	8000af8 <__aeabi_dcmpeq>
 80118a2:	b908      	cbnz	r0, 80118a8 <_dtoa_r+0x190>
 80118a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118a8:	f1bb 0f16 	cmp.w	fp, #22
 80118ac:	d857      	bhi.n	801195e <_dtoa_r+0x246>
 80118ae:	4b5b      	ldr	r3, [pc, #364]	; (8011a1c <_dtoa_r+0x304>)
 80118b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	ec51 0b18 	vmov	r0, r1, d8
 80118bc:	f7ef f926 	bl	8000b0c <__aeabi_dcmplt>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d04e      	beq.n	8011962 <_dtoa_r+0x24a>
 80118c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118c8:	2300      	movs	r3, #0
 80118ca:	930c      	str	r3, [sp, #48]	; 0x30
 80118cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80118ce:	1b5b      	subs	r3, r3, r5
 80118d0:	1e5a      	subs	r2, r3, #1
 80118d2:	bf45      	ittet	mi
 80118d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80118d8:	9305      	strmi	r3, [sp, #20]
 80118da:	2300      	movpl	r3, #0
 80118dc:	2300      	movmi	r3, #0
 80118de:	9206      	str	r2, [sp, #24]
 80118e0:	bf54      	ite	pl
 80118e2:	9305      	strpl	r3, [sp, #20]
 80118e4:	9306      	strmi	r3, [sp, #24]
 80118e6:	f1bb 0f00 	cmp.w	fp, #0
 80118ea:	db3c      	blt.n	8011966 <_dtoa_r+0x24e>
 80118ec:	9b06      	ldr	r3, [sp, #24]
 80118ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80118f2:	445b      	add	r3, fp
 80118f4:	9306      	str	r3, [sp, #24]
 80118f6:	2300      	movs	r3, #0
 80118f8:	9308      	str	r3, [sp, #32]
 80118fa:	9b07      	ldr	r3, [sp, #28]
 80118fc:	2b09      	cmp	r3, #9
 80118fe:	d868      	bhi.n	80119d2 <_dtoa_r+0x2ba>
 8011900:	2b05      	cmp	r3, #5
 8011902:	bfc4      	itt	gt
 8011904:	3b04      	subgt	r3, #4
 8011906:	9307      	strgt	r3, [sp, #28]
 8011908:	9b07      	ldr	r3, [sp, #28]
 801190a:	f1a3 0302 	sub.w	r3, r3, #2
 801190e:	bfcc      	ite	gt
 8011910:	2500      	movgt	r5, #0
 8011912:	2501      	movle	r5, #1
 8011914:	2b03      	cmp	r3, #3
 8011916:	f200 8085 	bhi.w	8011a24 <_dtoa_r+0x30c>
 801191a:	e8df f003 	tbb	[pc, r3]
 801191e:	3b2e      	.short	0x3b2e
 8011920:	5839      	.short	0x5839
 8011922:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011926:	441d      	add	r5, r3
 8011928:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801192c:	2b20      	cmp	r3, #32
 801192e:	bfc1      	itttt	gt
 8011930:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011934:	fa08 f803 	lslgt.w	r8, r8, r3
 8011938:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801193c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011940:	bfd6      	itet	le
 8011942:	f1c3 0320 	rsble	r3, r3, #32
 8011946:	ea48 0003 	orrgt.w	r0, r8, r3
 801194a:	fa06 f003 	lslle.w	r0, r6, r3
 801194e:	f7ee fdf1 	bl	8000534 <__aeabi_ui2d>
 8011952:	2201      	movs	r2, #1
 8011954:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011958:	3d01      	subs	r5, #1
 801195a:	920e      	str	r2, [sp, #56]	; 0x38
 801195c:	e76f      	b.n	801183e <_dtoa_r+0x126>
 801195e:	2301      	movs	r3, #1
 8011960:	e7b3      	b.n	80118ca <_dtoa_r+0x1b2>
 8011962:	900c      	str	r0, [sp, #48]	; 0x30
 8011964:	e7b2      	b.n	80118cc <_dtoa_r+0x1b4>
 8011966:	9b05      	ldr	r3, [sp, #20]
 8011968:	eba3 030b 	sub.w	r3, r3, fp
 801196c:	9305      	str	r3, [sp, #20]
 801196e:	f1cb 0300 	rsb	r3, fp, #0
 8011972:	9308      	str	r3, [sp, #32]
 8011974:	2300      	movs	r3, #0
 8011976:	930b      	str	r3, [sp, #44]	; 0x2c
 8011978:	e7bf      	b.n	80118fa <_dtoa_r+0x1e2>
 801197a:	2300      	movs	r3, #0
 801197c:	9309      	str	r3, [sp, #36]	; 0x24
 801197e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011980:	2b00      	cmp	r3, #0
 8011982:	dc52      	bgt.n	8011a2a <_dtoa_r+0x312>
 8011984:	2301      	movs	r3, #1
 8011986:	9301      	str	r3, [sp, #4]
 8011988:	9304      	str	r3, [sp, #16]
 801198a:	461a      	mov	r2, r3
 801198c:	920a      	str	r2, [sp, #40]	; 0x28
 801198e:	e00b      	b.n	80119a8 <_dtoa_r+0x290>
 8011990:	2301      	movs	r3, #1
 8011992:	e7f3      	b.n	801197c <_dtoa_r+0x264>
 8011994:	2300      	movs	r3, #0
 8011996:	9309      	str	r3, [sp, #36]	; 0x24
 8011998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801199a:	445b      	add	r3, fp
 801199c:	9301      	str	r3, [sp, #4]
 801199e:	3301      	adds	r3, #1
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	9304      	str	r3, [sp, #16]
 80119a4:	bfb8      	it	lt
 80119a6:	2301      	movlt	r3, #1
 80119a8:	69e0      	ldr	r0, [r4, #28]
 80119aa:	2100      	movs	r1, #0
 80119ac:	2204      	movs	r2, #4
 80119ae:	f102 0614 	add.w	r6, r2, #20
 80119b2:	429e      	cmp	r6, r3
 80119b4:	d93d      	bls.n	8011a32 <_dtoa_r+0x31a>
 80119b6:	6041      	str	r1, [r0, #4]
 80119b8:	4620      	mov	r0, r4
 80119ba:	f000 fceb 	bl	8012394 <_Balloc>
 80119be:	9000      	str	r0, [sp, #0]
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d139      	bne.n	8011a38 <_dtoa_r+0x320>
 80119c4:	4b16      	ldr	r3, [pc, #88]	; (8011a20 <_dtoa_r+0x308>)
 80119c6:	4602      	mov	r2, r0
 80119c8:	f240 11af 	movw	r1, #431	; 0x1af
 80119cc:	e6bd      	b.n	801174a <_dtoa_r+0x32>
 80119ce:	2301      	movs	r3, #1
 80119d0:	e7e1      	b.n	8011996 <_dtoa_r+0x27e>
 80119d2:	2501      	movs	r5, #1
 80119d4:	2300      	movs	r3, #0
 80119d6:	9307      	str	r3, [sp, #28]
 80119d8:	9509      	str	r5, [sp, #36]	; 0x24
 80119da:	f04f 33ff 	mov.w	r3, #4294967295
 80119de:	9301      	str	r3, [sp, #4]
 80119e0:	9304      	str	r3, [sp, #16]
 80119e2:	2200      	movs	r2, #0
 80119e4:	2312      	movs	r3, #18
 80119e6:	e7d1      	b.n	801198c <_dtoa_r+0x274>
 80119e8:	636f4361 	.word	0x636f4361
 80119ec:	3fd287a7 	.word	0x3fd287a7
 80119f0:	8b60c8b3 	.word	0x8b60c8b3
 80119f4:	3fc68a28 	.word	0x3fc68a28
 80119f8:	509f79fb 	.word	0x509f79fb
 80119fc:	3fd34413 	.word	0x3fd34413
 8011a00:	08015135 	.word	0x08015135
 8011a04:	0801514c 	.word	0x0801514c
 8011a08:	7ff00000 	.word	0x7ff00000
 8011a0c:	08015131 	.word	0x08015131
 8011a10:	08015128 	.word	0x08015128
 8011a14:	08015105 	.word	0x08015105
 8011a18:	3ff80000 	.word	0x3ff80000
 8011a1c:	08015238 	.word	0x08015238
 8011a20:	080151a4 	.word	0x080151a4
 8011a24:	2301      	movs	r3, #1
 8011a26:	9309      	str	r3, [sp, #36]	; 0x24
 8011a28:	e7d7      	b.n	80119da <_dtoa_r+0x2c2>
 8011a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a2c:	9301      	str	r3, [sp, #4]
 8011a2e:	9304      	str	r3, [sp, #16]
 8011a30:	e7ba      	b.n	80119a8 <_dtoa_r+0x290>
 8011a32:	3101      	adds	r1, #1
 8011a34:	0052      	lsls	r2, r2, #1
 8011a36:	e7ba      	b.n	80119ae <_dtoa_r+0x296>
 8011a38:	69e3      	ldr	r3, [r4, #28]
 8011a3a:	9a00      	ldr	r2, [sp, #0]
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	9b04      	ldr	r3, [sp, #16]
 8011a40:	2b0e      	cmp	r3, #14
 8011a42:	f200 80a8 	bhi.w	8011b96 <_dtoa_r+0x47e>
 8011a46:	2d00      	cmp	r5, #0
 8011a48:	f000 80a5 	beq.w	8011b96 <_dtoa_r+0x47e>
 8011a4c:	f1bb 0f00 	cmp.w	fp, #0
 8011a50:	dd38      	ble.n	8011ac4 <_dtoa_r+0x3ac>
 8011a52:	4bc0      	ldr	r3, [pc, #768]	; (8011d54 <_dtoa_r+0x63c>)
 8011a54:	f00b 020f 	and.w	r2, fp, #15
 8011a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011a60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011a64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011a68:	d019      	beq.n	8011a9e <_dtoa_r+0x386>
 8011a6a:	4bbb      	ldr	r3, [pc, #748]	; (8011d58 <_dtoa_r+0x640>)
 8011a6c:	ec51 0b18 	vmov	r0, r1, d8
 8011a70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011a74:	f7ee ff02 	bl	800087c <__aeabi_ddiv>
 8011a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a7c:	f008 080f 	and.w	r8, r8, #15
 8011a80:	2503      	movs	r5, #3
 8011a82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011d58 <_dtoa_r+0x640>
 8011a86:	f1b8 0f00 	cmp.w	r8, #0
 8011a8a:	d10a      	bne.n	8011aa2 <_dtoa_r+0x38a>
 8011a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a90:	4632      	mov	r2, r6
 8011a92:	463b      	mov	r3, r7
 8011a94:	f7ee fef2 	bl	800087c <__aeabi_ddiv>
 8011a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a9c:	e02b      	b.n	8011af6 <_dtoa_r+0x3de>
 8011a9e:	2502      	movs	r5, #2
 8011aa0:	e7ef      	b.n	8011a82 <_dtoa_r+0x36a>
 8011aa2:	f018 0f01 	tst.w	r8, #1
 8011aa6:	d008      	beq.n	8011aba <_dtoa_r+0x3a2>
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	4639      	mov	r1, r7
 8011aac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011ab0:	f7ee fdba 	bl	8000628 <__aeabi_dmul>
 8011ab4:	3501      	adds	r5, #1
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	460f      	mov	r7, r1
 8011aba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011abe:	f109 0908 	add.w	r9, r9, #8
 8011ac2:	e7e0      	b.n	8011a86 <_dtoa_r+0x36e>
 8011ac4:	f000 809f 	beq.w	8011c06 <_dtoa_r+0x4ee>
 8011ac8:	f1cb 0600 	rsb	r6, fp, #0
 8011acc:	4ba1      	ldr	r3, [pc, #644]	; (8011d54 <_dtoa_r+0x63c>)
 8011ace:	4fa2      	ldr	r7, [pc, #648]	; (8011d58 <_dtoa_r+0x640>)
 8011ad0:	f006 020f 	and.w	r2, r6, #15
 8011ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011adc:	ec51 0b18 	vmov	r0, r1, d8
 8011ae0:	f7ee fda2 	bl	8000628 <__aeabi_dmul>
 8011ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ae8:	1136      	asrs	r6, r6, #4
 8011aea:	2300      	movs	r3, #0
 8011aec:	2502      	movs	r5, #2
 8011aee:	2e00      	cmp	r6, #0
 8011af0:	d17e      	bne.n	8011bf0 <_dtoa_r+0x4d8>
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1d0      	bne.n	8011a98 <_dtoa_r+0x380>
 8011af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011af8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	f000 8084 	beq.w	8011c0a <_dtoa_r+0x4f2>
 8011b02:	4b96      	ldr	r3, [pc, #600]	; (8011d5c <_dtoa_r+0x644>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	4640      	mov	r0, r8
 8011b08:	4649      	mov	r1, r9
 8011b0a:	f7ee ffff 	bl	8000b0c <__aeabi_dcmplt>
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d07b      	beq.n	8011c0a <_dtoa_r+0x4f2>
 8011b12:	9b04      	ldr	r3, [sp, #16]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d078      	beq.n	8011c0a <_dtoa_r+0x4f2>
 8011b18:	9b01      	ldr	r3, [sp, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	dd39      	ble.n	8011b92 <_dtoa_r+0x47a>
 8011b1e:	4b90      	ldr	r3, [pc, #576]	; (8011d60 <_dtoa_r+0x648>)
 8011b20:	2200      	movs	r2, #0
 8011b22:	4640      	mov	r0, r8
 8011b24:	4649      	mov	r1, r9
 8011b26:	f7ee fd7f 	bl	8000628 <__aeabi_dmul>
 8011b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b2e:	9e01      	ldr	r6, [sp, #4]
 8011b30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011b34:	3501      	adds	r5, #1
 8011b36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f7ee fd0a 	bl	8000554 <__aeabi_i2d>
 8011b40:	4642      	mov	r2, r8
 8011b42:	464b      	mov	r3, r9
 8011b44:	f7ee fd70 	bl	8000628 <__aeabi_dmul>
 8011b48:	4b86      	ldr	r3, [pc, #536]	; (8011d64 <_dtoa_r+0x64c>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f7ee fbb6 	bl	80002bc <__adddf3>
 8011b50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b58:	9303      	str	r3, [sp, #12]
 8011b5a:	2e00      	cmp	r6, #0
 8011b5c:	d158      	bne.n	8011c10 <_dtoa_r+0x4f8>
 8011b5e:	4b82      	ldr	r3, [pc, #520]	; (8011d68 <_dtoa_r+0x650>)
 8011b60:	2200      	movs	r2, #0
 8011b62:	4640      	mov	r0, r8
 8011b64:	4649      	mov	r1, r9
 8011b66:	f7ee fba7 	bl	80002b8 <__aeabi_dsub>
 8011b6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011b6e:	4680      	mov	r8, r0
 8011b70:	4689      	mov	r9, r1
 8011b72:	f7ee ffe9 	bl	8000b48 <__aeabi_dcmpgt>
 8011b76:	2800      	cmp	r0, #0
 8011b78:	f040 8296 	bne.w	80120a8 <_dtoa_r+0x990>
 8011b7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011b80:	4640      	mov	r0, r8
 8011b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b86:	4649      	mov	r1, r9
 8011b88:	f7ee ffc0 	bl	8000b0c <__aeabi_dcmplt>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	f040 8289 	bne.w	80120a4 <_dtoa_r+0x98c>
 8011b92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f2c0 814e 	blt.w	8011e3a <_dtoa_r+0x722>
 8011b9e:	f1bb 0f0e 	cmp.w	fp, #14
 8011ba2:	f300 814a 	bgt.w	8011e3a <_dtoa_r+0x722>
 8011ba6:	4b6b      	ldr	r3, [pc, #428]	; (8011d54 <_dtoa_r+0x63c>)
 8011ba8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f280 80dc 	bge.w	8011d70 <_dtoa_r+0x658>
 8011bb8:	9b04      	ldr	r3, [sp, #16]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f300 80d8 	bgt.w	8011d70 <_dtoa_r+0x658>
 8011bc0:	f040 826f 	bne.w	80120a2 <_dtoa_r+0x98a>
 8011bc4:	4b68      	ldr	r3, [pc, #416]	; (8011d68 <_dtoa_r+0x650>)
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	4640      	mov	r0, r8
 8011bca:	4649      	mov	r1, r9
 8011bcc:	f7ee fd2c 	bl	8000628 <__aeabi_dmul>
 8011bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011bd4:	f7ee ffae 	bl	8000b34 <__aeabi_dcmpge>
 8011bd8:	9e04      	ldr	r6, [sp, #16]
 8011bda:	4637      	mov	r7, r6
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	f040 8245 	bne.w	801206c <_dtoa_r+0x954>
 8011be2:	9d00      	ldr	r5, [sp, #0]
 8011be4:	2331      	movs	r3, #49	; 0x31
 8011be6:	f805 3b01 	strb.w	r3, [r5], #1
 8011bea:	f10b 0b01 	add.w	fp, fp, #1
 8011bee:	e241      	b.n	8012074 <_dtoa_r+0x95c>
 8011bf0:	07f2      	lsls	r2, r6, #31
 8011bf2:	d505      	bpl.n	8011c00 <_dtoa_r+0x4e8>
 8011bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011bf8:	f7ee fd16 	bl	8000628 <__aeabi_dmul>
 8011bfc:	3501      	adds	r5, #1
 8011bfe:	2301      	movs	r3, #1
 8011c00:	1076      	asrs	r6, r6, #1
 8011c02:	3708      	adds	r7, #8
 8011c04:	e773      	b.n	8011aee <_dtoa_r+0x3d6>
 8011c06:	2502      	movs	r5, #2
 8011c08:	e775      	b.n	8011af6 <_dtoa_r+0x3de>
 8011c0a:	9e04      	ldr	r6, [sp, #16]
 8011c0c:	465f      	mov	r7, fp
 8011c0e:	e792      	b.n	8011b36 <_dtoa_r+0x41e>
 8011c10:	9900      	ldr	r1, [sp, #0]
 8011c12:	4b50      	ldr	r3, [pc, #320]	; (8011d54 <_dtoa_r+0x63c>)
 8011c14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c18:	4431      	add	r1, r6
 8011c1a:	9102      	str	r1, [sp, #8]
 8011c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c1e:	eeb0 9a47 	vmov.f32	s18, s14
 8011c22:	eef0 9a67 	vmov.f32	s19, s15
 8011c26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011c2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c2e:	2900      	cmp	r1, #0
 8011c30:	d044      	beq.n	8011cbc <_dtoa_r+0x5a4>
 8011c32:	494e      	ldr	r1, [pc, #312]	; (8011d6c <_dtoa_r+0x654>)
 8011c34:	2000      	movs	r0, #0
 8011c36:	f7ee fe21 	bl	800087c <__aeabi_ddiv>
 8011c3a:	ec53 2b19 	vmov	r2, r3, d9
 8011c3e:	f7ee fb3b 	bl	80002b8 <__aeabi_dsub>
 8011c42:	9d00      	ldr	r5, [sp, #0]
 8011c44:	ec41 0b19 	vmov	d9, r0, r1
 8011c48:	4649      	mov	r1, r9
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	f7ee ff9c 	bl	8000b88 <__aeabi_d2iz>
 8011c50:	4606      	mov	r6, r0
 8011c52:	f7ee fc7f 	bl	8000554 <__aeabi_i2d>
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	4640      	mov	r0, r8
 8011c5c:	4649      	mov	r1, r9
 8011c5e:	f7ee fb2b 	bl	80002b8 <__aeabi_dsub>
 8011c62:	3630      	adds	r6, #48	; 0x30
 8011c64:	f805 6b01 	strb.w	r6, [r5], #1
 8011c68:	ec53 2b19 	vmov	r2, r3, d9
 8011c6c:	4680      	mov	r8, r0
 8011c6e:	4689      	mov	r9, r1
 8011c70:	f7ee ff4c 	bl	8000b0c <__aeabi_dcmplt>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	d164      	bne.n	8011d42 <_dtoa_r+0x62a>
 8011c78:	4642      	mov	r2, r8
 8011c7a:	464b      	mov	r3, r9
 8011c7c:	4937      	ldr	r1, [pc, #220]	; (8011d5c <_dtoa_r+0x644>)
 8011c7e:	2000      	movs	r0, #0
 8011c80:	f7ee fb1a 	bl	80002b8 <__aeabi_dsub>
 8011c84:	ec53 2b19 	vmov	r2, r3, d9
 8011c88:	f7ee ff40 	bl	8000b0c <__aeabi_dcmplt>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	f040 80b6 	bne.w	8011dfe <_dtoa_r+0x6e6>
 8011c92:	9b02      	ldr	r3, [sp, #8]
 8011c94:	429d      	cmp	r5, r3
 8011c96:	f43f af7c 	beq.w	8011b92 <_dtoa_r+0x47a>
 8011c9a:	4b31      	ldr	r3, [pc, #196]	; (8011d60 <_dtoa_r+0x648>)
 8011c9c:	ec51 0b19 	vmov	r0, r1, d9
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	f7ee fcc1 	bl	8000628 <__aeabi_dmul>
 8011ca6:	4b2e      	ldr	r3, [pc, #184]	; (8011d60 <_dtoa_r+0x648>)
 8011ca8:	ec41 0b19 	vmov	d9, r0, r1
 8011cac:	2200      	movs	r2, #0
 8011cae:	4640      	mov	r0, r8
 8011cb0:	4649      	mov	r1, r9
 8011cb2:	f7ee fcb9 	bl	8000628 <__aeabi_dmul>
 8011cb6:	4680      	mov	r8, r0
 8011cb8:	4689      	mov	r9, r1
 8011cba:	e7c5      	b.n	8011c48 <_dtoa_r+0x530>
 8011cbc:	ec51 0b17 	vmov	r0, r1, d7
 8011cc0:	f7ee fcb2 	bl	8000628 <__aeabi_dmul>
 8011cc4:	9b02      	ldr	r3, [sp, #8]
 8011cc6:	9d00      	ldr	r5, [sp, #0]
 8011cc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cca:	ec41 0b19 	vmov	d9, r0, r1
 8011cce:	4649      	mov	r1, r9
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	f7ee ff59 	bl	8000b88 <__aeabi_d2iz>
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	f7ee fc3c 	bl	8000554 <__aeabi_i2d>
 8011cdc:	3630      	adds	r6, #48	; 0x30
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	4649      	mov	r1, r9
 8011ce6:	f7ee fae7 	bl	80002b8 <__aeabi_dsub>
 8011cea:	f805 6b01 	strb.w	r6, [r5], #1
 8011cee:	9b02      	ldr	r3, [sp, #8]
 8011cf0:	429d      	cmp	r5, r3
 8011cf2:	4680      	mov	r8, r0
 8011cf4:	4689      	mov	r9, r1
 8011cf6:	f04f 0200 	mov.w	r2, #0
 8011cfa:	d124      	bne.n	8011d46 <_dtoa_r+0x62e>
 8011cfc:	4b1b      	ldr	r3, [pc, #108]	; (8011d6c <_dtoa_r+0x654>)
 8011cfe:	ec51 0b19 	vmov	r0, r1, d9
 8011d02:	f7ee fadb 	bl	80002bc <__adddf3>
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	4640      	mov	r0, r8
 8011d0c:	4649      	mov	r1, r9
 8011d0e:	f7ee ff1b 	bl	8000b48 <__aeabi_dcmpgt>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d173      	bne.n	8011dfe <_dtoa_r+0x6e6>
 8011d16:	ec53 2b19 	vmov	r2, r3, d9
 8011d1a:	4914      	ldr	r1, [pc, #80]	; (8011d6c <_dtoa_r+0x654>)
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	f7ee facb 	bl	80002b8 <__aeabi_dsub>
 8011d22:	4602      	mov	r2, r0
 8011d24:	460b      	mov	r3, r1
 8011d26:	4640      	mov	r0, r8
 8011d28:	4649      	mov	r1, r9
 8011d2a:	f7ee feef 	bl	8000b0c <__aeabi_dcmplt>
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f43f af2f 	beq.w	8011b92 <_dtoa_r+0x47a>
 8011d34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011d36:	1e6b      	subs	r3, r5, #1
 8011d38:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d3e:	2b30      	cmp	r3, #48	; 0x30
 8011d40:	d0f8      	beq.n	8011d34 <_dtoa_r+0x61c>
 8011d42:	46bb      	mov	fp, r7
 8011d44:	e04a      	b.n	8011ddc <_dtoa_r+0x6c4>
 8011d46:	4b06      	ldr	r3, [pc, #24]	; (8011d60 <_dtoa_r+0x648>)
 8011d48:	f7ee fc6e 	bl	8000628 <__aeabi_dmul>
 8011d4c:	4680      	mov	r8, r0
 8011d4e:	4689      	mov	r9, r1
 8011d50:	e7bd      	b.n	8011cce <_dtoa_r+0x5b6>
 8011d52:	bf00      	nop
 8011d54:	08015238 	.word	0x08015238
 8011d58:	08015210 	.word	0x08015210
 8011d5c:	3ff00000 	.word	0x3ff00000
 8011d60:	40240000 	.word	0x40240000
 8011d64:	401c0000 	.word	0x401c0000
 8011d68:	40140000 	.word	0x40140000
 8011d6c:	3fe00000 	.word	0x3fe00000
 8011d70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011d74:	9d00      	ldr	r5, [sp, #0]
 8011d76:	4642      	mov	r2, r8
 8011d78:	464b      	mov	r3, r9
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	4639      	mov	r1, r7
 8011d7e:	f7ee fd7d 	bl	800087c <__aeabi_ddiv>
 8011d82:	f7ee ff01 	bl	8000b88 <__aeabi_d2iz>
 8011d86:	9001      	str	r0, [sp, #4]
 8011d88:	f7ee fbe4 	bl	8000554 <__aeabi_i2d>
 8011d8c:	4642      	mov	r2, r8
 8011d8e:	464b      	mov	r3, r9
 8011d90:	f7ee fc4a 	bl	8000628 <__aeabi_dmul>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	4630      	mov	r0, r6
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	f7ee fa8c 	bl	80002b8 <__aeabi_dsub>
 8011da0:	9e01      	ldr	r6, [sp, #4]
 8011da2:	9f04      	ldr	r7, [sp, #16]
 8011da4:	3630      	adds	r6, #48	; 0x30
 8011da6:	f805 6b01 	strb.w	r6, [r5], #1
 8011daa:	9e00      	ldr	r6, [sp, #0]
 8011dac:	1bae      	subs	r6, r5, r6
 8011dae:	42b7      	cmp	r7, r6
 8011db0:	4602      	mov	r2, r0
 8011db2:	460b      	mov	r3, r1
 8011db4:	d134      	bne.n	8011e20 <_dtoa_r+0x708>
 8011db6:	f7ee fa81 	bl	80002bc <__adddf3>
 8011dba:	4642      	mov	r2, r8
 8011dbc:	464b      	mov	r3, r9
 8011dbe:	4606      	mov	r6, r0
 8011dc0:	460f      	mov	r7, r1
 8011dc2:	f7ee fec1 	bl	8000b48 <__aeabi_dcmpgt>
 8011dc6:	b9c8      	cbnz	r0, 8011dfc <_dtoa_r+0x6e4>
 8011dc8:	4642      	mov	r2, r8
 8011dca:	464b      	mov	r3, r9
 8011dcc:	4630      	mov	r0, r6
 8011dce:	4639      	mov	r1, r7
 8011dd0:	f7ee fe92 	bl	8000af8 <__aeabi_dcmpeq>
 8011dd4:	b110      	cbz	r0, 8011ddc <_dtoa_r+0x6c4>
 8011dd6:	9b01      	ldr	r3, [sp, #4]
 8011dd8:	07db      	lsls	r3, r3, #31
 8011dda:	d40f      	bmi.n	8011dfc <_dtoa_r+0x6e4>
 8011ddc:	4651      	mov	r1, sl
 8011dde:	4620      	mov	r0, r4
 8011de0:	f000 fb18 	bl	8012414 <_Bfree>
 8011de4:	2300      	movs	r3, #0
 8011de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011de8:	702b      	strb	r3, [r5, #0]
 8011dea:	f10b 0301 	add.w	r3, fp, #1
 8011dee:	6013      	str	r3, [r2, #0]
 8011df0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f43f ace2 	beq.w	80117bc <_dtoa_r+0xa4>
 8011df8:	601d      	str	r5, [r3, #0]
 8011dfa:	e4df      	b.n	80117bc <_dtoa_r+0xa4>
 8011dfc:	465f      	mov	r7, fp
 8011dfe:	462b      	mov	r3, r5
 8011e00:	461d      	mov	r5, r3
 8011e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e06:	2a39      	cmp	r2, #57	; 0x39
 8011e08:	d106      	bne.n	8011e18 <_dtoa_r+0x700>
 8011e0a:	9a00      	ldr	r2, [sp, #0]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d1f7      	bne.n	8011e00 <_dtoa_r+0x6e8>
 8011e10:	9900      	ldr	r1, [sp, #0]
 8011e12:	2230      	movs	r2, #48	; 0x30
 8011e14:	3701      	adds	r7, #1
 8011e16:	700a      	strb	r2, [r1, #0]
 8011e18:	781a      	ldrb	r2, [r3, #0]
 8011e1a:	3201      	adds	r2, #1
 8011e1c:	701a      	strb	r2, [r3, #0]
 8011e1e:	e790      	b.n	8011d42 <_dtoa_r+0x62a>
 8011e20:	4ba3      	ldr	r3, [pc, #652]	; (80120b0 <_dtoa_r+0x998>)
 8011e22:	2200      	movs	r2, #0
 8011e24:	f7ee fc00 	bl	8000628 <__aeabi_dmul>
 8011e28:	2200      	movs	r2, #0
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	460f      	mov	r7, r1
 8011e30:	f7ee fe62 	bl	8000af8 <__aeabi_dcmpeq>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d09e      	beq.n	8011d76 <_dtoa_r+0x65e>
 8011e38:	e7d0      	b.n	8011ddc <_dtoa_r+0x6c4>
 8011e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e3c:	2a00      	cmp	r2, #0
 8011e3e:	f000 80ca 	beq.w	8011fd6 <_dtoa_r+0x8be>
 8011e42:	9a07      	ldr	r2, [sp, #28]
 8011e44:	2a01      	cmp	r2, #1
 8011e46:	f300 80ad 	bgt.w	8011fa4 <_dtoa_r+0x88c>
 8011e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e4c:	2a00      	cmp	r2, #0
 8011e4e:	f000 80a5 	beq.w	8011f9c <_dtoa_r+0x884>
 8011e52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011e56:	9e08      	ldr	r6, [sp, #32]
 8011e58:	9d05      	ldr	r5, [sp, #20]
 8011e5a:	9a05      	ldr	r2, [sp, #20]
 8011e5c:	441a      	add	r2, r3
 8011e5e:	9205      	str	r2, [sp, #20]
 8011e60:	9a06      	ldr	r2, [sp, #24]
 8011e62:	2101      	movs	r1, #1
 8011e64:	441a      	add	r2, r3
 8011e66:	4620      	mov	r0, r4
 8011e68:	9206      	str	r2, [sp, #24]
 8011e6a:	f000 fb89 	bl	8012580 <__i2b>
 8011e6e:	4607      	mov	r7, r0
 8011e70:	b165      	cbz	r5, 8011e8c <_dtoa_r+0x774>
 8011e72:	9b06      	ldr	r3, [sp, #24]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	dd09      	ble.n	8011e8c <_dtoa_r+0x774>
 8011e78:	42ab      	cmp	r3, r5
 8011e7a:	9a05      	ldr	r2, [sp, #20]
 8011e7c:	bfa8      	it	ge
 8011e7e:	462b      	movge	r3, r5
 8011e80:	1ad2      	subs	r2, r2, r3
 8011e82:	9205      	str	r2, [sp, #20]
 8011e84:	9a06      	ldr	r2, [sp, #24]
 8011e86:	1aed      	subs	r5, r5, r3
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	9306      	str	r3, [sp, #24]
 8011e8c:	9b08      	ldr	r3, [sp, #32]
 8011e8e:	b1f3      	cbz	r3, 8011ece <_dtoa_r+0x7b6>
 8011e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f000 80a3 	beq.w	8011fde <_dtoa_r+0x8c6>
 8011e98:	2e00      	cmp	r6, #0
 8011e9a:	dd10      	ble.n	8011ebe <_dtoa_r+0x7a6>
 8011e9c:	4639      	mov	r1, r7
 8011e9e:	4632      	mov	r2, r6
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f000 fc2d 	bl	8012700 <__pow5mult>
 8011ea6:	4652      	mov	r2, sl
 8011ea8:	4601      	mov	r1, r0
 8011eaa:	4607      	mov	r7, r0
 8011eac:	4620      	mov	r0, r4
 8011eae:	f000 fb7d 	bl	80125ac <__multiply>
 8011eb2:	4651      	mov	r1, sl
 8011eb4:	4680      	mov	r8, r0
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f000 faac 	bl	8012414 <_Bfree>
 8011ebc:	46c2      	mov	sl, r8
 8011ebe:	9b08      	ldr	r3, [sp, #32]
 8011ec0:	1b9a      	subs	r2, r3, r6
 8011ec2:	d004      	beq.n	8011ece <_dtoa_r+0x7b6>
 8011ec4:	4651      	mov	r1, sl
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f000 fc1a 	bl	8012700 <__pow5mult>
 8011ecc:	4682      	mov	sl, r0
 8011ece:	2101      	movs	r1, #1
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f000 fb55 	bl	8012580 <__i2b>
 8011ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	4606      	mov	r6, r0
 8011edc:	f340 8081 	ble.w	8011fe2 <_dtoa_r+0x8ca>
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	4601      	mov	r1, r0
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f000 fc0b 	bl	8012700 <__pow5mult>
 8011eea:	9b07      	ldr	r3, [sp, #28]
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	4606      	mov	r6, r0
 8011ef0:	dd7a      	ble.n	8011fe8 <_dtoa_r+0x8d0>
 8011ef2:	f04f 0800 	mov.w	r8, #0
 8011ef6:	6933      	ldr	r3, [r6, #16]
 8011ef8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011efc:	6918      	ldr	r0, [r3, #16]
 8011efe:	f000 faf1 	bl	80124e4 <__hi0bits>
 8011f02:	f1c0 0020 	rsb	r0, r0, #32
 8011f06:	9b06      	ldr	r3, [sp, #24]
 8011f08:	4418      	add	r0, r3
 8011f0a:	f010 001f 	ands.w	r0, r0, #31
 8011f0e:	f000 8094 	beq.w	801203a <_dtoa_r+0x922>
 8011f12:	f1c0 0320 	rsb	r3, r0, #32
 8011f16:	2b04      	cmp	r3, #4
 8011f18:	f340 8085 	ble.w	8012026 <_dtoa_r+0x90e>
 8011f1c:	9b05      	ldr	r3, [sp, #20]
 8011f1e:	f1c0 001c 	rsb	r0, r0, #28
 8011f22:	4403      	add	r3, r0
 8011f24:	9305      	str	r3, [sp, #20]
 8011f26:	9b06      	ldr	r3, [sp, #24]
 8011f28:	4403      	add	r3, r0
 8011f2a:	4405      	add	r5, r0
 8011f2c:	9306      	str	r3, [sp, #24]
 8011f2e:	9b05      	ldr	r3, [sp, #20]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	dd05      	ble.n	8011f40 <_dtoa_r+0x828>
 8011f34:	4651      	mov	r1, sl
 8011f36:	461a      	mov	r2, r3
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 fc3b 	bl	80127b4 <__lshift>
 8011f3e:	4682      	mov	sl, r0
 8011f40:	9b06      	ldr	r3, [sp, #24]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	dd05      	ble.n	8011f52 <_dtoa_r+0x83a>
 8011f46:	4631      	mov	r1, r6
 8011f48:	461a      	mov	r2, r3
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f000 fc32 	bl	80127b4 <__lshift>
 8011f50:	4606      	mov	r6, r0
 8011f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d072      	beq.n	801203e <_dtoa_r+0x926>
 8011f58:	4631      	mov	r1, r6
 8011f5a:	4650      	mov	r0, sl
 8011f5c:	f000 fc96 	bl	801288c <__mcmp>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	da6c      	bge.n	801203e <_dtoa_r+0x926>
 8011f64:	2300      	movs	r3, #0
 8011f66:	4651      	mov	r1, sl
 8011f68:	220a      	movs	r2, #10
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f000 fa74 	bl	8012458 <__multadd>
 8011f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011f76:	4682      	mov	sl, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	f000 81b0 	beq.w	80122de <_dtoa_r+0xbc6>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	4639      	mov	r1, r7
 8011f82:	220a      	movs	r2, #10
 8011f84:	4620      	mov	r0, r4
 8011f86:	f000 fa67 	bl	8012458 <__multadd>
 8011f8a:	9b01      	ldr	r3, [sp, #4]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	4607      	mov	r7, r0
 8011f90:	f300 8096 	bgt.w	80120c0 <_dtoa_r+0x9a8>
 8011f94:	9b07      	ldr	r3, [sp, #28]
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	dc59      	bgt.n	801204e <_dtoa_r+0x936>
 8011f9a:	e091      	b.n	80120c0 <_dtoa_r+0x9a8>
 8011f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011fa2:	e758      	b.n	8011e56 <_dtoa_r+0x73e>
 8011fa4:	9b04      	ldr	r3, [sp, #16]
 8011fa6:	1e5e      	subs	r6, r3, #1
 8011fa8:	9b08      	ldr	r3, [sp, #32]
 8011faa:	42b3      	cmp	r3, r6
 8011fac:	bfbf      	itttt	lt
 8011fae:	9b08      	ldrlt	r3, [sp, #32]
 8011fb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011fb2:	9608      	strlt	r6, [sp, #32]
 8011fb4:	1af3      	sublt	r3, r6, r3
 8011fb6:	bfb4      	ite	lt
 8011fb8:	18d2      	addlt	r2, r2, r3
 8011fba:	1b9e      	subge	r6, r3, r6
 8011fbc:	9b04      	ldr	r3, [sp, #16]
 8011fbe:	bfbc      	itt	lt
 8011fc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011fc2:	2600      	movlt	r6, #0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	bfb7      	itett	lt
 8011fc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011fcc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011fd0:	1a9d      	sublt	r5, r3, r2
 8011fd2:	2300      	movlt	r3, #0
 8011fd4:	e741      	b.n	8011e5a <_dtoa_r+0x742>
 8011fd6:	9e08      	ldr	r6, [sp, #32]
 8011fd8:	9d05      	ldr	r5, [sp, #20]
 8011fda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011fdc:	e748      	b.n	8011e70 <_dtoa_r+0x758>
 8011fde:	9a08      	ldr	r2, [sp, #32]
 8011fe0:	e770      	b.n	8011ec4 <_dtoa_r+0x7ac>
 8011fe2:	9b07      	ldr	r3, [sp, #28]
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	dc19      	bgt.n	801201c <_dtoa_r+0x904>
 8011fe8:	9b02      	ldr	r3, [sp, #8]
 8011fea:	b9bb      	cbnz	r3, 801201c <_dtoa_r+0x904>
 8011fec:	9b03      	ldr	r3, [sp, #12]
 8011fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ff2:	b99b      	cbnz	r3, 801201c <_dtoa_r+0x904>
 8011ff4:	9b03      	ldr	r3, [sp, #12]
 8011ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ffa:	0d1b      	lsrs	r3, r3, #20
 8011ffc:	051b      	lsls	r3, r3, #20
 8011ffe:	b183      	cbz	r3, 8012022 <_dtoa_r+0x90a>
 8012000:	9b05      	ldr	r3, [sp, #20]
 8012002:	3301      	adds	r3, #1
 8012004:	9305      	str	r3, [sp, #20]
 8012006:	9b06      	ldr	r3, [sp, #24]
 8012008:	3301      	adds	r3, #1
 801200a:	9306      	str	r3, [sp, #24]
 801200c:	f04f 0801 	mov.w	r8, #1
 8012010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012012:	2b00      	cmp	r3, #0
 8012014:	f47f af6f 	bne.w	8011ef6 <_dtoa_r+0x7de>
 8012018:	2001      	movs	r0, #1
 801201a:	e774      	b.n	8011f06 <_dtoa_r+0x7ee>
 801201c:	f04f 0800 	mov.w	r8, #0
 8012020:	e7f6      	b.n	8012010 <_dtoa_r+0x8f8>
 8012022:	4698      	mov	r8, r3
 8012024:	e7f4      	b.n	8012010 <_dtoa_r+0x8f8>
 8012026:	d082      	beq.n	8011f2e <_dtoa_r+0x816>
 8012028:	9a05      	ldr	r2, [sp, #20]
 801202a:	331c      	adds	r3, #28
 801202c:	441a      	add	r2, r3
 801202e:	9205      	str	r2, [sp, #20]
 8012030:	9a06      	ldr	r2, [sp, #24]
 8012032:	441a      	add	r2, r3
 8012034:	441d      	add	r5, r3
 8012036:	9206      	str	r2, [sp, #24]
 8012038:	e779      	b.n	8011f2e <_dtoa_r+0x816>
 801203a:	4603      	mov	r3, r0
 801203c:	e7f4      	b.n	8012028 <_dtoa_r+0x910>
 801203e:	9b04      	ldr	r3, [sp, #16]
 8012040:	2b00      	cmp	r3, #0
 8012042:	dc37      	bgt.n	80120b4 <_dtoa_r+0x99c>
 8012044:	9b07      	ldr	r3, [sp, #28]
 8012046:	2b02      	cmp	r3, #2
 8012048:	dd34      	ble.n	80120b4 <_dtoa_r+0x99c>
 801204a:	9b04      	ldr	r3, [sp, #16]
 801204c:	9301      	str	r3, [sp, #4]
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	b963      	cbnz	r3, 801206c <_dtoa_r+0x954>
 8012052:	4631      	mov	r1, r6
 8012054:	2205      	movs	r2, #5
 8012056:	4620      	mov	r0, r4
 8012058:	f000 f9fe 	bl	8012458 <__multadd>
 801205c:	4601      	mov	r1, r0
 801205e:	4606      	mov	r6, r0
 8012060:	4650      	mov	r0, sl
 8012062:	f000 fc13 	bl	801288c <__mcmp>
 8012066:	2800      	cmp	r0, #0
 8012068:	f73f adbb 	bgt.w	8011be2 <_dtoa_r+0x4ca>
 801206c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801206e:	9d00      	ldr	r5, [sp, #0]
 8012070:	ea6f 0b03 	mvn.w	fp, r3
 8012074:	f04f 0800 	mov.w	r8, #0
 8012078:	4631      	mov	r1, r6
 801207a:	4620      	mov	r0, r4
 801207c:	f000 f9ca 	bl	8012414 <_Bfree>
 8012080:	2f00      	cmp	r7, #0
 8012082:	f43f aeab 	beq.w	8011ddc <_dtoa_r+0x6c4>
 8012086:	f1b8 0f00 	cmp.w	r8, #0
 801208a:	d005      	beq.n	8012098 <_dtoa_r+0x980>
 801208c:	45b8      	cmp	r8, r7
 801208e:	d003      	beq.n	8012098 <_dtoa_r+0x980>
 8012090:	4641      	mov	r1, r8
 8012092:	4620      	mov	r0, r4
 8012094:	f000 f9be 	bl	8012414 <_Bfree>
 8012098:	4639      	mov	r1, r7
 801209a:	4620      	mov	r0, r4
 801209c:	f000 f9ba 	bl	8012414 <_Bfree>
 80120a0:	e69c      	b.n	8011ddc <_dtoa_r+0x6c4>
 80120a2:	2600      	movs	r6, #0
 80120a4:	4637      	mov	r7, r6
 80120a6:	e7e1      	b.n	801206c <_dtoa_r+0x954>
 80120a8:	46bb      	mov	fp, r7
 80120aa:	4637      	mov	r7, r6
 80120ac:	e599      	b.n	8011be2 <_dtoa_r+0x4ca>
 80120ae:	bf00      	nop
 80120b0:	40240000 	.word	0x40240000
 80120b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	f000 80c8 	beq.w	801224c <_dtoa_r+0xb34>
 80120bc:	9b04      	ldr	r3, [sp, #16]
 80120be:	9301      	str	r3, [sp, #4]
 80120c0:	2d00      	cmp	r5, #0
 80120c2:	dd05      	ble.n	80120d0 <_dtoa_r+0x9b8>
 80120c4:	4639      	mov	r1, r7
 80120c6:	462a      	mov	r2, r5
 80120c8:	4620      	mov	r0, r4
 80120ca:	f000 fb73 	bl	80127b4 <__lshift>
 80120ce:	4607      	mov	r7, r0
 80120d0:	f1b8 0f00 	cmp.w	r8, #0
 80120d4:	d05b      	beq.n	801218e <_dtoa_r+0xa76>
 80120d6:	6879      	ldr	r1, [r7, #4]
 80120d8:	4620      	mov	r0, r4
 80120da:	f000 f95b 	bl	8012394 <_Balloc>
 80120de:	4605      	mov	r5, r0
 80120e0:	b928      	cbnz	r0, 80120ee <_dtoa_r+0x9d6>
 80120e2:	4b83      	ldr	r3, [pc, #524]	; (80122f0 <_dtoa_r+0xbd8>)
 80120e4:	4602      	mov	r2, r0
 80120e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80120ea:	f7ff bb2e 	b.w	801174a <_dtoa_r+0x32>
 80120ee:	693a      	ldr	r2, [r7, #16]
 80120f0:	3202      	adds	r2, #2
 80120f2:	0092      	lsls	r2, r2, #2
 80120f4:	f107 010c 	add.w	r1, r7, #12
 80120f8:	300c      	adds	r0, #12
 80120fa:	f7ff fa76 	bl	80115ea <memcpy>
 80120fe:	2201      	movs	r2, #1
 8012100:	4629      	mov	r1, r5
 8012102:	4620      	mov	r0, r4
 8012104:	f000 fb56 	bl	80127b4 <__lshift>
 8012108:	9b00      	ldr	r3, [sp, #0]
 801210a:	3301      	adds	r3, #1
 801210c:	9304      	str	r3, [sp, #16]
 801210e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012112:	4413      	add	r3, r2
 8012114:	9308      	str	r3, [sp, #32]
 8012116:	9b02      	ldr	r3, [sp, #8]
 8012118:	f003 0301 	and.w	r3, r3, #1
 801211c:	46b8      	mov	r8, r7
 801211e:	9306      	str	r3, [sp, #24]
 8012120:	4607      	mov	r7, r0
 8012122:	9b04      	ldr	r3, [sp, #16]
 8012124:	4631      	mov	r1, r6
 8012126:	3b01      	subs	r3, #1
 8012128:	4650      	mov	r0, sl
 801212a:	9301      	str	r3, [sp, #4]
 801212c:	f7ff fa6b 	bl	8011606 <quorem>
 8012130:	4641      	mov	r1, r8
 8012132:	9002      	str	r0, [sp, #8]
 8012134:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012138:	4650      	mov	r0, sl
 801213a:	f000 fba7 	bl	801288c <__mcmp>
 801213e:	463a      	mov	r2, r7
 8012140:	9005      	str	r0, [sp, #20]
 8012142:	4631      	mov	r1, r6
 8012144:	4620      	mov	r0, r4
 8012146:	f000 fbbd 	bl	80128c4 <__mdiff>
 801214a:	68c2      	ldr	r2, [r0, #12]
 801214c:	4605      	mov	r5, r0
 801214e:	bb02      	cbnz	r2, 8012192 <_dtoa_r+0xa7a>
 8012150:	4601      	mov	r1, r0
 8012152:	4650      	mov	r0, sl
 8012154:	f000 fb9a 	bl	801288c <__mcmp>
 8012158:	4602      	mov	r2, r0
 801215a:	4629      	mov	r1, r5
 801215c:	4620      	mov	r0, r4
 801215e:	9209      	str	r2, [sp, #36]	; 0x24
 8012160:	f000 f958 	bl	8012414 <_Bfree>
 8012164:	9b07      	ldr	r3, [sp, #28]
 8012166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012168:	9d04      	ldr	r5, [sp, #16]
 801216a:	ea43 0102 	orr.w	r1, r3, r2
 801216e:	9b06      	ldr	r3, [sp, #24]
 8012170:	4319      	orrs	r1, r3
 8012172:	d110      	bne.n	8012196 <_dtoa_r+0xa7e>
 8012174:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012178:	d029      	beq.n	80121ce <_dtoa_r+0xab6>
 801217a:	9b05      	ldr	r3, [sp, #20]
 801217c:	2b00      	cmp	r3, #0
 801217e:	dd02      	ble.n	8012186 <_dtoa_r+0xa6e>
 8012180:	9b02      	ldr	r3, [sp, #8]
 8012182:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012186:	9b01      	ldr	r3, [sp, #4]
 8012188:	f883 9000 	strb.w	r9, [r3]
 801218c:	e774      	b.n	8012078 <_dtoa_r+0x960>
 801218e:	4638      	mov	r0, r7
 8012190:	e7ba      	b.n	8012108 <_dtoa_r+0x9f0>
 8012192:	2201      	movs	r2, #1
 8012194:	e7e1      	b.n	801215a <_dtoa_r+0xa42>
 8012196:	9b05      	ldr	r3, [sp, #20]
 8012198:	2b00      	cmp	r3, #0
 801219a:	db04      	blt.n	80121a6 <_dtoa_r+0xa8e>
 801219c:	9907      	ldr	r1, [sp, #28]
 801219e:	430b      	orrs	r3, r1
 80121a0:	9906      	ldr	r1, [sp, #24]
 80121a2:	430b      	orrs	r3, r1
 80121a4:	d120      	bne.n	80121e8 <_dtoa_r+0xad0>
 80121a6:	2a00      	cmp	r2, #0
 80121a8:	dded      	ble.n	8012186 <_dtoa_r+0xa6e>
 80121aa:	4651      	mov	r1, sl
 80121ac:	2201      	movs	r2, #1
 80121ae:	4620      	mov	r0, r4
 80121b0:	f000 fb00 	bl	80127b4 <__lshift>
 80121b4:	4631      	mov	r1, r6
 80121b6:	4682      	mov	sl, r0
 80121b8:	f000 fb68 	bl	801288c <__mcmp>
 80121bc:	2800      	cmp	r0, #0
 80121be:	dc03      	bgt.n	80121c8 <_dtoa_r+0xab0>
 80121c0:	d1e1      	bne.n	8012186 <_dtoa_r+0xa6e>
 80121c2:	f019 0f01 	tst.w	r9, #1
 80121c6:	d0de      	beq.n	8012186 <_dtoa_r+0xa6e>
 80121c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80121cc:	d1d8      	bne.n	8012180 <_dtoa_r+0xa68>
 80121ce:	9a01      	ldr	r2, [sp, #4]
 80121d0:	2339      	movs	r3, #57	; 0x39
 80121d2:	7013      	strb	r3, [r2, #0]
 80121d4:	462b      	mov	r3, r5
 80121d6:	461d      	mov	r5, r3
 80121d8:	3b01      	subs	r3, #1
 80121da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80121de:	2a39      	cmp	r2, #57	; 0x39
 80121e0:	d06c      	beq.n	80122bc <_dtoa_r+0xba4>
 80121e2:	3201      	adds	r2, #1
 80121e4:	701a      	strb	r2, [r3, #0]
 80121e6:	e747      	b.n	8012078 <_dtoa_r+0x960>
 80121e8:	2a00      	cmp	r2, #0
 80121ea:	dd07      	ble.n	80121fc <_dtoa_r+0xae4>
 80121ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80121f0:	d0ed      	beq.n	80121ce <_dtoa_r+0xab6>
 80121f2:	9a01      	ldr	r2, [sp, #4]
 80121f4:	f109 0301 	add.w	r3, r9, #1
 80121f8:	7013      	strb	r3, [r2, #0]
 80121fa:	e73d      	b.n	8012078 <_dtoa_r+0x960>
 80121fc:	9b04      	ldr	r3, [sp, #16]
 80121fe:	9a08      	ldr	r2, [sp, #32]
 8012200:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012204:	4293      	cmp	r3, r2
 8012206:	d043      	beq.n	8012290 <_dtoa_r+0xb78>
 8012208:	4651      	mov	r1, sl
 801220a:	2300      	movs	r3, #0
 801220c:	220a      	movs	r2, #10
 801220e:	4620      	mov	r0, r4
 8012210:	f000 f922 	bl	8012458 <__multadd>
 8012214:	45b8      	cmp	r8, r7
 8012216:	4682      	mov	sl, r0
 8012218:	f04f 0300 	mov.w	r3, #0
 801221c:	f04f 020a 	mov.w	r2, #10
 8012220:	4641      	mov	r1, r8
 8012222:	4620      	mov	r0, r4
 8012224:	d107      	bne.n	8012236 <_dtoa_r+0xb1e>
 8012226:	f000 f917 	bl	8012458 <__multadd>
 801222a:	4680      	mov	r8, r0
 801222c:	4607      	mov	r7, r0
 801222e:	9b04      	ldr	r3, [sp, #16]
 8012230:	3301      	adds	r3, #1
 8012232:	9304      	str	r3, [sp, #16]
 8012234:	e775      	b.n	8012122 <_dtoa_r+0xa0a>
 8012236:	f000 f90f 	bl	8012458 <__multadd>
 801223a:	4639      	mov	r1, r7
 801223c:	4680      	mov	r8, r0
 801223e:	2300      	movs	r3, #0
 8012240:	220a      	movs	r2, #10
 8012242:	4620      	mov	r0, r4
 8012244:	f000 f908 	bl	8012458 <__multadd>
 8012248:	4607      	mov	r7, r0
 801224a:	e7f0      	b.n	801222e <_dtoa_r+0xb16>
 801224c:	9b04      	ldr	r3, [sp, #16]
 801224e:	9301      	str	r3, [sp, #4]
 8012250:	9d00      	ldr	r5, [sp, #0]
 8012252:	4631      	mov	r1, r6
 8012254:	4650      	mov	r0, sl
 8012256:	f7ff f9d6 	bl	8011606 <quorem>
 801225a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801225e:	9b00      	ldr	r3, [sp, #0]
 8012260:	f805 9b01 	strb.w	r9, [r5], #1
 8012264:	1aea      	subs	r2, r5, r3
 8012266:	9b01      	ldr	r3, [sp, #4]
 8012268:	4293      	cmp	r3, r2
 801226a:	dd07      	ble.n	801227c <_dtoa_r+0xb64>
 801226c:	4651      	mov	r1, sl
 801226e:	2300      	movs	r3, #0
 8012270:	220a      	movs	r2, #10
 8012272:	4620      	mov	r0, r4
 8012274:	f000 f8f0 	bl	8012458 <__multadd>
 8012278:	4682      	mov	sl, r0
 801227a:	e7ea      	b.n	8012252 <_dtoa_r+0xb3a>
 801227c:	9b01      	ldr	r3, [sp, #4]
 801227e:	2b00      	cmp	r3, #0
 8012280:	bfc8      	it	gt
 8012282:	461d      	movgt	r5, r3
 8012284:	9b00      	ldr	r3, [sp, #0]
 8012286:	bfd8      	it	le
 8012288:	2501      	movle	r5, #1
 801228a:	441d      	add	r5, r3
 801228c:	f04f 0800 	mov.w	r8, #0
 8012290:	4651      	mov	r1, sl
 8012292:	2201      	movs	r2, #1
 8012294:	4620      	mov	r0, r4
 8012296:	f000 fa8d 	bl	80127b4 <__lshift>
 801229a:	4631      	mov	r1, r6
 801229c:	4682      	mov	sl, r0
 801229e:	f000 faf5 	bl	801288c <__mcmp>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	dc96      	bgt.n	80121d4 <_dtoa_r+0xabc>
 80122a6:	d102      	bne.n	80122ae <_dtoa_r+0xb96>
 80122a8:	f019 0f01 	tst.w	r9, #1
 80122ac:	d192      	bne.n	80121d4 <_dtoa_r+0xabc>
 80122ae:	462b      	mov	r3, r5
 80122b0:	461d      	mov	r5, r3
 80122b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122b6:	2a30      	cmp	r2, #48	; 0x30
 80122b8:	d0fa      	beq.n	80122b0 <_dtoa_r+0xb98>
 80122ba:	e6dd      	b.n	8012078 <_dtoa_r+0x960>
 80122bc:	9a00      	ldr	r2, [sp, #0]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d189      	bne.n	80121d6 <_dtoa_r+0xabe>
 80122c2:	f10b 0b01 	add.w	fp, fp, #1
 80122c6:	2331      	movs	r3, #49	; 0x31
 80122c8:	e796      	b.n	80121f8 <_dtoa_r+0xae0>
 80122ca:	4b0a      	ldr	r3, [pc, #40]	; (80122f4 <_dtoa_r+0xbdc>)
 80122cc:	f7ff ba99 	b.w	8011802 <_dtoa_r+0xea>
 80122d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f47f aa6d 	bne.w	80117b2 <_dtoa_r+0x9a>
 80122d8:	4b07      	ldr	r3, [pc, #28]	; (80122f8 <_dtoa_r+0xbe0>)
 80122da:	f7ff ba92 	b.w	8011802 <_dtoa_r+0xea>
 80122de:	9b01      	ldr	r3, [sp, #4]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	dcb5      	bgt.n	8012250 <_dtoa_r+0xb38>
 80122e4:	9b07      	ldr	r3, [sp, #28]
 80122e6:	2b02      	cmp	r3, #2
 80122e8:	f73f aeb1 	bgt.w	801204e <_dtoa_r+0x936>
 80122ec:	e7b0      	b.n	8012250 <_dtoa_r+0xb38>
 80122ee:	bf00      	nop
 80122f0:	080151a4 	.word	0x080151a4
 80122f4:	08015104 	.word	0x08015104
 80122f8:	08015128 	.word	0x08015128

080122fc <_free_r>:
 80122fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122fe:	2900      	cmp	r1, #0
 8012300:	d044      	beq.n	801238c <_free_r+0x90>
 8012302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012306:	9001      	str	r0, [sp, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	f1a1 0404 	sub.w	r4, r1, #4
 801230e:	bfb8      	it	lt
 8012310:	18e4      	addlt	r4, r4, r3
 8012312:	f7fe fb43 	bl	801099c <__malloc_lock>
 8012316:	4a1e      	ldr	r2, [pc, #120]	; (8012390 <_free_r+0x94>)
 8012318:	9801      	ldr	r0, [sp, #4]
 801231a:	6813      	ldr	r3, [r2, #0]
 801231c:	b933      	cbnz	r3, 801232c <_free_r+0x30>
 801231e:	6063      	str	r3, [r4, #4]
 8012320:	6014      	str	r4, [r2, #0]
 8012322:	b003      	add	sp, #12
 8012324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012328:	f7fe bb3e 	b.w	80109a8 <__malloc_unlock>
 801232c:	42a3      	cmp	r3, r4
 801232e:	d908      	bls.n	8012342 <_free_r+0x46>
 8012330:	6825      	ldr	r5, [r4, #0]
 8012332:	1961      	adds	r1, r4, r5
 8012334:	428b      	cmp	r3, r1
 8012336:	bf01      	itttt	eq
 8012338:	6819      	ldreq	r1, [r3, #0]
 801233a:	685b      	ldreq	r3, [r3, #4]
 801233c:	1949      	addeq	r1, r1, r5
 801233e:	6021      	streq	r1, [r4, #0]
 8012340:	e7ed      	b.n	801231e <_free_r+0x22>
 8012342:	461a      	mov	r2, r3
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	b10b      	cbz	r3, 801234c <_free_r+0x50>
 8012348:	42a3      	cmp	r3, r4
 801234a:	d9fa      	bls.n	8012342 <_free_r+0x46>
 801234c:	6811      	ldr	r1, [r2, #0]
 801234e:	1855      	adds	r5, r2, r1
 8012350:	42a5      	cmp	r5, r4
 8012352:	d10b      	bne.n	801236c <_free_r+0x70>
 8012354:	6824      	ldr	r4, [r4, #0]
 8012356:	4421      	add	r1, r4
 8012358:	1854      	adds	r4, r2, r1
 801235a:	42a3      	cmp	r3, r4
 801235c:	6011      	str	r1, [r2, #0]
 801235e:	d1e0      	bne.n	8012322 <_free_r+0x26>
 8012360:	681c      	ldr	r4, [r3, #0]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	6053      	str	r3, [r2, #4]
 8012366:	440c      	add	r4, r1
 8012368:	6014      	str	r4, [r2, #0]
 801236a:	e7da      	b.n	8012322 <_free_r+0x26>
 801236c:	d902      	bls.n	8012374 <_free_r+0x78>
 801236e:	230c      	movs	r3, #12
 8012370:	6003      	str	r3, [r0, #0]
 8012372:	e7d6      	b.n	8012322 <_free_r+0x26>
 8012374:	6825      	ldr	r5, [r4, #0]
 8012376:	1961      	adds	r1, r4, r5
 8012378:	428b      	cmp	r3, r1
 801237a:	bf04      	itt	eq
 801237c:	6819      	ldreq	r1, [r3, #0]
 801237e:	685b      	ldreq	r3, [r3, #4]
 8012380:	6063      	str	r3, [r4, #4]
 8012382:	bf04      	itt	eq
 8012384:	1949      	addeq	r1, r1, r5
 8012386:	6021      	streq	r1, [r4, #0]
 8012388:	6054      	str	r4, [r2, #4]
 801238a:	e7ca      	b.n	8012322 <_free_r+0x26>
 801238c:	b003      	add	sp, #12
 801238e:	bd30      	pop	{r4, r5, pc}
 8012390:	200063ac 	.word	0x200063ac

08012394 <_Balloc>:
 8012394:	b570      	push	{r4, r5, r6, lr}
 8012396:	69c6      	ldr	r6, [r0, #28]
 8012398:	4604      	mov	r4, r0
 801239a:	460d      	mov	r5, r1
 801239c:	b976      	cbnz	r6, 80123bc <_Balloc+0x28>
 801239e:	2010      	movs	r0, #16
 80123a0:	f7fe fa54 	bl	801084c <malloc>
 80123a4:	4602      	mov	r2, r0
 80123a6:	61e0      	str	r0, [r4, #28]
 80123a8:	b920      	cbnz	r0, 80123b4 <_Balloc+0x20>
 80123aa:	4b18      	ldr	r3, [pc, #96]	; (801240c <_Balloc+0x78>)
 80123ac:	4818      	ldr	r0, [pc, #96]	; (8012410 <_Balloc+0x7c>)
 80123ae:	216b      	movs	r1, #107	; 0x6b
 80123b0:	f000 fd8c 	bl	8012ecc <__assert_func>
 80123b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80123b8:	6006      	str	r6, [r0, #0]
 80123ba:	60c6      	str	r6, [r0, #12]
 80123bc:	69e6      	ldr	r6, [r4, #28]
 80123be:	68f3      	ldr	r3, [r6, #12]
 80123c0:	b183      	cbz	r3, 80123e4 <_Balloc+0x50>
 80123c2:	69e3      	ldr	r3, [r4, #28]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80123ca:	b9b8      	cbnz	r0, 80123fc <_Balloc+0x68>
 80123cc:	2101      	movs	r1, #1
 80123ce:	fa01 f605 	lsl.w	r6, r1, r5
 80123d2:	1d72      	adds	r2, r6, #5
 80123d4:	0092      	lsls	r2, r2, #2
 80123d6:	4620      	mov	r0, r4
 80123d8:	f000 fd96 	bl	8012f08 <_calloc_r>
 80123dc:	b160      	cbz	r0, 80123f8 <_Balloc+0x64>
 80123de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80123e2:	e00e      	b.n	8012402 <_Balloc+0x6e>
 80123e4:	2221      	movs	r2, #33	; 0x21
 80123e6:	2104      	movs	r1, #4
 80123e8:	4620      	mov	r0, r4
 80123ea:	f000 fd8d 	bl	8012f08 <_calloc_r>
 80123ee:	69e3      	ldr	r3, [r4, #28]
 80123f0:	60f0      	str	r0, [r6, #12]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d1e4      	bne.n	80123c2 <_Balloc+0x2e>
 80123f8:	2000      	movs	r0, #0
 80123fa:	bd70      	pop	{r4, r5, r6, pc}
 80123fc:	6802      	ldr	r2, [r0, #0]
 80123fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012402:	2300      	movs	r3, #0
 8012404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012408:	e7f7      	b.n	80123fa <_Balloc+0x66>
 801240a:	bf00      	nop
 801240c:	08015135 	.word	0x08015135
 8012410:	080151b5 	.word	0x080151b5

08012414 <_Bfree>:
 8012414:	b570      	push	{r4, r5, r6, lr}
 8012416:	69c6      	ldr	r6, [r0, #28]
 8012418:	4605      	mov	r5, r0
 801241a:	460c      	mov	r4, r1
 801241c:	b976      	cbnz	r6, 801243c <_Bfree+0x28>
 801241e:	2010      	movs	r0, #16
 8012420:	f7fe fa14 	bl	801084c <malloc>
 8012424:	4602      	mov	r2, r0
 8012426:	61e8      	str	r0, [r5, #28]
 8012428:	b920      	cbnz	r0, 8012434 <_Bfree+0x20>
 801242a:	4b09      	ldr	r3, [pc, #36]	; (8012450 <_Bfree+0x3c>)
 801242c:	4809      	ldr	r0, [pc, #36]	; (8012454 <_Bfree+0x40>)
 801242e:	218f      	movs	r1, #143	; 0x8f
 8012430:	f000 fd4c 	bl	8012ecc <__assert_func>
 8012434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012438:	6006      	str	r6, [r0, #0]
 801243a:	60c6      	str	r6, [r0, #12]
 801243c:	b13c      	cbz	r4, 801244e <_Bfree+0x3a>
 801243e:	69eb      	ldr	r3, [r5, #28]
 8012440:	6862      	ldr	r2, [r4, #4]
 8012442:	68db      	ldr	r3, [r3, #12]
 8012444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012448:	6021      	str	r1, [r4, #0]
 801244a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801244e:	bd70      	pop	{r4, r5, r6, pc}
 8012450:	08015135 	.word	0x08015135
 8012454:	080151b5 	.word	0x080151b5

08012458 <__multadd>:
 8012458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801245c:	690d      	ldr	r5, [r1, #16]
 801245e:	4607      	mov	r7, r0
 8012460:	460c      	mov	r4, r1
 8012462:	461e      	mov	r6, r3
 8012464:	f101 0c14 	add.w	ip, r1, #20
 8012468:	2000      	movs	r0, #0
 801246a:	f8dc 3000 	ldr.w	r3, [ip]
 801246e:	b299      	uxth	r1, r3
 8012470:	fb02 6101 	mla	r1, r2, r1, r6
 8012474:	0c1e      	lsrs	r6, r3, #16
 8012476:	0c0b      	lsrs	r3, r1, #16
 8012478:	fb02 3306 	mla	r3, r2, r6, r3
 801247c:	b289      	uxth	r1, r1
 801247e:	3001      	adds	r0, #1
 8012480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012484:	4285      	cmp	r5, r0
 8012486:	f84c 1b04 	str.w	r1, [ip], #4
 801248a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801248e:	dcec      	bgt.n	801246a <__multadd+0x12>
 8012490:	b30e      	cbz	r6, 80124d6 <__multadd+0x7e>
 8012492:	68a3      	ldr	r3, [r4, #8]
 8012494:	42ab      	cmp	r3, r5
 8012496:	dc19      	bgt.n	80124cc <__multadd+0x74>
 8012498:	6861      	ldr	r1, [r4, #4]
 801249a:	4638      	mov	r0, r7
 801249c:	3101      	adds	r1, #1
 801249e:	f7ff ff79 	bl	8012394 <_Balloc>
 80124a2:	4680      	mov	r8, r0
 80124a4:	b928      	cbnz	r0, 80124b2 <__multadd+0x5a>
 80124a6:	4602      	mov	r2, r0
 80124a8:	4b0c      	ldr	r3, [pc, #48]	; (80124dc <__multadd+0x84>)
 80124aa:	480d      	ldr	r0, [pc, #52]	; (80124e0 <__multadd+0x88>)
 80124ac:	21ba      	movs	r1, #186	; 0xba
 80124ae:	f000 fd0d 	bl	8012ecc <__assert_func>
 80124b2:	6922      	ldr	r2, [r4, #16]
 80124b4:	3202      	adds	r2, #2
 80124b6:	f104 010c 	add.w	r1, r4, #12
 80124ba:	0092      	lsls	r2, r2, #2
 80124bc:	300c      	adds	r0, #12
 80124be:	f7ff f894 	bl	80115ea <memcpy>
 80124c2:	4621      	mov	r1, r4
 80124c4:	4638      	mov	r0, r7
 80124c6:	f7ff ffa5 	bl	8012414 <_Bfree>
 80124ca:	4644      	mov	r4, r8
 80124cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80124d0:	3501      	adds	r5, #1
 80124d2:	615e      	str	r6, [r3, #20]
 80124d4:	6125      	str	r5, [r4, #16]
 80124d6:	4620      	mov	r0, r4
 80124d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124dc:	080151a4 	.word	0x080151a4
 80124e0:	080151b5 	.word	0x080151b5

080124e4 <__hi0bits>:
 80124e4:	0c03      	lsrs	r3, r0, #16
 80124e6:	041b      	lsls	r3, r3, #16
 80124e8:	b9d3      	cbnz	r3, 8012520 <__hi0bits+0x3c>
 80124ea:	0400      	lsls	r0, r0, #16
 80124ec:	2310      	movs	r3, #16
 80124ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80124f2:	bf04      	itt	eq
 80124f4:	0200      	lsleq	r0, r0, #8
 80124f6:	3308      	addeq	r3, #8
 80124f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80124fc:	bf04      	itt	eq
 80124fe:	0100      	lsleq	r0, r0, #4
 8012500:	3304      	addeq	r3, #4
 8012502:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012506:	bf04      	itt	eq
 8012508:	0080      	lsleq	r0, r0, #2
 801250a:	3302      	addeq	r3, #2
 801250c:	2800      	cmp	r0, #0
 801250e:	db05      	blt.n	801251c <__hi0bits+0x38>
 8012510:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012514:	f103 0301 	add.w	r3, r3, #1
 8012518:	bf08      	it	eq
 801251a:	2320      	moveq	r3, #32
 801251c:	4618      	mov	r0, r3
 801251e:	4770      	bx	lr
 8012520:	2300      	movs	r3, #0
 8012522:	e7e4      	b.n	80124ee <__hi0bits+0xa>

08012524 <__lo0bits>:
 8012524:	6803      	ldr	r3, [r0, #0]
 8012526:	f013 0207 	ands.w	r2, r3, #7
 801252a:	d00c      	beq.n	8012546 <__lo0bits+0x22>
 801252c:	07d9      	lsls	r1, r3, #31
 801252e:	d422      	bmi.n	8012576 <__lo0bits+0x52>
 8012530:	079a      	lsls	r2, r3, #30
 8012532:	bf49      	itett	mi
 8012534:	085b      	lsrmi	r3, r3, #1
 8012536:	089b      	lsrpl	r3, r3, #2
 8012538:	6003      	strmi	r3, [r0, #0]
 801253a:	2201      	movmi	r2, #1
 801253c:	bf5c      	itt	pl
 801253e:	6003      	strpl	r3, [r0, #0]
 8012540:	2202      	movpl	r2, #2
 8012542:	4610      	mov	r0, r2
 8012544:	4770      	bx	lr
 8012546:	b299      	uxth	r1, r3
 8012548:	b909      	cbnz	r1, 801254e <__lo0bits+0x2a>
 801254a:	0c1b      	lsrs	r3, r3, #16
 801254c:	2210      	movs	r2, #16
 801254e:	b2d9      	uxtb	r1, r3
 8012550:	b909      	cbnz	r1, 8012556 <__lo0bits+0x32>
 8012552:	3208      	adds	r2, #8
 8012554:	0a1b      	lsrs	r3, r3, #8
 8012556:	0719      	lsls	r1, r3, #28
 8012558:	bf04      	itt	eq
 801255a:	091b      	lsreq	r3, r3, #4
 801255c:	3204      	addeq	r2, #4
 801255e:	0799      	lsls	r1, r3, #30
 8012560:	bf04      	itt	eq
 8012562:	089b      	lsreq	r3, r3, #2
 8012564:	3202      	addeq	r2, #2
 8012566:	07d9      	lsls	r1, r3, #31
 8012568:	d403      	bmi.n	8012572 <__lo0bits+0x4e>
 801256a:	085b      	lsrs	r3, r3, #1
 801256c:	f102 0201 	add.w	r2, r2, #1
 8012570:	d003      	beq.n	801257a <__lo0bits+0x56>
 8012572:	6003      	str	r3, [r0, #0]
 8012574:	e7e5      	b.n	8012542 <__lo0bits+0x1e>
 8012576:	2200      	movs	r2, #0
 8012578:	e7e3      	b.n	8012542 <__lo0bits+0x1e>
 801257a:	2220      	movs	r2, #32
 801257c:	e7e1      	b.n	8012542 <__lo0bits+0x1e>
	...

08012580 <__i2b>:
 8012580:	b510      	push	{r4, lr}
 8012582:	460c      	mov	r4, r1
 8012584:	2101      	movs	r1, #1
 8012586:	f7ff ff05 	bl	8012394 <_Balloc>
 801258a:	4602      	mov	r2, r0
 801258c:	b928      	cbnz	r0, 801259a <__i2b+0x1a>
 801258e:	4b05      	ldr	r3, [pc, #20]	; (80125a4 <__i2b+0x24>)
 8012590:	4805      	ldr	r0, [pc, #20]	; (80125a8 <__i2b+0x28>)
 8012592:	f240 1145 	movw	r1, #325	; 0x145
 8012596:	f000 fc99 	bl	8012ecc <__assert_func>
 801259a:	2301      	movs	r3, #1
 801259c:	6144      	str	r4, [r0, #20]
 801259e:	6103      	str	r3, [r0, #16]
 80125a0:	bd10      	pop	{r4, pc}
 80125a2:	bf00      	nop
 80125a4:	080151a4 	.word	0x080151a4
 80125a8:	080151b5 	.word	0x080151b5

080125ac <__multiply>:
 80125ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b0:	4691      	mov	r9, r2
 80125b2:	690a      	ldr	r2, [r1, #16]
 80125b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	bfb8      	it	lt
 80125bc:	460b      	movlt	r3, r1
 80125be:	460c      	mov	r4, r1
 80125c0:	bfbc      	itt	lt
 80125c2:	464c      	movlt	r4, r9
 80125c4:	4699      	movlt	r9, r3
 80125c6:	6927      	ldr	r7, [r4, #16]
 80125c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80125cc:	68a3      	ldr	r3, [r4, #8]
 80125ce:	6861      	ldr	r1, [r4, #4]
 80125d0:	eb07 060a 	add.w	r6, r7, sl
 80125d4:	42b3      	cmp	r3, r6
 80125d6:	b085      	sub	sp, #20
 80125d8:	bfb8      	it	lt
 80125da:	3101      	addlt	r1, #1
 80125dc:	f7ff feda 	bl	8012394 <_Balloc>
 80125e0:	b930      	cbnz	r0, 80125f0 <__multiply+0x44>
 80125e2:	4602      	mov	r2, r0
 80125e4:	4b44      	ldr	r3, [pc, #272]	; (80126f8 <__multiply+0x14c>)
 80125e6:	4845      	ldr	r0, [pc, #276]	; (80126fc <__multiply+0x150>)
 80125e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80125ec:	f000 fc6e 	bl	8012ecc <__assert_func>
 80125f0:	f100 0514 	add.w	r5, r0, #20
 80125f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80125f8:	462b      	mov	r3, r5
 80125fa:	2200      	movs	r2, #0
 80125fc:	4543      	cmp	r3, r8
 80125fe:	d321      	bcc.n	8012644 <__multiply+0x98>
 8012600:	f104 0314 	add.w	r3, r4, #20
 8012604:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012608:	f109 0314 	add.w	r3, r9, #20
 801260c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012610:	9202      	str	r2, [sp, #8]
 8012612:	1b3a      	subs	r2, r7, r4
 8012614:	3a15      	subs	r2, #21
 8012616:	f022 0203 	bic.w	r2, r2, #3
 801261a:	3204      	adds	r2, #4
 801261c:	f104 0115 	add.w	r1, r4, #21
 8012620:	428f      	cmp	r7, r1
 8012622:	bf38      	it	cc
 8012624:	2204      	movcc	r2, #4
 8012626:	9201      	str	r2, [sp, #4]
 8012628:	9a02      	ldr	r2, [sp, #8]
 801262a:	9303      	str	r3, [sp, #12]
 801262c:	429a      	cmp	r2, r3
 801262e:	d80c      	bhi.n	801264a <__multiply+0x9e>
 8012630:	2e00      	cmp	r6, #0
 8012632:	dd03      	ble.n	801263c <__multiply+0x90>
 8012634:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012638:	2b00      	cmp	r3, #0
 801263a:	d05b      	beq.n	80126f4 <__multiply+0x148>
 801263c:	6106      	str	r6, [r0, #16]
 801263e:	b005      	add	sp, #20
 8012640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012644:	f843 2b04 	str.w	r2, [r3], #4
 8012648:	e7d8      	b.n	80125fc <__multiply+0x50>
 801264a:	f8b3 a000 	ldrh.w	sl, [r3]
 801264e:	f1ba 0f00 	cmp.w	sl, #0
 8012652:	d024      	beq.n	801269e <__multiply+0xf2>
 8012654:	f104 0e14 	add.w	lr, r4, #20
 8012658:	46a9      	mov	r9, r5
 801265a:	f04f 0c00 	mov.w	ip, #0
 801265e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012662:	f8d9 1000 	ldr.w	r1, [r9]
 8012666:	fa1f fb82 	uxth.w	fp, r2
 801266a:	b289      	uxth	r1, r1
 801266c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012670:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012674:	f8d9 2000 	ldr.w	r2, [r9]
 8012678:	4461      	add	r1, ip
 801267a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801267e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012686:	b289      	uxth	r1, r1
 8012688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801268c:	4577      	cmp	r7, lr
 801268e:	f849 1b04 	str.w	r1, [r9], #4
 8012692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012696:	d8e2      	bhi.n	801265e <__multiply+0xb2>
 8012698:	9a01      	ldr	r2, [sp, #4]
 801269a:	f845 c002 	str.w	ip, [r5, r2]
 801269e:	9a03      	ldr	r2, [sp, #12]
 80126a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80126a4:	3304      	adds	r3, #4
 80126a6:	f1b9 0f00 	cmp.w	r9, #0
 80126aa:	d021      	beq.n	80126f0 <__multiply+0x144>
 80126ac:	6829      	ldr	r1, [r5, #0]
 80126ae:	f104 0c14 	add.w	ip, r4, #20
 80126b2:	46ae      	mov	lr, r5
 80126b4:	f04f 0a00 	mov.w	sl, #0
 80126b8:	f8bc b000 	ldrh.w	fp, [ip]
 80126bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80126c0:	fb09 220b 	mla	r2, r9, fp, r2
 80126c4:	4452      	add	r2, sl
 80126c6:	b289      	uxth	r1, r1
 80126c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80126cc:	f84e 1b04 	str.w	r1, [lr], #4
 80126d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80126d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80126d8:	f8be 1000 	ldrh.w	r1, [lr]
 80126dc:	fb09 110a 	mla	r1, r9, sl, r1
 80126e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80126e4:	4567      	cmp	r7, ip
 80126e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80126ea:	d8e5      	bhi.n	80126b8 <__multiply+0x10c>
 80126ec:	9a01      	ldr	r2, [sp, #4]
 80126ee:	50a9      	str	r1, [r5, r2]
 80126f0:	3504      	adds	r5, #4
 80126f2:	e799      	b.n	8012628 <__multiply+0x7c>
 80126f4:	3e01      	subs	r6, #1
 80126f6:	e79b      	b.n	8012630 <__multiply+0x84>
 80126f8:	080151a4 	.word	0x080151a4
 80126fc:	080151b5 	.word	0x080151b5

08012700 <__pow5mult>:
 8012700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012704:	4615      	mov	r5, r2
 8012706:	f012 0203 	ands.w	r2, r2, #3
 801270a:	4606      	mov	r6, r0
 801270c:	460f      	mov	r7, r1
 801270e:	d007      	beq.n	8012720 <__pow5mult+0x20>
 8012710:	4c25      	ldr	r4, [pc, #148]	; (80127a8 <__pow5mult+0xa8>)
 8012712:	3a01      	subs	r2, #1
 8012714:	2300      	movs	r3, #0
 8012716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801271a:	f7ff fe9d 	bl	8012458 <__multadd>
 801271e:	4607      	mov	r7, r0
 8012720:	10ad      	asrs	r5, r5, #2
 8012722:	d03d      	beq.n	80127a0 <__pow5mult+0xa0>
 8012724:	69f4      	ldr	r4, [r6, #28]
 8012726:	b97c      	cbnz	r4, 8012748 <__pow5mult+0x48>
 8012728:	2010      	movs	r0, #16
 801272a:	f7fe f88f 	bl	801084c <malloc>
 801272e:	4602      	mov	r2, r0
 8012730:	61f0      	str	r0, [r6, #28]
 8012732:	b928      	cbnz	r0, 8012740 <__pow5mult+0x40>
 8012734:	4b1d      	ldr	r3, [pc, #116]	; (80127ac <__pow5mult+0xac>)
 8012736:	481e      	ldr	r0, [pc, #120]	; (80127b0 <__pow5mult+0xb0>)
 8012738:	f240 11b3 	movw	r1, #435	; 0x1b3
 801273c:	f000 fbc6 	bl	8012ecc <__assert_func>
 8012740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012744:	6004      	str	r4, [r0, #0]
 8012746:	60c4      	str	r4, [r0, #12]
 8012748:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801274c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012750:	b94c      	cbnz	r4, 8012766 <__pow5mult+0x66>
 8012752:	f240 2171 	movw	r1, #625	; 0x271
 8012756:	4630      	mov	r0, r6
 8012758:	f7ff ff12 	bl	8012580 <__i2b>
 801275c:	2300      	movs	r3, #0
 801275e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012762:	4604      	mov	r4, r0
 8012764:	6003      	str	r3, [r0, #0]
 8012766:	f04f 0900 	mov.w	r9, #0
 801276a:	07eb      	lsls	r3, r5, #31
 801276c:	d50a      	bpl.n	8012784 <__pow5mult+0x84>
 801276e:	4639      	mov	r1, r7
 8012770:	4622      	mov	r2, r4
 8012772:	4630      	mov	r0, r6
 8012774:	f7ff ff1a 	bl	80125ac <__multiply>
 8012778:	4639      	mov	r1, r7
 801277a:	4680      	mov	r8, r0
 801277c:	4630      	mov	r0, r6
 801277e:	f7ff fe49 	bl	8012414 <_Bfree>
 8012782:	4647      	mov	r7, r8
 8012784:	106d      	asrs	r5, r5, #1
 8012786:	d00b      	beq.n	80127a0 <__pow5mult+0xa0>
 8012788:	6820      	ldr	r0, [r4, #0]
 801278a:	b938      	cbnz	r0, 801279c <__pow5mult+0x9c>
 801278c:	4622      	mov	r2, r4
 801278e:	4621      	mov	r1, r4
 8012790:	4630      	mov	r0, r6
 8012792:	f7ff ff0b 	bl	80125ac <__multiply>
 8012796:	6020      	str	r0, [r4, #0]
 8012798:	f8c0 9000 	str.w	r9, [r0]
 801279c:	4604      	mov	r4, r0
 801279e:	e7e4      	b.n	801276a <__pow5mult+0x6a>
 80127a0:	4638      	mov	r0, r7
 80127a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127a6:	bf00      	nop
 80127a8:	08015300 	.word	0x08015300
 80127ac:	08015135 	.word	0x08015135
 80127b0:	080151b5 	.word	0x080151b5

080127b4 <__lshift>:
 80127b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b8:	460c      	mov	r4, r1
 80127ba:	6849      	ldr	r1, [r1, #4]
 80127bc:	6923      	ldr	r3, [r4, #16]
 80127be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80127c2:	68a3      	ldr	r3, [r4, #8]
 80127c4:	4607      	mov	r7, r0
 80127c6:	4691      	mov	r9, r2
 80127c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80127cc:	f108 0601 	add.w	r6, r8, #1
 80127d0:	42b3      	cmp	r3, r6
 80127d2:	db0b      	blt.n	80127ec <__lshift+0x38>
 80127d4:	4638      	mov	r0, r7
 80127d6:	f7ff fddd 	bl	8012394 <_Balloc>
 80127da:	4605      	mov	r5, r0
 80127dc:	b948      	cbnz	r0, 80127f2 <__lshift+0x3e>
 80127de:	4602      	mov	r2, r0
 80127e0:	4b28      	ldr	r3, [pc, #160]	; (8012884 <__lshift+0xd0>)
 80127e2:	4829      	ldr	r0, [pc, #164]	; (8012888 <__lshift+0xd4>)
 80127e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80127e8:	f000 fb70 	bl	8012ecc <__assert_func>
 80127ec:	3101      	adds	r1, #1
 80127ee:	005b      	lsls	r3, r3, #1
 80127f0:	e7ee      	b.n	80127d0 <__lshift+0x1c>
 80127f2:	2300      	movs	r3, #0
 80127f4:	f100 0114 	add.w	r1, r0, #20
 80127f8:	f100 0210 	add.w	r2, r0, #16
 80127fc:	4618      	mov	r0, r3
 80127fe:	4553      	cmp	r3, sl
 8012800:	db33      	blt.n	801286a <__lshift+0xb6>
 8012802:	6920      	ldr	r0, [r4, #16]
 8012804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012808:	f104 0314 	add.w	r3, r4, #20
 801280c:	f019 091f 	ands.w	r9, r9, #31
 8012810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012818:	d02b      	beq.n	8012872 <__lshift+0xbe>
 801281a:	f1c9 0e20 	rsb	lr, r9, #32
 801281e:	468a      	mov	sl, r1
 8012820:	2200      	movs	r2, #0
 8012822:	6818      	ldr	r0, [r3, #0]
 8012824:	fa00 f009 	lsl.w	r0, r0, r9
 8012828:	4310      	orrs	r0, r2
 801282a:	f84a 0b04 	str.w	r0, [sl], #4
 801282e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012832:	459c      	cmp	ip, r3
 8012834:	fa22 f20e 	lsr.w	r2, r2, lr
 8012838:	d8f3      	bhi.n	8012822 <__lshift+0x6e>
 801283a:	ebac 0304 	sub.w	r3, ip, r4
 801283e:	3b15      	subs	r3, #21
 8012840:	f023 0303 	bic.w	r3, r3, #3
 8012844:	3304      	adds	r3, #4
 8012846:	f104 0015 	add.w	r0, r4, #21
 801284a:	4584      	cmp	ip, r0
 801284c:	bf38      	it	cc
 801284e:	2304      	movcc	r3, #4
 8012850:	50ca      	str	r2, [r1, r3]
 8012852:	b10a      	cbz	r2, 8012858 <__lshift+0xa4>
 8012854:	f108 0602 	add.w	r6, r8, #2
 8012858:	3e01      	subs	r6, #1
 801285a:	4638      	mov	r0, r7
 801285c:	612e      	str	r6, [r5, #16]
 801285e:	4621      	mov	r1, r4
 8012860:	f7ff fdd8 	bl	8012414 <_Bfree>
 8012864:	4628      	mov	r0, r5
 8012866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801286a:	f842 0f04 	str.w	r0, [r2, #4]!
 801286e:	3301      	adds	r3, #1
 8012870:	e7c5      	b.n	80127fe <__lshift+0x4a>
 8012872:	3904      	subs	r1, #4
 8012874:	f853 2b04 	ldr.w	r2, [r3], #4
 8012878:	f841 2f04 	str.w	r2, [r1, #4]!
 801287c:	459c      	cmp	ip, r3
 801287e:	d8f9      	bhi.n	8012874 <__lshift+0xc0>
 8012880:	e7ea      	b.n	8012858 <__lshift+0xa4>
 8012882:	bf00      	nop
 8012884:	080151a4 	.word	0x080151a4
 8012888:	080151b5 	.word	0x080151b5

0801288c <__mcmp>:
 801288c:	b530      	push	{r4, r5, lr}
 801288e:	6902      	ldr	r2, [r0, #16]
 8012890:	690c      	ldr	r4, [r1, #16]
 8012892:	1b12      	subs	r2, r2, r4
 8012894:	d10e      	bne.n	80128b4 <__mcmp+0x28>
 8012896:	f100 0314 	add.w	r3, r0, #20
 801289a:	3114      	adds	r1, #20
 801289c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80128a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80128a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80128a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80128ac:	42a5      	cmp	r5, r4
 80128ae:	d003      	beq.n	80128b8 <__mcmp+0x2c>
 80128b0:	d305      	bcc.n	80128be <__mcmp+0x32>
 80128b2:	2201      	movs	r2, #1
 80128b4:	4610      	mov	r0, r2
 80128b6:	bd30      	pop	{r4, r5, pc}
 80128b8:	4283      	cmp	r3, r0
 80128ba:	d3f3      	bcc.n	80128a4 <__mcmp+0x18>
 80128bc:	e7fa      	b.n	80128b4 <__mcmp+0x28>
 80128be:	f04f 32ff 	mov.w	r2, #4294967295
 80128c2:	e7f7      	b.n	80128b4 <__mcmp+0x28>

080128c4 <__mdiff>:
 80128c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c8:	460c      	mov	r4, r1
 80128ca:	4606      	mov	r6, r0
 80128cc:	4611      	mov	r1, r2
 80128ce:	4620      	mov	r0, r4
 80128d0:	4690      	mov	r8, r2
 80128d2:	f7ff ffdb 	bl	801288c <__mcmp>
 80128d6:	1e05      	subs	r5, r0, #0
 80128d8:	d110      	bne.n	80128fc <__mdiff+0x38>
 80128da:	4629      	mov	r1, r5
 80128dc:	4630      	mov	r0, r6
 80128de:	f7ff fd59 	bl	8012394 <_Balloc>
 80128e2:	b930      	cbnz	r0, 80128f2 <__mdiff+0x2e>
 80128e4:	4b3a      	ldr	r3, [pc, #232]	; (80129d0 <__mdiff+0x10c>)
 80128e6:	4602      	mov	r2, r0
 80128e8:	f240 2137 	movw	r1, #567	; 0x237
 80128ec:	4839      	ldr	r0, [pc, #228]	; (80129d4 <__mdiff+0x110>)
 80128ee:	f000 faed 	bl	8012ecc <__assert_func>
 80128f2:	2301      	movs	r3, #1
 80128f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80128f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fc:	bfa4      	itt	ge
 80128fe:	4643      	movge	r3, r8
 8012900:	46a0      	movge	r8, r4
 8012902:	4630      	mov	r0, r6
 8012904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012908:	bfa6      	itte	ge
 801290a:	461c      	movge	r4, r3
 801290c:	2500      	movge	r5, #0
 801290e:	2501      	movlt	r5, #1
 8012910:	f7ff fd40 	bl	8012394 <_Balloc>
 8012914:	b920      	cbnz	r0, 8012920 <__mdiff+0x5c>
 8012916:	4b2e      	ldr	r3, [pc, #184]	; (80129d0 <__mdiff+0x10c>)
 8012918:	4602      	mov	r2, r0
 801291a:	f240 2145 	movw	r1, #581	; 0x245
 801291e:	e7e5      	b.n	80128ec <__mdiff+0x28>
 8012920:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012924:	6926      	ldr	r6, [r4, #16]
 8012926:	60c5      	str	r5, [r0, #12]
 8012928:	f104 0914 	add.w	r9, r4, #20
 801292c:	f108 0514 	add.w	r5, r8, #20
 8012930:	f100 0e14 	add.w	lr, r0, #20
 8012934:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012938:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801293c:	f108 0210 	add.w	r2, r8, #16
 8012940:	46f2      	mov	sl, lr
 8012942:	2100      	movs	r1, #0
 8012944:	f859 3b04 	ldr.w	r3, [r9], #4
 8012948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801294c:	fa11 f88b 	uxtah	r8, r1, fp
 8012950:	b299      	uxth	r1, r3
 8012952:	0c1b      	lsrs	r3, r3, #16
 8012954:	eba8 0801 	sub.w	r8, r8, r1
 8012958:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801295c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012960:	fa1f f888 	uxth.w	r8, r8
 8012964:	1419      	asrs	r1, r3, #16
 8012966:	454e      	cmp	r6, r9
 8012968:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801296c:	f84a 3b04 	str.w	r3, [sl], #4
 8012970:	d8e8      	bhi.n	8012944 <__mdiff+0x80>
 8012972:	1b33      	subs	r3, r6, r4
 8012974:	3b15      	subs	r3, #21
 8012976:	f023 0303 	bic.w	r3, r3, #3
 801297a:	3304      	adds	r3, #4
 801297c:	3415      	adds	r4, #21
 801297e:	42a6      	cmp	r6, r4
 8012980:	bf38      	it	cc
 8012982:	2304      	movcc	r3, #4
 8012984:	441d      	add	r5, r3
 8012986:	4473      	add	r3, lr
 8012988:	469e      	mov	lr, r3
 801298a:	462e      	mov	r6, r5
 801298c:	4566      	cmp	r6, ip
 801298e:	d30e      	bcc.n	80129ae <__mdiff+0xea>
 8012990:	f10c 0203 	add.w	r2, ip, #3
 8012994:	1b52      	subs	r2, r2, r5
 8012996:	f022 0203 	bic.w	r2, r2, #3
 801299a:	3d03      	subs	r5, #3
 801299c:	45ac      	cmp	ip, r5
 801299e:	bf38      	it	cc
 80129a0:	2200      	movcc	r2, #0
 80129a2:	4413      	add	r3, r2
 80129a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80129a8:	b17a      	cbz	r2, 80129ca <__mdiff+0x106>
 80129aa:	6107      	str	r7, [r0, #16]
 80129ac:	e7a4      	b.n	80128f8 <__mdiff+0x34>
 80129ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80129b2:	fa11 f288 	uxtah	r2, r1, r8
 80129b6:	1414      	asrs	r4, r2, #16
 80129b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80129bc:	b292      	uxth	r2, r2
 80129be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80129c2:	f84e 2b04 	str.w	r2, [lr], #4
 80129c6:	1421      	asrs	r1, r4, #16
 80129c8:	e7e0      	b.n	801298c <__mdiff+0xc8>
 80129ca:	3f01      	subs	r7, #1
 80129cc:	e7ea      	b.n	80129a4 <__mdiff+0xe0>
 80129ce:	bf00      	nop
 80129d0:	080151a4 	.word	0x080151a4
 80129d4:	080151b5 	.word	0x080151b5

080129d8 <__d2b>:
 80129d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129dc:	460f      	mov	r7, r1
 80129de:	2101      	movs	r1, #1
 80129e0:	ec59 8b10 	vmov	r8, r9, d0
 80129e4:	4616      	mov	r6, r2
 80129e6:	f7ff fcd5 	bl	8012394 <_Balloc>
 80129ea:	4604      	mov	r4, r0
 80129ec:	b930      	cbnz	r0, 80129fc <__d2b+0x24>
 80129ee:	4602      	mov	r2, r0
 80129f0:	4b24      	ldr	r3, [pc, #144]	; (8012a84 <__d2b+0xac>)
 80129f2:	4825      	ldr	r0, [pc, #148]	; (8012a88 <__d2b+0xb0>)
 80129f4:	f240 310f 	movw	r1, #783	; 0x30f
 80129f8:	f000 fa68 	bl	8012ecc <__assert_func>
 80129fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a04:	bb2d      	cbnz	r5, 8012a52 <__d2b+0x7a>
 8012a06:	9301      	str	r3, [sp, #4]
 8012a08:	f1b8 0300 	subs.w	r3, r8, #0
 8012a0c:	d026      	beq.n	8012a5c <__d2b+0x84>
 8012a0e:	4668      	mov	r0, sp
 8012a10:	9300      	str	r3, [sp, #0]
 8012a12:	f7ff fd87 	bl	8012524 <__lo0bits>
 8012a16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012a1a:	b1e8      	cbz	r0, 8012a58 <__d2b+0x80>
 8012a1c:	f1c0 0320 	rsb	r3, r0, #32
 8012a20:	fa02 f303 	lsl.w	r3, r2, r3
 8012a24:	430b      	orrs	r3, r1
 8012a26:	40c2      	lsrs	r2, r0
 8012a28:	6163      	str	r3, [r4, #20]
 8012a2a:	9201      	str	r2, [sp, #4]
 8012a2c:	9b01      	ldr	r3, [sp, #4]
 8012a2e:	61a3      	str	r3, [r4, #24]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	bf14      	ite	ne
 8012a34:	2202      	movne	r2, #2
 8012a36:	2201      	moveq	r2, #1
 8012a38:	6122      	str	r2, [r4, #16]
 8012a3a:	b1bd      	cbz	r5, 8012a6c <__d2b+0x94>
 8012a3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012a40:	4405      	add	r5, r0
 8012a42:	603d      	str	r5, [r7, #0]
 8012a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a48:	6030      	str	r0, [r6, #0]
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	b003      	add	sp, #12
 8012a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a56:	e7d6      	b.n	8012a06 <__d2b+0x2e>
 8012a58:	6161      	str	r1, [r4, #20]
 8012a5a:	e7e7      	b.n	8012a2c <__d2b+0x54>
 8012a5c:	a801      	add	r0, sp, #4
 8012a5e:	f7ff fd61 	bl	8012524 <__lo0bits>
 8012a62:	9b01      	ldr	r3, [sp, #4]
 8012a64:	6163      	str	r3, [r4, #20]
 8012a66:	3020      	adds	r0, #32
 8012a68:	2201      	movs	r2, #1
 8012a6a:	e7e5      	b.n	8012a38 <__d2b+0x60>
 8012a6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a74:	6038      	str	r0, [r7, #0]
 8012a76:	6918      	ldr	r0, [r3, #16]
 8012a78:	f7ff fd34 	bl	80124e4 <__hi0bits>
 8012a7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a80:	e7e2      	b.n	8012a48 <__d2b+0x70>
 8012a82:	bf00      	nop
 8012a84:	080151a4 	.word	0x080151a4
 8012a88:	080151b5 	.word	0x080151b5

08012a8c <__ssputs_r>:
 8012a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a90:	688e      	ldr	r6, [r1, #8]
 8012a92:	461f      	mov	r7, r3
 8012a94:	42be      	cmp	r6, r7
 8012a96:	680b      	ldr	r3, [r1, #0]
 8012a98:	4682      	mov	sl, r0
 8012a9a:	460c      	mov	r4, r1
 8012a9c:	4690      	mov	r8, r2
 8012a9e:	d82c      	bhi.n	8012afa <__ssputs_r+0x6e>
 8012aa0:	898a      	ldrh	r2, [r1, #12]
 8012aa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012aa6:	d026      	beq.n	8012af6 <__ssputs_r+0x6a>
 8012aa8:	6965      	ldr	r5, [r4, #20]
 8012aaa:	6909      	ldr	r1, [r1, #16]
 8012aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ab0:	eba3 0901 	sub.w	r9, r3, r1
 8012ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012ab8:	1c7b      	adds	r3, r7, #1
 8012aba:	444b      	add	r3, r9
 8012abc:	106d      	asrs	r5, r5, #1
 8012abe:	429d      	cmp	r5, r3
 8012ac0:	bf38      	it	cc
 8012ac2:	461d      	movcc	r5, r3
 8012ac4:	0553      	lsls	r3, r2, #21
 8012ac6:	d527      	bpl.n	8012b18 <__ssputs_r+0x8c>
 8012ac8:	4629      	mov	r1, r5
 8012aca:	f7fd fee7 	bl	801089c <_malloc_r>
 8012ace:	4606      	mov	r6, r0
 8012ad0:	b360      	cbz	r0, 8012b2c <__ssputs_r+0xa0>
 8012ad2:	6921      	ldr	r1, [r4, #16]
 8012ad4:	464a      	mov	r2, r9
 8012ad6:	f7fe fd88 	bl	80115ea <memcpy>
 8012ada:	89a3      	ldrh	r3, [r4, #12]
 8012adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ae4:	81a3      	strh	r3, [r4, #12]
 8012ae6:	6126      	str	r6, [r4, #16]
 8012ae8:	6165      	str	r5, [r4, #20]
 8012aea:	444e      	add	r6, r9
 8012aec:	eba5 0509 	sub.w	r5, r5, r9
 8012af0:	6026      	str	r6, [r4, #0]
 8012af2:	60a5      	str	r5, [r4, #8]
 8012af4:	463e      	mov	r6, r7
 8012af6:	42be      	cmp	r6, r7
 8012af8:	d900      	bls.n	8012afc <__ssputs_r+0x70>
 8012afa:	463e      	mov	r6, r7
 8012afc:	6820      	ldr	r0, [r4, #0]
 8012afe:	4632      	mov	r2, r6
 8012b00:	4641      	mov	r1, r8
 8012b02:	f000 f9c9 	bl	8012e98 <memmove>
 8012b06:	68a3      	ldr	r3, [r4, #8]
 8012b08:	1b9b      	subs	r3, r3, r6
 8012b0a:	60a3      	str	r3, [r4, #8]
 8012b0c:	6823      	ldr	r3, [r4, #0]
 8012b0e:	4433      	add	r3, r6
 8012b10:	6023      	str	r3, [r4, #0]
 8012b12:	2000      	movs	r0, #0
 8012b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b18:	462a      	mov	r2, r5
 8012b1a:	f000 fa1d 	bl	8012f58 <_realloc_r>
 8012b1e:	4606      	mov	r6, r0
 8012b20:	2800      	cmp	r0, #0
 8012b22:	d1e0      	bne.n	8012ae6 <__ssputs_r+0x5a>
 8012b24:	6921      	ldr	r1, [r4, #16]
 8012b26:	4650      	mov	r0, sl
 8012b28:	f7ff fbe8 	bl	80122fc <_free_r>
 8012b2c:	230c      	movs	r3, #12
 8012b2e:	f8ca 3000 	str.w	r3, [sl]
 8012b32:	89a3      	ldrh	r3, [r4, #12]
 8012b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b38:	81a3      	strh	r3, [r4, #12]
 8012b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b3e:	e7e9      	b.n	8012b14 <__ssputs_r+0x88>

08012b40 <_svfiprintf_r>:
 8012b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b44:	4698      	mov	r8, r3
 8012b46:	898b      	ldrh	r3, [r1, #12]
 8012b48:	061b      	lsls	r3, r3, #24
 8012b4a:	b09d      	sub	sp, #116	; 0x74
 8012b4c:	4607      	mov	r7, r0
 8012b4e:	460d      	mov	r5, r1
 8012b50:	4614      	mov	r4, r2
 8012b52:	d50e      	bpl.n	8012b72 <_svfiprintf_r+0x32>
 8012b54:	690b      	ldr	r3, [r1, #16]
 8012b56:	b963      	cbnz	r3, 8012b72 <_svfiprintf_r+0x32>
 8012b58:	2140      	movs	r1, #64	; 0x40
 8012b5a:	f7fd fe9f 	bl	801089c <_malloc_r>
 8012b5e:	6028      	str	r0, [r5, #0]
 8012b60:	6128      	str	r0, [r5, #16]
 8012b62:	b920      	cbnz	r0, 8012b6e <_svfiprintf_r+0x2e>
 8012b64:	230c      	movs	r3, #12
 8012b66:	603b      	str	r3, [r7, #0]
 8012b68:	f04f 30ff 	mov.w	r0, #4294967295
 8012b6c:	e0d0      	b.n	8012d10 <_svfiprintf_r+0x1d0>
 8012b6e:	2340      	movs	r3, #64	; 0x40
 8012b70:	616b      	str	r3, [r5, #20]
 8012b72:	2300      	movs	r3, #0
 8012b74:	9309      	str	r3, [sp, #36]	; 0x24
 8012b76:	2320      	movs	r3, #32
 8012b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b80:	2330      	movs	r3, #48	; 0x30
 8012b82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012d28 <_svfiprintf_r+0x1e8>
 8012b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b8a:	f04f 0901 	mov.w	r9, #1
 8012b8e:	4623      	mov	r3, r4
 8012b90:	469a      	mov	sl, r3
 8012b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b96:	b10a      	cbz	r2, 8012b9c <_svfiprintf_r+0x5c>
 8012b98:	2a25      	cmp	r2, #37	; 0x25
 8012b9a:	d1f9      	bne.n	8012b90 <_svfiprintf_r+0x50>
 8012b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8012ba0:	d00b      	beq.n	8012bba <_svfiprintf_r+0x7a>
 8012ba2:	465b      	mov	r3, fp
 8012ba4:	4622      	mov	r2, r4
 8012ba6:	4629      	mov	r1, r5
 8012ba8:	4638      	mov	r0, r7
 8012baa:	f7ff ff6f 	bl	8012a8c <__ssputs_r>
 8012bae:	3001      	adds	r0, #1
 8012bb0:	f000 80a9 	beq.w	8012d06 <_svfiprintf_r+0x1c6>
 8012bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bb6:	445a      	add	r2, fp
 8012bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8012bba:	f89a 3000 	ldrb.w	r3, [sl]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f000 80a1 	beq.w	8012d06 <_svfiprintf_r+0x1c6>
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8012bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bce:	f10a 0a01 	add.w	sl, sl, #1
 8012bd2:	9304      	str	r3, [sp, #16]
 8012bd4:	9307      	str	r3, [sp, #28]
 8012bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012bda:	931a      	str	r3, [sp, #104]	; 0x68
 8012bdc:	4654      	mov	r4, sl
 8012bde:	2205      	movs	r2, #5
 8012be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012be4:	4850      	ldr	r0, [pc, #320]	; (8012d28 <_svfiprintf_r+0x1e8>)
 8012be6:	f7ed fb0b 	bl	8000200 <memchr>
 8012bea:	9a04      	ldr	r2, [sp, #16]
 8012bec:	b9d8      	cbnz	r0, 8012c26 <_svfiprintf_r+0xe6>
 8012bee:	06d0      	lsls	r0, r2, #27
 8012bf0:	bf44      	itt	mi
 8012bf2:	2320      	movmi	r3, #32
 8012bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bf8:	0711      	lsls	r1, r2, #28
 8012bfa:	bf44      	itt	mi
 8012bfc:	232b      	movmi	r3, #43	; 0x2b
 8012bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c02:	f89a 3000 	ldrb.w	r3, [sl]
 8012c06:	2b2a      	cmp	r3, #42	; 0x2a
 8012c08:	d015      	beq.n	8012c36 <_svfiprintf_r+0xf6>
 8012c0a:	9a07      	ldr	r2, [sp, #28]
 8012c0c:	4654      	mov	r4, sl
 8012c0e:	2000      	movs	r0, #0
 8012c10:	f04f 0c0a 	mov.w	ip, #10
 8012c14:	4621      	mov	r1, r4
 8012c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c1a:	3b30      	subs	r3, #48	; 0x30
 8012c1c:	2b09      	cmp	r3, #9
 8012c1e:	d94d      	bls.n	8012cbc <_svfiprintf_r+0x17c>
 8012c20:	b1b0      	cbz	r0, 8012c50 <_svfiprintf_r+0x110>
 8012c22:	9207      	str	r2, [sp, #28]
 8012c24:	e014      	b.n	8012c50 <_svfiprintf_r+0x110>
 8012c26:	eba0 0308 	sub.w	r3, r0, r8
 8012c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8012c2e:	4313      	orrs	r3, r2
 8012c30:	9304      	str	r3, [sp, #16]
 8012c32:	46a2      	mov	sl, r4
 8012c34:	e7d2      	b.n	8012bdc <_svfiprintf_r+0x9c>
 8012c36:	9b03      	ldr	r3, [sp, #12]
 8012c38:	1d19      	adds	r1, r3, #4
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	9103      	str	r1, [sp, #12]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	bfbb      	ittet	lt
 8012c42:	425b      	neglt	r3, r3
 8012c44:	f042 0202 	orrlt.w	r2, r2, #2
 8012c48:	9307      	strge	r3, [sp, #28]
 8012c4a:	9307      	strlt	r3, [sp, #28]
 8012c4c:	bfb8      	it	lt
 8012c4e:	9204      	strlt	r2, [sp, #16]
 8012c50:	7823      	ldrb	r3, [r4, #0]
 8012c52:	2b2e      	cmp	r3, #46	; 0x2e
 8012c54:	d10c      	bne.n	8012c70 <_svfiprintf_r+0x130>
 8012c56:	7863      	ldrb	r3, [r4, #1]
 8012c58:	2b2a      	cmp	r3, #42	; 0x2a
 8012c5a:	d134      	bne.n	8012cc6 <_svfiprintf_r+0x186>
 8012c5c:	9b03      	ldr	r3, [sp, #12]
 8012c5e:	1d1a      	adds	r2, r3, #4
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	9203      	str	r2, [sp, #12]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	bfb8      	it	lt
 8012c68:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c6c:	3402      	adds	r4, #2
 8012c6e:	9305      	str	r3, [sp, #20]
 8012c70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012d38 <_svfiprintf_r+0x1f8>
 8012c74:	7821      	ldrb	r1, [r4, #0]
 8012c76:	2203      	movs	r2, #3
 8012c78:	4650      	mov	r0, sl
 8012c7a:	f7ed fac1 	bl	8000200 <memchr>
 8012c7e:	b138      	cbz	r0, 8012c90 <_svfiprintf_r+0x150>
 8012c80:	9b04      	ldr	r3, [sp, #16]
 8012c82:	eba0 000a 	sub.w	r0, r0, sl
 8012c86:	2240      	movs	r2, #64	; 0x40
 8012c88:	4082      	lsls	r2, r0
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	3401      	adds	r4, #1
 8012c8e:	9304      	str	r3, [sp, #16]
 8012c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c94:	4825      	ldr	r0, [pc, #148]	; (8012d2c <_svfiprintf_r+0x1ec>)
 8012c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c9a:	2206      	movs	r2, #6
 8012c9c:	f7ed fab0 	bl	8000200 <memchr>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	d038      	beq.n	8012d16 <_svfiprintf_r+0x1d6>
 8012ca4:	4b22      	ldr	r3, [pc, #136]	; (8012d30 <_svfiprintf_r+0x1f0>)
 8012ca6:	bb1b      	cbnz	r3, 8012cf0 <_svfiprintf_r+0x1b0>
 8012ca8:	9b03      	ldr	r3, [sp, #12]
 8012caa:	3307      	adds	r3, #7
 8012cac:	f023 0307 	bic.w	r3, r3, #7
 8012cb0:	3308      	adds	r3, #8
 8012cb2:	9303      	str	r3, [sp, #12]
 8012cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cb6:	4433      	add	r3, r6
 8012cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8012cba:	e768      	b.n	8012b8e <_svfiprintf_r+0x4e>
 8012cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cc0:	460c      	mov	r4, r1
 8012cc2:	2001      	movs	r0, #1
 8012cc4:	e7a6      	b.n	8012c14 <_svfiprintf_r+0xd4>
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	3401      	adds	r4, #1
 8012cca:	9305      	str	r3, [sp, #20]
 8012ccc:	4619      	mov	r1, r3
 8012cce:	f04f 0c0a 	mov.w	ip, #10
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cd8:	3a30      	subs	r2, #48	; 0x30
 8012cda:	2a09      	cmp	r2, #9
 8012cdc:	d903      	bls.n	8012ce6 <_svfiprintf_r+0x1a6>
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d0c6      	beq.n	8012c70 <_svfiprintf_r+0x130>
 8012ce2:	9105      	str	r1, [sp, #20]
 8012ce4:	e7c4      	b.n	8012c70 <_svfiprintf_r+0x130>
 8012ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cea:	4604      	mov	r4, r0
 8012cec:	2301      	movs	r3, #1
 8012cee:	e7f0      	b.n	8012cd2 <_svfiprintf_r+0x192>
 8012cf0:	ab03      	add	r3, sp, #12
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	462a      	mov	r2, r5
 8012cf6:	4b0f      	ldr	r3, [pc, #60]	; (8012d34 <_svfiprintf_r+0x1f4>)
 8012cf8:	a904      	add	r1, sp, #16
 8012cfa:	4638      	mov	r0, r7
 8012cfc:	f7fd fefa 	bl	8010af4 <_printf_float>
 8012d00:	1c42      	adds	r2, r0, #1
 8012d02:	4606      	mov	r6, r0
 8012d04:	d1d6      	bne.n	8012cb4 <_svfiprintf_r+0x174>
 8012d06:	89ab      	ldrh	r3, [r5, #12]
 8012d08:	065b      	lsls	r3, r3, #25
 8012d0a:	f53f af2d 	bmi.w	8012b68 <_svfiprintf_r+0x28>
 8012d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d10:	b01d      	add	sp, #116	; 0x74
 8012d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d16:	ab03      	add	r3, sp, #12
 8012d18:	9300      	str	r3, [sp, #0]
 8012d1a:	462a      	mov	r2, r5
 8012d1c:	4b05      	ldr	r3, [pc, #20]	; (8012d34 <_svfiprintf_r+0x1f4>)
 8012d1e:	a904      	add	r1, sp, #16
 8012d20:	4638      	mov	r0, r7
 8012d22:	f7fe f98b 	bl	801103c <_printf_i>
 8012d26:	e7eb      	b.n	8012d00 <_svfiprintf_r+0x1c0>
 8012d28:	0801530c 	.word	0x0801530c
 8012d2c:	08015316 	.word	0x08015316
 8012d30:	08010af5 	.word	0x08010af5
 8012d34:	08012a8d 	.word	0x08012a8d
 8012d38:	08015312 	.word	0x08015312

08012d3c <__sflush_r>:
 8012d3c:	898a      	ldrh	r2, [r1, #12]
 8012d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d42:	4605      	mov	r5, r0
 8012d44:	0710      	lsls	r0, r2, #28
 8012d46:	460c      	mov	r4, r1
 8012d48:	d458      	bmi.n	8012dfc <__sflush_r+0xc0>
 8012d4a:	684b      	ldr	r3, [r1, #4]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	dc05      	bgt.n	8012d5c <__sflush_r+0x20>
 8012d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	dc02      	bgt.n	8012d5c <__sflush_r+0x20>
 8012d56:	2000      	movs	r0, #0
 8012d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d5e:	2e00      	cmp	r6, #0
 8012d60:	d0f9      	beq.n	8012d56 <__sflush_r+0x1a>
 8012d62:	2300      	movs	r3, #0
 8012d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d68:	682f      	ldr	r7, [r5, #0]
 8012d6a:	6a21      	ldr	r1, [r4, #32]
 8012d6c:	602b      	str	r3, [r5, #0]
 8012d6e:	d032      	beq.n	8012dd6 <__sflush_r+0x9a>
 8012d70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	075a      	lsls	r2, r3, #29
 8012d76:	d505      	bpl.n	8012d84 <__sflush_r+0x48>
 8012d78:	6863      	ldr	r3, [r4, #4]
 8012d7a:	1ac0      	subs	r0, r0, r3
 8012d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d7e:	b10b      	cbz	r3, 8012d84 <__sflush_r+0x48>
 8012d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d82:	1ac0      	subs	r0, r0, r3
 8012d84:	2300      	movs	r3, #0
 8012d86:	4602      	mov	r2, r0
 8012d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d8a:	6a21      	ldr	r1, [r4, #32]
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	47b0      	blx	r6
 8012d90:	1c43      	adds	r3, r0, #1
 8012d92:	89a3      	ldrh	r3, [r4, #12]
 8012d94:	d106      	bne.n	8012da4 <__sflush_r+0x68>
 8012d96:	6829      	ldr	r1, [r5, #0]
 8012d98:	291d      	cmp	r1, #29
 8012d9a:	d82b      	bhi.n	8012df4 <__sflush_r+0xb8>
 8012d9c:	4a29      	ldr	r2, [pc, #164]	; (8012e44 <__sflush_r+0x108>)
 8012d9e:	410a      	asrs	r2, r1
 8012da0:	07d6      	lsls	r6, r2, #31
 8012da2:	d427      	bmi.n	8012df4 <__sflush_r+0xb8>
 8012da4:	2200      	movs	r2, #0
 8012da6:	6062      	str	r2, [r4, #4]
 8012da8:	04d9      	lsls	r1, r3, #19
 8012daa:	6922      	ldr	r2, [r4, #16]
 8012dac:	6022      	str	r2, [r4, #0]
 8012dae:	d504      	bpl.n	8012dba <__sflush_r+0x7e>
 8012db0:	1c42      	adds	r2, r0, #1
 8012db2:	d101      	bne.n	8012db8 <__sflush_r+0x7c>
 8012db4:	682b      	ldr	r3, [r5, #0]
 8012db6:	b903      	cbnz	r3, 8012dba <__sflush_r+0x7e>
 8012db8:	6560      	str	r0, [r4, #84]	; 0x54
 8012dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dbc:	602f      	str	r7, [r5, #0]
 8012dbe:	2900      	cmp	r1, #0
 8012dc0:	d0c9      	beq.n	8012d56 <__sflush_r+0x1a>
 8012dc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dc6:	4299      	cmp	r1, r3
 8012dc8:	d002      	beq.n	8012dd0 <__sflush_r+0x94>
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f7ff fa96 	bl	80122fc <_free_r>
 8012dd0:	2000      	movs	r0, #0
 8012dd2:	6360      	str	r0, [r4, #52]	; 0x34
 8012dd4:	e7c0      	b.n	8012d58 <__sflush_r+0x1c>
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	4628      	mov	r0, r5
 8012dda:	47b0      	blx	r6
 8012ddc:	1c41      	adds	r1, r0, #1
 8012dde:	d1c8      	bne.n	8012d72 <__sflush_r+0x36>
 8012de0:	682b      	ldr	r3, [r5, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d0c5      	beq.n	8012d72 <__sflush_r+0x36>
 8012de6:	2b1d      	cmp	r3, #29
 8012de8:	d001      	beq.n	8012dee <__sflush_r+0xb2>
 8012dea:	2b16      	cmp	r3, #22
 8012dec:	d101      	bne.n	8012df2 <__sflush_r+0xb6>
 8012dee:	602f      	str	r7, [r5, #0]
 8012df0:	e7b1      	b.n	8012d56 <__sflush_r+0x1a>
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012df8:	81a3      	strh	r3, [r4, #12]
 8012dfa:	e7ad      	b.n	8012d58 <__sflush_r+0x1c>
 8012dfc:	690f      	ldr	r7, [r1, #16]
 8012dfe:	2f00      	cmp	r7, #0
 8012e00:	d0a9      	beq.n	8012d56 <__sflush_r+0x1a>
 8012e02:	0793      	lsls	r3, r2, #30
 8012e04:	680e      	ldr	r6, [r1, #0]
 8012e06:	bf08      	it	eq
 8012e08:	694b      	ldreq	r3, [r1, #20]
 8012e0a:	600f      	str	r7, [r1, #0]
 8012e0c:	bf18      	it	ne
 8012e0e:	2300      	movne	r3, #0
 8012e10:	eba6 0807 	sub.w	r8, r6, r7
 8012e14:	608b      	str	r3, [r1, #8]
 8012e16:	f1b8 0f00 	cmp.w	r8, #0
 8012e1a:	dd9c      	ble.n	8012d56 <__sflush_r+0x1a>
 8012e1c:	6a21      	ldr	r1, [r4, #32]
 8012e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e20:	4643      	mov	r3, r8
 8012e22:	463a      	mov	r2, r7
 8012e24:	4628      	mov	r0, r5
 8012e26:	47b0      	blx	r6
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	dc06      	bgt.n	8012e3a <__sflush_r+0xfe>
 8012e2c:	89a3      	ldrh	r3, [r4, #12]
 8012e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e32:	81a3      	strh	r3, [r4, #12]
 8012e34:	f04f 30ff 	mov.w	r0, #4294967295
 8012e38:	e78e      	b.n	8012d58 <__sflush_r+0x1c>
 8012e3a:	4407      	add	r7, r0
 8012e3c:	eba8 0800 	sub.w	r8, r8, r0
 8012e40:	e7e9      	b.n	8012e16 <__sflush_r+0xda>
 8012e42:	bf00      	nop
 8012e44:	dfbffffe 	.word	0xdfbffffe

08012e48 <_fflush_r>:
 8012e48:	b538      	push	{r3, r4, r5, lr}
 8012e4a:	690b      	ldr	r3, [r1, #16]
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	460c      	mov	r4, r1
 8012e50:	b913      	cbnz	r3, 8012e58 <_fflush_r+0x10>
 8012e52:	2500      	movs	r5, #0
 8012e54:	4628      	mov	r0, r5
 8012e56:	bd38      	pop	{r3, r4, r5, pc}
 8012e58:	b118      	cbz	r0, 8012e62 <_fflush_r+0x1a>
 8012e5a:	6a03      	ldr	r3, [r0, #32]
 8012e5c:	b90b      	cbnz	r3, 8012e62 <_fflush_r+0x1a>
 8012e5e:	f7fe fa9b 	bl	8011398 <__sinit>
 8012e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d0f3      	beq.n	8012e52 <_fflush_r+0xa>
 8012e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e6c:	07d0      	lsls	r0, r2, #31
 8012e6e:	d404      	bmi.n	8012e7a <_fflush_r+0x32>
 8012e70:	0599      	lsls	r1, r3, #22
 8012e72:	d402      	bmi.n	8012e7a <_fflush_r+0x32>
 8012e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e76:	f7fe fbb6 	bl	80115e6 <__retarget_lock_acquire_recursive>
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	f7ff ff5d 	bl	8012d3c <__sflush_r>
 8012e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e84:	07da      	lsls	r2, r3, #31
 8012e86:	4605      	mov	r5, r0
 8012e88:	d4e4      	bmi.n	8012e54 <_fflush_r+0xc>
 8012e8a:	89a3      	ldrh	r3, [r4, #12]
 8012e8c:	059b      	lsls	r3, r3, #22
 8012e8e:	d4e1      	bmi.n	8012e54 <_fflush_r+0xc>
 8012e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e92:	f7fe fba9 	bl	80115e8 <__retarget_lock_release_recursive>
 8012e96:	e7dd      	b.n	8012e54 <_fflush_r+0xc>

08012e98 <memmove>:
 8012e98:	4288      	cmp	r0, r1
 8012e9a:	b510      	push	{r4, lr}
 8012e9c:	eb01 0402 	add.w	r4, r1, r2
 8012ea0:	d902      	bls.n	8012ea8 <memmove+0x10>
 8012ea2:	4284      	cmp	r4, r0
 8012ea4:	4623      	mov	r3, r4
 8012ea6:	d807      	bhi.n	8012eb8 <memmove+0x20>
 8012ea8:	1e43      	subs	r3, r0, #1
 8012eaa:	42a1      	cmp	r1, r4
 8012eac:	d008      	beq.n	8012ec0 <memmove+0x28>
 8012eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012eb6:	e7f8      	b.n	8012eaa <memmove+0x12>
 8012eb8:	4402      	add	r2, r0
 8012eba:	4601      	mov	r1, r0
 8012ebc:	428a      	cmp	r2, r1
 8012ebe:	d100      	bne.n	8012ec2 <memmove+0x2a>
 8012ec0:	bd10      	pop	{r4, pc}
 8012ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012eca:	e7f7      	b.n	8012ebc <memmove+0x24>

08012ecc <__assert_func>:
 8012ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ece:	4614      	mov	r4, r2
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	4b09      	ldr	r3, [pc, #36]	; (8012ef8 <__assert_func+0x2c>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4605      	mov	r5, r0
 8012ed8:	68d8      	ldr	r0, [r3, #12]
 8012eda:	b14c      	cbz	r4, 8012ef0 <__assert_func+0x24>
 8012edc:	4b07      	ldr	r3, [pc, #28]	; (8012efc <__assert_func+0x30>)
 8012ede:	9100      	str	r1, [sp, #0]
 8012ee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ee4:	4906      	ldr	r1, [pc, #24]	; (8012f00 <__assert_func+0x34>)
 8012ee6:	462b      	mov	r3, r5
 8012ee8:	f000 f872 	bl	8012fd0 <fiprintf>
 8012eec:	f000 f882 	bl	8012ff4 <abort>
 8012ef0:	4b04      	ldr	r3, [pc, #16]	; (8012f04 <__assert_func+0x38>)
 8012ef2:	461c      	mov	r4, r3
 8012ef4:	e7f3      	b.n	8012ede <__assert_func+0x12>
 8012ef6:	bf00      	nop
 8012ef8:	200000c4 	.word	0x200000c4
 8012efc:	08015327 	.word	0x08015327
 8012f00:	08015334 	.word	0x08015334
 8012f04:	08015362 	.word	0x08015362

08012f08 <_calloc_r>:
 8012f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f0a:	fba1 2402 	umull	r2, r4, r1, r2
 8012f0e:	b94c      	cbnz	r4, 8012f24 <_calloc_r+0x1c>
 8012f10:	4611      	mov	r1, r2
 8012f12:	9201      	str	r2, [sp, #4]
 8012f14:	f7fd fcc2 	bl	801089c <_malloc_r>
 8012f18:	9a01      	ldr	r2, [sp, #4]
 8012f1a:	4605      	mov	r5, r0
 8012f1c:	b930      	cbnz	r0, 8012f2c <_calloc_r+0x24>
 8012f1e:	4628      	mov	r0, r5
 8012f20:	b003      	add	sp, #12
 8012f22:	bd30      	pop	{r4, r5, pc}
 8012f24:	220c      	movs	r2, #12
 8012f26:	6002      	str	r2, [r0, #0]
 8012f28:	2500      	movs	r5, #0
 8012f2a:	e7f8      	b.n	8012f1e <_calloc_r+0x16>
 8012f2c:	4621      	mov	r1, r4
 8012f2e:	f7fe facc 	bl	80114ca <memset>
 8012f32:	e7f4      	b.n	8012f1e <_calloc_r+0x16>

08012f34 <__ascii_mbtowc>:
 8012f34:	b082      	sub	sp, #8
 8012f36:	b901      	cbnz	r1, 8012f3a <__ascii_mbtowc+0x6>
 8012f38:	a901      	add	r1, sp, #4
 8012f3a:	b142      	cbz	r2, 8012f4e <__ascii_mbtowc+0x1a>
 8012f3c:	b14b      	cbz	r3, 8012f52 <__ascii_mbtowc+0x1e>
 8012f3e:	7813      	ldrb	r3, [r2, #0]
 8012f40:	600b      	str	r3, [r1, #0]
 8012f42:	7812      	ldrb	r2, [r2, #0]
 8012f44:	1e10      	subs	r0, r2, #0
 8012f46:	bf18      	it	ne
 8012f48:	2001      	movne	r0, #1
 8012f4a:	b002      	add	sp, #8
 8012f4c:	4770      	bx	lr
 8012f4e:	4610      	mov	r0, r2
 8012f50:	e7fb      	b.n	8012f4a <__ascii_mbtowc+0x16>
 8012f52:	f06f 0001 	mvn.w	r0, #1
 8012f56:	e7f8      	b.n	8012f4a <__ascii_mbtowc+0x16>

08012f58 <_realloc_r>:
 8012f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5c:	4680      	mov	r8, r0
 8012f5e:	4614      	mov	r4, r2
 8012f60:	460e      	mov	r6, r1
 8012f62:	b921      	cbnz	r1, 8012f6e <_realloc_r+0x16>
 8012f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f68:	4611      	mov	r1, r2
 8012f6a:	f7fd bc97 	b.w	801089c <_malloc_r>
 8012f6e:	b92a      	cbnz	r2, 8012f7c <_realloc_r+0x24>
 8012f70:	f7ff f9c4 	bl	80122fc <_free_r>
 8012f74:	4625      	mov	r5, r4
 8012f76:	4628      	mov	r0, r5
 8012f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f7c:	f000 f841 	bl	8013002 <_malloc_usable_size_r>
 8012f80:	4284      	cmp	r4, r0
 8012f82:	4607      	mov	r7, r0
 8012f84:	d802      	bhi.n	8012f8c <_realloc_r+0x34>
 8012f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f8a:	d812      	bhi.n	8012fb2 <_realloc_r+0x5a>
 8012f8c:	4621      	mov	r1, r4
 8012f8e:	4640      	mov	r0, r8
 8012f90:	f7fd fc84 	bl	801089c <_malloc_r>
 8012f94:	4605      	mov	r5, r0
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d0ed      	beq.n	8012f76 <_realloc_r+0x1e>
 8012f9a:	42bc      	cmp	r4, r7
 8012f9c:	4622      	mov	r2, r4
 8012f9e:	4631      	mov	r1, r6
 8012fa0:	bf28      	it	cs
 8012fa2:	463a      	movcs	r2, r7
 8012fa4:	f7fe fb21 	bl	80115ea <memcpy>
 8012fa8:	4631      	mov	r1, r6
 8012faa:	4640      	mov	r0, r8
 8012fac:	f7ff f9a6 	bl	80122fc <_free_r>
 8012fb0:	e7e1      	b.n	8012f76 <_realloc_r+0x1e>
 8012fb2:	4635      	mov	r5, r6
 8012fb4:	e7df      	b.n	8012f76 <_realloc_r+0x1e>

08012fb6 <__ascii_wctomb>:
 8012fb6:	b149      	cbz	r1, 8012fcc <__ascii_wctomb+0x16>
 8012fb8:	2aff      	cmp	r2, #255	; 0xff
 8012fba:	bf85      	ittet	hi
 8012fbc:	238a      	movhi	r3, #138	; 0x8a
 8012fbe:	6003      	strhi	r3, [r0, #0]
 8012fc0:	700a      	strbls	r2, [r1, #0]
 8012fc2:	f04f 30ff 	movhi.w	r0, #4294967295
 8012fc6:	bf98      	it	ls
 8012fc8:	2001      	movls	r0, #1
 8012fca:	4770      	bx	lr
 8012fcc:	4608      	mov	r0, r1
 8012fce:	4770      	bx	lr

08012fd0 <fiprintf>:
 8012fd0:	b40e      	push	{r1, r2, r3}
 8012fd2:	b503      	push	{r0, r1, lr}
 8012fd4:	4601      	mov	r1, r0
 8012fd6:	ab03      	add	r3, sp, #12
 8012fd8:	4805      	ldr	r0, [pc, #20]	; (8012ff0 <fiprintf+0x20>)
 8012fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fde:	6800      	ldr	r0, [r0, #0]
 8012fe0:	9301      	str	r3, [sp, #4]
 8012fe2:	f000 f83f 	bl	8013064 <_vfiprintf_r>
 8012fe6:	b002      	add	sp, #8
 8012fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fec:	b003      	add	sp, #12
 8012fee:	4770      	bx	lr
 8012ff0:	200000c4 	.word	0x200000c4

08012ff4 <abort>:
 8012ff4:	b508      	push	{r3, lr}
 8012ff6:	2006      	movs	r0, #6
 8012ff8:	f000 fa0c 	bl	8013414 <raise>
 8012ffc:	2001      	movs	r0, #1
 8012ffe:	f7f3 f913 	bl	8006228 <_exit>

08013002 <_malloc_usable_size_r>:
 8013002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013006:	1f18      	subs	r0, r3, #4
 8013008:	2b00      	cmp	r3, #0
 801300a:	bfbc      	itt	lt
 801300c:	580b      	ldrlt	r3, [r1, r0]
 801300e:	18c0      	addlt	r0, r0, r3
 8013010:	4770      	bx	lr

08013012 <__sfputc_r>:
 8013012:	6893      	ldr	r3, [r2, #8]
 8013014:	3b01      	subs	r3, #1
 8013016:	2b00      	cmp	r3, #0
 8013018:	b410      	push	{r4}
 801301a:	6093      	str	r3, [r2, #8]
 801301c:	da08      	bge.n	8013030 <__sfputc_r+0x1e>
 801301e:	6994      	ldr	r4, [r2, #24]
 8013020:	42a3      	cmp	r3, r4
 8013022:	db01      	blt.n	8013028 <__sfputc_r+0x16>
 8013024:	290a      	cmp	r1, #10
 8013026:	d103      	bne.n	8013030 <__sfputc_r+0x1e>
 8013028:	f85d 4b04 	ldr.w	r4, [sp], #4
 801302c:	f000 b934 	b.w	8013298 <__swbuf_r>
 8013030:	6813      	ldr	r3, [r2, #0]
 8013032:	1c58      	adds	r0, r3, #1
 8013034:	6010      	str	r0, [r2, #0]
 8013036:	7019      	strb	r1, [r3, #0]
 8013038:	4608      	mov	r0, r1
 801303a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801303e:	4770      	bx	lr

08013040 <__sfputs_r>:
 8013040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013042:	4606      	mov	r6, r0
 8013044:	460f      	mov	r7, r1
 8013046:	4614      	mov	r4, r2
 8013048:	18d5      	adds	r5, r2, r3
 801304a:	42ac      	cmp	r4, r5
 801304c:	d101      	bne.n	8013052 <__sfputs_r+0x12>
 801304e:	2000      	movs	r0, #0
 8013050:	e007      	b.n	8013062 <__sfputs_r+0x22>
 8013052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013056:	463a      	mov	r2, r7
 8013058:	4630      	mov	r0, r6
 801305a:	f7ff ffda 	bl	8013012 <__sfputc_r>
 801305e:	1c43      	adds	r3, r0, #1
 8013060:	d1f3      	bne.n	801304a <__sfputs_r+0xa>
 8013062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013064 <_vfiprintf_r>:
 8013064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013068:	460d      	mov	r5, r1
 801306a:	b09d      	sub	sp, #116	; 0x74
 801306c:	4614      	mov	r4, r2
 801306e:	4698      	mov	r8, r3
 8013070:	4606      	mov	r6, r0
 8013072:	b118      	cbz	r0, 801307c <_vfiprintf_r+0x18>
 8013074:	6a03      	ldr	r3, [r0, #32]
 8013076:	b90b      	cbnz	r3, 801307c <_vfiprintf_r+0x18>
 8013078:	f7fe f98e 	bl	8011398 <__sinit>
 801307c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801307e:	07d9      	lsls	r1, r3, #31
 8013080:	d405      	bmi.n	801308e <_vfiprintf_r+0x2a>
 8013082:	89ab      	ldrh	r3, [r5, #12]
 8013084:	059a      	lsls	r2, r3, #22
 8013086:	d402      	bmi.n	801308e <_vfiprintf_r+0x2a>
 8013088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801308a:	f7fe faac 	bl	80115e6 <__retarget_lock_acquire_recursive>
 801308e:	89ab      	ldrh	r3, [r5, #12]
 8013090:	071b      	lsls	r3, r3, #28
 8013092:	d501      	bpl.n	8013098 <_vfiprintf_r+0x34>
 8013094:	692b      	ldr	r3, [r5, #16]
 8013096:	b99b      	cbnz	r3, 80130c0 <_vfiprintf_r+0x5c>
 8013098:	4629      	mov	r1, r5
 801309a:	4630      	mov	r0, r6
 801309c:	f000 f93a 	bl	8013314 <__swsetup_r>
 80130a0:	b170      	cbz	r0, 80130c0 <_vfiprintf_r+0x5c>
 80130a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130a4:	07dc      	lsls	r4, r3, #31
 80130a6:	d504      	bpl.n	80130b2 <_vfiprintf_r+0x4e>
 80130a8:	f04f 30ff 	mov.w	r0, #4294967295
 80130ac:	b01d      	add	sp, #116	; 0x74
 80130ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b2:	89ab      	ldrh	r3, [r5, #12]
 80130b4:	0598      	lsls	r0, r3, #22
 80130b6:	d4f7      	bmi.n	80130a8 <_vfiprintf_r+0x44>
 80130b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130ba:	f7fe fa95 	bl	80115e8 <__retarget_lock_release_recursive>
 80130be:	e7f3      	b.n	80130a8 <_vfiprintf_r+0x44>
 80130c0:	2300      	movs	r3, #0
 80130c2:	9309      	str	r3, [sp, #36]	; 0x24
 80130c4:	2320      	movs	r3, #32
 80130c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80130ce:	2330      	movs	r3, #48	; 0x30
 80130d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013284 <_vfiprintf_r+0x220>
 80130d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130d8:	f04f 0901 	mov.w	r9, #1
 80130dc:	4623      	mov	r3, r4
 80130de:	469a      	mov	sl, r3
 80130e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130e4:	b10a      	cbz	r2, 80130ea <_vfiprintf_r+0x86>
 80130e6:	2a25      	cmp	r2, #37	; 0x25
 80130e8:	d1f9      	bne.n	80130de <_vfiprintf_r+0x7a>
 80130ea:	ebba 0b04 	subs.w	fp, sl, r4
 80130ee:	d00b      	beq.n	8013108 <_vfiprintf_r+0xa4>
 80130f0:	465b      	mov	r3, fp
 80130f2:	4622      	mov	r2, r4
 80130f4:	4629      	mov	r1, r5
 80130f6:	4630      	mov	r0, r6
 80130f8:	f7ff ffa2 	bl	8013040 <__sfputs_r>
 80130fc:	3001      	adds	r0, #1
 80130fe:	f000 80a9 	beq.w	8013254 <_vfiprintf_r+0x1f0>
 8013102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013104:	445a      	add	r2, fp
 8013106:	9209      	str	r2, [sp, #36]	; 0x24
 8013108:	f89a 3000 	ldrb.w	r3, [sl]
 801310c:	2b00      	cmp	r3, #0
 801310e:	f000 80a1 	beq.w	8013254 <_vfiprintf_r+0x1f0>
 8013112:	2300      	movs	r3, #0
 8013114:	f04f 32ff 	mov.w	r2, #4294967295
 8013118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801311c:	f10a 0a01 	add.w	sl, sl, #1
 8013120:	9304      	str	r3, [sp, #16]
 8013122:	9307      	str	r3, [sp, #28]
 8013124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013128:	931a      	str	r3, [sp, #104]	; 0x68
 801312a:	4654      	mov	r4, sl
 801312c:	2205      	movs	r2, #5
 801312e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013132:	4854      	ldr	r0, [pc, #336]	; (8013284 <_vfiprintf_r+0x220>)
 8013134:	f7ed f864 	bl	8000200 <memchr>
 8013138:	9a04      	ldr	r2, [sp, #16]
 801313a:	b9d8      	cbnz	r0, 8013174 <_vfiprintf_r+0x110>
 801313c:	06d1      	lsls	r1, r2, #27
 801313e:	bf44      	itt	mi
 8013140:	2320      	movmi	r3, #32
 8013142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013146:	0713      	lsls	r3, r2, #28
 8013148:	bf44      	itt	mi
 801314a:	232b      	movmi	r3, #43	; 0x2b
 801314c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013150:	f89a 3000 	ldrb.w	r3, [sl]
 8013154:	2b2a      	cmp	r3, #42	; 0x2a
 8013156:	d015      	beq.n	8013184 <_vfiprintf_r+0x120>
 8013158:	9a07      	ldr	r2, [sp, #28]
 801315a:	4654      	mov	r4, sl
 801315c:	2000      	movs	r0, #0
 801315e:	f04f 0c0a 	mov.w	ip, #10
 8013162:	4621      	mov	r1, r4
 8013164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013168:	3b30      	subs	r3, #48	; 0x30
 801316a:	2b09      	cmp	r3, #9
 801316c:	d94d      	bls.n	801320a <_vfiprintf_r+0x1a6>
 801316e:	b1b0      	cbz	r0, 801319e <_vfiprintf_r+0x13a>
 8013170:	9207      	str	r2, [sp, #28]
 8013172:	e014      	b.n	801319e <_vfiprintf_r+0x13a>
 8013174:	eba0 0308 	sub.w	r3, r0, r8
 8013178:	fa09 f303 	lsl.w	r3, r9, r3
 801317c:	4313      	orrs	r3, r2
 801317e:	9304      	str	r3, [sp, #16]
 8013180:	46a2      	mov	sl, r4
 8013182:	e7d2      	b.n	801312a <_vfiprintf_r+0xc6>
 8013184:	9b03      	ldr	r3, [sp, #12]
 8013186:	1d19      	adds	r1, r3, #4
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	9103      	str	r1, [sp, #12]
 801318c:	2b00      	cmp	r3, #0
 801318e:	bfbb      	ittet	lt
 8013190:	425b      	neglt	r3, r3
 8013192:	f042 0202 	orrlt.w	r2, r2, #2
 8013196:	9307      	strge	r3, [sp, #28]
 8013198:	9307      	strlt	r3, [sp, #28]
 801319a:	bfb8      	it	lt
 801319c:	9204      	strlt	r2, [sp, #16]
 801319e:	7823      	ldrb	r3, [r4, #0]
 80131a0:	2b2e      	cmp	r3, #46	; 0x2e
 80131a2:	d10c      	bne.n	80131be <_vfiprintf_r+0x15a>
 80131a4:	7863      	ldrb	r3, [r4, #1]
 80131a6:	2b2a      	cmp	r3, #42	; 0x2a
 80131a8:	d134      	bne.n	8013214 <_vfiprintf_r+0x1b0>
 80131aa:	9b03      	ldr	r3, [sp, #12]
 80131ac:	1d1a      	adds	r2, r3, #4
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	9203      	str	r2, [sp, #12]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	bfb8      	it	lt
 80131b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80131ba:	3402      	adds	r4, #2
 80131bc:	9305      	str	r3, [sp, #20]
 80131be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013294 <_vfiprintf_r+0x230>
 80131c2:	7821      	ldrb	r1, [r4, #0]
 80131c4:	2203      	movs	r2, #3
 80131c6:	4650      	mov	r0, sl
 80131c8:	f7ed f81a 	bl	8000200 <memchr>
 80131cc:	b138      	cbz	r0, 80131de <_vfiprintf_r+0x17a>
 80131ce:	9b04      	ldr	r3, [sp, #16]
 80131d0:	eba0 000a 	sub.w	r0, r0, sl
 80131d4:	2240      	movs	r2, #64	; 0x40
 80131d6:	4082      	lsls	r2, r0
 80131d8:	4313      	orrs	r3, r2
 80131da:	3401      	adds	r4, #1
 80131dc:	9304      	str	r3, [sp, #16]
 80131de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131e2:	4829      	ldr	r0, [pc, #164]	; (8013288 <_vfiprintf_r+0x224>)
 80131e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131e8:	2206      	movs	r2, #6
 80131ea:	f7ed f809 	bl	8000200 <memchr>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d03f      	beq.n	8013272 <_vfiprintf_r+0x20e>
 80131f2:	4b26      	ldr	r3, [pc, #152]	; (801328c <_vfiprintf_r+0x228>)
 80131f4:	bb1b      	cbnz	r3, 801323e <_vfiprintf_r+0x1da>
 80131f6:	9b03      	ldr	r3, [sp, #12]
 80131f8:	3307      	adds	r3, #7
 80131fa:	f023 0307 	bic.w	r3, r3, #7
 80131fe:	3308      	adds	r3, #8
 8013200:	9303      	str	r3, [sp, #12]
 8013202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013204:	443b      	add	r3, r7
 8013206:	9309      	str	r3, [sp, #36]	; 0x24
 8013208:	e768      	b.n	80130dc <_vfiprintf_r+0x78>
 801320a:	fb0c 3202 	mla	r2, ip, r2, r3
 801320e:	460c      	mov	r4, r1
 8013210:	2001      	movs	r0, #1
 8013212:	e7a6      	b.n	8013162 <_vfiprintf_r+0xfe>
 8013214:	2300      	movs	r3, #0
 8013216:	3401      	adds	r4, #1
 8013218:	9305      	str	r3, [sp, #20]
 801321a:	4619      	mov	r1, r3
 801321c:	f04f 0c0a 	mov.w	ip, #10
 8013220:	4620      	mov	r0, r4
 8013222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013226:	3a30      	subs	r2, #48	; 0x30
 8013228:	2a09      	cmp	r2, #9
 801322a:	d903      	bls.n	8013234 <_vfiprintf_r+0x1d0>
 801322c:	2b00      	cmp	r3, #0
 801322e:	d0c6      	beq.n	80131be <_vfiprintf_r+0x15a>
 8013230:	9105      	str	r1, [sp, #20]
 8013232:	e7c4      	b.n	80131be <_vfiprintf_r+0x15a>
 8013234:	fb0c 2101 	mla	r1, ip, r1, r2
 8013238:	4604      	mov	r4, r0
 801323a:	2301      	movs	r3, #1
 801323c:	e7f0      	b.n	8013220 <_vfiprintf_r+0x1bc>
 801323e:	ab03      	add	r3, sp, #12
 8013240:	9300      	str	r3, [sp, #0]
 8013242:	462a      	mov	r2, r5
 8013244:	4b12      	ldr	r3, [pc, #72]	; (8013290 <_vfiprintf_r+0x22c>)
 8013246:	a904      	add	r1, sp, #16
 8013248:	4630      	mov	r0, r6
 801324a:	f7fd fc53 	bl	8010af4 <_printf_float>
 801324e:	4607      	mov	r7, r0
 8013250:	1c78      	adds	r0, r7, #1
 8013252:	d1d6      	bne.n	8013202 <_vfiprintf_r+0x19e>
 8013254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013256:	07d9      	lsls	r1, r3, #31
 8013258:	d405      	bmi.n	8013266 <_vfiprintf_r+0x202>
 801325a:	89ab      	ldrh	r3, [r5, #12]
 801325c:	059a      	lsls	r2, r3, #22
 801325e:	d402      	bmi.n	8013266 <_vfiprintf_r+0x202>
 8013260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013262:	f7fe f9c1 	bl	80115e8 <__retarget_lock_release_recursive>
 8013266:	89ab      	ldrh	r3, [r5, #12]
 8013268:	065b      	lsls	r3, r3, #25
 801326a:	f53f af1d 	bmi.w	80130a8 <_vfiprintf_r+0x44>
 801326e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013270:	e71c      	b.n	80130ac <_vfiprintf_r+0x48>
 8013272:	ab03      	add	r3, sp, #12
 8013274:	9300      	str	r3, [sp, #0]
 8013276:	462a      	mov	r2, r5
 8013278:	4b05      	ldr	r3, [pc, #20]	; (8013290 <_vfiprintf_r+0x22c>)
 801327a:	a904      	add	r1, sp, #16
 801327c:	4630      	mov	r0, r6
 801327e:	f7fd fedd 	bl	801103c <_printf_i>
 8013282:	e7e4      	b.n	801324e <_vfiprintf_r+0x1ea>
 8013284:	0801530c 	.word	0x0801530c
 8013288:	08015316 	.word	0x08015316
 801328c:	08010af5 	.word	0x08010af5
 8013290:	08013041 	.word	0x08013041
 8013294:	08015312 	.word	0x08015312

08013298 <__swbuf_r>:
 8013298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801329a:	460e      	mov	r6, r1
 801329c:	4614      	mov	r4, r2
 801329e:	4605      	mov	r5, r0
 80132a0:	b118      	cbz	r0, 80132aa <__swbuf_r+0x12>
 80132a2:	6a03      	ldr	r3, [r0, #32]
 80132a4:	b90b      	cbnz	r3, 80132aa <__swbuf_r+0x12>
 80132a6:	f7fe f877 	bl	8011398 <__sinit>
 80132aa:	69a3      	ldr	r3, [r4, #24]
 80132ac:	60a3      	str	r3, [r4, #8]
 80132ae:	89a3      	ldrh	r3, [r4, #12]
 80132b0:	071a      	lsls	r2, r3, #28
 80132b2:	d525      	bpl.n	8013300 <__swbuf_r+0x68>
 80132b4:	6923      	ldr	r3, [r4, #16]
 80132b6:	b31b      	cbz	r3, 8013300 <__swbuf_r+0x68>
 80132b8:	6823      	ldr	r3, [r4, #0]
 80132ba:	6922      	ldr	r2, [r4, #16]
 80132bc:	1a98      	subs	r0, r3, r2
 80132be:	6963      	ldr	r3, [r4, #20]
 80132c0:	b2f6      	uxtb	r6, r6
 80132c2:	4283      	cmp	r3, r0
 80132c4:	4637      	mov	r7, r6
 80132c6:	dc04      	bgt.n	80132d2 <__swbuf_r+0x3a>
 80132c8:	4621      	mov	r1, r4
 80132ca:	4628      	mov	r0, r5
 80132cc:	f7ff fdbc 	bl	8012e48 <_fflush_r>
 80132d0:	b9e0      	cbnz	r0, 801330c <__swbuf_r+0x74>
 80132d2:	68a3      	ldr	r3, [r4, #8]
 80132d4:	3b01      	subs	r3, #1
 80132d6:	60a3      	str	r3, [r4, #8]
 80132d8:	6823      	ldr	r3, [r4, #0]
 80132da:	1c5a      	adds	r2, r3, #1
 80132dc:	6022      	str	r2, [r4, #0]
 80132de:	701e      	strb	r6, [r3, #0]
 80132e0:	6962      	ldr	r2, [r4, #20]
 80132e2:	1c43      	adds	r3, r0, #1
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d004      	beq.n	80132f2 <__swbuf_r+0x5a>
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	07db      	lsls	r3, r3, #31
 80132ec:	d506      	bpl.n	80132fc <__swbuf_r+0x64>
 80132ee:	2e0a      	cmp	r6, #10
 80132f0:	d104      	bne.n	80132fc <__swbuf_r+0x64>
 80132f2:	4621      	mov	r1, r4
 80132f4:	4628      	mov	r0, r5
 80132f6:	f7ff fda7 	bl	8012e48 <_fflush_r>
 80132fa:	b938      	cbnz	r0, 801330c <__swbuf_r+0x74>
 80132fc:	4638      	mov	r0, r7
 80132fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013300:	4621      	mov	r1, r4
 8013302:	4628      	mov	r0, r5
 8013304:	f000 f806 	bl	8013314 <__swsetup_r>
 8013308:	2800      	cmp	r0, #0
 801330a:	d0d5      	beq.n	80132b8 <__swbuf_r+0x20>
 801330c:	f04f 37ff 	mov.w	r7, #4294967295
 8013310:	e7f4      	b.n	80132fc <__swbuf_r+0x64>
	...

08013314 <__swsetup_r>:
 8013314:	b538      	push	{r3, r4, r5, lr}
 8013316:	4b2a      	ldr	r3, [pc, #168]	; (80133c0 <__swsetup_r+0xac>)
 8013318:	4605      	mov	r5, r0
 801331a:	6818      	ldr	r0, [r3, #0]
 801331c:	460c      	mov	r4, r1
 801331e:	b118      	cbz	r0, 8013328 <__swsetup_r+0x14>
 8013320:	6a03      	ldr	r3, [r0, #32]
 8013322:	b90b      	cbnz	r3, 8013328 <__swsetup_r+0x14>
 8013324:	f7fe f838 	bl	8011398 <__sinit>
 8013328:	89a3      	ldrh	r3, [r4, #12]
 801332a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801332e:	0718      	lsls	r0, r3, #28
 8013330:	d422      	bmi.n	8013378 <__swsetup_r+0x64>
 8013332:	06d9      	lsls	r1, r3, #27
 8013334:	d407      	bmi.n	8013346 <__swsetup_r+0x32>
 8013336:	2309      	movs	r3, #9
 8013338:	602b      	str	r3, [r5, #0]
 801333a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801333e:	81a3      	strh	r3, [r4, #12]
 8013340:	f04f 30ff 	mov.w	r0, #4294967295
 8013344:	e034      	b.n	80133b0 <__swsetup_r+0x9c>
 8013346:	0758      	lsls	r0, r3, #29
 8013348:	d512      	bpl.n	8013370 <__swsetup_r+0x5c>
 801334a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801334c:	b141      	cbz	r1, 8013360 <__swsetup_r+0x4c>
 801334e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013352:	4299      	cmp	r1, r3
 8013354:	d002      	beq.n	801335c <__swsetup_r+0x48>
 8013356:	4628      	mov	r0, r5
 8013358:	f7fe ffd0 	bl	80122fc <_free_r>
 801335c:	2300      	movs	r3, #0
 801335e:	6363      	str	r3, [r4, #52]	; 0x34
 8013360:	89a3      	ldrh	r3, [r4, #12]
 8013362:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013366:	81a3      	strh	r3, [r4, #12]
 8013368:	2300      	movs	r3, #0
 801336a:	6063      	str	r3, [r4, #4]
 801336c:	6923      	ldr	r3, [r4, #16]
 801336e:	6023      	str	r3, [r4, #0]
 8013370:	89a3      	ldrh	r3, [r4, #12]
 8013372:	f043 0308 	orr.w	r3, r3, #8
 8013376:	81a3      	strh	r3, [r4, #12]
 8013378:	6923      	ldr	r3, [r4, #16]
 801337a:	b94b      	cbnz	r3, 8013390 <__swsetup_r+0x7c>
 801337c:	89a3      	ldrh	r3, [r4, #12]
 801337e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013386:	d003      	beq.n	8013390 <__swsetup_r+0x7c>
 8013388:	4621      	mov	r1, r4
 801338a:	4628      	mov	r0, r5
 801338c:	f000 f884 	bl	8013498 <__smakebuf_r>
 8013390:	89a0      	ldrh	r0, [r4, #12]
 8013392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013396:	f010 0301 	ands.w	r3, r0, #1
 801339a:	d00a      	beq.n	80133b2 <__swsetup_r+0x9e>
 801339c:	2300      	movs	r3, #0
 801339e:	60a3      	str	r3, [r4, #8]
 80133a0:	6963      	ldr	r3, [r4, #20]
 80133a2:	425b      	negs	r3, r3
 80133a4:	61a3      	str	r3, [r4, #24]
 80133a6:	6923      	ldr	r3, [r4, #16]
 80133a8:	b943      	cbnz	r3, 80133bc <__swsetup_r+0xa8>
 80133aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133ae:	d1c4      	bne.n	801333a <__swsetup_r+0x26>
 80133b0:	bd38      	pop	{r3, r4, r5, pc}
 80133b2:	0781      	lsls	r1, r0, #30
 80133b4:	bf58      	it	pl
 80133b6:	6963      	ldrpl	r3, [r4, #20]
 80133b8:	60a3      	str	r3, [r4, #8]
 80133ba:	e7f4      	b.n	80133a6 <__swsetup_r+0x92>
 80133bc:	2000      	movs	r0, #0
 80133be:	e7f7      	b.n	80133b0 <__swsetup_r+0x9c>
 80133c0:	200000c4 	.word	0x200000c4

080133c4 <_raise_r>:
 80133c4:	291f      	cmp	r1, #31
 80133c6:	b538      	push	{r3, r4, r5, lr}
 80133c8:	4604      	mov	r4, r0
 80133ca:	460d      	mov	r5, r1
 80133cc:	d904      	bls.n	80133d8 <_raise_r+0x14>
 80133ce:	2316      	movs	r3, #22
 80133d0:	6003      	str	r3, [r0, #0]
 80133d2:	f04f 30ff 	mov.w	r0, #4294967295
 80133d6:	bd38      	pop	{r3, r4, r5, pc}
 80133d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80133da:	b112      	cbz	r2, 80133e2 <_raise_r+0x1e>
 80133dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133e0:	b94b      	cbnz	r3, 80133f6 <_raise_r+0x32>
 80133e2:	4620      	mov	r0, r4
 80133e4:	f000 f830 	bl	8013448 <_getpid_r>
 80133e8:	462a      	mov	r2, r5
 80133ea:	4601      	mov	r1, r0
 80133ec:	4620      	mov	r0, r4
 80133ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133f2:	f000 b817 	b.w	8013424 <_kill_r>
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d00a      	beq.n	8013410 <_raise_r+0x4c>
 80133fa:	1c59      	adds	r1, r3, #1
 80133fc:	d103      	bne.n	8013406 <_raise_r+0x42>
 80133fe:	2316      	movs	r3, #22
 8013400:	6003      	str	r3, [r0, #0]
 8013402:	2001      	movs	r0, #1
 8013404:	e7e7      	b.n	80133d6 <_raise_r+0x12>
 8013406:	2400      	movs	r4, #0
 8013408:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801340c:	4628      	mov	r0, r5
 801340e:	4798      	blx	r3
 8013410:	2000      	movs	r0, #0
 8013412:	e7e0      	b.n	80133d6 <_raise_r+0x12>

08013414 <raise>:
 8013414:	4b02      	ldr	r3, [pc, #8]	; (8013420 <raise+0xc>)
 8013416:	4601      	mov	r1, r0
 8013418:	6818      	ldr	r0, [r3, #0]
 801341a:	f7ff bfd3 	b.w	80133c4 <_raise_r>
 801341e:	bf00      	nop
 8013420:	200000c4 	.word	0x200000c4

08013424 <_kill_r>:
 8013424:	b538      	push	{r3, r4, r5, lr}
 8013426:	4d07      	ldr	r5, [pc, #28]	; (8013444 <_kill_r+0x20>)
 8013428:	2300      	movs	r3, #0
 801342a:	4604      	mov	r4, r0
 801342c:	4608      	mov	r0, r1
 801342e:	4611      	mov	r1, r2
 8013430:	602b      	str	r3, [r5, #0]
 8013432:	f7f2 fee9 	bl	8006208 <_kill>
 8013436:	1c43      	adds	r3, r0, #1
 8013438:	d102      	bne.n	8013440 <_kill_r+0x1c>
 801343a:	682b      	ldr	r3, [r5, #0]
 801343c:	b103      	cbz	r3, 8013440 <_kill_r+0x1c>
 801343e:	6023      	str	r3, [r4, #0]
 8013440:	bd38      	pop	{r3, r4, r5, pc}
 8013442:	bf00      	nop
 8013444:	200064f0 	.word	0x200064f0

08013448 <_getpid_r>:
 8013448:	f7f2 bed6 	b.w	80061f8 <_getpid>

0801344c <__swhatbuf_r>:
 801344c:	b570      	push	{r4, r5, r6, lr}
 801344e:	460c      	mov	r4, r1
 8013450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013454:	2900      	cmp	r1, #0
 8013456:	b096      	sub	sp, #88	; 0x58
 8013458:	4615      	mov	r5, r2
 801345a:	461e      	mov	r6, r3
 801345c:	da0d      	bge.n	801347a <__swhatbuf_r+0x2e>
 801345e:	89a3      	ldrh	r3, [r4, #12]
 8013460:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013464:	f04f 0100 	mov.w	r1, #0
 8013468:	bf0c      	ite	eq
 801346a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801346e:	2340      	movne	r3, #64	; 0x40
 8013470:	2000      	movs	r0, #0
 8013472:	6031      	str	r1, [r6, #0]
 8013474:	602b      	str	r3, [r5, #0]
 8013476:	b016      	add	sp, #88	; 0x58
 8013478:	bd70      	pop	{r4, r5, r6, pc}
 801347a:	466a      	mov	r2, sp
 801347c:	f000 f848 	bl	8013510 <_fstat_r>
 8013480:	2800      	cmp	r0, #0
 8013482:	dbec      	blt.n	801345e <__swhatbuf_r+0x12>
 8013484:	9901      	ldr	r1, [sp, #4]
 8013486:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801348a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801348e:	4259      	negs	r1, r3
 8013490:	4159      	adcs	r1, r3
 8013492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013496:	e7eb      	b.n	8013470 <__swhatbuf_r+0x24>

08013498 <__smakebuf_r>:
 8013498:	898b      	ldrh	r3, [r1, #12]
 801349a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801349c:	079d      	lsls	r5, r3, #30
 801349e:	4606      	mov	r6, r0
 80134a0:	460c      	mov	r4, r1
 80134a2:	d507      	bpl.n	80134b4 <__smakebuf_r+0x1c>
 80134a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134a8:	6023      	str	r3, [r4, #0]
 80134aa:	6123      	str	r3, [r4, #16]
 80134ac:	2301      	movs	r3, #1
 80134ae:	6163      	str	r3, [r4, #20]
 80134b0:	b002      	add	sp, #8
 80134b2:	bd70      	pop	{r4, r5, r6, pc}
 80134b4:	ab01      	add	r3, sp, #4
 80134b6:	466a      	mov	r2, sp
 80134b8:	f7ff ffc8 	bl	801344c <__swhatbuf_r>
 80134bc:	9900      	ldr	r1, [sp, #0]
 80134be:	4605      	mov	r5, r0
 80134c0:	4630      	mov	r0, r6
 80134c2:	f7fd f9eb 	bl	801089c <_malloc_r>
 80134c6:	b948      	cbnz	r0, 80134dc <__smakebuf_r+0x44>
 80134c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134cc:	059a      	lsls	r2, r3, #22
 80134ce:	d4ef      	bmi.n	80134b0 <__smakebuf_r+0x18>
 80134d0:	f023 0303 	bic.w	r3, r3, #3
 80134d4:	f043 0302 	orr.w	r3, r3, #2
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	e7e3      	b.n	80134a4 <__smakebuf_r+0xc>
 80134dc:	89a3      	ldrh	r3, [r4, #12]
 80134de:	6020      	str	r0, [r4, #0]
 80134e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134e4:	81a3      	strh	r3, [r4, #12]
 80134e6:	9b00      	ldr	r3, [sp, #0]
 80134e8:	6163      	str	r3, [r4, #20]
 80134ea:	9b01      	ldr	r3, [sp, #4]
 80134ec:	6120      	str	r0, [r4, #16]
 80134ee:	b15b      	cbz	r3, 8013508 <__smakebuf_r+0x70>
 80134f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134f4:	4630      	mov	r0, r6
 80134f6:	f000 f81d 	bl	8013534 <_isatty_r>
 80134fa:	b128      	cbz	r0, 8013508 <__smakebuf_r+0x70>
 80134fc:	89a3      	ldrh	r3, [r4, #12]
 80134fe:	f023 0303 	bic.w	r3, r3, #3
 8013502:	f043 0301 	orr.w	r3, r3, #1
 8013506:	81a3      	strh	r3, [r4, #12]
 8013508:	89a3      	ldrh	r3, [r4, #12]
 801350a:	431d      	orrs	r5, r3
 801350c:	81a5      	strh	r5, [r4, #12]
 801350e:	e7cf      	b.n	80134b0 <__smakebuf_r+0x18>

08013510 <_fstat_r>:
 8013510:	b538      	push	{r3, r4, r5, lr}
 8013512:	4d07      	ldr	r5, [pc, #28]	; (8013530 <_fstat_r+0x20>)
 8013514:	2300      	movs	r3, #0
 8013516:	4604      	mov	r4, r0
 8013518:	4608      	mov	r0, r1
 801351a:	4611      	mov	r1, r2
 801351c:	602b      	str	r3, [r5, #0]
 801351e:	f7f2 fed2 	bl	80062c6 <_fstat>
 8013522:	1c43      	adds	r3, r0, #1
 8013524:	d102      	bne.n	801352c <_fstat_r+0x1c>
 8013526:	682b      	ldr	r3, [r5, #0]
 8013528:	b103      	cbz	r3, 801352c <_fstat_r+0x1c>
 801352a:	6023      	str	r3, [r4, #0]
 801352c:	bd38      	pop	{r3, r4, r5, pc}
 801352e:	bf00      	nop
 8013530:	200064f0 	.word	0x200064f0

08013534 <_isatty_r>:
 8013534:	b538      	push	{r3, r4, r5, lr}
 8013536:	4d06      	ldr	r5, [pc, #24]	; (8013550 <_isatty_r+0x1c>)
 8013538:	2300      	movs	r3, #0
 801353a:	4604      	mov	r4, r0
 801353c:	4608      	mov	r0, r1
 801353e:	602b      	str	r3, [r5, #0]
 8013540:	f7f2 fed1 	bl	80062e6 <_isatty>
 8013544:	1c43      	adds	r3, r0, #1
 8013546:	d102      	bne.n	801354e <_isatty_r+0x1a>
 8013548:	682b      	ldr	r3, [r5, #0]
 801354a:	b103      	cbz	r3, 801354e <_isatty_r+0x1a>
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	bd38      	pop	{r3, r4, r5, pc}
 8013550:	200064f0 	.word	0x200064f0

08013554 <asinf>:
 8013554:	b508      	push	{r3, lr}
 8013556:	ed2d 8b02 	vpush	{d8}
 801355a:	eeb0 8a40 	vmov.f32	s16, s0
 801355e:	f000 f9cf 	bl	8013900 <__ieee754_asinf>
 8013562:	eeb4 8a48 	vcmp.f32	s16, s16
 8013566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356a:	eef0 8a40 	vmov.f32	s17, s0
 801356e:	d615      	bvs.n	801359c <asinf+0x48>
 8013570:	eeb0 0a48 	vmov.f32	s0, s16
 8013574:	f000 f8b8 	bl	80136e8 <fabsf>
 8013578:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801357c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013584:	dd0a      	ble.n	801359c <asinf+0x48>
 8013586:	f7fe f803 	bl	8011590 <__errno>
 801358a:	ecbd 8b02 	vpop	{d8}
 801358e:	2321      	movs	r3, #33	; 0x21
 8013590:	6003      	str	r3, [r0, #0]
 8013592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013596:	4804      	ldr	r0, [pc, #16]	; (80135a8 <asinf+0x54>)
 8013598:	f000 b902 	b.w	80137a0 <nanf>
 801359c:	eeb0 0a68 	vmov.f32	s0, s17
 80135a0:	ecbd 8b02 	vpop	{d8}
 80135a4:	bd08      	pop	{r3, pc}
 80135a6:	bf00      	nop
 80135a8:	08015362 	.word	0x08015362

080135ac <atan2f>:
 80135ac:	f000 ba8e 	b.w	8013acc <__ieee754_atan2f>

080135b0 <powf>:
 80135b0:	b508      	push	{r3, lr}
 80135b2:	ed2d 8b04 	vpush	{d8-d9}
 80135b6:	eeb0 8a60 	vmov.f32	s16, s1
 80135ba:	eeb0 9a40 	vmov.f32	s18, s0
 80135be:	f000 fb25 	bl	8013c0c <__ieee754_powf>
 80135c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80135c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ca:	eef0 8a40 	vmov.f32	s17, s0
 80135ce:	d63e      	bvs.n	801364e <powf+0x9e>
 80135d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80135d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d8:	d112      	bne.n	8013600 <powf+0x50>
 80135da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80135de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e2:	d039      	beq.n	8013658 <powf+0xa8>
 80135e4:	eeb0 0a48 	vmov.f32	s0, s16
 80135e8:	f000 f8cc 	bl	8013784 <finitef>
 80135ec:	b378      	cbz	r0, 801364e <powf+0x9e>
 80135ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80135f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f6:	d52a      	bpl.n	801364e <powf+0x9e>
 80135f8:	f7fd ffca 	bl	8011590 <__errno>
 80135fc:	2322      	movs	r3, #34	; 0x22
 80135fe:	e014      	b.n	801362a <powf+0x7a>
 8013600:	f000 f8c0 	bl	8013784 <finitef>
 8013604:	b998      	cbnz	r0, 801362e <powf+0x7e>
 8013606:	eeb0 0a49 	vmov.f32	s0, s18
 801360a:	f000 f8bb 	bl	8013784 <finitef>
 801360e:	b170      	cbz	r0, 801362e <powf+0x7e>
 8013610:	eeb0 0a48 	vmov.f32	s0, s16
 8013614:	f000 f8b6 	bl	8013784 <finitef>
 8013618:	b148      	cbz	r0, 801362e <powf+0x7e>
 801361a:	eef4 8a68 	vcmp.f32	s17, s17
 801361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013622:	d7e9      	bvc.n	80135f8 <powf+0x48>
 8013624:	f7fd ffb4 	bl	8011590 <__errno>
 8013628:	2321      	movs	r3, #33	; 0x21
 801362a:	6003      	str	r3, [r0, #0]
 801362c:	e00f      	b.n	801364e <powf+0x9e>
 801362e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013636:	d10a      	bne.n	801364e <powf+0x9e>
 8013638:	eeb0 0a49 	vmov.f32	s0, s18
 801363c:	f000 f8a2 	bl	8013784 <finitef>
 8013640:	b128      	cbz	r0, 801364e <powf+0x9e>
 8013642:	eeb0 0a48 	vmov.f32	s0, s16
 8013646:	f000 f89d 	bl	8013784 <finitef>
 801364a:	2800      	cmp	r0, #0
 801364c:	d1d4      	bne.n	80135f8 <powf+0x48>
 801364e:	eeb0 0a68 	vmov.f32	s0, s17
 8013652:	ecbd 8b04 	vpop	{d8-d9}
 8013656:	bd08      	pop	{r3, pc}
 8013658:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801365c:	e7f7      	b.n	801364e <powf+0x9e>
	...

08013660 <cosf>:
 8013660:	ee10 3a10 	vmov	r3, s0
 8013664:	b507      	push	{r0, r1, r2, lr}
 8013666:	4a1e      	ldr	r2, [pc, #120]	; (80136e0 <cosf+0x80>)
 8013668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801366c:	4293      	cmp	r3, r2
 801366e:	dc06      	bgt.n	801367e <cosf+0x1e>
 8013670:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80136e4 <cosf+0x84>
 8013674:	b003      	add	sp, #12
 8013676:	f85d eb04 	ldr.w	lr, [sp], #4
 801367a:	f000 b89b 	b.w	80137b4 <__kernel_cosf>
 801367e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013682:	db04      	blt.n	801368e <cosf+0x2e>
 8013684:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013688:	b003      	add	sp, #12
 801368a:	f85d fb04 	ldr.w	pc, [sp], #4
 801368e:	4668      	mov	r0, sp
 8013690:	f000 fd86 	bl	80141a0 <__ieee754_rem_pio2f>
 8013694:	f000 0003 	and.w	r0, r0, #3
 8013698:	2801      	cmp	r0, #1
 801369a:	d009      	beq.n	80136b0 <cosf+0x50>
 801369c:	2802      	cmp	r0, #2
 801369e:	d010      	beq.n	80136c2 <cosf+0x62>
 80136a0:	b9b0      	cbnz	r0, 80136d0 <cosf+0x70>
 80136a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80136a6:	ed9d 0a00 	vldr	s0, [sp]
 80136aa:	f000 f883 	bl	80137b4 <__kernel_cosf>
 80136ae:	e7eb      	b.n	8013688 <cosf+0x28>
 80136b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80136b4:	ed9d 0a00 	vldr	s0, [sp]
 80136b8:	f000 f8da 	bl	8013870 <__kernel_sinf>
 80136bc:	eeb1 0a40 	vneg.f32	s0, s0
 80136c0:	e7e2      	b.n	8013688 <cosf+0x28>
 80136c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80136c6:	ed9d 0a00 	vldr	s0, [sp]
 80136ca:	f000 f873 	bl	80137b4 <__kernel_cosf>
 80136ce:	e7f5      	b.n	80136bc <cosf+0x5c>
 80136d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80136d4:	ed9d 0a00 	vldr	s0, [sp]
 80136d8:	2001      	movs	r0, #1
 80136da:	f000 f8c9 	bl	8013870 <__kernel_sinf>
 80136de:	e7d3      	b.n	8013688 <cosf+0x28>
 80136e0:	3f490fd8 	.word	0x3f490fd8
 80136e4:	00000000 	.word	0x00000000

080136e8 <fabsf>:
 80136e8:	ee10 3a10 	vmov	r3, s0
 80136ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136f0:	ee00 3a10 	vmov	s0, r3
 80136f4:	4770      	bx	lr
	...

080136f8 <sinf>:
 80136f8:	ee10 3a10 	vmov	r3, s0
 80136fc:	b507      	push	{r0, r1, r2, lr}
 80136fe:	4a1f      	ldr	r2, [pc, #124]	; (801377c <sinf+0x84>)
 8013700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013704:	4293      	cmp	r3, r2
 8013706:	dc07      	bgt.n	8013718 <sinf+0x20>
 8013708:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8013780 <sinf+0x88>
 801370c:	2000      	movs	r0, #0
 801370e:	b003      	add	sp, #12
 8013710:	f85d eb04 	ldr.w	lr, [sp], #4
 8013714:	f000 b8ac 	b.w	8013870 <__kernel_sinf>
 8013718:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801371c:	db04      	blt.n	8013728 <sinf+0x30>
 801371e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013722:	b003      	add	sp, #12
 8013724:	f85d fb04 	ldr.w	pc, [sp], #4
 8013728:	4668      	mov	r0, sp
 801372a:	f000 fd39 	bl	80141a0 <__ieee754_rem_pio2f>
 801372e:	f000 0003 	and.w	r0, r0, #3
 8013732:	2801      	cmp	r0, #1
 8013734:	d00a      	beq.n	801374c <sinf+0x54>
 8013736:	2802      	cmp	r0, #2
 8013738:	d00f      	beq.n	801375a <sinf+0x62>
 801373a:	b9c0      	cbnz	r0, 801376e <sinf+0x76>
 801373c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013740:	ed9d 0a00 	vldr	s0, [sp]
 8013744:	2001      	movs	r0, #1
 8013746:	f000 f893 	bl	8013870 <__kernel_sinf>
 801374a:	e7ea      	b.n	8013722 <sinf+0x2a>
 801374c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013750:	ed9d 0a00 	vldr	s0, [sp]
 8013754:	f000 f82e 	bl	80137b4 <__kernel_cosf>
 8013758:	e7e3      	b.n	8013722 <sinf+0x2a>
 801375a:	eddd 0a01 	vldr	s1, [sp, #4]
 801375e:	ed9d 0a00 	vldr	s0, [sp]
 8013762:	2001      	movs	r0, #1
 8013764:	f000 f884 	bl	8013870 <__kernel_sinf>
 8013768:	eeb1 0a40 	vneg.f32	s0, s0
 801376c:	e7d9      	b.n	8013722 <sinf+0x2a>
 801376e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013772:	ed9d 0a00 	vldr	s0, [sp]
 8013776:	f000 f81d 	bl	80137b4 <__kernel_cosf>
 801377a:	e7f5      	b.n	8013768 <sinf+0x70>
 801377c:	3f490fd8 	.word	0x3f490fd8
 8013780:	00000000 	.word	0x00000000

08013784 <finitef>:
 8013784:	b082      	sub	sp, #8
 8013786:	ed8d 0a01 	vstr	s0, [sp, #4]
 801378a:	9801      	ldr	r0, [sp, #4]
 801378c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013790:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013794:	bfac      	ite	ge
 8013796:	2000      	movge	r0, #0
 8013798:	2001      	movlt	r0, #1
 801379a:	b002      	add	sp, #8
 801379c:	4770      	bx	lr
	...

080137a0 <nanf>:
 80137a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80137a8 <nanf+0x8>
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	7fc00000 	.word	0x7fc00000

080137ac <__ieee754_sqrtf>:
 80137ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80137b0:	4770      	bx	lr
	...

080137b4 <__kernel_cosf>:
 80137b4:	ee10 3a10 	vmov	r3, s0
 80137b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80137c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137c4:	da05      	bge.n	80137d2 <__kernel_cosf+0x1e>
 80137c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80137ca:	ee17 2a90 	vmov	r2, s15
 80137ce:	2a00      	cmp	r2, #0
 80137d0:	d03b      	beq.n	801384a <__kernel_cosf+0x96>
 80137d2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80137d6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013850 <__kernel_cosf+0x9c>
 80137da:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8013854 <__kernel_cosf+0xa0>
 80137de:	4a1e      	ldr	r2, [pc, #120]	; (8013858 <__kernel_cosf+0xa4>)
 80137e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80137e4:	4293      	cmp	r3, r2
 80137e6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801385c <__kernel_cosf+0xa8>
 80137ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137ee:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8013860 <__kernel_cosf+0xac>
 80137f2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80137f6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8013864 <__kernel_cosf+0xb0>
 80137fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137fe:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8013868 <__kernel_cosf+0xb4>
 8013802:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013806:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801380a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801380e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013812:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013816:	ee67 7a27 	vmul.f32	s15, s14, s15
 801381a:	dc04      	bgt.n	8013826 <__kernel_cosf+0x72>
 801381c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013820:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8013824:	4770      	bx	lr
 8013826:	4a11      	ldr	r2, [pc, #68]	; (801386c <__kernel_cosf+0xb8>)
 8013828:	4293      	cmp	r3, r2
 801382a:	bfda      	itte	le
 801382c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013830:	ee07 3a10 	vmovle	s14, r3
 8013834:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8013838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801383c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8013840:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013844:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013848:	4770      	bx	lr
 801384a:	eeb0 0a66 	vmov.f32	s0, s13
 801384e:	4770      	bx	lr
 8013850:	ad47d74e 	.word	0xad47d74e
 8013854:	310f74f6 	.word	0x310f74f6
 8013858:	3e999999 	.word	0x3e999999
 801385c:	b493f27c 	.word	0xb493f27c
 8013860:	37d00d01 	.word	0x37d00d01
 8013864:	bab60b61 	.word	0xbab60b61
 8013868:	3d2aaaab 	.word	0x3d2aaaab
 801386c:	3f480000 	.word	0x3f480000

08013870 <__kernel_sinf>:
 8013870:	ee10 3a10 	vmov	r3, s0
 8013874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013878:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801387c:	da04      	bge.n	8013888 <__kernel_sinf+0x18>
 801387e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013882:	ee17 3a90 	vmov	r3, s15
 8013886:	b35b      	cbz	r3, 80138e0 <__kernel_sinf+0x70>
 8013888:	ee20 7a00 	vmul.f32	s14, s0, s0
 801388c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80138e4 <__kernel_sinf+0x74>
 8013890:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80138e8 <__kernel_sinf+0x78>
 8013894:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013898:	eddf 7a14 	vldr	s15, [pc, #80]	; 80138ec <__kernel_sinf+0x7c>
 801389c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80138a0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80138f0 <__kernel_sinf+0x80>
 80138a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80138a8:	eddf 7a12 	vldr	s15, [pc, #72]	; 80138f4 <__kernel_sinf+0x84>
 80138ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 80138b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80138b4:	b930      	cbnz	r0, 80138c4 <__kernel_sinf+0x54>
 80138b6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80138f8 <__kernel_sinf+0x88>
 80138ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80138be:	eea6 0a26 	vfma.f32	s0, s12, s13
 80138c2:	4770      	bx	lr
 80138c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80138c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80138cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80138d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80138d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80138fc <__kernel_sinf+0x8c>
 80138d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80138dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80138e0:	4770      	bx	lr
 80138e2:	bf00      	nop
 80138e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80138e8:	b2d72f34 	.word	0xb2d72f34
 80138ec:	3638ef1b 	.word	0x3638ef1b
 80138f0:	b9500d01 	.word	0xb9500d01
 80138f4:	3c088889 	.word	0x3c088889
 80138f8:	be2aaaab 	.word	0xbe2aaaab
 80138fc:	3e2aaaab 	.word	0x3e2aaaab

08013900 <__ieee754_asinf>:
 8013900:	b538      	push	{r3, r4, r5, lr}
 8013902:	ee10 5a10 	vmov	r5, s0
 8013906:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801390a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801390e:	ed2d 8b04 	vpush	{d8-d9}
 8013912:	d10c      	bne.n	801392e <__ieee754_asinf+0x2e>
 8013914:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013a8c <__ieee754_asinf+0x18c>
 8013918:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8013a90 <__ieee754_asinf+0x190>
 801391c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013920:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013924:	eeb0 0a67 	vmov.f32	s0, s15
 8013928:	ecbd 8b04 	vpop	{d8-d9}
 801392c:	bd38      	pop	{r3, r4, r5, pc}
 801392e:	dd04      	ble.n	801393a <__ieee754_asinf+0x3a>
 8013930:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013934:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013938:	e7f6      	b.n	8013928 <__ieee754_asinf+0x28>
 801393a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801393e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013942:	da0b      	bge.n	801395c <__ieee754_asinf+0x5c>
 8013944:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013948:	da52      	bge.n	80139f0 <__ieee754_asinf+0xf0>
 801394a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013a94 <__ieee754_asinf+0x194>
 801394e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013952:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801395a:	dce5      	bgt.n	8013928 <__ieee754_asinf+0x28>
 801395c:	f7ff fec4 	bl	80136e8 <fabsf>
 8013960:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013964:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013968:	ee20 8a27 	vmul.f32	s16, s0, s15
 801396c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013a98 <__ieee754_asinf+0x198>
 8013970:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013a9c <__ieee754_asinf+0x19c>
 8013974:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8013aa0 <__ieee754_asinf+0x1a0>
 8013978:	eea8 7a27 	vfma.f32	s14, s16, s15
 801397c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8013aa4 <__ieee754_asinf+0x1a4>
 8013980:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013984:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8013aa8 <__ieee754_asinf+0x1a8>
 8013988:	eea7 7a88 	vfma.f32	s14, s15, s16
 801398c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8013aac <__ieee754_asinf+0x1ac>
 8013990:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013994:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013ab0 <__ieee754_asinf+0x1b0>
 8013998:	eea7 9a88 	vfma.f32	s18, s15, s16
 801399c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8013ab4 <__ieee754_asinf+0x1b4>
 80139a0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80139a4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8013ab8 <__ieee754_asinf+0x1b8>
 80139a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80139ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013abc <__ieee754_asinf+0x1bc>
 80139b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80139b4:	eeb0 0a48 	vmov.f32	s0, s16
 80139b8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80139bc:	f7ff fef6 	bl	80137ac <__ieee754_sqrtf>
 80139c0:	4b3f      	ldr	r3, [pc, #252]	; (8013ac0 <__ieee754_asinf+0x1c0>)
 80139c2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80139c6:	429c      	cmp	r4, r3
 80139c8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80139cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80139d0:	dd3d      	ble.n	8013a4e <__ieee754_asinf+0x14e>
 80139d2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80139d6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013ac4 <__ieee754_asinf+0x1c4>
 80139da:	eee0 7a26 	vfma.f32	s15, s0, s13
 80139de:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013a90 <__ieee754_asinf+0x190>
 80139e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139e6:	2d00      	cmp	r5, #0
 80139e8:	bfd8      	it	le
 80139ea:	eeb1 0a40 	vnegle.f32	s0, s0
 80139ee:	e79b      	b.n	8013928 <__ieee754_asinf+0x28>
 80139f0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80139f4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013a9c <__ieee754_asinf+0x19c>
 80139f8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013a98 <__ieee754_asinf+0x198>
 80139fc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013ab0 <__ieee754_asinf+0x1b0>
 8013a00:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013a04:	eddf 6a27 	vldr	s13, [pc, #156]	; 8013aa4 <__ieee754_asinf+0x1a4>
 8013a08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013a0c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8013aa8 <__ieee754_asinf+0x1a8>
 8013a10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013a14:	eddf 6a25 	vldr	s13, [pc, #148]	; 8013aac <__ieee754_asinf+0x1ac>
 8013a18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013a1c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013aa0 <__ieee754_asinf+0x1a0>
 8013a20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013a24:	eddf 6a23 	vldr	s13, [pc, #140]	; 8013ab4 <__ieee754_asinf+0x1b4>
 8013a28:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013a2c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8013ab8 <__ieee754_asinf+0x1b8>
 8013a30:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013a34:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013abc <__ieee754_asinf+0x1bc>
 8013a38:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a40:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013a44:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013a48:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013a4c:	e76c      	b.n	8013928 <__ieee754_asinf+0x28>
 8013a4e:	ee10 3a10 	vmov	r3, s0
 8013a52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013a56:	f023 030f 	bic.w	r3, r3, #15
 8013a5a:	ee07 3a10 	vmov	s14, r3
 8013a5e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8013a62:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013a66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a6a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8013a6e:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013a8c <__ieee754_asinf+0x18c>
 8013a72:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8013a76:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013a7a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8013ac8 <__ieee754_asinf+0x1c8>
 8013a7e:	eeb0 6a40 	vmov.f32	s12, s0
 8013a82:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013a86:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013a8a:	e7aa      	b.n	80139e2 <__ieee754_asinf+0xe2>
 8013a8c:	b33bbd2e 	.word	0xb33bbd2e
 8013a90:	3fc90fdb 	.word	0x3fc90fdb
 8013a94:	7149f2ca 	.word	0x7149f2ca
 8013a98:	3a4f7f04 	.word	0x3a4f7f04
 8013a9c:	3811ef08 	.word	0x3811ef08
 8013aa0:	3e2aaaab 	.word	0x3e2aaaab
 8013aa4:	bd241146 	.word	0xbd241146
 8013aa8:	3e4e0aa8 	.word	0x3e4e0aa8
 8013aac:	bea6b090 	.word	0xbea6b090
 8013ab0:	3d9dc62e 	.word	0x3d9dc62e
 8013ab4:	bf303361 	.word	0xbf303361
 8013ab8:	4001572d 	.word	0x4001572d
 8013abc:	c019d139 	.word	0xc019d139
 8013ac0:	3f799999 	.word	0x3f799999
 8013ac4:	333bbd2e 	.word	0x333bbd2e
 8013ac8:	3f490fdb 	.word	0x3f490fdb

08013acc <__ieee754_atan2f>:
 8013acc:	ee10 2a90 	vmov	r2, s1
 8013ad0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013ad4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013ad8:	b510      	push	{r4, lr}
 8013ada:	eef0 7a40 	vmov.f32	s15, s0
 8013ade:	dc06      	bgt.n	8013aee <__ieee754_atan2f+0x22>
 8013ae0:	ee10 0a10 	vmov	r0, s0
 8013ae4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013ae8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013aec:	dd04      	ble.n	8013af8 <__ieee754_atan2f+0x2c>
 8013aee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013af2:	eeb0 0a67 	vmov.f32	s0, s15
 8013af6:	bd10      	pop	{r4, pc}
 8013af8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013afc:	d103      	bne.n	8013b06 <__ieee754_atan2f+0x3a>
 8013afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b02:	f000 bc79 	b.w	80143f8 <atanf>
 8013b06:	1794      	asrs	r4, r2, #30
 8013b08:	f004 0402 	and.w	r4, r4, #2
 8013b0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013b10:	b943      	cbnz	r3, 8013b24 <__ieee754_atan2f+0x58>
 8013b12:	2c02      	cmp	r4, #2
 8013b14:	d05e      	beq.n	8013bd4 <__ieee754_atan2f+0x108>
 8013b16:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013be8 <__ieee754_atan2f+0x11c>
 8013b1a:	2c03      	cmp	r4, #3
 8013b1c:	bf08      	it	eq
 8013b1e:	eef0 7a47 	vmoveq.f32	s15, s14
 8013b22:	e7e6      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013b24:	b941      	cbnz	r1, 8013b38 <__ieee754_atan2f+0x6c>
 8013b26:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013bec <__ieee754_atan2f+0x120>
 8013b2a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013bf0 <__ieee754_atan2f+0x124>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	bfb8      	it	lt
 8013b32:	eef0 7a47 	vmovlt.f32	s15, s14
 8013b36:	e7dc      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013b38:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013b3c:	d110      	bne.n	8013b60 <__ieee754_atan2f+0x94>
 8013b3e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b42:	f104 34ff 	add.w	r4, r4, #4294967295
 8013b46:	d107      	bne.n	8013b58 <__ieee754_atan2f+0x8c>
 8013b48:	2c02      	cmp	r4, #2
 8013b4a:	d846      	bhi.n	8013bda <__ieee754_atan2f+0x10e>
 8013b4c:	4b29      	ldr	r3, [pc, #164]	; (8013bf4 <__ieee754_atan2f+0x128>)
 8013b4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013b52:	edd3 7a00 	vldr	s15, [r3]
 8013b56:	e7cc      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013b58:	2c02      	cmp	r4, #2
 8013b5a:	d841      	bhi.n	8013be0 <__ieee754_atan2f+0x114>
 8013b5c:	4b26      	ldr	r3, [pc, #152]	; (8013bf8 <__ieee754_atan2f+0x12c>)
 8013b5e:	e7f6      	b.n	8013b4e <__ieee754_atan2f+0x82>
 8013b60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b64:	d0df      	beq.n	8013b26 <__ieee754_atan2f+0x5a>
 8013b66:	1a5b      	subs	r3, r3, r1
 8013b68:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013b6c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013b70:	da1a      	bge.n	8013ba8 <__ieee754_atan2f+0xdc>
 8013b72:	2a00      	cmp	r2, #0
 8013b74:	da01      	bge.n	8013b7a <__ieee754_atan2f+0xae>
 8013b76:	313c      	adds	r1, #60	; 0x3c
 8013b78:	db19      	blt.n	8013bae <__ieee754_atan2f+0xe2>
 8013b7a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013b7e:	f7ff fdb3 	bl	80136e8 <fabsf>
 8013b82:	f000 fc39 	bl	80143f8 <atanf>
 8013b86:	eef0 7a40 	vmov.f32	s15, s0
 8013b8a:	2c01      	cmp	r4, #1
 8013b8c:	d012      	beq.n	8013bb4 <__ieee754_atan2f+0xe8>
 8013b8e:	2c02      	cmp	r4, #2
 8013b90:	d017      	beq.n	8013bc2 <__ieee754_atan2f+0xf6>
 8013b92:	2c00      	cmp	r4, #0
 8013b94:	d0ad      	beq.n	8013af2 <__ieee754_atan2f+0x26>
 8013b96:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8013bfc <__ieee754_atan2f+0x130>
 8013b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b9e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8013c00 <__ieee754_atan2f+0x134>
 8013ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ba6:	e7a4      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013ba8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013bec <__ieee754_atan2f+0x120>
 8013bac:	e7ed      	b.n	8013b8a <__ieee754_atan2f+0xbe>
 8013bae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013c04 <__ieee754_atan2f+0x138>
 8013bb2:	e7ea      	b.n	8013b8a <__ieee754_atan2f+0xbe>
 8013bb4:	ee17 3a90 	vmov	r3, s15
 8013bb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013bbc:	ee07 3a90 	vmov	s15, r3
 8013bc0:	e797      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013bc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8013bfc <__ieee754_atan2f+0x130>
 8013bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8013c00 <__ieee754_atan2f+0x134>
 8013bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bd2:	e78e      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013bd4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013c00 <__ieee754_atan2f+0x134>
 8013bd8:	e78b      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013bda:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013c08 <__ieee754_atan2f+0x13c>
 8013bde:	e788      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013be0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013c04 <__ieee754_atan2f+0x138>
 8013be4:	e785      	b.n	8013af2 <__ieee754_atan2f+0x26>
 8013be6:	bf00      	nop
 8013be8:	c0490fdb 	.word	0xc0490fdb
 8013bec:	3fc90fdb 	.word	0x3fc90fdb
 8013bf0:	bfc90fdb 	.word	0xbfc90fdb
 8013bf4:	08015464 	.word	0x08015464
 8013bf8:	08015470 	.word	0x08015470
 8013bfc:	33bbbd2e 	.word	0x33bbbd2e
 8013c00:	40490fdb 	.word	0x40490fdb
 8013c04:	00000000 	.word	0x00000000
 8013c08:	3f490fdb 	.word	0x3f490fdb

08013c0c <__ieee754_powf>:
 8013c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c10:	ee10 4a90 	vmov	r4, s1
 8013c14:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013c18:	ed2d 8b02 	vpush	{d8}
 8013c1c:	ee10 7a10 	vmov	r7, s0
 8013c20:	eeb0 8a40 	vmov.f32	s16, s0
 8013c24:	eef0 8a60 	vmov.f32	s17, s1
 8013c28:	d10c      	bne.n	8013c44 <__ieee754_powf+0x38>
 8013c2a:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8013c2e:	007f      	lsls	r7, r7, #1
 8013c30:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8013c34:	f240 8292 	bls.w	801415c <__ieee754_powf+0x550>
 8013c38:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013c3c:	ecbd 8b02 	vpop	{d8}
 8013c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c44:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8013c48:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013c4c:	dcf4      	bgt.n	8013c38 <__ieee754_powf+0x2c>
 8013c4e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8013c52:	dd08      	ble.n	8013c66 <__ieee754_powf+0x5a>
 8013c54:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013c58:	d1ee      	bne.n	8013c38 <__ieee754_powf+0x2c>
 8013c5a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8013c5e:	0064      	lsls	r4, r4, #1
 8013c60:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8013c64:	e7e6      	b.n	8013c34 <__ieee754_powf+0x28>
 8013c66:	2f00      	cmp	r7, #0
 8013c68:	da20      	bge.n	8013cac <__ieee754_powf+0xa0>
 8013c6a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8013c6e:	da2d      	bge.n	8013ccc <__ieee754_powf+0xc0>
 8013c70:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8013c74:	f2c0 827b 	blt.w	801416e <__ieee754_powf+0x562>
 8013c78:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8013c7c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013c80:	fa48 f603 	asr.w	r6, r8, r3
 8013c84:	fa06 f303 	lsl.w	r3, r6, r3
 8013c88:	4543      	cmp	r3, r8
 8013c8a:	f040 8270 	bne.w	801416e <__ieee754_powf+0x562>
 8013c8e:	f006 0601 	and.w	r6, r6, #1
 8013c92:	f1c6 0602 	rsb	r6, r6, #2
 8013c96:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8013c9a:	d11f      	bne.n	8013cdc <__ieee754_powf+0xd0>
 8013c9c:	2c00      	cmp	r4, #0
 8013c9e:	f280 8263 	bge.w	8014168 <__ieee754_powf+0x55c>
 8013ca2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ca6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013caa:	e7c7      	b.n	8013c3c <__ieee754_powf+0x30>
 8013cac:	2600      	movs	r6, #0
 8013cae:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8013cb2:	d1f0      	bne.n	8013c96 <__ieee754_powf+0x8a>
 8013cb4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8013cb8:	f000 8250 	beq.w	801415c <__ieee754_powf+0x550>
 8013cbc:	dd08      	ble.n	8013cd0 <__ieee754_powf+0xc4>
 8013cbe:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013fc4 <__ieee754_powf+0x3b8>
 8013cc2:	2c00      	cmp	r4, #0
 8013cc4:	bfa8      	it	ge
 8013cc6:	eeb0 0a68 	vmovge.f32	s0, s17
 8013cca:	e7b7      	b.n	8013c3c <__ieee754_powf+0x30>
 8013ccc:	2602      	movs	r6, #2
 8013cce:	e7ee      	b.n	8013cae <__ieee754_powf+0xa2>
 8013cd0:	2c00      	cmp	r4, #0
 8013cd2:	f280 8246 	bge.w	8014162 <__ieee754_powf+0x556>
 8013cd6:	eeb1 0a68 	vneg.f32	s0, s17
 8013cda:	e7af      	b.n	8013c3c <__ieee754_powf+0x30>
 8013cdc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013ce0:	d102      	bne.n	8013ce8 <__ieee754_powf+0xdc>
 8013ce2:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013ce6:	e7a9      	b.n	8013c3c <__ieee754_powf+0x30>
 8013ce8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013cec:	eeb0 0a48 	vmov.f32	s0, s16
 8013cf0:	d107      	bne.n	8013d02 <__ieee754_powf+0xf6>
 8013cf2:	2f00      	cmp	r7, #0
 8013cf4:	db05      	blt.n	8013d02 <__ieee754_powf+0xf6>
 8013cf6:	ecbd 8b02 	vpop	{d8}
 8013cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cfe:	f7ff bd55 	b.w	80137ac <__ieee754_sqrtf>
 8013d02:	f7ff fcf1 	bl	80136e8 <fabsf>
 8013d06:	b125      	cbz	r5, 8013d12 <__ieee754_powf+0x106>
 8013d08:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8013d0c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013d10:	d115      	bne.n	8013d3e <__ieee754_powf+0x132>
 8013d12:	2c00      	cmp	r4, #0
 8013d14:	bfbc      	itt	lt
 8013d16:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013d1a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013d1e:	2f00      	cmp	r7, #0
 8013d20:	da8c      	bge.n	8013c3c <__ieee754_powf+0x30>
 8013d22:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8013d26:	4335      	orrs	r5, r6
 8013d28:	d104      	bne.n	8013d34 <__ieee754_powf+0x128>
 8013d2a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013d2e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013d32:	e783      	b.n	8013c3c <__ieee754_powf+0x30>
 8013d34:	2e01      	cmp	r6, #1
 8013d36:	d181      	bne.n	8013c3c <__ieee754_powf+0x30>
 8013d38:	eeb1 0a40 	vneg.f32	s0, s0
 8013d3c:	e77e      	b.n	8013c3c <__ieee754_powf+0x30>
 8013d3e:	0ff8      	lsrs	r0, r7, #31
 8013d40:	3801      	subs	r0, #1
 8013d42:	ea56 0300 	orrs.w	r3, r6, r0
 8013d46:	d104      	bne.n	8013d52 <__ieee754_powf+0x146>
 8013d48:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013d4c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013d50:	e774      	b.n	8013c3c <__ieee754_powf+0x30>
 8013d52:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8013d56:	dd73      	ble.n	8013e40 <__ieee754_powf+0x234>
 8013d58:	4b9b      	ldr	r3, [pc, #620]	; (8013fc8 <__ieee754_powf+0x3bc>)
 8013d5a:	429d      	cmp	r5, r3
 8013d5c:	dc08      	bgt.n	8013d70 <__ieee754_powf+0x164>
 8013d5e:	2c00      	cmp	r4, #0
 8013d60:	da0b      	bge.n	8013d7a <__ieee754_powf+0x16e>
 8013d62:	2000      	movs	r0, #0
 8013d64:	ecbd 8b02 	vpop	{d8}
 8013d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d6c:	f000 bc9a 	b.w	80146a4 <__math_oflowf>
 8013d70:	4b96      	ldr	r3, [pc, #600]	; (8013fcc <__ieee754_powf+0x3c0>)
 8013d72:	429d      	cmp	r5, r3
 8013d74:	dd08      	ble.n	8013d88 <__ieee754_powf+0x17c>
 8013d76:	2c00      	cmp	r4, #0
 8013d78:	dcf3      	bgt.n	8013d62 <__ieee754_powf+0x156>
 8013d7a:	2000      	movs	r0, #0
 8013d7c:	ecbd 8b02 	vpop	{d8}
 8013d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d84:	f000 bc88 	b.w	8014698 <__math_uflowf>
 8013d88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013d90:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8013fd0 <__ieee754_powf+0x3c4>
 8013d94:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013d98:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013d9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013da0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8013da4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013dac:	eddf 7a89 	vldr	s15, [pc, #548]	; 8013fd4 <__ieee754_powf+0x3c8>
 8013db0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013db4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013fd8 <__ieee754_powf+0x3cc>
 8013db8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013dbc:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8013fdc <__ieee754_powf+0x3d0>
 8013dc0:	eef0 6a67 	vmov.f32	s13, s15
 8013dc4:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013dc8:	ee16 3a90 	vmov	r3, s13
 8013dcc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013dd0:	f023 030f 	bic.w	r3, r3, #15
 8013dd4:	ee06 3a90 	vmov	s13, r3
 8013dd8:	eee0 6a47 	vfms.f32	s13, s0, s14
 8013ddc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013de0:	3e01      	subs	r6, #1
 8013de2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8013de6:	4306      	orrs	r6, r0
 8013de8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013dec:	f024 040f 	bic.w	r4, r4, #15
 8013df0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013df4:	bf08      	it	eq
 8013df6:	eeb0 8a47 	vmoveq.f32	s16, s14
 8013dfa:	ee07 4a10 	vmov	s14, r4
 8013dfe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013e02:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013e06:	ee07 3a90 	vmov	s15, r3
 8013e0a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013e0e:	ee07 4a10 	vmov	s14, r4
 8013e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e16:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013e1a:	ee17 1a10 	vmov	r1, s14
 8013e1e:	2900      	cmp	r1, #0
 8013e20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013e24:	f340 817c 	ble.w	8014120 <__ieee754_powf+0x514>
 8013e28:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013e2c:	f340 80f8 	ble.w	8014020 <__ieee754_powf+0x414>
 8013e30:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e38:	bf4c      	ite	mi
 8013e3a:	2001      	movmi	r0, #1
 8013e3c:	2000      	movpl	r0, #0
 8013e3e:	e791      	b.n	8013d64 <__ieee754_powf+0x158>
 8013e40:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8013e44:	bf01      	itttt	eq
 8013e46:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013fe0 <__ieee754_powf+0x3d4>
 8013e4a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013e4e:	f06f 0317 	mvneq.w	r3, #23
 8013e52:	ee17 5a90 	vmoveq	r5, s15
 8013e56:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8013e5a:	bf18      	it	ne
 8013e5c:	2300      	movne	r3, #0
 8013e5e:	3a7f      	subs	r2, #127	; 0x7f
 8013e60:	441a      	add	r2, r3
 8013e62:	4b60      	ldr	r3, [pc, #384]	; (8013fe4 <__ieee754_powf+0x3d8>)
 8013e64:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8013e68:	429d      	cmp	r5, r3
 8013e6a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8013e6e:	dd06      	ble.n	8013e7e <__ieee754_powf+0x272>
 8013e70:	4b5d      	ldr	r3, [pc, #372]	; (8013fe8 <__ieee754_powf+0x3dc>)
 8013e72:	429d      	cmp	r5, r3
 8013e74:	f340 80a4 	ble.w	8013fc0 <__ieee754_powf+0x3b4>
 8013e78:	3201      	adds	r2, #1
 8013e7a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013e7e:	2500      	movs	r5, #0
 8013e80:	4b5a      	ldr	r3, [pc, #360]	; (8013fec <__ieee754_powf+0x3e0>)
 8013e82:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8013e86:	ee07 1a10 	vmov	s14, r1
 8013e8a:	edd3 5a00 	vldr	s11, [r3]
 8013e8e:	4b58      	ldr	r3, [pc, #352]	; (8013ff0 <__ieee754_powf+0x3e4>)
 8013e90:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e98:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8013e9c:	1049      	asrs	r1, r1, #1
 8013e9e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013ea2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013ea6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8013eaa:	ee37 6a65 	vsub.f32	s12, s14, s11
 8013eae:	ee07 1a90 	vmov	s15, r1
 8013eb2:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013eb6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8013eba:	ee15 7a10 	vmov	r7, s10
 8013ebe:	401f      	ands	r7, r3
 8013ec0:	ee06 7a90 	vmov	s13, r7
 8013ec4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013ec8:	ee37 7a65 	vsub.f32	s14, s14, s11
 8013ecc:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013ed0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013ed4:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013ff4 <__ieee754_powf+0x3e8>
 8013ed8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013ff8 <__ieee754_powf+0x3ec>
 8013edc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013ee0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013ffc <__ieee754_powf+0x3f0>
 8013ee4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013ee8:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013fd0 <__ieee754_powf+0x3c4>
 8013eec:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013ef0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014000 <__ieee754_powf+0x3f4>
 8013ef4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013ef8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8014004 <__ieee754_powf+0x3f8>
 8013efc:	ee26 6a24 	vmul.f32	s12, s12, s9
 8013f00:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013f04:	ee35 7a26 	vadd.f32	s14, s10, s13
 8013f08:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8013f0c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013f10:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013f14:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8013f18:	eef0 5a67 	vmov.f32	s11, s15
 8013f1c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8013f20:	ee75 5a87 	vadd.f32	s11, s11, s14
 8013f24:	ee15 1a90 	vmov	r1, s11
 8013f28:	4019      	ands	r1, r3
 8013f2a:	ee05 1a90 	vmov	s11, r1
 8013f2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8013f32:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8013f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f3a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013f3e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013f42:	eeb0 6a67 	vmov.f32	s12, s15
 8013f46:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013f4a:	ee16 1a10 	vmov	r1, s12
 8013f4e:	4019      	ands	r1, r3
 8013f50:	ee07 1a10 	vmov	s14, r1
 8013f54:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8013f58:	ee06 1a10 	vmov	s12, r1
 8013f5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f60:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014008 <__ieee754_powf+0x3fc>
 8013f64:	4929      	ldr	r1, [pc, #164]	; (801400c <__ieee754_powf+0x400>)
 8013f66:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8014010 <__ieee754_powf+0x404>
 8013f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f6e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014014 <__ieee754_powf+0x408>
 8013f72:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013f76:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013f7a:	ed91 7a00 	vldr	s14, [r1]
 8013f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f82:	ee07 2a10 	vmov	s14, r2
 8013f86:	eef0 6a67 	vmov.f32	s13, s15
 8013f8a:	4a23      	ldr	r2, [pc, #140]	; (8014018 <__ieee754_powf+0x40c>)
 8013f8c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013f90:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013f94:	ed92 5a00 	vldr	s10, [r2]
 8013f98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013f9c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013fa0:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013fa4:	ee16 2a90 	vmov	r2, s13
 8013fa8:	4013      	ands	r3, r2
 8013faa:	ee06 3a90 	vmov	s13, r3
 8013fae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013fb2:	ee37 7a45 	vsub.f32	s14, s14, s10
 8013fb6:	eea6 7a65 	vfms.f32	s14, s12, s11
 8013fba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fbe:	e70f      	b.n	8013de0 <__ieee754_powf+0x1d4>
 8013fc0:	2501      	movs	r5, #1
 8013fc2:	e75d      	b.n	8013e80 <__ieee754_powf+0x274>
 8013fc4:	00000000 	.word	0x00000000
 8013fc8:	3f7ffff3 	.word	0x3f7ffff3
 8013fcc:	3f800007 	.word	0x3f800007
 8013fd0:	3eaaaaab 	.word	0x3eaaaaab
 8013fd4:	3fb8aa3b 	.word	0x3fb8aa3b
 8013fd8:	36eca570 	.word	0x36eca570
 8013fdc:	3fb8aa00 	.word	0x3fb8aa00
 8013fe0:	4b800000 	.word	0x4b800000
 8013fe4:	001cc471 	.word	0x001cc471
 8013fe8:	005db3d6 	.word	0x005db3d6
 8013fec:	0801547c 	.word	0x0801547c
 8013ff0:	fffff000 	.word	0xfffff000
 8013ff4:	3e6c3255 	.word	0x3e6c3255
 8013ff8:	3e53f142 	.word	0x3e53f142
 8013ffc:	3e8ba305 	.word	0x3e8ba305
 8014000:	3edb6db7 	.word	0x3edb6db7
 8014004:	3f19999a 	.word	0x3f19999a
 8014008:	3f76384f 	.word	0x3f76384f
 801400c:	0801548c 	.word	0x0801548c
 8014010:	3f763800 	.word	0x3f763800
 8014014:	369dc3a0 	.word	0x369dc3a0
 8014018:	08015484 	.word	0x08015484
 801401c:	3338aa3c 	.word	0x3338aa3c
 8014020:	f040 8093 	bne.w	801414a <__ieee754_powf+0x53e>
 8014024:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801401c <__ieee754_powf+0x410>
 8014028:	ee37 7a67 	vsub.f32	s14, s14, s15
 801402c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014030:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014038:	f73f aefa 	bgt.w	8013e30 <__ieee754_powf+0x224>
 801403c:	15db      	asrs	r3, r3, #23
 801403e:	3b7e      	subs	r3, #126	; 0x7e
 8014040:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8014044:	4118      	asrs	r0, r3
 8014046:	4408      	add	r0, r1
 8014048:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801404c:	4a49      	ldr	r2, [pc, #292]	; (8014174 <__ieee754_powf+0x568>)
 801404e:	3b7f      	subs	r3, #127	; 0x7f
 8014050:	411a      	asrs	r2, r3
 8014052:	4002      	ands	r2, r0
 8014054:	ee07 2a10 	vmov	s14, r2
 8014058:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801405c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014060:	f1c3 0317 	rsb	r3, r3, #23
 8014064:	4118      	asrs	r0, r3
 8014066:	2900      	cmp	r1, #0
 8014068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801406c:	bfb8      	it	lt
 801406e:	4240      	neglt	r0, r0
 8014070:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014074:	eddf 6a40 	vldr	s13, [pc, #256]	; 8014178 <__ieee754_powf+0x56c>
 8014078:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801417c <__ieee754_powf+0x570>
 801407c:	ee17 3a10 	vmov	r3, s14
 8014080:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014084:	f023 030f 	bic.w	r3, r3, #15
 8014088:	ee07 3a10 	vmov	s14, r3
 801408c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014090:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014094:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014098:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014180 <__ieee754_powf+0x574>
 801409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140a0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80140a4:	eef0 6a67 	vmov.f32	s13, s15
 80140a8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80140ac:	eef0 5a66 	vmov.f32	s11, s13
 80140b0:	eee7 5a46 	vfms.f32	s11, s14, s12
 80140b4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80140b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80140bc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8014184 <__ieee754_powf+0x578>
 80140c0:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014188 <__ieee754_powf+0x57c>
 80140c4:	eea7 6a25 	vfma.f32	s12, s14, s11
 80140c8:	eddf 5a30 	vldr	s11, [pc, #192]	; 801418c <__ieee754_powf+0x580>
 80140cc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80140d0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014190 <__ieee754_powf+0x584>
 80140d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80140d8:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8014194 <__ieee754_powf+0x588>
 80140dc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80140e0:	eeb0 6a66 	vmov.f32	s12, s13
 80140e4:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80140e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80140ec:	ee66 5a86 	vmul.f32	s11, s13, s12
 80140f0:	ee36 6a47 	vsub.f32	s12, s12, s14
 80140f4:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80140f8:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80140fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014100:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014104:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014108:	ee10 3a10 	vmov	r3, s0
 801410c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014114:	da1f      	bge.n	8014156 <__ieee754_powf+0x54a>
 8014116:	f000 fa43 	bl	80145a0 <scalbnf>
 801411a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801411e:	e58d      	b.n	8013c3c <__ieee754_powf+0x30>
 8014120:	4a1d      	ldr	r2, [pc, #116]	; (8014198 <__ieee754_powf+0x58c>)
 8014122:	4293      	cmp	r3, r2
 8014124:	dd07      	ble.n	8014136 <__ieee754_powf+0x52a>
 8014126:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412e:	bf4c      	ite	mi
 8014130:	2001      	movmi	r0, #1
 8014132:	2000      	movpl	r0, #0
 8014134:	e622      	b.n	8013d7c <__ieee754_powf+0x170>
 8014136:	d108      	bne.n	801414a <__ieee754_powf+0x53e>
 8014138:	ee37 7a67 	vsub.f32	s14, s14, s15
 801413c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014144:	f6ff af7a 	blt.w	801403c <__ieee754_powf+0x430>
 8014148:	e7ed      	b.n	8014126 <__ieee754_powf+0x51a>
 801414a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801414e:	f73f af75 	bgt.w	801403c <__ieee754_powf+0x430>
 8014152:	2000      	movs	r0, #0
 8014154:	e78c      	b.n	8014070 <__ieee754_powf+0x464>
 8014156:	ee00 3a10 	vmov	s0, r3
 801415a:	e7de      	b.n	801411a <__ieee754_powf+0x50e>
 801415c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014160:	e56c      	b.n	8013c3c <__ieee754_powf+0x30>
 8014162:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801419c <__ieee754_powf+0x590>
 8014166:	e569      	b.n	8013c3c <__ieee754_powf+0x30>
 8014168:	eeb0 0a48 	vmov.f32	s0, s16
 801416c:	e566      	b.n	8013c3c <__ieee754_powf+0x30>
 801416e:	2600      	movs	r6, #0
 8014170:	e591      	b.n	8013c96 <__ieee754_powf+0x8a>
 8014172:	bf00      	nop
 8014174:	ff800000 	.word	0xff800000
 8014178:	3f317218 	.word	0x3f317218
 801417c:	3f317200 	.word	0x3f317200
 8014180:	35bfbe8c 	.word	0x35bfbe8c
 8014184:	b5ddea0e 	.word	0xb5ddea0e
 8014188:	3331bb4c 	.word	0x3331bb4c
 801418c:	388ab355 	.word	0x388ab355
 8014190:	bb360b61 	.word	0xbb360b61
 8014194:	3e2aaaab 	.word	0x3e2aaaab
 8014198:	43160000 	.word	0x43160000
 801419c:	00000000 	.word	0x00000000

080141a0 <__ieee754_rem_pio2f>:
 80141a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141a2:	ee10 6a10 	vmov	r6, s0
 80141a6:	4b86      	ldr	r3, [pc, #536]	; (80143c0 <__ieee754_rem_pio2f+0x220>)
 80141a8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80141ac:	429d      	cmp	r5, r3
 80141ae:	b087      	sub	sp, #28
 80141b0:	4604      	mov	r4, r0
 80141b2:	dc05      	bgt.n	80141c0 <__ieee754_rem_pio2f+0x20>
 80141b4:	2300      	movs	r3, #0
 80141b6:	ed80 0a00 	vstr	s0, [r0]
 80141ba:	6043      	str	r3, [r0, #4]
 80141bc:	2000      	movs	r0, #0
 80141be:	e020      	b.n	8014202 <__ieee754_rem_pio2f+0x62>
 80141c0:	4b80      	ldr	r3, [pc, #512]	; (80143c4 <__ieee754_rem_pio2f+0x224>)
 80141c2:	429d      	cmp	r5, r3
 80141c4:	dc38      	bgt.n	8014238 <__ieee754_rem_pio2f+0x98>
 80141c6:	2e00      	cmp	r6, #0
 80141c8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80143c8 <__ieee754_rem_pio2f+0x228>
 80141cc:	4b7f      	ldr	r3, [pc, #508]	; (80143cc <__ieee754_rem_pio2f+0x22c>)
 80141ce:	f025 050f 	bic.w	r5, r5, #15
 80141d2:	dd18      	ble.n	8014206 <__ieee754_rem_pio2f+0x66>
 80141d4:	429d      	cmp	r5, r3
 80141d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80141da:	bf09      	itett	eq
 80141dc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80143d0 <__ieee754_rem_pio2f+0x230>
 80141e0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80143d4 <__ieee754_rem_pio2f+0x234>
 80141e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80141e8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80143d8 <__ieee754_rem_pio2f+0x238>
 80141ec:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80141f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80141f4:	edc0 6a00 	vstr	s13, [r0]
 80141f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141fc:	edc0 7a01 	vstr	s15, [r0, #4]
 8014200:	2001      	movs	r0, #1
 8014202:	b007      	add	sp, #28
 8014204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014206:	429d      	cmp	r5, r3
 8014208:	ee70 7a07 	vadd.f32	s15, s0, s14
 801420c:	bf09      	itett	eq
 801420e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80143d0 <__ieee754_rem_pio2f+0x230>
 8014212:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80143d4 <__ieee754_rem_pio2f+0x234>
 8014216:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801421a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80143d8 <__ieee754_rem_pio2f+0x238>
 801421e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014222:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014226:	edc0 6a00 	vstr	s13, [r0]
 801422a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801422e:	edc0 7a01 	vstr	s15, [r0, #4]
 8014232:	f04f 30ff 	mov.w	r0, #4294967295
 8014236:	e7e4      	b.n	8014202 <__ieee754_rem_pio2f+0x62>
 8014238:	4b68      	ldr	r3, [pc, #416]	; (80143dc <__ieee754_rem_pio2f+0x23c>)
 801423a:	429d      	cmp	r5, r3
 801423c:	dc71      	bgt.n	8014322 <__ieee754_rem_pio2f+0x182>
 801423e:	f7ff fa53 	bl	80136e8 <fabsf>
 8014242:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80143e0 <__ieee754_rem_pio2f+0x240>
 8014246:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801424a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801424e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014256:	ee17 0a90 	vmov	r0, s15
 801425a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80143c8 <__ieee754_rem_pio2f+0x228>
 801425e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8014262:	281f      	cmp	r0, #31
 8014264:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80143d4 <__ieee754_rem_pio2f+0x234>
 8014268:	ee67 7a27 	vmul.f32	s15, s14, s15
 801426c:	eeb1 6a47 	vneg.f32	s12, s14
 8014270:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014274:	ee16 2a90 	vmov	r2, s13
 8014278:	dc1c      	bgt.n	80142b4 <__ieee754_rem_pio2f+0x114>
 801427a:	495a      	ldr	r1, [pc, #360]	; (80143e4 <__ieee754_rem_pio2f+0x244>)
 801427c:	1e47      	subs	r7, r0, #1
 801427e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8014282:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8014286:	428b      	cmp	r3, r1
 8014288:	d014      	beq.n	80142b4 <__ieee754_rem_pio2f+0x114>
 801428a:	6022      	str	r2, [r4, #0]
 801428c:	ed94 7a00 	vldr	s14, [r4]
 8014290:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014294:	2e00      	cmp	r6, #0
 8014296:	ee30 0a67 	vsub.f32	s0, s0, s15
 801429a:	ed84 0a01 	vstr	s0, [r4, #4]
 801429e:	dab0      	bge.n	8014202 <__ieee754_rem_pio2f+0x62>
 80142a0:	eeb1 7a47 	vneg.f32	s14, s14
 80142a4:	eeb1 0a40 	vneg.f32	s0, s0
 80142a8:	ed84 7a00 	vstr	s14, [r4]
 80142ac:	ed84 0a01 	vstr	s0, [r4, #4]
 80142b0:	4240      	negs	r0, r0
 80142b2:	e7a6      	b.n	8014202 <__ieee754_rem_pio2f+0x62>
 80142b4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80142b8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80142bc:	2908      	cmp	r1, #8
 80142be:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80142c2:	dde2      	ble.n	801428a <__ieee754_rem_pio2f+0xea>
 80142c4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80143d0 <__ieee754_rem_pio2f+0x230>
 80142c8:	eef0 6a40 	vmov.f32	s13, s0
 80142cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80142d0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80142d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80142d8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80143d8 <__ieee754_rem_pio2f+0x238>
 80142dc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80142e0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80142e4:	ee15 2a90 	vmov	r2, s11
 80142e8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80142ec:	1a5b      	subs	r3, r3, r1
 80142ee:	2b19      	cmp	r3, #25
 80142f0:	dc04      	bgt.n	80142fc <__ieee754_rem_pio2f+0x15c>
 80142f2:	edc4 5a00 	vstr	s11, [r4]
 80142f6:	eeb0 0a66 	vmov.f32	s0, s13
 80142fa:	e7c7      	b.n	801428c <__ieee754_rem_pio2f+0xec>
 80142fc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80143e8 <__ieee754_rem_pio2f+0x248>
 8014300:	eeb0 0a66 	vmov.f32	s0, s13
 8014304:	eea6 0a25 	vfma.f32	s0, s12, s11
 8014308:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801430c:	eddf 6a37 	vldr	s13, [pc, #220]	; 80143ec <__ieee754_rem_pio2f+0x24c>
 8014310:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014314:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014318:	ee30 7a67 	vsub.f32	s14, s0, s15
 801431c:	ed84 7a00 	vstr	s14, [r4]
 8014320:	e7b4      	b.n	801428c <__ieee754_rem_pio2f+0xec>
 8014322:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014326:	db06      	blt.n	8014336 <__ieee754_rem_pio2f+0x196>
 8014328:	ee70 7a40 	vsub.f32	s15, s0, s0
 801432c:	edc0 7a01 	vstr	s15, [r0, #4]
 8014330:	edc0 7a00 	vstr	s15, [r0]
 8014334:	e742      	b.n	80141bc <__ieee754_rem_pio2f+0x1c>
 8014336:	15ea      	asrs	r2, r5, #23
 8014338:	3a86      	subs	r2, #134	; 0x86
 801433a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801433e:	ee07 3a90 	vmov	s15, r3
 8014342:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014346:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80143f0 <__ieee754_rem_pio2f+0x250>
 801434a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801434e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014352:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014356:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801435a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801435e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014366:	ed8d 7a04 	vstr	s14, [sp, #16]
 801436a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801436e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014376:	edcd 7a05 	vstr	s15, [sp, #20]
 801437a:	d11e      	bne.n	80143ba <__ieee754_rem_pio2f+0x21a>
 801437c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014384:	bf14      	ite	ne
 8014386:	2302      	movne	r3, #2
 8014388:	2301      	moveq	r3, #1
 801438a:	491a      	ldr	r1, [pc, #104]	; (80143f4 <__ieee754_rem_pio2f+0x254>)
 801438c:	9101      	str	r1, [sp, #4]
 801438e:	2102      	movs	r1, #2
 8014390:	9100      	str	r1, [sp, #0]
 8014392:	a803      	add	r0, sp, #12
 8014394:	4621      	mov	r1, r4
 8014396:	f000 f98b 	bl	80146b0 <__kernel_rem_pio2f>
 801439a:	2e00      	cmp	r6, #0
 801439c:	f6bf af31 	bge.w	8014202 <__ieee754_rem_pio2f+0x62>
 80143a0:	edd4 7a00 	vldr	s15, [r4]
 80143a4:	eef1 7a67 	vneg.f32	s15, s15
 80143a8:	edc4 7a00 	vstr	s15, [r4]
 80143ac:	edd4 7a01 	vldr	s15, [r4, #4]
 80143b0:	eef1 7a67 	vneg.f32	s15, s15
 80143b4:	edc4 7a01 	vstr	s15, [r4, #4]
 80143b8:	e77a      	b.n	80142b0 <__ieee754_rem_pio2f+0x110>
 80143ba:	2303      	movs	r3, #3
 80143bc:	e7e5      	b.n	801438a <__ieee754_rem_pio2f+0x1ea>
 80143be:	bf00      	nop
 80143c0:	3f490fd8 	.word	0x3f490fd8
 80143c4:	4016cbe3 	.word	0x4016cbe3
 80143c8:	3fc90f80 	.word	0x3fc90f80
 80143cc:	3fc90fd0 	.word	0x3fc90fd0
 80143d0:	37354400 	.word	0x37354400
 80143d4:	37354443 	.word	0x37354443
 80143d8:	2e85a308 	.word	0x2e85a308
 80143dc:	43490f80 	.word	0x43490f80
 80143e0:	3f22f984 	.word	0x3f22f984
 80143e4:	08015494 	.word	0x08015494
 80143e8:	2e85a300 	.word	0x2e85a300
 80143ec:	248d3132 	.word	0x248d3132
 80143f0:	43800000 	.word	0x43800000
 80143f4:	08015514 	.word	0x08015514

080143f8 <atanf>:
 80143f8:	b538      	push	{r3, r4, r5, lr}
 80143fa:	ee10 5a10 	vmov	r5, s0
 80143fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014402:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014406:	eef0 7a40 	vmov.f32	s15, s0
 801440a:	db10      	blt.n	801442e <atanf+0x36>
 801440c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014410:	dd04      	ble.n	801441c <atanf+0x24>
 8014412:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014416:	eeb0 0a67 	vmov.f32	s0, s15
 801441a:	bd38      	pop	{r3, r4, r5, pc}
 801441c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014554 <atanf+0x15c>
 8014420:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014558 <atanf+0x160>
 8014424:	2d00      	cmp	r5, #0
 8014426:	bfd8      	it	le
 8014428:	eef0 7a47 	vmovle.f32	s15, s14
 801442c:	e7f3      	b.n	8014416 <atanf+0x1e>
 801442e:	4b4b      	ldr	r3, [pc, #300]	; (801455c <atanf+0x164>)
 8014430:	429c      	cmp	r4, r3
 8014432:	dc10      	bgt.n	8014456 <atanf+0x5e>
 8014434:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014438:	da0a      	bge.n	8014450 <atanf+0x58>
 801443a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014560 <atanf+0x168>
 801443e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014446:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444e:	dce2      	bgt.n	8014416 <atanf+0x1e>
 8014450:	f04f 33ff 	mov.w	r3, #4294967295
 8014454:	e013      	b.n	801447e <atanf+0x86>
 8014456:	f7ff f947 	bl	80136e8 <fabsf>
 801445a:	4b42      	ldr	r3, [pc, #264]	; (8014564 <atanf+0x16c>)
 801445c:	429c      	cmp	r4, r3
 801445e:	dc4f      	bgt.n	8014500 <atanf+0x108>
 8014460:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014464:	429c      	cmp	r4, r3
 8014466:	dc41      	bgt.n	80144ec <atanf+0xf4>
 8014468:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801446c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014470:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014474:	2300      	movs	r3, #0
 8014476:	ee30 0a27 	vadd.f32	s0, s0, s15
 801447a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801447e:	1c5a      	adds	r2, r3, #1
 8014480:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014484:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014568 <atanf+0x170>
 8014488:	eddf 5a38 	vldr	s11, [pc, #224]	; 801456c <atanf+0x174>
 801448c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014570 <atanf+0x178>
 8014490:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014494:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014498:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014574 <atanf+0x17c>
 801449c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80144a0:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014578 <atanf+0x180>
 80144a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80144a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801457c <atanf+0x184>
 80144ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80144b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014580 <atanf+0x188>
 80144b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80144b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014584 <atanf+0x18c>
 80144bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80144c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014588 <atanf+0x190>
 80144c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80144c8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801458c <atanf+0x194>
 80144cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80144d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014590 <atanf+0x198>
 80144d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80144d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80144dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80144e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80144e4:	d121      	bne.n	801452a <atanf+0x132>
 80144e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144ea:	e794      	b.n	8014416 <atanf+0x1e>
 80144ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80144f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80144f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144f8:	2301      	movs	r3, #1
 80144fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80144fe:	e7be      	b.n	801447e <atanf+0x86>
 8014500:	4b24      	ldr	r3, [pc, #144]	; (8014594 <atanf+0x19c>)
 8014502:	429c      	cmp	r4, r3
 8014504:	dc0b      	bgt.n	801451e <atanf+0x126>
 8014506:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801450a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801450e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014512:	2302      	movs	r3, #2
 8014514:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801451c:	e7af      	b.n	801447e <atanf+0x86>
 801451e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014522:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014526:	2303      	movs	r3, #3
 8014528:	e7a9      	b.n	801447e <atanf+0x86>
 801452a:	4a1b      	ldr	r2, [pc, #108]	; (8014598 <atanf+0x1a0>)
 801452c:	491b      	ldr	r1, [pc, #108]	; (801459c <atanf+0x1a4>)
 801452e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014532:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014536:	edd3 6a00 	vldr	s13, [r3]
 801453a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801453e:	2d00      	cmp	r5, #0
 8014540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014544:	edd2 7a00 	vldr	s15, [r2]
 8014548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801454c:	bfb8      	it	lt
 801454e:	eef1 7a67 	vneglt.f32	s15, s15
 8014552:	e760      	b.n	8014416 <atanf+0x1e>
 8014554:	3fc90fdb 	.word	0x3fc90fdb
 8014558:	bfc90fdb 	.word	0xbfc90fdb
 801455c:	3edfffff 	.word	0x3edfffff
 8014560:	7149f2ca 	.word	0x7149f2ca
 8014564:	3f97ffff 	.word	0x3f97ffff
 8014568:	3c8569d7 	.word	0x3c8569d7
 801456c:	3d4bda59 	.word	0x3d4bda59
 8014570:	bd6ef16b 	.word	0xbd6ef16b
 8014574:	3d886b35 	.word	0x3d886b35
 8014578:	3dba2e6e 	.word	0x3dba2e6e
 801457c:	3e124925 	.word	0x3e124925
 8014580:	3eaaaaab 	.word	0x3eaaaaab
 8014584:	bd15a221 	.word	0xbd15a221
 8014588:	bd9d8795 	.word	0xbd9d8795
 801458c:	bde38e38 	.word	0xbde38e38
 8014590:	be4ccccd 	.word	0xbe4ccccd
 8014594:	401bffff 	.word	0x401bffff
 8014598:	0801582c 	.word	0x0801582c
 801459c:	0801583c 	.word	0x0801583c

080145a0 <scalbnf>:
 80145a0:	ee10 3a10 	vmov	r3, s0
 80145a4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80145a8:	d02b      	beq.n	8014602 <scalbnf+0x62>
 80145aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80145ae:	d302      	bcc.n	80145b6 <scalbnf+0x16>
 80145b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80145b4:	4770      	bx	lr
 80145b6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80145ba:	d123      	bne.n	8014604 <scalbnf+0x64>
 80145bc:	4b24      	ldr	r3, [pc, #144]	; (8014650 <scalbnf+0xb0>)
 80145be:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014654 <scalbnf+0xb4>
 80145c2:	4298      	cmp	r0, r3
 80145c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80145c8:	db17      	blt.n	80145fa <scalbnf+0x5a>
 80145ca:	ee10 3a10 	vmov	r3, s0
 80145ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80145d2:	3a19      	subs	r2, #25
 80145d4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80145d8:	4288      	cmp	r0, r1
 80145da:	dd15      	ble.n	8014608 <scalbnf+0x68>
 80145dc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014658 <scalbnf+0xb8>
 80145e0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801465c <scalbnf+0xbc>
 80145e4:	ee10 3a10 	vmov	r3, s0
 80145e8:	eeb0 7a67 	vmov.f32	s14, s15
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	bfb8      	it	lt
 80145f0:	eef0 7a66 	vmovlt.f32	s15, s13
 80145f4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80145f8:	4770      	bx	lr
 80145fa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014660 <scalbnf+0xc0>
 80145fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014602:	4770      	bx	lr
 8014604:	0dd2      	lsrs	r2, r2, #23
 8014606:	e7e5      	b.n	80145d4 <scalbnf+0x34>
 8014608:	4410      	add	r0, r2
 801460a:	28fe      	cmp	r0, #254	; 0xfe
 801460c:	dce6      	bgt.n	80145dc <scalbnf+0x3c>
 801460e:	2800      	cmp	r0, #0
 8014610:	dd06      	ble.n	8014620 <scalbnf+0x80>
 8014612:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014616:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801461a:	ee00 3a10 	vmov	s0, r3
 801461e:	4770      	bx	lr
 8014620:	f110 0f16 	cmn.w	r0, #22
 8014624:	da09      	bge.n	801463a <scalbnf+0x9a>
 8014626:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014660 <scalbnf+0xc0>
 801462a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8014664 <scalbnf+0xc4>
 801462e:	ee10 3a10 	vmov	r3, s0
 8014632:	eeb0 7a67 	vmov.f32	s14, s15
 8014636:	2b00      	cmp	r3, #0
 8014638:	e7d9      	b.n	80145ee <scalbnf+0x4e>
 801463a:	3019      	adds	r0, #25
 801463c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014640:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014644:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014668 <scalbnf+0xc8>
 8014648:	ee07 3a90 	vmov	s15, r3
 801464c:	e7d7      	b.n	80145fe <scalbnf+0x5e>
 801464e:	bf00      	nop
 8014650:	ffff3cb0 	.word	0xffff3cb0
 8014654:	4c000000 	.word	0x4c000000
 8014658:	7149f2ca 	.word	0x7149f2ca
 801465c:	f149f2ca 	.word	0xf149f2ca
 8014660:	0da24260 	.word	0x0da24260
 8014664:	8da24260 	.word	0x8da24260
 8014668:	33000000 	.word	0x33000000

0801466c <with_errnof>:
 801466c:	b513      	push	{r0, r1, r4, lr}
 801466e:	4604      	mov	r4, r0
 8014670:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014674:	f7fc ff8c 	bl	8011590 <__errno>
 8014678:	ed9d 0a01 	vldr	s0, [sp, #4]
 801467c:	6004      	str	r4, [r0, #0]
 801467e:	b002      	add	sp, #8
 8014680:	bd10      	pop	{r4, pc}

08014682 <xflowf>:
 8014682:	b130      	cbz	r0, 8014692 <xflowf+0x10>
 8014684:	eef1 7a40 	vneg.f32	s15, s0
 8014688:	ee27 0a80 	vmul.f32	s0, s15, s0
 801468c:	2022      	movs	r0, #34	; 0x22
 801468e:	f7ff bfed 	b.w	801466c <with_errnof>
 8014692:	eef0 7a40 	vmov.f32	s15, s0
 8014696:	e7f7      	b.n	8014688 <xflowf+0x6>

08014698 <__math_uflowf>:
 8014698:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80146a0 <__math_uflowf+0x8>
 801469c:	f7ff bff1 	b.w	8014682 <xflowf>
 80146a0:	10000000 	.word	0x10000000

080146a4 <__math_oflowf>:
 80146a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80146ac <__math_oflowf+0x8>
 80146a8:	f7ff bfeb 	b.w	8014682 <xflowf>
 80146ac:	70000000 	.word	0x70000000

080146b0 <__kernel_rem_pio2f>:
 80146b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b4:	ed2d 8b04 	vpush	{d8-d9}
 80146b8:	b0d9      	sub	sp, #356	; 0x164
 80146ba:	4688      	mov	r8, r1
 80146bc:	9002      	str	r0, [sp, #8]
 80146be:	49b8      	ldr	r1, [pc, #736]	; (80149a0 <__kernel_rem_pio2f+0x2f0>)
 80146c0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80146c2:	9301      	str	r3, [sp, #4]
 80146c4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80146c8:	9901      	ldr	r1, [sp, #4]
 80146ca:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80146cc:	f101 3bff 	add.w	fp, r1, #4294967295
 80146d0:	1d11      	adds	r1, r2, #4
 80146d2:	db25      	blt.n	8014720 <__kernel_rem_pio2f+0x70>
 80146d4:	1ed0      	subs	r0, r2, #3
 80146d6:	bf48      	it	mi
 80146d8:	1d10      	addmi	r0, r2, #4
 80146da:	10c0      	asrs	r0, r0, #3
 80146dc:	1c45      	adds	r5, r0, #1
 80146de:	00e9      	lsls	r1, r5, #3
 80146e0:	eba0 070b 	sub.w	r7, r0, fp
 80146e4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80149b0 <__kernel_rem_pio2f+0x300>
 80146e8:	9103      	str	r1, [sp, #12]
 80146ea:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80146ee:	eb0a 0c0b 	add.w	ip, sl, fp
 80146f2:	ae1c      	add	r6, sp, #112	; 0x70
 80146f4:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80146f8:	2400      	movs	r4, #0
 80146fa:	4564      	cmp	r4, ip
 80146fc:	dd12      	ble.n	8014724 <__kernel_rem_pio2f+0x74>
 80146fe:	9901      	ldr	r1, [sp, #4]
 8014700:	ac1c      	add	r4, sp, #112	; 0x70
 8014702:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8014706:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801470a:	f04f 0c00 	mov.w	ip, #0
 801470e:	45d4      	cmp	ip, sl
 8014710:	dc27      	bgt.n	8014762 <__kernel_rem_pio2f+0xb2>
 8014712:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014716:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80149b0 <__kernel_rem_pio2f+0x300>
 801471a:	4627      	mov	r7, r4
 801471c:	2600      	movs	r6, #0
 801471e:	e016      	b.n	801474e <__kernel_rem_pio2f+0x9e>
 8014720:	2000      	movs	r0, #0
 8014722:	e7db      	b.n	80146dc <__kernel_rem_pio2f+0x2c>
 8014724:	42e7      	cmn	r7, r4
 8014726:	bf5d      	ittte	pl
 8014728:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801472c:	ee07 1a90 	vmovpl	s15, r1
 8014730:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014734:	eef0 7a47 	vmovmi.f32	s15, s14
 8014738:	ece6 7a01 	vstmia	r6!, {s15}
 801473c:	3401      	adds	r4, #1
 801473e:	e7dc      	b.n	80146fa <__kernel_rem_pio2f+0x4a>
 8014740:	ecfe 6a01 	vldmia	lr!, {s13}
 8014744:	ed97 7a00 	vldr	s14, [r7]
 8014748:	eee6 7a87 	vfma.f32	s15, s13, s14
 801474c:	3601      	adds	r6, #1
 801474e:	455e      	cmp	r6, fp
 8014750:	f1a7 0704 	sub.w	r7, r7, #4
 8014754:	ddf4      	ble.n	8014740 <__kernel_rem_pio2f+0x90>
 8014756:	ece9 7a01 	vstmia	r9!, {s15}
 801475a:	f10c 0c01 	add.w	ip, ip, #1
 801475e:	3404      	adds	r4, #4
 8014760:	e7d5      	b.n	801470e <__kernel_rem_pio2f+0x5e>
 8014762:	a908      	add	r1, sp, #32
 8014764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014768:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801476c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80149ac <__kernel_rem_pio2f+0x2fc>
 8014770:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80149a8 <__kernel_rem_pio2f+0x2f8>
 8014774:	9105      	str	r1, [sp, #20]
 8014776:	9304      	str	r3, [sp, #16]
 8014778:	4656      	mov	r6, sl
 801477a:	00b3      	lsls	r3, r6, #2
 801477c:	9306      	str	r3, [sp, #24]
 801477e:	ab58      	add	r3, sp, #352	; 0x160
 8014780:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8014784:	ac08      	add	r4, sp, #32
 8014786:	ab44      	add	r3, sp, #272	; 0x110
 8014788:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801478c:	46a4      	mov	ip, r4
 801478e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8014792:	4637      	mov	r7, r6
 8014794:	2f00      	cmp	r7, #0
 8014796:	f1a0 0004 	sub.w	r0, r0, #4
 801479a:	dc4a      	bgt.n	8014832 <__kernel_rem_pio2f+0x182>
 801479c:	4628      	mov	r0, r5
 801479e:	9207      	str	r2, [sp, #28]
 80147a0:	f7ff fefe 	bl	80145a0 <scalbnf>
 80147a4:	eeb0 8a40 	vmov.f32	s16, s0
 80147a8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80147ac:	ee28 0a00 	vmul.f32	s0, s16, s0
 80147b0:	f000 f9f0 	bl	8014b94 <floorf>
 80147b4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80147b8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80147bc:	2d00      	cmp	r5, #0
 80147be:	9a07      	ldr	r2, [sp, #28]
 80147c0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80147c4:	ee17 9a90 	vmov	r9, s15
 80147c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147cc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80147d0:	dd41      	ble.n	8014856 <__kernel_rem_pio2f+0x1a6>
 80147d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80147d6:	ab08      	add	r3, sp, #32
 80147d8:	f1c5 0e08 	rsb	lr, r5, #8
 80147dc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80147e0:	fa47 f00e 	asr.w	r0, r7, lr
 80147e4:	4481      	add	r9, r0
 80147e6:	fa00 f00e 	lsl.w	r0, r0, lr
 80147ea:	1a3f      	subs	r7, r7, r0
 80147ec:	f1c5 0007 	rsb	r0, r5, #7
 80147f0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80147f4:	4107      	asrs	r7, r0
 80147f6:	2f00      	cmp	r7, #0
 80147f8:	dd3c      	ble.n	8014874 <__kernel_rem_pio2f+0x1c4>
 80147fa:	f04f 0e00 	mov.w	lr, #0
 80147fe:	f109 0901 	add.w	r9, r9, #1
 8014802:	4671      	mov	r1, lr
 8014804:	4576      	cmp	r6, lr
 8014806:	dc67      	bgt.n	80148d8 <__kernel_rem_pio2f+0x228>
 8014808:	2d00      	cmp	r5, #0
 801480a:	dd03      	ble.n	8014814 <__kernel_rem_pio2f+0x164>
 801480c:	2d01      	cmp	r5, #1
 801480e:	d074      	beq.n	80148fa <__kernel_rem_pio2f+0x24a>
 8014810:	2d02      	cmp	r5, #2
 8014812:	d07b      	beq.n	801490c <__kernel_rem_pio2f+0x25c>
 8014814:	2f02      	cmp	r7, #2
 8014816:	d12d      	bne.n	8014874 <__kernel_rem_pio2f+0x1c4>
 8014818:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801481c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014820:	b341      	cbz	r1, 8014874 <__kernel_rem_pio2f+0x1c4>
 8014822:	4628      	mov	r0, r5
 8014824:	9207      	str	r2, [sp, #28]
 8014826:	f7ff febb 	bl	80145a0 <scalbnf>
 801482a:	9a07      	ldr	r2, [sp, #28]
 801482c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014830:	e020      	b.n	8014874 <__kernel_rem_pio2f+0x1c4>
 8014832:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014836:	3f01      	subs	r7, #1
 8014838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801483c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014840:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014844:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014848:	ecac 0a01 	vstmia	ip!, {s0}
 801484c:	ed90 0a00 	vldr	s0, [r0]
 8014850:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014854:	e79e      	b.n	8014794 <__kernel_rem_pio2f+0xe4>
 8014856:	d105      	bne.n	8014864 <__kernel_rem_pio2f+0x1b4>
 8014858:	1e70      	subs	r0, r6, #1
 801485a:	ab08      	add	r3, sp, #32
 801485c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8014860:	11ff      	asrs	r7, r7, #7
 8014862:	e7c8      	b.n	80147f6 <__kernel_rem_pio2f+0x146>
 8014864:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014868:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014870:	da30      	bge.n	80148d4 <__kernel_rem_pio2f+0x224>
 8014872:	2700      	movs	r7, #0
 8014874:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801487c:	f040 809a 	bne.w	80149b4 <__kernel_rem_pio2f+0x304>
 8014880:	1e74      	subs	r4, r6, #1
 8014882:	46a4      	mov	ip, r4
 8014884:	2100      	movs	r1, #0
 8014886:	45d4      	cmp	ip, sl
 8014888:	da47      	bge.n	801491a <__kernel_rem_pio2f+0x26a>
 801488a:	2900      	cmp	r1, #0
 801488c:	d063      	beq.n	8014956 <__kernel_rem_pio2f+0x2a6>
 801488e:	ab08      	add	r3, sp, #32
 8014890:	3d08      	subs	r5, #8
 8014892:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d07f      	beq.n	801499a <__kernel_rem_pio2f+0x2ea>
 801489a:	4628      	mov	r0, r5
 801489c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80148a0:	f7ff fe7e 	bl	80145a0 <scalbnf>
 80148a4:	1c63      	adds	r3, r4, #1
 80148a6:	aa44      	add	r2, sp, #272	; 0x110
 80148a8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80149ac <__kernel_rem_pio2f+0x2fc>
 80148ac:	0099      	lsls	r1, r3, #2
 80148ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80148b2:	4623      	mov	r3, r4
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f280 80ad 	bge.w	8014a14 <__kernel_rem_pio2f+0x364>
 80148ba:	4623      	mov	r3, r4
 80148bc:	2b00      	cmp	r3, #0
 80148be:	f2c0 80cb 	blt.w	8014a58 <__kernel_rem_pio2f+0x3a8>
 80148c2:	aa44      	add	r2, sp, #272	; 0x110
 80148c4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80148c8:	4e36      	ldr	r6, [pc, #216]	; (80149a4 <__kernel_rem_pio2f+0x2f4>)
 80148ca:	eddf 7a39 	vldr	s15, [pc, #228]	; 80149b0 <__kernel_rem_pio2f+0x300>
 80148ce:	2000      	movs	r0, #0
 80148d0:	1ae2      	subs	r2, r4, r3
 80148d2:	e0b6      	b.n	8014a42 <__kernel_rem_pio2f+0x392>
 80148d4:	2702      	movs	r7, #2
 80148d6:	e790      	b.n	80147fa <__kernel_rem_pio2f+0x14a>
 80148d8:	6820      	ldr	r0, [r4, #0]
 80148da:	b949      	cbnz	r1, 80148f0 <__kernel_rem_pio2f+0x240>
 80148dc:	b118      	cbz	r0, 80148e6 <__kernel_rem_pio2f+0x236>
 80148de:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80148e2:	6020      	str	r0, [r4, #0]
 80148e4:	2001      	movs	r0, #1
 80148e6:	f10e 0e01 	add.w	lr, lr, #1
 80148ea:	3404      	adds	r4, #4
 80148ec:	4601      	mov	r1, r0
 80148ee:	e789      	b.n	8014804 <__kernel_rem_pio2f+0x154>
 80148f0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80148f4:	6020      	str	r0, [r4, #0]
 80148f6:	4608      	mov	r0, r1
 80148f8:	e7f5      	b.n	80148e6 <__kernel_rem_pio2f+0x236>
 80148fa:	1e74      	subs	r4, r6, #1
 80148fc:	ab08      	add	r3, sp, #32
 80148fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014902:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014906:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801490a:	e783      	b.n	8014814 <__kernel_rem_pio2f+0x164>
 801490c:	1e74      	subs	r4, r6, #1
 801490e:	ab08      	add	r3, sp, #32
 8014910:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014914:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014918:	e7f5      	b.n	8014906 <__kernel_rem_pio2f+0x256>
 801491a:	ab08      	add	r3, sp, #32
 801491c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8014920:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014924:	4301      	orrs	r1, r0
 8014926:	e7ae      	b.n	8014886 <__kernel_rem_pio2f+0x1d6>
 8014928:	3001      	adds	r0, #1
 801492a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801492e:	2f00      	cmp	r7, #0
 8014930:	d0fa      	beq.n	8014928 <__kernel_rem_pio2f+0x278>
 8014932:	9b06      	ldr	r3, [sp, #24]
 8014934:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014938:	eb0d 0403 	add.w	r4, sp, r3
 801493c:	9b01      	ldr	r3, [sp, #4]
 801493e:	18f7      	adds	r7, r6, r3
 8014940:	ab1c      	add	r3, sp, #112	; 0x70
 8014942:	f106 0c01 	add.w	ip, r6, #1
 8014946:	3c4c      	subs	r4, #76	; 0x4c
 8014948:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801494c:	4430      	add	r0, r6
 801494e:	4560      	cmp	r0, ip
 8014950:	da04      	bge.n	801495c <__kernel_rem_pio2f+0x2ac>
 8014952:	4606      	mov	r6, r0
 8014954:	e711      	b.n	801477a <__kernel_rem_pio2f+0xca>
 8014956:	9c05      	ldr	r4, [sp, #20]
 8014958:	2001      	movs	r0, #1
 801495a:	e7e6      	b.n	801492a <__kernel_rem_pio2f+0x27a>
 801495c:	9b04      	ldr	r3, [sp, #16]
 801495e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014962:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014966:	9306      	str	r3, [sp, #24]
 8014968:	ee07 3a90 	vmov	s15, r3
 801496c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014970:	2600      	movs	r6, #0
 8014972:	ece7 7a01 	vstmia	r7!, {s15}
 8014976:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80149b0 <__kernel_rem_pio2f+0x300>
 801497a:	46b9      	mov	r9, r7
 801497c:	455e      	cmp	r6, fp
 801497e:	dd04      	ble.n	801498a <__kernel_rem_pio2f+0x2da>
 8014980:	ece4 7a01 	vstmia	r4!, {s15}
 8014984:	f10c 0c01 	add.w	ip, ip, #1
 8014988:	e7e1      	b.n	801494e <__kernel_rem_pio2f+0x29e>
 801498a:	ecfe 6a01 	vldmia	lr!, {s13}
 801498e:	ed39 7a01 	vldmdb	r9!, {s14}
 8014992:	3601      	adds	r6, #1
 8014994:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014998:	e7f0      	b.n	801497c <__kernel_rem_pio2f+0x2cc>
 801499a:	3c01      	subs	r4, #1
 801499c:	e777      	b.n	801488e <__kernel_rem_pio2f+0x1de>
 801499e:	bf00      	nop
 80149a0:	08015878 	.word	0x08015878
 80149a4:	0801584c 	.word	0x0801584c
 80149a8:	43800000 	.word	0x43800000
 80149ac:	3b800000 	.word	0x3b800000
 80149b0:	00000000 	.word	0x00000000
 80149b4:	9b03      	ldr	r3, [sp, #12]
 80149b6:	eeb0 0a48 	vmov.f32	s0, s16
 80149ba:	1a98      	subs	r0, r3, r2
 80149bc:	f7ff fdf0 	bl	80145a0 <scalbnf>
 80149c0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80149a8 <__kernel_rem_pio2f+0x2f8>
 80149c4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80149c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149cc:	db19      	blt.n	8014a02 <__kernel_rem_pio2f+0x352>
 80149ce:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80149ac <__kernel_rem_pio2f+0x2fc>
 80149d2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80149d6:	aa08      	add	r2, sp, #32
 80149d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149dc:	1c74      	adds	r4, r6, #1
 80149de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149e2:	3508      	adds	r5, #8
 80149e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80149e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80149f0:	ee10 3a10 	vmov	r3, s0
 80149f4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80149f8:	ee17 3a90 	vmov	r3, s15
 80149fc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014a00:	e74b      	b.n	801489a <__kernel_rem_pio2f+0x1ea>
 8014a02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a06:	aa08      	add	r2, sp, #32
 8014a08:	ee10 3a10 	vmov	r3, s0
 8014a0c:	4634      	mov	r4, r6
 8014a0e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014a12:	e742      	b.n	801489a <__kernel_rem_pio2f+0x1ea>
 8014a14:	a808      	add	r0, sp, #32
 8014a16:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014a1a:	9001      	str	r0, [sp, #4]
 8014a1c:	ee07 0a90 	vmov	s15, r0
 8014a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a24:	3b01      	subs	r3, #1
 8014a26:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014a2a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014a2e:	ed62 7a01 	vstmdb	r2!, {s15}
 8014a32:	e73f      	b.n	80148b4 <__kernel_rem_pio2f+0x204>
 8014a34:	ecf6 6a01 	vldmia	r6!, {s13}
 8014a38:	ecb5 7a01 	vldmia	r5!, {s14}
 8014a3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014a40:	3001      	adds	r0, #1
 8014a42:	4550      	cmp	r0, sl
 8014a44:	dc01      	bgt.n	8014a4a <__kernel_rem_pio2f+0x39a>
 8014a46:	4290      	cmp	r0, r2
 8014a48:	ddf4      	ble.n	8014a34 <__kernel_rem_pio2f+0x384>
 8014a4a:	a858      	add	r0, sp, #352	; 0x160
 8014a4c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014a50:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8014a54:	3b01      	subs	r3, #1
 8014a56:	e731      	b.n	80148bc <__kernel_rem_pio2f+0x20c>
 8014a58:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014a5a:	2b02      	cmp	r3, #2
 8014a5c:	dc09      	bgt.n	8014a72 <__kernel_rem_pio2f+0x3c2>
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	dc2b      	bgt.n	8014aba <__kernel_rem_pio2f+0x40a>
 8014a62:	d044      	beq.n	8014aee <__kernel_rem_pio2f+0x43e>
 8014a64:	f009 0007 	and.w	r0, r9, #7
 8014a68:	b059      	add	sp, #356	; 0x164
 8014a6a:	ecbd 8b04 	vpop	{d8-d9}
 8014a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a72:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014a74:	2b03      	cmp	r3, #3
 8014a76:	d1f5      	bne.n	8014a64 <__kernel_rem_pio2f+0x3b4>
 8014a78:	aa30      	add	r2, sp, #192	; 0xc0
 8014a7a:	1f0b      	subs	r3, r1, #4
 8014a7c:	4413      	add	r3, r2
 8014a7e:	461a      	mov	r2, r3
 8014a80:	4620      	mov	r0, r4
 8014a82:	2800      	cmp	r0, #0
 8014a84:	f1a2 0204 	sub.w	r2, r2, #4
 8014a88:	dc52      	bgt.n	8014b30 <__kernel_rem_pio2f+0x480>
 8014a8a:	4622      	mov	r2, r4
 8014a8c:	2a01      	cmp	r2, #1
 8014a8e:	f1a3 0304 	sub.w	r3, r3, #4
 8014a92:	dc5d      	bgt.n	8014b50 <__kernel_rem_pio2f+0x4a0>
 8014a94:	ab30      	add	r3, sp, #192	; 0xc0
 8014a96:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80149b0 <__kernel_rem_pio2f+0x300>
 8014a9a:	440b      	add	r3, r1
 8014a9c:	2c01      	cmp	r4, #1
 8014a9e:	dc67      	bgt.n	8014b70 <__kernel_rem_pio2f+0x4c0>
 8014aa0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014aa4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8014aa8:	2f00      	cmp	r7, #0
 8014aaa:	d167      	bne.n	8014b7c <__kernel_rem_pio2f+0x4cc>
 8014aac:	edc8 6a00 	vstr	s13, [r8]
 8014ab0:	ed88 7a01 	vstr	s14, [r8, #4]
 8014ab4:	edc8 7a02 	vstr	s15, [r8, #8]
 8014ab8:	e7d4      	b.n	8014a64 <__kernel_rem_pio2f+0x3b4>
 8014aba:	ab30      	add	r3, sp, #192	; 0xc0
 8014abc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80149b0 <__kernel_rem_pio2f+0x300>
 8014ac0:	440b      	add	r3, r1
 8014ac2:	4622      	mov	r2, r4
 8014ac4:	2a00      	cmp	r2, #0
 8014ac6:	da24      	bge.n	8014b12 <__kernel_rem_pio2f+0x462>
 8014ac8:	b34f      	cbz	r7, 8014b1e <__kernel_rem_pio2f+0x46e>
 8014aca:	eef1 7a47 	vneg.f32	s15, s14
 8014ace:	edc8 7a00 	vstr	s15, [r8]
 8014ad2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ada:	aa31      	add	r2, sp, #196	; 0xc4
 8014adc:	2301      	movs	r3, #1
 8014ade:	429c      	cmp	r4, r3
 8014ae0:	da20      	bge.n	8014b24 <__kernel_rem_pio2f+0x474>
 8014ae2:	b10f      	cbz	r7, 8014ae8 <__kernel_rem_pio2f+0x438>
 8014ae4:	eef1 7a67 	vneg.f32	s15, s15
 8014ae8:	edc8 7a01 	vstr	s15, [r8, #4]
 8014aec:	e7ba      	b.n	8014a64 <__kernel_rem_pio2f+0x3b4>
 8014aee:	ab30      	add	r3, sp, #192	; 0xc0
 8014af0:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80149b0 <__kernel_rem_pio2f+0x300>
 8014af4:	440b      	add	r3, r1
 8014af6:	2c00      	cmp	r4, #0
 8014af8:	da05      	bge.n	8014b06 <__kernel_rem_pio2f+0x456>
 8014afa:	b10f      	cbz	r7, 8014b00 <__kernel_rem_pio2f+0x450>
 8014afc:	eef1 7a67 	vneg.f32	s15, s15
 8014b00:	edc8 7a00 	vstr	s15, [r8]
 8014b04:	e7ae      	b.n	8014a64 <__kernel_rem_pio2f+0x3b4>
 8014b06:	ed33 7a01 	vldmdb	r3!, {s14}
 8014b0a:	3c01      	subs	r4, #1
 8014b0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b10:	e7f1      	b.n	8014af6 <__kernel_rem_pio2f+0x446>
 8014b12:	ed73 7a01 	vldmdb	r3!, {s15}
 8014b16:	3a01      	subs	r2, #1
 8014b18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b1c:	e7d2      	b.n	8014ac4 <__kernel_rem_pio2f+0x414>
 8014b1e:	eef0 7a47 	vmov.f32	s15, s14
 8014b22:	e7d4      	b.n	8014ace <__kernel_rem_pio2f+0x41e>
 8014b24:	ecb2 7a01 	vldmia	r2!, {s14}
 8014b28:	3301      	adds	r3, #1
 8014b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b2e:	e7d6      	b.n	8014ade <__kernel_rem_pio2f+0x42e>
 8014b30:	edd2 7a00 	vldr	s15, [r2]
 8014b34:	edd2 6a01 	vldr	s13, [r2, #4]
 8014b38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014b3c:	3801      	subs	r0, #1
 8014b3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b42:	ed82 7a00 	vstr	s14, [r2]
 8014b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014b4a:	edc2 7a01 	vstr	s15, [r2, #4]
 8014b4e:	e798      	b.n	8014a82 <__kernel_rem_pio2f+0x3d2>
 8014b50:	edd3 7a00 	vldr	s15, [r3]
 8014b54:	edd3 6a01 	vldr	s13, [r3, #4]
 8014b58:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014b5c:	3a01      	subs	r2, #1
 8014b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b62:	ed83 7a00 	vstr	s14, [r3]
 8014b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014b6a:	edc3 7a01 	vstr	s15, [r3, #4]
 8014b6e:	e78d      	b.n	8014a8c <__kernel_rem_pio2f+0x3dc>
 8014b70:	ed33 7a01 	vldmdb	r3!, {s14}
 8014b74:	3c01      	subs	r4, #1
 8014b76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b7a:	e78f      	b.n	8014a9c <__kernel_rem_pio2f+0x3ec>
 8014b7c:	eef1 6a66 	vneg.f32	s13, s13
 8014b80:	eeb1 7a47 	vneg.f32	s14, s14
 8014b84:	edc8 6a00 	vstr	s13, [r8]
 8014b88:	ed88 7a01 	vstr	s14, [r8, #4]
 8014b8c:	eef1 7a67 	vneg.f32	s15, s15
 8014b90:	e790      	b.n	8014ab4 <__kernel_rem_pio2f+0x404>
 8014b92:	bf00      	nop

08014b94 <floorf>:
 8014b94:	ee10 3a10 	vmov	r3, s0
 8014b98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014b9c:	3a7f      	subs	r2, #127	; 0x7f
 8014b9e:	2a16      	cmp	r2, #22
 8014ba0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014ba4:	dc2a      	bgt.n	8014bfc <floorf+0x68>
 8014ba6:	2a00      	cmp	r2, #0
 8014ba8:	da11      	bge.n	8014bce <floorf+0x3a>
 8014baa:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014c0c <floorf+0x78>
 8014bae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014bb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bba:	dd05      	ble.n	8014bc8 <floorf+0x34>
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	da23      	bge.n	8014c08 <floorf+0x74>
 8014bc0:	4a13      	ldr	r2, [pc, #76]	; (8014c10 <floorf+0x7c>)
 8014bc2:	2900      	cmp	r1, #0
 8014bc4:	bf18      	it	ne
 8014bc6:	4613      	movne	r3, r2
 8014bc8:	ee00 3a10 	vmov	s0, r3
 8014bcc:	4770      	bx	lr
 8014bce:	4911      	ldr	r1, [pc, #68]	; (8014c14 <floorf+0x80>)
 8014bd0:	4111      	asrs	r1, r2
 8014bd2:	420b      	tst	r3, r1
 8014bd4:	d0fa      	beq.n	8014bcc <floorf+0x38>
 8014bd6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014c0c <floorf+0x78>
 8014bda:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014bde:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be6:	ddef      	ble.n	8014bc8 <floorf+0x34>
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	bfbe      	ittt	lt
 8014bec:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014bf0:	fa40 f202 	asrlt.w	r2, r0, r2
 8014bf4:	189b      	addlt	r3, r3, r2
 8014bf6:	ea23 0301 	bic.w	r3, r3, r1
 8014bfa:	e7e5      	b.n	8014bc8 <floorf+0x34>
 8014bfc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014c00:	d3e4      	bcc.n	8014bcc <floorf+0x38>
 8014c02:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014c06:	4770      	bx	lr
 8014c08:	2300      	movs	r3, #0
 8014c0a:	e7dd      	b.n	8014bc8 <floorf+0x34>
 8014c0c:	7149f2ca 	.word	0x7149f2ca
 8014c10:	bf800000 	.word	0xbf800000
 8014c14:	007fffff 	.word	0x007fffff

08014c18 <_init>:
 8014c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c1a:	bf00      	nop
 8014c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c1e:	bc08      	pop	{r3}
 8014c20:	469e      	mov	lr, r3
 8014c22:	4770      	bx	lr

08014c24 <_fini>:
 8014c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c26:	bf00      	nop
 8014c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c2a:	bc08      	pop	{r3}
 8014c2c:	469e      	mov	lr, r3
 8014c2e:	4770      	bx	lr
