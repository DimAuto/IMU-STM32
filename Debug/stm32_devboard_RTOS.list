
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a2c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  08019bf0  08019bf0  00029bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8e4  0801a8e4  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8e4  0801a8e4  0002a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a8ec  0801a8ec  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8ec  0801a8ec  0002a8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a8f0  0801a8f0  0002a8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0801a8f4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062d4  20000278  0801ab6c  00030278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000654c  0801ab6c  0003654c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a4a8  00000000  00000000  000302eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006200  00000000  00000000  0005a793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023f8  00000000  00000000  00060998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c07  00000000  00000000  00062d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000320b6  00000000  00000000  00064997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e5cf  00000000  00000000  00096a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011ea45  00000000  00000000  000c501c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ae8c  00000000  00000000  001e3a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001ee8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019bd4 	.word	0x08019bd4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	08019bd4 	.word	0x08019bd4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f98 <FusionRadiansToDegrees+0x24>
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	42652ee0 	.word	0x42652ee0

08000f9c <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000faa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	d802      	bhi.n	8000fbe <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000fb8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000fec <FusionAsin+0x50>
 8000fbc:	e011      	b.n	8000fe2 <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	db02      	blt.n	8000fd6 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000fd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000ff0 <FusionAsin+0x54>
 8000fd4:	e005      	b.n	8000fe2 <FusionAsin+0x46>
    }
    return asinf(value);
 8000fd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fda:	f017 f9bf 	bl	801835c <asinf>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	bfc90fdb 	.word	0xbfc90fdb
 8000ff0:	3fc90fdb 	.word	0x3fc90fdb

08000ff4 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b091      	sub	sp, #68	; 0x44
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	eeb0 5a40 	vmov.f32	s10, s0
 8000ffe:	eef0 5a60 	vmov.f32	s11, s1
 8001002:	eeb0 6a41 	vmov.f32	s12, s2
 8001006:	eef0 6a61 	vmov.f32	s13, s3
 800100a:	eeb0 7a42 	vmov.f32	s14, s4
 800100e:	eef0 7a62 	vmov.f32	s15, s5
 8001012:	ed87 5a07 	vstr	s10, [r7, #28]
 8001016:	edc7 5a08 	vstr	s11, [r7, #32]
 800101a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800101e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001022:	ed87 7a05 	vstr	s14, [r7, #20]
 8001026:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 800102a:	ed97 7a07 	vldr	s14, [r7, #28]
 800102e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001036:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800103a:	ed97 7a08 	vldr	s14, [r7, #32]
 800103e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001042:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001046:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800104a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800104e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001056:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800105e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001062:	ca07      	ldmia	r2, {r0, r1, r2}
 8001064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106e:	ee06 1a90 	vmov	s13, r1
 8001072:	ee07 2a10 	vmov	s14, r2
 8001076:	ee07 3a90 	vmov	s15, r3
}
 800107a:	eeb0 0a66 	vmov.f32	s0, s13
 800107e:	eef0 0a47 	vmov.f32	s1, s14
 8001082:	eeb0 1a67 	vmov.f32	s2, s15
 8001086:	3744      	adds	r7, #68	; 0x44
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	; 0x40
 8001094:	af00      	add	r7, sp, #0
 8001096:	eeb0 6a40 	vmov.f32	s12, s0
 800109a:	eef0 6a60 	vmov.f32	s13, s1
 800109e:	eeb0 7a41 	vmov.f32	s14, s2
 80010a2:	eef0 7a61 	vmov.f32	s15, s3
 80010a6:	ed87 6a04 	vstr	s12, [r7, #16]
 80010aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80010ae:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b2:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80010b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80010ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80010d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	edd7 6a06 	vldr	s13, [r7, #24]
 80010de:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80010ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	eef0 0a67 	vmov.f32	s1, s15
 8001102:	eeb0 0a66 	vmov.f32	s0, s13
 8001106:	f017 f955 	bl	80183b4 <atan2f>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	f7ff ff2f 	bl	8000f74 <FusionRadiansToDegrees>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800111e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001122:	edd7 7a06 	vldr	s15, [r7, #24]
 8001126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112a:	edd7 6a07 	vldr	s13, [r7, #28]
 800112e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f7ff ff2b 	bl	8000f9c <FusionAsin>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	f7ff ff11 	bl	8000f74 <FusionRadiansToDegrees>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001156:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800115a:	ed97 7a04 	vldr	s14, [r7, #16]
 800115e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001166:	edd7 6a05 	vldr	s13, [r7, #20]
 800116a:	edd7 7a06 	vldr	s15, [r7, #24]
 800116e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001172:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	edd7 7a07 	vldr	s15, [r7, #28]
 800117e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001182:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118a:	eef0 0a67 	vmov.f32	s1, s15
 800118e:	eeb0 0a66 	vmov.f32	s0, s13
 8001192:	f017 f90f 	bl	80183b4 <atan2f>
 8001196:	eef0 7a40 	vmov.f32	s15, s0
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f7ff fee9 	bl	8000f74 <FusionRadiansToDegrees>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80011a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 80011aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011be:	ee06 1a90 	vmov	s13, r1
 80011c2:	ee07 2a10 	vmov	s14, r2
 80011c6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80011ca:	eeb0 0a66 	vmov.f32	s0, s13
 80011ce:	eef0 0a47 	vmov.f32	s1, s14
 80011d2:	eeb0 1a67 	vmov.f32	s2, s15
 80011d6:	3740      	adds	r7, #64	; 0x40
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <setGyroOffset>:
static uint32_t update_duration = 0;

FusionAhrs ahrs;
FusionOffset offset;

void setGyroOffset(gyro_data_t values){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	eef0 6a40 	vmov.f32	s13, s0
 80011e6:	eeb0 7a60 	vmov.f32	s14, s1
 80011ea:	eef0 7a41 	vmov.f32	s15, s2
 80011ee:	edc7 6a01 	vstr	s13, [r7, #4]
 80011f2:	ed87 7a02 	vstr	s14, [r7, #8]
 80011f6:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroscopeOffset.array[0] = values.gyro_x;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <setGyroOffset+0x3c>)
 80011fe:	6013      	str	r3, [r2, #0]
	gyroscopeOffset.array[1] = values.gyro_y;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <setGyroOffset+0x3c>)
 8001204:	6053      	str	r3, [r2, #4]
	gyroscopeOffset.array[2] = values.gyro_z;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <setGyroOffset+0x3c>)
 800120a:	6093      	str	r3, [r2, #8]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000294 	.word	0x20000294

0800121c <setMagnCoeff>:

void setMagnCoeff(FusionVector hardiron, FusionMatrix softiron){
 800121c:	b084      	sub	sp, #16
 800121e:	b490      	push	{r4, r7}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	eef0 6a40 	vmov.f32	s13, s0
 8001228:	eeb0 7a60 	vmov.f32	s14, s1
 800122c:	eef0 7a41 	vmov.f32	s15, s2
 8001230:	f107 0420 	add.w	r4, r7, #32
 8001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001238:	edc7 6a01 	vstr	s13, [r7, #4]
 800123c:	ed87 7a02 	vstr	s14, [r7, #8]
 8001240:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint8_t i=0; i<=3; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	75fb      	strb	r3, [r7, #23]
 8001248:	e00d      	b.n	8001266 <setMagnCoeff+0x4a>
		hardIronOffset.array[i] = hardiron.array[i];
 800124a:	7dfa      	ldrb	r2, [r7, #23]
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	3218      	adds	r2, #24
 8001252:	443a      	add	r2, r7
 8001254:	3a14      	subs	r2, #20
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	491b      	ldr	r1, [pc, #108]	; (80012c8 <setMagnCoeff+0xac>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	601a      	str	r2, [r3, #0]
	for (uint8_t i=0; i<=3; i++){
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	3301      	adds	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d9ee      	bls.n	800124a <setMagnCoeff+0x2e>
	}
	for (uint8_t i=0; i<=3; i++){
 800126c:	2300      	movs	r3, #0
 800126e:	75bb      	strb	r3, [r7, #22]
 8001270:	e01f      	b.n	80012b2 <setMagnCoeff+0x96>
		for (uint8_t j=0; j<=3; j++){
 8001272:	2300      	movs	r3, #0
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	e016      	b.n	80012a6 <setMagnCoeff+0x8a>
			softIronMatrix.array[i][j] = softiron.array[i][j];
 8001278:	7db9      	ldrb	r1, [r7, #22]
 800127a:	7d7c      	ldrb	r4, [r7, #21]
 800127c:	7dba      	ldrb	r2, [r7, #22]
 800127e:	7d78      	ldrb	r0, [r7, #21]
 8001280:	460b      	mov	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	4423      	add	r3, r4
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3320      	adds	r3, #32
 800128c:	443b      	add	r3, r7
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	4c0e      	ldr	r4, [pc, #56]	; (80012cc <setMagnCoeff+0xb0>)
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	4403      	add	r3, r0
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4423      	add	r3, r4
 800129e:	6019      	str	r1, [r3, #0]
		for (uint8_t j=0; j<=3; j++){
 80012a0:	7d7b      	ldrb	r3, [r7, #21]
 80012a2:	3301      	adds	r3, #1
 80012a4:	757b      	strb	r3, [r7, #21]
 80012a6:	7d7b      	ldrb	r3, [r7, #21]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d9e5      	bls.n	8001278 <setMagnCoeff+0x5c>
	for (uint8_t i=0; i<=3; i++){
 80012ac:	7dbb      	ldrb	r3, [r7, #22]
 80012ae:	3301      	adds	r3, #1
 80012b0:	75bb      	strb	r3, [r7, #22]
 80012b2:	7dbb      	ldrb	r3, [r7, #22]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d9dc      	bls.n	8001272 <setMagnCoeff+0x56>
		}
	}
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc90      	pop	{r4, r7}
 80012c2:	b004      	add	sp, #16
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000024 	.word	0x20000024
 80012cc:	20000000 	.word	0x20000000

080012d0 <FusionInit>:


/* Initialize Fusion algorithm. */
void FusionInit(void){
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
	gyro_data_t values = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 80012e2:	2164      	movs	r1, #100	; 0x64
 80012e4:	4815      	ldr	r0, [pc, #84]	; (800133c <FusionInit+0x6c>)
 80012e6:	f001 ff9d 	bl	8003224 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 80012ea:	4815      	ldr	r0, [pc, #84]	; (8001340 <FusionInit+0x70>)
 80012ec:	f000 fe48 	bl	8001f80 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <FusionInit+0x74>)
 80012f2:	1d3c      	adds	r4, r7, #4
 80012f4:	461d      	mov	r5, r3
 80012f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012fe:	e884 0003 	stmia.w	r4, {r0, r1}
	            .gyroscopeRange = 500.0f,
	            .accelerationRejection = 10.0f,
	            .magneticRejection = 10.0f,
	            .recoveryTriggerPeriod = 30 * SAMPLE_RATE,
	    };
	FusionAhrsSetSettings(&ahrs, &settings);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <FusionInit+0x70>)
 8001308:	f000 febc 	bl	8002084 <FusionAhrsSetSettings>
//	if (!Flash_isWritten (GYRO_OFFSET_ADDR)){	// Check if the specific memory addr is written, in order not to cause HRDFAULT
	Flash_Read_CalTable(GYRO_OFFSET_ADDR, &values);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <FusionInit+0x78>)
 8001314:	f007 f9de 	bl	80086d4 <Flash_Read_CalTable>
	setGyroOffset(values);
 8001318:	edd7 6a07 	vldr	s13, [r7, #28]
 800131c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001320:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001324:	eeb0 0a66 	vmov.f32	s0, s13
 8001328:	eef0 0a47 	vmov.f32	s1, s14
 800132c:	eeb0 1a67 	vmov.f32	s2, s15
 8001330:	f7ff ff54 	bl	80011dc <setGyroOffset>
//	}
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bdb0      	pop	{r4, r5, r7, pc}
 800133c:	20000318 	.word	0x20000318
 8001340:	200002a4 	.word	0x200002a4
 8001344:	08019bf0 	.word	0x08019bf0
 8001348:	080fb000 	.word	0x080fb000

0800134c <FusionCalcAngle>:

/* Calculate angle based only on Accelerometer and gyroscope.*/
void FusionCalcAngle(mems_data_t *memsData, FusionEuler *output_angles){
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	FusionVector gyroscope = {memsData->gyro.gyro_x, memsData->gyro.gyro_y, memsData->gyro.gyro_z};
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	623b      	str	r3, [r7, #32]
	const FusionVector accelerometer = {memsData->acc.acc_x, memsData->acc.acc_y, memsData->acc.acc_z};
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	617b      	str	r3, [r7, #20]
	gyroscope = FusionVectorSubtract(gyroscope, gyroscopeOffset);
 800137a:	4b78      	ldr	r3, [pc, #480]	; (800155c <FusionCalcAngle+0x210>)
 800137c:	ed93 5a00 	vldr	s10, [r3]
 8001380:	edd3 5a01 	vldr	s11, [r3, #4]
 8001384:	ed93 6a02 	vldr	s12, [r3, #8]
 8001388:	edd7 6a06 	vldr	s13, [r7, #24]
 800138c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001390:	edd7 7a08 	vldr	s15, [r7, #32]
 8001394:	eef0 1a45 	vmov.f32	s3, s10
 8001398:	eeb0 2a65 	vmov.f32	s4, s11
 800139c:	eef0 2a46 	vmov.f32	s5, s12
 80013a0:	eeb0 0a66 	vmov.f32	s0, s13
 80013a4:	eef0 0a47 	vmov.f32	s1, s14
 80013a8:	eeb0 1a67 	vmov.f32	s2, s15
 80013ac:	f7ff fe22 	bl	8000ff4 <FusionVectorSubtract>
 80013b0:	eef0 6a40 	vmov.f32	s13, s0
 80013b4:	eeb0 7a60 	vmov.f32	s14, s1
 80013b8:	eef0 7a41 	vmov.f32	s15, s2
 80013bc:	edc7 6a06 	vstr	s13, [r7, #24]
 80013c0:	ed87 7a07 	vstr	s14, [r7, #28]
 80013c4:	edc7 7a08 	vstr	s15, [r7, #32]

	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 80013c8:	edd7 6a06 	vldr	s13, [r7, #24]
 80013cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80013d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80013d4:	eeb0 0a66 	vmov.f32	s0, s13
 80013d8:	eef0 0a47 	vmov.f32	s1, s14
 80013dc:	eeb0 1a67 	vmov.f32	s2, s15
 80013e0:	485f      	ldr	r0, [pc, #380]	; (8001560 <FusionCalcAngle+0x214>)
 80013e2:	f001 ff51 	bl	8003288 <FusionOffsetUpdate>
 80013e6:	eef0 6a40 	vmov.f32	s13, s0
 80013ea:	eeb0 7a60 	vmov.f32	s14, s1
 80013ee:	eef0 7a41 	vmov.f32	s15, s2
 80013f2:	edc7 6a06 	vstr	s13, [r7, #24]
 80013f6:	ed87 7a07 	vstr	s14, [r7, #28]
 80013fa:	edc7 7a08 	vstr	s15, [r7, #32]
#ifndef GYRO_TS
	float delta = (float)(memsData->timestamp - prv_tick) / 1000.0f;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001402:	4b58      	ldr	r3, [pc, #352]	; (8001564 <FusionCalcAngle+0x218>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001410:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001568 <FusionCalcAngle+0x21c>
 8001414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001418:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	prv_tick = memsData->timestamp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	4a50      	ldr	r2, [pc, #320]	; (8001564 <FusionCalcAngle+0x218>)
 8001422:	6013      	str	r3, [r2, #0]
#else
	float delta = (float) ( memsData->timestamp - previousTimestamp) * (float) GYRO_TIMESTAMP_LSB_USEC / (float) 1000000;
	previousTimestamp = memsData->timestamp;
#endif
//	delta += 0.006; //Add a const offset.
	if ((delta >= MEMS_SR_SEC - 7) && (delta <= MEMS_SR_SEC + 7)){
 8001424:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001428:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 800142c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	db25      	blt.n	8001482 <FusionCalcAngle+0x136>
 8001436:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800143a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d81c      	bhi.n	8001482 <FusionCalcAngle+0x136>
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, delta);
 8001448:	ed97 5a03 	vldr	s10, [r7, #12]
 800144c:	edd7 5a04 	vldr	s11, [r7, #16]
 8001450:	ed97 6a05 	vldr	s12, [r7, #20]
 8001454:	edd7 6a06 	vldr	s13, [r7, #24]
 8001458:	ed97 7a07 	vldr	s14, [r7, #28]
 800145c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001460:	ed97 3a0d 	vldr	s6, [r7, #52]	; 0x34
 8001464:	eef0 1a45 	vmov.f32	s3, s10
 8001468:	eeb0 2a65 	vmov.f32	s4, s11
 800146c:	eef0 2a46 	vmov.f32	s5, s12
 8001470:	eeb0 0a66 	vmov.f32	s0, s13
 8001474:	eef0 0a47 	vmov.f32	s1, s14
 8001478:	eeb0 1a67 	vmov.f32	s2, s15
 800147c:	483b      	ldr	r0, [pc, #236]	; (800156c <FusionCalcAngle+0x220>)
 800147e:	f001 fcdd 	bl	8002e3c <FusionAhrsUpdateNoMagnetometer>
//
//	uint8_t text[20] = {0};
//	sprintf(text, "%f\r\n,", delta);
//	uart_write_debug(text, 20);

	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8001482:	483a      	ldr	r0, [pc, #232]	; (800156c <FusionCalcAngle+0x220>)
 8001484:	f001 fd34 	bl	8002ef0 <FusionAhrsGetQuaternion>
 8001488:	eeb0 6a40 	vmov.f32	s12, s0
 800148c:	eef0 6a60 	vmov.f32	s13, s1
 8001490:	eeb0 7a41 	vmov.f32	s14, s2
 8001494:	eef0 7a61 	vmov.f32	s15, s3
 8001498:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800149c:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80014a0:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80014a4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80014a8:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80014ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80014b0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014b8:	eeb0 0a46 	vmov.f32	s0, s12
 80014bc:	eef0 0a66 	vmov.f32	s1, s13
 80014c0:	eeb0 1a47 	vmov.f32	s2, s14
 80014c4:	eef0 1a67 	vmov.f32	s3, s15
 80014c8:	f7ff fde2 	bl	8001090 <FusionQuaternionToEuler>
 80014cc:	eef0 6a40 	vmov.f32	s13, s0
 80014d0:	eeb0 7a60 	vmov.f32	s14, s1
 80014d4:	eef0 7a41 	vmov.f32	s15, s2
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	edc3 6a00 	vstr	s13, [r3]
 80014de:	ed83 7a01 	vstr	s14, [r3, #4]
 80014e2:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80014ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d509      	bpl.n	800150a <FusionCalcAngle+0x1be>
		output_angles->angle.yaw += 360;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80014fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001570 <FusionCalcAngle+0x224>
 8001500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	d509      	bpl.n	800152e <FusionCalcAngle+0x1e2>
		output_angles->angle.roll += 360;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001570 <FusionCalcAngle+0x224>
 8001524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	edd3 7a01 	vldr	s15, [r3, #4]
 8001534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	d400      	bmi.n	8001540 <FusionCalcAngle+0x1f4>
		output_angles->angle.pitch += 360;
	}
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}
 800153e:	e009      	b.n	8001554 <FusionCalcAngle+0x208>
		output_angles->angle.pitch += 360;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	edd3 7a01 	vldr	s15, [r3, #4]
 8001546:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001570 <FusionCalcAngle+0x224>
 800154a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000294 	.word	0x20000294
 8001560:	20000318 	.word	0x20000318
 8001564:	200002a0 	.word	0x200002a0
 8001568:	447a0000 	.word	0x447a0000
 800156c:	200002a4 	.word	0x200002a4
 8001570:	43b40000 	.word	0x43b40000

08001574 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800157e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001582:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001598 <FusionDegreesToRadians+0x24>
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	3c8efa35 	.word	0x3c8efa35

0800159c <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	105a      	asrs	r2, r3, #1
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <FusionFastInverseSqrt+0x54>)
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80015b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015bc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80015f4 <FusionFastInverseSqrt+0x58>
 80015c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	eddf 6a08 	vldr	s13, [pc, #32]	; 80015f8 <FusionFastInverseSqrt+0x5c>
 80015d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	5f1f1412 	.word	0x5f1f1412
 80015f4:	3f36d312 	.word	0x3f36d312
 80015f8:	3fd851ff 	.word	0x3fd851ff

080015fc <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	eef0 6a40 	vmov.f32	s13, s0
 8001606:	eeb0 7a60 	vmov.f32	s14, s1
 800160a:	eef0 7a41 	vmov.f32	s15, s2
 800160e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001612:	ed87 7a02 	vstr	s14, [r7, #8]
 8001616:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d10f      	bne.n	8001648 <FusionVectorIsZero+0x4c>
 8001628:	edd7 7a02 	vldr	s15, [r7, #8]
 800162c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	d108      	bne.n	8001648 <FusionVectorIsZero+0x4c>
 8001636:	edd7 7a03 	vldr	s15, [r7, #12]
 800163a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d101      	bne.n	8001648 <FusionVectorIsZero+0x4c>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <FusionVectorIsZero+0x4e>
 8001648:	2300      	movs	r3, #0
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800165c:	b480      	push	{r7}
 800165e:	b091      	sub	sp, #68	; 0x44
 8001660:	af00      	add	r7, sp, #0
 8001662:	eeb0 5a40 	vmov.f32	s10, s0
 8001666:	eef0 5a60 	vmov.f32	s11, s1
 800166a:	eeb0 6a41 	vmov.f32	s12, s2
 800166e:	eef0 6a61 	vmov.f32	s13, s3
 8001672:	eeb0 7a42 	vmov.f32	s14, s4
 8001676:	eef0 7a62 	vmov.f32	s15, s5
 800167a:	ed87 5a07 	vstr	s10, [r7, #28]
 800167e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001682:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001686:	edc7 6a04 	vstr	s13, [r7, #16]
 800168a:	ed87 7a05 	vstr	s14, [r7, #20]
 800168e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8001692:	ed97 7a07 	vldr	s14, [r7, #28]
 8001696:	edd7 7a04 	vldr	s15, [r7, #16]
 800169a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800169e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80016a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80016a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80016b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80016c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80016cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d6:	ee06 1a90 	vmov	s13, r1
 80016da:	ee07 2a10 	vmov	s14, r2
 80016de:	ee07 3a90 	vmov	s15, r3
}
 80016e2:	eeb0 0a66 	vmov.f32	s0, s13
 80016e6:	eef0 0a47 	vmov.f32	s1, s14
 80016ea:	eeb0 1a67 	vmov.f32	s2, s15
 80016ee:	3744      	adds	r7, #68	; 0x44
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	eef0 6a40 	vmov.f32	s13, s0
 8001702:	eeb0 7a60 	vmov.f32	s14, s1
 8001706:	eef0 7a41 	vmov.f32	s15, s2
 800170a:	edc7 6a01 	vstr	s13, [r7, #4]
 800170e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001712:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001716:	ed97 7a01 	vldr	s14, [r7, #4]
 800171a:	edd7 7a02 	vldr	s15, [r7, #8]
 800171e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001722:	edd7 7a03 	vldr	s15, [r7, #12]
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001738:	b480      	push	{r7}
 800173a:	b08f      	sub	sp, #60	; 0x3c
 800173c:	af00      	add	r7, sp, #0
 800173e:	eef0 6a40 	vmov.f32	s13, s0
 8001742:	eeb0 7a60 	vmov.f32	s14, s1
 8001746:	eef0 7a41 	vmov.f32	s15, s2
 800174a:	edc7 1a04 	vstr	s3, [r7, #16]
 800174e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001752:	ed87 7a06 	vstr	s14, [r7, #24]
 8001756:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800175a:	ed97 7a05 	vldr	s14, [r7, #20]
 800175e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001762:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001766:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800176a:	ed97 7a06 	vldr	s14, [r7, #24]
 800176e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001772:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001776:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800177a:	ed97 7a07 	vldr	s14, [r7, #28]
 800177e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001786:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	f107 0220 	add.w	r2, r7, #32
 8001792:	ca07      	ldmia	r2, {r0, r1, r2}
 8001794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800179a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179e:	ee06 1a90 	vmov	s13, r1
 80017a2:	ee07 2a10 	vmov	s14, r2
 80017a6:	ee07 3a90 	vmov	s15, r3
}
 80017aa:	eeb0 0a66 	vmov.f32	s0, s13
 80017ae:	eef0 0a47 	vmov.f32	s1, s14
 80017b2:	eeb0 1a67 	vmov.f32	s2, s15
 80017b6:	373c      	adds	r7, #60	; 0x3c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80017c0:	b480      	push	{r7}
 80017c2:	b091      	sub	sp, #68	; 0x44
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	eeb0 5a40 	vmov.f32	s10, s0
 80017ca:	eef0 5a60 	vmov.f32	s11, s1
 80017ce:	eeb0 6a41 	vmov.f32	s12, s2
 80017d2:	eef0 6a61 	vmov.f32	s13, s3
 80017d6:	eeb0 7a42 	vmov.f32	s14, s4
 80017da:	eef0 7a62 	vmov.f32	s15, s5
 80017de:	ed87 5a07 	vstr	s10, [r7, #28]
 80017e2:	edc7 5a08 	vstr	s11, [r7, #32]
 80017e6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80017ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80017ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80017f2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 80017f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80017fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001802:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001806:	ed97 7a08 	vldr	s14, [r7, #32]
 800180a:	edd7 7a05 	vldr	s15, [r7, #20]
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001812:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001816:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800181a:	edd7 7a06 	vldr	s15, [r7, #24]
 800181e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001822:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001826:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800182a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001834:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183a:	ee06 1a90 	vmov	s13, r1
 800183e:	ee07 2a10 	vmov	s14, r2
 8001842:	ee07 3a90 	vmov	s15, r3
}
 8001846:	eeb0 0a66 	vmov.f32	s0, s13
 800184a:	eef0 0a47 	vmov.f32	s1, s14
 800184e:	eeb0 1a67 	vmov.f32	s2, s15
 8001852:	3744      	adds	r7, #68	; 0x44
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800185c:	b480      	push	{r7}
 800185e:	b091      	sub	sp, #68	; 0x44
 8001860:	af00      	add	r7, sp, #0
 8001862:	eeb0 5a40 	vmov.f32	s10, s0
 8001866:	eef0 5a60 	vmov.f32	s11, s1
 800186a:	eeb0 6a41 	vmov.f32	s12, s2
 800186e:	eef0 6a61 	vmov.f32	s13, s3
 8001872:	eeb0 7a42 	vmov.f32	s14, s4
 8001876:	eef0 7a62 	vmov.f32	s15, s5
 800187a:	ed87 5a07 	vstr	s10, [r7, #28]
 800187e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001882:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001886:	edc7 6a04 	vstr	s13, [r7, #16]
 800188a:	ed87 7a05 	vstr	s14, [r7, #20]
 800188e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8001892:	ed97 7a08 	vldr	s14, [r7, #32]
 8001896:	edd7 7a06 	vldr	s15, [r7, #24]
 800189a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80018a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018aa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80018ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80018b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018be:	edd7 6a07 	vldr	s13, [r7, #28]
 80018c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80018ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80018d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80018d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80018da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018de:	edd7 6a08 	vldr	s13, [r7, #32]
 80018e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ea:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80018ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80018f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80018fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001900:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001906:	ee06 1a90 	vmov	s13, r1
 800190a:	ee07 2a10 	vmov	s14, r2
 800190e:	ee07 3a90 	vmov	s15, r3
}
 8001912:	eeb0 0a66 	vmov.f32	s0, s13
 8001916:	eef0 0a47 	vmov.f32	s1, s14
 800191a:	eeb0 1a67 	vmov.f32	s2, s15
 800191e:	3744      	adds	r7, #68	; 0x44
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <FusionVectorDotProduct>:
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	eeb0 5a40 	vmov.f32	s10, s0
 8001932:	eef0 5a60 	vmov.f32	s11, s1
 8001936:	eeb0 6a41 	vmov.f32	s12, s2
 800193a:	eef0 6a61 	vmov.f32	s13, s3
 800193e:	eeb0 7a42 	vmov.f32	s14, s4
 8001942:	eef0 7a62 	vmov.f32	s15, s5
 8001946:	ed87 5a03 	vstr	s10, [r7, #12]
 800194a:	edc7 5a04 	vstr	s11, [r7, #16]
 800194e:	ed87 6a05 	vstr	s12, [r7, #20]
 8001952:	edc7 6a00 	vstr	s13, [r7]
 8001956:	ed87 7a01 	vstr	s14, [r7, #4]
 800195a:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800195e:	ed97 5a00 	vldr	s10, [r7]
 8001962:	edd7 5a01 	vldr	s11, [r7, #4]
 8001966:	ed97 6a02 	vldr	s12, [r7, #8]
 800196a:	edd7 6a03 	vldr	s13, [r7, #12]
 800196e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001972:	edd7 7a05 	vldr	s15, [r7, #20]
 8001976:	eef0 1a45 	vmov.f32	s3, s10
 800197a:	eeb0 2a65 	vmov.f32	s4, s11
 800197e:	eef0 2a46 	vmov.f32	s5, s12
 8001982:	eeb0 0a66 	vmov.f32	s0, s13
 8001986:	eef0 0a47 	vmov.f32	s1, s14
 800198a:	eeb0 1a67 	vmov.f32	s2, s15
 800198e:	f7ff ff17 	bl	80017c0 <FusionVectorHadamardProduct>
 8001992:	eef0 6a40 	vmov.f32	s13, s0
 8001996:	eeb0 7a60 	vmov.f32	s14, s1
 800199a:	eef0 7a41 	vmov.f32	s15, s2
 800199e:	edc7 6a07 	vstr	s13, [r7, #28]
 80019a2:	ed87 7a08 	vstr	s14, [r7, #32]
 80019a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80019aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80019ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80019b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019b6:	eeb0 0a66 	vmov.f32	s0, s13
 80019ba:	eef0 0a47 	vmov.f32	s1, s14
 80019be:	eeb0 1a67 	vmov.f32	s2, s15
 80019c2:	f7ff fe99 	bl	80016f8 <FusionVectorSum>
 80019c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019ca:	eeb0 0a67 	vmov.f32	s0, s15
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	eef0 6a40 	vmov.f32	s13, s0
 80019de:	eeb0 7a60 	vmov.f32	s14, s1
 80019e2:	eef0 7a41 	vmov.f32	s15, s2
 80019e6:	edc7 6a01 	vstr	s13, [r7, #4]
 80019ea:	ed87 7a02 	vstr	s14, [r7, #8]
 80019ee:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80019f2:	ed97 5a01 	vldr	s10, [r7, #4]
 80019f6:	edd7 5a02 	vldr	s11, [r7, #8]
 80019fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80019fe:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a02:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a0a:	eef0 1a45 	vmov.f32	s3, s10
 8001a0e:	eeb0 2a65 	vmov.f32	s4, s11
 8001a12:	eef0 2a46 	vmov.f32	s5, s12
 8001a16:	eeb0 0a66 	vmov.f32	s0, s13
 8001a1a:	eef0 0a47 	vmov.f32	s1, s14
 8001a1e:	eeb0 1a67 	vmov.f32	s2, s15
 8001a22:	f7ff fecd 	bl	80017c0 <FusionVectorHadamardProduct>
 8001a26:	eef0 6a40 	vmov.f32	s13, s0
 8001a2a:	eeb0 7a60 	vmov.f32	s14, s1
 8001a2e:	eef0 7a41 	vmov.f32	s15, s2
 8001a32:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a36:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a3a:	edc7 7a07 	vstr	s15, [r7, #28]
 8001a3e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a42:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a4a:	eeb0 0a66 	vmov.f32	s0, s13
 8001a4e:	eef0 0a47 	vmov.f32	s1, s14
 8001a52:	eeb0 1a67 	vmov.f32	s2, s15
 8001a56:	f7ff fe4f 	bl	80016f8 <FusionVectorSum>
 8001a5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	eef0 6a40 	vmov.f32	s13, s0
 8001a72:	eeb0 7a60 	vmov.f32	s14, s1
 8001a76:	eef0 7a41 	vmov.f32	s15, s2
 8001a7a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a7e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a82:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001a86:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a92:	eeb0 0a66 	vmov.f32	s0, s13
 8001a96:	eef0 0a47 	vmov.f32	s1, s14
 8001a9a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a9e:	f7ff ff99 	bl	80019d4 <FusionVectorMagnitudeSquared>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aaa:	f7ff fd77 	bl	800159c <FusionFastInverseSqrt>
 8001aae:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001ab2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ab6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001abe:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8001ac6:	eef0 0a47 	vmov.f32	s1, s14
 8001aca:	eeb0 1a67 	vmov.f32	s2, s15
 8001ace:	f7ff fe33 	bl	8001738 <FusionVectorMultiplyScalar>
 8001ad2:	eef0 6a40 	vmov.f32	s13, s0
 8001ad6:	eeb0 7a60 	vmov.f32	s14, s1
 8001ada:	eef0 7a41 	vmov.f32	s15, s2
 8001ade:	edc7 6a08 	vstr	s13, [r7, #32]
 8001ae2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001ae6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001aea:	6a39      	ldr	r1, [r7, #32]
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	ee06 1a90 	vmov	s13, r1
 8001af4:	ee07 2a10 	vmov	s14, r2
 8001af8:	ee07 3a90 	vmov	s15, r3
}
 8001afc:	eeb0 0a66 	vmov.f32	s0, s13
 8001b00:	eef0 0a47 	vmov.f32	s1, s14
 8001b04:	eeb0 1a67 	vmov.f32	s2, s15
 8001b08:	3730      	adds	r7, #48	; 0x30
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001b0e:	b490      	push	{r4, r7}
 8001b10:	b094      	sub	sp, #80	; 0x50
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	eeb0 4a40 	vmov.f32	s8, s0
 8001b18:	eef0 4a60 	vmov.f32	s9, s1
 8001b1c:	eeb0 5a41 	vmov.f32	s10, s2
 8001b20:	eef0 5a61 	vmov.f32	s11, s3
 8001b24:	eeb0 6a42 	vmov.f32	s12, s4
 8001b28:	eef0 6a62 	vmov.f32	s13, s5
 8001b2c:	eeb0 7a43 	vmov.f32	s14, s6
 8001b30:	eef0 7a63 	vmov.f32	s15, s7
 8001b34:	ed87 4a08 	vstr	s8, [r7, #32]
 8001b38:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001b3c:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001b40:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001b44:	ed87 6a04 	vstr	s12, [r7, #16]
 8001b48:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b4c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b50:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001b54:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b60:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001b64:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b70:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001b74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b80:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001b84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b88:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001b94:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ba2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001baa:	ee06 0a10 	vmov	s12, r0
 8001bae:	ee06 1a90 	vmov	s13, r1
 8001bb2:	ee07 2a10 	vmov	s14, r2
 8001bb6:	ee07 3a90 	vmov	s15, r3
}
 8001bba:	eeb0 0a46 	vmov.f32	s0, s12
 8001bbe:	eef0 0a66 	vmov.f32	s1, s13
 8001bc2:	eeb0 1a47 	vmov.f32	s2, s14
 8001bc6:	eef0 1a67 	vmov.f32	s3, s15
 8001bca:	3750      	adds	r7, #80	; 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc90      	pop	{r4, r7}
 8001bd0:	4770      	bx	lr

08001bd2 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001bd2:	b490      	push	{r4, r7}
 8001bd4:	b094      	sub	sp, #80	; 0x50
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	eeb0 4a40 	vmov.f32	s8, s0
 8001bdc:	eef0 4a60 	vmov.f32	s9, s1
 8001be0:	eeb0 5a41 	vmov.f32	s10, s2
 8001be4:	eef0 5a61 	vmov.f32	s11, s3
 8001be8:	eeb0 6a42 	vmov.f32	s12, s4
 8001bec:	eef0 6a62 	vmov.f32	s13, s5
 8001bf0:	eeb0 7a43 	vmov.f32	s14, s6
 8001bf4:	eef0 7a63 	vmov.f32	s15, s7
 8001bf8:	ed87 4a08 	vstr	s8, [r7, #32]
 8001bfc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001c00:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001c04:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001c08:	ed87 6a04 	vstr	s12, [r7, #16]
 8001c0c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001c10:	ed87 7a06 	vstr	s14, [r7, #24]
 8001c14:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001c18:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c24:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c34:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c44:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001c48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c54:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001c58:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c64:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c74:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c84:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001c88:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c90:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001c98:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ca8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001cc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001cd4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001cd8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ce8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d04:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001d18:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	ee06 0a10 	vmov	s12, r0
 8001d32:	ee06 1a90 	vmov	s13, r1
 8001d36:	ee07 2a10 	vmov	s14, r2
 8001d3a:	ee07 3a90 	vmov	s15, r3
}
 8001d3e:	eeb0 0a46 	vmov.f32	s0, s12
 8001d42:	eef0 0a66 	vmov.f32	s1, s13
 8001d46:	eeb0 1a47 	vmov.f32	s2, s14
 8001d4a:	eef0 1a67 	vmov.f32	s3, s15
 8001d4e:	3750      	adds	r7, #80	; 0x50
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc90      	pop	{r4, r7}
 8001d54:	4770      	bx	lr

08001d56 <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001d56:	b490      	push	{r4, r7}
 8001d58:	b094      	sub	sp, #80	; 0x50
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	eef0 4a40 	vmov.f32	s9, s0
 8001d60:	eeb0 5a60 	vmov.f32	s10, s1
 8001d64:	eef0 5a41 	vmov.f32	s11, s2
 8001d68:	eeb0 6a61 	vmov.f32	s12, s3
 8001d6c:	eef0 6a42 	vmov.f32	s13, s4
 8001d70:	eeb0 7a62 	vmov.f32	s14, s5
 8001d74:	eef0 7a43 	vmov.f32	s15, s6
 8001d78:	edc7 4a08 	vstr	s9, [r7, #32]
 8001d7c:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8001d80:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001d84:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001d88:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d8c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d90:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8001d94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d98:	eeb1 7a67 	vneg.f32	s14, s15
 8001d9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001db8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001dc4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001dc8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001dd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001de8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001df4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8001df8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e04:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001e08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e14:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e24:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8001e28:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e34:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001e38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e44:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e54:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001e58:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6e:	ee06 0a10 	vmov	s12, r0
 8001e72:	ee06 1a90 	vmov	s13, r1
 8001e76:	ee07 2a10 	vmov	s14, r2
 8001e7a:	ee07 3a90 	vmov	s15, r3
}
 8001e7e:	eeb0 0a46 	vmov.f32	s0, s12
 8001e82:	eef0 0a66 	vmov.f32	s1, s13
 8001e86:	eeb0 1a47 	vmov.f32	s2, s14
 8001e8a:	eef0 1a67 	vmov.f32	s3, s15
 8001e8e:	3750      	adds	r7, #80	; 0x50
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc90      	pop	{r4, r7}
 8001e94:	4770      	bx	lr

08001e96 <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001e96:	b590      	push	{r4, r7, lr}
 8001e98:	b093      	sub	sp, #76	; 0x4c
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	eeb0 6a40 	vmov.f32	s12, s0
 8001ea0:	eef0 6a60 	vmov.f32	s13, s1
 8001ea4:	eeb0 7a41 	vmov.f32	s14, s2
 8001ea8:	eef0 7a61 	vmov.f32	s15, s3
 8001eac:	ed87 6a04 	vstr	s12, [r7, #16]
 8001eb0:	edc7 6a05 	vstr	s13, [r7, #20]
 8001eb4:	ed87 7a06 	vstr	s14, [r7, #24]
 8001eb8:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001ebc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec8:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ecc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed8:	edd7 6a06 	vldr	s13, [r7, #24]
 8001edc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001eec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8001efc:	f7ff fb4e 	bl	800159c <FusionFastInverseSqrt>
 8001f00:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8001f04:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f08:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8001f14:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8001f24:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8001f34:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f38:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f40:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001f44:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5a:	ee06 0a10 	vmov	s12, r0
 8001f5e:	ee06 1a90 	vmov	s13, r1
 8001f62:	ee07 2a10 	vmov	s14, r2
 8001f66:	ee07 3a90 	vmov	s15, r3
}
 8001f6a:	eeb0 0a46 	vmov.f32	s0, s12
 8001f6e:	eef0 0a66 	vmov.f32	s1, s13
 8001f72:	eeb0 1a47 	vmov.f32	s2, s14
 8001f76:	eef0 1a67 	vmov.f32	s3, s15
 8001f7a:	374c      	adds	r7, #76	; 0x4c
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}

08001f80 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <FusionAhrsInitialise+0x38>)
 8001f8a:	f107 0408 	add.w	r4, r7, #8
 8001f8e:	461d      	mov	r5, r3
 8001f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f98:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f86e 	bl	8002084 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f807 	bl	8001fbc <FusionAhrsReset>
}
 8001fae:	bf00      	nop
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08019c08 	.word	0x08019c08

08001fbc <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b091      	sub	sp, #68	; 0x44
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fca:	619a      	str	r2, [r3, #24]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	61da      	str	r2, [r3, #28]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <FusionAhrsReset+0xc4>)
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	649a      	str	r2, [r3, #72]	; 0x48
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	651a      	str	r2, [r3, #80]	; 0x50
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002072:	bf00      	nop
 8002074:	3744      	adds	r7, #68	; 0x44
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	41200000 	.word	0x41200000

08002084 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80020a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ac:	d007      	beq.n	80020be <FusionAhrsSetSettings+0x3a>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80020b4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80021e8 <FusionAhrsSetSettings+0x164>
 80020b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020bc:	e001      	b.n	80020c2 <FusionAhrsSetSettings+0x3e>
 80020be:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80021ec <FusionAhrsSetSettings+0x168>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80020ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d01b      	beq.n	8002110 <FusionAhrsSetSettings+0x8c>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	edd3 7a03 	vldr	s15, [r3, #12]
 80020de:	eeb0 0a67 	vmov.f32	s0, s15
 80020e2:	f7ff fa47 	bl	8001574 <FusionDegreesToRadians>
 80020e6:	eef0 7a40 	vmov.f32	s15, s0
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	f016 fa07 	bl	8018500 <sinf>
 80020f2:	eef0 7a40 	vmov.f32	s15, s0
 80020f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002102:	eeb0 0a67 	vmov.f32	s0, s15
 8002106:	f016 f957 	bl	80183b8 <powf>
 800210a:	eef0 7a40 	vmov.f32	s15, s0
 800210e:	e001      	b.n	8002114 <FusionAhrsSetSettings+0x90>
 8002110:	eddf 7a36 	vldr	s15, [pc, #216]	; 80021ec <FusionAhrsSetSettings+0x168>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002120:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d01b      	beq.n	8002162 <FusionAhrsSetSettings+0xde>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002130:	eeb0 0a67 	vmov.f32	s0, s15
 8002134:	f7ff fa1e 	bl	8001574 <FusionDegreesToRadians>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	f016 f9de 	bl	8018500 <sinf>
 8002144:	eef0 7a40 	vmov.f32	s15, s0
 8002148:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800214c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002150:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	f016 f92e 	bl	80183b8 <powf>
 800215c:	eef0 7a40 	vmov.f32	s15, s0
 8002160:	e001      	b.n	8002166 <FusionAhrsSetSettings+0xe2>
 8002162:	eddf 7a22 	vldr	s15, [pc, #136]	; 80021ec <FusionAhrsSetSettings+0x168>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	461a      	mov	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	edd3 7a01 	vldr	s15, [r3, #4]
 800218e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	d003      	beq.n	80021a0 <FusionAhrsSetSettings+0x11c>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <FusionAhrsSetSettings+0x16c>)
 80021a4:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <FusionAhrsSetSettings+0x16c>)
 80021aa:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021b2:	f083 0301 	eor.w	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80021ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80021d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	3f7ae148 	.word	0x3f7ae148
 80021ec:	7f7fffff 	.word	0x7f7fffff
 80021f0:	7f7fffff 	.word	0x7f7fffff

080021f4 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b0bf      	sub	sp, #252	; 0xfc
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80021fc:	eeb0 5a61 	vmov.f32	s10, s3
 8002200:	eef0 5a42 	vmov.f32	s11, s4
 8002204:	eeb0 6a62 	vmov.f32	s12, s5
 8002208:	eef0 6a43 	vmov.f32	s13, s6
 800220c:	eeb0 7a63 	vmov.f32	s14, s7
 8002210:	eef0 7a44 	vmov.f32	s15, s8
 8002214:	edc7 4a01 	vstr	s9, [r7, #4]
 8002218:	ed87 0a08 	vstr	s0, [r7, #32]
 800221c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002220:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002224:	ed87 5a05 	vstr	s10, [r7, #20]
 8002228:	edc7 5a06 	vstr	s11, [r7, #24]
 800222c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002230:	edc7 6a02 	vstr	s13, [r7, #8]
 8002234:	ed87 7a03 	vstr	s14, [r7, #12]
 8002238:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223e:	3328      	adds	r3, #40	; 0x28
 8002240:	f107 0214 	add.w	r2, r7, #20
 8002244:	ca07      	ldmia	r2, {r0, r1, r2}
 8002246:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800224a:	edd7 7a08 	vldr	s15, [r7, #32]
 800224e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	edd3 7a02 	vldr	s15, [r3, #8]
 8002258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	dc17      	bgt.n	8002292 <FusionAhrsUpdate+0x9e>
 8002262:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002266:	eeb0 7ae7 	vabs.f32	s14, s15
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	dc0b      	bgt.n	8002292 <FusionAhrsUpdate+0x9e>
 800227a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800227e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	edd3 7a02 	vldr	s15, [r3, #8]
 8002288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	dd15      	ble.n	80022be <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002298:	3318      	adds	r3, #24
 800229a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 80022a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022a2:	f7ff fe8b 	bl	8001fbc <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	f103 0418 	add.w	r4, r3, #24
 80022ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02d      	beq.n	8002324 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80022d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d407      	bmi.n	800230c <FusionAhrsUpdate+0x118>
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002302:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	d10b      	bne.n	8002324 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8002324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002326:	f000 faf4 	bl	8002912 <HalfGravity>
 800232a:	eef0 6a40 	vmov.f32	s13, s0
 800232e:	eeb0 7a60 	vmov.f32	s14, s1
 8002332:	eef0 7a41 	vmov.f32	s15, s2
 8002336:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800233a:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800233e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	2201      	movs	r2, #1
 800235e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 8002362:	edd7 6a05 	vldr	s13, [r7, #20]
 8002366:	ed97 7a06 	vldr	s14, [r7, #24]
 800236a:	edd7 7a07 	vldr	s15, [r7, #28]
 800236e:	eeb0 0a66 	vmov.f32	s0, s13
 8002372:	eef0 0a47 	vmov.f32	s1, s14
 8002376:	eeb0 1a67 	vmov.f32	s2, s15
 800237a:	f7ff f93f 	bl	80015fc <FusionVectorIsZero>
 800237e:	4603      	mov	r3, r0
 8002380:	f083 0301 	eor.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 809c 	beq.w	80024c4 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800238c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002390:	ed97 7a06 	vldr	s14, [r7, #24]
 8002394:	edd7 7a07 	vldr	s15, [r7, #28]
 8002398:	eeb0 0a66 	vmov.f32	s0, s13
 800239c:	eef0 0a47 	vmov.f32	s1, s14
 80023a0:	eeb0 1a67 	vmov.f32	s2, s15
 80023a4:	f7ff fb60 	bl	8001a68 <FusionVectorNormalise>
 80023a8:	eef0 6a40 	vmov.f32	s13, s0
 80023ac:	eeb0 7a60 	vmov.f32	s14, s1
 80023b0:	eef0 7a41 	vmov.f32	s15, s2
 80023b4:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 80023b8:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80023bc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80023c0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80023c2:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80023c6:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80023ca:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80023ce:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80023d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80023d6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80023da:	eef0 1a45 	vmov.f32	s3, s10
 80023de:	eeb0 2a65 	vmov.f32	s4, s11
 80023e2:	eef0 2a46 	vmov.f32	s5, s12
 80023e6:	eeb0 0a66 	vmov.f32	s0, s13
 80023ea:	eef0 0a47 	vmov.f32	s1, s14
 80023ee:	eeb0 1a67 	vmov.f32	s2, s15
 80023f2:	f000 fc55 	bl	8002ca0 <Feedback>
 80023f6:	eef0 6a40 	vmov.f32	s13, s0
 80023fa:	eeb0 7a60 	vmov.f32	s14, s1
 80023fe:	eef0 7a41 	vmov.f32	s15, s2
 8002402:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 8002406:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800240a:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002414:	2b00      	cmp	r3, #0
 8002416:	d118      	bne.n	800244a <FusionAhrsUpdate+0x256>
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800241e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002422:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002426:	eeb0 0a66 	vmov.f32	s0, s13
 800242a:	eef0 0a47 	vmov.f32	s1, s14
 800242e:	eeb0 1a67 	vmov.f32	s2, s15
 8002432:	f7ff facf 	bl	80019d4 <FusionVectorMagnitudeSquared>
 8002436:	eeb0 7a40 	vmov.f32	s14, s0
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d80a      	bhi.n	8002460 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2200      	movs	r2, #0
 800244e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	f1a3 0209 	sub.w	r2, r3, #9
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	661a      	str	r2, [r3, #96]	; 0x60
 800245e:	e004      	b.n	800246a <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002472:	429a      	cmp	r2, r3
 8002474:	dd07      	ble.n	8002486 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2200      	movs	r2, #0
 800247a:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	2200      	movs	r2, #0
 8002480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002484:	e004      	b.n	8002490 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	461a      	mov	r2, r3
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	461a      	mov	r2, r3
 800249a:	2100      	movs	r1, #0
 800249c:	f000 fcb5 	bl	8002e0a <Clamp>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 80024b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024bc:	3244      	adds	r2, #68	; 0x44
 80024be:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	673b      	str	r3, [r7, #112]	; 0x70
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	677b      	str	r3, [r7, #116]	; 0x74
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 80024de:	edd7 6a02 	vldr	s13, [r7, #8]
 80024e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80024e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ea:	eeb0 0a66 	vmov.f32	s0, s13
 80024ee:	eef0 0a47 	vmov.f32	s1, s14
 80024f2:	eeb0 1a67 	vmov.f32	s2, s15
 80024f6:	f7ff f881 	bl	80015fc <FusionVectorIsZero>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80d1 	beq.w	80026aa <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8002508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800250a:	f000 fabf 	bl	8002a8c <HalfMagnetic>
 800250e:	eef0 6a40 	vmov.f32	s13, s0
 8002512:	eeb0 7a60 	vmov.f32	s14, s1
 8002516:	eef0 7a41 	vmov.f32	s15, s2
 800251a:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800251e:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002522:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8002526:	ed97 5a02 	vldr	s10, [r7, #8]
 800252a:	edd7 5a03 	vldr	s11, [r7, #12]
 800252e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002532:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002536:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800253a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800253e:	eef0 1a45 	vmov.f32	s3, s10
 8002542:	eeb0 2a65 	vmov.f32	s4, s11
 8002546:	eef0 2a46 	vmov.f32	s5, s12
 800254a:	eeb0 0a66 	vmov.f32	s0, s13
 800254e:	eef0 0a47 	vmov.f32	s1, s14
 8002552:	eeb0 1a67 	vmov.f32	s2, s15
 8002556:	f7ff f981 	bl	800185c <FusionVectorCrossProduct>
 800255a:	eef0 6a40 	vmov.f32	s13, s0
 800255e:	eeb0 7a60 	vmov.f32	s14, s1
 8002562:	eef0 7a41 	vmov.f32	s15, s2
 8002566:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800256a:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800256e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002572:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002576:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800257a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800257e:	eeb0 0a66 	vmov.f32	s0, s13
 8002582:	eef0 0a47 	vmov.f32	s1, s14
 8002586:	eeb0 1a67 	vmov.f32	s2, s15
 800258a:	f7ff fa6d 	bl	8001a68 <FusionVectorNormalise>
 800258e:	eef0 6a40 	vmov.f32	s13, s0
 8002592:	eeb0 7a60 	vmov.f32	s14, s1
 8002596:	eef0 7a41 	vmov.f32	s15, s2
 800259a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800259e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80025a2:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80025a6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80025a8:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80025ac:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80025b0:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80025b4:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80025b8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80025bc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80025c0:	eef0 1a45 	vmov.f32	s3, s10
 80025c4:	eeb0 2a65 	vmov.f32	s4, s11
 80025c8:	eef0 2a46 	vmov.f32	s5, s12
 80025cc:	eeb0 0a66 	vmov.f32	s0, s13
 80025d0:	eef0 0a47 	vmov.f32	s1, s14
 80025d4:	eeb0 1a67 	vmov.f32	s2, s15
 80025d8:	f000 fb62 	bl	8002ca0 <Feedback>
 80025dc:	eef0 6a40 	vmov.f32	s13, s0
 80025e0:	eeb0 7a60 	vmov.f32	s14, s1
 80025e4:	eef0 7a41 	vmov.f32	s15, s2
 80025e8:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 80025ec:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 80025f0:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <FusionAhrsUpdate+0x43c>
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002604:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002608:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800260c:	eeb0 0a66 	vmov.f32	s0, s13
 8002610:	eef0 0a47 	vmov.f32	s1, s14
 8002614:	eeb0 1a67 	vmov.f32	s2, s15
 8002618:	f7ff f9dc 	bl	80019d4 <FusionVectorMagnitudeSquared>
 800261c:	eeb0 7a40 	vmov.f32	s14, s0
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	edd3 7a04 	vldr	s15, [r3, #16]
 8002626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262e:	d80a      	bhi.n	8002646 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263c:	f1a3 0209 	sub.w	r2, r3, #9
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	66da      	str	r2, [r3, #108]	; 0x6c
 8002644:	e004      	b.n	8002650 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	429a      	cmp	r2, r3
 800265a:	dd07      	ble.n	800266c <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	2200      	movs	r2, #0
 8002660:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800266a:	e004      	b.n	8002676 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	461a      	mov	r2, r3
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	461a      	mov	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	f000 fbc2 	bl	8002e0a <Clamp>
 8002686:	4602      	mov	r2, r0
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026a2:	3250      	adds	r2, #80	; 0x50
 80026a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 80026aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80026ae:	f7fe ff61 	bl	8001574 <FusionDegreesToRadians>
 80026b2:	eeb0 6a40 	vmov.f32	s12, s0
 80026b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80026ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026c2:	eef0 1a46 	vmov.f32	s3, s12
 80026c6:	eeb0 0a66 	vmov.f32	s0, s13
 80026ca:	eef0 0a47 	vmov.f32	s1, s14
 80026ce:	eeb0 1a67 	vmov.f32	s2, s15
 80026d2:	f7ff f831 	bl	8001738 <FusionVectorMultiplyScalar>
 80026d6:	eef0 6a40 	vmov.f32	s13, s0
 80026da:	eeb0 7a60 	vmov.f32	s14, s1
 80026de:	eef0 7a41 	vmov.f32	s15, s2
 80026e2:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80026e6:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80026ea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80026ee:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80026f2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80026f6:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80026fa:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80026fe:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002702:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002706:	eef0 1a45 	vmov.f32	s3, s10
 800270a:	eeb0 2a65 	vmov.f32	s4, s11
 800270e:	eef0 2a46 	vmov.f32	s5, s12
 8002712:	eeb0 0a66 	vmov.f32	s0, s13
 8002716:	eef0 0a47 	vmov.f32	s1, s14
 800271a:	eeb0 1a67 	vmov.f32	s2, s15
 800271e:	f7fe ff9d 	bl	800165c <FusionVectorAdd>
 8002722:	eef0 6a40 	vmov.f32	s13, s0
 8002726:	eeb0 7a60 	vmov.f32	s14, s1
 800272a:	eef0 7a41 	vmov.f32	s15, s2
 800272e:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002732:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 8002736:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8002740:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002744:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002748:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800274c:	eef0 1a46 	vmov.f32	s3, s12
 8002750:	eeb0 0a66 	vmov.f32	s0, s13
 8002754:	eef0 0a47 	vmov.f32	s1, s14
 8002758:	eeb0 1a67 	vmov.f32	s2, s15
 800275c:	f7fe ffec 	bl	8001738 <FusionVectorMultiplyScalar>
 8002760:	eef0 6a40 	vmov.f32	s13, s0
 8002764:	eeb0 7a60 	vmov.f32	s14, s1
 8002768:	eef0 7a41 	vmov.f32	s15, s2
 800276c:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002770:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002774:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8002778:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800277c:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002780:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002784:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002788:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800278c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002790:	eef0 1a45 	vmov.f32	s3, s10
 8002794:	eeb0 2a65 	vmov.f32	s4, s11
 8002798:	eef0 2a46 	vmov.f32	s5, s12
 800279c:	eeb0 0a66 	vmov.f32	s0, s13
 80027a0:	eef0 0a47 	vmov.f32	s1, s14
 80027a4:	eeb0 1a67 	vmov.f32	s2, s15
 80027a8:	f7fe ff58 	bl	800165c <FusionVectorAdd>
 80027ac:	eef0 6a40 	vmov.f32	s13, s0
 80027b0:	eeb0 7a60 	vmov.f32	s14, s1
 80027b4:	eef0 7a41 	vmov.f32	s15, s2
 80027b8:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 80027bc:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80027c0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 80027c4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80027c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80027cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80027d0:	edd7 1a01 	vldr	s3, [r7, #4]
 80027d4:	eeb0 0a66 	vmov.f32	s0, s13
 80027d8:	eef0 0a47 	vmov.f32	s1, s14
 80027dc:	eeb0 1a67 	vmov.f32	s2, s15
 80027e0:	f7fe ffaa 	bl	8001738 <FusionVectorMultiplyScalar>
 80027e4:	eef0 6a40 	vmov.f32	s13, s0
 80027e8:	eeb0 7a60 	vmov.f32	s14, s1
 80027ec:	eef0 7a41 	vmov.f32	s15, s2
 80027f0:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80027f4:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80027f8:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80027fc:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8002800:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8002804:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	ed93 6a06 	vldr	s12, [r3, #24]
 800280e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002812:	ed93 7a08 	vldr	s14, [r3, #32]
 8002816:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800281a:	eeb0 2a64 	vmov.f32	s4, s9
 800281e:	eef0 2a45 	vmov.f32	s5, s10
 8002822:	eeb0 3a65 	vmov.f32	s6, s11
 8002826:	eeb0 0a46 	vmov.f32	s0, s12
 800282a:	eef0 0a66 	vmov.f32	s1, s13
 800282e:	eeb0 1a47 	vmov.f32	s2, s14
 8002832:	eef0 1a67 	vmov.f32	s3, s15
 8002836:	f7ff fa8e 	bl	8001d56 <FusionQuaternionMultiplyVector>
 800283a:	eeb0 6a40 	vmov.f32	s12, s0
 800283e:	eef0 6a60 	vmov.f32	s13, s1
 8002842:	eeb0 7a41 	vmov.f32	s14, s2
 8002846:	eef0 7a61 	vmov.f32	s15, s3
 800284a:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800284e:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002852:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002856:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800285a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800285c:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002860:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002864:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002868:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286e:	ed93 6a06 	vldr	s12, [r3, #24]
 8002872:	edd3 6a07 	vldr	s13, [r3, #28]
 8002876:	ed93 7a08 	vldr	s14, [r3, #32]
 800287a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800287e:	eeb0 2a44 	vmov.f32	s4, s8
 8002882:	eef0 2a64 	vmov.f32	s5, s9
 8002886:	eeb0 3a45 	vmov.f32	s6, s10
 800288a:	eef0 3a65 	vmov.f32	s7, s11
 800288e:	eeb0 0a46 	vmov.f32	s0, s12
 8002892:	eef0 0a66 	vmov.f32	s1, s13
 8002896:	eeb0 1a47 	vmov.f32	s2, s14
 800289a:	eef0 1a67 	vmov.f32	s3, s15
 800289e:	f7ff f936 	bl	8001b0e <FusionQuaternionAdd>
 80028a2:	eeb0 6a40 	vmov.f32	s12, s0
 80028a6:	eef0 6a60 	vmov.f32	s13, s1
 80028aa:	eeb0 7a41 	vmov.f32	s14, s2
 80028ae:	eef0 7a61 	vmov.f32	s15, s3
 80028b2:	ed84 6a06 	vstr	s12, [r4, #24]
 80028b6:	edc4 6a07 	vstr	s13, [r4, #28]
 80028ba:	ed84 7a08 	vstr	s14, [r4, #32]
 80028be:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 80028c2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	ed93 6a06 	vldr	s12, [r3, #24]
 80028ca:	edd3 6a07 	vldr	s13, [r3, #28]
 80028ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80028d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80028d6:	eeb0 0a46 	vmov.f32	s0, s12
 80028da:	eef0 0a66 	vmov.f32	s1, s13
 80028de:	eeb0 1a47 	vmov.f32	s2, s14
 80028e2:	eef0 1a67 	vmov.f32	s3, s15
 80028e6:	f7ff fad6 	bl	8001e96 <FusionQuaternionNormalise>
 80028ea:	eeb0 6a40 	vmov.f32	s12, s0
 80028ee:	eef0 6a60 	vmov.f32	s13, s1
 80028f2:	eeb0 7a41 	vmov.f32	s14, s2
 80028f6:	eef0 7a61 	vmov.f32	s15, s3
 80028fa:	ed84 6a06 	vstr	s12, [r4, #24]
 80028fe:	edc4 6a07 	vstr	s13, [r4, #28]
 8002902:	ed84 7a08 	vstr	s14, [r4, #32]
 8002906:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800290a:	bf00      	nop
 800290c:	37fc      	adds	r7, #252	; 0xfc
 800290e:	46bd      	mov	sp, r7
 8002910:	bd90      	pop	{r4, r7, pc}

08002912 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002912:	b480      	push	{r7}
 8002914:	b093      	sub	sp, #76	; 0x4c
 8002916:	af00      	add	r7, sp, #0
 8002918:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	dc02      	bgt.n	8002928 <HalfGravity+0x16>
 8002922:	2b00      	cmp	r3, #0
 8002924:	da03      	bge.n	800292e <HalfGravity+0x1c>
 8002926:	e094      	b.n	8002a52 <HalfGravity+0x140>
 8002928:	2b02      	cmp	r3, #2
 800292a:	d048      	beq.n	80029be <HalfGravity+0xac>
 800292c:	e091      	b.n	8002a52 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	ed93 7a07 	vldr	s14, [r3, #28]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	edd3 6a06 	vldr	s13, [r3, #24]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	edd3 7a08 	vldr	s15, [r3, #32]
 800294a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002952:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	ed93 7a08 	vldr	s14, [r3, #32]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	edd3 6a06 	vldr	s13, [r3, #24]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800297a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	ed93 7a06 	vldr	s14, [r3, #24]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	edd3 7a06 	vldr	s15, [r3, #24]
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002992:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 80029ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80029b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029bc:	e052      	b.n	8002a64 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	edd3 6a07 	vldr	s13, [r3, #28]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029de:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029e2:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002a0e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002a3e:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002a42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a46:	f107 0218 	add.w	r2, r7, #24
 8002a4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a50:	e008      	b.n	8002a64 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002a64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	ee06 1a90 	vmov	s13, r1
 8002a6e:	ee07 2a10 	vmov	s14, r2
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eeb0 0a66 	vmov.f32	s0, s13
 8002a7a:	eef0 0a47 	vmov.f32	s1, s14
 8002a7e:	eeb0 1a67 	vmov.f32	s2, s15
 8002a82:	374c      	adds	r7, #76	; 0x4c
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b097      	sub	sp, #92	; 0x5c
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f000 809a 	beq.w	8002bd2 <HalfMagnetic+0x146>
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	f300 80e1 	bgt.w	8002c66 <HalfMagnetic+0x1da>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HalfMagnetic+0x22>
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d048      	beq.n	8002b3e <HalfMagnetic+0xb2>
 8002aac:	e0db      	b.n	8002c66 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ace:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ad2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	edd3 6a08 	vldr	s13, [r3, #32]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b02:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b26:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b2a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b3c:	e09c      	b.n	8002c78 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b66:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b92:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002bc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bd0:	e052      	b.n	8002c78 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c26:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002c2a:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002c52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c5a:	f107 021c 	add.w	r2, r7, #28
 8002c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c64:	e008      	b.n	8002c78 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	653b      	str	r3, [r7, #80]	; 0x50
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002c78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	ee06 1a90 	vmov	s13, r1
 8002c82:	ee07 2a10 	vmov	s14, r2
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c8e:	eef0 0a47 	vmov.f32	s1, s14
 8002c92:	eeb0 1a67 	vmov.f32	s2, s15
 8002c96:	375c      	adds	r7, #92	; 0x5c
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b090      	sub	sp, #64	; 0x40
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	eeb0 5a40 	vmov.f32	s10, s0
 8002caa:	eef0 5a60 	vmov.f32	s11, s1
 8002cae:	eeb0 6a41 	vmov.f32	s12, s2
 8002cb2:	eef0 6a61 	vmov.f32	s13, s3
 8002cb6:	eeb0 7a42 	vmov.f32	s14, s4
 8002cba:	eef0 7a62 	vmov.f32	s15, s5
 8002cbe:	ed87 5a07 	vstr	s10, [r7, #28]
 8002cc2:	edc7 5a08 	vstr	s11, [r7, #32]
 8002cc6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002cca:	edc7 6a04 	vstr	s13, [r7, #16]
 8002cce:	ed87 7a05 	vstr	s14, [r7, #20]
 8002cd2:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 8002cd6:	ed97 5a04 	vldr	s10, [r7, #16]
 8002cda:	edd7 5a05 	vldr	s11, [r7, #20]
 8002cde:	ed97 6a06 	vldr	s12, [r7, #24]
 8002ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ce6:	ed97 7a08 	vldr	s14, [r7, #32]
 8002cea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cee:	eef0 1a45 	vmov.f32	s3, s10
 8002cf2:	eeb0 2a65 	vmov.f32	s4, s11
 8002cf6:	eef0 2a46 	vmov.f32	s5, s12
 8002cfa:	eeb0 0a66 	vmov.f32	s0, s13
 8002cfe:	eef0 0a47 	vmov.f32	s1, s14
 8002d02:	eeb0 1a67 	vmov.f32	s2, s15
 8002d06:	f7fe fe0f 	bl	8001928 <FusionVectorDotProduct>
 8002d0a:	eef0 7a40 	vmov.f32	s15, s0
 8002d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	d540      	bpl.n	8002d9a <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 8002d18:	ed97 5a04 	vldr	s10, [r7, #16]
 8002d1c:	edd7 5a05 	vldr	s11, [r7, #20]
 8002d20:	ed97 6a06 	vldr	s12, [r7, #24]
 8002d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d28:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d30:	eef0 1a45 	vmov.f32	s3, s10
 8002d34:	eeb0 2a65 	vmov.f32	s4, s11
 8002d38:	eef0 2a46 	vmov.f32	s5, s12
 8002d3c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d40:	eef0 0a47 	vmov.f32	s1, s14
 8002d44:	eeb0 1a67 	vmov.f32	s2, s15
 8002d48:	f7fe fd88 	bl	800185c <FusionVectorCrossProduct>
 8002d4c:	eef0 6a40 	vmov.f32	s13, s0
 8002d50:	eeb0 7a60 	vmov.f32	s14, s1
 8002d54:	eef0 7a41 	vmov.f32	s15, s2
 8002d58:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8002d5c:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8002d60:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8002d64:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002d68:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002d6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d70:	eeb0 0a66 	vmov.f32	s0, s13
 8002d74:	eef0 0a47 	vmov.f32	s1, s14
 8002d78:	eeb0 1a67 	vmov.f32	s2, s15
 8002d7c:	f7fe fe74 	bl	8001a68 <FusionVectorNormalise>
 8002d80:	eef0 6a40 	vmov.f32	s13, s0
 8002d84:	eeb0 7a60 	vmov.f32	s14, s1
 8002d88:	eef0 7a41 	vmov.f32	s15, s2
 8002d8c:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8002d90:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8002d94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002d98:	e025      	b.n	8002de6 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 8002d9a:	ed97 5a04 	vldr	s10, [r7, #16]
 8002d9e:	edd7 5a05 	vldr	s11, [r7, #20]
 8002da2:	ed97 6a06 	vldr	s12, [r7, #24]
 8002da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002daa:	ed97 7a08 	vldr	s14, [r7, #32]
 8002dae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002db2:	eef0 1a45 	vmov.f32	s3, s10
 8002db6:	eeb0 2a65 	vmov.f32	s4, s11
 8002dba:	eef0 2a46 	vmov.f32	s5, s12
 8002dbe:	eeb0 0a66 	vmov.f32	s0, s13
 8002dc2:	eef0 0a47 	vmov.f32	s1, s14
 8002dc6:	eeb0 1a67 	vmov.f32	s2, s15
 8002dca:	f7fe fd47 	bl	800185c <FusionVectorCrossProduct>
 8002dce:	eef0 6a40 	vmov.f32	s13, s0
 8002dd2:	eeb0 7a60 	vmov.f32	s14, s1
 8002dd6:	eef0 7a41 	vmov.f32	s15, s2
 8002dda:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8002dde:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8002de2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 8002de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	ee06 1a90 	vmov	s13, r1
 8002df0:	ee07 2a10 	vmov	s14, r2
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eeb0 0a66 	vmov.f32	s0, s13
 8002dfc:	eef0 0a47 	vmov.f32	s1, s14
 8002e00:	eeb0 1a67 	vmov.f32	s2, s15
 8002e04:	3740      	adds	r7, #64	; 0x40
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	da01      	bge.n	8002e22 <Clamp+0x18>
        return min;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	e006      	b.n	8002e30 <Clamp+0x26>
    }
    if (value > max) {
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	dd01      	ble.n	8002e2e <Clamp+0x24>
        return max;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	e000      	b.n	8002e30 <Clamp+0x26>
    }
    return value;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	61f8      	str	r0, [r7, #28]
 8002e44:	eeb0 5a40 	vmov.f32	s10, s0
 8002e48:	eef0 5a60 	vmov.f32	s11, s1
 8002e4c:	eeb0 6a41 	vmov.f32	s12, s2
 8002e50:	eef0 6a61 	vmov.f32	s13, s3
 8002e54:	eeb0 7a42 	vmov.f32	s14, s4
 8002e58:	eef0 7a62 	vmov.f32	s15, s5
 8002e5c:	ed87 3a00 	vstr	s6, [r7]
 8002e60:	ed87 5a04 	vstr	s10, [r7, #16]
 8002e64:	edc7 5a05 	vstr	s11, [r7, #20]
 8002e68:	ed87 6a06 	vstr	s12, [r7, #24]
 8002e6c:	edc7 6a01 	vstr	s13, [r7, #4]
 8002e70:	ed87 7a02 	vstr	s14, [r7, #8]
 8002e74:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8a:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002e8e:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002e92:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002e96:	ed97 5a01 	vldr	s10, [r7, #4]
 8002e9a:	edd7 5a02 	vldr	s11, [r7, #8]
 8002e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ea2:	edd7 6a04 	vldr	s13, [r7, #16]
 8002ea6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002eae:	edd7 4a00 	vldr	s9, [r7]
 8002eb2:	eef0 1a45 	vmov.f32	s3, s10
 8002eb6:	eeb0 2a65 	vmov.f32	s4, s11
 8002eba:	eef0 2a46 	vmov.f32	s5, s12
 8002ebe:	eeb0 0a66 	vmov.f32	s0, s13
 8002ec2:	eef0 0a47 	vmov.f32	s1, s14
 8002ec6:	eeb0 1a67 	vmov.f32	s2, s15
 8002eca:	69f8      	ldr	r0, [r7, #28]
 8002ecc:	f7ff f992 	bl	80021f4 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8002eda:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002eec <FusionAhrsUpdateNoMagnetometer+0xb0>
 8002ede:	69f8      	ldr	r0, [r7, #28]
 8002ee0:	f000 f829 	bl	8002f36 <FusionAhrsSetHeading>
    }
}
 8002ee4:	bf00      	nop
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	00000000 	.word	0x00000000

08002ef0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002ef0:	b490      	push	{r4, r7}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f107 0418 	add.w	r4, r7, #24
 8002efe:	3318      	adds	r3, #24
 8002f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f06:	69b8      	ldr	r0, [r7, #24]
 8002f08:	69f9      	ldr	r1, [r7, #28]
 8002f0a:	6a3a      	ldr	r2, [r7, #32]
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	ee06 0a10 	vmov	s12, r0
 8002f12:	ee06 1a90 	vmov	s13, r1
 8002f16:	ee07 2a10 	vmov	s14, r2
 8002f1a:	ee07 3a90 	vmov	s15, r3
}
 8002f1e:	eeb0 0a46 	vmov.f32	s0, s12
 8002f22:	eef0 0a66 	vmov.f32	s1, s13
 8002f26:	eeb0 1a47 	vmov.f32	s2, s14
 8002f2a:	eef0 1a67 	vmov.f32	s3, s15
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc90      	pop	{r4, r7}
 8002f34:	4770      	bx	lr

08002f36 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b089      	sub	sp, #36	; 0x24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	edd3 6a07 	vldr	s13, [r3, #28]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f62:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f92:	eef0 0a67 	vmov.f32	s1, s15
 8002f96:	eeb0 0a46 	vmov.f32	s0, s12
 8002f9a:	f015 fa0b 	bl	80183b4 <atan2f>
 8002f9e:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002fa2:	ed97 0a00 	vldr	s0, [r7]
 8002fa6:	f7fe fae5 	bl	8001574 <FusionDegreesToRadians>
 8002faa:	eeb0 7a40 	vmov.f32	s14, s0
 8002fae:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fbe:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002fc2:	ed97 0a06 	vldr	s0, [r7, #24]
 8002fc6:	f015 fa4f 	bl	8018468 <cosf>
 8002fca:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002fce:	edc7 7a02 	vstr	s15, [r7, #8]
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002fde:	ed97 0a06 	vldr	s0, [r7, #24]
 8002fe2:	f015 fa8d 	bl	8018500 <sinf>
 8002fe6:	eef0 7a40 	vmov.f32	s15, s0
 8002fea:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002fee:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002ff2:	687c      	ldr	r4, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	ed93 4a06 	vldr	s8, [r3, #24]
 8002ffa:	edd3 4a07 	vldr	s9, [r3, #28]
 8002ffe:	ed93 5a08 	vldr	s10, [r3, #32]
 8003002:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8003006:	ed97 6a02 	vldr	s12, [r7, #8]
 800300a:	edd7 6a03 	vldr	s13, [r7, #12]
 800300e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003012:	edd7 7a05 	vldr	s15, [r7, #20]
 8003016:	eeb0 2a44 	vmov.f32	s4, s8
 800301a:	eef0 2a64 	vmov.f32	s5, s9
 800301e:	eeb0 3a45 	vmov.f32	s6, s10
 8003022:	eef0 3a65 	vmov.f32	s7, s11
 8003026:	eeb0 0a46 	vmov.f32	s0, s12
 800302a:	eef0 0a66 	vmov.f32	s1, s13
 800302e:	eeb0 1a47 	vmov.f32	s2, s14
 8003032:	eef0 1a67 	vmov.f32	s3, s15
 8003036:	f7fe fdcc 	bl	8001bd2 <FusionQuaternionMultiply>
 800303a:	eeb0 6a40 	vmov.f32	s12, s0
 800303e:	eef0 6a60 	vmov.f32	s13, s1
 8003042:	eeb0 7a41 	vmov.f32	s14, s2
 8003046:	eef0 7a61 	vmov.f32	s15, s3
 800304a:	ed84 6a06 	vstr	s12, [r4, #24]
 800304e:	edc4 6a07 	vstr	s13, [r4, #28]
 8003052:	ed84 7a08 	vstr	s14, [r4, #32]
 8003056:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800305a:	bf00      	nop
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}

08003062 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8003062:	b480      	push	{r7}
 8003064:	b091      	sub	sp, #68	; 0x44
 8003066:	af00      	add	r7, sp, #0
 8003068:	eeb0 5a40 	vmov.f32	s10, s0
 800306c:	eef0 5a60 	vmov.f32	s11, s1
 8003070:	eeb0 6a41 	vmov.f32	s12, s2
 8003074:	eef0 6a61 	vmov.f32	s13, s3
 8003078:	eeb0 7a42 	vmov.f32	s14, s4
 800307c:	eef0 7a62 	vmov.f32	s15, s5
 8003080:	ed87 5a07 	vstr	s10, [r7, #28]
 8003084:	edc7 5a08 	vstr	s11, [r7, #32]
 8003088:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800308c:	edc7 6a04 	vstr	s13, [r7, #16]
 8003090:	ed87 7a05 	vstr	s14, [r7, #20]
 8003094:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8003098:	ed97 7a07 	vldr	s14, [r7, #28]
 800309c:	edd7 7a04 	vldr	s15, [r7, #16]
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80030a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80030ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80030b0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80030b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80030c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80030d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	ee06 1a90 	vmov	s13, r1
 80030e0:	ee07 2a10 	vmov	s14, r2
 80030e4:	ee07 3a90 	vmov	s15, r3
}
 80030e8:	eeb0 0a66 	vmov.f32	s0, s13
 80030ec:	eef0 0a47 	vmov.f32	s1, s14
 80030f0:	eeb0 1a67 	vmov.f32	s2, s15
 80030f4:	3744      	adds	r7, #68	; 0x44
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80030fe:	b480      	push	{r7}
 8003100:	b091      	sub	sp, #68	; 0x44
 8003102:	af00      	add	r7, sp, #0
 8003104:	eeb0 5a40 	vmov.f32	s10, s0
 8003108:	eef0 5a60 	vmov.f32	s11, s1
 800310c:	eeb0 6a41 	vmov.f32	s12, s2
 8003110:	eef0 6a61 	vmov.f32	s13, s3
 8003114:	eeb0 7a42 	vmov.f32	s14, s4
 8003118:	eef0 7a62 	vmov.f32	s15, s5
 800311c:	ed87 5a07 	vstr	s10, [r7, #28]
 8003120:	edc7 5a08 	vstr	s11, [r7, #32]
 8003124:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003128:	edc7 6a04 	vstr	s13, [r7, #16]
 800312c:	ed87 7a05 	vstr	s14, [r7, #20]
 8003130:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 8003134:	ed97 7a07 	vldr	s14, [r7, #28]
 8003138:	edd7 7a04 	vldr	s15, [r7, #16]
 800313c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003140:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8003144:	ed97 7a08 	vldr	s14, [r7, #32]
 8003148:	edd7 7a05 	vldr	s15, [r7, #20]
 800314c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003150:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8003154:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003158:	edd7 7a06 	vldr	s15, [r7, #24]
 800315c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003160:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003164:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003168:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800316c:	ca07      	ldmia	r2, {r0, r1, r2}
 800316e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003172:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003178:	ee06 1a90 	vmov	s13, r1
 800317c:	ee07 2a10 	vmov	s14, r2
 8003180:	ee07 3a90 	vmov	s15, r3
}
 8003184:	eeb0 0a66 	vmov.f32	s0, s13
 8003188:	eef0 0a47 	vmov.f32	s1, s14
 800318c:	eeb0 1a67 	vmov.f32	s2, s15
 8003190:	3744      	adds	r7, #68	; 0x44
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800319a:	b480      	push	{r7}
 800319c:	b08f      	sub	sp, #60	; 0x3c
 800319e:	af00      	add	r7, sp, #0
 80031a0:	eef0 6a40 	vmov.f32	s13, s0
 80031a4:	eeb0 7a60 	vmov.f32	s14, s1
 80031a8:	eef0 7a41 	vmov.f32	s15, s2
 80031ac:	edc7 1a04 	vstr	s3, [r7, #16]
 80031b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80031b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80031b8:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80031bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80031c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80031c4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80031c8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80031cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80031d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80031d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80031dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80031e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80031e4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80031e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80031ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f0:	f107 0220 	add.w	r2, r7, #32
 80031f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80031f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	ee06 1a90 	vmov	s13, r1
 8003204:	ee07 2a10 	vmov	s14, r2
 8003208:	ee07 3a90 	vmov	s15, r3
}
 800320c:	eeb0 0a66 	vmov.f32	s0, s13
 8003210:	eef0 0a47 	vmov.f32	s1, s14
 8003214:	eeb0 1a67 	vmov.f32	s2, s15
 8003218:	373c      	adds	r7, #60	; 0x3c
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800323c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003240:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003284 <FusionOffsetInitialise+0x60>
 8003244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	3e00adfd 	.word	0x3e00adfd

08003288 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b08f      	sub	sp, #60	; 0x3c
 800328c:	af00      	add	r7, sp, #0
 800328e:	61f8      	str	r0, [r7, #28]
 8003290:	eef0 6a40 	vmov.f32	s13, s0
 8003294:	eeb0 7a60 	vmov.f32	s14, s1
 8003298:	eef0 7a41 	vmov.f32	s15, s2
 800329c:	edc7 6a04 	vstr	s13, [r7, #16]
 80032a0:	ed87 7a05 	vstr	s14, [r7, #20]
 80032a4:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	ed93 5a03 	vldr	s10, [r3, #12]
 80032ae:	edd3 5a04 	vldr	s11, [r3, #16]
 80032b2:	ed93 6a05 	vldr	s12, [r3, #20]
 80032b6:	edd7 6a04 	vldr	s13, [r7, #16]
 80032ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80032be:	edd7 7a06 	vldr	s15, [r7, #24]
 80032c2:	eef0 1a45 	vmov.f32	s3, s10
 80032c6:	eeb0 2a65 	vmov.f32	s4, s11
 80032ca:	eef0 2a46 	vmov.f32	s5, s12
 80032ce:	eeb0 0a66 	vmov.f32	s0, s13
 80032d2:	eef0 0a47 	vmov.f32	s1, s14
 80032d6:	eeb0 1a67 	vmov.f32	s2, s15
 80032da:	f7ff ff10 	bl	80030fe <FusionVectorSubtract>
 80032de:	eef0 6a40 	vmov.f32	s13, s0
 80032e2:	eeb0 7a60 	vmov.f32	s14, s1
 80032e6:	eef0 7a41 	vmov.f32	s15, s2
 80032ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80032ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80032f2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 80032f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032fa:	eef0 7ae7 	vabs.f32	s15, s15
 80032fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	dc15      	bgt.n	8003338 <FusionOffsetUpdate+0xb0>
 800330c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003310:	eef0 7ae7 	vabs.f32	s15, s15
 8003314:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	dc0a      	bgt.n	8003338 <FusionOffsetUpdate+0xb0>
 8003322:	edd7 7a06 	vldr	s15, [r7, #24]
 8003326:	eef0 7ae7 	vabs.f32	s15, s15
 800332a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800332e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	dd0a      	ble.n	800334e <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
        return gyroscope;
 800333e:	f107 0320 	add.w	r3, r7, #32
 8003342:	f107 0210 	add.w	r2, r7, #16
 8003346:	ca07      	ldmia	r2, {r0, r1, r2}
 8003348:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800334c:	e060      	b.n	8003410 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	429a      	cmp	r2, r3
 8003358:	d20c      	bcs.n	8003374 <FusionOffsetUpdate+0xec>
        offset->timer++;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003364:	f107 0320 	add.w	r3, r7, #32
 8003368:	f107 0210 	add.w	r2, r7, #16
 800336c:	ca07      	ldmia	r2, {r0, r1, r2}
 800336e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003372:	e04d      	b.n	8003410 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	ed93 6a00 	vldr	s12, [r3]
 800337a:	edd7 6a04 	vldr	s13, [r7, #16]
 800337e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003382:	edd7 7a06 	vldr	s15, [r7, #24]
 8003386:	eef0 1a46 	vmov.f32	s3, s12
 800338a:	eeb0 0a66 	vmov.f32	s0, s13
 800338e:	eef0 0a47 	vmov.f32	s1, s14
 8003392:	eeb0 1a67 	vmov.f32	s2, s15
 8003396:	f7ff ff00 	bl	800319a <FusionVectorMultiplyScalar>
 800339a:	eef0 6a40 	vmov.f32	s13, s0
 800339e:	eeb0 7a60 	vmov.f32	s14, s1
 80033a2:	eef0 7a41 	vmov.f32	s15, s2
 80033a6:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80033aa:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80033ae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80033b2:	69fc      	ldr	r4, [r7, #28]
 80033b4:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 80033b8:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 80033bc:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80033c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80033ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80033ce:	eef0 1a45 	vmov.f32	s3, s10
 80033d2:	eeb0 2a65 	vmov.f32	s4, s11
 80033d6:	eef0 2a46 	vmov.f32	s5, s12
 80033da:	eeb0 0a66 	vmov.f32	s0, s13
 80033de:	eef0 0a47 	vmov.f32	s1, s14
 80033e2:	eeb0 1a67 	vmov.f32	s2, s15
 80033e6:	f7ff fe3c 	bl	8003062 <FusionVectorAdd>
 80033ea:	eef0 6a40 	vmov.f32	s13, s0
 80033ee:	eeb0 7a60 	vmov.f32	s14, s1
 80033f2:	eef0 7a41 	vmov.f32	s15, s2
 80033f6:	edc4 6a03 	vstr	s13, [r4, #12]
 80033fa:	ed84 7a04 	vstr	s14, [r4, #16]
 80033fe:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8003402:	f107 0320 	add.w	r3, r7, #32
 8003406:	f107 0210 	add.w	r2, r7, #16
 800340a:	ca07      	ldmia	r2, {r0, r1, r2}
 800340c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	ee06 1a90 	vmov	s13, r1
 800341a:	ee07 2a10 	vmov	s14, r2
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eeb0 0a66 	vmov.f32	s0, s13
 8003426:	eef0 0a47 	vmov.f32	s1, s14
 800342a:	eeb0 1a67 	vmov.f32	s2, s15
 800342e:	373c      	adds	r7, #60	; 0x3c
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}

08003434 <magneto_calculate>:
void Transpose_Square_Matrix(double*, int);

//
// *** CODE STARTS HERE ***
//
int magneto_calculate(float *buffer, uint32_t samples, FusionVector *hardiron, FusionMatrix *softiron){
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800343c:	af04      	add	r7, sp, #16
 800343e:	f507 7404 	add.w	r4, r7, #528	; 0x210
 8003442:	f5a4 74ce 	sub.w	r4, r4, #412	; 0x19c
 8003446:	6020      	str	r0, [r4, #0]
 8003448:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800344c:	f5a0 70d0 	sub.w	r0, r0, #416	; 0x1a0
 8003450:	6001      	str	r1, [r0, #0]
 8003452:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8003456:	f5a1 71d2 	sub.w	r1, r1, #420	; 0x1a4
 800345a:	600a      	str	r2, [r1, #0]
 800345c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003460:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003464:	6013      	str	r3, [r2, #0]
	int i, j, index;
	double maxval, norm, btqb, *eigen_real3, *eigen_imag3, *Dz, *vdz, *SQ, *A_1, hm, norm1, norm2, norm3;
	double x, y, z, x2, nxsrej, xs, xave;
	double *raw; //raw obs

	int nlines = samples, ngood=0;  //count measurements
 8003466:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800346a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	//
	// calculate mean (norm) and standard deviation for possible outlier rejection
	//
	xs=0;
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
	xave=0;
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
	for( i = 0; i < nlines; i++)
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003498:	e086      	b.n	80035a8 <magneto_calculate+0x174>
	{
		x=*(buffer + 3 * i + 0);
 800349a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80034ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f85e 	bl	8000578 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
		y=*(buffer + 3 * i + 1);
 80034c4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80034d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd f849 	bl	8000578 <__aeabi_f2d>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
		z=*(buffer + 3 * i + 2);
 80034ee:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	f103 0208 	add.w	r2, r3, #8
 80034fe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003502:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4413      	add	r3, r2
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f833 	bl	8000578 <__aeabi_f2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8

		//uart_printf_data("%3d %6.0f %6.0f %6.0f\r\n",i,x,y,z);
		x2 = x*x + y*y + z*z;
 800351a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800351e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8003522:	f7fd f881 	bl	8000628 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4614      	mov	r4, r2
 800352c:	461d      	mov	r5, r3
 800352e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8003532:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8003536:	f7fd f877 	bl	8000628 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4620      	mov	r0, r4
 8003540:	4629      	mov	r1, r5
 8003542:	f7fc febb 	bl	80002bc <__adddf3>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4614      	mov	r4, r2
 800354c:	461d      	mov	r5, r3
 800354e:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8003552:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8003556:	f7fd f867 	bl	8000628 <__aeabi_dmul>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fc feab 	bl	80002bc <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
		xs += x2;
 800356e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8003572:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8003576:	f7fc fea1 	bl	80002bc <__adddf3>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
		xave += sqrt(x2);
 8003582:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8003586:	f014 febd 	bl	8018304 <sqrt>
 800358a:	ec53 2b10 	vmov	r2, r3, d0
 800358e:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8003592:	f7fc fe93 	bl	80002bc <__adddf3>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
	for( i = 0; i < nlines; i++)
 800359e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80035a2:	3301      	adds	r3, #1
 80035a4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80035a8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80035ac:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80035b0:	429a      	cmp	r2, r3
 80035b2:	f6ff af72 	blt.w	800349a <magneto_calculate+0x66>
	}
	xave = xave/nlines; //mean vector length
 80035b6:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 80035ba:	f7fc ffcb 	bl	8000554 <__aeabi_i2d>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 80035c6:	f7fd f959 	bl	800087c <__aeabi_ddiv>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
	xs = sqrt(xs/nlines -(xave*xave)); //std. dev.
 80035d2:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 80035d6:	f7fc ffbd 	bl	8000554 <__aeabi_i2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80035e2:	f7fd f94b 	bl	800087c <__aeabi_ddiv>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4614      	mov	r4, r2
 80035ec:	461d      	mov	r5, r3
 80035ee:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80035f2:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 80035f6:	f7fd f817 	bl	8000628 <__aeabi_dmul>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	f7fc fe59 	bl	80002b8 <__aeabi_dsub>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	ec43 2b17 	vmov	d7, r2, r3
 800360e:	eeb0 0a47 	vmov.f32	s0, s14
 8003612:	eef0 0a67 	vmov.f32	s1, s15
 8003616:	f014 fe75 	bl	8018304 <sqrt>
 800361a:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
	// summarize statistics, give user opportunity to reject outlying measurements

	//uart_printf_data("\r\r\nAverage magnitude (default Hm) and sigma of %d vectors = %6.1lf, %6.1lf\r\r\n",nlines,xave,xs);
	//uart_printf_data("\r\r\nReject outliers? (0 or d, reject if > d*sigma from mean) ");

	nxsrej=0;
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0

	//uart_printf_data("Rejection level selected: %4.1f\r\r\n ",nxsrej);

	// scan file again

	ngood = nlines;  //count good
 800362a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800362e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	if (nxsrej > 0) {
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800363e:	f7fd fa83 	bl	8000b48 <__aeabi_dcmpgt>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a5 	beq.w	8003794 <magneto_calculate+0x360>
		//uart_printf_data("\r\r\nRejecting measurements if abs(vector_length-average)/(std. dev.) > %5.1f\r\r\n",nxsrej);

		// outlier rejection, count remaining lines
		for( i = 0; i < nlines; i++)
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003650:	e099      	b.n	8003786 <magneto_calculate+0x352>
		{

			x=*(buffer + 3 * i + 0);
 8003652:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003664:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4413      	add	r3, r2
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff82 	bl	8000578 <__aeabi_f2d>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
			y=*(buffer + 3 * i + 1);
 800367c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	1d1a      	adds	r2, r3, #4
 800368a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800368e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4413      	add	r3, r2
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fc ff6d 	bl	8000578 <__aeabi_f2d>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
			z=*(buffer + 3 * i + 2);
 80036a6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	f103 0208 	add.w	r2, r3, #8
 80036b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80036ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc ff57 	bl	8000578 <__aeabi_f2d>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8

			x2 = sqrt(x*x + y*y + z*z);  //vector length
 80036d2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80036d6:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80036da:	f7fc ffa5 	bl	8000628 <__aeabi_dmul>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4614      	mov	r4, r2
 80036e4:	461d      	mov	r5, r3
 80036e6:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80036ea:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80036ee:	f7fc ff9b 	bl	8000628 <__aeabi_dmul>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	f7fc fddf 	bl	80002bc <__adddf3>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4614      	mov	r4, r2
 8003704:	461d      	mov	r5, r3
 8003706:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800370a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800370e:	f7fc ff8b 	bl	8000628 <__aeabi_dmul>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4620      	mov	r0, r4
 8003718:	4629      	mov	r1, r5
 800371a:	f7fc fdcf 	bl	80002bc <__adddf3>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	ec43 2b17 	vmov	d7, r2, r3
 8003726:	eeb0 0a47 	vmov.f32	s0, s14
 800372a:	eef0 0a67 	vmov.f32	s1, s15
 800372e:	f014 fde9 	bl	8018304 <sqrt>
 8003732:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
			x2 =fabs(x2 - xave)/xs; //standard deviations from mean
 8003736:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800373a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800373e:	f7fc fdbb 	bl	80002b8 <__aeabi_dsub>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4690      	mov	r8, r2
 8003748:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800374c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8003750:	4640      	mov	r0, r8
 8003752:	4649      	mov	r1, r9
 8003754:	f7fd f892 	bl	800087c <__aeabi_ddiv>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
			if (x2 > nxsrej) {
 8003760:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8003764:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8003768:	f7fd f9ee 	bl	8000b48 <__aeabi_dcmpgt>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <magneto_calculate+0x348>
				ngood--;
 8003772:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003776:	3b01      	subs	r3, #1
 8003778:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		for( i = 0; i < nlines; i++)
 800377c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003780:	3301      	adds	r3, #1
 8003782:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003786:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800378a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800378e:	429a      	cmp	r2, r3
 8003790:	f6ff af5f 	blt.w	8003652 <magneto_calculate+0x21e>
		//uart_printf_data("\r\r\nNumber of measurements to be rejected: %d, accepted: %d\r\r\n",nlines-ngood,ngood);
	}

	// third time through!
	// allocate array space for accepted measurements
	D = (double*)malloc(10 * ngood * sizeof(double));
 8003794:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4618      	mov	r0, r3
 80037a2:	f011 ff23 	bl	80155ec <malloc>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	raw = (double*)malloc(3 * ngood * sizeof(double));
 80037ac:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4618      	mov	r0, r3
 80037ba:	f011 ff17 	bl	80155ec <malloc>
 80037be:	4603      	mov	r3, r0
 80037c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	j = 0;  //array index for good measurements
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	// //uart_printf_data("\r\r\nAccepted measurements (file index, internal index, ...)\r\r\n");
	for( i = 0; i < nlines; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80037d0:	e1b3      	b.n	8003b3a <magneto_calculate+0x706>
	{
		x=*(buffer + 3 * i + 0);
 80037d2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	461a      	mov	r2, r3
 80037e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80037e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fec2 	bl	8000578 <__aeabi_f2d>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
		y=*(buffer + 3 * i + 1);
 80037fc:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8003800:	4613      	mov	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	1d1a      	adds	r2, r3, #4
 800380a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800380e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4413      	add	r3, r2
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fead 	bl	8000578 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
		z=*(buffer + 3 * i + 2);
 8003826:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800382a:	4613      	mov	r3, r2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	f103 0208 	add.w	r2, r3, #8
 8003836:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800383a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4413      	add	r3, r2
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe97 	bl	8000578 <__aeabi_f2d>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8

		x2 = sqrt(x*x + y*y + z*z);  //vector length
 8003852:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8003856:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800385a:	f7fc fee5 	bl	8000628 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4614      	mov	r4, r2
 8003864:	461d      	mov	r5, r3
 8003866:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800386a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800386e:	f7fc fedb 	bl	8000628 <__aeabi_dmul>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4620      	mov	r0, r4
 8003878:	4629      	mov	r1, r5
 800387a:	f7fc fd1f 	bl	80002bc <__adddf3>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4614      	mov	r4, r2
 8003884:	461d      	mov	r5, r3
 8003886:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800388a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800388e:	f7fc fecb 	bl	8000628 <__aeabi_dmul>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4620      	mov	r0, r4
 8003898:	4629      	mov	r1, r5
 800389a:	f7fc fd0f 	bl	80002bc <__adddf3>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	ec43 2b17 	vmov	d7, r2, r3
 80038a6:	eeb0 0a47 	vmov.f32	s0, s14
 80038aa:	eef0 0a67 	vmov.f32	s1, s15
 80038ae:	f014 fd29 	bl	8018304 <sqrt>
 80038b2:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
		x2 = fabs(x2 - xave)/xs; //standard deviation from mean
 80038b6:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80038ba:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 80038be:	f7fc fcfb 	bl	80002b8 <__aeabi_dsub>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4692      	mov	sl, r2
 80038c8:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80038cc:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80038d0:	4650      	mov	r0, sl
 80038d2:	4659      	mov	r1, fp
 80038d4:	f7fc ffd2 	bl	800087c <__aeabi_ddiv>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
		if ((nxsrej == 0) || (x2 <= nxsrej)) {
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80038ec:	f7fd f904 	bl	8000af8 <__aeabi_dcmpeq>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <magneto_calculate+0x4d6>
 80038f6:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80038fa:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 80038fe:	f7fd f90f 	bl	8000b20 <__aeabi_dcmple>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8113 	beq.w	8003b30 <magneto_calculate+0x6fc>
			// accepted measurement
			//   //uart_printf_data("%d, %d: %6.1f %6.1f %6.1f\r\r\n",i,j,x,y,z);

			raw[3*j]   = x;
 800390a:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	461a      	mov	r2, r3
 8003918:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800391c:	1899      	adds	r1, r3, r2
 800391e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8003922:	e9c1 2300 	strd	r2, r3, [r1]
			raw[3*j+1] = y;
 8003926:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	f103 0208 	add.w	r2, r3, #8
 8003936:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800393a:	1899      	adds	r1, r3, r2
 800393c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8003940:	e9c1 2300 	strd	r2, r3, [r1]
			raw[3*j+2] = z;
 8003944:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	f103 0210 	add.w	r2, r3, #16
 8003954:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003958:	1899      	adds	r1, r3, r2
 800395a:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800395e:	e9c1 2300 	strd	r2, r3, [r1]
			D[j]         = x * x;
 8003962:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003966:	00da      	lsls	r2, r3, #3
 8003968:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800396c:	189c      	adds	r4, r3, r2
 800396e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8003972:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8003976:	f7fc fe57 	bl	8000628 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood+j]   = y * y;
 8003982:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003986:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800398a:	4413      	add	r3, r2
 800398c:	00da      	lsls	r2, r3, #3
 800398e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003992:	189c      	adds	r4, r3, r2
 8003994:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8003998:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800399c:	f7fc fe44 	bl	8000628 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*2+j] = z * z;
 80039a8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80039ac:	005a      	lsls	r2, r3, #1
 80039ae:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80039b2:	4413      	add	r3, r2
 80039b4:	00da      	lsls	r2, r3, #3
 80039b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80039ba:	189c      	adds	r4, r3, r2
 80039bc:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 80039c0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80039c4:	f7fc fe30 	bl	8000628 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*3+j] = 2.0 * y * z;
 80039d0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	f7fc fc70 	bl	80002bc <__adddf3>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	441a      	add	r2, r3
 80039ee:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80039f2:	4413      	add	r3, r2
 80039f4:	00da      	lsls	r2, r3, #3
 80039f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80039fa:	189c      	adds	r4, r3, r2
 80039fc:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8003a00:	f7fc fe12 	bl	8000628 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*4+j] = 2.0 * x * z;
 8003a0c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	f7fc fc52 	bl	80002bc <__adddf3>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00da      	lsls	r2, r3, #3
 8003a2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a32:	189c      	adds	r4, r3, r2
 8003a34:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8003a38:	f7fc fdf6 	bl	8000628 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*5+j] = 2.0 * x * y;
 8003a44:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	f7fc fc36 	bl	80002bc <__adddf3>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003a66:	4413      	add	r3, r2
 8003a68:	00da      	lsls	r2, r3, #3
 8003a6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a6e:	189c      	adds	r4, r3, r2
 8003a70:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8003a74:	f7fc fdd8 	bl	8000628 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*6+j] = 2.0 * x;
 8003a80:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003a92:	4413      	add	r3, r2
 8003a94:	00da      	lsls	r2, r3, #3
 8003a96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a9a:	189c      	adds	r4, r3, r2
 8003a9c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	f7fc fc0a 	bl	80002bc <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*7+j] = 2.0 * y;
 8003ab0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9a      	subs	r2, r3, r2
 8003aba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003abe:	4413      	add	r3, r2
 8003ac0:	00da      	lsls	r2, r3, #3
 8003ac2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ac6:	189c      	adds	r4, r3, r2
 8003ac8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	f7fc fbf4 	bl	80002bc <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*8+j] = 2.0 * z;
 8003adc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003ae0:	00da      	lsls	r2, r3, #3
 8003ae2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00da      	lsls	r2, r3, #3
 8003aea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003aee:	189c      	adds	r4, r3, r2
 8003af0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	f7fc fbe0 	bl	80002bc <__adddf3>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	e9c4 2300 	strd	r2, r3, [r4]
			D[ngood*9+j] = 1.0;
 8003b04:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	441a      	add	r2, r3
 8003b0e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b12:	4413      	add	r3, r2
 8003b14:	00da      	lsls	r2, r3, #3
 8003b16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003b1a:	1899      	adds	r1, r3, r2
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <magneto_calculate+0x730>)
 8003b22:	e9c1 2300 	strd	r2, r3, [r1]
			j++; //count good measurements
 8003b26:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	for( i = 0; i < nlines; i++)
 8003b30:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003b34:	3301      	adds	r3, #1
 8003b36:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003b3a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8003b3e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003b42:	429a      	cmp	r2, r3
 8003b44:	f6ff ae45 	blt.w	80037d2 <magneto_calculate+0x39e>
		}
	}

	//uart_printf_data("\r\r\n%3d measurements processed, expected %d\r\r\n",j,ngood);
	if (j != ngood) {uart_write_debug("Internal indexing error!\r\r\n", 10); return 0; }
 8003b48:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003b4c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d00b      	beq.n	8003b6c <magneto_calculate+0x738>
 8003b54:	210a      	movs	r1, #10
 8003b56:	4804      	ldr	r0, [pc, #16]	; (8003b68 <magneto_calculate+0x734>)
 8003b58:	f007 fad0 	bl	800b0fc <uart_write_debug>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f001 ba2f 	b.w	8004fc0 <magneto_calculate+0x1b8c>
 8003b62:	bf00      	nop
 8003b64:	3ff00000 	.word	0x3ff00000
 8003b68:	08019c20 	.word	0x08019c20

	nlines = ngood; //number to process
 8003b6c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003b70:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

	//uart_printf_data("\r\r\nExpected norm of local field vector Hm? (Enter 0 for default %8.1f) ",xave);

	hm=0;
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0

	if(hm == 0.0) hm=xave;
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8003b8c:	f7fc ffb4 	bl	8000af8 <__aeabi_dcmpeq>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <magneto_calculate+0x76a>
 8003b96:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8003b9a:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
	//uart_printf_data("\r\r\nSet Hm = %8.1f\r\r\n",hm);

	// allocate memory for matrix S
	S = (double*)malloc(10 * 10 * sizeof(double));
 8003b9e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003ba2:	f011 fd23 	bl	80155ec <malloc>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	Multiply_Self_Transpose(S, D, 10, nlines);
 8003bac:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003bb0:	220a      	movs	r2, #10
 8003bb2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8003bb6:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8003bba:	f001 fa18 	bl	8004fee <Multiply_Self_Transpose>

	// Create pre-inverted constraint matrix C
	C = (double*)malloc(6 * 6 * sizeof(double));
 8003bbe:	f44f 7090 	mov.w	r0, #288	; 0x120
 8003bc2:	f011 fd13 	bl	80155ec <malloc>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	C[0] = 0.0; C[1] = 0.5; C[2] = 0.5; C[3] = 0.0;  C[4] = 0.0;  C[5] = 0.0;
 8003bcc:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9c1 2300 	strd	r2, r3, [r1]
 8003bdc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003be0:	f103 0108 	add.w	r1, r3, #8
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	4bd0      	ldr	r3, [pc, #832]	; (8003f2c <magneto_calculate+0xaf8>)
 8003bea:	e9c1 2300 	strd	r2, r3, [r1]
 8003bee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003bf2:	f103 0110 	add.w	r1, r3, #16
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	4bcc      	ldr	r3, [pc, #816]	; (8003f2c <magneto_calculate+0xaf8>)
 8003bfc:	e9c1 2300 	strd	r2, r3, [r1]
 8003c00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c04:	f103 0118 	add.w	r1, r3, #24
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9c1 2300 	strd	r2, r3, [r1]
 8003c14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c18:	f103 0120 	add.w	r1, r3, #32
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9c1 2300 	strd	r2, r3, [r1]
 8003c28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c2c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9c1 2300 	strd	r2, r3, [r1]
	C[6] = 0.5;  C[7] = 0.0; C[8] = 0.5; C[9] = 0.0;  C[10] = 0.0;  C[11] = 0.0;
 8003c3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	4bb8      	ldr	r3, [pc, #736]	; (8003f2c <magneto_calculate+0xaf8>)
 8003c4a:	e9c1 2300 	strd	r2, r3, [r1]
 8003c4e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9c1 2300 	strd	r2, r3, [r1]
 8003c62:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c66:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	4baf      	ldr	r3, [pc, #700]	; (8003f2c <magneto_calculate+0xaf8>)
 8003c70:	e9c1 2300 	strd	r2, r3, [r1]
 8003c74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c78:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9c1 2300 	strd	r2, r3, [r1]
 8003c88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c8c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9c1 2300 	strd	r2, r3, [r1]
 8003c9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ca0:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9c1 2300 	strd	r2, r3, [r1]
	C[12] = 0.5;  C[13] = 0.5; C[14] = 0.0; C[15] = 0.0;  C[16] = 0.0;  C[17] = 0.0;
 8003cb0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cb4:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <magneto_calculate+0xaf8>)
 8003cbe:	e9c1 2300 	strd	r2, r3, [r1]
 8003cc2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cc6:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	4b97      	ldr	r3, [pc, #604]	; (8003f2c <magneto_calculate+0xaf8>)
 8003cd0:	e9c1 2300 	strd	r2, r3, [r1]
 8003cd4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cd8:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9c1 2300 	strd	r2, r3, [r1]
 8003ce8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cec:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9c1 2300 	strd	r2, r3, [r1]
 8003cfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d00:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
 8003d10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d14:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9c1 2300 	strd	r2, r3, [r1]
	C[18] = 0.0;  C[19] = 0.0;  C[20] = 0.0;  C[21] = -0.25; C[22] = 0.0;  C[23] = 0.0;
 8003d24:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d28:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9c1 2300 	strd	r2, r3, [r1]
 8003d38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d3c:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9c1 2300 	strd	r2, r3, [r1]
 8003d4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d50:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9c1 2300 	strd	r2, r3, [r1]
 8003d60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d64:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	4b70      	ldr	r3, [pc, #448]	; (8003f30 <magneto_calculate+0xafc>)
 8003d6e:	e9c1 2300 	strd	r2, r3, [r1]
 8003d72:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d76:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9c1 2300 	strd	r2, r3, [r1]
 8003d86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d8a:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9c1 2300 	strd	r2, r3, [r1]
	C[24] = 0.0;  C[25] = 0.0; C[26] = 0.0;  C[27] = 0.0;  C[28] = -0.25; C[29] = 0.0;
 8003d9a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d9e:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9c1 2300 	strd	r2, r3, [r1]
 8003dae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003db2:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9c1 2300 	strd	r2, r3, [r1]
 8003dc2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003dc6:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9c1 2300 	strd	r2, r3, [r1]
 8003dd6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003dda:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9c1 2300 	strd	r2, r3, [r1]
 8003dea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003dee:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <magneto_calculate+0xafc>)
 8003df8:	e9c1 2300 	strd	r2, r3, [r1]
 8003dfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e00:	f103 01e8 	add.w	r1, r3, #232	; 0xe8
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9c1 2300 	strd	r2, r3, [r1]
	C[30] = 0.0;  C[31] = 0.0; C[32] = 0.0;  C[33] = 0.0;  C[34] = 0.0;  C[35] = -0.25;
 8003e10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9c1 2300 	strd	r2, r3, [r1]
 8003e24:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e28:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9c1 2300 	strd	r2, r3, [r1]
 8003e38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e3c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9c1 2300 	strd	r2, r3, [r1]
 8003e4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e50:	f503 7184 	add.w	r1, r3, #264	; 0x108
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9c1 2300 	strd	r2, r3, [r1]
 8003e60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e64:	f503 7188 	add.w	r1, r3, #272	; 0x110
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9c1 2300 	strd	r2, r3, [r1]
 8003e74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e78:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <magneto_calculate+0xafc>)
 8003e82:	e9c1 2300 	strd	r2, r3, [r1]

	S11 = (double*)malloc(6 * 6 * sizeof(double));
 8003e86:	f44f 7090 	mov.w	r0, #288	; 0x120
 8003e8a:	f011 fbaf 	bl	80155ec <malloc>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	Get_Submatrix(S11, 6, 6, S, 10, 0, 0);
 8003e94:	2300      	movs	r3, #0
 8003e96:	9302      	str	r3, [sp, #8]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	230a      	movs	r3, #10
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ea4:	2206      	movs	r2, #6
 8003ea6:	2106      	movs	r1, #6
 8003ea8:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8003eac:	f001 f910 	bl	80050d0 <Get_Submatrix>
	S12 = (double*)malloc(6 * 4 * sizeof(double));
 8003eb0:	20c0      	movs	r0, #192	; 0xc0
 8003eb2:	f011 fb9b 	bl	80155ec <malloc>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	Get_Submatrix(S12, 6, 4, S, 10, 0, 6);
 8003ebc:	2306      	movs	r3, #6
 8003ebe:	9302      	str	r3, [sp, #8]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ecc:	2204      	movs	r2, #4
 8003ece:	2106      	movs	r1, #6
 8003ed0:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8003ed4:	f001 f8fc 	bl	80050d0 <Get_Submatrix>
	S12t = (double*)malloc(4 * 6 * sizeof(double));
 8003ed8:	20c0      	movs	r0, #192	; 0xc0
 8003eda:	f011 fb87 	bl	80155ec <malloc>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	Get_Submatrix(S12t, 4, 6, S, 10, 6, 0);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9302      	str	r3, [sp, #8]
 8003ee8:	2306      	movs	r3, #6
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	230a      	movs	r3, #10
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ef4:	2206      	movs	r2, #6
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8003efc:	f001 f8e8 	bl	80050d0 <Get_Submatrix>
	S22 = (double*)malloc(4 * 4 * sizeof(double));
 8003f00:	2080      	movs	r0, #128	; 0x80
 8003f02:	f011 fb73 	bl	80155ec <malloc>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	Get_Submatrix(S22, 4, 4, S, 10, 6, 6);
 8003f0c:	2306      	movs	r3, #6
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	2306      	movs	r3, #6
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	230a      	movs	r3, #10
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	2104      	movs	r1, #4
 8003f20:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8003f24:	f001 f8d4 	bl	80050d0 <Get_Submatrix>

	S22_1 = (double*)malloc(4 * 4 * sizeof(double));
 8003f28:	2080      	movs	r0, #128	; 0x80
 8003f2a:	e003      	b.n	8003f34 <magneto_calculate+0xb00>
 8003f2c:	3fe00000 	.word	0x3fe00000
 8003f30:	bfd00000 	.word	0xbfd00000
 8003f34:	f011 fb5a 	bl	80155ec <malloc>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	for(i = 0; i < 16; i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003f44:	e014      	b.n	8003f70 <magneto_calculate+0xb3c>
		S22_1[i] = S22[i];
 8003f46:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f4a:	00da      	lsls	r2, r3, #3
 8003f4c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f50:	1898      	adds	r0, r3, r2
 8003f52:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f56:	00da      	lsls	r2, r3, #3
 8003f58:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003f5c:	1899      	adds	r1, r3, r2
 8003f5e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8003f62:	e9c1 2300 	strd	r2, r3, [r1]
	for(i = 0; i < 16; i++)
 8003f66:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003f70:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f74:	2b0f      	cmp	r3, #15
 8003f76:	dde6      	ble.n	8003f46 <magneto_calculate+0xb12>
	Choleski_LU_Decomposition(S22_1, 4);
 8003f78:	2104      	movs	r1, #4
 8003f7a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8003f7e:	f001 f8d7 	bl	8005130 <Choleski_LU_Decomposition>
	Choleski_LU_Inverse(S22_1, 4);
 8003f82:	2104      	movs	r1, #4
 8003f84:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8003f88:	f001 f9a8 	bl	80052dc <Choleski_LU_Inverse>

	// Calculate S22a = S22_1 * S12t   4*6 = 4x4 * 4x6   C = AB
	S22a = (double*)malloc(4 * 6 * sizeof(double));
 8003f8c:	20c0      	movs	r0, #192	; 0xc0
 8003f8e:	f011 fb2d 	bl	80155ec <malloc>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	Multiply_Matrices(S22a, S22_1, 4, 4, S12t, 6);
 8003f98:	2306      	movs	r3, #6
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8003faa:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 8003fae:	f001 fa0a 	bl	80053c6 <Multiply_Matrices>

	// Then calculate S22b = S12 * S22a      ( 6x6 = 6x4 * 4x6)
	S22b = (double*)malloc(6 * 6 * sizeof(double));
 8003fb2:	f44f 7090 	mov.w	r0, #288	; 0x120
 8003fb6:	f011 fb19 	bl	80155ec <malloc>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	Multiply_Matrices(S22b, S12, 6, 4, S22a, 6);
 8003fc0:	2306      	movs	r3, #6
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2304      	movs	r3, #4
 8003fcc:	2206      	movs	r2, #6
 8003fce:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8003fd2:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8003fd6:	f001 f9f6 	bl	80053c6 <Multiply_Matrices>

	// Calculate SS = S11 - S22b
	SS = (double*)malloc(6 * 6 * sizeof(double));
 8003fda:	f44f 7090 	mov.w	r0, #288	; 0x120
 8003fde:	f011 fb05 	bl	80155ec <malloc>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	for(i = 0; i < 36; i++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003fee:	e024      	b.n	800403a <magneto_calculate+0xc06>
		SS[i] = S11[i] - S22b[i];
 8003ff0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003ff4:	00da      	lsls	r2, r3, #3
 8003ff6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003ffa:	4413      	add	r3, r2
 8003ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004000:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004004:	00da      	lsls	r2, r3, #3
 8004006:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800400a:	4413      	add	r3, r2
 800400c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004010:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004014:	00da      	lsls	r2, r3, #3
 8004016:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800401a:	189c      	adds	r4, r3, r2
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4640      	mov	r0, r8
 8004022:	4649      	mov	r1, r9
 8004024:	f7fc f948 	bl	80002b8 <__aeabi_dsub>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	e9c4 2300 	strd	r2, r3, [r4]
	for(i = 0; i < 36; i++)
 8004030:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004034:	3301      	adds	r3, #1
 8004036:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800403a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800403e:	2b23      	cmp	r3, #35	; 0x23
 8004040:	ddd6      	ble.n	8003ff0 <magneto_calculate+0xbbc>
	E = (double*)malloc(6 * 6 * sizeof(double));
 8004042:	f44f 7090 	mov.w	r0, #288	; 0x120
 8004046:	f011 fad1 	bl	80155ec <malloc>
 800404a:	4603      	mov	r3, r0
 800404c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	Multiply_Matrices(E, C, 6, 6, SS, 6);
 8004050:	2306      	movs	r3, #6
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2306      	movs	r3, #6
 800405c:	2206      	movs	r2, #6
 800405e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004062:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004066:	f001 f9ae 	bl	80053c6 <Multiply_Matrices>

	SSS = (double*)malloc(6 * 6 * sizeof(double));
 800406a:	f44f 7090 	mov.w	r0, #288	; 0x120
 800406e:	f011 fabd 	bl	80155ec <malloc>
 8004072:	4603      	mov	r3, r0
 8004074:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	Hessenberg_Form_Elementary(E, SSS, 6);
 8004078:	2206      	movs	r2, #6
 800407a:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 800407e:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004082:	f001 fa3b 	bl	80054fc <Hessenberg_Form_Elementary>

	eigen_real = (double*)malloc(6 * sizeof(double));
 8004086:	2030      	movs	r0, #48	; 0x30
 8004088:	f011 fab0 	bl	80155ec <malloc>
 800408c:	4603      	mov	r3, r0
 800408e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	eigen_imag = (double*)malloc(6 * sizeof(double));
 8004092:	2030      	movs	r0, #48	; 0x30
 8004094:	f011 faaa 	bl	80155ec <malloc>
 8004098:	4603      	mov	r3, r0
 800409a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

	QR_Hessenberg_Matrix(E, SSS, eigen_real, eigen_imag, 6, 100);
 800409e:	2364      	movs	r3, #100	; 0x64
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	2306      	movs	r3, #6
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80040aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80040ae:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80040b2:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 80040b6:	f001 fc5d 	bl	8005974 <QR_Hessenberg_Matrix>

	index = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	maxval = eigen_real[0];
 80040c0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
	for(i = 1; i < 6; i++)
 80040cc:	2301      	movs	r3, #1
 80040ce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80040d2:	e021      	b.n	8004118 <magneto_calculate+0xce4>
	{
		if(eigen_real[i] > maxval)
 80040d4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80040d8:	00da      	lsls	r2, r3, #3
 80040da:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80040de:	4413      	add	r3, r2
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80040e8:	f7fc fd10 	bl	8000b0c <__aeabi_dcmplt>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <magneto_calculate+0xcda>
		{
			maxval = eigen_real[i];
 80040f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80040f6:	00da      	lsls	r2, r3, #3
 80040f8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80040fc:	4413      	add	r3, r2
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8
			index = i;
 8004106:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800410a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	for(i = 1; i < 6; i++)
 800410e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004112:	3301      	adds	r3, #1
 8004114:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004118:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800411c:	2b05      	cmp	r3, #5
 800411e:	ddd9      	ble.n	80040d4 <magneto_calculate+0xca0>
		}
	}

	v1 = (double*)malloc(6 * sizeof(double));
 8004120:	2030      	movs	r0, #48	; 0x30
 8004122:	f011 fa63 	bl	80155ec <malloc>
 8004126:	4603      	mov	r3, r0
 8004128:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	v1[0] = SSS[index];
 800412c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004130:	00da      	lsls	r2, r3, #3
 8004132:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004136:	4413      	add	r3, r2
 8004138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800413c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004140:	e9c3 0100 	strd	r0, r1, [r3]
	v1[1] = SSS[index+6];
 8004144:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004148:	3306      	adds	r3, #6
 800414a:	00da      	lsls	r2, r3, #3
 800414c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004150:	441a      	add	r2, r3
 8004152:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004156:	f103 0108 	add.w	r1, r3, #8
 800415a:	e9d2 2300 	ldrd	r2, r3, [r2]
 800415e:	e9c1 2300 	strd	r2, r3, [r1]
	v1[2] = SSS[index+12];
 8004162:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004166:	330c      	adds	r3, #12
 8004168:	00da      	lsls	r2, r3, #3
 800416a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800416e:	441a      	add	r2, r3
 8004170:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004174:	f103 0110 	add.w	r1, r3, #16
 8004178:	e9d2 2300 	ldrd	r2, r3, [r2]
 800417c:	e9c1 2300 	strd	r2, r3, [r1]
	v1[3] = SSS[index+18];
 8004180:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004184:	3312      	adds	r3, #18
 8004186:	00da      	lsls	r2, r3, #3
 8004188:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800418c:	441a      	add	r2, r3
 800418e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004192:	f103 0118 	add.w	r1, r3, #24
 8004196:	e9d2 2300 	ldrd	r2, r3, [r2]
 800419a:	e9c1 2300 	strd	r2, r3, [r1]
	v1[4] = SSS[index+24];
 800419e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80041a2:	3318      	adds	r3, #24
 80041a4:	00da      	lsls	r2, r3, #3
 80041a6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80041aa:	441a      	add	r2, r3
 80041ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80041b0:	f103 0120 	add.w	r1, r3, #32
 80041b4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80041b8:	e9c1 2300 	strd	r2, r3, [r1]
	v1[5] = SSS[index+30];
 80041bc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80041c0:	331e      	adds	r3, #30
 80041c2:	00da      	lsls	r2, r3, #3
 80041c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80041c8:	441a      	add	r2, r3
 80041ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80041ce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80041d2:	e9d2 2300 	ldrd	r2, r3, [r2]
 80041d6:	e9c1 2300 	strd	r2, r3, [r1]

	// normalize v1
	norm = sqrt(v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2] + v1[3] * v1[3] + v1[4] * v1[4] + v1[5] * v1[5]);
 80041da:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80041de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f7fc fa1d 	bl	8000628 <__aeabi_dmul>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4614      	mov	r4, r2
 80041f4:	461d      	mov	r5, r3
 80041f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80041fa:	3308      	adds	r3, #8
 80041fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004200:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004204:	3308      	adds	r3, #8
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc fa0d 	bl	8000628 <__aeabi_dmul>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f7fc f851 	bl	80002bc <__adddf3>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4614      	mov	r4, r2
 8004220:	461d      	mov	r5, r3
 8004222:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004226:	3310      	adds	r3, #16
 8004228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800422c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004230:	3310      	adds	r3, #16
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f7fc f9f7 	bl	8000628 <__aeabi_dmul>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f7fc f83b 	bl	80002bc <__adddf3>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4614      	mov	r4, r2
 800424c:	461d      	mov	r5, r3
 800424e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004252:	3318      	adds	r3, #24
 8004254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004258:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800425c:	3318      	adds	r3, #24
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f7fc f9e1 	bl	8000628 <__aeabi_dmul>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4620      	mov	r0, r4
 800426c:	4629      	mov	r1, r5
 800426e:	f7fc f825 	bl	80002bc <__adddf3>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4614      	mov	r4, r2
 8004278:	461d      	mov	r5, r3
 800427a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800427e:	3320      	adds	r3, #32
 8004280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004284:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004288:	3320      	adds	r3, #32
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fc f9cb 	bl	8000628 <__aeabi_dmul>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fc f80f 	bl	80002bc <__adddf3>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4614      	mov	r4, r2
 80042a4:	461d      	mov	r5, r3
 80042a6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042aa:	3328      	adds	r3, #40	; 0x28
 80042ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042b4:	3328      	adds	r3, #40	; 0x28
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f7fc f9b5 	bl	8000628 <__aeabi_dmul>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4620      	mov	r0, r4
 80042c4:	4629      	mov	r1, r5
 80042c6:	f7fb fff9 	bl	80002bc <__adddf3>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	ec43 2b17 	vmov	d7, r2, r3
 80042d2:	eeb0 0a47 	vmov.f32	s0, s14
 80042d6:	eef0 0a67 	vmov.f32	s1, s15
 80042da:	f014 f813 	bl	8018304 <sqrt>
 80042de:	ed87 0b58 	vstr	d0, [r7, #352]	; 0x160
	v1[0] /= norm;
 80042e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ea:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80042ee:	f7fc fac5 	bl	800087c <__aeabi_ddiv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042fe:	e9c3 0100 	strd	r0, r1, [r3]
	v1[1] /= norm;
 8004302:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004306:	3308      	adds	r3, #8
 8004308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800430c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004310:	f103 0408 	add.w	r4, r3, #8
 8004314:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8004318:	f7fc fab0 	bl	800087c <__aeabi_ddiv>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	e9c4 2300 	strd	r2, r3, [r4]
	v1[2] /= norm;
 8004324:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004328:	3310      	adds	r3, #16
 800432a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800432e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004332:	f103 0410 	add.w	r4, r3, #16
 8004336:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800433a:	f7fc fa9f 	bl	800087c <__aeabi_ddiv>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	e9c4 2300 	strd	r2, r3, [r4]
	v1[3] /= norm;
 8004346:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800434a:	3318      	adds	r3, #24
 800434c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004350:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004354:	f103 0418 	add.w	r4, r3, #24
 8004358:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800435c:	f7fc fa8e 	bl	800087c <__aeabi_ddiv>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	e9c4 2300 	strd	r2, r3, [r4]
	v1[4] /= norm;
 8004368:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800436c:	3320      	adds	r3, #32
 800436e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004372:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004376:	f103 0420 	add.w	r4, r3, #32
 800437a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800437e:	f7fc fa7d 	bl	800087c <__aeabi_ddiv>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	e9c4 2300 	strd	r2, r3, [r4]
	v1[5] /= norm;
 800438a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800438e:	3328      	adds	r3, #40	; 0x28
 8004390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004394:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004398:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800439c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80043a0:	f7fc fa6c 	bl	800087c <__aeabi_ddiv>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	e9c4 2300 	strd	r2, r3, [r4]

	if(v1[0] < 0.0)
 80043ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80043b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f7fc fba6 	bl	8000b0c <__aeabi_dcmplt>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d05d      	beq.n	8004482 <magneto_calculate+0x104e>
	{
		v1[0] = -v1[0];
 80043c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	663a      	str	r2, [r7, #96]	; 0x60
 80043d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043d4:	667b      	str	r3, [r7, #100]	; 0x64
 80043d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80043da:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80043de:	ed83 7b00 	vstr	d7, [r3]
		v1[1] = -v1[1];
 80043e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80043e6:	3308      	adds	r3, #8
 80043e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80043f0:	3308      	adds	r3, #8
 80043f2:	65b8      	str	r0, [r7, #88]	; 0x58
 80043f4:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 80043f8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043fa:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80043fe:	ed83 7b00 	vstr	d7, [r3]
		v1[2] = -v1[2];
 8004402:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004406:	3310      	adds	r3, #16
 8004408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800440c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004410:	3310      	adds	r3, #16
 8004412:	6538      	str	r0, [r7, #80]	; 0x50
 8004414:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8004418:	657a      	str	r2, [r7, #84]	; 0x54
 800441a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800441e:	ed83 7b00 	vstr	d7, [r3]
		v1[3] = -v1[3];
 8004422:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004426:	3318      	adds	r3, #24
 8004428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800442c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004430:	3318      	adds	r3, #24
 8004432:	64b8      	str	r0, [r7, #72]	; 0x48
 8004434:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8004438:	64fa      	str	r2, [r7, #76]	; 0x4c
 800443a:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800443e:	ed83 7b00 	vstr	d7, [r3]
		v1[4] = -v1[4];
 8004442:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004446:	3320      	adds	r3, #32
 8004448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800444c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004450:	3320      	adds	r3, #32
 8004452:	6438      	str	r0, [r7, #64]	; 0x40
 8004454:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8004458:	647a      	str	r2, [r7, #68]	; 0x44
 800445a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800445e:	ed83 7b00 	vstr	d7, [r3]
		v1[5] = -v1[5];
 8004462:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004466:	3328      	adds	r3, #40	; 0x28
 8004468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800446c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004470:	3328      	adds	r3, #40	; 0x28
 8004472:	63b8      	str	r0, [r7, #56]	; 0x38
 8004474:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8004478:	63fa      	str	r2, [r7, #60]	; 0x3c
 800447a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800447e:	ed83 7b00 	vstr	d7, [r3]
	}

	// Calculate v2 = S22a * v1      ( 4x1 = 4x6 * 6x1)
	v2 = (double*)malloc(4 * sizeof(double));
 8004482:	2020      	movs	r0, #32
 8004484:	f011 f8b2 	bl	80155ec <malloc>
 8004488:	4603      	mov	r3, r0
 800448a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	Multiply_Matrices(v2, S22a, 4, 6, v1, 1);
 800448e:	2301      	movs	r3, #1
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2306      	movs	r3, #6
 800449a:	2204      	movs	r2, #4
 800449c:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 80044a0:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 80044a4:	f000 ff8f 	bl	80053c6 <Multiply_Matrices>

	v = (double*)malloc(10 * sizeof(double));
 80044a8:	2050      	movs	r0, #80	; 0x50
 80044aa:	f011 f89f 	bl	80155ec <malloc>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

	v[0] = v1[0];
 80044b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044bc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80044c0:	e9c3 0100 	strd	r0, r1, [r3]
	v[1] = v1[1];
 80044c4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80044c8:	f103 0108 	add.w	r1, r3, #8
 80044cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044d4:	e9c1 2300 	strd	r2, r3, [r1]
	v[2] = v1[2];
 80044d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80044dc:	f103 0110 	add.w	r1, r3, #16
 80044e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044e8:	e9c1 2300 	strd	r2, r3, [r1]
	v[3] = v1[3];
 80044ec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80044f0:	f103 0118 	add.w	r1, r3, #24
 80044f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80044fc:	e9c1 2300 	strd	r2, r3, [r1]
	v[4] = v1[4];
 8004500:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004504:	f103 0120 	add.w	r1, r3, #32
 8004508:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800450c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004510:	e9c1 2300 	strd	r2, r3, [r1]
	v[5] = v1[5];
 8004514:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004518:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800451c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004520:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004524:	e9c1 2300 	strd	r2, r3, [r1]
	v[6] = -v2[0];
 8004528:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800452c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004530:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004534:	3330      	adds	r3, #48	; 0x30
 8004536:	6338      	str	r0, [r7, #48]	; 0x30
 8004538:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800453c:	637a      	str	r2, [r7, #52]	; 0x34
 800453e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004542:	ed83 7b00 	vstr	d7, [r3]
	v[7] = -v2[1];
 8004546:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800454a:	3308      	adds	r3, #8
 800454c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004550:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004554:	3338      	adds	r3, #56	; 0x38
 8004556:	62b8      	str	r0, [r7, #40]	; 0x28
 8004558:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800455c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800455e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004562:	ed83 7b00 	vstr	d7, [r3]
	v[8] = -v2[2];
 8004566:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800456a:	3310      	adds	r3, #16
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004574:	3140      	adds	r1, #64	; 0x40
 8004576:	623a      	str	r2, [r7, #32]
 8004578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	ed97 7b08 	vldr	d7, [r7, #32]
 8004582:	ed81 7b00 	vstr	d7, [r1]
	v[9] = -v2[3];
 8004586:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800458a:	3318      	adds	r3, #24
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004594:	3148      	adds	r1, #72	; 0x48
 8004596:	61ba      	str	r2, [r7, #24]
 8004598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	ed97 7b06 	vldr	d7, [r7, #24]
 80045a2:	ed81 7b00 	vstr	d7, [r1]

	Q = (double*)malloc(3 * 3 * sizeof(double));
 80045a6:	2048      	movs	r0, #72	; 0x48
 80045a8:	f011 f820 	bl	80155ec <malloc>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

	Q[0] = v[0];
 80045b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80045be:	e9c1 2300 	strd	r2, r3, [r1]
	Q[1] = v[5];
 80045c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80045c6:	f103 0108 	add.w	r1, r3, #8
 80045ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80045d2:	e9c1 2300 	strd	r2, r3, [r1]
	Q[2] = v[4];
 80045d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80045da:	f103 0110 	add.w	r1, r3, #16
 80045de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045e6:	e9c1 2300 	strd	r2, r3, [r1]
	Q[3] = v[5];
 80045ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80045ee:	f103 0118 	add.w	r1, r3, #24
 80045f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045f6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80045fa:	e9c1 2300 	strd	r2, r3, [r1]
	Q[4] = v[1];
 80045fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004602:	f103 0120 	add.w	r1, r3, #32
 8004606:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800460a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800460e:	e9c1 2300 	strd	r2, r3, [r1]
	Q[5] = v[3];
 8004612:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004616:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800461a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800461e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004622:	e9c1 2300 	strd	r2, r3, [r1]
	Q[6] = v[4];
 8004626:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800462a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800462e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004632:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004636:	e9c1 2300 	strd	r2, r3, [r1]
	Q[7] = v[3];
 800463a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800463e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004642:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004646:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800464a:	e9c1 2300 	strd	r2, r3, [r1]
	Q[8] = v[2];
 800464e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004652:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004656:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800465a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800465e:	e9c1 2300 	strd	r2, r3, [r1]

	U = (double*)malloc(3 * sizeof(double));
 8004662:	2018      	movs	r0, #24
 8004664:	f010 ffc2 	bl	80155ec <malloc>
 8004668:	4603      	mov	r3, r0
 800466a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	U[0] = v[6];
 800466e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004672:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004676:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800467a:	e9c1 2300 	strd	r2, r3, [r1]
	U[1] = v[7];
 800467e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004682:	f103 0108 	add.w	r1, r3, #8
 8004686:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800468a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800468e:	e9c1 2300 	strd	r2, r3, [r1]
	U[2] = v[8];
 8004692:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004696:	f103 0110 	add.w	r1, r3, #16
 800469a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800469e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80046a2:	e9c1 2300 	strd	r2, r3, [r1]
	Q_1 = (double*)malloc(3 * 3 * sizeof(double));
 80046a6:	2048      	movs	r0, #72	; 0x48
 80046a8:	f010 ffa0 	bl	80155ec <malloc>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	for(i = 0; i < 9; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80046b8:	e014      	b.n	80046e4 <magneto_calculate+0x12b0>
		Q_1[i] = Q[i];
 80046ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80046c4:	4413      	add	r3, r2
 80046c6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80046ca:	00d2      	lsls	r2, r2, #3
 80046cc:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80046d0:	4411      	add	r1, r2
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	e9c1 2300 	strd	r2, r3, [r1]
	for(i = 0; i < 9; i++)
 80046da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046de:	3301      	adds	r3, #1
 80046e0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80046e4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	dde6      	ble.n	80046ba <magneto_calculate+0x1286>
	Choleski_LU_Decomposition(Q_1, 3);
 80046ec:	2103      	movs	r1, #3
 80046ee:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80046f2:	f000 fd1d 	bl	8005130 <Choleski_LU_Decomposition>
	Choleski_LU_Inverse(Q_1, 3);
 80046f6:	2103      	movs	r1, #3
 80046f8:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80046fc:	f000 fdee 	bl	80052dc <Choleski_LU_Inverse>

	// Calculate B = Q-1 * U   ( 3x1 = 3x3 * 3x1)
	B = (double*)malloc(3 * sizeof(double));
 8004700:	2018      	movs	r0, #24
 8004702:	f010 ff73 	bl	80155ec <malloc>
 8004706:	4603      	mov	r3, r0
 8004708:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	Multiply_Matrices(B, Q_1, 3, 3, U, 1);
 800470c:	2301      	movs	r3, #1
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2303      	movs	r3, #3
 8004718:	2203      	movs	r2, #3
 800471a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800471e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8004722:	f000 fe50 	bl	80053c6 <Multiply_Matrices>
	B[0] = -B[0];     // x-axis combined bias
 8004726:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	613a      	str	r2, [r7, #16]
 8004730:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800473a:	ed97 7b04 	vldr	d7, [r7, #16]
 800473e:	ed83 7b00 	vstr	d7, [r3]
	B[1] = -B[1];     // y-axis combined bias
 8004742:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004746:	3308      	adds	r3, #8
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004750:	3108      	adds	r1, #8
 8004752:	60ba      	str	r2, [r7, #8]
 8004754:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	ed97 7b02 	vldr	d7, [r7, #8]
 800475e:	ed81 7b00 	vstr	d7, [r1]
	B[2] = -B[2];     // z-axis combined bias
 8004762:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004766:	3310      	adds	r3, #16
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004770:	3110      	adds	r1, #16
 8004772:	603a      	str	r2, [r7, #0]
 8004774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	ed97 7b00 	vldr	d7, [r7]
 800477e:	ed81 7b00 	vstr	d7, [r1]

	// for(i = 0; i < 3; i++)
	//uart_printf_data("\r\r\nCombined bias vector B:\r\r\n");
	//uart_printf_data("%8.2lf %8.2lf %8.2lf \r\r\n", B[0],B[1],B[2]);

	hardiron->axis.x=(float) B[0];
 8004782:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	f7fc fa23 	bl	8000bd8 <__aeabi_d2f>
 8004792:	4602      	mov	r2, r0
 8004794:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004798:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	601a      	str	r2, [r3, #0]
	hardiron->axis.y=(float) B[1];
 80047a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80047a4:	3308      	adds	r3, #8
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	f7fc fa13 	bl	8000bd8 <__aeabi_d2f>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80047b8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
	hardiron->axis.z=(float) B[2];
 80047c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80047c4:	3310      	adds	r3, #16
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f7fc fa03 	bl	8000bd8 <__aeabi_d2f>
 80047d2:	4602      	mov	r2, r0
 80047d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80047d8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	609a      	str	r2, [r3, #8]

	// First calculate QB = Q * B   ( 3x1 = 3x3 * 3x1)
	QB = (double*)malloc(3 * sizeof(double));
 80047e0:	2018      	movs	r0, #24
 80047e2:	f010 ff03 	bl	80155ec <malloc>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	Multiply_Matrices(QB, Q, 3, 3, B, 1);
 80047ec:	2301      	movs	r3, #1
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2303      	movs	r3, #3
 80047f8:	2203      	movs	r2, #3
 80047fa:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80047fe:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8004802:	f000 fde0 	bl	80053c6 <Multiply_Matrices>

	// Then calculate btqb = BT * QB    ( 1x1 = 1x3 * 3x1)
	Multiply_Matrices(&btqb, B, 1, 3, QB, 1);
 8004806:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800480a:	2301      	movs	r3, #1
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2303      	movs	r3, #3
 8004816:	2201      	movs	r2, #1
 8004818:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800481c:	f000 fdd3 	bl	80053c6 <Multiply_Matrices>

	// Calculate hmb = sqrt(btqb - J).
	J = v[9];
 8004820:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004824:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004828:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	hmb = sqrt(btqb - J);
 800482c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004830:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004834:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004838:	f7fb fd3e 	bl	80002b8 <__aeabi_dsub>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	ec43 2b17 	vmov	d7, r2, r3
 8004844:	eeb0 0a47 	vmov.f32	s0, s14
 8004848:	eef0 0a67 	vmov.f32	s1, s15
 800484c:	f013 fd5a 	bl	8018304 <sqrt>
 8004850:	ed87 0b4c 	vstr	d0, [r7, #304]	; 0x130

	// Calculate SQ, the square root of matrix Q
	SSSS = (double*)malloc(3 * 3 * sizeof(double));
 8004854:	2048      	movs	r0, #72	; 0x48
 8004856:	f010 fec9 	bl	80155ec <malloc>
 800485a:	4603      	mov	r3, r0
 800485c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	Hessenberg_Form_Elementary(Q, SSSS, 3);
 8004860:	2203      	movs	r2, #3
 8004862:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8004866:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800486a:	f000 fe47 	bl	80054fc <Hessenberg_Form_Elementary>

	eigen_real3 = (double*)malloc(3 * sizeof(double));
 800486e:	2018      	movs	r0, #24
 8004870:	f010 febc 	bl	80155ec <malloc>
 8004874:	4603      	mov	r3, r0
 8004876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	eigen_imag3 = (double*)malloc(3 * sizeof(double));
 800487a:	2018      	movs	r0, #24
 800487c:	f010 feb6 	bl	80155ec <malloc>
 8004880:	4603      	mov	r3, r0
 8004882:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	QR_Hessenberg_Matrix(Q, SSSS, eigen_real3, eigen_imag3, 3, 100);
 8004886:	2364      	movs	r3, #100	; 0x64
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	2303      	movs	r3, #3
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004892:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004896:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800489a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800489e:	f001 f869 	bl	8005974 <QR_Hessenberg_Matrix>

	// normalize eigenvectors
	norm1 = sqrt(SSSS[0] * SSSS[0] + SSSS[3] * SSSS[3] + SSSS[6] * SSSS[6]);
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f7fb feb9 	bl	8000628 <__aeabi_dmul>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4614      	mov	r4, r2
 80048bc:	461d      	mov	r5, r3
 80048be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c2:	3318      	adds	r3, #24
 80048c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048cc:	3318      	adds	r3, #24
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fb fea9 	bl	8000628 <__aeabi_dmul>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	f7fb fced 	bl	80002bc <__adddf3>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4614      	mov	r4, r2
 80048e8:	461d      	mov	r5, r3
 80048ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ee:	3330      	adds	r3, #48	; 0x30
 80048f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f8:	3330      	adds	r3, #48	; 0x30
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f7fb fe93 	bl	8000628 <__aeabi_dmul>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4620      	mov	r0, r4
 8004908:	4629      	mov	r1, r5
 800490a:	f7fb fcd7 	bl	80002bc <__adddf3>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	ec43 2b17 	vmov	d7, r2, r3
 8004916:	eeb0 0a47 	vmov.f32	s0, s14
 800491a:	eef0 0a67 	vmov.f32	s1, s15
 800491e:	f013 fcf1 	bl	8018304 <sqrt>
 8004922:	ed87 0b46 	vstr	d0, [r7, #280]	; 0x118
	SSSS[0] /= norm1;
 8004926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800492e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004932:	f7fb ffa3 	bl	800087c <__aeabi_ddiv>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800493e:	e9c1 2300 	strd	r2, r3, [r1]
	SSSS[3] /= norm1;
 8004942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004946:	3318      	adds	r3, #24
 8004948:	e9d3 0100 	ldrd	r0, r1, [r3]
 800494c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004950:	f103 0418 	add.w	r4, r3, #24
 8004954:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004958:	f7fb ff90 	bl	800087c <__aeabi_ddiv>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	e9c4 2300 	strd	r2, r3, [r4]
	SSSS[6] /= norm1;
 8004964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004968:	3330      	adds	r3, #48	; 0x30
 800496a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800496e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004972:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004976:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800497a:	f7fb ff7f 	bl	800087c <__aeabi_ddiv>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	e9c4 2300 	strd	r2, r3, [r4]
	norm2 = sqrt(SSSS[1] * SSSS[1] + SSSS[4] * SSSS[4] + SSSS[7] * SSSS[7]);
 8004986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498a:	3308      	adds	r3, #8
 800498c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004994:	3308      	adds	r3, #8
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fe45 	bl	8000628 <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4614      	mov	r4, r2
 80049a4:	461d      	mov	r5, r3
 80049a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049aa:	3320      	adds	r3, #32
 80049ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b4:	3320      	adds	r3, #32
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f7fb fe35 	bl	8000628 <__aeabi_dmul>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4620      	mov	r0, r4
 80049c4:	4629      	mov	r1, r5
 80049c6:	f7fb fc79 	bl	80002bc <__adddf3>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4614      	mov	r4, r2
 80049d0:	461d      	mov	r5, r3
 80049d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d6:	3338      	adds	r3, #56	; 0x38
 80049d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e0:	3338      	adds	r3, #56	; 0x38
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb fe1f 	bl	8000628 <__aeabi_dmul>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4620      	mov	r0, r4
 80049f0:	4629      	mov	r1, r5
 80049f2:	f7fb fc63 	bl	80002bc <__adddf3>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	ec43 2b17 	vmov	d7, r2, r3
 80049fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a02:	461c      	mov	r4, r3
 8004a04:	eeb0 0a47 	vmov.f32	s0, s14
 8004a08:	eef0 0a67 	vmov.f32	s1, s15
 8004a0c:	f013 fc7a 	bl	8018304 <sqrt>
 8004a10:	ed84 0b00 	vstr	d0, [r4]
	SSSS[1] /= norm2;
 8004a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a18:	3308      	adds	r3, #8
 8004a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a22:	f103 0408 	add.w	r4, r3, #8
 8004a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f7fb ff25 	bl	800087c <__aeabi_ddiv>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	e9c4 2300 	strd	r2, r3, [r4]
	SSSS[4] /= norm2;
 8004a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a3e:	3320      	adds	r3, #32
 8004a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a48:	f103 0420 	add.w	r4, r3, #32
 8004a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f7fb ff12 	bl	800087c <__aeabi_ddiv>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	e9c4 2300 	strd	r2, r3, [r4]
	SSSS[7] /= norm2;
 8004a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a64:	3338      	adds	r3, #56	; 0x38
 8004a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8004a72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f7fb feff 	bl	800087c <__aeabi_ddiv>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	e9c4 2300 	strd	r2, r3, [r4]
	norm3 = sqrt(SSSS[2] * SSSS[2] + SSSS[5] * SSSS[5] + SSSS[8] * SSSS[8]);
 8004a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a94:	3310      	adds	r3, #16
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fdc5 	bl	8000628 <__aeabi_dmul>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4614      	mov	r4, r2
 8004aa4:	461d      	mov	r5, r3
 8004aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aaa:	3328      	adds	r3, #40	; 0x28
 8004aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab4:	3328      	adds	r3, #40	; 0x28
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb fdb5 	bl	8000628 <__aeabi_dmul>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f7fb fbf9 	bl	80002bc <__adddf3>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4614      	mov	r4, r2
 8004ad0:	461d      	mov	r5, r3
 8004ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad6:	3340      	adds	r3, #64	; 0x40
 8004ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae0:	3340      	adds	r3, #64	; 0x40
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fd9f 	bl	8000628 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4620      	mov	r0, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	f7fb fbe3 	bl	80002bc <__adddf3>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	ec43 2b17 	vmov	d7, r2, r3
 8004afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b02:	461c      	mov	r4, r3
 8004b04:	eeb0 0a47 	vmov.f32	s0, s14
 8004b08:	eef0 0a67 	vmov.f32	s1, s15
 8004b0c:	f013 fbfa 	bl	8018304 <sqrt>
 8004b10:	ed04 0b02 	vstr	d0, [r4, #-8]
	SSSS[2] /= norm3;
 8004b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b18:	3310      	adds	r3, #16
 8004b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b22:	f103 0410 	add.w	r4, r3, #16
 8004b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b2e:	f7fb fea5 	bl	800087c <__aeabi_ddiv>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	e9c4 2300 	strd	r2, r3, [r4]
	SSSS[5] /= norm3;
 8004b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3e:	3328      	adds	r3, #40	; 0x28
 8004b40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b48:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8004b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b54:	f7fb fe92 	bl	800087c <__aeabi_ddiv>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	e9c4 2300 	strd	r2, r3, [r4]
	SSSS[8] /= norm3;
 8004b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b64:	3340      	adds	r3, #64	; 0x40
 8004b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b7a:	f7fb fe7f 	bl	800087c <__aeabi_ddiv>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	e9c4 2300 	strd	r2, r3, [r4]

	Dz = (double*)malloc(3 * 3 * sizeof(double));
 8004b86:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004b8a:	f5a3 7486 	sub.w	r4, r3, #268	; 0x10c
 8004b8e:	2048      	movs	r0, #72	; 0x48
 8004b90:	f010 fd2c 	bl	80155ec <malloc>
 8004b94:	4603      	mov	r3, r0
 8004b96:	6023      	str	r3, [r4, #0]
	for(i = 0; i < 9; i++)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004b9e:	e013      	b.n	8004bc8 <magneto_calculate+0x1794>
		Dz[i] = 0.0;
 8004ba0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8004baa:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	18d1      	adds	r1, r2, r3
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9c1 2300 	strd	r2, r3, [r1]
	for(i = 0; i < 9; i++)
 8004bbe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004bc8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	dde7      	ble.n	8004ba0 <magneto_calculate+0x176c>
	Dz[0] = sqrt(eigen_real3[0]);
 8004bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bd4:	ed93 7b00 	vldr	d7, [r3]
 8004bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004bdc:	eef0 0a67 	vmov.f32	s1, s15
 8004be0:	f013 fb90 	bl	8018304 <sqrt>
 8004be4:	eeb0 7a40 	vmov.f32	s14, s0
 8004be8:	eef0 7a60 	vmov.f32	s15, s1
 8004bec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004bf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	ed83 7b00 	vstr	d7, [r3]
	Dz[4] = sqrt(eigen_real3[1]);
 8004bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bfe:	3308      	adds	r3, #8
 8004c00:	ed93 7b00 	vldr	d7, [r3]
 8004c04:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004c08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f103 0420 	add.w	r4, r3, #32
 8004c12:	eeb0 0a47 	vmov.f32	s0, s14
 8004c16:	eef0 0a67 	vmov.f32	s1, s15
 8004c1a:	f013 fb73 	bl	8018304 <sqrt>
 8004c1e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c22:	eef0 7a60 	vmov.f32	s15, s1
 8004c26:	ed84 7b00 	vstr	d7, [r4]
	Dz[8] = sqrt(eigen_real3[2]);
 8004c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c2e:	3310      	adds	r3, #16
 8004c30:	ed93 7b00 	vldr	d7, [r3]
 8004c34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004c38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004c42:	eeb0 0a47 	vmov.f32	s0, s14
 8004c46:	eef0 0a67 	vmov.f32	s1, s15
 8004c4a:	f013 fb5b 	bl	8018304 <sqrt>
 8004c4e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c52:	eef0 7a60 	vmov.f32	s15, s1
 8004c56:	ed84 7b00 	vstr	d7, [r4]

	vdz = (double*)malloc(3 * 3 * sizeof(double));
 8004c5a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004c5e:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 8004c62:	2048      	movs	r0, #72	; 0x48
 8004c64:	f010 fcc2 	bl	80155ec <malloc>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	6023      	str	r3, [r4, #0]
	Multiply_Matrices(vdz, SSSS, 3, 3, Dz, 3);
 8004c6c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004c70:	f5a3 7088 	sub.w	r0, r3, #272	; 0x110
 8004c74:	2303      	movs	r3, #3
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004c7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2303      	movs	r3, #3
 8004c86:	2203      	movs	r2, #3
 8004c88:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f000 fb9a 	bl	80053c6 <Multiply_Matrices>

	Transpose_Square_Matrix(SSSS, 3);
 8004c92:	2103      	movs	r1, #3
 8004c94:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004c98:	f003 fa89 	bl	80081ae <Transpose_Square_Matrix>

	SQ = (double*)malloc(3 * 3 * sizeof(double));
 8004c9c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004ca0:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 8004ca4:	2048      	movs	r0, #72	; 0x48
 8004ca6:	f010 fca1 	bl	80155ec <malloc>
 8004caa:	4603      	mov	r3, r0
 8004cac:	6023      	str	r3, [r4, #0]
	Multiply_Matrices(SQ, vdz, 3, 3, SSSS, 3);
 8004cae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004cb2:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8004cb6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004cba:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2303      	movs	r3, #3
 8004cca:	2203      	movs	r2, #3
 8004ccc:	6809      	ldr	r1, [r1, #0]
 8004cce:	6800      	ldr	r0, [r0, #0]
 8004cd0:	f000 fb79 	bl	80053c6 <Multiply_Matrices>

	// hm = 0.569;
	A_1 = (double*)malloc(3 * 3 * sizeof(double));
 8004cd4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004cd8:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8004cdc:	2048      	movs	r0, #72	; 0x48
 8004cde:	f010 fc85 	bl	80155ec <malloc>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	6023      	str	r3, [r4, #0]

	for(i = 0; i < 9; i++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004cec:	e028      	b.n	8004d40 <magneto_calculate+0x190c>
		A_1[i] = SQ[i] * hm / hmb;
 8004cee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8004cf8:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	4413      	add	r3, r2
 8004d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d04:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8004d08:	f7fb fc8e 	bl	8000628 <__aeabi_dmul>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8004d1e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	18d4      	adds	r4, r2, r3
 8004d26:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8004d2a:	f7fb fda7 	bl	800087c <__aeabi_ddiv>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	e9c4 2300 	strd	r2, r3, [r4]
	for(i = 0; i < 9; i++)
 8004d36:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004d40:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	ddd2      	ble.n	8004cee <magneto_calculate+0x18ba>

	//uart_printf_data("\r\r\nCorrection matrix Ainv, using Hm=%8.1f:\r\r\n",hm);
	for(i = 0; i < 3; i++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004d4e:	e016      	b.n	8004d7e <magneto_calculate+0x194a>
	//uart_printf_data("\r\r\n float B[3]\r\r\n {%8.2lf,%8.2lf,%8.2lf};\r\r\n",B[0],B[1],B[2]);
	//uart_printf_data("\r\r\n float Ainv[3][3]\r\r\n  {{%9.5lf,%9.5lf,%9.5lf},\r\r\n",A_1[0],A_1[1],A_1[2]);
	//uart_printf_data("  {%9.5lf,%9.5lf,%9.5lf},\r\r\n",A_1[3],A_1[4],A_1[5]);
	//uart_printf_data("  {%9.5lf,%9.5lf,%9.5lf}};\r\r\n",A_1[6],A_1[7],A_1[8]);

	softiron->element.xx = (float) A_1[0];
 8004d50:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004d54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fb ff39 	bl	8000bd8 <__aeabi_d2f>
 8004d66:	4602      	mov	r2, r0
 8004d68:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004d6c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 3; i++)
 8004d74:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004d7e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	dde4      	ble.n	8004d50 <magneto_calculate+0x191c>
	softiron->element.xy = (float) A_1[1];
 8004d86:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004d8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7fb ff1d 	bl	8000bd8 <__aeabi_d2f>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004da4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	605a      	str	r2, [r3, #4]
	softiron->element.xz = (float) A_1[2];
 8004dac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004db0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3310      	adds	r3, #16
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7fb ff0a 	bl	8000bd8 <__aeabi_d2f>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004dca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	609a      	str	r2, [r3, #8]

	softiron->element.yx = (float) A_1[3];
 8004dd2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004dd6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3318      	adds	r3, #24
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	f7fb fef7 	bl	8000bd8 <__aeabi_d2f>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004df0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60da      	str	r2, [r3, #12]
	softiron->element.yy = (float) A_1[4];
 8004df8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004dfc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3320      	adds	r3, #32
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f7fb fee4 	bl	8000bd8 <__aeabi_d2f>
 8004e10:	4602      	mov	r2, r0
 8004e12:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]
	softiron->element.yz = (float) A_1[5];
 8004e1e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3328      	adds	r3, #40	; 0x28
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	f7fb fed1 	bl	8000bd8 <__aeabi_d2f>
 8004e36:	4602      	mov	r2, r0
 8004e38:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e3c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	615a      	str	r2, [r3, #20]

	softiron->element.zx = (float) A_1[6];
 8004e44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3330      	adds	r3, #48	; 0x30
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	4610      	mov	r0, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	f7fb febe 	bl	8000bd8 <__aeabi_d2f>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	619a      	str	r2, [r3, #24]
	softiron->element.zy = (float) A_1[7];
 8004e6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3338      	adds	r3, #56	; 0x38
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f7fb feab 	bl	8000bd8 <__aeabi_d2f>
 8004e82:	4602      	mov	r2, r0
 8004e84:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e88:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	61da      	str	r2, [r3, #28]
	softiron->element.zz = (float) A_1[8];
 8004e90:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004e94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3340      	adds	r3, #64	; 0x40
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7fb fe98 	bl	8000bd8 <__aeabi_d2f>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004eae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	621a      	str	r2, [r3, #32]


	free(D);
 8004eb6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004eba:	f010 fb9f 	bl	80155fc <free>
	free(S);
 8004ebe:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8004ec2:	f010 fb9b 	bl	80155fc <free>
	free(C);
 8004ec6:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8004eca:	f010 fb97 	bl	80155fc <free>
	free(S11);
 8004ece:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8004ed2:	f010 fb93 	bl	80155fc <free>
	free(S12);
 8004ed6:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8004eda:	f010 fb8f 	bl	80155fc <free>
	free(S12t);
 8004ede:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8004ee2:	f010 fb8b 	bl	80155fc <free>
	free(S22);
 8004ee6:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8004eea:	f010 fb87 	bl	80155fc <free>
	free(S22_1);
 8004eee:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004ef2:	f010 fb83 	bl	80155fc <free>
	free(S22a);
 8004ef6:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 8004efa:	f010 fb7f 	bl	80155fc <free>
	free(S22b);
 8004efe:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8004f02:	f010 fb7b 	bl	80155fc <free>
	free(SS);
 8004f06:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8004f0a:	f010 fb77 	bl	80155fc <free>
	free(E);
 8004f0e:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004f12:	f010 fb73 	bl	80155fc <free>
	free(U);
 8004f16:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8004f1a:	f010 fb6f 	bl	80155fc <free>
	free(SSS);
 8004f1e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8004f22:	f010 fb6b 	bl	80155fc <free>
	free(eigen_real);
 8004f26:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8004f2a:	f010 fb67 	bl	80155fc <free>
	free(eigen_imag);
 8004f2e:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8004f32:	f010 fb63 	bl	80155fc <free>
	free(v1);
 8004f36:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8004f3a:	f010 fb5f 	bl	80155fc <free>
	free(v2);
 8004f3e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8004f42:	f010 fb5b 	bl	80155fc <free>
	free(v);
 8004f46:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004f4a:	f010 fb57 	bl	80155fc <free>
	free(Q);
 8004f4e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004f52:	f010 fb53 	bl	80155fc <free>
	free(Q_1);
 8004f56:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004f5a:	f010 fb4f 	bl	80155fc <free>
	free(B);
 8004f5e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8004f62:	f010 fb4b 	bl	80155fc <free>
	free(QB);
 8004f66:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8004f6a:	f010 fb47 	bl	80155fc <free>
	free(SSSS);
 8004f6e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004f72:	f010 fb43 	bl	80155fc <free>
	free(eigen_real3);
 8004f76:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004f7a:	f010 fb3f 	bl	80155fc <free>
	free(eigen_imag3);
 8004f7e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004f82:	f010 fb3b 	bl	80155fc <free>
	free(Dz);
 8004f86:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004f8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	f010 fb34 	bl	80155fc <free>
	free(vdz);
 8004f94:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004f98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f010 fb2d 	bl	80155fc <free>
	free(SQ);
 8004fa2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004fa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	f010 fb26 	bl	80155fc <free>
	free(A_1);
 8004fb0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004fb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f010 fb1f 	bl	80155fc <free>
	return 0;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004fcc <Copy_Vector>:
////////////////////////////////////////////////////////////////////////////////

#include <string.h>                                 // required for memcpy()

void Copy_Vector(double *d, double *s, int n)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
	memcpy(d, s, sizeof(double) * n);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f011 f9da 	bl	801639a <memcpy>
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <Multiply_Self_Transpose>:
//                                                                            //
//     Multiply_Self_Transpose(&C[0][0], &A[0][0], M, N);                     //
//     uart_printf_data("The matrix C = AA ' is \r\n"); ...                               //
////////////////////////////////////////////////////////////////////////////////
void Multiply_Self_Transpose(double *C, double *A, int nrows, int ncols)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b08e      	sub	sp, #56	; 0x38
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
	int i,j,k;
	double *pA;
	double *p_A = A;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
	double *pB;
	double *pCdiag = C;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	61fb      	str	r3, [r7, #28]
	double *pC = C;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	61bb      	str	r3, [r7, #24]
	double *pCt;

	for (i = 0; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {
 8005008:	2300      	movs	r3, #0
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
 800500c:	e057      	b.n	80050be <Multiply_Self_Transpose+0xd0>
		pC = pCdiag;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	61bb      	str	r3, [r7, #24]
		pCt = pCdiag;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	617b      	str	r3, [r7, #20]
		pB = p_A;
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	623b      	str	r3, [r7, #32]
		for (j = i; j < nrows; pC++, pCt += nrows, j++) {
 800501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
 800501e:	e03f      	b.n	80050a0 <Multiply_Self_Transpose+0xb2>
			pA = p_A;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
			*pC = 0.0;
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9c1 2300 	strd	r2, r3, [r1]
			for (k = 0; k < ncols; k++) *pC += *(pA++) * *(pB++);
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005036:	e01e      	b.n	8005076 <Multiply_Self_Transpose+0x88>
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	f103 0208 	add.w	r2, r3, #8
 800503e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f103 0208 	add.w	r2, r3, #8
 800504a:	623a      	str	r2, [r7, #32]
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb faea 	bl	8000628 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb f92b 	bl	80002bc <__adddf3>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	69b9      	ldr	r1, [r7, #24]
 800506c:	e9c1 2300 	strd	r2, r3, [r1]
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	3301      	adds	r3, #1
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	dbdc      	blt.n	8005038 <Multiply_Self_Transpose+0x4a>
			*pCt = *pC;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	6979      	ldr	r1, [r7, #20]
 8005086:	e9c1 2300 	strd	r2, r3, [r1]
		for (j = i; j < nrows; pC++, pCt += nrows, j++) {
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	3308      	adds	r3, #8
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	3301      	adds	r3, #1
 800509e:	633b      	str	r3, [r7, #48]	; 0x30
 80050a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	dbbb      	blt.n	8005020 <Multiply_Self_Transpose+0x32>
	for (i = 0; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3301      	adds	r3, #1
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	3301      	adds	r3, #1
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	dba3      	blt.n	800500e <Multiply_Self_Transpose+0x20>
		}
	}
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	3738      	adds	r7, #56	; 0x38
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <Get_Submatrix>:

#include <string.h>                                    // required for memcpy()

void Get_Submatrix(double *S, int mrows, int mcols,
		double *A, int ncols, int row, int col)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
	int number_of_bytes = sizeof(double) * mcols;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	617b      	str	r3, [r7, #20]

	for (A += row * ncols + col; mrows > 0; A += ncols, S+= mcols, mrows--)
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	fb03 f202 	mul.w	r2, r3, r2
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	e012      	b.n	8005120 <Get_Submatrix+0x50>
		memcpy(S, A, number_of_bytes);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f011 f94a 	bl	801639a <memcpy>
	for (A += row * ncols + col; mrows > 0; A += ncols, S+= mcols, mrows--)
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	4413      	add	r3, r2
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3b01      	subs	r3, #1
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	dce9      	bgt.n	80050fa <Get_Submatrix+0x2a>
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <Choleski_LU_Decomposition>:
//     else { uart_printf_data(" The LLt decomposition of A is \r\n");                    //
//           ...                                                              //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
int Choleski_LU_Decomposition(double *A, int n)
{
 8005130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005132:	b08d      	sub	sp, #52	; 0x34
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	double *p_Lkp;                   // pointer to L[k][p]
	double *p_Lkk;                   // pointer to diagonal element on row k.
	double *p_Li0;                   // pointer to L[i][0]
	double reciprocal;

	for (k = 0, p_Lk0 = A; k < n; p_Lk0 += n, k++) {
 800513a:	2300      	movs	r3, #0
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	623b      	str	r3, [r7, #32]
 8005142:	e0bf      	b.n	80052c4 <Choleski_LU_Decomposition+0x194>

		//            Update pointer to row k diagonal element.

		p_Lkk = p_Lk0 + k;
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	4413      	add	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

		//            Calculate the difference of the diagonal element in row k
		//            from the sum of squares of elements row k from column 0 to
		//            column k-1.

		for (p = 0, p_Lkp = p_Lk0; p < k; p_Lkp += 1,  p++)
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e01b      	b.n	8005190 <Choleski_LU_Decomposition+0x60>
			*p_Lkk -= *p_Lkp * *p_Lkp;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fb fa5d 	bl	8000628 <__aeabi_dmul>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4620      	mov	r0, r4
 8005174:	4629      	mov	r1, r5
 8005176:	f7fb f89f 	bl	80002b8 <__aeabi_dsub>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	6979      	ldr	r1, [r7, #20]
 8005180:	e9c1 2300 	strd	r2, r3, [r1]
		for (p = 0, p_Lkp = p_Lk0; p < k; p_Lkp += 1,  p++)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3308      	adds	r3, #8
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	3301      	adds	r3, #1
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	429a      	cmp	r2, r3
 8005196:	dbdf      	blt.n	8005158 <Choleski_LU_Decomposition+0x28>

		//            If diagonal element is not positive, return the error code,
		//            the matrix is not positive definite symmetric.

		if ( *p_Lkk <= 0.0 ) return -1;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	f7fb fcbb 	bl	8000b20 <__aeabi_dcmple>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <Choleski_LU_Decomposition+0x86>
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	e08c      	b.n	80052d0 <Choleski_LU_Decomposition+0x1a0>

		//            Otherwise take the square root of the diagonal element.

		*p_Lkk = sqrt( *p_Lkk );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	ed93 7b00 	vldr	d7, [r3]
 80051bc:	eeb0 0a47 	vmov.f32	s0, s14
 80051c0:	eef0 0a67 	vmov.f32	s1, s15
 80051c4:	f013 f89e 	bl	8018304 <sqrt>
 80051c8:	eeb0 7a40 	vmov.f32	s14, s0
 80051cc:	eef0 7a60 	vmov.f32	s15, s1
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	ed83 7b00 	vstr	d7, [r3]
		reciprocal = 1.0 / *p_Lkk;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	493d      	ldr	r1, [pc, #244]	; (80052d8 <Choleski_LU_Decomposition+0x1a8>)
 80051e2:	f7fb fb4b 	bl	800087c <__aeabi_ddiv>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
		//            between the i,k th element and the inner product of the first
		//            k-1 columns of row i and row k, then divide the difference by
		//            the diagonal element in row k.
		//            Store the transposed element in the upper triangular matrix.

		p_Li0 = p_Lk0 + n;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	6a3a      	ldr	r2, [r7, #32]
 80051f4:	4413      	add	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
		for (i = k + 1; i < n; p_Li0 += n, i++) {
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	3301      	adds	r3, #1
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fe:	e055      	b.n	80052ac <Choleski_LU_Decomposition+0x17c>
			for (p = 0; p < k; p++)
 8005200:	2300      	movs	r3, #0
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	e028      	b.n	8005258 <Choleski_LU_Decomposition+0x128>
				*(p_Li0 + k) -= *(p_Li0 + p) * *(p_Lk0 + p);
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4413      	add	r3, r2
 800520e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	4413      	add	r3, r2
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fb f9fd 	bl	8000628 <__aeabi_dmul>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	18d6      	adds	r6, r2, r3
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4620      	mov	r0, r4
 8005244:	4629      	mov	r1, r5
 8005246:	f7fb f837 	bl	80002b8 <__aeabi_dsub>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	e9c6 2300 	strd	r2, r3, [r6]
			for (p = 0; p < k; p++)
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	3301      	adds	r3, #1
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	429a      	cmp	r2, r3
 800525e:	dbd2      	blt.n	8005206 <Choleski_LU_Decomposition+0xd6>
			*(p_Li0 + k) *= reciprocal;
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4413      	add	r3, r2
 8005268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	18d4      	adds	r4, r2, r3
 8005274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005278:	f7fb f9d6 	bl	8000628 <__aeabi_dmul>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	e9c4 2300 	strd	r2, r3, [r4]
			*(p_Lk0 + i) = *(p_Li0 + k);
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528e:	00d2      	lsls	r2, r2, #3
 8005290:	6a39      	ldr	r1, [r7, #32]
 8005292:	4411      	add	r1, r2
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	e9c1 2300 	strd	r2, r3, [r1]
		for (i = k + 1; i < n; p_Li0 += n, i++) {
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4413      	add	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	3301      	adds	r3, #1
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	dba5      	blt.n	8005200 <Choleski_LU_Decomposition+0xd0>
	for (k = 0, p_Lk0 = A; k < n; p_Lk0 += n, k++) {
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	4413      	add	r3, r2
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	3301      	adds	r3, #1
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	f6ff af3b 	blt.w	8005144 <Choleski_LU_Decomposition+0x14>
		}
	}
	return 0;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3734      	adds	r7, #52	; 0x34
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d8:	3ff00000 	.word	0x3ff00000

080052dc <Choleski_LU_Inverse>:
//           ...                                                              //
//     }                                                                      //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
int Choleski_LU_Inverse(double *LU, int n)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	; 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	int i, j, k;
	double *p_i, *p_j, *p_k;
	double sum;

	if ( Lower_Triangular_Inverse(LU, n) < 0 ) return -1;
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f002 ffa7 	bl	800823c <Lower_Triangular_Inverse>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	da02      	bge.n	80052fa <Choleski_LU_Inverse+0x1e>
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	e061      	b.n	80053be <Choleski_LU_Inverse+0xe2>

	//         Premultiply L inverse by the transpose of L inverse.

	for (i = 0, p_i = LU; i < n; i++, p_i += n) {
 80052fa:	2300      	movs	r3, #0
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e057      	b.n	80053b4 <Choleski_LU_Inverse+0xd8>
		for (j = 0, p_j = LU; j <= i; j++, p_j += n) {
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e046      	b.n	800539c <Choleski_LU_Inverse+0xc0>
			sum = 0.0;
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	e9c7 2302 	strd	r2, r3, [r7, #8]
			for (k = i, p_k = p_i; k < n; k++, p_k += n)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	e01f      	b.n	8005364 <Choleski_LU_Inverse+0x88>
				sum += *(p_k + i) * *(p_k + j);
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f7fb f974 	bl	8000628 <__aeabi_dmul>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005348:	f7fa ffb8 	bl	80002bc <__adddf3>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	e9c7 2302 	strd	r2, r3, [r7, #8]
			for (k = i, p_k = p_i; k < n; k++, p_k += n)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	3301      	adds	r3, #1
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	dbdb      	blt.n	8005324 <Choleski_LU_Inverse+0x48>
			*(p_i + j) = sum;
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	18d1      	adds	r1, r2, r3
 8005374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005378:	e9c1 2300 	strd	r2, r3, [r1]
			*(p_j + i) = sum;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	18d1      	adds	r1, r2, r3
 8005384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005388:	e9c1 2300 	strd	r2, r3, [r1]
		for (j = 0, p_j = LU; j <= i; j++, p_j += n) {
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	3301      	adds	r3, #1
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	429a      	cmp	r2, r3
 80053a2:	ddb4      	ble.n	800530e <Choleski_LU_Inverse+0x32>
	for (i = 0, p_i = LU; i < n; i++, p_i += n) {
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	3301      	adds	r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4413      	add	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	dba3      	blt.n	8005304 <Choleski_LU_Inverse+0x28>
		}
	}

	return 0;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3728      	adds	r7, #40	; 0x28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <Multiply_Matrices>:
//     Multiply_Matrices(&C[0][0], &A[0][0], M, N, &B[0][0], NB);             //
//     uart_printf_data("The matrix C is \r\n"); ...                                      //
////////////////////////////////////////////////////////////////////////////////
void Multiply_Matrices(double *C, double *A, int nrows, int ncols,
		double *B, int mcols)
{
 80053c6:	b5b0      	push	{r4, r5, r7, lr}
 80053c8:	b08a      	sub	sp, #40	; 0x28
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	603b      	str	r3, [r7, #0]
	double *pB;
	double *p_B;
	int i,j,k;

	for (i = 0; i < nrows; A += ncols, i++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	e04a      	b.n	8005470 <Multiply_Matrices+0xaa>
		for (p_B = B, j = 0; j < mcols; C++, p_B++, j++) {
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	623b      	str	r3, [r7, #32]
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	e039      	b.n	8005458 <Multiply_Matrices+0x92>
			pB = p_B;
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
			*C = 0.0;
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9c1 2300 	strd	r2, r3, [r1]
			for (k = 0; k < ncols; pB += mcols, k++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	e020      	b.n	800543e <Multiply_Matrices+0x78>
				*C += *(A+k) * *pB;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4413      	add	r3, r2
 800540a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fb f908 	bl	8000628 <__aeabi_dmul>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	f7fa ff4c 	bl	80002bc <__adddf3>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	e9c1 2300 	strd	r2, r3, [r1]
			for (k = 0; k < ncols; pB += mcols, k++)
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005434:	4413      	add	r3, r2
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3301      	adds	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	dbda      	blt.n	80053fc <Multiply_Matrices+0x36>
		for (p_B = B, j = 0; j < mcols; C++, p_B++, j++) {
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3308      	adds	r3, #8
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	3308      	adds	r3, #8
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	3301      	adds	r3, #1
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	429a      	cmp	r2, r3
 800545e:	dbc1      	blt.n	80053e4 <Multiply_Matrices+0x1e>
	for (i = 0; i < nrows; A += ncols, i++)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	4413      	add	r3, r2
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3301      	adds	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	dbb0      	blt.n	80053da <Multiply_Matrices+0x14>
		}
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3728      	adds	r7, #40	; 0x28
 800547e:	46bd      	mov	sp, r7
 8005480:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005484 <Identity_Matrix>:
//                                                                            //
//     Identity_Matrix(&A[0][0], N);                                          //
//     uart_printf_data("The matrix A is \r\n"); ...                                      //
////////////////////////////////////////////////////////////////////////////////
void Identity_Matrix(double *A, int n)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
	int i,j;

	for (i = 0; i < n - 1; i++) {
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e01f      	b.n	80054d4 <Identity_Matrix+0x50>
		*A++ = 1.0;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f103 0208 	add.w	r2, r3, #8
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	f04f 0000 	mov.w	r0, #0
 80054a0:	4915      	ldr	r1, [pc, #84]	; (80054f8 <Identity_Matrix+0x74>)
 80054a2:	e9c3 0100 	strd	r0, r1, [r3]
		for (j = 0; j < n; j++) *A++ = 0.0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	e00c      	b.n	80054c6 <Identity_Matrix+0x42>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f103 0208 	add.w	r2, r3, #8
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	f04f 0000 	mov.w	r0, #0
 80054b8:	f04f 0100 	mov.w	r1, #0
 80054bc:	e9c3 0100 	strd	r0, r1, [r3]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	dbee      	blt.n	80054ac <Identity_Matrix+0x28>
	for (i = 0; i < n - 1; i++) {
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	429a      	cmp	r2, r3
 80054dc:	dbda      	blt.n	8005494 <Identity_Matrix+0x10>
	}
	*A = 1.0;
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <Identity_Matrix+0x74>)
 80054e6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	3ff00000 	.word	0x3ff00000

080054fc <Hessenberg_Form_Elementary>:
//     }                                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
int Hessenberg_Form_Elementary(double *A, double* S, int n)
{
 80054fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005500:	b097      	sub	sp, #92	; 0x5c
 8005502:	af02      	add	r7, sp, #8
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
	double s;
	double *pA, *pB, *pC, *pS;

	// n x n matrices for which n <= 2 are already in Hessenberg form

	if (n <= 1) { *S = 1.0; return 0; }
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	dc07      	bgt.n	8005520 <Hessenberg_Form_Elementary+0x24>
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	4b83      	ldr	r3, [pc, #524]	; (8005724 <Hessenberg_Form_Elementary+0x228>)
 8005518:	e9c1 2300 	strd	r2, r3, [r1]
 800551c:	2300      	movs	r3, #0
 800551e:	e17d      	b.n	800581c <Hessenberg_Form_Elementary+0x320>
	if (n == 2) { *S++ = 1.0; *S++ = 0.0; *S++ = 1.0; *S = 0.0; return 0; }
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d124      	bne.n	8005570 <Hessenberg_Form_Elementary+0x74>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f103 0208 	add.w	r2, r3, #8
 800552c:	60ba      	str	r2, [r7, #8]
 800552e:	f04f 0000 	mov.w	r0, #0
 8005532:	497c      	ldr	r1, [pc, #496]	; (8005724 <Hessenberg_Form_Elementary+0x228>)
 8005534:	e9c3 0100 	strd	r0, r1, [r3]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f103 0208 	add.w	r2, r3, #8
 800553e:	60ba      	str	r2, [r7, #8]
 8005540:	f04f 0000 	mov.w	r0, #0
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	e9c3 0100 	strd	r0, r1, [r3]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f103 0208 	add.w	r2, r3, #8
 8005552:	60ba      	str	r2, [r7, #8]
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	4972      	ldr	r1, [pc, #456]	; (8005724 <Hessenberg_Form_Elementary+0x228>)
 800555a:	e9c3 0100 	strd	r0, r1, [r3]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9c1 2300 	strd	r2, r3, [r1]
 800556c:	2300      	movs	r3, #0
 800556e:	e155      	b.n	800581c <Hessenberg_Form_Elementary+0x320>

	// Allocate working memory

	perm = (int*) malloc(n * sizeof(int));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4618      	mov	r0, r3
 8005576:	f010 f839 	bl	80155ec <malloc>
 800557a:	4603      	mov	r3, r0
 800557c:	61fb      	str	r3, [r7, #28]
	if (perm == NULL) return -1;             // not enough memory
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <Hessenberg_Form_Elementary+0x8e>
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	e148      	b.n	800581c <Hessenberg_Form_Elementary+0x320>

	// For each column use Elementary transformations
	//   to zero the entries below the subdiagonal.

	p_row = A + n;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	643b      	str	r3, [r7, #64]	; 0x40
	pS_row = S + n;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	4413      	add	r3, r2
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (col = 0; col < (n - 2); p_row += n, pS_row += n, col++) {
 800559e:	2300      	movs	r3, #0
 80055a0:	647b      	str	r3, [r7, #68]	; 0x44
 80055a2:	e106      	b.n	80057b2 <Hessenberg_Form_Elementary+0x2b6>

		// Find the row in column "col" with maximum magnitude where
		// row >= col + 1.

		row = col + 1;
 80055a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a6:	3301      	adds	r3, #1
 80055a8:	61bb      	str	r3, [r7, #24]
		perm[row] = row;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	601a      	str	r2, [r3, #0]
		for (pA = p_row + col, max = 0.0, i = row; i < n; pA += n, i++)
 80055b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055bc:	4413      	add	r3, r2
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d0:	e024      	b.n	800561c <Hessenberg_Form_Elementary+0x120>
			if (fabs(*pA) > max) { perm[row] = i; max = fabs(*pA); }
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	4614      	mov	r4, r2
 80055da:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80055e6:	f7fb fa91 	bl	8000b0c <__aeabi_dcmplt>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <Hessenberg_Form_Elementary+0x110>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	4611      	mov	r1, r2
 8005604:	6339      	str	r1, [r7, #48]	; 0x30
 8005606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
		for (pA = p_row + col, max = 0.0, i = row; i < n; pA += n, i++)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005612:	4413      	add	r3, r2
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	3301      	adds	r3, #1
 800561a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	dbd6      	blt.n	80055d2 <Hessenberg_Form_Elementary+0xd6>

		// If perm[row] != row, then interchange row "row" and row
		// perm[row] and interchange column "row" and column perm[row].

		if ( perm[row] != row ) {
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	429a      	cmp	r2, r3
 8005632:	d015      	beq.n	8005660 <Hessenberg_Form_Elementary+0x164>
			Interchange_Rows(A, row, perm[row], n);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f002 fedc 	bl	8008400 <Interchange_Rows>
			Interchange_Columns(A, row, perm[row], n, n);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f002 fe94 	bl	8008388 <Interchange_Columns>
		}

		// Zero out the components lying below the subdiagonal.

		pA = p_row + n;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005666:	4413      	add	r3, r2
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
		pS = pS_row + n;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005670:	4413      	add	r3, r2
 8005672:	623b      	str	r3, [r7, #32]
		for (i = col + 2; i < n; pA += n, pS += n, i++) {
 8005674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005676:	3302      	adds	r3, #2
 8005678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800567a:	e088      	b.n	800578e <Hessenberg_Form_Elementary+0x292>
			s = *(pA + col) / *(p_row + col);
 800567c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005682:	4413      	add	r3, r2
 8005684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800568e:	4413      	add	r3, r2
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f7fb f8f2 	bl	800087c <__aeabi_ddiv>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			for (j = 0; j < n; j++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a4:	e024      	b.n	80056f0 <Hessenberg_Form_Elementary+0x1f4>
				*(pA + j) -= *(p_row + j) * s;
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ac:	4413      	add	r3, r2
 80056ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056b8:	4413      	add	r3, r2
 80056ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056c2:	f7fa ffb1 	bl	8000628 <__aeabi_dmul>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	18d6      	adds	r6, r2, r3
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f7fa fdeb 	bl	80002b8 <__aeabi_dsub>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	e9c6 2300 	strd	r2, r3, [r6]
			for (j = 0; j < n; j++)
 80056ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ec:	3301      	adds	r3, #1
 80056ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	dbd6      	blt.n	80056a6 <Hessenberg_Form_Elementary+0x1aa>
			*(pS + col) = s;
 80056f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	6a3a      	ldr	r2, [r7, #32]
 80056fe:	18d1      	adds	r1, r2, r3
 8005700:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005704:	e9c1 2300 	strd	r2, r3, [r1]
			for (j = 0, pB = A + col + 1, pC = A + i; j < n; pB +=n, pC += n, j++)
 8005708:	2300      	movs	r3, #0
 800570a:	64bb      	str	r3, [r7, #72]	; 0x48
 800570c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570e:	3301      	adds	r3, #1
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
 8005718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
 8005722:	e023      	b.n	800576c <Hessenberg_Form_Elementary+0x270>
 8005724:	3ff00000 	.word	0x3ff00000
				*pB += s * *pC;
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005734:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005738:	f7fa ff76 	bl	8000628 <__aeabi_dmul>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	f7fa fdba 	bl	80002bc <__adddf3>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800574e:	e9c1 2300 	strd	r2, r3, [r1]
			for (j = 0, pB = A + col + 1, pC = A + i; j < n; pB +=n, pC += n, j++)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005758:	4413      	add	r3, r2
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	4413      	add	r3, r2
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
 8005766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005768:	3301      	adds	r3, #1
 800576a:	64bb      	str	r3, [r7, #72]	; 0x48
 800576c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	dbd9      	blt.n	8005728 <Hessenberg_Form_Elementary+0x22c>
		for (i = col + 2; i < n; pA += n, pS += n, i++) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577a:	4413      	add	r3, r2
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	4413      	add	r3, r2
 8005786:	623b      	str	r3, [r7, #32]
 8005788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578a:	3301      	adds	r3, #1
 800578c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	f6ff af72 	blt.w	800567c <Hessenberg_Form_Elementary+0x180>
	for (col = 0; col < (n - 2); p_row += n, pS_row += n, col++) {
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800579e:	4413      	add	r3, r2
 80057a0:	643b      	str	r3, [r7, #64]	; 0x40
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057a8:	4413      	add	r3, r2
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ae:	3301      	adds	r3, #1
 80057b0:	647b      	str	r3, [r7, #68]	; 0x44
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3b02      	subs	r3, #2
 80057b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b8:	429a      	cmp	r2, r3
 80057ba:	f6ff aef3 	blt.w	80055a4 <Hessenberg_Form_Elementary+0xa8>
		}
	}
	pA = A + n + n;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	pS = S + n + n;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	4413      	add	r3, r2
 80057d0:	623b      	str	r3, [r7, #32]
	for (i = 2; i < n; pA += n, pS += n, i++) Copy_Vector(pA, pS, i - 1);
 80057d2:	2302      	movs	r3, #2
 80057d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d6:	e013      	b.n	8005800 <Hessenberg_Form_Elementary+0x304>
 80057d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057da:	3b01      	subs	r3, #1
 80057dc:	461a      	mov	r2, r3
 80057de:	6a39      	ldr	r1, [r7, #32]
 80057e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057e2:	f7ff fbf3 	bl	8004fcc <Copy_Vector>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	4413      	add	r3, r2
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	4413      	add	r3, r2
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fc:	3301      	adds	r3, #1
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	dbe7      	blt.n	80057d8 <Hessenberg_Form_Elementary+0x2dc>

	Hessenberg_Elementary_Transform(A, S, perm, n);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f80a 	bl	8005828 <Hessenberg_Elementary_Transform>

	free(perm);
 8005814:	69f8      	ldr	r0, [r7, #28]
 8005816:	f00f fef1 	bl	80155fc <free>
	return 0;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3754      	adds	r7, #84	; 0x54
 8005820:	46bd      	mov	sp, r7
 8005822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005826:	bf00      	nop

08005828 <Hessenberg_Elementary_Transform>:
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Hessenberg_Elementary_Transform(double *H, double* S, int perm[],
		int n)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
	int i, j;
	double *pS, *pH;
	double x;

	Identity_Matrix(S, n);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	68b8      	ldr	r0, [r7, #8]
 800583a:	f7ff fe23 	bl	8005484 <Identity_Matrix>
	for (i = n - 2; i >= 1; i--) {
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	3b02      	subs	r3, #2
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e08a      	b.n	800595c <Hessenberg_Elementary_Transform+0x134>
		pH = H + n * (i + 1);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	fb02 f303 	mul.w	r3, r2, r3
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
		pS = S + n * (i + 1);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3301      	adds	r3, #1
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	4413      	add	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
		for (j = i + 1; j < n; pH += n, pS += n, j++) {
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e028      	b.n	80058c4 <Hessenberg_Elementary_Transform+0x9c>
			*(pS + i) = *(pH + i - 1);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005878:	3b01      	subs	r3, #1
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4413      	add	r3, r2
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	00d2      	lsls	r2, r2, #3
 8005884:	6979      	ldr	r1, [r7, #20]
 8005886:	4411      	add	r1, r2
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	e9c1 2300 	strd	r2, r3, [r1]
			*(pH + i - 1) = 0.0;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005896:	3b01      	subs	r3, #1
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	18d1      	adds	r1, r2, r3
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9c1 2300 	strd	r2, r3, [r1]
		for (j = i + 1; j < n; pH += n, pS += n, j++) {
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4413      	add	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	3301      	adds	r3, #1
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	dbd2      	blt.n	8005872 <Hessenberg_Elementary_Transform+0x4a>
		}
		if (perm[i] != i) {
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d03c      	beq.n	8005956 <Hessenberg_Elementary_Transform+0x12e>
			pS = S + n * i;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	fb02 f303 	mul.w	r3, r2, r3
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
			pH = S + n * perm[i];
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4413      	add	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
			for (j = i; j < n; j++) {
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e018      	b.n	800593c <Hessenberg_Elementary_Transform+0x114>
				*(pS + j) = *(pH + j);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	00d2      	lsls	r2, r2, #3
 8005916:	6979      	ldr	r1, [r7, #20]
 8005918:	4411      	add	r1, r2
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	e9c1 2300 	strd	r2, r3, [r1]
				*(pH + j) = 0.0;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	18d1      	adds	r1, r2, r3
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	e9c1 2300 	strd	r2, r3, [r1]
			for (j = i; j < n; j++) {
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	3301      	adds	r3, #1
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	dbe2      	blt.n	800590a <Hessenberg_Elementary_Transform+0xe2>
			}
			*(pH + i) = 1.0;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	18d1      	adds	r1, r2, r3
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <Hessenberg_Elementary_Transform+0x148>)
 8005952:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = n - 2; i >= 1; i--) {
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	3b01      	subs	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f73f af71 	bgt.w	8005846 <Hessenberg_Elementary_Transform+0x1e>
		}
	}
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	3ff00000 	.word	0x3ff00000

08005974 <QR_Hessenberg_Matrix>:
//     if (k < 0) {uart_printf_data("Failed"); exit(1);}                                //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
int QR_Hessenberg_Matrix( double *H, double *S, double eigen_real[],
		double eigen_imag[], int n, int max_iteration_count)
{
 8005974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005978:	b090      	sub	sp, #64	; 0x40
 800597a:	af04      	add	r7, sp, #16
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	603b      	str	r3, [r7, #0]
	int i;
	int row;
	int iteration;
	int found_eigenvalue;
	double shift = 0.0;
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double* pH;

	for ( row = n - 1; row >= 0; row--) {
 8005990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005992:	3b01      	subs	r3, #1
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
 8005996:	e0a9      	b.n	8005aec <QR_Hessenberg_Matrix+0x178>
		found_eigenvalue = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	623b      	str	r3, [r7, #32]
		for (iteration = 1; iteration <= max_iteration_count; iteration++) {
 800599c:	2301      	movs	r3, #1
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
 80059a0:	e093      	b.n	8005aca <QR_Hessenberg_Matrix+0x156>

			// Search for small subdiagonal element

			for (i = row, pH = H + row * n; i > 0; i--, pH -= n)
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e043      	b.n	8005a40 <QR_Hessenberg_Matrix+0xcc>
				if (fabs(*(pH + i - 1 )) <= DBL_EPSILON *
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80059be:	3b01      	subs	r3, #1
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	4614      	mov	r4, r2
 80059cc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
						( fabs(*(pH - n + i - 1)) + fabs(*(pH + i)) ) ) break;
 80059d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80059da:	3b01      	subs	r3, #1
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	4690      	mov	r8, r2
 80059e8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	4692      	mov	sl, r2
 80059fa:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80059fe:	4652      	mov	r2, sl
 8005a00:	465b      	mov	r3, fp
 8005a02:	4640      	mov	r0, r8
 8005a04:	4649      	mov	r1, r9
 8005a06:	f7fa fc59 	bl	80002bc <__adddf3>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
				if (fabs(*(pH + i - 1 )) <= DBL_EPSILON *
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	4b41      	ldr	r3, [pc, #260]	; (8005b1c <QR_Hessenberg_Matrix+0x1a8>)
 8005a18:	f7fa fe06 	bl	8000628 <__aeabi_dmul>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4620      	mov	r0, r4
 8005a22:	4629      	mov	r1, r5
 8005a24:	f7fb f87c 	bl	8000b20 <__aeabi_dcmple>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10c      	bne.n	8005a48 <QR_Hessenberg_Matrix+0xd4>
			for (i = row, pH = H + row * n; i > 0; i--, pH -= n)
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	3b01      	subs	r3, #1
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	425b      	negs	r3, r3
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dcb8      	bgt.n	80059b8 <QR_Hessenberg_Matrix+0x44>
 8005a46:	e000      	b.n	8005a4a <QR_Hessenberg_Matrix+0xd6>
						( fabs(*(pH - n + i - 1)) + fabs(*(pH + i)) ) ) break;
 8005a48:	bf00      	nop
			// element on row "row-1" is small, then the eigenvalues
			// of the 2x2 diagonal block consisting rows "row-1" and
			// "row" are eigenvalues.  Otherwise perform a double QR
			// iteration.

			switch(row - i) {
 8005a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <QR_Hessenberg_Matrix+0xe6>
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d00f      	beq.n	8005a78 <QR_Hessenberg_Matrix+0x104>
 8005a58:	e024      	b.n	8005aa4 <QR_Hessenberg_Matrix+0x130>
			case 0: // One real eigenvalue
				One_Real_Eigenvalue(pH, eigen_real, eigen_imag, i, shift);
 8005a5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005a62:	eef0 0a67 	vmov.f32	s1, s15
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	69f8      	ldr	r0, [r7, #28]
 8005a6e:	f000 f857 	bl	8005b20 <One_Real_Eigenvalue>
				found_eigenvalue = 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	623b      	str	r3, [r7, #32]
				break;
 8005a76:	e022      	b.n	8005abe <QR_Hessenberg_Matrix+0x14a>
			case 1: // Either two real eigenvalues or a complex pair
				row--;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
				Two_Eigenvalues(H, S, eigen_real, eigen_imag, n, row, shift);
 8005a7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8005a8e:	eef0 0a67 	vmov.f32	s1, s15
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f877 	bl	8005b8c <Two_Eigenvalues>
				found_eigenvalue = 1;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	623b      	str	r3, [r7, #32]
				break;
 8005aa2:	e00c      	b.n	8005abe <QR_Hessenberg_Matrix+0x14a>
			default:
				Double_QR_Iteration(H, S, i, row, n, &shift, iteration);
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	9302      	str	r3, [sp, #8]
 8005aa8:	f107 0310 	add.w	r3, r7, #16
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fb71 	bl	80061a0 <Double_QR_Iteration>
			}
			if (found_eigenvalue) break;
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <QR_Hessenberg_Matrix+0x162>
		for (iteration = 1; iteration <= max_iteration_count; iteration++) {
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	f77f af67 	ble.w	80059a2 <QR_Hessenberg_Matrix+0x2e>
 8005ad4:	e000      	b.n	8005ad8 <QR_Hessenberg_Matrix+0x164>
			if (found_eigenvalue) break;
 8005ad6:	bf00      	nop
		}
		if (iteration > max_iteration_count) return -1;
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005adc:	429a      	cmp	r2, r3
 8005ade:	dd02      	ble.n	8005ae6 <QR_Hessenberg_Matrix+0x172>
 8005ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae4:	e015      	b.n	8005b12 <QR_Hessenberg_Matrix+0x19e>
	for ( row = n - 1; row >= 0; row--) {
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f6bf af52 	bge.w	8005998 <QR_Hessenberg_Matrix+0x24>
	}

	BackSubstitution(H, eigen_real, eigen_imag, n);
 8005af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f001 faba 	bl	8007074 <BackSubstitution>
	Calculate_Eigenvectors(H, S, eigen_real, eigen_imag, n);
 8005b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f002 f9ec 	bl	8007ee8 <Calculate_Eigenvectors>

	return 0;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3730      	adds	r7, #48	; 0x30
 8005b16:	46bd      	mov	sp, r7
 8005b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1c:	3cb00000 	.word	0x3cb00000

08005b20 <One_Real_Eigenvalue>:
//            the matrix H.                                                   //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void One_Real_Eigenvalue(double Hrow[], double eigen_real[],
		double eigen_imag[], int row, double shift)
{
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6178      	str	r0, [r7, #20]
 8005b28:	6139      	str	r1, [r7, #16]
 8005b2a:	60fa      	str	r2, [r7, #12]
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	ed87 0b00 	vstr	d0, [r7]
	Hrow[row] += shift;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	18d4      	adds	r4, r2, r3
 8005b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b4a:	f7fa fbb7 	bl	80002bc <__adddf3>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	e9c4 2300 	strd	r2, r3, [r4]
	eigen_real[row] = Hrow[row];
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	00d2      	lsls	r2, r2, #3
 8005b62:	6939      	ldr	r1, [r7, #16]
 8005b64:	4411      	add	r1, r2
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	e9c1 2300 	strd	r2, r3, [r1]
	eigen_imag[row] = 0.0;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	18d1      	adds	r1, r2, r3
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd90      	pop	{r4, r7, pc}
	...

08005b8c <Two_Eigenvalues>:
//            the matrix H.                                                   //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Two_Eigenvalues(double *H, double* S, double eigen_real[],
		double eigen_imag[], int n, int row, double shift)
{
 8005b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8e:	b09b      	sub	sp, #108	; 0x6c
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	61f8      	str	r0, [r7, #28]
 8005b94:	61b9      	str	r1, [r7, #24]
 8005b96:	617a      	str	r2, [r7, #20]
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	ed87 0b02 	vstr	d0, [r7, #8]
	double p, q, x, discriminant, r;
	double cos, sin;
	double *Hrow = H + n * row;
 8005b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ba2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
	double *Hnextrow = Hrow + n;
 8005bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bba:	4413      	add	r3, r2
 8005bbc:	65bb      	str	r3, [r7, #88]	; 0x58
	int nextrow = row + 1;
 8005bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	657b      	str	r3, [r7, #84]	; 0x54

	p = 0.5 * (Hrow[row] - Hnextrow[nextrow]);
 8005bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bce:	4413      	add	r3, r2
 8005bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bda:	4413      	add	r3, r2
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f7fa fb6a 	bl	80002b8 <__aeabi_dsub>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4610      	mov	r0, r2
 8005bea:	4619      	mov	r1, r3
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	4b97      	ldr	r3, [pc, #604]	; (8005e50 <Two_Eigenvalues+0x2c4>)
 8005bf2:	f7fa fd19 	bl	8000628 <__aeabi_dmul>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	x = Hrow[nextrow] * Hnextrow[row];
 8005bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c04:	4413      	add	r3, r2
 8005c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c12:	4413      	add	r3, r2
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fd06 	bl	8000628 <__aeabi_dmul>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	discriminant = p * p + x;
 8005c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c28:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c2c:	f7fa fcfc 	bl	8000628 <__aeabi_dmul>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005c38:	f7fa fb40 	bl	80002bc <__adddf3>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	Hrow[row] += shift;
 8005c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c4c:	4413      	add	r3, r2
 8005c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c5a:	18d6      	adds	r6, r2, r3
 8005c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c60:	f7fa fb2c 	bl	80002bc <__adddf3>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	e9c6 2300 	strd	r2, r3, [r6]
	Hnextrow[nextrow] += shift;
 8005c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c72:	4413      	add	r3, r2
 8005c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c7e:	18d6      	adds	r6, r2, r3
 8005c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c84:	f7fa fb1a 	bl	80002bc <__adddf3>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	e9c6 2300 	strd	r2, r3, [r6]
	if (discriminant > 0.0) {                 // pair of real roots
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005c9c:	f7fa ff54 	bl	8000b48 <__aeabi_dcmpgt>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 80d6 	beq.w	8005e54 <Two_Eigenvalues+0x2c8>
		q = sqrt(discriminant);
 8005ca8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005cac:	f012 fb2a 	bl	8018304 <sqrt>
 8005cb0:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
		if (p < 0.0) q = p - q; else q += p;
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cc0:	f7fa ff24 	bl	8000b0c <__aeabi_dcmplt>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <Two_Eigenvalues+0x154>
 8005cca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005cce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cd2:	f7fa faf1 	bl	80002b8 <__aeabi_dsub>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8005cde:	e009      	b.n	8005cf4 <Two_Eigenvalues+0x168>
 8005ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ce8:	f7fa fae8 	bl	80002bc <__adddf3>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		eigen_real[row] = Hnextrow[nextrow] + q;
 8005cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cfa:	4413      	add	r3, r2
 8005cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	18d4      	adds	r4, r2, r3
 8005d0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005d0e:	f7fa fad5 	bl	80002bc <__adddf3>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	e9c4 2300 	strd	r2, r3, [r4]
		eigen_real[nextrow] = Hnextrow[nextrow] - x / q;
 8005d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d20:	4413      	add	r3, r2
 8005d22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005d2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005d2e:	f7fa fda5 	bl	800087c <__aeabi_ddiv>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	18d6      	adds	r6, r2, r3
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7fa fab5 	bl	80002b8 <__aeabi_dsub>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	e9c6 2300 	strd	r2, r3, [r6]
		eigen_imag[row] = 0.0;
 8005d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	18d1      	adds	r1, r2, r3
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	e9c1 2300 	strd	r2, r3, [r1]
		eigen_imag[nextrow] = 0.0;
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	18d1      	adds	r1, r2, r3
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9c1 2300 	strd	r2, r3, [r1]
		r = sqrt(Hnextrow[row]*Hnextrow[row] + q * q);
 8005d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d88:	4413      	add	r3, r2
 8005d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d96:	4413      	add	r3, r2
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa fc44 	bl	8000628 <__aeabi_dmul>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	461d      	mov	r5, r3
 8005da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005dac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005db0:	f7fa fc3a 	bl	8000628 <__aeabi_dmul>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4620      	mov	r0, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7fa fa7e 	bl	80002bc <__adddf3>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	ec43 2b17 	vmov	d7, r2, r3
 8005dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8005dcc:	eef0 0a67 	vmov.f32	s1, s15
 8005dd0:	f012 fa98 	bl	8018304 <sqrt>
 8005dd4:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
		sin = Hnextrow[row] / r;
 8005dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de0:	4413      	add	r3, r2
 8005de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dea:	f7fa fd47 	bl	800087c <__aeabi_ddiv>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		cos = q / r;
 8005df6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dfa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dfe:	f7fa fd3d 	bl	800087c <__aeabi_ddiv>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	e9c7 2308 	strd	r2, r3, [r7, #32]
		Update_Row(Hrow, cos, sin, n, row);
 8005e0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e0e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005e12:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8005e16:	ed97 0b08 	vldr	d0, [r7, #32]
 8005e1a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005e1c:	f000 f85e 	bl	8005edc <Update_Row>
		Update_Column(H, cos, sin, n, row);
 8005e20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e24:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005e28:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8005e2c:	ed97 0b08 	vldr	d0, [r7, #32]
 8005e30:	69f8      	ldr	r0, [r7, #28]
 8005e32:	f000 f8c7 	bl	8005fc4 <Update_Column>
		Update_Transformation(S, cos, sin, n, row);
 8005e36:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e3a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005e3e:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8005e42:	ed97 0b08 	vldr	d0, [r7, #32]
 8005e46:	69b8      	ldr	r0, [r7, #24]
 8005e48:	f000 f933 	bl	80060b2 <Update_Transformation>
	else {                             // pair of complex roots
		eigen_real[nextrow] = eigen_real[row] = Hnextrow[nextrow] + p;
		eigen_imag[row] = sqrt(fabs(discriminant));
		eigen_imag[nextrow] = -eigen_imag[row];
	}
}
 8005e4c:	e042      	b.n	8005ed4 <Two_Eigenvalues+0x348>
 8005e4e:	bf00      	nop
 8005e50:	3fe00000 	.word	0x3fe00000
		eigen_real[nextrow] = eigen_real[row] = Hnextrow[nextrow] + p;
 8005e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e5a:	4413      	add	r3, r2
 8005e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	18d6      	adds	r6, r2, r3
 8005e6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e6e:	f7fa fa25 	bl	80002bc <__adddf3>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	e9c6 2300 	strd	r2, r3, [r6]
 8005e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	18d1      	adds	r1, r2, r3
 8005e82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e86:	e9c1 2300 	strd	r2, r3, [r1]
		eigen_imag[row] = sqrt(fabs(discriminant));
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	18d6      	adds	r6, r2, r3
 8005ea0:	ed97 0b00 	vldr	d0, [r7]
 8005ea4:	f012 fa2e 	bl	8018304 <sqrt>
 8005ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8005eac:	eef0 7a60 	vmov.f32	s15, s1
 8005eb0:	ed86 7b00 	vstr	d7, [r6]
		eigen_imag[nextrow] = -eigen_imag[row];
 8005eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ec4:	00c9      	lsls	r1, r1, #3
 8005ec6:	6938      	ldr	r0, [r7, #16]
 8005ec8:	4401      	add	r1, r0
 8005eca:	4614      	mov	r4, r2
 8005ecc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005ed0:	e9c1 4500 	strd	r4, r5, [r1]
}
 8005ed4:	bf00      	nop
 8005ed6:	376c      	adds	r7, #108	; 0x6c
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005edc <Update_Row>:
//            The row to which the pointer Hrow[] points of the matrix H      //
//            in Hessenberg form.                                             //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Update_Row(double *Hrow, double cos, double sin, int n, int row)
{
 8005edc:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8005ee0:	b08d      	sub	sp, #52	; 0x34
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	61f8      	str	r0, [r7, #28]
 8005ee6:	ed87 0b04 	vstr	d0, [r7, #16]
 8005eea:	ed87 1b02 	vstr	d1, [r7, #8]
 8005eee:	61b9      	str	r1, [r7, #24]
 8005ef0:	607a      	str	r2, [r7, #4]
	double x;
	double *Hnextrow = Hrow + n;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28
	int i;

	for (i = row; i < n; i++) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f00:	e056      	b.n	8005fb0 <Update_Row+0xd4>
		x = Hrow[i];
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		Hrow[i] = cos * x + sin * Hnextrow[i];
 8005f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005f1a:	f7fa fb85 	bl	8000628 <__aeabi_dmul>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4690      	mov	r8, r2
 8005f24:	4699      	mov	r9, r3
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2c:	4413      	add	r3, r2
 8005f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f36:	f7fa fb77 	bl	8000628 <__aeabi_dmul>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	18d4      	adds	r4, r2, r3
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	f7fa f9b3 	bl	80002bc <__adddf3>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	e9c4 2300 	strd	r2, r3, [r4]
		Hnextrow[i] = cos * Hnextrow[i] - sin * x;
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f64:	4413      	add	r3, r2
 8005f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f6e:	f7fa fb5b 	bl	8000628 <__aeabi_dmul>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4690      	mov	r8, r2
 8005f78:	4699      	mov	r9, r3
 8005f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f82:	f7fa fb51 	bl	8000628 <__aeabi_dmul>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f94:	18d4      	adds	r4, r2, r3
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	f7fa f98b 	bl	80002b8 <__aeabi_dsub>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	e9c4 2300 	strd	r2, r3, [r4]
	for (i = row; i < n; i++) {
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	3301      	adds	r3, #1
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	dba4      	blt.n	8005f02 <Update_Row+0x26>
	}
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	3734      	adds	r7, #52	; 0x34
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08005fc4 <Update_Column>:
//     int    col                                                             //
//            The left-most column of the matrix H to update.                 //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Update_Column(double* H, double cos, double sin, int n, int col)
{
 8005fc4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8005fc8:	b08d      	sub	sp, #52	; 0x34
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	61f8      	str	r0, [r7, #28]
 8005fce:	ed87 0b04 	vstr	d0, [r7, #16]
 8005fd2:	ed87 1b02 	vstr	d1, [r7, #8]
 8005fd6:	61b9      	str	r1, [r7, #24]
 8005fd8:	607a      	str	r2, [r7, #4]
	double x;
	int i;
	int next_col = col + 1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28

	for (i = 0; i <= next_col; i++, H += n) {
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe4:	e05b      	b.n	800609e <Update_Column+0xda>
		x = H[col];
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		H[col] = cos * x + sin * H[next_col];
 8005ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ffa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ffe:	f7fa fb13 	bl	8000628 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4690      	mov	r8, r2
 8006008:	4699      	mov	r9, r3
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601a:	f7fa fb05 	bl	8000628 <__aeabi_dmul>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	18d4      	adds	r4, r2, r3
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4640      	mov	r0, r8
 8006034:	4649      	mov	r1, r9
 8006036:	f7fa f941 	bl	80002bc <__adddf3>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	e9c4 2300 	strd	r2, r3, [r4]
		H[next_col] = cos * H[next_col] - sin * x;
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800604e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006052:	f7fa fae9 	bl	8000628 <__aeabi_dmul>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4690      	mov	r8, r2
 800605c:	4699      	mov	r9, r3
 800605e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006066:	f7fa fadf 	bl	8000628 <__aeabi_dmul>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	18d4      	adds	r4, r2, r3
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa f919 	bl	80002b8 <__aeabi_dsub>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	e9c4 2300 	strd	r2, r3, [r4]
	for (i = 0; i <= next_col; i++, H += n) {
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	3301      	adds	r3, #1
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	429a      	cmp	r2, r3
 80060a4:	dd9f      	ble.n	8005fe6 <Update_Column+0x22>
	}
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	3734      	adds	r7, #52	; 0x34
 80060ac:	46bd      	mov	sp, r7
 80060ae:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

080060b2 <Update_Transformation>:
//            The row to which the pointer Hrow[] points of the matrix H.     //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Update_Transformation(double *S, double cos, double sin,
		int n, int k)
{
 80060b2:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80060b6:	b08d      	sub	sp, #52	; 0x34
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	61f8      	str	r0, [r7, #28]
 80060bc:	ed87 0b04 	vstr	d0, [r7, #16]
 80060c0:	ed87 1b02 	vstr	d1, [r7, #8]
 80060c4:	61b9      	str	r1, [r7, #24]
 80060c6:	607a      	str	r2, [r7, #4]
	double x;
	int i;
	int k1 = k + 1;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3301      	adds	r3, #1
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28

	for (i = 0; i < n; i++, S += n) {
 80060ce:	2300      	movs	r3, #0
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d2:	e05b      	b.n	800618c <Update_Transformation+0xda>
		x = S[k];
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		S[k] = cos * x + sin * S[k1];
 80060e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060ec:	f7fa fa9c 	bl	8000628 <__aeabi_dmul>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4690      	mov	r8, r2
 80060f6:	4699      	mov	r9, r3
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006108:	f7fa fa8e 	bl	8000628 <__aeabi_dmul>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	18d4      	adds	r4, r2, r3
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	f7fa f8ca 	bl	80002bc <__adddf3>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	e9c4 2300 	strd	r2, r3, [r4]
		S[k1] = cos * S[k1] - sin * x;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800613c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006140:	f7fa fa72 	bl	8000628 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4690      	mov	r8, r2
 800614a:	4699      	mov	r9, r3
 800614c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006150:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006154:	f7fa fa68 	bl	8000628 <__aeabi_dmul>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	18d4      	adds	r4, r2, r3
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4640      	mov	r0, r8
 800616e:	4649      	mov	r1, r9
 8006170:	f7fa f8a2 	bl	80002b8 <__aeabi_dsub>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	e9c4 2300 	strd	r2, r3, [r4]
	for (i = 0; i < n; i++, S += n) {
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	3301      	adds	r3, #1
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	429a      	cmp	r2, r3
 8006192:	db9f      	blt.n	80060d4 <Update_Transformation+0x22>
	}
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	3734      	adds	r7, #52	; 0x34
 800619a:	46bd      	mov	sp, r7
 800619c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

080061a0 <Double_QR_Iteration>:
//            Current iteration count.                                        //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Double_QR_Iteration(double *H, double *S, int min_row, int max_row,
		int n, double* shift, int iteration)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08e      	sub	sp, #56	; 0x38
 80061a4:	af04      	add	r7, sp, #16
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
	int k;
	double trace, det;

	Product_and_Sum_of_Shifts(H, n, max_row, shift, &trace, &det, iteration);
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	9302      	str	r3, [sp, #8]
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	f107 0318 	add.w	r3, r7, #24
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f82d 	bl	8006224 <Product_and_Sum_of_Shifts>
	k = Two_Consecutive_Small_Subdiagonal(H, min_row, max_row, n, trace, det);
 80061ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80061ce:	ed97 6b04 	vldr	d6, [r7, #16]
 80061d2:	eeb0 1a46 	vmov.f32	s2, s12
 80061d6:	eef0 1a66 	vmov.f32	s3, s13
 80061da:	eeb0 0a47 	vmov.f32	s0, s14
 80061de:	eef0 0a67 	vmov.f32	s1, s15
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f903 	bl	80063f4 <Two_Consecutive_Small_Subdiagonal>
 80061ee:	6278      	str	r0, [r7, #36]	; 0x24
	Double_QR_Step(H, min_row, max_row, k, trace, det, S, n);
 80061f0:	ed97 7b06 	vldr	d7, [r7, #24]
 80061f4:	ed97 6b04 	vldr	d6, [r7, #16]
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	eeb0 1a46 	vmov.f32	s2, s12
 8006204:	eef0 1a66 	vmov.f32	s3, s13
 8006208:	eeb0 0a47 	vmov.f32	s0, s14
 800620c:	eef0 0a67 	vmov.f32	s1, s15
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 faca 	bl	80067b0 <Double_QR_Step>
}
 800621c:	bf00      	nop
 800621e:	3728      	adds	r7, #40	; 0x28
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <Product_and_Sum_of_Shifts>:
//            Current iteration count.                                        //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Product_and_Sum_of_Shifts(double *H, int n, int max_row,
		double* shift, double *trace, double *det, int iteration)
{
 8006224:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8006228:	b088      	sub	sp, #32
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
	double *pH = H + max_row * n;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
	double *p_aux;
	int i;
	int min_col = max_row - 1;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3b01      	subs	r3, #1
 8006248:	613b      	str	r3, [r7, #16]

	if ( ( iteration % 10 ) == 0 ) {
 800624a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800624c:	4b67      	ldr	r3, [pc, #412]	; (80063ec <Product_and_Sum_of_Shifts+0x1c8>)
 800624e:	fb83 2301 	smull	r2, r3, r3, r1
 8006252:	109a      	asrs	r2, r3, #2
 8006254:	17cb      	asrs	r3, r1, #31
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	1aca      	subs	r2, r1, r3
 8006262:	2a00      	cmp	r2, #0
 8006264:	d179      	bne.n	800635a <Product_and_Sum_of_Shifts+0x136>
		*shift += pH[max_row];
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4413      	add	r3, r2
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fa f820 	bl	80002bc <__adddf3>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	e9c1 2300 	strd	r2, r3, [r1]
		for (i = 0, p_aux = H; i <= max_row; p_aux += n, i++)
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	e01f      	b.n	80062d0 <Product_and_Sum_of_Shifts+0xac>
			p_aux[i] -= pH[max_row];
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80062a8:	69be      	ldr	r6, [r7, #24]
 80062aa:	00f6      	lsls	r6, r6, #3
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	441e      	add	r6, r3
 80062b0:	465a      	mov	r2, fp
 80062b2:	4663      	mov	r3, ip
 80062b4:	f7fa f800 	bl	80002b8 <__aeabi_dsub>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	e9c6 2300 	strd	r2, r3, [r6]
		for (i = 0, p_aux = H; i <= max_row; p_aux += n, i++)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	dddb      	ble.n	8006290 <Product_and_Sum_of_Shifts+0x6c>
		p_aux = pH - n;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	425b      	negs	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	61fb      	str	r3, [r7, #28]
		*trace = fabs(pH[min_col]) + fabs(p_aux[min_col - 1]);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	4614      	mov	r4, r2
 80062f2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80062fc:	3b01      	subs	r3, #1
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	4690      	mov	r8, r2
 800630a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7f9 ffd1 	bl	80002bc <__adddf3>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006320:	e9c1 2300 	strd	r2, r3, [r1]
		*det = *trace * *trace;
 8006324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800632a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f7fa f97a 	bl	8000628 <__aeabi_dmul>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800633a:	e9c1 2300 	strd	r2, r3, [r1]
		*trace *= 1.5;
 800633e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <Product_and_Sum_of_Shifts+0x1cc>)
 800634a:	f7fa f96d 	bl	8000628 <__aeabi_dmul>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006354:	e9c1 2300 	strd	r2, r3, [r1]
	else {
		p_aux = pH - n;
		*trace = p_aux[min_col] + pH[max_row];
		*det = p_aux[min_col] * pH[max_row] - p_aux[max_row] * pH[min_col];
	}
};
 8006358:	e043      	b.n	80063e2 <Product_and_Sum_of_Shifts+0x1be>
		p_aux = pH - n;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	425b      	negs	r3, r3
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4413      	add	r3, r2
 8006364:	61fb      	str	r3, [r7, #28]
		*trace = p_aux[min_col] + pH[max_row];
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7f9 ff9d 	bl	80002bc <__adddf3>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006388:	e9c1 2300 	strd	r2, r3, [r1]
		*det = p_aux[min_col] * pH[max_row] - p_aux[max_row] * pH[min_col];
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f7fa f940 	bl	8000628 <__aeabi_dmul>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4614      	mov	r4, r2
 80063ae:	461d      	mov	r5, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4413      	add	r3, r2
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f7fa f92e 	bl	8000628 <__aeabi_dmul>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4620      	mov	r0, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	f7f9 ff70 	bl	80002b8 <__aeabi_dsub>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063de:	e9c1 2300 	strd	r2, r3, [r1]
};
 80063e2:	bf00      	nop
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80063ec:	66666667 	.word	0x66666667
 80063f0:	3ff80000 	.word	0x3ff80000

080063f4 <Two_Consecutive_Small_Subdiagonal>:
//     Row with negligible subdiagonal element or min_row if none found.      //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
int Two_Consecutive_Small_Subdiagonal(double* H, int min_row,
		int max_row, int n, double trace, double det)
{
 80063f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f8:	b0a6      	sub	sp, #152	; 0x98
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6678      	str	r0, [r7, #100]	; 0x64
 80063fe:	6639      	str	r1, [r7, #96]	; 0x60
 8006400:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006402:	65bb      	str	r3, [r7, #88]	; 0x58
 8006404:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
 8006408:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
	double x, y ,z, s;
	double* pH;
	int i, k;

	for (k = max_row - 2, pH = H + k * n; k >= min_row; pH -= n, k--) {
 800640c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640e:	3b02      	subs	r3, #2
 8006410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006414:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006422:	4413      	add	r3, r2
 8006424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006428:	e14e      	b.n	80066c8 <Two_Consecutive_Small_Subdiagonal+0x2d4>
		x = (pH[k] * ( pH[k] - trace ) + det) / pH[n+k] + pH[k+1];
 800642a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800642e:	00da      	lsls	r2, r3, #3
 8006430:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006434:	4413      	add	r3, r2
 8006436:	e9d3 4500 	ldrd	r4, r5, [r3]
 800643a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800643e:	00da      	lsls	r2, r3, #3
 8006440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006444:	4413      	add	r3, r2
 8006446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800644a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800644e:	f7f9 ff33 	bl	80002b8 <__aeabi_dsub>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	f7fa f8e5 	bl	8000628 <__aeabi_dmul>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800646a:	f7f9 ff27 	bl	80002bc <__adddf3>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4610      	mov	r0, r2
 8006474:	4619      	mov	r1, r3
 8006476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800647c:	4413      	add	r3, r2
 800647e:	00da      	lsls	r2, r3, #3
 8006480:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006484:	4413      	add	r3, r2
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f7fa f9f7 	bl	800087c <__aeabi_ddiv>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4610      	mov	r0, r2
 8006494:	4619      	mov	r1, r3
 8006496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800649a:	3301      	adds	r3, #1
 800649c:	00da      	lsls	r2, r3, #3
 800649e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064a2:	4413      	add	r3, r2
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f7f9 ff08 	bl	80002bc <__adddf3>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		y = pH[k] + pH[n+k+1] - trace;
 80064b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b8:	00da      	lsls	r2, r3, #3
 80064ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064be:	4413      	add	r3, r2
 80064c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ca:	4413      	add	r3, r2
 80064cc:	3301      	adds	r3, #1
 80064ce:	00da      	lsls	r2, r3, #3
 80064d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064d4:	4413      	add	r3, r2
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f7f9 feef 	bl	80002bc <__adddf3>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4610      	mov	r0, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064ea:	f7f9 fee5 	bl	80002b8 <__aeabi_dsub>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		z = pH[n + n + k + 1];
 80064f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064f8:	005a      	lsls	r2, r3, #1
 80064fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064fe:	4413      	add	r3, r2
 8006500:	3301      	adds	r3, #1
 8006502:	00da      	lsls	r2, r3, #3
 8006504:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006508:	4413      	add	r3, r2
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		s = fabs(x) + fabs(y) + fabs(z);
 8006512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006516:	643b      	str	r3, [r7, #64]	; 0x40
 8006518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800651c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006520:	647b      	str	r3, [r7, #68]	; 0x44
 8006522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006524:	63bb      	str	r3, [r7, #56]	; 0x38
 8006526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006532:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006536:	f7f9 fec1 	bl	80002bc <__adddf3>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
 8006546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
 800654e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006552:	f7f9 feb3 	bl	80002bc <__adddf3>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		x /= s;
 800655e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006566:	f7fa f989 	bl	800087c <__aeabi_ddiv>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		y /= s;
 8006572:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006576:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800657a:	f7fa f97f 	bl	800087c <__aeabi_ddiv>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		z /= s;
 8006586:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800658a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800658e:	f7fa f975 	bl	800087c <__aeabi_ddiv>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		if (k == min_row) break;
 800659a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800659e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a0:	429a      	cmp	r2, r3
 80065a2:	f000 8098 	beq.w	80066d6 <Two_Consecutive_Small_Subdiagonal+0x2e2>
		if ( (fabs(pH[k-1]) * (fabs(y) + fabs(z)) ) <=
 80065a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80065ae:	3b01      	subs	r3, #1
 80065b0:	00da      	lsls	r2, r3, #3
 80065b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065b6:	4413      	add	r3, r2
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	62ba      	str	r2, [r7, #40]	; 0x28
 80065be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c6:	623b      	str	r3, [r7, #32]
 80065c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80065e4:	f7f9 fe6a 	bl	80002bc <__adddf3>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065f0:	f7fa f81a 	bl	8000628 <__aeabi_dmul>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4690      	mov	r8, r2
 80065fa:	4699      	mov	r9, r3
				DBL_EPSILON * fabs(x) *
 80065fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	4b66      	ldr	r3, [pc, #408]	; (80067ac <Two_Consecutive_Small_Subdiagonal+0x3b8>)
 8006612:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006616:	f7fa f807 	bl	8000628 <__aeabi_dmul>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4614      	mov	r4, r2
 8006620:	461d      	mov	r5, r3
				(fabs(pH[k-1-n]) + fabs(pH[k]) + fabs(pH[n + k + 1])) ) break;
 8006622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	00da      	lsls	r2, r3, #3
 800662e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006632:	4413      	add	r3, r2
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	60ba      	str	r2, [r7, #8]
 800663a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006644:	00da      	lsls	r2, r3, #3
 8006646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800664a:	4413      	add	r3, r2
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	603a      	str	r2, [r7, #0]
 8006652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800665c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006660:	f7f9 fe2c 	bl	80002bc <__adddf3>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4610      	mov	r0, r2
 800666a:	4619      	mov	r1, r3
 800666c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006672:	4413      	add	r3, r2
 8006674:	3301      	adds	r3, #1
 8006676:	00da      	lsls	r2, r3, #3
 8006678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800667c:	4413      	add	r3, r2
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	4692      	mov	sl, r2
 8006684:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8006688:	4652      	mov	r2, sl
 800668a:	465b      	mov	r3, fp
 800668c:	f7f9 fe16 	bl	80002bc <__adddf3>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
				DBL_EPSILON * fabs(x) *
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 ffc6 	bl	8000628 <__aeabi_dmul>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
		if ( (fabs(pH[k-1]) * (fabs(y) + fabs(z)) ) <=
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7fa fa3c 	bl	8000b20 <__aeabi_dcmple>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d115      	bne.n	80066da <Two_Consecutive_Small_Subdiagonal+0x2e6>
	for (k = max_row - 2, pH = H + k * n; k >= min_row; pH -= n, k--) {
 80066ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	425a      	negs	r2, r3
 80066b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066c2:	3b01      	subs	r3, #1
 80066c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80066cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ce:	429a      	cmp	r2, r3
 80066d0:	f6bf aeab 	bge.w	800642a <Two_Consecutive_Small_Subdiagonal+0x36>
 80066d4:	e002      	b.n	80066dc <Two_Consecutive_Small_Subdiagonal+0x2e8>
		if (k == min_row) break;
 80066d6:	bf00      	nop
 80066d8:	e000      	b.n	80066dc <Two_Consecutive_Small_Subdiagonal+0x2e8>
				(fabs(pH[k-1-n]) + fabs(pH[k]) + fabs(pH[n + k + 1])) ) break;
 80066da:	bf00      	nop
	}
	for (i = k+2, pH = H + i * n; i <= max_row; pH += n, i++) pH[i-2] = 0.0;
 80066dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e0:	3302      	adds	r3, #2
 80066e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066f4:	4413      	add	r3, r2
 80066f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066fa:	e01a      	b.n	8006732 <Two_Consecutive_Small_Subdiagonal+0x33e>
 80066fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006700:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006704:	3b02      	subs	r3, #2
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800670c:	18d1      	adds	r1, r2, r3
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9c1 2300 	strd	r2, r3, [r1]
 800671a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006722:	4413      	add	r3, r2
 8006724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800672c:	3301      	adds	r3, #1
 800672e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006732:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006738:	429a      	cmp	r2, r3
 800673a:	dddf      	ble.n	80066fc <Two_Consecutive_Small_Subdiagonal+0x308>
	for (i = k+3, pH = H + i * n; i <= max_row; pH += n, i++) pH[i-3] = 0.0;
 800673c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006740:	3303      	adds	r3, #3
 8006742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800674a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800674c:	fb02 f303 	mul.w	r3, r2, r3
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006754:	4413      	add	r3, r2
 8006756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800675a:	e01a      	b.n	8006792 <Two_Consecutive_Small_Subdiagonal+0x39e>
 800675c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006760:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006764:	3b03      	subs	r3, #3
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800676c:	18d1      	adds	r1, r2, r3
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	e9c1 2300 	strd	r2, r3, [r1]
 800677a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006782:	4413      	add	r3, r2
 8006784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800678c:	3301      	adds	r3, #1
 800678e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006792:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006798:	429a      	cmp	r2, r3
 800679a:	dddf      	ble.n	800675c <Two_Consecutive_Small_Subdiagonal+0x368>
	return k;
 800679c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
};
 80067a0:	4618      	mov	r0, r3
 80067a2:	3798      	adds	r7, #152	; 0x98
 80067a4:	46bd      	mov	sp, r7
 80067a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067aa:	bf00      	nop
 80067ac:	3cb00000 	.word	0x3cb00000

080067b0 <Double_QR_Step>:
//            The dimensions of H and S.                                      //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Double_QR_Step(double *H, int min_row, int max_row, int min_col,
		double trace, double det, double *S, int n)
{
 80067b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b4:	b0ae      	sub	sp, #184	; 0xb8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80067ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80067bc:	657a      	str	r2, [r7, #84]	; 0x54
 80067be:	653b      	str	r3, [r7, #80]	; 0x50
 80067c0:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
 80067c4:	ed87 1b10 	vstr	d1, [r7, #64]	; 0x40
	double a, b, c;
	double *pH;
	double *tH;
	double *pS;
	int i,j,k;
	int last_test_row_col = max_row - 1;
 80067c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ca:	3b01      	subs	r3, #1
 80067cc:	677b      	str	r3, [r7, #116]	; 0x74

	k = min_col;
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	67bb      	str	r3, [r7, #120]	; 0x78
	pH = H + min_col * n;
 80067d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	00da      	lsls	r2, r3, #3
 80067de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e0:	4413      	add	r3, r2
 80067e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	a = (pH[k] * ( pH[k] - trace ) + det) / pH[n+k] + pH[k+1];
 80067e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e8:	00da      	lsls	r2, r3, #3
 80067ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ee:	4413      	add	r3, r2
 80067f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80067f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f6:	00da      	lsls	r2, r3, #3
 80067f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067fc:	4413      	add	r3, r2
 80067fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006802:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006806:	f7f9 fd57 	bl	80002b8 <__aeabi_dsub>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7f9 ff09 	bl	8000628 <__aeabi_dmul>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006822:	f7f9 fd4b 	bl	80002bc <__adddf3>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4610      	mov	r0, r2
 800682c:	4619      	mov	r1, r3
 800682e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006834:	4413      	add	r3, r2
 8006836:	00da      	lsls	r2, r3, #3
 8006838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800683c:	4413      	add	r3, r2
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f7fa f81b 	bl	800087c <__aeabi_ddiv>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006850:	3301      	adds	r3, #1
 8006852:	00da      	lsls	r2, r3, #3
 8006854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006858:	4413      	add	r3, r2
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fd2d 	bl	80002bc <__adddf3>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	b = pH[k] + pH[n+k+1] - trace;
 800686a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006872:	4413      	add	r3, r2
 8006874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006878:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800687c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687e:	4413      	add	r3, r2
 8006880:	3301      	adds	r3, #1
 8006882:	00da      	lsls	r2, r3, #3
 8006884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006888:	4413      	add	r3, r2
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 fd15 	bl	80002bc <__adddf3>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800689e:	f7f9 fd0b 	bl	80002b8 <__aeabi_dsub>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	c = pH[n + n + k + 1];
 80068aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ae:	005a      	lsls	r2, r3, #1
 80068b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068b2:	4413      	add	r3, r2
 80068b4:	3301      	adds	r3, #1
 80068b6:	00da      	lsls	r2, r3, #3
 80068b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068bc:	4413      	add	r3, r2
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	s = fabs(a) + fabs(b) + fabs(c);
 80068c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80068cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068da:	633b      	str	r3, [r7, #48]	; 0x30
 80068dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
 80068e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80068ee:	f7f9 fce5 	bl	80002bc <__adddf3>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006900:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800690e:	f7f9 fcd5 	bl	80002bc <__adddf3>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	a /= s;
 800691a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800691e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006922:	f7f9 ffab 	bl	800087c <__aeabi_ddiv>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	b /= s;
 800692e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006932:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006936:	f7f9 ffa1 	bl	800087c <__aeabi_ddiv>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	c /= s;
 8006942:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006946:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800694a:	f7f9 ff97 	bl	800087c <__aeabi_ddiv>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	for (; k <= last_test_row_col; k++, pH += n) {
 8006956:	e382      	b.n	800705e <Double_QR_Step+0x8ae>
		if ( k > min_col ) {
 8006958:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800695a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695c:	429a      	cmp	r2, r3
 800695e:	f340 808f 	ble.w	8006a80 <Double_QR_Step+0x2d0>
			c = (k == last_test_row_col) ? 0.0 : pH[n + n + k - 1];
 8006962:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006966:	429a      	cmp	r2, r3
 8006968:	d00e      	beq.n	8006988 <Double_QR_Step+0x1d8>
 800696a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800696e:	005a      	lsls	r2, r3, #1
 8006970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006972:	4413      	add	r3, r2
 8006974:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006978:	3b01      	subs	r3, #1
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006980:	4413      	add	r3, r2
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	e003      	b.n	8006990 <Double_QR_Step+0x1e0>
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			x = fabs(pH[k-1]) + fabs(pH[n + k - 1]) + fabs(c);
 8006994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006996:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800699a:	3b01      	subs	r3, #1
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80069a2:	4413      	add	r3, r2
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	623a      	str	r2, [r7, #32]
 80069aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
 80069b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b6:	4413      	add	r3, r2
 80069b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80069bc:	3b01      	subs	r3, #1
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80069c4:	4413      	add	r3, r2
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	61ba      	str	r2, [r7, #24]
 80069cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80069da:	f7f9 fc6f 	bl	80002bc <__adddf3>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069fa:	f7f9 fc5f 	bl	80002bc <__adddf3>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			if ( x == 0.0 ) continue;
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006a12:	f7fa f871 	bl	8000af8 <__aeabi_dcmpeq>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f040 8314 	bne.w	8007046 <Double_QR_Step+0x896>
			a = pH[k - 1] / x;
 8006a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a20:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006a24:	3b01      	subs	r3, #1
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006a2c:	4413      	add	r3, r2
 8006a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a32:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006a36:	f7f9 ff21 	bl	800087c <__aeabi_ddiv>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			b = pH[n + k - 1] / x;
 8006a42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a48:	4413      	add	r3, r2
 8006a4a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006a56:	4413      	add	r3, r2
 8006a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a5c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006a60:	f7f9 ff0c 	bl	800087c <__aeabi_ddiv>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			c /= x;
 8006a6c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006a70:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006a74:	f7f9 ff02 	bl	800087c <__aeabi_ddiv>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		}
		s = sqrt( a * a + b * b + c * c );
 8006a80:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006a84:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006a88:	f7f9 fdce 	bl	8000628 <__aeabi_dmul>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4614      	mov	r4, r2
 8006a92:	461d      	mov	r5, r3
 8006a94:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a9c:	f7f9 fdc4 	bl	8000628 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7f9 fc08 	bl	80002bc <__adddf3>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006ab8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006abc:	f7f9 fdb4 	bl	8000628 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7f9 fbf8 	bl	80002bc <__adddf3>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	ec43 2b17 	vmov	d7, r2, r3
 8006ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8006ad8:	eef0 0a67 	vmov.f32	s1, s15
 8006adc:	f011 fc12 	bl	8018304 <sqrt>
 8006ae0:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0
		if (a < 0.0) s = -s;
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006af0:	f7fa f80c 	bl	8000b0c <__aeabi_dcmplt>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <Double_QR_Step+0x362>
 8006afa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b08:	607b      	str	r3, [r7, #4]
 8006b0a:	ed97 7b00 	vldr	d7, [r7]
 8006b0e:	ed87 7b2c 	vstr	d7, [r7, #176]	; 0xb0
		if ( k > min_col ) pH[k-1] = -s * x;
 8006b12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b16:	429a      	cmp	r2, r3
 8006b18:	dd1a      	ble.n	8006b50 <Double_QR_Step+0x3a0>
 8006b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b1e:	60bb      	str	r3, [r7, #8]
 8006b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006b30:	3b01      	subs	r3, #1
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006b38:	18d4      	adds	r4, r2, r3
 8006b3a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b42:	f7f9 fd71 	bl	8000628 <__aeabi_dmul>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	e9c4 2300 	strd	r2, r3, [r4]
 8006b4e:	e01a      	b.n	8006b86 <Double_QR_Step+0x3d6>
		else if (min_row != min_col) pH[k-1] = -pH[k-1];
 8006b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d016      	beq.n	8006b86 <Double_QR_Step+0x3d6>
 8006b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006b66:	4413      	add	r3, r2
 8006b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006b72:	3b01      	subs	r3, #1
 8006b74:	00da      	lsls	r2, r3, #3
 8006b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b7a:	4413      	add	r3, r2
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	f081 4b00 	eor.w	fp, r1, #2147483648	; 0x80000000
 8006b82:	e9c3 ab00 	strd	sl, fp, [r3]
		a += s;
 8006b86:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006b8a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006b8e:	f7f9 fb95 	bl	80002bc <__adddf3>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		x = a / s;
 8006b9a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006b9e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006ba2:	f7f9 fe6b 	bl	800087c <__aeabi_ddiv>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		y = b / s;
 8006bae:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006bb2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bb6:	f7f9 fe61 	bl	800087c <__aeabi_ddiv>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		z = c / s;
 8006bc2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006bc6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006bca:	f7f9 fe57 	bl	800087c <__aeabi_ddiv>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		b /= a;
 8006bd6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006bda:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bde:	f7f9 fe4d 	bl	800087c <__aeabi_ddiv>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		c /= a;
 8006bea:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006bee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006bf2:	f7f9 fe43 	bl	800087c <__aeabi_ddiv>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

		// Update rows k, k+1, k+2
		for (j = k; j < n; j++) {
 8006bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c02:	e0ac      	b.n	8006d5e <Double_QR_Step+0x5ae>
			a = pH[j] + b * pH[n+j];
 8006c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c0c:	4413      	add	r3, r2
 8006c0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006c12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c18:	4413      	add	r3, r2
 8006c1a:	00da      	lsls	r2, r3, #3
 8006c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c20:	4413      	add	r3, r2
 8006c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c26:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006c2a:	f7f9 fcfd 	bl	8000628 <__aeabi_dmul>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 fb41 	bl	80002bc <__adddf3>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			if ( k != last_test_row_col ) {
 8006c42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d040      	beq.n	8006ccc <Double_QR_Step+0x51c>
				a += c * pH[n + n + j];
 8006c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4e:	005a      	lsls	r2, r3, #1
 8006c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c52:	4413      	add	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c5a:	4413      	add	r3, r2
 8006c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c60:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006c64:	f7f9 fce0 	bl	8000628 <__aeabi_dmul>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006c70:	f7f9 fb24 	bl	80002bc <__adddf3>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
				pH[n + n + j] -= a * z;
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c80:	005a      	lsls	r2, r3, #1
 8006c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c84:	4413      	add	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c8c:	4413      	add	r3, r2
 8006c8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006c96:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006c9a:	f7f9 fcc5 	bl	8000628 <__aeabi_dmul>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006caa:	005a      	lsls	r2, r3, #1
 8006cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cae:	4413      	add	r3, r2
 8006cb0:	00da      	lsls	r2, r3, #3
 8006cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cb6:	189c      	adds	r4, r3, r2
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	f7f9 fafa 	bl	80002b8 <__aeabi_dsub>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	e9c4 2300 	strd	r2, r3, [r4]
			}
			pH[n + j] -= a * y;
 8006ccc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006cda:	4413      	add	r3, r2
 8006cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ce0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006ce4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006ce8:	f7f9 fc9e 	bl	8000628 <__aeabi_dmul>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cfa:	4413      	add	r3, r2
 8006cfc:	00da      	lsls	r2, r3, #3
 8006cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d02:	189c      	adds	r4, r3, r2
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	f7f9 fad4 	bl	80002b8 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	e9c4 2300 	strd	r2, r3, [r4]
			pH[j] -= a * x;
 8006d18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006d20:	4413      	add	r3, r2
 8006d22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d26:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006d2a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006d2e:	f7f9 fc7b 	bl	8000628 <__aeabi_dmul>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d3c:	00da      	lsls	r2, r3, #3
 8006d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d42:	189c      	adds	r4, r3, r2
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4640      	mov	r0, r8
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	f7f9 fab4 	bl	80002b8 <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	e9c4 2300 	strd	r2, r3, [r4]
		for (j = k; j < n; j++) {
 8006d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d64:	429a      	cmp	r2, r3
 8006d66:	f6ff af4d 	blt.w	8006c04 <Double_QR_Step+0x454>
		}

		// Update column k+1

		j = k + 3;
 8006d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6c:	3303      	adds	r3, #3
 8006d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (j > max_row) j = max_row;
 8006d70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d74:	429a      	cmp	r2, r3
 8006d76:	dd01      	ble.n	8006d7c <Double_QR_Step+0x5cc>
 8006d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0, tH = H; i <= j; i++, tH += n) {
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d88:	e0a3      	b.n	8006ed2 <Double_QR_Step+0x722>
			a = x * tH[k] + y * tH[k+1];
 8006d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006d92:	4413      	add	r3, r2
 8006d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d98:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006d9c:	f7f9 fc44 	bl	8000628 <__aeabi_dmul>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4614      	mov	r4, r2
 8006da6:	461d      	mov	r5, r3
 8006da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006daa:	3301      	adds	r3, #1
 8006dac:	00da      	lsls	r2, r3, #3
 8006dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006db2:	4413      	add	r3, r2
 8006db4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006db8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006dbc:	f7f9 fc34 	bl	8000628 <__aeabi_dmul>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fa78 	bl	80002bc <__adddf3>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			if ( k != last_test_row_col ) {
 8006dd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d037      	beq.n	8006e4c <Double_QR_Step+0x69c>
				a += z * tH[k+2];
 8006ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dde:	3302      	adds	r3, #2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006de6:	4413      	add	r3, r2
 8006de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006df0:	f7f9 fc1a 	bl	8000628 <__aeabi_dmul>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006dfc:	f7f9 fa5e 	bl	80002bc <__adddf3>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
				tH[k+2] -= a * c;
 8006e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e12:	4413      	add	r3, r2
 8006e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e18:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006e1c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006e20:	f7f9 fc02 	bl	8000628 <__aeabi_dmul>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2e:	3302      	adds	r3, #2
 8006e30:	00da      	lsls	r2, r3, #3
 8006e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e36:	189c      	adds	r4, r3, r2
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	4649      	mov	r1, r9
 8006e40:	f7f9 fa3a 	bl	80002b8 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	e9c4 2300 	strd	r2, r3, [r4]
			}
			tH[k+1] -= a * b;
 8006e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e4e:	3301      	adds	r3, #1
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e56:	4413      	add	r3, r2
 8006e58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e5c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006e60:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006e64:	f7f9 fbe0 	bl	8000628 <__aeabi_dmul>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e72:	3301      	adds	r3, #1
 8006e74:	00da      	lsls	r2, r3, #3
 8006e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e7a:	189c      	adds	r4, r3, r2
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4640      	mov	r0, r8
 8006e82:	4649      	mov	r1, r9
 8006e84:	f7f9 fa18 	bl	80002b8 <__aeabi_dsub>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	e9c4 2300 	strd	r2, r3, [r4]
			tH[k] -= a;
 8006e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e98:	4413      	add	r3, r2
 8006e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea0:	00da      	lsls	r2, r3, #3
 8006ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ea6:	189c      	adds	r4, r3, r2
 8006ea8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006eac:	f7f9 fa04 	bl	80002b8 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	e9c4 2300 	strd	r2, r3, [r4]
		for (i = 0, tH = H; i <= j; i++, tH += n) {
 8006eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006ecc:	4413      	add	r3, r2
 8006ece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	f77f af56 	ble.w	8006d8a <Double_QR_Step+0x5da>
		}

		// Update transformation matrix

		for (i = 0, pS = S; i < n; pS += n, i++) {
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006eec:	e0a3      	b.n	8007036 <Double_QR_Step+0x886>
			a = x * pS[k] + y * pS[k+1];
 8006eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006ef6:	4413      	add	r3, r2
 8006ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006efc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006f00:	f7f9 fb92 	bl	8000628 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0e:	3301      	adds	r3, #1
 8006f10:	00da      	lsls	r2, r3, #3
 8006f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f16:	4413      	add	r3, r2
 8006f18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f1c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006f20:	f7f9 fb82 	bl	8000628 <__aeabi_dmul>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7f9 f9c6 	bl	80002bc <__adddf3>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			if ( k != last_test_row_col ) {
 8006f38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d037      	beq.n	8006fb0 <Double_QR_Step+0x800>
				a += z * pS[k+2];
 8006f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f42:	3302      	adds	r3, #2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f4a:	4413      	add	r3, r2
 8006f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006f54:	f7f9 fb68 	bl	8000628 <__aeabi_dmul>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006f60:	f7f9 f9ac 	bl	80002bc <__adddf3>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
				pS[k+2] -= a * c;
 8006f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f6e:	3302      	adds	r3, #2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f76:	4413      	add	r3, r2
 8006f78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f7c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006f80:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006f84:	f7f9 fb50 	bl	8000628 <__aeabi_dmul>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f92:	3302      	adds	r3, #2
 8006f94:	00da      	lsls	r2, r3, #3
 8006f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f9a:	189c      	adds	r4, r3, r2
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 f988 	bl	80002b8 <__aeabi_dsub>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	e9c4 2300 	strd	r2, r3, [r4]
			}
			pS[k+1] -= a * b;
 8006fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006fba:	4413      	add	r3, r2
 8006fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fc0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006fc4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006fc8:	f7f9 fb2e 	bl	8000628 <__aeabi_dmul>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	00da      	lsls	r2, r3, #3
 8006fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fde:	189c      	adds	r4, r3, r2
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	f7f9 f966 	bl	80002b8 <__aeabi_dsub>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	e9c4 2300 	strd	r2, r3, [r4]
			pS[k] -= a;
 8006ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006ffc:	4413      	add	r3, r2
 8006ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007004:	00da      	lsls	r2, r3, #3
 8007006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800700a:	189c      	adds	r4, r3, r2
 800700c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007010:	f7f9 f952 	bl	80002b8 <__aeabi_dsub>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	e9c4 2300 	strd	r2, r3, [r4]
		for (i = 0, pS = S; i < n; pS += n, i++) {
 800701c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007026:	4413      	add	r3, r2
 8007028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800702c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007030:	3301      	adds	r3, #1
 8007032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007036:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800703a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800703e:	429a      	cmp	r2, r3
 8007040:	f6ff af55 	blt.w	8006eee <Double_QR_Step+0x73e>
 8007044:	e000      	b.n	8007048 <Double_QR_Step+0x898>
			if ( x == 0.0 ) continue;
 8007046:	bf00      	nop
	for (; k <= last_test_row_col; k++, pH += n) {
 8007048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800704a:	3301      	adds	r3, #1
 800704c:	67bb      	str	r3, [r7, #120]	; 0x78
 800704e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007058:	4413      	add	r3, r2
 800705a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800705e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007062:	429a      	cmp	r2, r3
 8007064:	f77f ac78 	ble.w	8006958 <Double_QR_Step+0x1a8>
		}
	};
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	37b8      	adds	r7, #184	; 0xb8
 800706e:	46bd      	mov	sp, r7
 8007070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007074 <BackSubstitution>:
//            The dimension of H, eigen_real, and eigen_imag.                 //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void BackSubstitution(double *H, double eigen_real[],
		double eigen_imag[], int n)
{
 8007074:	b5b0      	push	{r4, r5, r7, lr}
 8007076:	b08c      	sub	sp, #48	; 0x30
 8007078:	af02      	add	r7, sp, #8
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
	double *pH;
	int i, j, row;

	// Calculate the zero tolerance

	pH = H;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	61fb      	str	r3, [r7, #28]
	zero_tolerance = fabs(pH[0]);
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	4611      	mov	r1, r2
 800708e:	6239      	str	r1, [r7, #32]
 8007090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
	for (pH += n, i = 1; i < n; pH += n, i++)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	2301      	movs	r3, #1
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	e025      	b.n	80070f2 <BackSubstitution+0x7e>
		for (j = i-1; j < n; j++) zero_tolerance += fabs(pH[j]);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e015      	b.n	80070da <BackSubstitution+0x66>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	4614      	mov	r4, r2
 80070bc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80070c0:	4622      	mov	r2, r4
 80070c2:	462b      	mov	r3, r5
 80070c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80070c8:	f7f9 f8f8 	bl	80002bc <__adddf3>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3301      	adds	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	dbe5      	blt.n	80070ae <BackSubstitution+0x3a>
	for (pH += n, i = 1; i < n; pH += n, i++)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	3301      	adds	r3, #1
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	dbd5      	blt.n	80070a6 <BackSubstitution+0x32>
	zero_tolerance *= DBL_EPSILON;
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	4b25      	ldr	r3, [pc, #148]	; (8007194 <BackSubstitution+0x120>)
 8007100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007104:	f7f9 fa90 	bl	8000628 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// Start Backsubstitution

	for (row = n-1; row >= 0; row--) {
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	3b01      	subs	r3, #1
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	e035      	b.n	8007184 <BackSubstitution+0x110>
		if (eigen_imag[row] == 0.0)
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	f7f9 fce4 	bl	8000af8 <__aeabi_dcmpeq>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <BackSubstitution+0xd8>
			BackSubstitute_Real_Vector(H, eigen_real, eigen_imag, row,
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	ed97 0b08 	vldr	d0, [r7, #32]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f827 	bl	8007198 <BackSubstitute_Real_Vector>
 800714a:	e018      	b.n	800717e <BackSubstitution+0x10a>
					zero_tolerance, n);
		else if ( eigen_imag[row] < 0.0 )
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	4413      	add	r3, r2
 8007154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	f7f9 fcd4 	bl	8000b0c <__aeabi_dcmplt>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <BackSubstitution+0x10a>
			BackSubstitute_Complex_Vector(H, eigen_real, eigen_imag, row,
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	ed97 0b08 	vldr	d0, [r7, #32]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f9e9 	bl	8007550 <BackSubstitute_Complex_Vector>
	for (row = n-1; row >= 0; row--) {
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3b01      	subs	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	dac6      	bge.n	8007118 <BackSubstitution+0xa4>
					zero_tolerance, n);
	}
}
 800718a:	bf00      	nop
 800718c:	bf00      	nop
 800718e:	3728      	adds	r7, #40	; 0x28
 8007190:	46bd      	mov	sp, r7
 8007192:	bdb0      	pop	{r4, r5, r7, pc}
 8007194:	3cb00000 	.word	0x3cb00000

08007198 <BackSubstitute_Real_Vector>:
//            The dimension of H, eigen_real, and eigen_imag.                 //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void BackSubstitute_Real_Vector(double *H, double eigen_real[],
		double eigen_imag[], int row,  double zero_tolerance, int n)
{
 8007198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800719c:	b0a2      	sub	sp, #136	; 0x88
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6378      	str	r0, [r7, #52]	; 0x34
 80071a2:	6339      	str	r1, [r7, #48]	; 0x30
 80071a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80071a8:	ed87 0b08 	vstr	d0, [r7, #32]
	double x,y;
	double u[4];
	double v[2];
	int i,j,k;

	k = row;
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	677b      	str	r3, [r7, #116]	; 0x74
	pH = H + row * n;
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071be:	4413      	add	r3, r2
 80071c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	pH[row] = 1.0;
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80071cc:	18d1      	adds	r1, r2, r3
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	4b62      	ldr	r3, [pc, #392]	; (800735c <BackSubstitute_Real_Vector+0x1c4>)
 80071d4:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = row - 1, pH -= n; i >= 0; i--, pH -= n) {
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	3b01      	subs	r3, #1
 80071dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	425b      	negs	r3, r3
 80071e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80071ea:	4413      	add	r3, r2
 80071ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071f0:	e1a3      	b.n	800753a <BackSubstitute_Real_Vector+0x3a2>
		u[0] = pH[i] - eigen_real[row];
 80071f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80071fa:	4413      	add	r3, r2
 80071fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	00da      	lsls	r2, r3, #3
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	4413      	add	r3, r2
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f854 	bl	80002b8 <__aeabi_dsub>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		v[0] = pH[row];
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007220:	4413      	add	r3, r2
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		pV = H + n * k;
 800722a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800722e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007230:	fb02 f303 	mul.w	r3, r2, r3
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007238:	4413      	add	r3, r2
 800723a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for (j = k; j < row; j++, pV += n) v[0] += pH[j] * pV[row];
 800723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007240:	67bb      	str	r3, [r7, #120]	; 0x78
 8007242:	e026      	b.n	8007292 <BackSubstitute_Real_Vector+0xfa>
 8007244:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	00da      	lsls	r2, r3, #3
 800724c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007250:	4413      	add	r3, r2
 8007252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	00da      	lsls	r2, r3, #3
 800725a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800725e:	4413      	add	r3, r2
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 f9e0 	bl	8000628 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4620      	mov	r0, r4
 800726e:	4629      	mov	r1, r5
 8007270:	f7f9 f824 	bl	80002bc <__adddf3>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800727c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727e:	3301      	adds	r3, #1
 8007280:	67bb      	str	r3, [r7, #120]	; 0x78
 8007282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800728c:	4413      	add	r3, r2
 800728e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007292:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	429a      	cmp	r2, r3
 8007298:	dbd4      	blt.n	8007244 <BackSubstitute_Real_Vector+0xac>
		if ( eigen_imag[i] < 0.0 ) {
 800729a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072a0:	4413      	add	r3, r2
 80072a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	f7f9 fc2d 	bl	8000b0c <__aeabi_dcmplt>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <BackSubstitute_Real_Vector+0x132>
			u[3] = u[0];
 80072b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072bc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			v[1] = v[0];
 80072c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80072c8:	e12b      	b.n	8007522 <BackSubstitute_Real_Vector+0x38a>
		} else {
			k = i;
 80072ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072cc:	677b      	str	r3, [r7, #116]	; 0x74
			if (eigen_imag[i] == 0.0) {
 80072ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d4:	4413      	add	r3, r2
 80072d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	f7f9 fc09 	bl	8000af8 <__aeabi_dcmpeq>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d039      	beq.n	8007360 <BackSubstitute_Real_Vector+0x1c8>
				if (u[0] != 0.0) pH[row] = - v[0] / u[0];
 80072ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	f7f9 fbfe 	bl	8000af8 <__aeabi_dcmpeq>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d116      	bne.n	8007330 <BackSubstitute_Real_Vector+0x198>
 8007302:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007306:	4690      	mov	r8, r2
 8007308:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800730c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	00da      	lsls	r2, r3, #3
 8007314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007318:	189c      	adds	r4, r3, r2
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	f7f9 faab 	bl	800087c <__aeabi_ddiv>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	e9c4 2300 	strd	r2, r3, [r4]
 800732e:	e0f8      	b.n	8007522 <BackSubstitute_Real_Vector+0x38a>
				else pH[row] = - v[0] / zero_tolerance;
 8007330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007334:	4692      	mov	sl, r2
 8007336:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007342:	18d4      	adds	r4, r2, r3
 8007344:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007348:	4650      	mov	r0, sl
 800734a:	4659      	mov	r1, fp
 800734c:	f7f9 fa96 	bl	800087c <__aeabi_ddiv>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	e9c4 2300 	strd	r2, r3, [r4]
 8007358:	e0e3      	b.n	8007522 <BackSubstitute_Real_Vector+0x38a>
 800735a:	bf00      	nop
 800735c:	3ff00000 	.word	0x3ff00000
			} else {
				u[1] = pH[i+1];
 8007360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007362:	3301      	adds	r3, #1
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800736a:	4413      	add	r3, r2
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				u[2] = pH[n+i];
 8007374:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800737a:	4413      	add	r3, r2
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007382:	4413      	add	r3, r2
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				x = (eigen_real[i] - eigen_real[row]);
 800738c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007392:	4413      	add	r3, r2
 8007394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	00da      	lsls	r2, r3, #3
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	4413      	add	r3, r2
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 ff88 	bl	80002b8 <__aeabi_dsub>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				x *= x;
 80073b0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80073b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073b8:	f7f9 f936 	bl	8000628 <__aeabi_dmul>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				x += eigen_imag[i] * eigen_imag[i];
 80073c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ca:	4413      	add	r3, r2
 80073cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073d2:	00da      	lsls	r2, r3, #3
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	4413      	add	r3, r2
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f9 f924 	bl	8000628 <__aeabi_dmul>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073e8:	f7f8 ff68 	bl	80002bc <__adddf3>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				pH[row] = (u[1] * v[1] - u[3] * v[0]) / x;
 80073f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80073f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073fc:	f7f9 f914 	bl	8000628 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4614      	mov	r4, r2
 8007406:	461d      	mov	r5, r3
 8007408:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800740c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007410:	f7f9 f90a 	bl	8000628 <__aeabi_dmul>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	f7f8 ff4c 	bl	80002b8 <__aeabi_dsub>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4610      	mov	r0, r2
 8007426:	4619      	mov	r1, r3
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	00da      	lsls	r2, r3, #3
 800742c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007430:	189c      	adds	r4, r3, r2
 8007432:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007436:	f7f9 fa21 	bl	800087c <__aeabi_ddiv>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	e9c4 2300 	strd	r2, r3, [r4]
				if ( fabs(u[1]) > fabs(u[3]) )
 8007442:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007446:	61ba      	str	r2, [r7, #24]
 8007448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007452:	613a      	str	r2, [r7, #16]
 8007454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007458:	617b      	str	r3, [r7, #20]
 800745a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800745e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007462:	f7f9 fb71 	bl	8000b48 <__aeabi_dcmpgt>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d02d      	beq.n	80074c8 <BackSubstitute_Real_Vector+0x330>
					pH[n+row] = -(v[0] + u[0] * pH[row]) / u[1];
 800746c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007470:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	00da      	lsls	r2, r3, #3
 8007478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800747c:	4413      	add	r3, r2
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f7f9 f8d1 	bl	8000628 <__aeabi_dmul>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f7f8 ff15 	bl	80002bc <__adddf3>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	60ba      	str	r2, [r7, #8]
 8007498:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	4413      	add	r3, r2
 80074aa:	00da      	lsls	r2, r3, #3
 80074ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074b0:	189c      	adds	r4, r3, r2
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074ba:	f7f9 f9df 	bl	800087c <__aeabi_ddiv>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	e9c4 2300 	strd	r2, r3, [r4]
 80074c6:	e02c      	b.n	8007522 <BackSubstitute_Real_Vector+0x38a>
				else
					pH[n+row] = -(v[1] + u[2] * pH[row]) / u[3];
 80074c8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80074cc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	00da      	lsls	r2, r3, #3
 80074d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d8:	4413      	add	r3, r2
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f9 f8a3 	bl	8000628 <__aeabi_dmul>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f8 fee7 	bl	80002bc <__adddf3>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	603a      	str	r2, [r7, #0]
 80074f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80074f8:	607b      	str	r3, [r7, #4]
 80074fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80074fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	4413      	add	r3, r2
 8007506:	00da      	lsls	r2, r3, #3
 8007508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800750c:	189c      	adds	r4, r3, r2
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007516:	f7f9 f9b1 	bl	800087c <__aeabi_ddiv>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	e9c4 2300 	strd	r2, r3, [r4]
	for (i = row - 1, pH -= n; i >= 0; i--, pH -= n) {
 8007522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007524:	3b01      	subs	r3, #1
 8007526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	425b      	negs	r3, r3
 8007530:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007534:	4413      	add	r3, r2
 8007536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800753a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800753c:	2b00      	cmp	r3, #0
 800753e:	f6bf ae58 	bge.w	80071f2 <BackSubstitute_Real_Vector+0x5a>
			}
		}
	}
}
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	3788      	adds	r7, #136	; 0x88
 8007548:	46bd      	mov	sp, r7
 800754a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754e:	bf00      	nop

08007550 <BackSubstitute_Complex_Vector>:
//            The dimension of H, eigen_real, and eigen_imag.                 //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void BackSubstitute_Complex_Vector(double *H, double eigen_real[],
		double eigen_imag[], int row,  double zero_tolerance, int n)
{
 8007550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007554:	ed2d 8b02 	vpush	{d8}
 8007558:	b0c0      	sub	sp, #256	; 0x100
 800755a:	af00      	add	r7, sp, #0
 800755c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8007560:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8007564:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800756c:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80
	double u[4];
	double v[2];
	double w[2];
	int i,j,k;

	k = row - 1;
 8007570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007574:	3b01      	subs	r3, #1
 8007576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	pH = H + n * row;
 800757a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800757e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	00da      	lsls	r2, r3, #3
 8007588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800758c:	4413      	add	r3, r2
 800758e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	if ( fabs(pH[k]) > fabs(pH[row-n]) ) {
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	00da      	lsls	r2, r3, #3
 8007598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759c:	4413      	add	r3, r2
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	4690      	mov	r8, r2
 80075a4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80075a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	00da      	lsls	r2, r3, #3
 80075b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b8:	4413      	add	r3, r2
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	4614      	mov	r4, r2
 80075c0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80075c4:	4622      	mov	r2, r4
 80075c6:	462b      	mov	r3, r5
 80075c8:	4640      	mov	r0, r8
 80075ca:	4649      	mov	r1, r9
 80075cc:	f7f9 fabc 	bl	8000b48 <__aeabi_dcmpgt>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d059      	beq.n	800768a <BackSubstitute_Complex_Vector+0x13a>
		pH[k-n] = - (pH[row] - eigen_real[row]) / pH[k];
 80075d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075da:	00da      	lsls	r2, r3, #3
 80075dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075e0:	4413      	add	r3, r2
 80075e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075ea:	00da      	lsls	r2, r3, #3
 80075ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075f0:	4413      	add	r3, r2
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 fe5f 	bl	80002b8 <__aeabi_dsub>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4692      	mov	sl, r2
 8007600:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8007604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007608:	00da      	lsls	r2, r3, #3
 800760a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800760e:	4413      	add	r3, r2
 8007610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007614:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007618:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	00da      	lsls	r2, r3, #3
 8007620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007624:	189c      	adds	r4, r3, r2
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4650      	mov	r0, sl
 800762c:	4659      	mov	r1, fp
 800762e:	f7f9 f925 	bl	800087c <__aeabi_ddiv>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	e9c4 2300 	strd	r2, r3, [r4]
		pH[row-n] = -eigen_imag[row] / pH[k];
 800763a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800763e:	00da      	lsls	r2, r3, #3
 8007640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007644:	4413      	add	r3, r2
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	67ba      	str	r2, [r7, #120]	; 0x78
 800764c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007650:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007656:	00da      	lsls	r2, r3, #3
 8007658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765c:	4413      	add	r3, r2
 800765e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007662:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007666:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	00da      	lsls	r2, r3, #3
 800766e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007672:	189c      	adds	r4, r3, r2
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800767c:	f7f9 f8fe 	bl	800087c <__aeabi_ddiv>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	e9c4 2300 	strd	r2, r3, [r4]
 8007688:	e050      	b.n	800772c <BackSubstitute_Complex_Vector+0x1dc>
	}
	else
		Complex_Division(-pH[row-n], 0.0,
 800768a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800768e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	00da      	lsls	r2, r3, #3
 8007696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800769a:	4413      	add	r3, r2
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	673a      	str	r2, [r7, #112]	; 0x70
 80076a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80076a6:	677b      	str	r3, [r7, #116]	; 0x74
				pH[k-n]-eigen_real[row], eigen_imag[row], &pH[k-n], &pH[row-n]);
 80076a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	00da      	lsls	r2, r3, #3
 80076b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b8:	4413      	add	r3, r2
 80076ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076c2:	00da      	lsls	r2, r3, #3
 80076c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076c8:	4413      	add	r3, r2
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
		Complex_Division(-pH[row-n], 0.0,
 80076ce:	f7f8 fdf3 	bl	80002b8 <__aeabi_dsub>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	ec43 2b16 	vmov	d6, r2, r3
				pH[k-n]-eigen_real[row], eigen_imag[row], &pH[k-n], &pH[row-n]);
 80076da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076de:	00da      	lsls	r2, r3, #3
 80076e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076e4:	4413      	add	r3, r2
		Complex_Division(-pH[row-n], 0.0,
 80076e6:	ed93 7b00 	vldr	d7, [r3]
				pH[k-n]-eigen_real[row], eigen_imag[row], &pH[k-n], &pH[row-n]);
 80076ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	00da      	lsls	r2, r3, #3
		Complex_Division(-pH[row-n], 0.0,
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fa:	1898      	adds	r0, r3, r2
				pH[k-n]-eigen_real[row], eigen_imag[row], &pH[k-n], &pH[row-n]);
 80076fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007700:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	00da      	lsls	r2, r3, #3
		Complex_Division(-pH[row-n], 0.0,
 8007708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800770c:	4413      	add	r3, r2
 800770e:	4619      	mov	r1, r3
 8007710:	eeb0 3a47 	vmov.f32	s6, s14
 8007714:	eef0 3a67 	vmov.f32	s7, s15
 8007718:	eeb0 2a46 	vmov.f32	s4, s12
 800771c:	eef0 2a66 	vmov.f32	s5, s13
 8007720:	ed9f 1b8f 	vldr	d1, [pc, #572]	; 8007960 <BackSubstitute_Complex_Vector+0x410>
 8007724:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8007728:	f000 fcd0 	bl	80080cc <Complex_Division>
	pH[k] = 1.0;
 800772c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007730:	00da      	lsls	r2, r3, #3
 8007732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007736:	1899      	adds	r1, r3, r2
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	4b8a      	ldr	r3, [pc, #552]	; (8007968 <BackSubstitute_Complex_Vector+0x418>)
 800773e:	e9c1 2300 	strd	r2, r3, [r1]
	pH[row] = 0.0;
 8007742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007746:	00da      	lsls	r2, r3, #3
 8007748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800774c:	1899      	adds	r1, r3, r2
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	f04f 0300 	mov.w	r3, #0
 8007756:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = row - 2, pH = H + n * i; i >= 0; pH -= n, i--) {
 800775a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800775e:	3b02      	subs	r3, #2
 8007760:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007764:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007768:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800776c:	fb02 f303 	mul.w	r3, r2, r3
 8007770:	00da      	lsls	r2, r3, #3
 8007772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007776:	4413      	add	r3, r2
 8007778:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800777c:	e3a5      	b.n	8007eca <BackSubstitute_Complex_Vector+0x97a>
		u[0] = pH[i] - eigen_real[row];
 800777e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007782:	00da      	lsls	r2, r3, #3
 8007784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007788:	4413      	add	r3, r2
 800778a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800778e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007792:	00da      	lsls	r2, r3, #3
 8007794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007798:	4413      	add	r3, r2
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	f7f8 fd8b 	bl	80002b8 <__aeabi_dsub>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		w[0] = pH[row];
 80077aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077ae:	00da      	lsls	r2, r3, #3
 80077b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b4:	4413      	add	r3, r2
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		w[1] = 0.0;
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		pV = H + k * n;
 80077ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	00da      	lsls	r2, r3, #3
 80077d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077dc:	4413      	add	r3, r2
 80077de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		for (j = k; j < row; j++, pV+=n) {
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077ea:	e04b      	b.n	8007884 <BackSubstitute_Complex_Vector+0x334>
			w[0] += pH[j] * pV[row - 1];
 80077ec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80077f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077f4:	00da      	lsls	r2, r3, #3
 80077f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077fa:	4413      	add	r3, r2
 80077fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007804:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007808:	3b01      	subs	r3, #1
 800780a:	00da      	lsls	r2, r3, #3
 800780c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007810:	4413      	add	r3, r2
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f7f8 ff07 	bl	8000628 <__aeabi_dmul>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f8 fd4b 	bl	80002bc <__adddf3>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			w[1] += pH[j] * pV[row];
 800782e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8007832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007836:	00da      	lsls	r2, r3, #3
 8007838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783c:	4413      	add	r3, r2
 800783e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007846:	00da      	lsls	r2, r3, #3
 8007848:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800784c:	4413      	add	r3, r2
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fee9 	bl	8000628 <__aeabi_dmul>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	f7f8 fd2d 	bl	80002bc <__adddf3>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		for (j = k; j < row; j++, pV+=n) {
 800786a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800786e:	3301      	adds	r3, #1
 8007870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007874:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007878:	00da      	lsls	r2, r3, #3
 800787a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800787e:	4413      	add	r3, r2
 8007880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007884:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800788c:	429a      	cmp	r2, r3
 800788e:	dbad      	blt.n	80077ec <BackSubstitute_Complex_Vector+0x29c>
		}
		if (eigen_imag[i] < 0.0) {
 8007890:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007894:	00da      	lsls	r2, r3, #3
 8007896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800789a:	4413      	add	r3, r2
 800789c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	f7f9 f930 	bl	8000b0c <__aeabi_dcmplt>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <BackSubstitute_Complex_Vector+0x37c>
			u[3] = u[0];
 80078b2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80078b6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
			v[0] = w[0];
 80078ba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80078be:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			v[1] = w[1];
 80078c2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80078c6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 80078ca:	e2f0      	b.n	8007eae <BackSubstitute_Complex_Vector+0x95e>
		} else {
			k = i;
 80078cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			if (eigen_imag[i] == 0.0) {
 80078d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078d8:	00da      	lsls	r2, r3, #3
 80078da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078de:	4413      	add	r3, r2
 80078e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	f04f 0300 	mov.w	r3, #0
 80078ec:	f7f9 f904 	bl	8000af8 <__aeabi_dcmpeq>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d03a      	beq.n	800796c <BackSubstitute_Complex_Vector+0x41c>
				Complex_Division(-w[0], -w[1], u[0], eigen_imag[row], &pH[row-1],
 80078f6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80078fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80078fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007902:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007906:	663a      	str	r2, [r7, #96]	; 0x60
 8007908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800790c:	667b      	str	r3, [r7, #100]	; 0x64
 800790e:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8007912:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007916:	00da      	lsls	r2, r3, #3
 8007918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800791c:	4413      	add	r3, r2
 800791e:	ed93 6b00 	vldr	d6, [r3]
 8007922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007926:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800792a:	3b01      	subs	r3, #1
 800792c:	00da      	lsls	r2, r3, #3
 800792e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007932:	1898      	adds	r0, r3, r2
						&pH[row]);
 8007934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007938:	00da      	lsls	r2, r3, #3
				Complex_Division(-w[0], -w[1], u[0], eigen_imag[row], &pH[row-1],
 800793a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800793e:	4413      	add	r3, r2
 8007940:	4619      	mov	r1, r3
 8007942:	eeb0 3a46 	vmov.f32	s6, s12
 8007946:	eef0 3a66 	vmov.f32	s7, s13
 800794a:	eeb0 2a47 	vmov.f32	s4, s14
 800794e:	eef0 2a67 	vmov.f32	s5, s15
 8007952:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8007956:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800795a:	f000 fbb7 	bl	80080cc <Complex_Division>
 800795e:	e2a6      	b.n	8007eae <BackSubstitute_Complex_Vector+0x95e>
	...
 8007968:	3ff00000 	.word	0x3ff00000
			}
			else {
				u[1] = pH[i+1];
 800796c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007970:	3301      	adds	r3, #1
 8007972:	00da      	lsls	r2, r3, #3
 8007974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007978:	4413      	add	r3, r2
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
				u[2] = pH[n + i];
 8007982:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800798a:	4413      	add	r3, r2
 800798c:	00da      	lsls	r2, r3, #3
 800798e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007992:	4413      	add	r3, r2
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
				x = eigen_real[i] - eigen_real[row];
 800799c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079a0:	00da      	lsls	r2, r3, #3
 80079a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079a6:	4413      	add	r3, r2
 80079a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079b0:	00da      	lsls	r2, r3, #3
 80079b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079b6:	4413      	add	r3, r2
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f7f8 fc7c 	bl	80002b8 <__aeabi_dsub>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
				y = 2.0 * x * eigen_imag[row];
 80079c8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	f7f8 fc74 	bl	80002bc <__adddf3>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079e0:	00da      	lsls	r2, r3, #3
 80079e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079e6:	4413      	add	r3, r2
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fe1c 	bl	8000628 <__aeabi_dmul>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
				x = x * x + eigen_imag[i] * eigen_imag[i]
 80079f8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80079fc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8007a00:	f7f8 fe12 	bl	8000628 <__aeabi_dmul>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	461d      	mov	r5, r3
 8007a0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a10:	00da      	lsls	r2, r3, #3
 8007a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a16:	4413      	add	r3, r2
 8007a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a20:	00da      	lsls	r2, r3, #3
 8007a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a26:	4413      	add	r3, r2
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f7f8 fdfc 	bl	8000628 <__aeabi_dmul>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4620      	mov	r0, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	f7f8 fc40 	bl	80002bc <__adddf3>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	461d      	mov	r5, r3
													   - eigen_imag[row] * eigen_imag[row];
 8007a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a48:	00da      	lsls	r2, r3, #3
 8007a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a4e:	4413      	add	r3, r2
 8007a50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a58:	00da      	lsls	r2, r3, #3
 8007a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a5e:	4413      	add	r3, r2
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f7f8 fde0 	bl	8000628 <__aeabi_dmul>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
				x = x * x + eigen_imag[i] * eigen_imag[i]
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 fc22 	bl	80002b8 <__aeabi_dsub>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
				if ( x == 0.0 && y == 0.0 )
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8007a88:	f7f9 f836 	bl	8000af8 <__aeabi_dcmpeq>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d056      	beq.n	8007b40 <BackSubstitute_Complex_Vector+0x5f0>
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007a9e:	f7f9 f82b 	bl	8000af8 <__aeabi_dcmpeq>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d04b      	beq.n	8007b40 <BackSubstitute_Complex_Vector+0x5f0>
					x = zero_tolerance * ( fabs(u[0]) + fabs(u[1]) + fabs(u[2])
 8007aa8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007aac:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ab4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8007ab8:	653a      	str	r2, [r7, #80]	; 0x50
 8007aba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007abe:	657b      	str	r3, [r7, #84]	; 0x54
 8007ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ac4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ac8:	f7f8 fbf8 	bl	80002bc <__adddf3>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8007ad8:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ae4:	f7f8 fbea 	bl	80002bc <__adddf3>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4610      	mov	r0, r2
 8007aee:	4619      	mov	r1, r3
							+ fabs(u[3]) + fabs(eigen_imag[row]) );
 8007af0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007af4:	643a      	str	r2, [r7, #64]	; 0x40
 8007af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007afa:	647b      	str	r3, [r7, #68]	; 0x44
 8007afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b00:	f7f8 fbdc 	bl	80002bc <__adddf3>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b10:	00da      	lsls	r2, r3, #3
 8007b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b16:	4413      	add	r3, r2
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b28:	f7f8 fbc8 	bl	80002bc <__adddf3>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
					x = zero_tolerance * ( fabs(u[0]) + fabs(u[1]) + fabs(u[2])
 8007b30:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b34:	f7f8 fd78 	bl	8000628 <__aeabi_dmul>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
				Complex_Division(u[1]*v[0] - u[3] * w[0] + w[1] * eigen_imag[row],
 8007b40:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007b44:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007b48:	f7f8 fd6e 	bl	8000628 <__aeabi_dmul>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4614      	mov	r4, r2
 8007b52:	461d      	mov	r5, r3
 8007b54:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007b58:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007b5c:	f7f8 fd64 	bl	8000628 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4620      	mov	r0, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	f7f8 fba6 	bl	80002b8 <__aeabi_dsub>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4614      	mov	r4, r2
 8007b72:	461d      	mov	r5, r3
 8007b74:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b7c:	00da      	lsls	r2, r3, #3
 8007b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b82:	4413      	add	r3, r2
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f7f8 fd4e 	bl	8000628 <__aeabi_dmul>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4620      	mov	r0, r4
 8007b92:	4629      	mov	r1, r5
 8007b94:	f7f8 fb92 	bl	80002bc <__adddf3>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	ec43 2b18 	vmov	d8, r2, r3
						u[1] * v[1] - u[3] * w[1] - w[0] * eigen_imag[row],
 8007ba0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007ba4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007ba8:	f7f8 fd3e 	bl	8000628 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	461d      	mov	r5, r3
 8007bb4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007bb8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007bbc:	f7f8 fd34 	bl	8000628 <__aeabi_dmul>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fb76 	bl	80002b8 <__aeabi_dsub>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	461d      	mov	r5, r3
 8007bd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bdc:	00da      	lsls	r2, r3, #3
 8007bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007be2:	4413      	add	r3, r2
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fd1e 	bl	8000628 <__aeabi_dmul>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
				Complex_Division(u[1]*v[0] - u[3] * w[0] + w[1] * eigen_imag[row],
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	f7f8 fb60 	bl	80002b8 <__aeabi_dsub>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	ec43 2b17 	vmov	d7, r2, r3
						x, y, &pH[row-1], &pH[row]);
 8007c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c04:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	00da      	lsls	r2, r3, #3
				Complex_Division(u[1]*v[0] - u[3] * w[0] + w[1] * eigen_imag[row],
 8007c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c10:	1898      	adds	r0, r3, r2
						x, y, &pH[row-1], &pH[row]);
 8007c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c16:	00da      	lsls	r2, r3, #3
				Complex_Division(u[1]*v[0] - u[3] * w[0] + w[1] * eigen_imag[row],
 8007c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c1c:	4413      	add	r3, r2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	ed97 3b36 	vldr	d3, [r7, #216]	; 0xd8
 8007c24:	ed97 2b3c 	vldr	d2, [r7, #240]	; 0xf0
 8007c28:	eeb0 1a47 	vmov.f32	s2, s14
 8007c2c:	eef0 1a67 	vmov.f32	s3, s15
 8007c30:	eeb0 0a48 	vmov.f32	s0, s16
 8007c34:	eef0 0a68 	vmov.f32	s1, s17
 8007c38:	f000 fa48 	bl	80080cc <Complex_Division>
				if ( fabs(u[1]) > (fabs(u[3]) + fabs(eigen_imag[row])) ) {
 8007c3c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8007c40:	633a      	str	r2, [r7, #48]	; 0x30
 8007c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c46:	637b      	str	r3, [r7, #52]	; 0x34
 8007c48:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007c4c:	62ba      	str	r2, [r7, #40]	; 0x28
 8007c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c58:	00da      	lsls	r2, r3, #3
 8007c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5e:	4413      	add	r3, r2
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	623a      	str	r2, [r7, #32]
 8007c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007c74:	f7f8 fb22 	bl	80002bc <__adddf3>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007c80:	f7f8 ff62 	bl	8000b48 <__aeabi_dcmpgt>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a4 	beq.w	8007dd4 <BackSubstitute_Complex_Vector+0x884>
					pH[n+row-1] = -w[0] - u[0] * pH[row-1]
 8007c8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007c90:	61ba      	str	r2, [r7, #24]
 8007c92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	00da      	lsls	r2, r3, #3
 8007ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cac:	4413      	add	r3, r2
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fcb9 	bl	8000628 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cbe:	f7f8 fafb 	bl	80002b8 <__aeabi_dsub>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4690      	mov	r8, r2
 8007cc8:	4699      	mov	r9, r3
													+ eigen_imag[row] * pH[row] / u[1];
 8007cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cce:	00da      	lsls	r2, r3, #3
 8007cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd4:	4413      	add	r3, r2
 8007cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cde:	00da      	lsls	r2, r3, #3
 8007ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce4:	4413      	add	r3, r2
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fc9d 	bl	8000628 <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8007cfa:	f7f8 fdbf 	bl	800087c <__aeabi_ddiv>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4610      	mov	r0, r2
 8007d04:	4619      	mov	r1, r3
					pH[n+row-1] = -w[0] - u[0] * pH[row-1]
 8007d06:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d0e:	4413      	add	r3, r2
 8007d10:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007d14:	3b01      	subs	r3, #1
 8007d16:	00da      	lsls	r2, r3, #3
 8007d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d1c:	189c      	adds	r4, r3, r2
													+ eigen_imag[row] * pH[row] / u[1];
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4640      	mov	r0, r8
 8007d24:	4649      	mov	r1, r9
 8007d26:	f7f8 fac9 	bl	80002bc <__adddf3>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
					pH[n+row-1] = -w[0] - u[0] * pH[row-1]
 8007d2e:	e9c4 2300 	strd	r2, r3, [r4]
					pH[n+row] = -w[1] - u[0] * pH[row]
 8007d32:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007d36:	613a      	str	r2, [r7, #16]
 8007d38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d46:	00da      	lsls	r2, r3, #3
 8007d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d4c:	4413      	add	r3, r2
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	f7f8 fc69 	bl	8000628 <__aeabi_dmul>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d5e:	f7f8 faab 	bl	80002b8 <__aeabi_dsub>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4690      	mov	r8, r2
 8007d68:	4699      	mov	r9, r3
												  - eigen_imag[row] * pH[row-1] / u[1];
 8007d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d6e:	00da      	lsls	r2, r3, #3
 8007d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d74:	4413      	add	r3, r2
 8007d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d7e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007d82:	3b01      	subs	r3, #1
 8007d84:	00da      	lsls	r2, r3, #3
 8007d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d8a:	4413      	add	r3, r2
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fc4a 	bl	8000628 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8007da0:	f7f8 fd6c 	bl	800087c <__aeabi_ddiv>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4610      	mov	r0, r2
 8007daa:	4619      	mov	r1, r3
					pH[n+row] = -w[1] - u[0] * pH[row]
 8007dac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007db4:	4413      	add	r3, r2
 8007db6:	00da      	lsls	r2, r3, #3
 8007db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dbc:	189c      	adds	r4, r3, r2
												  - eigen_imag[row] * pH[row-1] / u[1];
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	f7f8 fa77 	bl	80002b8 <__aeabi_dsub>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
					pH[n+row] = -w[1] - u[0] * pH[row]
 8007dce:	e9c4 2300 	strd	r2, r3, [r4]
 8007dd2:	e06c      	b.n	8007eae <BackSubstitute_Complex_Vector+0x95e>
				}
				else {
					Complex_Division(-v[0] - u[2] * pH[row-1], -v[1] - u[2]*pH[row],
 8007dd4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007dd8:	60ba      	str	r2, [r7, #8]
 8007dda:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007de8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007dec:	3b01      	subs	r3, #1
 8007dee:	00da      	lsls	r2, r3, #3
 8007df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df4:	4413      	add	r3, r2
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fc15 	bl	8000628 <__aeabi_dmul>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e06:	f7f8 fa57 	bl	80002b8 <__aeabi_dsub>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	ec43 2b18 	vmov	d8, r2, r3
 8007e12:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007e16:	603a      	str	r2, [r7, #0]
 8007e18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e26:	00da      	lsls	r2, r3, #3
 8007e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2c:	4413      	add	r3, r2
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fbf9 	bl	8000628 <__aeabi_dmul>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e3e:	f7f8 fa3b 	bl	80002b8 <__aeabi_dsub>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	ec43 2b15 	vmov	d5, r2, r3
 8007e4a:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
							u[3], eigen_imag[row], &pH[n+row-1], &pH[n+row]);
 8007e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e52:	00da      	lsls	r2, r3, #3
 8007e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e58:	4413      	add	r3, r2
					Complex_Division(-v[0] - u[2] * pH[row-1], -v[1] - u[2]*pH[row],
 8007e5a:	ed93 6b00 	vldr	d6, [r3]
							u[3], eigen_imag[row], &pH[n+row-1], &pH[n+row]);
 8007e5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e66:	4413      	add	r3, r2
 8007e68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	00da      	lsls	r2, r3, #3
					Complex_Division(-v[0] - u[2] * pH[row-1], -v[1] - u[2]*pH[row],
 8007e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e74:	1898      	adds	r0, r3, r2
							u[3], eigen_imag[row], &pH[n+row-1], &pH[n+row]);
 8007e76:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e7e:	4413      	add	r3, r2
 8007e80:	00da      	lsls	r2, r3, #3
					Complex_Division(-v[0] - u[2] * pH[row-1], -v[1] - u[2]*pH[row],
 8007e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e86:	4413      	add	r3, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	eeb0 3a46 	vmov.f32	s6, s12
 8007e8e:	eef0 3a66 	vmov.f32	s7, s13
 8007e92:	eeb0 2a47 	vmov.f32	s4, s14
 8007e96:	eef0 2a67 	vmov.f32	s5, s15
 8007e9a:	eeb0 1a45 	vmov.f32	s2, s10
 8007e9e:	eef0 1a65 	vmov.f32	s3, s11
 8007ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ea6:	eef0 0a68 	vmov.f32	s1, s17
 8007eaa:	f000 f90f 	bl	80080cc <Complex_Division>
	for (i = row - 2, pH = H + n * i; i >= 0; pH -= n, i--) {
 8007eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	425a      	negs	r2, r3
 8007eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eba:	4413      	add	r3, r2
 8007ebc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ec0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007eca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f6bf ac55 	bge.w	800777e <BackSubstitute_Complex_Vector+0x22e>
				}
			}
		}
	}
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007edc:	46bd      	mov	sp, r7
 8007ede:	ecbd 8b02 	vpop	{d8}
 8007ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ee6:	bf00      	nop

08007ee8 <Calculate_Eigenvectors>:
//            The dimension of H, S, eigen_real, and eigen_imag.              //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Calculate_Eigenvectors(double *H, double *S, double eigen_real[],
		double eigen_imag[], int n)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08e      	sub	sp, #56	; 0x38
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
	double* pH;
	double* pS;
	double x,y;
	int i,j,k;

	for (k = n-1; k >= 0; k--) {
 8007ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	e0dd      	b.n	80080ba <Calculate_Eigenvectors+0x1d2>
		if (eigen_imag[k] < 0.0) {
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	f7f8 fdfb 	bl	8000b0c <__aeabi_dcmplt>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d074      	beq.n	8008006 <Calculate_Eigenvectors+0x11e>
			for (i = 0, pS = S; i < n; pS += n, i++) {
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
 8007f24:	e06a      	b.n	8007ffc <Calculate_Eigenvectors+0x114>
				x = 0.0;
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	f04f 0300 	mov.w	r3, #0
 8007f2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				y = 0.0;
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
				for (j = 0, pH = H; j <= k; pH += n, j++) {
 8007f3e:	2300      	movs	r3, #0
 8007f40:	61bb      	str	r3, [r7, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
 8007f46:	e03a      	b.n	8007fbe <Calculate_Eigenvectors+0xd6>
					x += pS[j] * pH[k-1];
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4e:	4413      	add	r3, r2
 8007f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f60:	4413      	add	r3, r2
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 fb5f 	bl	8000628 <__aeabi_dmul>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f72:	f7f8 f9a3 	bl	80002bc <__adddf3>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					y += pS[j] * pH[k];
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f84:	4413      	add	r3, r2
 8007f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f90:	4413      	add	r3, r2
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 fb47 	bl	8000628 <__aeabi_dmul>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007fa2:	f7f8 f98b 	bl	80002bc <__adddf3>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	e9c7 2308 	strd	r2, r3, [r7, #32]
				for (j = 0, pH = H; j <= k; pH += n, j++) {
 8007fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb4:	4413      	add	r3, r2
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	ddc0      	ble.n	8007f48 <Calculate_Eigenvectors+0x60>
				}
				pS[k-1] = x;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd2:	18d1      	adds	r1, r2, r3
 8007fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fd8:	e9c1 2300 	strd	r2, r3, [r1]
				pS[k] = y;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe2:	18d1      	adds	r1, r2, r3
 8007fe4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fe8:	e9c1 2300 	strd	r2, r3, [r1]
			for (i = 0, pS = S; i < n; pS += n, i++) {
 8007fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff2:	4413      	add	r3, r2
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008000:	429a      	cmp	r2, r3
 8008002:	db90      	blt.n	8007f26 <Calculate_Eigenvectors+0x3e>
 8008004:	e056      	b.n	80080b4 <Calculate_Eigenvectors+0x1cc>
			}
		} else if (eigen_imag[k] == 0.0) {
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4413      	add	r3, r2
 800800e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008012:	f04f 0200 	mov.w	r2, #0
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	f7f8 fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d047      	beq.n	80080b4 <Calculate_Eigenvectors+0x1cc>
			for (i = 0, pS = S; i < n; i++, pS += n) {
 8008024:	2300      	movs	r3, #0
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	633b      	str	r3, [r7, #48]	; 0x30
 800802c:	e03e      	b.n	80080ac <Calculate_Eigenvectors+0x1c4>
				x = 0.0;
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				for (j = 0, pH = H; j <= k; j++, pH += n)
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
 8008042:	e01f      	b.n	8008084 <Calculate_Eigenvectors+0x19c>
					x += pS[j] * pH[k];
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804a:	4413      	add	r3, r2
 800804c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008056:	4413      	add	r3, r2
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 fae4 	bl	8000628 <__aeabi_dmul>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008068:	f7f8 f928 	bl	80002bc <__adddf3>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				for (j = 0, pH = H; j <= k; j++, pH += n)
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	3301      	adds	r3, #1
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008080:	4413      	add	r3, r2
 8008082:	637b      	str	r3, [r7, #52]	; 0x34
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	429a      	cmp	r2, r3
 800808a:	dddb      	ble.n	8008044 <Calculate_Eigenvectors+0x15c>
				pS[k] = x;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008092:	18d1      	adds	r1, r2, r3
 8008094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008098:	e9c1 2300 	strd	r2, r3, [r1]
			for (i = 0, pS = S; i < n; i++, pS += n) {
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3301      	adds	r3, #1
 80080a0:	61fb      	str	r3, [r7, #28]
 80080a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a8:	4413      	add	r3, r2
 80080aa:	633b      	str	r3, [r7, #48]	; 0x30
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b0:	429a      	cmp	r2, r3
 80080b2:	dbbc      	blt.n	800802e <Calculate_Eigenvectors+0x146>
	for (k = n-1; k >= 0; k--) {
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f6bf af1e 	bge.w	8007efe <Calculate_Eigenvectors+0x16>
			}
		}
	}
}
 80080c2:	bf00      	nop
 80080c4:	bf00      	nop
 80080c6:	3738      	adds	r7, #56	; 0x38
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <Complex_Division>:
//            Imaginary part of the quotient.                                 //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
void Complex_Division(double x, double y, double u, double v,
		double* a, double* b)
{
 80080cc:	b5b0      	push	{r4, r5, r7, lr}
 80080ce:	b08c      	sub	sp, #48	; 0x30
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	ed87 0b08 	vstr	d0, [r7, #32]
 80080d6:	ed87 1b06 	vstr	d1, [r7, #24]
 80080da:	ed87 2b04 	vstr	d2, [r7, #16]
 80080de:	ed87 3b02 	vstr	d3, [r7, #8]
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	double q = u*u + v*v;
 80080e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080ee:	f7f8 fa9b 	bl	8000628 <__aeabi_dmul>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4614      	mov	r4, r2
 80080f8:	461d      	mov	r5, r3
 80080fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008102:	f7f8 fa91 	bl	8000628 <__aeabi_dmul>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4620      	mov	r0, r4
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 f8d5 	bl	80002bc <__adddf3>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	*a = (x * u + y * v) / q;
 800811a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800811e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008122:	f7f8 fa81 	bl	8000628 <__aeabi_dmul>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4614      	mov	r4, r2
 800812c:	461d      	mov	r5, r3
 800812e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008132:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008136:	f7f8 fa77 	bl	8000628 <__aeabi_dmul>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 f8bb 	bl	80002bc <__adddf3>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4610      	mov	r0, r2
 800814c:	4619      	mov	r1, r3
 800814e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008152:	f7f8 fb93 	bl	800087c <__aeabi_ddiv>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	e9c1 2300 	strd	r2, r3, [r1]
	*b = (y * u - x * v) / q;
 8008160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008164:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008168:	f7f8 fa5e 	bl	8000628 <__aeabi_dmul>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4614      	mov	r4, r2
 8008172:	461d      	mov	r5, r3
 8008174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008178:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800817c:	f7f8 fa54 	bl	8000628 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4620      	mov	r0, r4
 8008186:	4629      	mov	r1, r5
 8008188:	f7f8 f896 	bl	80002b8 <__aeabi_dsub>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4610      	mov	r0, r2
 8008192:	4619      	mov	r1, r3
 8008194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008198:	f7f8 fb70 	bl	800087c <__aeabi_ddiv>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80081a6:	bf00      	nop
 80081a8:	3730      	adds	r7, #48	; 0x30
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bdb0      	pop	{r4, r5, r7, pc}

080081ae <Transpose_Square_Matrix>:
//                                                                            //
//     Transpose_Square_Matrix( &A[0][0], N);                                 //
//     uart_printf_data("The transpose of A is \r\n"); ...                                //
////////////////////////////////////////////////////////////////////////////////
void Transpose_Square_Matrix( double *A, int n )
{
 80081ae:	b480      	push	{r7}
 80081b0:	b089      	sub	sp, #36	; 0x24
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
	double *pA, *pAt;
	double temp;
	int i,j;

	for (i = 0; i < n; A += n + 1, i++) {
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e033      	b.n	8008226 <Transpose_Square_Matrix+0x78>
		pA = A + 1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3308      	adds	r3, #8
 80081c2:	61fb      	str	r3, [r7, #28]
		pAt = A + n;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	4413      	add	r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]
		for (j = i+1 ; j < n; pA++, pAt += n, j++) {
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	3301      	adds	r3, #1
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	e01a      	b.n	800820c <Transpose_Square_Matrix+0x5e>
			temp = *pAt;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
			*pAt = *pA;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	e9c1 2300 	strd	r2, r3, [r1]
			*pA = temp;
 80081ec:	69f9      	ldr	r1, [r7, #28]
 80081ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081f2:	e9c1 2300 	strd	r2, r3, [r1]
		for (j = i+1 ; j < n; pA++, pAt += n, j++) {
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	3308      	adds	r3, #8
 80081fa:	61fb      	str	r3, [r7, #28]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	4413      	add	r3, r2
 8008204:	61bb      	str	r3, [r7, #24]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	3301      	adds	r3, #1
 800820a:	613b      	str	r3, [r7, #16]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	dbe0      	blt.n	80081d6 <Transpose_Square_Matrix+0x28>
	for (i = 0; i < n; A += n + 1, i++) {
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	3301      	adds	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	dbc7      	blt.n	80081be <Transpose_Square_Matrix+0x10>
		}
	}
}
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	3724      	adds	r7, #36	; 0x24
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <Lower_Triangular_Inverse>:
//           ...                                                              //
//     }                                                                      //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
int Lower_Triangular_Inverse(double *L, int n)
{
 800823c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800823e:	b08b      	sub	sp, #44	; 0x2c
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	double *p_i, *p_j, *p_k;
	double sum;

	//         Invert the diagonal elements of the lower triangular matrix L.

	for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8008246:	2300      	movs	r3, #0
 8008248:	61fb      	str	r3, [r7, #28]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	e024      	b.n	800829a <Lower_Triangular_Inverse+0x5e>
		if (*p_k == 0.0) return -1;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	f7f8 fc4b 	bl	8000af8 <__aeabi_dcmpeq>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <Lower_Triangular_Inverse+0x32>
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	e085      	b.n	800837a <Lower_Triangular_Inverse+0x13e>
		else *p_k = 1.0 / *p_k;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f04f 0000 	mov.w	r0, #0
 8008278:	4942      	ldr	r1, [pc, #264]	; (8008384 <Lower_Triangular_Inverse+0x148>)
 800827a:	f7f8 faff 	bl	800087c <__aeabi_ddiv>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	6939      	ldr	r1, [r7, #16]
 8008284:	e9c1 2300 	strd	r2, r3, [r1]
	for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	3301      	adds	r3, #1
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4413      	add	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	3301      	adds	r3, #1
 8008298:	61fb      	str	r3, [r7, #28]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	dbd6      	blt.n	8008250 <Lower_Triangular_Inverse+0x14>
	}

	//         Invert the remaining lower triangular matrix L row by row.

	for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80082a2:	2301      	movs	r3, #1
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	4413      	add	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	e05e      	b.n	8008370 <Lower_Triangular_Inverse+0x134>
		for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80082b2:	2300      	movs	r3, #0
 80082b4:	623b      	str	r3, [r7, #32]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	e04d      	b.n	8008358 <Lower_Triangular_Inverse+0x11c>
			sum = 0.0;
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
			for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	e01f      	b.n	8008312 <Lower_Triangular_Inverse+0xd6>
				sum += *(p_i + k) * *(p_k + j);
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	00db      	lsls	r3, r3, #3
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	4413      	add	r3, r2
 80082da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4413      	add	r3, r2
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f8 f99d 	bl	8000628 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082f6:	f7f7 ffe1 	bl	80002bc <__adddf3>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
			for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	3301      	adds	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4413      	add	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	429a      	cmp	r2, r3
 8008318:	dbdb      	blt.n	80082d2 <Lower_Triangular_Inverse+0x96>
			*(p_i + j) = - *(p_i + i) * sum;
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	4413      	add	r3, r2
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	4614      	mov	r4, r2
 8008328:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	18d6      	adds	r6, r2, r3
 8008334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008338:	4620      	mov	r0, r4
 800833a:	4629      	mov	r1, r5
 800833c:	f7f8 f974 	bl	8000628 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	e9c6 2300 	strd	r2, r3, [r6]
		for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4413      	add	r3, r2
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	3301      	adds	r3, #1
 8008356:	623b      	str	r3, [r7, #32]
 8008358:	6a3a      	ldr	r2, [r7, #32]
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	429a      	cmp	r2, r3
 800835e:	dbad      	blt.n	80082bc <Lower_Triangular_Inverse+0x80>
	for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	3301      	adds	r3, #1
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	4413      	add	r3, r2
 800836e:	61bb      	str	r3, [r7, #24]
 8008370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	db9c      	blt.n	80082b2 <Lower_Triangular_Inverse+0x76>
		}
	}

	return 0;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	372c      	adds	r7, #44	; 0x2c
 800837e:	46bd      	mov	sp, r7
 8008380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008382:	bf00      	nop
 8008384:	3ff00000 	.word	0x3ff00000

08008388 <Interchange_Columns>:
//     if ( (i >= 0) && ( i < N ) && ( j >= 0 ) && (j < N) )                  //
//        Interchange_Columns(&A[0][0], i, j, M, N);                          //
//     uart_printf_data("The matrix A is \r\n"); ...                                      //
////////////////////////////////////////////////////////////////////////////////
void Interchange_Columns(double *A, int col1, int col2, int nrows, int ncols)
{
 8008388:	b480      	push	{r7}
 800838a:	b08b      	sub	sp, #44	; 0x2c
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
	int i;
	double *pA1, *pA2;
	double temp;

	pA1 = A + col1;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	623b      	str	r3, [r7, #32]
	pA2 = A + col2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < nrows; pA1 += ncols, pA2 += ncols, i++) {
 80083aa:	2300      	movs	r3, #0
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
 80083ae:	e01c      	b.n	80083ea <Interchange_Columns+0x62>
		temp = *pA1;
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		*pA1 = *pA2;
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	6a39      	ldr	r1, [r7, #32]
 80083c2:	e9c1 2300 	strd	r2, r3, [r1]
		*pA2 = temp;
 80083c6:	69f9      	ldr	r1, [r7, #28]
 80083c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80083cc:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < nrows; pA1 += ncols, pA2 += ncols, i++) {
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	6a3a      	ldr	r2, [r7, #32]
 80083d6:	4413      	add	r3, r2
 80083d8:	623b      	str	r3, [r7, #32]
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	4413      	add	r3, r2
 80083e2:	61fb      	str	r3, [r7, #28]
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	3301      	adds	r3, #1
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
 80083ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	dbde      	blt.n	80083b0 <Interchange_Columns+0x28>
	}
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	372c      	adds	r7, #44	; 0x2c
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <Interchange_Rows>:
//     if ( (i >= 0) && ( i < M ) && (j > 0) && ( j < M ) )                   //
//        Interchange_Rows(&A[0][0], i, j, N);                                //
//     uart_printf_data("The matrix A is \r\n"); ...                                      //
////////////////////////////////////////////////////////////////////////////////
void Interchange_Rows(double *A, int row1, int row2, int ncols)
{
 8008400:	b480      	push	{r7}
 8008402:	b08b      	sub	sp, #44	; 0x2c
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]
	int i;
	double *pA1, *pA2;
	double temp;

	pA1 = A + row1 * ncols;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	fb02 f303 	mul.w	r3, r2, r3
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	623b      	str	r3, [r7, #32]
	pA2 = A + row2 * ncols;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	fb02 f303 	mul.w	r3, r2, r3
 8008426:	00db      	lsls	r3, r3, #3
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < ncols; i++) {
 800842e:	2300      	movs	r3, #0
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
 8008432:	e018      	b.n	8008466 <Interchange_Rows+0x66>
		temp = *pA1;
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		*pA1++ = *pA2;
 800843e:	6a39      	ldr	r1, [r7, #32]
 8008440:	f101 0308 	add.w	r3, r1, #8
 8008444:	623b      	str	r3, [r7, #32]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	e9c1 2300 	strd	r2, r3, [r1]
		*pA2++ = temp;
 8008450:	69f9      	ldr	r1, [r7, #28]
 8008452:	f101 0308 	add.w	r3, r1, #8
 8008456:	61fb      	str	r3, [r7, #28]
 8008458:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800845c:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < ncols; i++) {
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	3301      	adds	r3, #1
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
 8008466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	dbe2      	blt.n	8008434 <Interchange_Rows+0x34>
	}
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	372c      	adds	r7, #44	; 0x2c
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <GetPage>:




static uint32_t GetPage(uint32_t Address)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<256; indx++)
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e016      	b.n	80084b8 <GetPage+0x3c>
  {
	  if((Address < (FLASH_BASE + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (FLASH_BASE + FLASH_PAGE_SIZE*indx)))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008490:	3301      	adds	r3, #1
 8008492:	031b      	lsls	r3, r3, #12
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d20b      	bcs.n	80084b2 <GetPage+0x36>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80084a0:	031b      	lsls	r3, r3, #12
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d304      	bcc.n	80084b2 <GetPage+0x36>
	  {
		  return (FLASH_BASE + FLASH_PAGE_SIZE*indx);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80084ae:	031b      	lsls	r3, r3, #12
 80084b0:	e006      	b.n	80084c0 <GetPage+0x44>
  for (int indx=0; indx<256; indx++)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3301      	adds	r3, #1
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2bff      	cmp	r3, #255	; 0xff
 80084bc:	dde5      	ble.n	800848a <GetPage+0xe>
	  }
  }
  return 0;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <FlashReadData>:
}



void FlashReadData (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	e9c1 2300 	strd	r2, r3, [r1]
		StartPageAddress += 8;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3308      	adds	r3, #8
 80084ea:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	3308      	adds	r3, #8
 80084f0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)){
 80084f2:	88fb      	ldrh	r3, [r7, #6]
 80084f4:	1e5a      	subs	r2, r3, #1
 80084f6:	80fa      	strh	r2, [r7, #6]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d000      	beq.n	80084fe <FlashReadData+0x32>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 80084fc:	e7ed      	b.n	80084da <FlashReadData+0xe>
			break;
 80084fe:	bf00      	nop
		}
	}
}
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <FlashWriteData>:
   return 0;
}


uint32_t FlashWriteData (uint32_t StartPageAddress, uint64_t *Data, uint16_t numberofwords)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800851a:	2300      	movs	r3, #0
 800851c:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800851e:	f003 f9e5 	bl	800b8ec <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff ffaa 	bl	800847c <GetPage>
 8008528:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords * 8;
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	461a      	mov	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8008536:	69f8      	ldr	r0, [r7, #28]
 8008538:	f7ff ffa0 	bl	800847c <GetPage>
 800853c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.Banks = FLASH_BANK_1;
 800853e:	4b27      	ldr	r3, [pc, #156]	; (80085dc <FlashWriteData+0xd0>)
 8008540:	2201      	movs	r2, #1
 8008542:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8008544:	4b25      	ldr	r3, [pc, #148]	; (80085dc <FlashWriteData+0xd0>)
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = ((StartPage - FLASH_BASE) / FLASH_PAGE_SIZE);
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008550:	0b1b      	lsrs	r3, r3, #12
 8008552:	4a22      	ldr	r2, [pc, #136]	; (80085dc <FlashWriteData+0xd0>)
 8008554:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = ((EndPage - StartPage)/FLASH_PAGE_SIZE) + 1;
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	0b1b      	lsrs	r3, r3, #12
 800855e:	3301      	adds	r3, #1
 8008560:	4a1e      	ldr	r2, [pc, #120]	; (80085dc <FlashWriteData+0xd0>)
 8008562:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8008564:	f107 0314 	add.w	r3, r7, #20
 8008568:	4619      	mov	r1, r3
 800856a:	481c      	ldr	r0, [pc, #112]	; (80085dc <FlashWriteData+0xd0>)
 800856c:	f003 fab0 	bl	800bad0 <HAL_FLASHEx_Erase>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d027      	beq.n	80085c6 <FlashWriteData+0xba>
	   {
	     /*Error occurred while page erase.*/
		   uart_write_debug("Failed to erase flash\r\n",UART_NYX);
 8008576:	2101      	movs	r1, #1
 8008578:	4819      	ldr	r0, [pc, #100]	; (80085e0 <FlashWriteData+0xd4>)
 800857a:	f002 fdbf 	bl	800b0fc <uart_write_debug>
		   HAL_FLASH_Lock();
 800857e:	f003 f9d7 	bl	800b930 <HAL_FLASH_Lock>
		   return HAL_FLASH_GetError ();
 8008582:	f003 f9e5 	bl	800b950 <HAL_FLASH_GetError>
 8008586:	4603      	mov	r3, r0
 8008588:	e024      	b.n	80085d4 <FlashWriteData+0xc8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	4413      	add	r3, r2
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	2000      	movs	r0, #0
 800859a:	f003 f93b 	bl	800b814 <HAL_FLASH_Program>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <FlashWriteData+0xa6>
	     {
	    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3308      	adds	r3, #8
 80085a8:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	3301      	adds	r3, #1
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
 80085b0:	e009      	b.n	80085c6 <FlashWriteData+0xba>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 uart_write_debug("Failed to write flash\r\n",UART_NYX);
 80085b2:	2101      	movs	r1, #1
 80085b4:	480b      	ldr	r0, [pc, #44]	; (80085e4 <FlashWriteData+0xd8>)
 80085b6:	f002 fda1 	bl	800b0fc <uart_write_debug>
	    	 HAL_FLASH_Lock();
 80085ba:	f003 f9b9 	bl	800b930 <HAL_FLASH_Lock>
	    	 return HAL_FLASH_GetError ();
 80085be:	f003 f9c7 	bl	800b950 <HAL_FLASH_GetError>
 80085c2:	4603      	mov	r3, r0
 80085c4:	e006      	b.n	80085d4 <FlashWriteData+0xc8>
	   while (sofar<numberofwords)
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ca:	429a      	cmp	r2, r3
 80085cc:	dbdd      	blt.n	800858a <FlashWriteData+0x7e>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80085ce:	f003 f9af 	bl	800b930 <HAL_FLASH_Lock>
	   return 0;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3728      	adds	r7, #40	; 0x28
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000330 	.word	0x20000330
 80085e0:	08019c3c 	.word	0x08019c3c
 80085e4:	08019c54 	.word	0x08019c54

080085e8 <Flash_Write_CalTable>:
	return 1;
}


uint32_t Flash_Write_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08c      	sub	sp, #48	; 0x30
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
	uint32_t res;
	float temp[3] = {0.0f};
 80085f2:	f107 031c 	add.w	r3, r7, #28
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	605a      	str	r2, [r3, #4]
 80085fc:	609a      	str	r2, [r3, #8]
	temp[0] = data->gyro_x;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	61fb      	str	r3, [r7, #28]
	temp[1] = data->gyro_y;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	623b      	str	r3, [r7, #32]
	temp[2] = data->gyro_z;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bytes_temp[16] = {0};
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	f107 0310 	add.w	r3, r7, #16
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	609a      	str	r2, [r3, #8]
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t j,v=0;
 8008620:	2300      	movs	r3, #0
 8008622:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 8008626:	2300      	movs	r3, #0
 8008628:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800862c:	e02d      	b.n	800868a <Flash_Write_CalTable+0xa2>
		thing.a = temp[i];
 800862e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	3330      	adds	r3, #48	; 0x30
 8008636:	443b      	add	r3, r7
 8008638:	3b14      	subs	r3, #20
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < 4; j++) {
 800863e:	2300      	movs	r3, #0
 8008640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008644:	e013      	b.n	800866e <Flash_Write_CalTable+0x86>
		  bytes_temp[v+j] = thing.bytes[j];
 8008646:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800864a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800864e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008652:	440b      	add	r3, r1
 8008654:	3230      	adds	r2, #48	; 0x30
 8008656:	443a      	add	r2, r7
 8008658:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 800865c:	3330      	adds	r3, #48	; 0x30
 800865e:	443b      	add	r3, r7
 8008660:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (j = 0; j < 4; j++) {
 8008664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008668:	3301      	adds	r3, #1
 800866a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800866e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008672:	2b03      	cmp	r3, #3
 8008674:	d9e7      	bls.n	8008646 <Flash_Write_CalTable+0x5e>
		}
		v+=4;
 8008676:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800867a:	3304      	adds	r3, #4
 800867c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 8008680:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008684:	3301      	adds	r3, #1
 8008686:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800868a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800868e:	2b02      	cmp	r3, #2
 8008690:	d9cd      	bls.n	800862e <Flash_Write_CalTable+0x46>
	}
	for (uint8_t i = 12; i < 16; i++){
 8008692:	230c      	movs	r3, #12
 8008694:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8008698:	e00b      	b.n	80086b2 <Flash_Write_CalTable+0xca>
		bytes_temp[i] = 0xFF;
 800869a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800869e:	3330      	adds	r3, #48	; 0x30
 80086a0:	443b      	add	r3, r7
 80086a2:	22ff      	movs	r2, #255	; 0xff
 80086a4:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t i = 12; i < 16; i++){
 80086a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086ac:	3301      	adds	r3, #1
 80086ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80086b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086b6:	2b0f      	cmp	r3, #15
 80086b8:	d9ef      	bls.n	800869a <Flash_Write_CalTable+0xb2>
	}
	res = FlashWriteData (StartSectorAddress, (uint64_t *)bytes_temp, 2);
 80086ba:	f107 030c 	add.w	r3, r7, #12
 80086be:	2202      	movs	r2, #2
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff ff22 	bl	800850c <FlashWriteData>
 80086c8:	62b8      	str	r0, [r7, #40]	; 0x28
	return res;
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3730      	adds	r7, #48	; 0x30
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <Flash_Read_CalTable>:

uint32_t Flash_Read_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08c      	sub	sp, #48	; 0x30
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	uint8_t buffer[20] = {0};
 80086de:	2300      	movs	r3, #0
 80086e0:	61bb      	str	r3, [r7, #24]
 80086e2:	f107 031c 	add.w	r3, r7, #28
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	609a      	str	r2, [r3, #8]
 80086ee:	60da      	str	r2, [r3, #12]
	float temp[3] = {0.0f};
 80086f0:	f107 030c 	add.w	r3, r7, #12
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	605a      	str	r2, [r3, #4]
 80086fa:	609a      	str	r2, [r3, #8]

	FlashReadData(StartSectorAddress, (uint64_t *)buffer, 2);
 80086fc:	f107 0318 	add.w	r3, r7, #24
 8008700:	2202      	movs	r2, #2
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff fee1 	bl	80084cc <FlashReadData>

	if ((buffer[0] == 255) && (buffer[1] == 255)){
 800870a:	7e3b      	ldrb	r3, [r7, #24]
 800870c:	2bff      	cmp	r3, #255	; 0xff
 800870e:	d104      	bne.n	800871a <Flash_Read_CalTable+0x46>
 8008710:	7e7b      	ldrb	r3, [r7, #25]
 8008712:	2bff      	cmp	r3, #255	; 0xff
 8008714:	d101      	bne.n	800871a <Flash_Read_CalTable+0x46>
		return 1;
 8008716:	2301      	movs	r3, #1
 8008718:	e04d      	b.n	80087b6 <Flash_Read_CalTable+0xe2>
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t v=0;
 800871a:	2300      	movs	r3, #0
 800871c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (uint8_t j = 0; j < 3; j++){
 8008720:	2300      	movs	r3, #0
 8008722:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008726:	e02d      	b.n	8008784 <Flash_Read_CalTable+0xb0>
		for (uint8_t i = 0; i < 4; i++) {
 8008728:	2300      	movs	r3, #0
 800872a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800872e:	e013      	b.n	8008758 <Flash_Read_CalTable+0x84>
			thing.bytes[i] = buffer[v+i];
 8008730:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008734:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008738:	441a      	add	r2, r3
 800873a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800873e:	3230      	adds	r2, #48	; 0x30
 8008740:	443a      	add	r2, r7
 8008742:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008746:	3330      	adds	r3, #48	; 0x30
 8008748:	443b      	add	r3, r7
 800874a:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (uint8_t i = 0; i < 4; i++) {
 800874e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008752:	3301      	adds	r3, #1
 8008754:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8008758:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800875c:	2b03      	cmp	r3, #3
 800875e:	d9e7      	bls.n	8008730 <Flash_Read_CalTable+0x5c>
		}
		v+=4;
 8008760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008764:	3304      	adds	r3, #4
 8008766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		temp[j] =  thing.a;
 800876a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	3330      	adds	r3, #48	; 0x30
 8008774:	443b      	add	r3, r7
 8008776:	3b24      	subs	r3, #36	; 0x24
 8008778:	601a      	str	r2, [r3, #0]
	for (uint8_t j = 0; j < 3; j++){
 800877a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800877e:	3301      	adds	r3, #1
 8008780:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008784:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008788:	2b02      	cmp	r3, #2
 800878a:	d9cd      	bls.n	8008728 <Flash_Read_CalTable+0x54>
	}
	data->gyro_x = temp[0];
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	601a      	str	r2, [r3, #0]
	data->gyro_y = temp[1];
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	605a      	str	r2, [r3, #4]
	data->gyro_z = temp[2];
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	609a      	str	r2, [r3, #8]

	if (temp[0] == 0.0f){
 800879e:	edd7 7a03 	vldr	s15, [r7, #12]
 80087a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087aa:	d103      	bne.n	80087b4 <Flash_Read_CalTable+0xe0>
		uart_write_debug("Failed to read flash\r\n",UART_NYX);
 80087ac:	2101      	movs	r1, #1
 80087ae:	4804      	ldr	r0, [pc, #16]	; (80087c0 <Flash_Read_CalTable+0xec>)
 80087b0:	f002 fca4 	bl	800b0fc <uart_write_debug>
	}
	return 0;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3730      	adds	r7, #48	; 0x30
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	08019c84 	.word	0x08019c84

080087c4 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80087c8:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087ca:	4a1c      	ldr	r2, [pc, #112]	; (800883c <ublox_i2c_bus_init+0x78>)
 80087cc:	601a      	str	r2, [r3, #0]
//	hi2c1.Init.Timing = 0x00B03FDB; 400KB i2c speed
	hi2c1.Init.Timing = 0x307075B1;	//100KB i2c speed
 80087ce:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087d0:	4a1b      	ldr	r2, [pc, #108]	; (8008840 <ublox_i2c_bus_init+0x7c>)
 80087d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80087d4:	4b18      	ldr	r3, [pc, #96]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80087da:	4b17      	ldr	r3, [pc, #92]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087dc:	2201      	movs	r2, #1
 80087de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80087e0:	4b15      	ldr	r3, [pc, #84]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80087e6:	4b14      	ldr	r3, [pc, #80]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80087ec:	4b12      	ldr	r3, [pc, #72]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80087f2:	4b11      	ldr	r3, [pc, #68]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80087f8:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <ublox_i2c_bus_init+0x74>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80087fe:	480e      	ldr	r0, [pc, #56]	; (8008838 <ublox_i2c_bus_init+0x74>)
 8008800:	f003 fcaf 	bl	800c162 <HAL_I2C_Init>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 800880a:	2301      	movs	r3, #1
 800880c:	e012      	b.n	8008834 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800880e:	2100      	movs	r1, #0
 8008810:	4809      	ldr	r0, [pc, #36]	; (8008838 <ublox_i2c_bus_init+0x74>)
 8008812:	f004 fc87 	bl	800d124 <HAL_I2CEx_ConfigAnalogFilter>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 800881c:	2302      	movs	r3, #2
 800881e:	e009      	b.n	8008834 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008820:	2100      	movs	r1, #0
 8008822:	4805      	ldr	r0, [pc, #20]	; (8008838 <ublox_i2c_bus_init+0x74>)
 8008824:	f004 fcc9 	bl	800d1ba <HAL_I2CEx_ConfigDigitalFilter>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 800882e:	2303      	movs	r3, #3
 8008830:	e000      	b.n	8008834 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20000340 	.word	0x20000340
 800883c:	40005400 	.word	0x40005400
 8008840:	307075b1 	.word	0x307075b1

08008844 <ublox_transmit_rtc>:
    else{
        parseNMEA();
    }
}

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	460a      	mov	r2, r1
 800884e:	71fb      	strb	r3, [r7, #7]
 8008850:	4613      	mov	r3, r2
 8008852:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 8008854:	79fa      	ldrb	r2, [r7, #7]
 8008856:	79bb      	ldrb	r3, [r7, #6]
 8008858:	2109      	movs	r1, #9
 800885a:	4803      	ldr	r0, [pc, #12]	; (8008868 <ublox_transmit_rtc+0x24>)
 800885c:	f001 fb8e 	bl	8009f7c <transmitMessage>
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	200003df 	.word	0x200003df

0800886c <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	460a      	mov	r2, r1
 8008876:	71fb      	strb	r3, [r7, #7]
 8008878:	4613      	mov	r3, r2
 800887a:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	f107 0310 	add.w	r3, r7, #16
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 800888a:	4b22      	ldr	r3, [pc, #136]	; (8008914 <ublox_transmit_message+0xa8>)
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	0e1b      	lsrs	r3, r3, #24
 8008890:	b2db      	uxtb	r3, r3
 8008892:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 8008894:	4b1f      	ldr	r3, [pc, #124]	; (8008914 <ublox_transmit_message+0xa8>)
 8008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008898:	141b      	asrs	r3, r3, #16
 800889a:	b2db      	uxtb	r3, r3
 800889c:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 800889e:	4b1d      	ldr	r3, [pc, #116]	; (8008914 <ublox_transmit_message+0xa8>)
 80088a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a2:	121b      	asrs	r3, r3, #8
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 80088a8:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <ublox_transmit_message+0xa8>)
 80088aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 80088b0:	4b18      	ldr	r3, [pc, #96]	; (8008914 <ublox_transmit_message+0xa8>)
 80088b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b4:	0e1b      	lsrs	r3, r3, #24
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 80088ba:	4b16      	ldr	r3, [pc, #88]	; (8008914 <ublox_transmit_message+0xa8>)
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	141b      	asrs	r3, r3, #16
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 80088c4:	4b13      	ldr	r3, [pc, #76]	; (8008914 <ublox_transmit_message+0xa8>)
 80088c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c8:	121b      	asrs	r3, r3, #8
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 80088ce:	4b11      	ldr	r3, [pc, #68]	; (8008914 <ublox_transmit_message+0xa8>)
 80088d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 80088d6:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <ublox_transmit_message+0xa8>)
 80088d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088da:	0e1b      	lsrs	r3, r3, #24
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 80088e0:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <ublox_transmit_message+0xa8>)
 80088e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e4:	141b      	asrs	r3, r3, #16
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <ublox_transmit_message+0xa8>)
 80088ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ee:	121b      	asrs	r3, r3, #8
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 80088f4:	4b07      	ldr	r3, [pc, #28]	; (8008914 <ublox_transmit_message+0xa8>)
 80088f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 80088fc:	79fa      	ldrb	r2, [r7, #7]
 80088fe:	79bb      	ldrb	r3, [r7, #6]
 8008900:	f107 000c 	add.w	r0, r7, #12
 8008904:	210c      	movs	r1, #12
 8008906:	f001 fb39 	bl	8009f7c <transmitMessage>
}
 800890a:	bf00      	nop
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000394 	.word	0x20000394

08008918 <ubloxInit>:

UBLOX_transResult ubloxInit(void){
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
	UBLOX_transResult ret;
	uint8_t res[10] = {0};
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
 8008922:	f107 0308 	add.w	r3, r7, #8
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	809a      	strh	r2, [r3, #4]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 800892c:	2102      	movs	r1, #2
 800892e:	2000      	movs	r0, #0
 8008930:	f000 f9e0 	bl	8008cf4 <setPortOutput>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d00a      	beq.n	8008954 <ubloxInit+0x3c>
    	sprintf(res, " POUT:%d\r\n,", ret);
 800893e:	7bfa      	ldrb	r2, [r7, #15]
 8008940:	1d3b      	adds	r3, r7, #4
 8008942:	495d      	ldr	r1, [pc, #372]	; (8008ab8 <ubloxInit+0x1a0>)
 8008944:	4618      	mov	r0, r3
 8008946:	f00d fc35 	bl	80161b4 <siprintf>
		uart_write_debug(res, 50);
 800894a:	1d3b      	adds	r3, r7, #4
 800894c:	2132      	movs	r1, #50	; 0x32
 800894e:	4618      	mov	r0, r3
 8008950:	f002 fbd4 	bl	800b0fc <uart_write_debug>
    }
    HAL_Delay(10);
 8008954:	200a      	movs	r0, #10
 8008956:	f002 fd9b 	bl	800b490 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 800895a:	2300      	movs	r3, #0
 800895c:	2200      	movs	r2, #0
 800895e:	2101      	movs	r1, #1
 8008960:	20f0      	movs	r0, #240	; 0xf0
 8008962:	f000 f9f7 	bl	8008d54 <configureNMEA>
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d00a      	beq.n	8008986 <ubloxInit+0x6e>
    	sprintf(res, " GGL:%d\r\n,", ret);
 8008970:	7bfa      	ldrb	r2, [r7, #15]
 8008972:	1d3b      	adds	r3, r7, #4
 8008974:	4951      	ldr	r1, [pc, #324]	; (8008abc <ubloxInit+0x1a4>)
 8008976:	4618      	mov	r0, r3
 8008978:	f00d fc1c 	bl	80161b4 <siprintf>
    	uart_write_debug(res, 50);
 800897c:	1d3b      	adds	r3, r7, #4
 800897e:	2132      	movs	r1, #50	; 0x32
 8008980:	4618      	mov	r0, r3
 8008982:	f002 fbbb 	bl	800b0fc <uart_write_debug>
    }
    HAL_Delay(10);
 8008986:	200a      	movs	r0, #10
 8008988:	f002 fd82 	bl	800b490 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 800898c:	2300      	movs	r3, #0
 800898e:	2200      	movs	r2, #0
 8008990:	2102      	movs	r1, #2
 8008992:	20f0      	movs	r0, #240	; 0xf0
 8008994:	f000 f9de 	bl	8008d54 <configureNMEA>
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d00a      	beq.n	80089b8 <ubloxInit+0xa0>
    	sprintf(res, " GSA:%d\r\n,", ret);
 80089a2:	7bfa      	ldrb	r2, [r7, #15]
 80089a4:	1d3b      	adds	r3, r7, #4
 80089a6:	4946      	ldr	r1, [pc, #280]	; (8008ac0 <ubloxInit+0x1a8>)
 80089a8:	4618      	mov	r0, r3
 80089aa:	f00d fc03 	bl	80161b4 <siprintf>
		uart_write_debug(res, 50);
 80089ae:	1d3b      	adds	r3, r7, #4
 80089b0:	2132      	movs	r1, #50	; 0x32
 80089b2:	4618      	mov	r0, r3
 80089b4:	f002 fba2 	bl	800b0fc <uart_write_debug>
    }
    HAL_Delay(10);
 80089b8:	200a      	movs	r0, #10
 80089ba:	f002 fd69 	bl	800b490 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 80089be:	2300      	movs	r3, #0
 80089c0:	2200      	movs	r2, #0
 80089c2:	2103      	movs	r1, #3
 80089c4:	20f0      	movs	r0, #240	; 0xf0
 80089c6:	f000 f9c5 	bl	8008d54 <configureNMEA>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d00a      	beq.n	80089ea <ubloxInit+0xd2>
    	sprintf(res, " GSV:%d\r\n,", ret);
 80089d4:	7bfa      	ldrb	r2, [r7, #15]
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	493a      	ldr	r1, [pc, #232]	; (8008ac4 <ubloxInit+0x1ac>)
 80089da:	4618      	mov	r0, r3
 80089dc:	f00d fbea 	bl	80161b4 <siprintf>
		uart_write_debug(res, 50);
 80089e0:	1d3b      	adds	r3, r7, #4
 80089e2:	2132      	movs	r1, #50	; 0x32
 80089e4:	4618      	mov	r0, r3
 80089e6:	f002 fb89 	bl	800b0fc <uart_write_debug>
    }
    HAL_Delay(10);
 80089ea:	200a      	movs	r0, #10
 80089ec:	f002 fd50 	bl	800b490 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 80089f0:	2300      	movs	r3, #0
 80089f2:	2200      	movs	r2, #0
 80089f4:	2104      	movs	r1, #4
 80089f6:	20f0      	movs	r0, #240	; 0xf0
 80089f8:	f000 f9ac 	bl	8008d54 <configureNMEA>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d00a      	beq.n	8008a1c <ubloxInit+0x104>
    	sprintf(res, " RMC:%d\r\n,", ret);
 8008a06:	7bfa      	ldrb	r2, [r7, #15]
 8008a08:	1d3b      	adds	r3, r7, #4
 8008a0a:	492f      	ldr	r1, [pc, #188]	; (8008ac8 <ubloxInit+0x1b0>)
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f00d fbd1 	bl	80161b4 <siprintf>
		uart_write_debug(res, 50);
 8008a12:	1d3b      	adds	r3, r7, #4
 8008a14:	2132      	movs	r1, #50	; 0x32
 8008a16:	4618      	mov	r0, r3
 8008a18:	f002 fb70 	bl	800b0fc <uart_write_debug>
    }
    HAL_Delay(10);
 8008a1c:	200a      	movs	r0, #10
 8008a1e:	f002 fd37 	bl	800b490 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8008a22:	2300      	movs	r3, #0
 8008a24:	2200      	movs	r2, #0
 8008a26:	2105      	movs	r1, #5
 8008a28:	20f0      	movs	r0, #240	; 0xf0
 8008a2a:	f000 f993 	bl	8008d54 <configureNMEA>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d00a      	beq.n	8008a4e <ubloxInit+0x136>
    	sprintf(res, " VTG:%d\r\n,", ret);
 8008a38:	7bfa      	ldrb	r2, [r7, #15]
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	4923      	ldr	r1, [pc, #140]	; (8008acc <ubloxInit+0x1b4>)
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f00d fbb8 	bl	80161b4 <siprintf>
		uart_write_debug(res, 50);
 8008a44:	1d3b      	adds	r3, r7, #4
 8008a46:	2132      	movs	r1, #50	; 0x32
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f002 fb57 	bl	800b0fc <uart_write_debug>
    }
    HAL_Delay(10);
 8008a4e:	200a      	movs	r0, #10
 8008a50:	f002 fd1e 	bl	800b490 <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8008a54:	2300      	movs	r3, #0
 8008a56:	2202      	movs	r2, #2
 8008a58:	2100      	movs	r1, #0
 8008a5a:	20f0      	movs	r0, #240	; 0xf0
 8008a5c:	f000 f97a 	bl	8008d54 <configureNMEA>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d00a      	beq.n	8008a80 <ubloxInit+0x168>
    	sprintf(res, " GGA:%d\r\n,", ret);
 8008a6a:	7bfa      	ldrb	r2, [r7, #15]
 8008a6c:	1d3b      	adds	r3, r7, #4
 8008a6e:	4918      	ldr	r1, [pc, #96]	; (8008ad0 <ubloxInit+0x1b8>)
 8008a70:	4618      	mov	r0, r3
 8008a72:	f00d fb9f 	bl	80161b4 <siprintf>
		uart_write_debug(res, 50);
 8008a76:	1d3b      	adds	r3, r7, #4
 8008a78:	2132      	movs	r1, #50	; 0x32
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 fb3e 	bl	800b0fc <uart_write_debug>
    }
    HAL_Delay(10);
 8008a80:	200a      	movs	r0, #10
 8008a82:	f002 fd05 	bl	800b490 <HAL_Delay>
    ret = powerManageCfgSet(120);
 8008a86:	2078      	movs	r0, #120	; 0x78
 8008a88:	f000 f996 	bl	8008db8 <powerManageCfgSet>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d00a      	beq.n	8008aac <ubloxInit+0x194>
		sprintf(res, " PM2:%d\r\n,", ret);
 8008a96:	7bfa      	ldrb	r2, [r7, #15]
 8008a98:	1d3b      	adds	r3, r7, #4
 8008a9a:	490e      	ldr	r1, [pc, #56]	; (8008ad4 <ubloxInit+0x1bc>)
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f00d fb89 	bl	80161b4 <siprintf>
		uart_write_debug(res, 50);
 8008aa2:	1d3b      	adds	r3, r7, #4
 8008aa4:	2132      	movs	r1, #50	; 0x32
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f002 fb28 	bl	800b0fc <uart_write_debug>
    }
	return ret;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08019c9c 	.word	0x08019c9c
 8008abc:	08019ca8 	.word	0x08019ca8
 8008ac0:	08019cb4 	.word	0x08019cb4
 8008ac4:	08019cc0 	.word	0x08019cc0
 8008ac8:	08019ccc 	.word	0x08019ccc
 8008acc:	08019cd8 	.word	0x08019cd8
 8008ad0:	08019ce4 	.word	0x08019ce4
 8008ad4:	08019cf0 	.word	0x08019cf0

08008ad8 <calcChecksum>:
    memset(gps_data.sentence, 0, 75);
    return 0;
}


static void calcChecksum(messageCFG_t *msg){
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	7b1a      	ldrb	r2, [r3, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7b5a      	ldrb	r2, [r3, #13]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7b1b      	ldrb	r3, [r3, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7b1a      	ldrb	r2, [r3, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	4413      	add	r3, r2
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7b5a      	ldrb	r2, [r3, #13]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	7b1b      	ldrb	r3, [r3, #12]
 8008b24:	4413      	add	r3, r2
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7b1a      	ldrb	r2, [r3, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	885b      	ldrh	r3, [r3, #2]
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	4413      	add	r3, r2
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7b5a      	ldrb	r2, [r3, #13]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	7b1b      	ldrb	r3, [r3, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7b1a      	ldrb	r2, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	885b      	ldrh	r3, [r3, #2]
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	7b5a      	ldrb	r2, [r3, #13]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	7b1b      	ldrb	r3, [r3, #12]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	e015      	b.n	8008ba6 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	7b1a      	ldrb	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6899      	ldr	r1, [r3, #8]
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	440b      	add	r3, r1
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	4413      	add	r3, r2
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	7b5a      	ldrb	r2, [r3, #13]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7b1b      	ldrb	r3, [r3, #12]
 8008b98:	4413      	add	r3, r2
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	885b      	ldrh	r3, [r3, #2]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d3e3      	bcc.n	8008b7a <calcChecksum+0xa2>
    }
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <sendI2Cmessage>:

UBLOX_transResult sendI2Cmessage(void){
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b098      	sub	sp, #96	; 0x60
 8008bc4:	af02      	add	r7, sp, #8
	UBLOX_transResult res;
    uint8_t message[60] = {0};
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	f107 031c 	add.w	r3, r7, #28
 8008bce:	2238      	movs	r2, #56	; 0x38
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f00d fb51 	bl	801627a <memset>
    uint8_t rx_message[20] = {0};
 8008bd8:	2300      	movs	r3, #0
 8008bda:	607b      	str	r3, [r7, #4]
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	605a      	str	r2, [r3, #4]
 8008be6:	609a      	str	r2, [r3, #8]
 8008be8:	60da      	str	r2, [r3, #12]
    uint8_t len = config_message.len + 8;
 8008bea:	4b41      	ldr	r3, [pc, #260]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008bec:	885b      	ldrh	r3, [r3, #2]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    message[0] = UBX_SYNCH_1;
 8008bf6:	23b5      	movs	r3, #181	; 0xb5
 8008bf8:	763b      	strb	r3, [r7, #24]
    message[1] = UBX_SYNCH_2;
 8008bfa:	2362      	movs	r3, #98	; 0x62
 8008bfc:	767b      	strb	r3, [r7, #25]
    message[2] = config_message.cls;
 8008bfe:	4b3c      	ldr	r3, [pc, #240]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	76bb      	strb	r3, [r7, #26]
    message[3] = config_message.id;
 8008c04:	4b3a      	ldr	r3, [pc, #232]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	76fb      	strb	r3, [r7, #27]
    message[4] = (config_message.len & 0xFF);
 8008c0a:	4b39      	ldr	r3, [pc, #228]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c0c:	885b      	ldrh	r3, [r3, #2]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	773b      	strb	r3, [r7, #28]
    message[5] = (config_message.len >> 8);
 8008c12:	4b37      	ldr	r3, [pc, #220]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c14:	885b      	ldrh	r3, [r3, #2]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	777b      	strb	r3, [r7, #29]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008c24:	e011      	b.n	8008c4a <sendI2Cmessage+0x8a>
        message[6+i] = config_message.payload[i];
 8008c26:	4b32      	ldr	r3, [pc, #200]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c2e:	441a      	add	r2, r3
 8008c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c34:	3306      	adds	r3, #6
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	3358      	adds	r3, #88	; 0x58
 8008c3a:	443b      	add	r3, r7
 8008c3c:	f803 2c40 	strb.w	r2, [r3, #-64]
    for ( i=0 ; i < config_message.len ; i++){
 8008c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c44:	3301      	adds	r3, #1
 8008c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	4b27      	ldr	r3, [pc, #156]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c52:	885b      	ldrh	r3, [r3, #2]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d3e6      	bcc.n	8008c26 <sendI2Cmessage+0x66>
    }
    message[6+i] = config_message.checksumA;
 8008c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c5c:	3306      	adds	r3, #6
 8008c5e:	4a24      	ldr	r2, [pc, #144]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c60:	7b12      	ldrb	r2, [r2, #12]
 8008c62:	3358      	adds	r3, #88	; 0x58
 8008c64:	443b      	add	r3, r7
 8008c66:	f803 2c40 	strb.w	r2, [r3, #-64]
    message[7+i] = config_message.checksumB;
 8008c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c6e:	3307      	adds	r3, #7
 8008c70:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <sendI2Cmessage+0x130>)
 8008c72:	7b52      	ldrb	r2, [r2, #13]
 8008c74:	3358      	adds	r3, #88	; 0x58
 8008c76:	443b      	add	r3, r7
 8008c78:	f803 2c40 	strb.w	r2, [r3, #-64]
    res = UbloxI2CWriteReadPolling(UBLOX_M9N, message, len, rx_message, 20, 50);
 8008c7c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	1d3b      	adds	r3, r7, #4
 8008c84:	f107 0118 	add.w	r1, r7, #24
 8008c88:	2032      	movs	r0, #50	; 0x32
 8008c8a:	9001      	str	r0, [sp, #4]
 8008c8c:	2014      	movs	r0, #20
 8008c8e:	9000      	str	r0, [sp, #0]
 8008c90:	2084      	movs	r0, #132	; 0x84
 8008c92:	f000 f8b1 	bl	8008df8 <UbloxI2CWriteReadPolling>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    if (res == TRANS_OK){
 8008c9c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d11e      	bne.n	8008ce2 <sendI2Cmessage+0x122>
    	for(i=0; i<20;i++){
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008caa:	e00c      	b.n	8008cc6 <sendI2Cmessage+0x106>
    		if(rx_message[i] == UBX_SYNCH_1){
 8008cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cb0:	3358      	adds	r3, #88	; 0x58
 8008cb2:	443b      	add	r3, r7
 8008cb4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008cb8:	2bb5      	cmp	r3, #181	; 0xb5
 8008cba:	d009      	beq.n	8008cd0 <sendI2Cmessage+0x110>
    	for(i=0; i<20;i++){
 8008cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cca:	2b13      	cmp	r3, #19
 8008ccc:	d9ee      	bls.n	8008cac <sendI2Cmessage+0xec>
 8008cce:	e000      	b.n	8008cd2 <sendI2Cmessage+0x112>
    			break;
 8008cd0:	bf00      	nop
    		}
    	}
    	return rx_message[i+3];  //UBLOX returns 1 for ACK and 0 for NACK
 8008cd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cd6:	3303      	adds	r3, #3
 8008cd8:	3358      	adds	r3, #88	; 0x58
 8008cda:	443b      	add	r3, r7
 8008cdc:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008ce0:	e001      	b.n	8008ce6 <sendI2Cmessage+0x126>
    }
    return res;
 8008ce2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3758      	adds	r7, #88	; 0x58
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	2000005c 	.word	0x2000005c

08008cf4 <setPortOutput>:

UBLOX_transResult setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	71fb      	strb	r3, [r7, #7]
 8008d00:	4613      	mov	r3, r2
 8008d02:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 8008d04:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <setPortOutput+0x5c>)
 8008d06:	2206      	movs	r2, #6
 8008d08:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 8008d0a:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <setPortOutput+0x5c>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 8008d10:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <setPortOutput+0x5c>)
 8008d12:	2214      	movs	r2, #20
 8008d14:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
 8008d1a:	f107 0310 	add.w	r3, r7, #16
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	605a      	str	r2, [r3, #4]
 8008d24:	609a      	str	r2, [r3, #8]
 8008d26:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8008d28:	2384      	movs	r3, #132	; 0x84
 8008d2a:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 8008d2c:	2323      	movs	r3, #35	; 0x23
 8008d2e:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8008d30:	79bb      	ldrb	r3, [r7, #6]
 8008d32:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 8008d34:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <setPortOutput+0x5c>)
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8008d3c:	4804      	ldr	r0, [pc, #16]	; (8008d50 <setPortOutput+0x5c>)
 8008d3e:	f7ff fecb 	bl	8008ad8 <calcChecksum>
    return sendI2Cmessage();
 8008d42:	f7ff ff3d 	bl	8008bc0 <sendI2Cmessage>
 8008d46:	4603      	mov	r3, r0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	2000005c 	.word	0x2000005c

08008d54 <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

UBLOX_transResult configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	461a      	mov	r2, r3
 8008d62:	4623      	mov	r3, r4
 8008d64:	71fb      	strb	r3, [r7, #7]
 8008d66:	4603      	mov	r3, r0
 8008d68:	71bb      	strb	r3, [r7, #6]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	717b      	strb	r3, [r7, #5]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 8008d72:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <configureNMEA+0x60>)
 8008d74:	2206      	movs	r2, #6
 8008d76:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8008d78:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <configureNMEA+0x60>)
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <configureNMEA+0x60>)
 8008d80:	2208      	movs	r2, #8
 8008d82:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 8008d84:	2300      	movs	r3, #0
 8008d86:	60bb      	str	r3, [r7, #8]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8008d90:	79bb      	ldrb	r3, [r7, #6]
 8008d92:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 8008d94:	797b      	ldrb	r3, [r7, #5]
 8008d96:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8008d98:	4a06      	ldr	r2, [pc, #24]	; (8008db4 <configureNMEA+0x60>)
 8008d9a:	f107 0308 	add.w	r3, r7, #8
 8008d9e:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8008da0:	4804      	ldr	r0, [pc, #16]	; (8008db4 <configureNMEA+0x60>)
 8008da2:	f7ff fe99 	bl	8008ad8 <calcChecksum>
    return sendI2Cmessage();
 8008da6:	f7ff ff0b 	bl	8008bc0 <sendI2Cmessage>
 8008daa:	4603      	mov	r3, r0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd90      	pop	{r4, r7, pc}
 8008db4:	2000005c 	.word	0x2000005c

08008db8 <powerManageCfgSet>:
    message[7] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 8, payload, 56, 200);
}


UBLOX_transResult powerManageCfgSet(uint8_t maxAckTime){
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
    config_message.cls = UBX_CLASS_CFG;
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <powerManageCfgSet+0x38>)
 8008dc4:	2206      	movs	r2, #6
 8008dc6:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PM2;
 8008dc8:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <powerManageCfgSet+0x38>)
 8008dca:	223b      	movs	r2, #59	; 0x3b
 8008dcc:	705a      	strb	r2, [r3, #1]
    config_message.len = 44;
 8008dce:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <powerManageCfgSet+0x38>)
 8008dd0:	222c      	movs	r2, #44	; 0x2c
 8008dd2:	805a      	strh	r2, [r3, #2]
    config_message.payload = powerModesetPld;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <powerManageCfgSet+0x38>)
 8008dd6:	4a07      	ldr	r2, [pc, #28]	; (8008df4 <powerManageCfgSet+0x3c>)
 8008dd8:	609a      	str	r2, [r3, #8]
    calcChecksum(&config_message);
 8008dda:	4805      	ldr	r0, [pc, #20]	; (8008df0 <powerManageCfgSet+0x38>)
 8008ddc:	f7ff fe7c 	bl	8008ad8 <calcChecksum>
    return sendI2Cmessage();
 8008de0:	f7ff feee 	bl	8008bc0 <sendI2Cmessage>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	2000005c 	.word	0x2000005c
 8008df4:	20000030 	.word	0x20000030

08008df8 <UbloxI2CWriteReadPolling>:
}


UBLOX_transResult UbloxI2CWriteReadPolling(uint16_t DevAddress, uint8_t *TData, uint16_t TDataLen,
										uint8_t *RData, uint16_t RDataLen, uint32_t Timeout)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af02      	add	r7, sp, #8
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	4603      	mov	r3, r0
 8008e04:	81fb      	strh	r3, [r7, #14]
 8008e06:	4613      	mov	r3, r2
 8008e08:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0x00;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit(&hi2c1, DevAddress, TData, TDataLen, Timeout)!= HAL_OK ){
 8008e0e:	89ba      	ldrh	r2, [r7, #12]
 8008e10:	89f9      	ldrh	r1, [r7, #14]
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	4613      	mov	r3, r2
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	480d      	ldr	r0, [pc, #52]	; (8008e50 <UbloxI2CWriteReadPolling+0x58>)
 8008e1c:	f003 fa30 	bl	800c280 <HAL_I2C_Master_Transmit>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <UbloxI2CWriteReadPolling+0x32>
		return TRANS_ERROR;
 8008e26:	2302      	movs	r3, #2
 8008e28:	e00e      	b.n	8008e48 <UbloxI2CWriteReadPolling+0x50>
	}
	// Read Response
	if (HAL_I2C_Master_Receive(&hi2c1, DevAddress, RData, RDataLen, Timeout) != HAL_OK){
 8008e2a:	8c3a      	ldrh	r2, [r7, #32]
 8008e2c:	89f9      	ldrh	r1, [r7, #14]
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4613      	mov	r3, r2
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4806      	ldr	r0, [pc, #24]	; (8008e50 <UbloxI2CWriteReadPolling+0x58>)
 8008e38:	f003 fb16 	bl	800c468 <HAL_I2C_Master_Receive>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <UbloxI2CWriteReadPolling+0x4e>
		return RECEIVE_ERROR;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e000      	b.n	8008e48 <UbloxI2CWriteReadPolling+0x50>
	}
	return TRANS_OK;
 8008e46:	2304      	movs	r3, #4
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000340 	.word	0x20000340

08008e54 <tick_gyro>:
uint16_t magn_calib_counter = 0;
gyro_data_t gyro_sum;
gyro_data_t gyro_mean;


void tick_gyro(mems_data_t * mems_data){
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]

    lsm6_acc_read(mems_data);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f99b 	bl	8009198 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa00 	bl	8009268 <lis3_magn_read>
    gyro_read(mems_data);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f909 	bl	8009080 <gyro_read>
//    debugPrintMEMS(mems_data);
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <lsm6_bus_init+0x74>)
 8008e7e:	4a1c      	ldr	r2, [pc, #112]	; (8008ef0 <lsm6_bus_init+0x78>)
 8008e80:	601a      	str	r2, [r3, #0]
//hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.Timing = 0x307075B1;
 8008e82:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <lsm6_bus_init+0x74>)
 8008e84:	4a1b      	ldr	r2, [pc, #108]	; (8008ef4 <lsm6_bus_init+0x7c>)
 8008e86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008e88:	4b18      	ldr	r3, [pc, #96]	; (8008eec <lsm6_bus_init+0x74>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e8e:	4b17      	ldr	r3, [pc, #92]	; (8008eec <lsm6_bus_init+0x74>)
 8008e90:	2201      	movs	r2, #1
 8008e92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e94:	4b15      	ldr	r3, [pc, #84]	; (8008eec <lsm6_bus_init+0x74>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008e9a:	4b14      	ldr	r3, [pc, #80]	; (8008eec <lsm6_bus_init+0x74>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008ea0:	4b12      	ldr	r3, [pc, #72]	; (8008eec <lsm6_bus_init+0x74>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008ea6:	4b11      	ldr	r3, [pc, #68]	; (8008eec <lsm6_bus_init+0x74>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <lsm6_bus_init+0x74>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008eb2:	480e      	ldr	r0, [pc, #56]	; (8008eec <lsm6_bus_init+0x74>)
 8008eb4:	f003 f955 	bl	800c162 <HAL_I2C_Init>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <lsm6_bus_init+0x4a>
  {
    return 1;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e012      	b.n	8008ee8 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4809      	ldr	r0, [pc, #36]	; (8008eec <lsm6_bus_init+0x74>)
 8008ec6:	f004 f92d 	bl	800d124 <HAL_I2CEx_ConfigAnalogFilter>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <lsm6_bus_init+0x5c>
  {
    return 2;
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e009      	b.n	8008ee8 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4805      	ldr	r0, [pc, #20]	; (8008eec <lsm6_bus_init+0x74>)
 8008ed8:	f004 f96f 	bl	800d1ba <HAL_I2CEx_ConfigDigitalFilter>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <lsm6_bus_init+0x6e>
  {
    return 3;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e000      	b.n	8008ee8 <lsm6_bus_init+0x70>
  }
  return 0;
 8008ee6:	2300      	movs	r3, #0

}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000040c 	.word	0x2000040c
 8008ef0:	40005800 	.word	0x40005800
 8008ef4:	307075b1 	.word	0x307075b1

08008ef8 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x54;   //gyro 208Hz-500dps
 8008efe:	2354      	movs	r3, #84	; 0x54
 8008f00:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x04;   // block data update - reg addr auto incr
 8008f02:	2304      	movs	r3, #4
 8008f04:	71bb      	strb	r3, [r7, #6]
    uint8_t wakeUp = 0x10;
 8008f06:	2310      	movs	r3, #16
 8008f08:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl7_val = 0xE0;	//HPF and HighPerf on
 8008f0a:	23e0      	movs	r3, #224	; 0xe0
 8008f0c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, WAKE_UP_DUR, I2C_MEMADD_SIZE_8BIT, &wakeUp, 1, 20);
 8008f0e:	2314      	movs	r3, #20
 8008f10:	9302      	str	r3, [sp, #8]
 8008f12:	2301      	movs	r3, #1
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	1d7b      	adds	r3, r7, #5
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	225c      	movs	r2, #92	; 0x5c
 8008f1e:	21d4      	movs	r1, #212	; 0xd4
 8008f20:	4815      	ldr	r0, [pc, #84]	; (8008f78 <gyro_init+0x80>)
 8008f22:	f003 fb97 	bl	800c654 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 8008f26:	2314      	movs	r3, #20
 8008f28:	9302      	str	r3, [sp, #8]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	1dfb      	adds	r3, r7, #7
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	2301      	movs	r3, #1
 8008f34:	2211      	movs	r2, #17
 8008f36:	21d4      	movs	r1, #212	; 0xd4
 8008f38:	480f      	ldr	r0, [pc, #60]	; (8008f78 <gyro_init+0x80>)
 8008f3a:	f003 fb8b 	bl	800c654 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2 , LSM6, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &ctrl7_val, 1, 20);
 8008f3e:	2314      	movs	r3, #20
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	2301      	movs	r3, #1
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	1d3b      	adds	r3, r7, #4
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	2216      	movs	r2, #22
 8008f4e:	21d4      	movs	r1, #212	; 0xd4
 8008f50:	4809      	ldr	r0, [pc, #36]	; (8008f78 <gyro_init+0x80>)
 8008f52:	f003 fb7f 	bl	800c654 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8008f56:	2314      	movs	r3, #20
 8008f58:	9302      	str	r3, [sp, #8]
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	1dbb      	adds	r3, r7, #6
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	2301      	movs	r3, #1
 8008f64:	2212      	movs	r2, #18
 8008f66:	21d4      	movs	r1, #212	; 0xd4
 8008f68:	4803      	ldr	r0, [pc, #12]	; (8008f78 <gyro_init+0x80>)
 8008f6a:	f003 fb73 	bl	800c654 <HAL_I2C_Mem_Write>
 8008f6e:	4603      	mov	r3, r0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	2000040c 	.word	0x2000040c

08008f7c <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8008f82:	2350      	movs	r3, #80	; 0x50
 8008f84:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 8008f86:	2320      	movs	r3, #32
 8008f88:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8008f8a:	2314      	movs	r3, #20
 8008f8c:	9302      	str	r3, [sp, #8]
 8008f8e:	2301      	movs	r3, #1
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	1dfb      	adds	r3, r7, #7
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	2301      	movs	r3, #1
 8008f98:	2210      	movs	r2, #16
 8008f9a:	21d4      	movs	r1, #212	; 0xd4
 8008f9c:	4809      	ldr	r0, [pc, #36]	; (8008fc4 <lsm6_acc_init+0x48>)
 8008f9e:	f003 fb59 	bl	800c654 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8008fa2:	2314      	movs	r3, #20
 8008fa4:	9302      	str	r3, [sp, #8]
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	1dbb      	adds	r3, r7, #6
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	2219      	movs	r2, #25
 8008fb2:	21d4      	movs	r1, #212	; 0xd4
 8008fb4:	4803      	ldr	r0, [pc, #12]	; (8008fc4 <lsm6_acc_init+0x48>)
 8008fb6:	f003 fb4d 	bl	800c654 <HAL_I2C_Mem_Write>
 8008fba:	4603      	mov	r3, r0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	2000040c 	.word	0x2000040c

08008fc8 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 8008fd2:	2342      	movs	r3, #66	; 0x42
 8008fd4:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 8008fda:	2308      	movs	r3, #8
 8008fdc:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 8008fde:	2340      	movs	r3, #64	; 0x40
 8008fe0:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 50);
 8008fe2:	2332      	movs	r3, #50	; 0x32
 8008fe4:	9302      	str	r3, [sp, #8]
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	1dbb      	adds	r3, r7, #6
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	2301      	movs	r3, #1
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	213c      	movs	r1, #60	; 0x3c
 8008ff4:	4821      	ldr	r0, [pc, #132]	; (800907c <magn_init+0xb4>)
 8008ff6:	f003 fb2d 	bl	800c654 <HAL_I2C_Mem_Write>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <magn_init+0x40>
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	e034      	b.n	8009072 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 50);
 8009008:	2332      	movs	r3, #50	; 0x32
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	2301      	movs	r3, #1
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	1d7b      	adds	r3, r7, #5
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	2301      	movs	r3, #1
 8009016:	2222      	movs	r2, #34	; 0x22
 8009018:	213c      	movs	r1, #60	; 0x3c
 800901a:	4818      	ldr	r0, [pc, #96]	; (800907c <magn_init+0xb4>)
 800901c:	f003 fb1a 	bl	800c654 <HAL_I2C_Mem_Write>
 8009020:	4603      	mov	r3, r0
 8009022:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <magn_init+0x66>
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	e021      	b.n	8009072 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 50);
 800902e:	2332      	movs	r3, #50	; 0x32
 8009030:	9302      	str	r3, [sp, #8]
 8009032:	2301      	movs	r3, #1
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	1d3b      	adds	r3, r7, #4
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	2301      	movs	r3, #1
 800903c:	2223      	movs	r2, #35	; 0x23
 800903e:	213c      	movs	r1, #60	; 0x3c
 8009040:	480e      	ldr	r0, [pc, #56]	; (800907c <magn_init+0xb4>)
 8009042:	f003 fb07 	bl	800c654 <HAL_I2C_Mem_Write>
 8009046:	4603      	mov	r3, r0
 8009048:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <magn_init+0x8c>
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	e00e      	b.n	8009072 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 50);
 8009054:	2332      	movs	r3, #50	; 0x32
 8009056:	9302      	str	r3, [sp, #8]
 8009058:	2301      	movs	r3, #1
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	1cfb      	adds	r3, r7, #3
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	2301      	movs	r3, #1
 8009062:	2224      	movs	r2, #36	; 0x24
 8009064:	213c      	movs	r1, #60	; 0x3c
 8009066:	4805      	ldr	r0, [pc, #20]	; (800907c <magn_init+0xb4>)
 8009068:	f003 faf4 	bl	800c654 <HAL_I2C_Mem_Write>
 800906c:	4603      	mov	r3, r0
 800906e:	71fb      	strb	r3, [r7, #7]
    return res;
 8009070:	79fb      	ldrb	r3, [r7, #7]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	2000040c 	.word	0x2000040c

08009080 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8009080:	b580      	push	{r7, lr}
 8009082:	b08c      	sub	sp, #48	; 0x30
 8009084:	af04      	add	r7, sp, #16
 8009086:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8009088:	2300      	movs	r3, #0
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	2300      	movs	r3, #0
 800908e:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8009098:	2332      	movs	r3, #50	; 0x32
 800909a:	9302      	str	r3, [sp, #8]
 800909c:	2306      	movs	r3, #6
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	f107 0310 	add.w	r3, r7, #16
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	2301      	movs	r3, #1
 80090a8:	2222      	movs	r2, #34	; 0x22
 80090aa:	21d4      	movs	r1, #212	; 0xd4
 80090ac:	4838      	ldr	r0, [pc, #224]	; (8009190 <gyro_read+0x110>)
 80090ae:	f003 fbe5 	bl	800c87c <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 80090b2:	7ffb      	ldrb	r3, [r7, #31]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <gyro_read+0x3c>
		return res;
 80090b8:	7ffb      	ldrb	r3, [r7, #31]
 80090ba:	e060      	b.n	800917e <gyro_read+0xfe>
	}
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 3, 50);
 80090bc:	2332      	movs	r3, #50	; 0x32
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	2303      	movs	r3, #3
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	f107 030c 	add.w	r3, r7, #12
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	2301      	movs	r3, #1
 80090cc:	2240      	movs	r2, #64	; 0x40
 80090ce:	21d4      	movs	r1, #212	; 0xd4
 80090d0:	482f      	ldr	r0, [pc, #188]	; (8009190 <gyro_read+0x110>)
 80090d2:	f003 fbd3 	bl	800c87c <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 80090d6:	7ffb      	ldrb	r3, [r7, #31]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <gyro_read+0x60>
		return res;
 80090dc:	7ffb      	ldrb	r3, [r7, #31]
 80090de:	e04e      	b.n	800917e <gyro_read+0xfe>
	}
    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 80090e0:	7c7b      	ldrb	r3, [r7, #17]
 80090e2:	021b      	lsls	r3, r3, #8
 80090e4:	b21a      	sxth	r2, r3
 80090e6:	7c3b      	ldrb	r3, [r7, #16]
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	4313      	orrs	r3, r2
 80090ec:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 80090ee:	7cfb      	ldrb	r3, [r7, #19]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	b21a      	sxth	r2, r3
 80090f4:	7cbb      	ldrb	r3, [r7, #18]
 80090f6:	b21b      	sxth	r3, r3
 80090f8:	4313      	orrs	r3, r2
 80090fa:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 80090fc:	7d7b      	ldrb	r3, [r7, #21]
 80090fe:	021b      	lsls	r3, r3, #8
 8009100:	b21a      	sxth	r2, r3
 8009102:	7d3b      	ldrb	r3, [r7, #20]
 8009104:	b21b      	sxth	r3, r3
 8009106:	4313      	orrs	r3, r2
 8009108:	833b      	strh	r3, [r7, #24]
#ifndef GYRO_TS
    mems_data->timestamp = osKernelGetTickCount();
 800910a:	f008 f969 	bl	80113e0 <osKernelGetTickCount>
 800910e:	4602      	mov	r2, r0
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	625a      	str	r2, [r3, #36]	; 0x24
#else
    mems_data->timestamp = (uint32_t) ((ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0]));
#endif
    mems_data->gyro.gyro_x = - (float)(gyro_x * 0.0177f);// * -1.0f;
 8009114:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009118:	ee07 3a90 	vmov	s15, r3
 800911c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009120:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8009194 <gyro_read+0x114>
 8009124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009128:	eef1 7a67 	vneg.f32	s15, s15
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro.gyro_y = - (float)(gyro_y * 0.0177);// * -1.0f;
 8009132:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 fa0c 	bl	8000554 <__aeabi_i2d>
 800913c:	a312      	add	r3, pc, #72	; (adr r3, 8009188 <gyro_read+0x108>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 fa71 	bl	8000628 <__aeabi_dmul>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4610      	mov	r0, r2
 800914c:	4619      	mov	r1, r3
 800914e:	f7f7 fd43 	bl	8000bd8 <__aeabi_d2f>
 8009152:	4603      	mov	r3, r0
 8009154:	ee07 3a90 	vmov	s15, r3
 8009158:	eef1 7a67 	vneg.f32	s15, s15
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro.gyro_z =   (float)(gyro_z * 0.0177f);// * -1.0f;
 8009162:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800916e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8009194 <gyro_read+0x114>
 8009172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	edc3 7a02 	vstr	s15, [r3, #8]
    return res;
 800917c:	7ffb      	ldrb	r3, [r7, #31]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	e48e8a72 	.word	0xe48e8a72
 800918c:	3f921ff2 	.word	0x3f921ff2
 8009190:	2000040c 	.word	0x2000040c
 8009194:	3c90ff97 	.word	0x3c90ff97

08009198 <lsm6_acc_read>:

//HAL_StatusTypeDef gyroReadTS(mems_data_t){
//
//}

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8009198:	b580      	push	{r7, lr}
 800919a:	b08a      	sub	sp, #40	; 0x28
 800919c:	af04      	add	r7, sp, #16
 800919e:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 80091a0:	2300      	movs	r3, #0
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	2300      	movs	r3, #0
 80091a6:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	75fb      	strb	r3, [r7, #23]
	res = HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 80091ac:	2332      	movs	r3, #50	; 0x32
 80091ae:	9302      	str	r3, [sp, #8]
 80091b0:	2306      	movs	r3, #6
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	f107 0308 	add.w	r3, r7, #8
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	2301      	movs	r3, #1
 80091bc:	2228      	movs	r2, #40	; 0x28
 80091be:	21d4      	movs	r1, #212	; 0xd4
 80091c0:	4827      	ldr	r0, [pc, #156]	; (8009260 <lsm6_acc_read+0xc8>)
 80091c2:	f003 fb5b 	bl	800c87c <HAL_I2C_Mem_Read>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]
	if (res != HAL_OK){
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <lsm6_acc_read+0x3c>
		return res;
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	e040      	b.n	8009256 <lsm6_acc_read+0xbe>
	}
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 80091d4:	7a7b      	ldrb	r3, [r7, #9]
 80091d6:	021b      	lsls	r3, r3, #8
 80091d8:	b21a      	sxth	r2, r3
 80091da:	7a3b      	ldrb	r3, [r7, #8]
 80091dc:	b21b      	sxth	r3, r3
 80091de:	4313      	orrs	r3, r2
 80091e0:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	b21a      	sxth	r2, r3
 80091e8:	7abb      	ldrb	r3, [r7, #10]
 80091ea:	b21b      	sxth	r3, r3
 80091ec:	4313      	orrs	r3, r2
 80091ee:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 80091f0:	7b7b      	ldrb	r3, [r7, #13]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	b21a      	sxth	r2, r3
 80091f6:	7b3b      	ldrb	r3, [r7, #12]
 80091f8:	b21b      	sxth	r3, r3
 80091fa:	4313      	orrs	r3, r2
 80091fc:	823b      	strh	r3, [r7, #16]
    mems_data->acc.acc_x = - (float)(acc_x / 16384.0f);//  * -1.0f;
 80091fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800920a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8009264 <lsm6_acc_read+0xcc>
 800920e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009212:	eef1 7a67 	vneg.f32	s15, s15
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc.acc_y = - (float)(acc_y / 16384.0f);// * -1.0f;
 800921c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009220:	ee07 3a90 	vmov	s15, r3
 8009224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009228:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8009264 <lsm6_acc_read+0xcc>
 800922c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009230:	eef1 7a67 	vneg.f32	s15, s15
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc.acc_z =	(float)(acc_z / 16384.0f);// * -1.0f;
 800923a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009246:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009264 <lsm6_acc_read+0xcc>
 800924a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	2000040c 	.word	0x2000040c
 8009264:	46800000 	.word	0x46800000

08009268 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	; 0x28
 800926c:	af04      	add	r7, sp, #16
 800926e:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8009270:	2300      	movs	r3, #0
 8009272:	60bb      	str	r3, [r7, #8]
 8009274:	2300      	movs	r3, #0
 8009276:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 800927c:	2332      	movs	r3, #50	; 0x32
 800927e:	9302      	str	r3, [sp, #8]
 8009280:	2306      	movs	r3, #6
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	f107 0308 	add.w	r3, r7, #8
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	2301      	movs	r3, #1
 800928c:	2228      	movs	r2, #40	; 0x28
 800928e:	213c      	movs	r1, #60	; 0x3c
 8009290:	4824      	ldr	r0, [pc, #144]	; (8009324 <lis3_magn_read+0xbc>)
 8009292:	f003 faf3 	bl	800c87c <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <lis3_magn_read+0x38>
    	return res;
 800929c:	7dfb      	ldrb	r3, [r7, #23]
 800929e:	e03c      	b.n	800931a <lis3_magn_read+0xb2>
	}
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 80092a0:	7a7b      	ldrb	r3, [r7, #9]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	b21a      	sxth	r2, r3
 80092a6:	7a3b      	ldrb	r3, [r7, #8]
 80092a8:	b21b      	sxth	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	b21a      	sxth	r2, r3
 80092b4:	7abb      	ldrb	r3, [r7, #10]
 80092b6:	b21b      	sxth	r3, r3
 80092b8:	4313      	orrs	r3, r2
 80092ba:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 80092bc:	7b7b      	ldrb	r3, [r7, #13]
 80092be:	021b      	lsls	r3, r3, #8
 80092c0:	b21a      	sxth	r2, r3
 80092c2:	7b3b      	ldrb	r3, [r7, #12]
 80092c4:	b21b      	sxth	r3, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	823b      	strh	r3, [r7, #16]
    mems_data->magn.magn_x = (float)(magn_x / 10.0f);
 80092ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80092da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn.magn_y = (float)(magn_y / 10.0f);
 80092e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80092f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn.magn_z = (float)(magn_z / 10.0f);
 80092fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800930a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800930e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	2000040c 	.word	0x2000040c

08009328 <gyro_offset_calculation>:


uint8_t gyro_offset_calculation(mems_data_t *mems_data){
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
	gyro_read(mems_data);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff fea5 	bl	8009080 <gyro_read>
	gyro_sum.gyro_x += mems_data->gyro.gyro_x;
 8009336:	4b39      	ldr	r3, [pc, #228]	; (800941c <gyro_offset_calculation+0xf4>)
 8009338:	ed93 7a00 	vldr	s14, [r3]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	edd3 7a00 	vldr	s15, [r3]
 8009342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009346:	4b35      	ldr	r3, [pc, #212]	; (800941c <gyro_offset_calculation+0xf4>)
 8009348:	edc3 7a00 	vstr	s15, [r3]
	gyro_sum.gyro_y += mems_data->gyro.gyro_y;
 800934c:	4b33      	ldr	r3, [pc, #204]	; (800941c <gyro_offset_calculation+0xf4>)
 800934e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	edd3 7a01 	vldr	s15, [r3, #4]
 8009358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800935c:	4b2f      	ldr	r3, [pc, #188]	; (800941c <gyro_offset_calculation+0xf4>)
 800935e:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_sum.gyro_z += mems_data->gyro.gyro_z;
 8009362:	4b2e      	ldr	r3, [pc, #184]	; (800941c <gyro_offset_calculation+0xf4>)
 8009364:	ed93 7a02 	vldr	s14, [r3, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	edd3 7a02 	vldr	s15, [r3, #8]
 800936e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009372:	4b2a      	ldr	r3, [pc, #168]	; (800941c <gyro_offset_calculation+0xf4>)
 8009374:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_offset_counter++;
 8009378:	4b29      	ldr	r3, [pc, #164]	; (8009420 <gyro_offset_calculation+0xf8>)
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	3301      	adds	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	4b27      	ldr	r3, [pc, #156]	; (8009420 <gyro_offset_calculation+0xf8>)
 8009382:	801a      	strh	r2, [r3, #0]
	if (gyro_offset_counter >= GYRO_CALIB_SAMPLES){
 8009384:	4b26      	ldr	r3, [pc, #152]	; (8009420 <gyro_offset_calculation+0xf8>)
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800938c:	d341      	bcc.n	8009412 <gyro_offset_calculation+0xea>
		gyro_mean.gyro_x = gyro_sum.gyro_x / gyro_offset_counter;
 800938e:	4b23      	ldr	r3, [pc, #140]	; (800941c <gyro_offset_calculation+0xf4>)
 8009390:	edd3 6a00 	vldr	s13, [r3]
 8009394:	4b22      	ldr	r3, [pc, #136]	; (8009420 <gyro_offset_calculation+0xf8>)
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	ee07 3a90 	vmov	s15, r3
 800939c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a4:	4b1f      	ldr	r3, [pc, #124]	; (8009424 <gyro_offset_calculation+0xfc>)
 80093a6:	edc3 7a00 	vstr	s15, [r3]
		gyro_mean.gyro_y = gyro_sum.gyro_y / gyro_offset_counter;
 80093aa:	4b1c      	ldr	r3, [pc, #112]	; (800941c <gyro_offset_calculation+0xf4>)
 80093ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80093b0:	4b1b      	ldr	r3, [pc, #108]	; (8009420 <gyro_offset_calculation+0xf8>)
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c0:	4b18      	ldr	r3, [pc, #96]	; (8009424 <gyro_offset_calculation+0xfc>)
 80093c2:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_mean.gyro_z = gyro_sum.gyro_z / gyro_offset_counter;
 80093c6:	4b15      	ldr	r3, [pc, #84]	; (800941c <gyro_offset_calculation+0xf4>)
 80093c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80093cc:	4b14      	ldr	r3, [pc, #80]	; (8009420 <gyro_offset_calculation+0xf8>)
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093dc:	4b11      	ldr	r3, [pc, #68]	; (8009424 <gyro_offset_calculation+0xfc>)
 80093de:	edc3 7a02 	vstr	s15, [r3, #8]
		setGyroOffset(gyro_mean);
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <gyro_offset_calculation+0xfc>)
 80093e4:	edd3 6a00 	vldr	s13, [r3]
 80093e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80093ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80093f0:	eeb0 0a66 	vmov.f32	s0, s13
 80093f4:	eef0 0a47 	vmov.f32	s1, s14
 80093f8:	eeb0 1a67 	vmov.f32	s2, s15
 80093fc:	f7f7 feee 	bl	80011dc <setGyroOffset>
		gyro_offset_counter = 0;
 8009400:	4b07      	ldr	r3, [pc, #28]	; (8009420 <gyro_offset_calculation+0xf8>)
 8009402:	2200      	movs	r2, #0
 8009404:	801a      	strh	r2, [r3, #0]
		Flash_Write_CalTable(GYRO_OFFSET_ADDR, &gyro_mean);
 8009406:	4907      	ldr	r1, [pc, #28]	; (8009424 <gyro_offset_calculation+0xfc>)
 8009408:	4807      	ldr	r0, [pc, #28]	; (8009428 <gyro_offset_calculation+0x100>)
 800940a:	f7ff f8ed 	bl	80085e8 <Flash_Write_CalTable>
		return 0;
 800940e:	2300      	movs	r3, #0
 8009410:	e000      	b.n	8009414 <gyro_offset_calculation+0xec>
	}
	return 1;
 8009412:	2301      	movs	r3, #1
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20000464 	.word	0x20000464
 8009420:	20000460 	.word	0x20000460
 8009424:	20000470 	.word	0x20000470
 8009428:	080fb000 	.word	0x080fb000

0800942c <magneto_sample>:

uint8_t magneto_sample(mems_data_t *mems_data, float *magn_samples){
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
	lis3_magn_read(mems_data);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff ff16 	bl	8009268 <lis3_magn_read>
	magn_samples[magn_calib_counter * 3 + 0] = mems_data->magn.magn_x;
 800943c:	4b1a      	ldr	r3, [pc, #104]	; (80094a8 <magneto_sample+0x7c>)
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	4613      	mov	r3, r2
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	461a      	mov	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	4413      	add	r3, r2
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6992      	ldr	r2, [r2, #24]
 8009454:	601a      	str	r2, [r3, #0]
	magn_samples[magn_calib_counter * 3 + 1] = mems_data->magn.magn_y;
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <magneto_sample+0x7c>)
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	4613      	mov	r3, r2
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	3304      	adds	r3, #4
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	4413      	add	r3, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	69d2      	ldr	r2, [r2, #28]
 800946e:	601a      	str	r2, [r3, #0]
	magn_samples[magn_calib_counter * 3 + 2] = mems_data->magn.magn_z;
 8009470:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <magneto_sample+0x7c>)
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	4613      	mov	r3, r2
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	3308      	adds	r3, #8
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	4413      	add	r3, r2
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6a12      	ldr	r2, [r2, #32]
 8009488:	601a      	str	r2, [r3, #0]
	if (magn_calib_counter >= MAGN_CALIB_SAMPLES){
 800948a:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <magneto_sample+0x7c>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009492:	d304      	bcc.n	800949e <magneto_sample+0x72>
		magn_calib_counter = 0;
 8009494:	4b04      	ldr	r3, [pc, #16]	; (80094a8 <magneto_sample+0x7c>)
 8009496:	2200      	movs	r2, #0
 8009498:	801a      	strh	r2, [r3, #0]
		return 0;
 800949a:	2300      	movs	r3, #0
 800949c:	e000      	b.n	80094a0 <magneto_sample+0x74>
	}
	return 1;
 800949e:	2301      	movs	r3, #1
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000462 	.word	0x20000462

080094ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80094ac:	b5b0      	push	{r4, r5, r7, lr}
 80094ae:	b09c      	sub	sp, #112	; 0x70
 80094b0:	af00      	add	r7, sp, #0

  HAL_Init();
 80094b2:	f001 ffb4 	bl	800b41e <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80094b6:	f000 fa8f 	bl	80099d8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80094ba:	f000 fadf 	bl	8009a7c <MX_GPIO_Init>



  MX_USART1_UART_Init();
 80094be:	f001 fd41 	bl	800af44 <MX_USART1_UART_Init>

  MX_UART4_Init();
 80094c2:	f001 fd91 	bl	800afe8 <MX_UART4_Init>

  FusionInit();
 80094c6:	f7f7 ff03 	bl	80012d0 <FusionInit>


  if (lsm6_bus_init() != 0){
 80094ca:	f7ff fcd5 	bl	8008e78 <lsm6_bus_init>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d010      	beq.n	80094f6 <main+0x4a>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 80094d4:	4b65      	ldr	r3, [pc, #404]	; (800966c <main+0x1c0>)
 80094d6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80094da:	461d      	mov	r5, r3
 80094dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80094e4:	c403      	stmia	r4!, {r0, r1}
 80094e6:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 80094e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80094ec:	210a      	movs	r1, #10
 80094ee:	4618      	mov	r0, r3
 80094f0:	f001 fe04 	bl	800b0fc <uart_write_debug>
 80094f4:	e042      	b.n	800957c <main+0xd0>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 80094f6:	f7ff fd41 	bl	8008f7c <lsm6_acc_init>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00f      	beq.n	8009520 <main+0x74>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8009500:	4b5b      	ldr	r3, [pc, #364]	; (8009670 <main+0x1c4>)
 8009502:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8009506:	461d      	mov	r5, r3
 8009508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800950a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800950c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009510:	c403      	stmia	r4!, {r0, r1}
 8009512:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8009514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009518:	210a      	movs	r1, #10
 800951a:	4618      	mov	r0, r3
 800951c:	f001 fdee 	bl	800b0fc <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8009520:	f7ff fcea 	bl	8008ef8 <gyro_init>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d012      	beq.n	8009550 <main+0xa4>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 800952a:	4b52      	ldr	r3, [pc, #328]	; (8009674 <main+0x1c8>)
 800952c:	f107 041c 	add.w	r4, r7, #28
 8009530:	461d      	mov	r5, r3
 8009532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800953a:	c403      	stmia	r4!, {r0, r1}
 800953c:	8022      	strh	r2, [r4, #0]
 800953e:	3402      	adds	r4, #2
 8009540:	0c13      	lsrs	r3, r2, #16
 8009542:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8009544:	f107 031c 	add.w	r3, r7, #28
 8009548:	210a      	movs	r1, #10
 800954a:	4618      	mov	r0, r3
 800954c:	f001 fdd6 	bl	800b0fc <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8009550:	f7ff fd3a 	bl	8008fc8 <magn_init>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d010      	beq.n	800957c <main+0xd0>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 800955a:	4b47      	ldr	r3, [pc, #284]	; (8009678 <main+0x1cc>)
 800955c:	463c      	mov	r4, r7
 800955e:	461d      	mov	r5, r3
 8009560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009568:	c403      	stmia	r4!, {r0, r1}
 800956a:	8022      	strh	r2, [r4, #0]
 800956c:	3402      	adds	r4, #2
 800956e:	0c13      	lsrs	r3, r2, #16
 8009570:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8009572:	463b      	mov	r3, r7
 8009574:	210a      	movs	r1, #10
 8009576:	4618      	mov	r0, r3
 8009578:	f001 fdc0 	bl	800b0fc <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 800957c:	f7ff f922 	bl	80087c4 <ublox_i2c_bus_init>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d004      	beq.n	8009590 <main+0xe4>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8009586:	210a      	movs	r1, #10
 8009588:	483c      	ldr	r0, [pc, #240]	; (800967c <main+0x1d0>)
 800958a:	f001 fdb7 	bl	800b0fc <uart_write_debug>
 800958e:	e011      	b.n	80095b4 <main+0x108>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8009590:	f7ff f9c2 	bl	8008918 <ubloxInit>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 800959a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <main+0x100>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 80095a2:	210a      	movs	r1, #10
 80095a4:	4836      	ldr	r0, [pc, #216]	; (8009680 <main+0x1d4>)
 80095a6:	f001 fda9 	bl	800b0fc <uart_write_debug>
 80095aa:	e003      	b.n	80095b4 <main+0x108>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 80095ac:	210a      	movs	r1, #10
 80095ae:	4835      	ldr	r0, [pc, #212]	; (8009684 <main+0x1d8>)
 80095b0:	f001 fda4 	bl	800b0fc <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 80095b4:	f007 feca 	bl	801134c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 80095b8:	4833      	ldr	r0, [pc, #204]	; (8009688 <main+0x1dc>)
 80095ba:	f008 f92b 	bl	8011814 <osMutexNew>
 80095be:	4603      	mov	r3, r0
 80095c0:	4a32      	ldr	r2, [pc, #200]	; (800968c <main+0x1e0>)
 80095c2:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 80095c4:	4832      	ldr	r0, [pc, #200]	; (8009690 <main+0x1e4>)
 80095c6:	f008 f925 	bl	8011814 <osMutexNew>
 80095ca:	4603      	mov	r3, r0
 80095cc:	4a31      	ldr	r2, [pc, #196]	; (8009694 <main+0x1e8>)
 80095ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (8, sizeof(mems_data_t), &memsQueue_attributes);
 80095d0:	4a31      	ldr	r2, [pc, #196]	; (8009698 <main+0x1ec>)
 80095d2:	2128      	movs	r1, #40	; 0x28
 80095d4:	2008      	movs	r0, #8
 80095d6:	f008 fa2b 	bl	8011a30 <osMessageQueueNew>
 80095da:	4603      	mov	r3, r0
 80095dc:	4a2f      	ldr	r2, [pc, #188]	; (800969c <main+0x1f0>)
 80095de:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 80095e0:	4a2f      	ldr	r2, [pc, #188]	; (80096a0 <main+0x1f4>)
 80095e2:	210c      	movs	r1, #12
 80095e4:	2004      	movs	r0, #4
 80095e6:	f008 fa23 	bl	8011a30 <osMessageQueueNew>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4a2d      	ldr	r2, [pc, #180]	; (80096a4 <main+0x1f8>)
 80095ee:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 80095f0:	4a2d      	ldr	r2, [pc, #180]	; (80096a8 <main+0x1fc>)
 80095f2:	2128      	movs	r1, #40	; 0x28
 80095f4:	2008      	movs	r0, #8
 80095f6:	f008 fa1b 	bl	8011a30 <osMessageQueueNew>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4a2b      	ldr	r2, [pc, #172]	; (80096ac <main+0x200>)
 80095fe:	6013      	str	r3, [r2, #0]
  /* EVENT FLAG FOR ACK RECEIVE */
  ack_rcvd = osEventFlagsNew(NULL);
 8009600:	2000      	movs	r0, #0
 8009602:	f008 f81e 	bl	8011642 <osEventFlagsNew>
 8009606:	4603      	mov	r3, r0
 8009608:	4a29      	ldr	r2, [pc, #164]	; (80096b0 <main+0x204>)
 800960a:	6013      	str	r3, [r2, #0]
  //							//

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800960c:	4a29      	ldr	r2, [pc, #164]	; (80096b4 <main+0x208>)
 800960e:	2100      	movs	r1, #0
 8009610:	4829      	ldr	r0, [pc, #164]	; (80096b8 <main+0x20c>)
 8009612:	f007 fefa 	bl	801140a <osThreadNew>
 8009616:	4603      	mov	r3, r0
 8009618:	4a28      	ldr	r2, [pc, #160]	; (80096bc <main+0x210>)
 800961a:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 800961c:	4a28      	ldr	r2, [pc, #160]	; (80096c0 <main+0x214>)
 800961e:	2100      	movs	r1, #0
 8009620:	4828      	ldr	r0, [pc, #160]	; (80096c4 <main+0x218>)
 8009622:	f007 fef2 	bl	801140a <osThreadNew>
 8009626:	4603      	mov	r3, r0
 8009628:	4a27      	ldr	r2, [pc, #156]	; (80096c8 <main+0x21c>)
 800962a:	6013      	str	r3, [r2, #0]

//  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 800962c:	4a27      	ldr	r2, [pc, #156]	; (80096cc <main+0x220>)
 800962e:	2100      	movs	r1, #0
 8009630:	4827      	ldr	r0, [pc, #156]	; (80096d0 <main+0x224>)
 8009632:	f007 feea 	bl	801140a <osThreadNew>
 8009636:	4603      	mov	r3, r0
 8009638:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <main+0x228>)
 800963a:	6013      	str	r3, [r2, #0]

//  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);

//  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 800963c:	4a26      	ldr	r2, [pc, #152]	; (80096d8 <main+0x22c>)
 800963e:	2100      	movs	r1, #0
 8009640:	4826      	ldr	r0, [pc, #152]	; (80096dc <main+0x230>)
 8009642:	f007 fee2 	bl	801140a <osThreadNew>
 8009646:	4603      	mov	r3, r0
 8009648:	4a25      	ldr	r2, [pc, #148]	; (80096e0 <main+0x234>)
 800964a:	6013      	str	r3, [r2, #0]

  gyroCalibrationTaskHandle = osThreadNew(gyroCalibrationTask, NULL, &gyroCalibrationTaskHandle_attributes);
 800964c:	4a25      	ldr	r2, [pc, #148]	; (80096e4 <main+0x238>)
 800964e:	2100      	movs	r1, #0
 8009650:	4825      	ldr	r0, [pc, #148]	; (80096e8 <main+0x23c>)
 8009652:	f007 feda 	bl	801140a <osThreadNew>
 8009656:	4603      	mov	r3, r0
 8009658:	4a24      	ldr	r2, [pc, #144]	; (80096ec <main+0x240>)
 800965a:	6013      	str	r3, [r2, #0]

//  magnCalibrationTaskHandle = osThreadNew(magnCalibrationTask, NULL, &magnCalibrationTaskHandle_attributes);

  /*Suspend the gyro-calibration task*/
  osThreadSuspend(gyroCalibrationTaskHandle);
 800965c:	4b23      	ldr	r3, [pc, #140]	; (80096ec <main+0x240>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f007 ff64 	bl	801152e <osThreadSuspend>

  /* Start scheduler */
  osKernelStart();
 8009666:	f007 fe95 	bl	8011394 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800966a:	e7fe      	b.n	800966a <main+0x1be>
 800966c:	08019e28 	.word	0x08019e28
 8009670:	08019e44 	.word	0x08019e44
 8009674:	08019e60 	.word	0x08019e60
 8009678:	08019e7c 	.word	0x08019e7c
 800967c:	08019dcc 	.word	0x08019dcc
 8009680:	08019df0 	.word	0x08019df0
 8009684:	08019e10 	.word	0x08019e10
 8009688:	0801a07c 	.word	0x0801a07c
 800968c:	20000494 	.word	0x20000494
 8009690:	0801a08c 	.word	0x0801a08c
 8009694:	20000498 	.word	0x20000498
 8009698:	0801a09c 	.word	0x0801a09c
 800969c:	2000049c 	.word	0x2000049c
 80096a0:	0801a0b4 	.word	0x0801a0b4
 80096a4:	200004a0 	.word	0x200004a0
 80096a8:	0801a0cc 	.word	0x0801a0cc
 80096ac:	200004a4 	.word	0x200004a4
 80096b0:	200004a8 	.word	0x200004a8
 80096b4:	08019fa4 	.word	0x08019fa4
 80096b8:	080096f1 	.word	0x080096f1
 80096bc:	2000047c 	.word	0x2000047c
 80096c0:	08019fec 	.word	0x08019fec
 80096c4:	08009719 	.word	0x08009719
 80096c8:	20000480 	.word	0x20000480
 80096cc:	08019fc8 	.word	0x08019fc8
 80096d0:	08009759 	.word	0x08009759
 80096d4:	20000484 	.word	0x20000484
 80096d8:	0801a010 	.word	0x0801a010
 80096dc:	080097e5 	.word	0x080097e5
 80096e0:	20000488 	.word	0x20000488
 80096e4:	0801a034 	.word	0x0801a034
 80096e8:	08009855 	.word	0x08009855
 80096ec:	2000048c 	.word	0x2000048c

080096f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80096f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80096fc:	4805      	ldr	r0, [pc, #20]	; (8009714 <StartDefaultTask+0x24>)
 80096fe:	f002 fcf3 	bl	800c0e8 <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 8009702:	2001      	movs	r0, #1
 8009704:	f001 fcd2 	bl	800b0ac <uart_receive_it>
    osDelay(500);
 8009708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800970c:	f007 ff7e 	bl	801160c <osDelay>
  {
 8009710:	e7f2      	b.n	80096f8 <StartDefaultTask+0x8>
 8009712:	bf00      	nop
 8009714:	48000400 	.word	0x48000400

08009718 <readMemsTask>:
		osDelay(30);
	}
}

void readMemsTask(void *argument)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b090      	sub	sp, #64	; 0x40
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	for(;;)
	{
//		osMutexAcquire(i2cMutex, osWaitForever);
		tick_gyro(&mems_data);
 8009720:	f107 0318 	add.w	r3, r7, #24
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff fb95 	bl	8008e54 <tick_gyro>
		FusionCalcAngle(&mems_data, &euler);
 800972a:	f107 020c 	add.w	r2, r7, #12
 800972e:	f107 0318 	add.w	r3, r7, #24
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f7f7 fe09 	bl	800134c <FusionCalcAngle>
//		osMutexRelease(i2cMutex);
		osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <readMemsTask+0x3c>)
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f107 010c 	add.w	r1, r7, #12
 8009742:	2300      	movs	r3, #0
 8009744:	2200      	movs	r2, #0
 8009746:	f008 f9e7 	bl	8011b18 <osMessageQueuePut>
		osDelay(MEMS_SR);
 800974a:	200a      	movs	r0, #10
 800974c:	f007 ff5e 	bl	801160c <osDelay>
	{
 8009750:	e7e6      	b.n	8009720 <readMemsTask+0x8>
 8009752:	bf00      	nop
 8009754:	200004a0 	.word	0x200004a0

08009758 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b094      	sub	sp, #80	; 0x50
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8009760:	2300      	movs	r3, #0
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 800976e:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <printOutTask+0x80>)
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	f107 0118 	add.w	r1, r7, #24
 8009776:	2305      	movs	r3, #5
 8009778:	2200      	movs	r2, #0
 800977a:	f008 fa2d 	bl	8011bd8 <osMessageQueueGet>
 800977e:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8009780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d123      	bne.n	80097ce <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	4618      	mov	r0, r3
 800978a:	f7f6 fef5 	bl	8000578 <__aeabi_f2d>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	f107 000c 	add.w	r0, r7, #12
 8009796:	4911      	ldr	r1, [pc, #68]	; (80097dc <printOutTask+0x84>)
 8009798:	f00c fd0c 	bl	80161b4 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 800979c:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <printOutTask+0x88>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f04f 31ff 	mov.w	r1, #4294967295
 80097a4:	4618      	mov	r0, r3
 80097a6:	f008 f8bb 	bl	8011920 <osMutexAcquire>
			uart_write_debug(text,50);
 80097aa:	f107 030c 	add.w	r3, r7, #12
 80097ae:	2132      	movs	r1, #50	; 0x32
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 fca3 	bl	800b0fc <uart_write_debug>
			osMutexRelease(debugUartMutex);
 80097b6:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <printOutTask+0x88>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f008 f8fb 	bl	80119b6 <osMutexRelease>
			memset(text,0,sizeof(text));
 80097c0:	f107 030c 	add.w	r3, r7, #12
 80097c4:	220a      	movs	r2, #10
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f00c fd56 	bl	801627a <memset>
		}
		osDelay(70);
 80097ce:	2046      	movs	r0, #70	; 0x46
 80097d0:	f007 ff1c 	bl	801160c <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 80097d4:	e7cb      	b.n	800976e <printOutTask+0x16>
 80097d6:	bf00      	nop
 80097d8:	200004a0 	.word	0x200004a0
 80097dc:	08019e98 	.word	0x08019e98
 80097e0:	20000494 	.word	0x20000494

080097e4 <readMessageTask>:
//		osMutexRelease(debugUartMutex);
		osDelay(1700);
	}
}

void readMessageTask(void *argument){
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08e      	sub	sp, #56	; 0x38
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint32_t ack_flag;
	uint8_t message_buffer[RB_SIZE] = {0};
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]
 80097f0:	f107 030c 	add.w	r3, r7, #12
 80097f4:	2224      	movs	r2, #36	; 0x24
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f00c fd3e 	bl	801627a <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <readMessageTask+0x68>)
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	f107 0108 	add.w	r1, r7, #8
 8009806:	f04f 33ff 	mov.w	r3, #4294967295
 800980a:	2200      	movs	r2, #0
 800980c:	f008 f9e4 	bl	8011bd8 <osMessageQueueGet>
 8009810:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 8009812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009814:	2b00      	cmp	r3, #0
 8009816:	d114      	bne.n	8009842 <readMessageTask+0x5e>
			tick_Handler(message_buffer);
 8009818:	f107 0308 	add.w	r3, r7, #8
 800981c:	4618      	mov	r0, r3
 800981e:	f000 faf9 	bl	8009e14 <tick_Handler>
			ack_flag = osEventFlagsWait(ack_rcvd, ACK_FLAG, osFlagsWaitAny, 150);
 8009822:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <readMessageTask+0x6c>)
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	2396      	movs	r3, #150	; 0x96
 8009828:	2200      	movs	r2, #0
 800982a:	2101      	movs	r1, #1
 800982c:	f007 ff8c 	bl	8011748 <osEventFlagsWait>
 8009830:	6338      	str	r0, [r7, #48]	; 0x30
			if (ack_flag != 1){
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	2b01      	cmp	r3, #1
 8009836:	d004      	beq.n	8009842 <readMessageTask+0x5e>
				tick_Handler(message_buffer);
 8009838:	f107 0308 	add.w	r3, r7, #8
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fae9 	bl	8009e14 <tick_Handler>
			}
		}
		osDelay(200);
 8009842:	20c8      	movs	r0, #200	; 0xc8
 8009844:	f007 fee2 	bl	801160c <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8009848:	e7d9      	b.n	80097fe <readMessageTask+0x1a>
 800984a:	bf00      	nop
 800984c:	200004a4 	.word	0x200004a4
 8009850:	200004a8 	.word	0x200004a8

08009854 <gyroCalibrationTask>:
	}
}

void gyroCalibrationTask(void *argument){
 8009854:	b580      	push	{r7, lr}
 8009856:	b08c      	sub	sp, #48	; 0x30
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	osThreadSuspend(readMemsTaskHandle);
 800985c:	4b17      	ldr	r3, [pc, #92]	; (80098bc <gyroCalibrationTask+0x68>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f007 fe64 	bl	801152e <osThreadSuspend>
	osThreadSuspend(printOutTaskHandle);
 8009866:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <gyroCalibrationTask+0x6c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4618      	mov	r0, r3
 800986c:	f007 fe5f 	bl	801152e <osThreadSuspend>
	osDelay(100);
 8009870:	2064      	movs	r0, #100	; 0x64
 8009872:	f007 fecb 	bl	801160c <osDelay>
	uart_write_debug("Gyro Calibration: Hold the device still\r\n", 50);
 8009876:	2132      	movs	r1, #50	; 0x32
 8009878:	4812      	ldr	r0, [pc, #72]	; (80098c4 <gyroCalibrationTask+0x70>)
 800987a:	f001 fc3f 	bl	800b0fc <uart_write_debug>
	for(;;){
		if (gyro_offset_calculation(&mems_data) == 0){
 800987e:	f107 0308 	add.w	r3, r7, #8
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fd50 	bl	8009328 <gyro_offset_calculation>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d112      	bne.n	80098b4 <gyroCalibrationTask+0x60>
			uart_write_debug("Gyro Calibration: Finished!\r\n", 50);
 800988e:	2132      	movs	r1, #50	; 0x32
 8009890:	480d      	ldr	r0, [pc, #52]	; (80098c8 <gyroCalibrationTask+0x74>)
 8009892:	f001 fc33 	bl	800b0fc <uart_write_debug>
			osThreadResume(readMemsTaskHandle);
 8009896:	4b09      	ldr	r3, [pc, #36]	; (80098bc <gyroCalibrationTask+0x68>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f007 fe68 	bl	8011570 <osThreadResume>
			osThreadResume(printOutTaskHandle);
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <gyroCalibrationTask+0x6c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f007 fe63 	bl	8011570 <osThreadResume>
			osThreadSuspend(gyroCalibrationTaskHandle);
 80098aa:	4b08      	ldr	r3, [pc, #32]	; (80098cc <gyroCalibrationTask+0x78>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f007 fe3d 	bl	801152e <osThreadSuspend>
		}
		osDelay(10);
 80098b4:	200a      	movs	r0, #10
 80098b6:	f007 fea9 	bl	801160c <osDelay>
		if (gyro_offset_calculation(&mems_data) == 0){
 80098ba:	e7e0      	b.n	800987e <gyroCalibrationTask+0x2a>
 80098bc:	20000480 	.word	0x20000480
 80098c0:	20000484 	.word	0x20000484
 80098c4:	08019ea0 	.word	0x08019ea0
 80098c8:	08019ecc 	.word	0x08019ecc
 80098cc:	2000048c 	.word	0x2000048c

080098d0 <magnCalibrationTask>:
	}
}

void magnCalibrationTask(void *argument){
 80098d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d2:	f5ad 5d3d 	sub.w	sp, sp, #12096	; 0x2f40
 80098d6:	b087      	sub	sp, #28
 80098d8:	af06      	add	r7, sp, #24
 80098da:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 80098de:	f6a3 733c 	subw	r3, r3, #3900	; 0xf3c
 80098e2:	6018      	str	r0, [r3, #0]
	float mag_samples[3*MAGN_CALIB_SAMPLES];
	FusionVector hardiron;
	FusionMatrix softiron;
	mems_data_t mems_data;
	osThreadSuspend(readMemsTaskHandle);
 80098e4:	4b2e      	ldr	r3, [pc, #184]	; (80099a0 <magnCalibrationTask+0xd0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f007 fe20 	bl	801152e <osThreadSuspend>
	osThreadSuspend(printOutTaskHandle);
 80098ee:	4b2d      	ldr	r3, [pc, #180]	; (80099a4 <magnCalibrationTask+0xd4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f007 fe1b 	bl	801152e <osThreadSuspend>
	uart_write_debug("Magnetometer Calibration: Rotate the device multiple times on each axis\r\n", 100);
 80098f8:	2164      	movs	r1, #100	; 0x64
 80098fa:	482b      	ldr	r0, [pc, #172]	; (80099a8 <magnCalibrationTask+0xd8>)
 80098fc:	f001 fbfe 	bl	800b0fc <uart_write_debug>
	for(;;){
		if (magneto_sample(&mems_data, mag_samples) == 0){
 8009900:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009904:	3a20      	subs	r2, #32
 8009906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800990a:	3b38      	subs	r3, #56	; 0x38
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fd8c 	bl	800942c <magneto_sample>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d13e      	bne.n	8009998 <magnCalibrationTask+0xc8>
			magneto_calculate(mag_samples, MAGN_CALIB_SAMPLES, &hardiron, &softiron);
 800991a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800991e:	3b10      	subs	r3, #16
 8009920:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009924:	3a2c      	subs	r2, #44	; 0x2c
 8009926:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800992a:	3820      	subs	r0, #32
 800992c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009930:	f7f9 fd80 	bl	8003434 <magneto_calculate>
			setMagnCoeff(hardiron, softiron);
 8009934:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8009938:	f5a3 6671 	sub.w	r6, r3, #3856	; 0xf10
 800993c:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8009940:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 8009944:	edd3 6a00 	vldr	s13, [r3]
 8009948:	ed93 7a01 	vldr	s14, [r3, #4]
 800994c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009950:	466d      	mov	r5, sp
 8009952:	f106 0410 	add.w	r4, r6, #16
 8009956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009962:	eeb0 0a66 	vmov.f32	s0, s13
 8009966:	eef0 0a47 	vmov.f32	s1, s14
 800996a:	eeb0 1a67 	vmov.f32	s2, s15
 800996e:	f7f7 fc55 	bl	800121c <setMagnCoeff>
			uart_write_debug("Magnetometer Calibration: Finished!\r\n", 50);
 8009972:	2132      	movs	r1, #50	; 0x32
 8009974:	480d      	ldr	r0, [pc, #52]	; (80099ac <magnCalibrationTask+0xdc>)
 8009976:	f001 fbc1 	bl	800b0fc <uart_write_debug>
			osThreadResume(readMemsTaskHandle);
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <magnCalibrationTask+0xd0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f007 fdf6 	bl	8011570 <osThreadResume>
			osThreadResume(printOutTaskHandle);
 8009984:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <magnCalibrationTask+0xd4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f007 fdf1 	bl	8011570 <osThreadResume>
			osThreadTerminate(magnCalibrationTaskHandle);
 800998e:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <magnCalibrationTask+0xe0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f007 fe0d 	bl	80115b2 <osThreadTerminate>
		}
		osDelay(50);
 8009998:	2032      	movs	r0, #50	; 0x32
 800999a:	f007 fe37 	bl	801160c <osDelay>
		if (magneto_sample(&mems_data, mag_samples) == 0){
 800999e:	e7af      	b.n	8009900 <magnCalibrationTask+0x30>
 80099a0:	20000480 	.word	0x20000480
 80099a4:	20000484 	.word	0x20000484
 80099a8:	08019eec 	.word	0x08019eec
 80099ac:	08019f38 	.word	0x08019f38
 80099b0:	20000490 	.word	0x20000490

080099b4 <magnCalStart>:
	}
}

void magnCalStart(){
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
	magnCalibrationTaskHandle = osThreadNew(magnCalibrationTask, NULL, &magnCalibrationTaskHandle_attributes);
 80099b8:	4a04      	ldr	r2, [pc, #16]	; (80099cc <magnCalStart+0x18>)
 80099ba:	2100      	movs	r1, #0
 80099bc:	4804      	ldr	r0, [pc, #16]	; (80099d0 <magnCalStart+0x1c>)
 80099be:	f007 fd24 	bl	801140a <osThreadNew>
 80099c2:	4603      	mov	r3, r0
 80099c4:	4a03      	ldr	r2, [pc, #12]	; (80099d4 <magnCalStart+0x20>)
 80099c6:	6013      	str	r3, [r2, #0]
}
 80099c8:	bf00      	nop
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	0801a058 	.word	0x0801a058
 80099d0:	080098d1 	.word	0x080098d1
 80099d4:	20000490 	.word	0x20000490

080099d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b096      	sub	sp, #88	; 0x58
 80099dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80099de:	f107 0314 	add.w	r3, r7, #20
 80099e2:	2244      	movs	r2, #68	; 0x44
 80099e4:	2100      	movs	r1, #0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f00c fc47 	bl	801627a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80099ec:	463b      	mov	r3, r7
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	605a      	str	r2, [r3, #4]
 80099f4:	609a      	str	r2, [r3, #8]
 80099f6:	60da      	str	r2, [r3, #12]
 80099f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80099fa:	2000      	movs	r0, #0
 80099fc:	f003 fc4a 	bl	800d294 <HAL_PWREx_ControlVoltageScaling>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8009a06:	f000 f9f5 	bl	8009df4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8009a0a:	2310      	movs	r3, #16
 8009a0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009a16:	2360      	movs	r3, #96	; 0x60
 8009a18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009a22:	2301      	movs	r3, #1
 8009a24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8009a26:	233c      	movs	r3, #60	; 0x3c
 8009a28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009a2e:	2302      	movs	r3, #2
 8009a30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009a32:	2302      	movs	r3, #2
 8009a34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009a36:	f107 0314 	add.w	r3, r7, #20
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f003 fcce 	bl	800d3dc <HAL_RCC_OscConfig>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8009a46:	f000 f9d5 	bl	8009df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009a4a:	230f      	movs	r3, #15
 8009a4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009a5e:	463b      	mov	r3, r7
 8009a60:	2105      	movs	r1, #5
 8009a62:	4618      	mov	r0, r3
 8009a64:	f004 f8d4 	bl	800dc10 <HAL_RCC_ClockConfig>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8009a6e:	f000 f9c1 	bl	8009df4 <Error_Handler>
  }
}
 8009a72:	bf00      	nop
 8009a74:	3758      	adds	r7, #88	; 0x58
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a82:	f107 0314 	add.w	r3, r7, #20
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	605a      	str	r2, [r3, #4]
 8009a8c:	609a      	str	r2, [r3, #8]
 8009a8e:	60da      	str	r2, [r3, #12]
 8009a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a92:	4bbb      	ldr	r3, [pc, #748]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a96:	4aba      	ldr	r2, [pc, #744]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009a98:	f043 0310 	orr.w	r3, r3, #16
 8009a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a9e:	4bb8      	ldr	r3, [pc, #736]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009aaa:	4bb5      	ldr	r3, [pc, #724]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aae:	4ab4      	ldr	r2, [pc, #720]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009ab0:	f043 0304 	orr.w	r3, r3, #4
 8009ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ab6:	4bb2      	ldr	r3, [pc, #712]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aba:	f003 0304 	and.w	r3, r3, #4
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac2:	4baf      	ldr	r3, [pc, #700]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac6:	4aae      	ldr	r2, [pc, #696]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009ac8:	f043 0301 	orr.w	r3, r3, #1
 8009acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ace:	4bac      	ldr	r3, [pc, #688]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	60bb      	str	r3, [r7, #8]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ada:	4ba9      	ldr	r3, [pc, #676]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ade:	4aa8      	ldr	r2, [pc, #672]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009ae0:	f043 0302 	orr.w	r3, r3, #2
 8009ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ae6:	4ba6      	ldr	r3, [pc, #664]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009af2:	4ba3      	ldr	r3, [pc, #652]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009af6:	4aa2      	ldr	r2, [pc, #648]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009af8:	f043 0308 	orr.w	r3, r3, #8
 8009afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009afe:	4ba0      	ldr	r3, [pc, #640]	; (8009d80 <MX_GPIO_Init+0x304>)
 8009b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f240 1105 	movw	r1, #261	; 0x105
 8009b10:	489c      	ldr	r0, [pc, #624]	; (8009d84 <MX_GPIO_Init+0x308>)
 8009b12:	f002 fad1 	bl	800c0b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8009b16:	2200      	movs	r2, #0
 8009b18:	f248 111c 	movw	r1, #33052	; 0x811c
 8009b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b20:	f002 faca 	bl	800c0b8 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8009b24:	2200      	movs	r2, #0
 8009b26:	f24f 0134 	movw	r1, #61492	; 0xf034
 8009b2a:	4897      	ldr	r0, [pc, #604]	; (8009d88 <MX_GPIO_Init+0x30c>)
 8009b2c:	f002 fac4 	bl	800c0b8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8009b30:	2200      	movs	r2, #0
 8009b32:	f242 0183 	movw	r1, #8323	; 0x2083
 8009b36:	4895      	ldr	r0, [pc, #596]	; (8009d8c <MX_GPIO_Init+0x310>)
 8009b38:	f002 fabe 	bl	800c0b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b42:	4893      	ldr	r0, [pc, #588]	; (8009d90 <MX_GPIO_Init+0x314>)
 8009b44:	f002 fab8 	bl	800c0b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8009b48:	f240 1305 	movw	r3, #261	; 0x105
 8009b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b56:	2300      	movs	r3, #0
 8009b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b5a:	f107 0314 	add.w	r3, r7, #20
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4888      	ldr	r0, [pc, #544]	; (8009d84 <MX_GPIO_Init+0x308>)
 8009b62:	f002 f917 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8009b66:	237a      	movs	r3, #122	; 0x7a
 8009b68:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009b6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b74:	f107 0314 	add.w	r3, r7, #20
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4882      	ldr	r0, [pc, #520]	; (8009d84 <MX_GPIO_Init+0x308>)
 8009b7c:	f002 f90a 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8009b80:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8009b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009b86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b90:	f107 0314 	add.w	r3, r7, #20
 8009b94:	4619      	mov	r1, r3
 8009b96:	487e      	ldr	r0, [pc, #504]	; (8009d90 <MX_GPIO_Init+0x314>)
 8009b98:	f002 f8fc 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8009b9c:	233f      	movs	r3, #63	; 0x3f
 8009b9e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8009ba0:	230b      	movs	r3, #11
 8009ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ba8:	f107 0314 	add.w	r3, r7, #20
 8009bac:	4619      	mov	r1, r3
 8009bae:	4878      	ldr	r0, [pc, #480]	; (8009d90 <MX_GPIO_Init+0x314>)
 8009bb0:	f002 f8f0 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bc8:	f107 0314 	add.w	r3, r7, #20
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bd2:	f002 f8df 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8009bd6:	f248 131c 	movw	r3, #33052	; 0x811c
 8009bda:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009be4:	2300      	movs	r3, #0
 8009be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009be8:	f107 0314 	add.w	r3, r7, #20
 8009bec:	4619      	mov	r1, r3
 8009bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bf2:	f002 f8cf 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8009bf6:	23e0      	movs	r3, #224	; 0xe0
 8009bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c02:	2303      	movs	r3, #3
 8009c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009c06:	2305      	movs	r3, #5
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c0a:	f107 0314 	add.w	r3, r7, #20
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c14:	f002 f8be 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009c1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8009c26:	f107 0314 	add.w	r3, r7, #20
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4856      	ldr	r0, [pc, #344]	; (8009d88 <MX_GPIO_Init+0x30c>)
 8009c2e:	f002 f8b1 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8009c32:	2302      	movs	r3, #2
 8009c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c36:	2302      	movs	r3, #2
 8009c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009c42:	2302      	movs	r3, #2
 8009c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8009c46:	f107 0314 	add.w	r3, r7, #20
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	484e      	ldr	r0, [pc, #312]	; (8009d88 <MX_GPIO_Init+0x30c>)
 8009c4e:	f002 f8a1 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8009c52:	f24f 0334 	movw	r3, #61492	; 0xf034
 8009c56:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c60:	2300      	movs	r3, #0
 8009c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c64:	f107 0314 	add.w	r3, r7, #20
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4847      	ldr	r0, [pc, #284]	; (8009d88 <MX_GPIO_Init+0x30c>)
 8009c6c:	f002 f892 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8009c70:	f44f 7320 	mov.w	r3, #640	; 0x280
 8009c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c76:	2302      	movs	r3, #2
 8009c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8009c82:	2306      	movs	r3, #6
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009c86:	f107 0314 	add.w	r3, r7, #20
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	483d      	ldr	r0, [pc, #244]	; (8009d84 <MX_GPIO_Init+0x308>)
 8009c8e:	f002 f881 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8009c92:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8009c96:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8009ca4:	230a      	movs	r3, #10
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009ca8:	f107 0314 	add.w	r3, r7, #20
 8009cac:	4619      	mov	r1, r3
 8009cae:	4835      	ldr	r0, [pc, #212]	; (8009d84 <MX_GPIO_Init+0x308>)
 8009cb0:	f002 f870 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8009cb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009cc6:	2307      	movs	r3, #7
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009cca:	f107 0314 	add.w	r3, r7, #20
 8009cce:	4619      	mov	r1, r3
 8009cd0:	482e      	ldr	r0, [pc, #184]	; (8009d8c <MX_GPIO_Init+0x310>)
 8009cd2:	f002 f85f 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8009cd6:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8009cda:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009cdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ce6:	f107 0314 	add.w	r3, r7, #20
 8009cea:	4619      	mov	r1, r3
 8009cec:	4827      	ldr	r0, [pc, #156]	; (8009d8c <MX_GPIO_Init+0x310>)
 8009cee:	f002 f851 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8009cf2:	f242 0383 	movw	r3, #8323	; 0x2083
 8009cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d00:	2300      	movs	r3, #0
 8009d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009d04:	f107 0314 	add.w	r3, r7, #20
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4820      	ldr	r0, [pc, #128]	; (8009d8c <MX_GPIO_Init+0x310>)
 8009d0c:	f002 f842 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8009d10:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d16:	2301      	movs	r3, #1
 8009d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d22:	f107 0314 	add.w	r3, r7, #20
 8009d26:	4619      	mov	r1, r3
 8009d28:	4819      	ldr	r0, [pc, #100]	; (8009d90 <MX_GPIO_Init+0x314>)
 8009d2a:	f002 f833 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8009d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009d3c:	f107 0314 	add.w	r3, r7, #20
 8009d40:	4619      	mov	r1, r3
 8009d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d46:	f002 f825 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8009d4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d50:	2302      	movs	r3, #2
 8009d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d54:	2300      	movs	r3, #0
 8009d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009d5c:	2306      	movs	r3, #6
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d60:	f107 0314 	add.w	r3, r7, #20
 8009d64:	4619      	mov	r1, r3
 8009d66:	480a      	ldr	r0, [pc, #40]	; (8009d90 <MX_GPIO_Init+0x314>)
 8009d68:	f002 f814 	bl	800bd94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8009d6c:	2378      	movs	r3, #120	; 0x78
 8009d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d70:	2302      	movs	r3, #2
 8009d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	623b      	str	r3, [r7, #32]
 8009d7c:	e00a      	b.n	8009d94 <MX_GPIO_Init+0x318>
 8009d7e:	bf00      	nop
 8009d80:	40021000 	.word	0x40021000
 8009d84:	48001000 	.word	0x48001000
 8009d88:	48000400 	.word	0x48000400
 8009d8c:	48000c00 	.word	0x48000c00
 8009d90:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009d94:	2307      	movs	r3, #7
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009d98:	f107 0314 	add.w	r3, r7, #20
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	480b      	ldr	r0, [pc, #44]	; (8009dcc <MX_GPIO_Init+0x350>)
 8009da0:	f001 fff8 	bl	800bd94 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8009da4:	2200      	movs	r2, #0
 8009da6:	2105      	movs	r1, #5
 8009da8:	2017      	movs	r0, #23
 8009daa:	f001 fc4d 	bl	800b648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009dae:	2017      	movs	r0, #23
 8009db0:	f001 fc66 	bl	800b680 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009db4:	2200      	movs	r2, #0
 8009db6:	2105      	movs	r1, #5
 8009db8:	2028      	movs	r0, #40	; 0x28
 8009dba:	f001 fc45 	bl	800b648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009dbe:	2028      	movs	r0, #40	; 0x28
 8009dc0:	f001 fc5e 	bl	800b680 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009dc4:	bf00      	nop
 8009dc6:	3728      	adds	r7, #40	; 0x28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	48000c00 	.word	0x48000c00

08009dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a04      	ldr	r2, [pc, #16]	; (8009df0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d101      	bne.n	8009de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009de2:	f001 fb35 	bl	800b450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	40012c00 	.word	0x40012c00

08009df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009df8:	b672      	cpsid	i
}
 8009dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8009dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e00:	4803      	ldr	r0, [pc, #12]	; (8009e10 <Error_Handler+0x1c>)
 8009e02:	f002 f971 	bl	800c0e8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8009e06:	2064      	movs	r0, #100	; 0x64
 8009e08:	f001 fb42 	bl	800b490 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8009e0c:	e7f6      	b.n	8009dfc <Error_Handler+0x8>
 8009e0e:	bf00      	nop
 8009e10:	48000400 	.word	0x48000400

08009e14 <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 8009e20:	f000 fbb2 	bl	800a588 <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 8009e24:	2101      	movs	r1, #1
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa9a 	bl	800a360 <parseMessage>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d102      	bne.n	8009e38 <tick_Handler+0x24>
		handler(UART_NYX);
 8009e32:	2001      	movs	r0, #1
 8009e34:	f000 fb1e 	bl	800a474 <handler>
	}
}
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8009e4a:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <sendNack+0x64>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b1b      	cmp	r3, #27
 8009e50:	d007      	beq.n	8009e62 <sendNack+0x22>
 8009e52:	4b14      	ldr	r3, [pc, #80]	; (8009ea4 <sendNack+0x64>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d003      	beq.n	8009e62 <sendNack+0x22>
 8009e5a:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <sendNack+0x64>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d10f      	bne.n	8009e82 <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 8009e62:	2315      	movs	r3, #21
 8009e64:	733b      	strb	r3, [r7, #12]
 8009e66:	231b      	movs	r3, #27
 8009e68:	737b      	strb	r3, [r7, #13]
 8009e6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ea4 <sendNack+0x64>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8009e70:	79fa      	ldrb	r2, [r7, #7]
 8009e72:	f107 000c 	add.w	r0, r7, #12
 8009e76:	2305      	movs	r3, #5
 8009e78:	2103      	movs	r1, #3
 8009e7a:	f001 f955 	bl	800b128 <uart_write>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	e00c      	b.n	8009e9c <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 8009e82:	2315      	movs	r3, #21
 8009e84:	723b      	strb	r3, [r7, #8]
 8009e86:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <sendNack+0x64>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8009e8c:	79fa      	ldrb	r2, [r7, #7]
 8009e8e:	f107 0008 	add.w	r0, r7, #8
 8009e92:	2305      	movs	r3, #5
 8009e94:	2102      	movs	r1, #2
 8009e96:	f001 f947 	bl	800b128 <uart_write>
 8009e9a:	4603      	mov	r3, r0
    }
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	200004ac 	.word	0x200004ac

08009ea8 <sendAck>:

uint8_t sendAck(UART_select device){
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8009eb2:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <sendAck+0x64>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2b1b      	cmp	r3, #27
 8009eb8:	d007      	beq.n	8009eca <sendAck+0x22>
 8009eba:	4b14      	ldr	r3, [pc, #80]	; (8009f0c <sendAck+0x64>)
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d003      	beq.n	8009eca <sendAck+0x22>
 8009ec2:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <sendAck+0x64>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d10f      	bne.n	8009eea <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 8009eca:	2306      	movs	r3, #6
 8009ecc:	733b      	strb	r3, [r7, #12]
 8009ece:	231b      	movs	r3, #27
 8009ed0:	737b      	strb	r3, [r7, #13]
 8009ed2:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <sendAck+0x64>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8009ed8:	79fa      	ldrb	r2, [r7, #7]
 8009eda:	f107 000c 	add.w	r0, r7, #12
 8009ede:	2305      	movs	r3, #5
 8009ee0:	2103      	movs	r1, #3
 8009ee2:	f001 f921 	bl	800b128 <uart_write>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	e00c      	b.n	8009f04 <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 8009eea:	2306      	movs	r3, #6
 8009eec:	723b      	strb	r3, [r7, #8]
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <sendAck+0x64>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8009ef4:	79fa      	ldrb	r2, [r7, #7]
 8009ef6:	f107 0008 	add.w	r0, r7, #8
 8009efa:	2305      	movs	r3, #5
 8009efc:	2102      	movs	r1, #2
 8009efe:	f001 f913 	bl	800b128 <uart_write>
 8009f02:	4603      	mov	r3, r0
    }
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	200004ac 	.word	0x200004ac

08009f10 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8009f20:	2300      	movs	r3, #0
 8009f22:	73bb      	strb	r3, [r7, #14]
 8009f24:	e01e      	b.n	8009f64 <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d00b      	beq.n	8009f4a <calcDataSize+0x3a>
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	4413      	add	r3, r2
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d005      	beq.n	8009f4a <calcDataSize+0x3a>
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	4413      	add	r3, r2
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b1b      	cmp	r3, #27
 8009f48:	d106      	bne.n	8009f58 <calcDataSize+0x48>
           j++;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
           j++;
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	3301      	adds	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]
 8009f56:	e002      	b.n	8009f5e <calcDataSize+0x4e>
       }
       else j++;
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	3301      	adds	r3, #1
 8009f62:	73bb      	strb	r3, [r7, #14]
 8009f64:	7bba      	ldrb	r2, [r7, #14]
 8009f66:	78fb      	ldrb	r3, [r7, #3]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d3dc      	bcc.n	8009f26 <calcDataSize+0x16>
    }
    return j;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
	...

08009f7c <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08c      	sub	sp, #48	; 0x30
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	4608      	mov	r0, r1
 8009f86:	4611      	mov	r1, r2
 8009f88:	461a      	mov	r2, r3
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	70fb      	strb	r3, [r7, #3]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	70bb      	strb	r3, [r7, #2]
 8009f92:	4613      	mov	r3, r2
 8009f94:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff ffb5 	bl	8009f10 <calcDataSize>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	4bc1      	ldr	r3, [pc, #772]	; (800a2b8 <transmitMessage+0x33c>)
 8009fb2:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 8009fb4:	4bc0      	ldr	r3, [pc, #768]	; (800a2b8 <transmitMessage+0x33c>)
 8009fb6:	88db      	ldrh	r3, [r3, #6]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	48bf      	ldr	r0, [pc, #764]	; (800a2bc <transmitMessage+0x340>)
 8009fbe:	f00c f9ec 	bl	801639a <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 8009fc2:	4bbd      	ldr	r3, [pc, #756]	; (800a2b8 <transmitMessage+0x33c>)
 8009fc4:	22fe      	movs	r2, #254	; 0xfe
 8009fc6:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 8009fc8:	4bbb      	ldr	r3, [pc, #748]	; (800a2b8 <transmitMessage+0x33c>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 8009fce:	4bbc      	ldr	r3, [pc, #752]	; (800a2c0 <transmitMessage+0x344>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	2bff      	cmp	r3, #255	; 0xff
 8009fd4:	d103      	bne.n	8009fde <transmitMessage+0x62>
        TOKEN=0;
 8009fd6:	4bba      	ldr	r3, [pc, #744]	; (800a2c0 <transmitMessage+0x344>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	701a      	strb	r2, [r3, #0]
 8009fdc:	e005      	b.n	8009fea <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 8009fde:	4bb8      	ldr	r3, [pc, #736]	; (800a2c0 <transmitMessage+0x344>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	4bb6      	ldr	r3, [pc, #728]	; (800a2c0 <transmitMessage+0x344>)
 8009fe8:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 8009fea:	4bb5      	ldr	r3, [pc, #724]	; (800a2c0 <transmitMessage+0x344>)
 8009fec:	781a      	ldrb	r2, [r3, #0]
 8009fee:	4bb2      	ldr	r3, [pc, #712]	; (800a2b8 <transmitMessage+0x33c>)
 8009ff0:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 8009ff2:	4ab1      	ldr	r2, [pc, #708]	; (800a2b8 <transmitMessage+0x33c>)
 8009ff4:	78bb      	ldrb	r3, [r7, #2]
 8009ff6:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 8009ff8:	4baf      	ldr	r3, [pc, #700]	; (800a2b8 <transmitMessage+0x33c>)
 8009ffa:	221b      	movs	r2, #27
 8009ffc:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 8009ffe:	4bae      	ldr	r3, [pc, #696]	; (800a2b8 <transmitMessage+0x33c>)
 800a000:	2232      	movs	r2, #50	; 0x32
 800a002:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 800a004:	f000 f95e 	bl	800a2c4 <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 800a00e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a012:	3330      	adds	r3, #48	; 0x30
 800a014:	443b      	add	r3, r7
 800a016:	2202      	movs	r2, #2
 800a018:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a01c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a020:	3301      	adds	r3, #1
 800a022:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 800a026:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a02a:	4aa3      	ldr	r2, [pc, #652]	; (800a2b8 <transmitMessage+0x33c>)
 800a02c:	7812      	ldrb	r2, [r2, #0]
 800a02e:	3330      	adds	r3, #48	; 0x30
 800a030:	443b      	add	r3, r7
 800a032:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a036:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a03a:	3301      	adds	r3, #1
 800a03c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 800a040:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a044:	4a9c      	ldr	r2, [pc, #624]	; (800a2b8 <transmitMessage+0x33c>)
 800a046:	7852      	ldrb	r2, [r2, #1]
 800a048:	3330      	adds	r3, #48	; 0x30
 800a04a:	443b      	add	r3, r7
 800a04c:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a050:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a054:	3301      	adds	r3, #1
 800a056:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 800a05a:	4b97      	ldr	r3, [pc, #604]	; (800a2b8 <transmitMessage+0x33c>)
 800a05c:	789b      	ldrb	r3, [r3, #2]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d007      	beq.n	800a072 <transmitMessage+0xf6>
 800a062:	4b95      	ldr	r3, [pc, #596]	; (800a2b8 <transmitMessage+0x33c>)
 800a064:	789b      	ldrb	r3, [r3, #2]
 800a066:	2b03      	cmp	r3, #3
 800a068:	d003      	beq.n	800a072 <transmitMessage+0xf6>
 800a06a:	4b93      	ldr	r3, [pc, #588]	; (800a2b8 <transmitMessage+0x33c>)
 800a06c:	789b      	ldrb	r3, [r3, #2]
 800a06e:	2b1b      	cmp	r3, #27
 800a070:	d119      	bne.n	800a0a6 <transmitMessage+0x12a>
        message[index] = ESC;
 800a072:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a076:	3330      	adds	r3, #48	; 0x30
 800a078:	443b      	add	r3, r7
 800a07a:	221b      	movs	r2, #27
 800a07c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a080:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a084:	3301      	adds	r3, #1
 800a086:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 800a08a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a08e:	4a8a      	ldr	r2, [pc, #552]	; (800a2b8 <transmitMessage+0x33c>)
 800a090:	7892      	ldrb	r2, [r2, #2]
 800a092:	3330      	adds	r3, #48	; 0x30
 800a094:	443b      	add	r3, r7
 800a096:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a09a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a09e:	3301      	adds	r3, #1
 800a0a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a0a4:	e00c      	b.n	800a0c0 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 800a0a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0aa:	4a83      	ldr	r2, [pc, #524]	; (800a2b8 <transmitMessage+0x33c>)
 800a0ac:	7892      	ldrb	r2, [r2, #2]
 800a0ae:	3330      	adds	r3, #48	; 0x30
 800a0b0:	443b      	add	r3, r7
 800a0b2:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a0b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 800a0c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0c4:	4a7c      	ldr	r2, [pc, #496]	; (800a2b8 <transmitMessage+0x33c>)
 800a0c6:	78d2      	ldrb	r2, [r2, #3]
 800a0c8:	3330      	adds	r3, #48	; 0x30
 800a0ca:	443b      	add	r3, r7
 800a0cc:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a0d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 800a0da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0de:	4a76      	ldr	r2, [pc, #472]	; (800a2b8 <transmitMessage+0x33c>)
 800a0e0:	7912      	ldrb	r2, [r2, #4]
 800a0e2:	3330      	adds	r3, #48	; 0x30
 800a0e4:	443b      	add	r3, r7
 800a0e6:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a0ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 800a0f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0f8:	4a6f      	ldr	r2, [pc, #444]	; (800a2b8 <transmitMessage+0x33c>)
 800a0fa:	7952      	ldrb	r2, [r2, #5]
 800a0fc:	3330      	adds	r3, #48	; 0x30
 800a0fe:	443b      	add	r3, r7
 800a100:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a104:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a108:	3301      	adds	r3, #1
 800a10a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 800a10e:	2300      	movs	r3, #0
 800a110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a114:	e046      	b.n	800a1a4 <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 800a116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a11a:	4a67      	ldr	r2, [pc, #412]	; (800a2b8 <transmitMessage+0x33c>)
 800a11c:	4413      	add	r3, r2
 800a11e:	7a1b      	ldrb	r3, [r3, #8]
 800a120:	2b02      	cmp	r3, #2
 800a122:	d00d      	beq.n	800a140 <transmitMessage+0x1c4>
 800a124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a128:	4a63      	ldr	r2, [pc, #396]	; (800a2b8 <transmitMessage+0x33c>)
 800a12a:	4413      	add	r3, r2
 800a12c:	7a1b      	ldrb	r3, [r3, #8]
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d006      	beq.n	800a140 <transmitMessage+0x1c4>
 800a132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a136:	4a60      	ldr	r2, [pc, #384]	; (800a2b8 <transmitMessage+0x33c>)
 800a138:	4413      	add	r3, r2
 800a13a:	7a1b      	ldrb	r3, [r3, #8]
 800a13c:	2b1b      	cmp	r3, #27
 800a13e:	d11c      	bne.n	800a17a <transmitMessage+0x1fe>
            message[index] = ESC;
 800a140:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a144:	3330      	adds	r3, #48	; 0x30
 800a146:	443b      	add	r3, r7
 800a148:	221b      	movs	r2, #27
 800a14a:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 800a14e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a152:	3301      	adds	r3, #1
 800a154:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 800a158:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a15c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a160:	4955      	ldr	r1, [pc, #340]	; (800a2b8 <transmitMessage+0x33c>)
 800a162:	440a      	add	r2, r1
 800a164:	7a12      	ldrb	r2, [r2, #8]
 800a166:	3330      	adds	r3, #48	; 0x30
 800a168:	443b      	add	r3, r7
 800a16a:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 800a16e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a172:	3301      	adds	r3, #1
 800a174:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a178:	e00f      	b.n	800a19a <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 800a17a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a17e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a182:	494d      	ldr	r1, [pc, #308]	; (800a2b8 <transmitMessage+0x33c>)
 800a184:	440a      	add	r2, r1
 800a186:	7a12      	ldrb	r2, [r2, #8]
 800a188:	3330      	adds	r3, #48	; 0x30
 800a18a:	443b      	add	r3, r7
 800a18c:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 800a190:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a194:	3301      	adds	r3, #1
 800a196:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 800a19a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a19e:	3301      	adds	r3, #1
 800a1a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	4b43      	ldr	r3, [pc, #268]	; (800a2b8 <transmitMessage+0x33c>)
 800a1ac:	88db      	ldrh	r3, [r3, #6]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d3b1      	bcc.n	800a116 <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 800a1b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1b6:	4a40      	ldr	r2, [pc, #256]	; (800a2b8 <transmitMessage+0x33c>)
 800a1b8:	7fd2      	ldrb	r2, [r2, #31]
 800a1ba:	3330      	adds	r3, #48	; 0x30
 800a1bc:	443b      	add	r3, r7
 800a1be:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a1c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 800a1cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1d0:	4a39      	ldr	r2, [pc, #228]	; (800a2b8 <transmitMessage+0x33c>)
 800a1d2:	7f92      	ldrb	r2, [r2, #30]
 800a1d4:	3330      	adds	r3, #48	; 0x30
 800a1d6:	443b      	add	r3, r7
 800a1d8:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a1dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 800a1e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1ea:	4a33      	ldr	r2, [pc, #204]	; (800a2b8 <transmitMessage+0x33c>)
 800a1ec:	7f52      	ldrb	r2, [r2, #29]
 800a1ee:	3330      	adds	r3, #48	; 0x30
 800a1f0:	443b      	add	r3, r7
 800a1f2:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800a1f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 800a200:	4b2d      	ldr	r3, [pc, #180]	; (800a2b8 <transmitMessage+0x33c>)
 800a202:	7f1b      	ldrb	r3, [r3, #28]
 800a204:	2b1b      	cmp	r3, #27
 800a206:	d12a      	bne.n	800a25e <transmitMessage+0x2e2>
        message[index] = ESC;
 800a208:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a20c:	3330      	adds	r3, #48	; 0x30
 800a20e:	443b      	add	r3, r7
 800a210:	221b      	movs	r2, #27
 800a212:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a216:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a21a:	3301      	adds	r3, #1
 800a21c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 800a220:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a224:	4a24      	ldr	r2, [pc, #144]	; (800a2b8 <transmitMessage+0x33c>)
 800a226:	7f12      	ldrb	r2, [r2, #28]
 800a228:	3330      	adds	r3, #48	; 0x30
 800a22a:	443b      	add	r3, r7
 800a22c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a230:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a234:	3301      	adds	r3, #1
 800a236:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 800a23a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a23e:	3330      	adds	r3, #48	; 0x30
 800a240:	443b      	add	r3, r7
 800a242:	2203      	movs	r2, #3
 800a244:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a248:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a24c:	3301      	adds	r3, #1
 800a24e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 800a252:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a256:	b29a      	uxth	r2, r3
 800a258:	4b17      	ldr	r3, [pc, #92]	; (800a2b8 <transmitMessage+0x33c>)
 800a25a:	80da      	strh	r2, [r3, #6]
 800a25c:	e01d      	b.n	800a29a <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 800a25e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a262:	4a15      	ldr	r2, [pc, #84]	; (800a2b8 <transmitMessage+0x33c>)
 800a264:	7f12      	ldrb	r2, [r2, #28]
 800a266:	3330      	adds	r3, #48	; 0x30
 800a268:	443b      	add	r3, r7
 800a26a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a26e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a272:	3301      	adds	r3, #1
 800a274:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 800a278:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a27c:	3330      	adds	r3, #48	; 0x30
 800a27e:	443b      	add	r3, r7
 800a280:	2203      	movs	r2, #3
 800a282:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800a286:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a28a:	3301      	adds	r3, #1
 800a28c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 800a290:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a294:	b29a      	uxth	r2, r3
 800a296:	4b08      	ldr	r3, [pc, #32]	; (800a2b8 <transmitMessage+0x33c>)
 800a298:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 800a29a:	4b07      	ldr	r3, [pc, #28]	; (800a2b8 <transmitMessage+0x33c>)
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	b2d9      	uxtb	r1, r3
 800a2a0:	787a      	ldrb	r2, [r7, #1]
 800a2a2:	f107 0008 	add.w	r0, r7, #8
 800a2a6:	230a      	movs	r3, #10
 800a2a8:	f000 ff3e 	bl	800b128 <uart_write>
    return 1;
 800a2ac:	2301      	movs	r3, #1
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3730      	adds	r7, #48	; 0x30
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	200004b0 	.word	0x200004b0
 800a2bc:	200004b8 	.word	0x200004b8
 800a2c0:	200004ac 	.word	0x200004ac

0800a2c4 <calcChecksum>:

static void calcChecksum(void){
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 800a2ca:	4b24      	ldr	r3, [pc, #144]	; (800a35c <calcChecksum+0x98>)
 800a2cc:	781a      	ldrb	r2, [r3, #0]
 800a2ce:	4b23      	ldr	r3, [pc, #140]	; (800a35c <calcChecksum+0x98>)
 800a2d0:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 800a2d2:	4b22      	ldr	r3, [pc, #136]	; (800a35c <calcChecksum+0x98>)
 800a2d4:	7f1a      	ldrb	r2, [r3, #28]
 800a2d6:	4b21      	ldr	r3, [pc, #132]	; (800a35c <calcChecksum+0x98>)
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	4053      	eors	r3, r2
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	4b1f      	ldr	r3, [pc, #124]	; (800a35c <calcChecksum+0x98>)
 800a2e0:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 800a2e2:	4b1e      	ldr	r3, [pc, #120]	; (800a35c <calcChecksum+0x98>)
 800a2e4:	7f1a      	ldrb	r2, [r3, #28]
 800a2e6:	4b1d      	ldr	r3, [pc, #116]	; (800a35c <calcChecksum+0x98>)
 800a2e8:	789b      	ldrb	r3, [r3, #2]
 800a2ea:	4053      	eors	r3, r2
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	4b1b      	ldr	r3, [pc, #108]	; (800a35c <calcChecksum+0x98>)
 800a2f0:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 800a2f2:	4b1a      	ldr	r3, [pc, #104]	; (800a35c <calcChecksum+0x98>)
 800a2f4:	7f1a      	ldrb	r2, [r3, #28]
 800a2f6:	4b19      	ldr	r3, [pc, #100]	; (800a35c <calcChecksum+0x98>)
 800a2f8:	78db      	ldrb	r3, [r3, #3]
 800a2fa:	4053      	eors	r3, r2
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	4b17      	ldr	r3, [pc, #92]	; (800a35c <calcChecksum+0x98>)
 800a300:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 800a302:	4b16      	ldr	r3, [pc, #88]	; (800a35c <calcChecksum+0x98>)
 800a304:	7f1a      	ldrb	r2, [r3, #28]
 800a306:	4b15      	ldr	r3, [pc, #84]	; (800a35c <calcChecksum+0x98>)
 800a308:	791b      	ldrb	r3, [r3, #4]
 800a30a:	4053      	eors	r3, r2
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <calcChecksum+0x98>)
 800a310:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <calcChecksum+0x98>)
 800a314:	7f1a      	ldrb	r2, [r3, #28]
 800a316:	4b11      	ldr	r3, [pc, #68]	; (800a35c <calcChecksum+0x98>)
 800a318:	795b      	ldrb	r3, [r3, #5]
 800a31a:	4053      	eors	r3, r2
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <calcChecksum+0x98>)
 800a320:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 800a322:	2300      	movs	r3, #0
 800a324:	71fb      	strb	r3, [r7, #7]
 800a326:	e00c      	b.n	800a342 <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 800a328:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <calcChecksum+0x98>)
 800a32a:	7f1a      	ldrb	r2, [r3, #28]
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	490b      	ldr	r1, [pc, #44]	; (800a35c <calcChecksum+0x98>)
 800a330:	440b      	add	r3, r1
 800a332:	7a1b      	ldrb	r3, [r3, #8]
 800a334:	4053      	eors	r3, r2
 800a336:	b2da      	uxtb	r2, r3
 800a338:	4b08      	ldr	r3, [pc, #32]	; (800a35c <calcChecksum+0x98>)
 800a33a:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	3301      	adds	r3, #1
 800a340:	71fb      	strb	r3, [r7, #7]
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	b29a      	uxth	r2, r3
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <calcChecksum+0x98>)
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d3ec      	bcc.n	800a328 <calcChecksum+0x64>
    }
}
 800a34e:	bf00      	nop
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	200004b0 	.word	0x200004b0

0800a360 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 800a376:	7b7b      	ldrb	r3, [r7, #13]
 800a378:	2b0a      	cmp	r3, #10
 800a37a:	d805      	bhi.n	800a388 <parseMessage+0x28>
        sendNack(device);
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff fd5e 	bl	8009e40 <sendNack>
        return 1;
 800a384:	2301      	movs	r3, #1
 800a386:	e06d      	b.n	800a464 <parseMessage+0x104>
    }
    msg.len = len-10;
 800a388:	7b7b      	ldrb	r3, [r7, #13]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	3b0a      	subs	r3, #10
 800a38e:	b29a      	uxth	r2, r3
 800a390:	4b36      	ldr	r3, [pc, #216]	; (800a46c <parseMessage+0x10c>)
 800a392:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	785a      	ldrb	r2, [r3, #1]
 800a398:	4b34      	ldr	r3, [pc, #208]	; (800a46c <parseMessage+0x10c>)
 800a39a:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	789a      	ldrb	r2, [r3, #2]
 800a3a0:	4b32      	ldr	r3, [pc, #200]	; (800a46c <parseMessage+0x10c>)
 800a3a2:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	78da      	ldrb	r2, [r3, #3]
 800a3a8:	4b30      	ldr	r3, [pc, #192]	; (800a46c <parseMessage+0x10c>)
 800a3aa:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 800a3ac:	4b2f      	ldr	r3, [pc, #188]	; (800a46c <parseMessage+0x10c>)
 800a3ae:	789a      	ldrb	r2, [r3, #2]
 800a3b0:	4b2f      	ldr	r3, [pc, #188]	; (800a470 <parseMessage+0x110>)
 800a3b2:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	791a      	ldrb	r2, [r3, #4]
 800a3b8:	4b2c      	ldr	r3, [pc, #176]	; (800a46c <parseMessage+0x10c>)
 800a3ba:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	795a      	ldrb	r2, [r3, #5]
 800a3c0:	4b2a      	ldr	r3, [pc, #168]	; (800a46c <parseMessage+0x10c>)
 800a3c2:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	799a      	ldrb	r2, [r3, #6]
 800a3c8:	4b28      	ldr	r3, [pc, #160]	; (800a46c <parseMessage+0x10c>)
 800a3ca:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]
 800a3d0:	e00d      	b.n	800a3ee <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	3307      	adds	r3, #7
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	441a      	add	r2, r3
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	7811      	ldrb	r1, [r2, #0]
 800a3e0:	4a22      	ldr	r2, [pc, #136]	; (800a46c <parseMessage+0x10c>)
 800a3e2:	4413      	add	r3, r2
 800a3e4:	460a      	mov	r2, r1
 800a3e6:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	73fb      	strb	r3, [r7, #15]
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	4b1e      	ldr	r3, [pc, #120]	; (800a46c <parseMessage+0x10c>)
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d3eb      	bcc.n	800a3d2 <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	461a      	mov	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4413      	add	r3, r2
 800a404:	781a      	ldrb	r2, [r3, #0]
 800a406:	4b19      	ldr	r3, [pc, #100]	; (800a46c <parseMessage+0x10c>)
 800a408:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	3308      	adds	r3, #8
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	781a      	ldrb	r2, [r3, #0]
 800a416:	4b15      	ldr	r3, [pc, #84]	; (800a46c <parseMessage+0x10c>)
 800a418:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	3309      	adds	r3, #9
 800a41e:	461a      	mov	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4413      	add	r3, r2
 800a424:	781a      	ldrb	r2, [r3, #0]
 800a426:	4b11      	ldr	r3, [pc, #68]	; (800a46c <parseMessage+0x10c>)
 800a428:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	330a      	adds	r3, #10
 800a42e:	461a      	mov	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4413      	add	r3, r2
 800a434:	781a      	ldrb	r2, [r3, #0]
 800a436:	4b0d      	ldr	r3, [pc, #52]	; (800a46c <parseMessage+0x10c>)
 800a438:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 800a43a:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <parseMessage+0x10c>)
 800a43c:	7f1b      	ldrb	r3, [r3, #28]
 800a43e:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 800a440:	f7ff ff40 	bl	800a2c4 <calcChecksum>
    if (chsum != msg.checksum[0]){
 800a444:	4b09      	ldr	r3, [pc, #36]	; (800a46c <parseMessage+0x10c>)
 800a446:	7f1b      	ldrb	r3, [r3, #28]
 800a448:	7bba      	ldrb	r2, [r7, #14]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d005      	beq.n	800a45a <parseMessage+0xfa>
        sendNack(device);
 800a44e:	78fb      	ldrb	r3, [r7, #3]
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff fcf5 	bl	8009e40 <sendNack>
        return 1;
 800a456:	2301      	movs	r3, #1
 800a458:	e004      	b.n	800a464 <parseMessage+0x104>
    }
    sendAck(device);
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff fd23 	bl	8009ea8 <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	200004b0 	.word	0x200004b0
 800a470:	200004ac 	.word	0x200004ac

0800a474 <handler>:



void handler(UART_select device){
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 800a47e:	4b3f      	ldr	r3, [pc, #252]	; (800a57c <handler+0x108>)
 800a480:	795b      	ldrb	r3, [r3, #5]
 800a482:	2bc1      	cmp	r3, #193	; 0xc1
 800a484:	d072      	beq.n	800a56c <handler+0xf8>
 800a486:	2bc1      	cmp	r3, #193	; 0xc1
 800a488:	dc73      	bgt.n	800a572 <handler+0xfe>
 800a48a:	2bc0      	cmp	r3, #192	; 0xc0
 800a48c:	d068      	beq.n	800a560 <handler+0xec>
 800a48e:	2bc0      	cmp	r3, #192	; 0xc0
 800a490:	dc6f      	bgt.n	800a572 <handler+0xfe>
 800a492:	2ba0      	cmp	r3, #160	; 0xa0
 800a494:	d05f      	beq.n	800a556 <handler+0xe2>
 800a496:	2ba0      	cmp	r3, #160	; 0xa0
 800a498:	dc6b      	bgt.n	800a572 <handler+0xfe>
 800a49a:	2b80      	cmp	r3, #128	; 0x80
 800a49c:	d053      	beq.n	800a546 <handler+0xd2>
 800a49e:	2b80      	cmp	r3, #128	; 0x80
 800a4a0:	dc67      	bgt.n	800a572 <handler+0xfe>
 800a4a2:	2b65      	cmp	r3, #101	; 0x65
 800a4a4:	dc34      	bgt.n	800a510 <handler+0x9c>
 800a4a6:	2b50      	cmp	r3, #80	; 0x50
 800a4a8:	db63      	blt.n	800a572 <handler+0xfe>
 800a4aa:	3b50      	subs	r3, #80	; 0x50
 800a4ac:	2b15      	cmp	r3, #21
 800a4ae:	d860      	bhi.n	800a572 <handler+0xfe>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <handler+0x44>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a517 	.word	0x0800a517
 800a4bc:	0800a573 	.word	0x0800a573
 800a4c0:	0800a573 	.word	0x0800a573
 800a4c4:	0800a573 	.word	0x0800a573
 800a4c8:	0800a573 	.word	0x0800a573
 800a4cc:	0800a573 	.word	0x0800a573
 800a4d0:	0800a51f 	.word	0x0800a51f
 800a4d4:	0800a573 	.word	0x0800a573
 800a4d8:	0800a573 	.word	0x0800a573
 800a4dc:	0800a573 	.word	0x0800a573
 800a4e0:	0800a573 	.word	0x0800a573
 800a4e4:	0800a573 	.word	0x0800a573
 800a4e8:	0800a573 	.word	0x0800a573
 800a4ec:	0800a573 	.word	0x0800a573
 800a4f0:	0800a573 	.word	0x0800a573
 800a4f4:	0800a573 	.word	0x0800a573
 800a4f8:	0800a573 	.word	0x0800a573
 800a4fc:	0800a573 	.word	0x0800a573
 800a500:	0800a573 	.word	0x0800a573
 800a504:	0800a573 	.word	0x0800a573
 800a508:	0800a573 	.word	0x0800a573
 800a50c:	0800a52f 	.word	0x0800a52f
 800a510:	2b78      	cmp	r3, #120	; 0x78
 800a512:	d014      	beq.n	800a53e <handler+0xca>
    	break;
    case 0xC1:
    	magnCalStart();
		break;
    default:
        break;
 800a514:	e02d      	b.n	800a572 <handler+0xfe>
        flag_connected_toIris = 1;
 800a516:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <handler+0x10c>)
 800a518:	2201      	movs	r2, #1
 800a51a:	701a      	strb	r2, [r3, #0]
        break;
 800a51c:	e02a      	b.n	800a574 <handler+0x100>
        ublox_transmit_message(msg.cmd, device);
 800a51e:	4b17      	ldr	r3, [pc, #92]	; (800a57c <handler+0x108>)
 800a520:	795b      	ldrb	r3, [r3, #5]
 800a522:	79fa      	ldrb	r2, [r7, #7]
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe f9a0 	bl	800886c <ublox_transmit_message>
        break;
 800a52c:	e022      	b.n	800a574 <handler+0x100>
        reportFW(msg.cmd, device);
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <handler+0x108>)
 800a530:	795b      	ldrb	r3, [r3, #5]
 800a532:	79fa      	ldrb	r2, [r7, #7]
 800a534:	4611      	mov	r1, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f000 f852 	bl	800a5e0 <reportFW>
        break;
 800a53c:	e01a      	b.n	800a574 <handler+0x100>
    	powerManageCfgSet(0x78);
 800a53e:	2078      	movs	r0, #120	; 0x78
 800a540:	f7fe fc3a 	bl	8008db8 <powerManageCfgSet>
        break;
 800a544:	e016      	b.n	800a574 <handler+0x100>
        ublox_transmit_rtc(msg.cmd, device);
 800a546:	4b0d      	ldr	r3, [pc, #52]	; (800a57c <handler+0x108>)
 800a548:	795b      	ldrb	r3, [r3, #5]
 800a54a:	79fa      	ldrb	r2, [r7, #7]
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe f978 	bl	8008844 <ublox_transmit_rtc>
        break;
 800a554:	e00e      	b.n	800a574 <handler+0x100>
        HAL_Delay(500);
 800a556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a55a:	f000 ff99 	bl	800b490 <HAL_Delay>
        break;
 800a55e:	e009      	b.n	800a574 <handler+0x100>
    	osThreadResume(gyroCalibrationTaskHandle);
 800a560:	4b08      	ldr	r3, [pc, #32]	; (800a584 <handler+0x110>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f007 f803 	bl	8011570 <osThreadResume>
    	break;
 800a56a:	e003      	b.n	800a574 <handler+0x100>
    	magnCalStart();
 800a56c:	f7ff fa22 	bl	80099b4 <magnCalStart>
		break;
 800a570:	e000      	b.n	800a574 <handler+0x100>
        break;
 800a572:	bf00      	nop
    }
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	200004b0 	.word	0x200004b0
 800a580:	200004ad 	.word	0x200004ad
 800a584:	2000048c 	.word	0x2000048c

0800a588 <init_message_t>:

void init_message_t(void){
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 800a58c:	4b12      	ldr	r3, [pc, #72]	; (800a5d8 <init_message_t+0x50>)
 800a58e:	2200      	movs	r2, #0
 800a590:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 800a592:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <init_message_t+0x50>)
 800a594:	2200      	movs	r2, #0
 800a596:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 800a598:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <init_message_t+0x50>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 800a59e:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <init_message_t+0x50>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <init_message_t+0x50>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <init_message_t+0x50>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 800a5b0:	2214      	movs	r2, #20
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4809      	ldr	r0, [pc, #36]	; (800a5dc <init_message_t+0x54>)
 800a5b6:	f00b fe60 	bl	801627a <memset>
    msg.checksum[0] = 0;
 800a5ba:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <init_message_t+0x50>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <init_message_t+0x50>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 800a5c6:	4b04      	ldr	r3, [pc, #16]	; (800a5d8 <init_message_t+0x50>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <init_message_t+0x50>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	77da      	strb	r2, [r3, #31]
}
 800a5d2:	bf00      	nop
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	200004b0 	.word	0x200004b0
 800a5dc:	200004b8 	.word	0x200004b8

0800a5e0 <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	460a      	mov	r2, r1
 800a5ea:	71fb      	strb	r3, [r7, #7]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 800a5f0:	236e      	movs	r3, #110	; 0x6e
 800a5f2:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 800a5f4:	79bb      	ldrb	r3, [r7, #6]
 800a5f6:	79fa      	ldrb	r2, [r7, #7]
 800a5f8:	f107 000c 	add.w	r0, r7, #12
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	f7ff fcbd 	bl	8009f7c <transmitMessage>
}
 800a602:	bf00      	nop
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	2100      	movs	r1, #0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f00b fe2c 	bl	801627a <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <RB_init+0x22>
    return 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	e00a      	b.n	800a642 <RB_init+0x38>
  }
  rb->rdpos = 0;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	78fa      	ldrb	r2, [r7, #3]
 800a63c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 800a640:	2301      	movs	r3, #1
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 800a64a:	b480      	push	{r7}
 800a64c:	b083      	sub	sp, #12
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65a:	3301      	adds	r3, #1
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a662:	fb93 f1f2 	sdiv	r1, r3, r2
 800a666:	fb01 f202 	mul.w	r2, r1, r2
 800a66a:	1a9a      	subs	r2, r3, r2
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a670:	429a      	cmp	r2, r3
 800a672:	d012      	beq.n	800a69a <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	78f9      	ldrb	r1, [r7, #3]
 800a67c:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a682:	3301      	adds	r3, #1
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a68a:	fb93 f1f2 	sdiv	r1, r3, r2
 800a68e:	fb01 f202 	mul.w	r2, r1, r2
 800a692:	1a9a      	subs	r2, r3, r2
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	62da      	str	r2, [r3, #44]	; 0x2c
 800a698:	e000      	b.n	800a69c <RB_push+0x52>
    return;
 800a69a:	bf00      	nop
}
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 800a6a6:	b480      	push	{r7}
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d101      	bne.n	800a6be <RB_pop+0x18>
 800a6ba:	23ff      	movs	r3, #255	; 0xff
 800a6bc:	e012      	b.n	800a6e4 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	5cd3      	ldrb	r3, [r2, r3]
 800a6c6:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a6d4:	fb93 f1f2 	sdiv	r1, r3, r2
 800a6d8:	fb01 f202 	mul.w	r2, r1, r2
 800a6dc:	1a9a      	subs	r2, r3, r2
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc05      	bgt.n	800a710 <RB_pushFront+0x20>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	e004      	b.n	800a71a <RB_pushFront+0x2a>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a714:	b2db      	uxtb	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 800a71c:	7bfa      	ldrb	r2, [r7, #15]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a722:	429a      	cmp	r2, r3
 800a724:	d008      	beq.n	800a738 <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 800a726:	7bfa      	ldrb	r2, [r7, #15]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	78f9      	ldrb	r1, [r7, #3]
 800a734:	54d1      	strb	r1, [r2, r3]
 800a736:	e000      	b.n	800a73a <RB_pushFront+0x4a>
    return;
 800a738:	bf00      	nop
}
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a756:	441a      	add	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a764:	fb93 f1f2 	sdiv	r1, r3, r2
 800a768:	fb01 f202 	mul.w	r2, r1, r2
 800a76c:	1a9b      	subs	r3, r3, r2
 800a76e:	b2db      	uxtb	r3, r3
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2228      	movs	r2, #40	; 0x28
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f00b fd75 	bl	801627a <memset>
  rb->rdpos = 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7aa:	4b11      	ldr	r3, [pc, #68]	; (800a7f0 <HAL_MspInit+0x4c>)
 800a7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ae:	4a10      	ldr	r2, [pc, #64]	; (800a7f0 <HAL_MspInit+0x4c>)
 800a7b0:	f043 0301 	orr.w	r3, r3, #1
 800a7b4:	6613      	str	r3, [r2, #96]	; 0x60
 800a7b6:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <HAL_MspInit+0x4c>)
 800a7b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	607b      	str	r3, [r7, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <HAL_MspInit+0x4c>)
 800a7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c6:	4a0a      	ldr	r2, [pc, #40]	; (800a7f0 <HAL_MspInit+0x4c>)
 800a7c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7cc:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ce:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <HAL_MspInit+0x4c>)
 800a7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a7da:	2200      	movs	r2, #0
 800a7dc:	210f      	movs	r1, #15
 800a7de:	f06f 0001 	mvn.w	r0, #1
 800a7e2:	f000 ff31 	bl	800b648 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	40021000 	.word	0x40021000

0800a7f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b0b0      	sub	sp, #192	; 0xc0
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	605a      	str	r2, [r3, #4]
 800a806:	609a      	str	r2, [r3, #8]
 800a808:	60da      	str	r2, [r3, #12]
 800a80a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a80c:	f107 0318 	add.w	r3, r7, #24
 800a810:	2294      	movs	r2, #148	; 0x94
 800a812:	2100      	movs	r1, #0
 800a814:	4618      	mov	r0, r3
 800a816:	f00b fd30 	bl	801627a <memset>
  if(hi2c->Instance==I2C2)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a4a      	ldr	r2, [pc, #296]	; (800a948 <HAL_I2C_MspInit+0x154>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d144      	bne.n	800a8ae <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a824:	2380      	movs	r3, #128	; 0x80
 800a826:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a828:	2300      	movs	r3, #0
 800a82a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a82c:	f107 0318 	add.w	r3, r7, #24
 800a830:	4618      	mov	r0, r3
 800a832:	f003 fcdd 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a83c:	f7ff fada 	bl	8009df4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a840:	4b42      	ldr	r3, [pc, #264]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a844:	4a41      	ldr	r2, [pc, #260]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a846:	f043 0302 	orr.w	r3, r3, #2
 800a84a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a84c:	4b3f      	ldr	r3, [pc, #252]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800a858:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a85c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a860:	2312      	movs	r3, #18
 800a862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a866:	2300      	movs	r3, #0
 800a868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a86c:	2303      	movs	r3, #3
 800a86e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a872:	2304      	movs	r3, #4
 800a874:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a878:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a87c:	4619      	mov	r1, r3
 800a87e:	4834      	ldr	r0, [pc, #208]	; (800a950 <HAL_I2C_MspInit+0x15c>)
 800a880:	f001 fa88 	bl	800bd94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a884:	4b31      	ldr	r3, [pc, #196]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a888:	4a30      	ldr	r2, [pc, #192]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a88a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a88e:	6593      	str	r3, [r2, #88]	; 0x58
 800a890:	4b2e      	ldr	r3, [pc, #184]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800a89c:	2200      	movs	r2, #0
 800a89e:	2105      	movs	r1, #5
 800a8a0:	2021      	movs	r0, #33	; 0x21
 800a8a2:	f000 fed1 	bl	800b648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a8a6:	2021      	movs	r0, #33	; 0x21
 800a8a8:	f000 feea 	bl	800b680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a8ac:	e048      	b.n	800a940 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a28      	ldr	r2, [pc, #160]	; (800a954 <HAL_I2C_MspInit+0x160>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d143      	bne.n	800a940 <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800a8b8:	2340      	movs	r3, #64	; 0x40
 800a8ba:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a8c0:	f107 0318 	add.w	r3, r7, #24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f003 fc93 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 800a8d0:	f7ff fa90 	bl	8009df4 <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a8d4:	4b1d      	ldr	r3, [pc, #116]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d8:	4a1c      	ldr	r2, [pc, #112]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a8da:	f043 0302 	orr.w	r3, r3, #2
 800a8de:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8e0:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800a8ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8f4:	2312      	movs	r3, #18
 800a8f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a900:	2303      	movs	r3, #3
 800a902:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a906:	2304      	movs	r3, #4
 800a908:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a90c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a910:	4619      	mov	r1, r3
 800a912:	480f      	ldr	r0, [pc, #60]	; (800a950 <HAL_I2C_MspInit+0x15c>)
 800a914:	f001 fa3e 	bl	800bd94 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 800a918:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91c:	4a0b      	ldr	r2, [pc, #44]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a91e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a922:	6593      	str	r3, [r2, #88]	; 0x58
 800a924:	4b09      	ldr	r3, [pc, #36]	; (800a94c <HAL_I2C_MspInit+0x158>)
 800a926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a92c:	60bb      	str	r3, [r7, #8]
 800a92e:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800a930:	2200      	movs	r2, #0
 800a932:	2105      	movs	r1, #5
 800a934:	201f      	movs	r0, #31
 800a936:	f000 fe87 	bl	800b648 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800a93a:	201f      	movs	r0, #31
 800a93c:	f000 fea0 	bl	800b680 <HAL_NVIC_EnableIRQ>
}
 800a940:	bf00      	nop
 800a942:	37c0      	adds	r7, #192	; 0xc0
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	40005800 	.word	0x40005800
 800a94c:	40021000 	.word	0x40021000
 800a950:	48000400 	.word	0x48000400
 800a954:	40005400 	.word	0x40005400

0800a958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b0b4      	sub	sp, #208	; 0xd0
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a960:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	605a      	str	r2, [r3, #4]
 800a96a:	609a      	str	r2, [r3, #8]
 800a96c:	60da      	str	r2, [r3, #12]
 800a96e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a974:	2294      	movs	r2, #148	; 0x94
 800a976:	2100      	movs	r1, #0
 800a978:	4618      	mov	r0, r3
 800a97a:	f00b fc7e 	bl	801627a <memset>
  if(huart->Instance==UART4)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a8b      	ldr	r2, [pc, #556]	; (800abb0 <HAL_UART_MspInit+0x258>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d144      	bne.n	800aa12 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800a988:	2308      	movs	r3, #8
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a98c:	2300      	movs	r3, #0
 800a98e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a994:	4618      	mov	r0, r3
 800a996:	f003 fc2b 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a9a0:	f7ff fa28 	bl	8009df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a9a4:	4b83      	ldr	r3, [pc, #524]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800a9a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a8:	4a82      	ldr	r2, [pc, #520]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800a9aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ae:	6593      	str	r3, [r2, #88]	; 0x58
 800a9b0:	4b80      	ldr	r3, [pc, #512]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800a9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9bc:	4b7d      	ldr	r3, [pc, #500]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800a9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c0:	4a7c      	ldr	r2, [pc, #496]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9c8:	4b7a      	ldr	r3, [pc, #488]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800a9ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	623b      	str	r3, [r7, #32]
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9da:	2302      	movs	r3, #2
 800a9dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a9ec:	2308      	movs	r3, #8
 800a9ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9fc:	f001 f9ca 	bl	800bd94 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800aa00:	2200      	movs	r2, #0
 800aa02:	2105      	movs	r1, #5
 800aa04:	2034      	movs	r0, #52	; 0x34
 800aa06:	f000 fe1f 	bl	800b648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800aa0a:	2034      	movs	r0, #52	; 0x34
 800aa0c:	f000 fe38 	bl	800b680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800aa10:	e0ca      	b.n	800aba8 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a68      	ldr	r2, [pc, #416]	; (800abb8 <HAL_UART_MspInit+0x260>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d143      	bne.n	800aaa4 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800aa20:	2300      	movs	r3, #0
 800aa22:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aa24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f003 fbe1 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800aa34:	f7ff f9de 	bl	8009df4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800aa38:	4b5e      	ldr	r3, [pc, #376]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aa3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa3c:	4a5d      	ldr	r2, [pc, #372]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aa3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa42:	6613      	str	r3, [r2, #96]	; 0x60
 800aa44:	4b5b      	ldr	r3, [pc, #364]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aa46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa4c:	61fb      	str	r3, [r7, #28]
 800aa4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa50:	4b58      	ldr	r3, [pc, #352]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aa52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa54:	4a57      	ldr	r2, [pc, #348]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aa56:	f043 0302 	orr.w	r3, r3, #2
 800aa5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa5c:	4b55      	ldr	r3, [pc, #340]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aa5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	61bb      	str	r3, [r7, #24]
 800aa66:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800aa68:	23c0      	movs	r3, #192	; 0xc0
 800aa6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa6e:	2302      	movs	r3, #2
 800aa70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa74:	2300      	movs	r3, #0
 800aa76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aa80:	2307      	movs	r3, #7
 800aa82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa86:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	484b      	ldr	r0, [pc, #300]	; (800abbc <HAL_UART_MspInit+0x264>)
 800aa8e:	f001 f981 	bl	800bd94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800aa92:	2200      	movs	r2, #0
 800aa94:	2105      	movs	r1, #5
 800aa96:	2025      	movs	r0, #37	; 0x25
 800aa98:	f000 fdd6 	bl	800b648 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aa9c:	2025      	movs	r0, #37	; 0x25
 800aa9e:	f000 fdef 	bl	800b680 <HAL_NVIC_EnableIRQ>
}
 800aaa2:	e081      	b.n	800aba8 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a45      	ldr	r2, [pc, #276]	; (800abc0 <HAL_UART_MspInit+0x268>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d13b      	bne.n	800ab26 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800aaae:	2302      	movs	r3, #2
 800aab0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800aab2:	2300      	movs	r3, #0
 800aab4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaba:	4618      	mov	r0, r3
 800aabc:	f003 fb98 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <HAL_UART_MspInit+0x172>
      Error_Handler();
 800aac6:	f7ff f995 	bl	8009df4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800aaca:	4b3a      	ldr	r3, [pc, #232]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aace:	4a39      	ldr	r2, [pc, #228]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aad4:	6593      	str	r3, [r2, #88]	; 0x58
 800aad6:	4b37      	ldr	r3, [pc, #220]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aae2:	4b34      	ldr	r3, [pc, #208]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae6:	4a33      	ldr	r2, [pc, #204]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aae8:	f043 0308 	orr.w	r3, r3, #8
 800aaec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aaee:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800aaf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf2:	f003 0308 	and.w	r3, r3, #8
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800aafa:	2378      	movs	r3, #120	; 0x78
 800aafc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab00:	2302      	movs	r3, #2
 800ab02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ab12:	2307      	movs	r3, #7
 800ab14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4829      	ldr	r0, [pc, #164]	; (800abc4 <HAL_UART_MspInit+0x26c>)
 800ab20:	f001 f938 	bl	800bd94 <HAL_GPIO_Init>
}
 800ab24:	e040      	b.n	800aba8 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a27      	ldr	r2, [pc, #156]	; (800abc8 <HAL_UART_MspInit+0x270>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d13b      	bne.n	800aba8 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800ab30:	2304      	movs	r3, #4
 800ab32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ab34:	2300      	movs	r3, #0
 800ab36:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ab38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f003 fb57 	bl	800e1f0 <HAL_RCCEx_PeriphCLKConfig>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 800ab48:	f7ff f954 	bl	8009df4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ab4c:	4b19      	ldr	r3, [pc, #100]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800ab4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab50:	4a18      	ldr	r2, [pc, #96]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800ab52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab56:	6593      	str	r3, [r2, #88]	; 0x58
 800ab58:	4b16      	ldr	r3, [pc, #88]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800ab5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab64:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800ab66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab68:	4a12      	ldr	r2, [pc, #72]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800ab6a:	f043 0308 	orr.w	r3, r3, #8
 800ab6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab70:	4b10      	ldr	r3, [pc, #64]	; (800abb4 <HAL_UART_MspInit+0x25c>)
 800ab72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab74:	f003 0308 	and.w	r3, r3, #8
 800ab78:	60bb      	str	r3, [r7, #8]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800ab7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab84:	2302      	movs	r3, #2
 800ab86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab90:	2303      	movs	r3, #3
 800ab92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ab96:	2307      	movs	r3, #7
 800ab98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800aba0:	4619      	mov	r1, r3
 800aba2:	4808      	ldr	r0, [pc, #32]	; (800abc4 <HAL_UART_MspInit+0x26c>)
 800aba4:	f001 f8f6 	bl	800bd94 <HAL_GPIO_Init>
}
 800aba8:	bf00      	nop
 800abaa:	37d0      	adds	r7, #208	; 0xd0
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40004c00 	.word	0x40004c00
 800abb4:	40021000 	.word	0x40021000
 800abb8:	40013800 	.word	0x40013800
 800abbc:	48000400 	.word	0x48000400
 800abc0:	40004400 	.word	0x40004400
 800abc4:	48000c00 	.word	0x48000c00
 800abc8:	40004800 	.word	0x40004800

0800abcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08c      	sub	sp, #48	; 0x30
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <HAL_InitTick+0xc8>)
 800abdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abde:	4a2d      	ldr	r2, [pc, #180]	; (800ac94 <HAL_InitTick+0xc8>)
 800abe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abe4:	6613      	str	r3, [r2, #96]	; 0x60
 800abe6:	4b2b      	ldr	r3, [pc, #172]	; (800ac94 <HAL_InitTick+0xc8>)
 800abe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abee:	60bb      	str	r3, [r7, #8]
 800abf0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800abf2:	f107 020c 	add.w	r2, r7, #12
 800abf6:	f107 0310 	add.w	r3, r7, #16
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f003 fa05 	bl	800e00c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800ac02:	f003 f9ed 	bl	800dfe0 <HAL_RCC_GetPCLK2Freq>
 800ac06:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	4a23      	ldr	r2, [pc, #140]	; (800ac98 <HAL_InitTick+0xcc>)
 800ac0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac10:	0c9b      	lsrs	r3, r3, #18
 800ac12:	3b01      	subs	r3, #1
 800ac14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800ac16:	4b21      	ldr	r3, [pc, #132]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac18:	4a21      	ldr	r2, [pc, #132]	; (800aca0 <HAL_InitTick+0xd4>)
 800ac1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800ac1c:	4b1f      	ldr	r3, [pc, #124]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ac22:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800ac24:	4a1d      	ldr	r2, [pc, #116]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800ac2a:	4b1c      	ldr	r3, [pc, #112]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac30:	4b1a      	ldr	r3, [pc, #104]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac36:	4b19      	ldr	r3, [pc, #100]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800ac3c:	4817      	ldr	r0, [pc, #92]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac3e:	f003 ffef 	bl	800ec20 <HAL_TIM_Base_Init>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800ac48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d11b      	bne.n	800ac88 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800ac50:	4812      	ldr	r0, [pc, #72]	; (800ac9c <HAL_InitTick+0xd0>)
 800ac52:	f004 f847 	bl	800ece4 <HAL_TIM_Base_Start_IT>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800ac5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d111      	bne.n	800ac88 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ac64:	2019      	movs	r0, #25
 800ac66:	f000 fd0b 	bl	800b680 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b0f      	cmp	r3, #15
 800ac6e:	d808      	bhi.n	800ac82 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800ac70:	2200      	movs	r2, #0
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	2019      	movs	r0, #25
 800ac76:	f000 fce7 	bl	800b648 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ac7a:	4a0a      	ldr	r2, [pc, #40]	; (800aca4 <HAL_InitTick+0xd8>)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	e002      	b.n	800ac88 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800ac88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3730      	adds	r7, #48	; 0x30
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	40021000 	.word	0x40021000
 800ac98:	431bde83 	.word	0x431bde83
 800ac9c:	200004d0 	.word	0x200004d0
 800aca0:	40012c00 	.word	0x40012c00
 800aca4:	20000070 	.word	0x20000070

0800aca8 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800acac:	e7fe      	b.n	800acac <NMI_Handler+0x4>

0800acae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800acae:	b480      	push	{r7}
 800acb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800acb2:	e7fe      	b.n	800acb2 <HardFault_Handler+0x4>

0800acb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800acb4:	b480      	push	{r7}
 800acb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800acb8:	e7fe      	b.n	800acb8 <MemManage_Handler+0x4>

0800acba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800acba:	b480      	push	{r7}
 800acbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800acbe:	e7fe      	b.n	800acbe <BusFault_Handler+0x4>

0800acc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800acc4:	e7fe      	b.n	800acc4 <UsageFault_Handler+0x4>

0800acc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800acc6:	b480      	push	{r7}
 800acc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800acca:	bf00      	nop
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800acd8:	2020      	movs	r0, #32
 800acda:	f001 fa1f 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800acde:	2040      	movs	r0, #64	; 0x40
 800ace0:	f001 fa1c 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800ace4:	2080      	movs	r0, #128	; 0x80
 800ace6:	f001 fa19 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800acea:	f44f 7080 	mov.w	r0, #256	; 0x100
 800acee:	f001 fa15 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800acf2:	bf00      	nop
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800acfc:	4802      	ldr	r0, [pc, #8]	; (800ad08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800acfe:	f004 f861 	bl	800edc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800ad02:	bf00      	nop
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200004d0 	.word	0x200004d0

0800ad0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800ad10:	4802      	ldr	r0, [pc, #8]	; (800ad1c <I2C1_EV_IRQHandler+0x10>)
 800ad12:	f001 fecd 	bl	800cab0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800ad16:	bf00      	nop
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20000340 	.word	0x20000340

0800ad20 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800ad24:	4802      	ldr	r0, [pc, #8]	; (800ad30 <I2C2_EV_IRQHandler+0x10>)
 800ad26:	f001 fec3 	bl	800cab0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800ad2a:	bf00      	nop
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	2000040c 	.word	0x2000040c

0800ad34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ad38:	4802      	ldr	r0, [pc, #8]	; (800ad44 <USART1_IRQHandler+0x10>)
 800ad3a:	f004 fb81 	bl	800f440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ad3e:	bf00      	nop
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20000520 	.word	0x20000520

0800ad48 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ad4c:	4802      	ldr	r0, [pc, #8]	; (800ad58 <UART4_IRQHandler+0x10>)
 800ad4e:	f004 fb77 	bl	800f440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ad52:	bf00      	nop
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200005b0 	.word	0x200005b0

0800ad5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800ad60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ad64:	f001 f9da 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800ad68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ad6c:	f001 f9d6 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800ad70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ad74:	f001 f9d2 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800ad78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ad7c:	f001 f9ce 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800ad80:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ad84:	f001 f9ca 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800ad88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ad8c:	f001 f9c6 	bl	800c11c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ad90:	bf00      	nop
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ad94:	b480      	push	{r7}
 800ad96:	af00      	add	r7, sp, #0
  return 1;
 800ad98:	2301      	movs	r3, #1
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <_kill>:

int _kill(int pid, int sig)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800adae:	f00b fac7 	bl	8016340 <__errno>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2216      	movs	r2, #22
 800adb6:	601a      	str	r2, [r3, #0]
  return -1;
 800adb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <_exit>:

void _exit (int status)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800adcc:	f04f 31ff 	mov.w	r1, #4294967295
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff ffe7 	bl	800ada4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800add6:	e7fe      	b.n	800add6 <_exit+0x12>

0800add8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ade4:	2300      	movs	r3, #0
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	e00a      	b.n	800ae00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800adea:	f3af 8000 	nop.w
 800adee:	4601      	mov	r1, r0
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	60ba      	str	r2, [r7, #8]
 800adf6:	b2ca      	uxtb	r2, r1
 800adf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3301      	adds	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	dbf0      	blt.n	800adea <_read+0x12>
  }

  return len;
 800ae08:	687b      	ldr	r3, [r7, #4]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b086      	sub	sp, #24
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae1e:	2300      	movs	r3, #0
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	e009      	b.n	800ae38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	60ba      	str	r2, [r7, #8]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	3301      	adds	r3, #1
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	dbf1      	blt.n	800ae24 <_write+0x12>
  }
  return len;
 800ae40:	687b      	ldr	r3, [r7, #4]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <_close>:

int _close(int file)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ae52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae72:	605a      	str	r2, [r3, #4]
  return 0;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <_isatty>:

int _isatty(int file)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ae8a:	2301      	movs	r3, #1
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aebc:	4a14      	ldr	r2, [pc, #80]	; (800af10 <_sbrk+0x5c>)
 800aebe:	4b15      	ldr	r3, [pc, #84]	; (800af14 <_sbrk+0x60>)
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aec8:	4b13      	ldr	r3, [pc, #76]	; (800af18 <_sbrk+0x64>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aed0:	4b11      	ldr	r3, [pc, #68]	; (800af18 <_sbrk+0x64>)
 800aed2:	4a12      	ldr	r2, [pc, #72]	; (800af1c <_sbrk+0x68>)
 800aed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aed6:	4b10      	ldr	r3, [pc, #64]	; (800af18 <_sbrk+0x64>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4413      	add	r3, r2
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d207      	bcs.n	800aef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800aee4:	f00b fa2c 	bl	8016340 <__errno>
 800aee8:	4603      	mov	r3, r0
 800aeea:	220c      	movs	r2, #12
 800aeec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295
 800aef2:	e009      	b.n	800af08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aef4:	4b08      	ldr	r3, [pc, #32]	; (800af18 <_sbrk+0x64>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800aefa:	4b07      	ldr	r3, [pc, #28]	; (800af18 <_sbrk+0x64>)
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4413      	add	r3, r2
 800af02:	4a05      	ldr	r2, [pc, #20]	; (800af18 <_sbrk+0x64>)
 800af04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800af06:	68fb      	ldr	r3, [r7, #12]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	200a0000 	.word	0x200a0000
 800af14:	00000400 	.word	0x00000400
 800af18:	2000051c 	.word	0x2000051c
 800af1c:	20006550 	.word	0x20006550

0800af20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800af20:	b480      	push	{r7}
 800af22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800af24:	4b06      	ldr	r3, [pc, #24]	; (800af40 <SystemInit+0x20>)
 800af26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2a:	4a05      	ldr	r2, [pc, #20]	; (800af40 <SystemInit+0x20>)
 800af2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800af34:	bf00      	nop
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	e000ed00 	.word	0xe000ed00

0800af44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800af48:	4b24      	ldr	r3, [pc, #144]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af4a:	4a25      	ldr	r2, [pc, #148]	; (800afe0 <MX_USART1_UART_Init+0x9c>)
 800af4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800af4e:	4b23      	ldr	r3, [pc, #140]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af50:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800af54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800af56:	4b21      	ldr	r3, [pc, #132]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af58:	2200      	movs	r2, #0
 800af5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800af5c:	4b1f      	ldr	r3, [pc, #124]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af5e:	2200      	movs	r2, #0
 800af60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800af62:	4b1e      	ldr	r3, [pc, #120]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af64:	2200      	movs	r2, #0
 800af66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800af68:	4b1c      	ldr	r3, [pc, #112]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af6a:	220c      	movs	r2, #12
 800af6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800af6e:	4b1b      	ldr	r3, [pc, #108]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af70:	2200      	movs	r2, #0
 800af72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800af74:	4b19      	ldr	r3, [pc, #100]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af76:	2200      	movs	r2, #0
 800af78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800af7a:	4b18      	ldr	r3, [pc, #96]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800af80:	4b16      	ldr	r3, [pc, #88]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af82:	2200      	movs	r2, #0
 800af84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800af86:	4b15      	ldr	r3, [pc, #84]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af88:	2200      	movs	r2, #0
 800af8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800af8c:	4813      	ldr	r0, [pc, #76]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800af8e:	f004 f919 	bl	800f1c4 <HAL_UART_Init>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800af98:	f7fe ff2c 	bl	8009df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800af9c:	2100      	movs	r1, #0
 800af9e:	480f      	ldr	r0, [pc, #60]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800afa0:	f006 f8c5 	bl	801112e <HAL_UARTEx_SetTxFifoThreshold>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800afaa:	f7fe ff23 	bl	8009df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800afae:	2100      	movs	r1, #0
 800afb0:	480a      	ldr	r0, [pc, #40]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800afb2:	f006 f8fa 	bl	80111aa <HAL_UARTEx_SetRxFifoThreshold>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800afbc:	f7fe ff1a 	bl	8009df4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800afc0:	4806      	ldr	r0, [pc, #24]	; (800afdc <MX_USART1_UART_Init+0x98>)
 800afc2:	f006 f87b 	bl	80110bc <HAL_UARTEx_DisableFifoMode>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800afcc:	f7fe ff12 	bl	8009df4 <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 800afd0:	2128      	movs	r1, #40	; 0x28
 800afd2:	4804      	ldr	r0, [pc, #16]	; (800afe4 <MX_USART1_UART_Init+0xa0>)
 800afd4:	f7ff fb19 	bl	800a60a <RB_init>

}
 800afd8:	bf00      	nop
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20000520 	.word	0x20000520
 800afe0:	40013800 	.word	0x40013800
 800afe4:	20000674 	.word	0x20000674

0800afe8 <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800afec:	4b26      	ldr	r3, [pc, #152]	; (800b088 <MX_UART4_Init+0xa0>)
 800afee:	4a27      	ldr	r2, [pc, #156]	; (800b08c <MX_UART4_Init+0xa4>)
 800aff0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 800aff2:	4b25      	ldr	r3, [pc, #148]	; (800b088 <MX_UART4_Init+0xa0>)
 800aff4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800aff8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800affa:	4b23      	ldr	r3, [pc, #140]	; (800b088 <MX_UART4_Init+0xa0>)
 800affc:	2200      	movs	r2, #0
 800affe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b000:	4b21      	ldr	r3, [pc, #132]	; (800b088 <MX_UART4_Init+0xa0>)
 800b002:	2200      	movs	r2, #0
 800b004:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b006:	4b20      	ldr	r3, [pc, #128]	; (800b088 <MX_UART4_Init+0xa0>)
 800b008:	2200      	movs	r2, #0
 800b00a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b00c:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <MX_UART4_Init+0xa0>)
 800b00e:	220c      	movs	r2, #12
 800b010:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b012:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <MX_UART4_Init+0xa0>)
 800b014:	2200      	movs	r2, #0
 800b016:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b018:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <MX_UART4_Init+0xa0>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b01e:	4b1a      	ldr	r3, [pc, #104]	; (800b088 <MX_UART4_Init+0xa0>)
 800b020:	2200      	movs	r2, #0
 800b022:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b024:	4b18      	ldr	r3, [pc, #96]	; (800b088 <MX_UART4_Init+0xa0>)
 800b026:	2200      	movs	r2, #0
 800b028:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b02a:	4b17      	ldr	r3, [pc, #92]	; (800b088 <MX_UART4_Init+0xa0>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b030:	4815      	ldr	r0, [pc, #84]	; (800b088 <MX_UART4_Init+0xa0>)
 800b032:	f004 f8c7 	bl	800f1c4 <HAL_UART_Init>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <MX_UART4_Init+0x58>
  {
    error_Handler();
 800b03c:	f000 f82c 	bl	800b098 <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b040:	2100      	movs	r1, #0
 800b042:	4811      	ldr	r0, [pc, #68]	; (800b088 <MX_UART4_Init+0xa0>)
 800b044:	f006 f873 	bl	801112e <HAL_UARTEx_SetTxFifoThreshold>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <MX_UART4_Init+0x6a>
  {
    error_Handler();
 800b04e:	f000 f823 	bl	800b098 <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b052:	2100      	movs	r1, #0
 800b054:	480c      	ldr	r0, [pc, #48]	; (800b088 <MX_UART4_Init+0xa0>)
 800b056:	f006 f8a8 	bl	80111aa <HAL_UARTEx_SetRxFifoThreshold>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 800b060:	f000 f81a 	bl	800b098 <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800b064:	4808      	ldr	r0, [pc, #32]	; (800b088 <MX_UART4_Init+0xa0>)
 800b066:	f006 f829 	bl	80110bc <HAL_UARTEx_DisableFifoMode>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 800b070:	f000 f812 	bl	800b098 <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 800b074:	2128      	movs	r1, #40	; 0x28
 800b076:	4806      	ldr	r0, [pc, #24]	; (800b090 <MX_UART4_Init+0xa8>)
 800b078:	f7ff fac7 	bl	800a60a <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 800b07c:	210a      	movs	r1, #10
 800b07e:	4805      	ldr	r0, [pc, #20]	; (800b094 <MX_UART4_Init+0xac>)
 800b080:	f000 f83c 	bl	800b0fc <uart_write_debug>

}
 800b084:	bf00      	nop
 800b086:	bd80      	pop	{r7, pc}
 800b088:	200005b0 	.word	0x200005b0
 800b08c:	40004c00 	.word	0x40004c00
 800b090:	20000640 	.word	0x20000640
 800b094:	08019f60 	.word	0x08019f60

0800b098 <error_Handler>:

void error_Handler(void){
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 800b09c:	210a      	movs	r1, #10
 800b09e:	4802      	ldr	r0, [pc, #8]	; (800b0a8 <error_Handler+0x10>)
 800b0a0:	f000 f82c 	bl	800b0fc <uart_write_debug>
}
 800b0a4:	bf00      	nop
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	08019f74 	.word	0x08019f74

0800b0ac <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d00c      	beq.n	800b0d6 <uart_receive_it+0x2a>
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	dc0d      	bgt.n	800b0dc <uart_receive_it+0x30>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <uart_receive_it+0x1e>
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d003      	beq.n	800b0d0 <uart_receive_it+0x24>
 800b0c8:	e008      	b.n	800b0dc <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <uart_receive_it+0x44>)
 800b0cc:	60fb      	str	r3, [r7, #12]
		break;
 800b0ce:	e005      	b.n	800b0dc <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 800b0d0:	4b08      	ldr	r3, [pc, #32]	; (800b0f4 <uart_receive_it+0x48>)
 800b0d2:	60fb      	str	r3, [r7, #12]
		break;
 800b0d4:	e002      	b.n	800b0dc <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 800b0d6:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <uart_receive_it+0x44>)
 800b0d8:	60fb      	str	r3, [r7, #12]
		break;
 800b0da:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 800b0dc:	2201      	movs	r2, #1
 800b0de:	4906      	ldr	r1, [pc, #24]	; (800b0f8 <uart_receive_it+0x4c>)
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f004 f957 	bl	800f394 <HAL_UART_Receive_IT>
 800b0e6:	4603      	mov	r3, r0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000520 	.word	0x20000520
 800b0f4:	200005b0 	.word	0x200005b0
 800b0f8:	200006a8 	.word	0x200006a8

0800b0fc <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7f5 f8ca 	bl	80002a0 <strlen>
 800b10c:	4603      	mov	r3, r0
 800b10e:	b29a      	uxth	r2, r3
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	4803      	ldr	r0, [pc, #12]	; (800b124 <uart_write_debug+0x28>)
 800b116:	f004 f8a5 	bl	800f264 <HAL_UART_Transmit>
 800b11a:	4603      	mov	r3, r0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20000520 	.word	0x20000520

0800b128 <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	607b      	str	r3, [r7, #4]
 800b132:	460b      	mov	r3, r1
 800b134:	72fb      	strb	r3, [r7, #11]
 800b136:	4613      	mov	r3, r2
 800b138:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 800b13a:	7abb      	ldrb	r3, [r7, #10]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d00c      	beq.n	800b15a <uart_write+0x32>
 800b140:	2b02      	cmp	r3, #2
 800b142:	dc0d      	bgt.n	800b160 <uart_write+0x38>
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <uart_write+0x26>
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d003      	beq.n	800b154 <uart_write+0x2c>
 800b14c:	e008      	b.n	800b160 <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 800b14e:	4b12      	ldr	r3, [pc, #72]	; (800b198 <uart_write+0x70>)
 800b150:	617b      	str	r3, [r7, #20]
		break;
 800b152:	e005      	b.n	800b160 <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 800b154:	4b11      	ldr	r3, [pc, #68]	; (800b19c <uart_write+0x74>)
 800b156:	617b      	str	r3, [r7, #20]
		break;
 800b158:	e002      	b.n	800b160 <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 800b15a:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <uart_write+0x70>)
 800b15c:	617b      	str	r3, [r7, #20]
		break;
 800b15e:	bf00      	nop
	}
	if (len == 0){
 800b160:	7afb      	ldrb	r3, [r7, #11]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10b      	bne.n	800b17e <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7f5 f89a 	bl	80002a0 <strlen>
 800b16c:	4603      	mov	r3, r0
 800b16e:	b29a      	uxth	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68f9      	ldr	r1, [r7, #12]
 800b174:	6978      	ldr	r0, [r7, #20]
 800b176:	f004 f875 	bl	800f264 <HAL_UART_Transmit>
 800b17a:	4603      	mov	r3, r0
 800b17c:	e007      	b.n	800b18e <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	b29a      	uxth	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68f9      	ldr	r1, [r7, #12]
 800b186:	6978      	ldr	r0, [r7, #20]
 800b188:	f004 f86c 	bl	800f264 <HAL_UART_Transmit>
 800b18c:	4603      	mov	r3, r0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20000520 	.word	0x20000520
 800b19c:	200005b0 	.word	0x200005b0

0800b1a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a7c      	ldr	r2, [pc, #496]	; (800b3a0 <HAL_UART_RxCpltCallback+0x200>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	f040 80a2 	bne.w	800b2f8 <HAL_UART_RxCpltCallback+0x158>
	{
		if (ack_rcv_flag == 1){
 800b1b4:	4b7b      	ldr	r3, [pc, #492]	; (800b3a4 <HAL_UART_RxCpltCallback+0x204>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d129      	bne.n	800b210 <HAL_UART_RxCpltCallback+0x70>
			if ((rxChar != ESC) && (prvRxChar == ACK)){
 800b1bc:	4b7a      	ldr	r3, [pc, #488]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2b1b      	cmp	r3, #27
 800b1c2:	d010      	beq.n	800b1e6 <HAL_UART_RxCpltCallback+0x46>
 800b1c4:	4b79      	ldr	r3, [pc, #484]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	2b06      	cmp	r3, #6
 800b1ca:	d10c      	bne.n	800b1e6 <HAL_UART_RxCpltCallback+0x46>
				osEventFlagsSet(ack_rcvd, ACK_FLAG);
 800b1cc:	4b78      	ldr	r3, [pc, #480]	; (800b3b0 <HAL_UART_RxCpltCallback+0x210>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f006 fa74 	bl	80116c0 <osEventFlagsSet>
				prvRxChar = 0x00;
 800b1d8:	4b74      	ldr	r3, [pc, #464]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 800b1de:	4b71      	ldr	r3, [pc, #452]	; (800b3a4 <HAL_UART_RxCpltCallback+0x204>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	e082      	b.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar != ESC) && (prvRxChar == NACK)){
 800b1e6:	4b70      	ldr	r3, [pc, #448]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b1b      	cmp	r3, #27
 800b1ec:	d07e      	beq.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
 800b1ee:	4b6f      	ldr	r3, [pc, #444]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b15      	cmp	r3, #21
 800b1f4:	d17a      	bne.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
				osEventFlagsSet(ack_rcvd, NACK_FLAG);
 800b1f6:	4b6e      	ldr	r3, [pc, #440]	; (800b3b0 <HAL_UART_RxCpltCallback+0x210>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f006 fa5f 	bl	80116c0 <osEventFlagsSet>
				prvRxChar = 0x00;
 800b202:	4b6a      	ldr	r3, [pc, #424]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b204:	2200      	movs	r2, #0
 800b206:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 800b208:	4b66      	ldr	r3, [pc, #408]	; (800b3a4 <HAL_UART_RxCpltCallback+0x204>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
 800b20e:	e06d      	b.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
			}
		}
		else{
			if (((rxChar == ACK) || (rxChar == NACK)) && (prvRxChar == 0xFF)){
 800b210:	4b65      	ldr	r3, [pc, #404]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b06      	cmp	r3, #6
 800b216:	d003      	beq.n	800b220 <HAL_UART_RxCpltCallback+0x80>
 800b218:	4b63      	ldr	r3, [pc, #396]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b15      	cmp	r3, #21
 800b21e:	d10b      	bne.n	800b238 <HAL_UART_RxCpltCallback+0x98>
 800b220:	4b62      	ldr	r3, [pc, #392]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2bff      	cmp	r3, #255	; 0xff
 800b226:	d107      	bne.n	800b238 <HAL_UART_RxCpltCallback+0x98>
				ack_rcv_flag = 1;
 800b228:	4b5e      	ldr	r3, [pc, #376]	; (800b3a4 <HAL_UART_RxCpltCallback+0x204>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	701a      	strb	r2, [r3, #0]
				prvRxChar = rxChar;
 800b22e:	4b5e      	ldr	r3, [pc, #376]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b230:	781a      	ldrb	r2, [r3, #0]
 800b232:	4b5e      	ldr	r3, [pc, #376]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	e059      	b.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 800b238:	4b5b      	ldr	r3, [pc, #364]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	d125      	bne.n	800b28c <HAL_UART_RxCpltCallback+0xec>
 800b240:	4b5a      	ldr	r3, [pc, #360]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b1b      	cmp	r3, #27
 800b246:	d021      	beq.n	800b28c <HAL_UART_RxCpltCallback+0xec>
				uint8_t start_ch = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	73bb      	strb	r3, [r7, #14]
				start_ch = RB_pop(&uart4RXrb);
 800b24c:	4859      	ldr	r0, [pc, #356]	; (800b3b4 <HAL_UART_RxCpltCallback+0x214>)
 800b24e:	f7ff fa2a 	bl	800a6a6 <RB_pop>
 800b252:	4603      	mov	r3, r0
 800b254:	73bb      	strb	r3, [r7, #14]
				if (start_ch == STX){
 800b256:	7bbb      	ldrb	r3, [r7, #14]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d113      	bne.n	800b284 <HAL_UART_RxCpltCallback+0xe4>
					uint8_t rb_len = RB_size(&uart4RXrb);
 800b25c:	4855      	ldr	r0, [pc, #340]	; (800b3b4 <HAL_UART_RxCpltCallback+0x214>)
 800b25e:	f7ff fa71 	bl	800a744 <RB_size>
 800b262:	4603      	mov	r3, r0
 800b264:	737b      	strb	r3, [r7, #13]
					RB_pushFront(&uart4RXrb, rb_len);
 800b266:	7b7b      	ldrb	r3, [r7, #13]
 800b268:	4619      	mov	r1, r3
 800b26a:	4852      	ldr	r0, [pc, #328]	; (800b3b4 <HAL_UART_RxCpltCallback+0x214>)
 800b26c:	f7ff fa40 	bl	800a6f0 <RB_pushFront>
					osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 800b270:	4b51      	ldr	r3, [pc, #324]	; (800b3b8 <HAL_UART_RxCpltCallback+0x218>)
 800b272:	6818      	ldr	r0, [r3, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	2200      	movs	r2, #0
 800b278:	494e      	ldr	r1, [pc, #312]	; (800b3b4 <HAL_UART_RxCpltCallback+0x214>)
 800b27a:	f006 fc4d 	bl	8011b18 <osMessageQueuePut>
					prvRxChar = 0xFF;
 800b27e:	4b4b      	ldr	r3, [pc, #300]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b280:	22ff      	movs	r2, #255	; 0xff
 800b282:	701a      	strb	r2, [r3, #0]
				}
				RB_clear(&uart4RXrb);
 800b284:	484b      	ldr	r0, [pc, #300]	; (800b3b4 <HAL_UART_RxCpltCallback+0x214>)
 800b286:	f7ff fa79 	bl	800a77c <RB_clear>
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 800b28a:	e02f      	b.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar != ESC)){
 800b28c:	4b46      	ldr	r3, [pc, #280]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b1b      	cmp	r3, #27
 800b292:	d108      	bne.n	800b2a6 <HAL_UART_RxCpltCallback+0x106>
 800b294:	4b45      	ldr	r3, [pc, #276]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b1b      	cmp	r3, #27
 800b29a:	d004      	beq.n	800b2a6 <HAL_UART_RxCpltCallback+0x106>
				 prvRxChar = rxChar;
 800b29c:	4b42      	ldr	r3, [pc, #264]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b29e:	781a      	ldrb	r2, [r3, #0]
 800b2a0:	4b42      	ldr	r3, [pc, #264]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b2a2:	701a      	strb	r2, [r3, #0]
 800b2a4:	e022      	b.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar == ESC)){
 800b2a6:	4b40      	ldr	r3, [pc, #256]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b1b      	cmp	r3, #27
 800b2ac:	d10d      	bne.n	800b2ca <HAL_UART_RxCpltCallback+0x12a>
 800b2ae:	4b3f      	ldr	r3, [pc, #252]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b1b      	cmp	r3, #27
 800b2b4:	d109      	bne.n	800b2ca <HAL_UART_RxCpltCallback+0x12a>
				RB_push(&uart4RXrb, rxChar);
 800b2b6:	4b3c      	ldr	r3, [pc, #240]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	483d      	ldr	r0, [pc, #244]	; (800b3b4 <HAL_UART_RxCpltCallback+0x214>)
 800b2be:	f7ff f9c4 	bl	800a64a <RB_push>
				prvRxChar = 0x00;
 800b2c2:	4b3a      	ldr	r3, [pc, #232]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	e010      	b.n	800b2ec <HAL_UART_RxCpltCallback+0x14c>
			}
			else {
			  RB_push(&uart4RXrb, rxChar);
 800b2ca:	4b37      	ldr	r3, [pc, #220]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4838      	ldr	r0, [pc, #224]	; (800b3b4 <HAL_UART_RxCpltCallback+0x214>)
 800b2d2:	f7ff f9ba 	bl	800a64a <RB_push>
			  if (rxChar == 0xFF) prvRxChar = 0x00;
 800b2d6:	4b34      	ldr	r3, [pc, #208]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2bff      	cmp	r3, #255	; 0xff
 800b2dc:	d102      	bne.n	800b2e4 <HAL_UART_RxCpltCallback+0x144>
 800b2de:	4b33      	ldr	r3, [pc, #204]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
			  prvRxChar = rxChar;
 800b2e4:	4b30      	ldr	r3, [pc, #192]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	4b30      	ldr	r3, [pc, #192]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b2ea:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	492e      	ldr	r1, [pc, #184]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b2f0:	4832      	ldr	r0, [pc, #200]	; (800b3bc <HAL_UART_RxCpltCallback+0x21c>)
 800b2f2:	f004 f84f 	bl	800f394 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 800b2f6:	e04f      	b.n	800b398 <HAL_UART_RxCpltCallback+0x1f8>
	else if (UartHandle->Instance == USART1){
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a30      	ldr	r2, [pc, #192]	; (800b3c0 <HAL_UART_RxCpltCallback+0x220>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d14a      	bne.n	800b398 <HAL_UART_RxCpltCallback+0x1f8>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 800b302:	4b29      	ldr	r3, [pc, #164]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b03      	cmp	r3, #3
 800b308:	d118      	bne.n	800b33c <HAL_UART_RxCpltCallback+0x19c>
 800b30a:	4b28      	ldr	r3, [pc, #160]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b1b      	cmp	r3, #27
 800b310:	d014      	beq.n	800b33c <HAL_UART_RxCpltCallback+0x19c>
		uint8_t start_ch = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 800b316:	482b      	ldr	r0, [pc, #172]	; (800b3c4 <HAL_UART_RxCpltCallback+0x224>)
 800b318:	f7ff f9c5 	bl	800a6a6 <RB_pop>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	2b02      	cmp	r3, #2
 800b324:	d106      	bne.n	800b334 <HAL_UART_RxCpltCallback+0x194>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 800b326:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <HAL_UART_RxCpltCallback+0x218>)
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	2300      	movs	r3, #0
 800b32c:	2200      	movs	r2, #0
 800b32e:	4925      	ldr	r1, [pc, #148]	; (800b3c4 <HAL_UART_RxCpltCallback+0x224>)
 800b330:	f006 fbf2 	bl	8011b18 <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 800b334:	4823      	ldr	r0, [pc, #140]	; (800b3c4 <HAL_UART_RxCpltCallback+0x224>)
 800b336:	f7ff fa21 	bl	800a77c <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 800b33a:	e028      	b.n	800b38e <HAL_UART_RxCpltCallback+0x1ee>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 800b33c:	4b1a      	ldr	r3, [pc, #104]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b1b      	cmp	r3, #27
 800b342:	d108      	bne.n	800b356 <HAL_UART_RxCpltCallback+0x1b6>
 800b344:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b1b      	cmp	r3, #27
 800b34a:	d004      	beq.n	800b356 <HAL_UART_RxCpltCallback+0x1b6>
			 prvRxChar = rxChar;
 800b34c:	4b16      	ldr	r3, [pc, #88]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	4b16      	ldr	r3, [pc, #88]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b352:	701a      	strb	r2, [r3, #0]
 800b354:	e01b      	b.n	800b38e <HAL_UART_RxCpltCallback+0x1ee>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 800b356:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	2b1b      	cmp	r3, #27
 800b35c:	d10d      	bne.n	800b37a <HAL_UART_RxCpltCallback+0x1da>
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b1b      	cmp	r3, #27
 800b364:	d109      	bne.n	800b37a <HAL_UART_RxCpltCallback+0x1da>
			RB_push(&uart1RXrb, rxChar);
 800b366:	4b10      	ldr	r3, [pc, #64]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	4619      	mov	r1, r3
 800b36c:	4815      	ldr	r0, [pc, #84]	; (800b3c4 <HAL_UART_RxCpltCallback+0x224>)
 800b36e:	f7ff f96c 	bl	800a64a <RB_push>
			prvRxChar = 0x00;
 800b372:	4b0e      	ldr	r3, [pc, #56]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b374:	2200      	movs	r2, #0
 800b376:	701a      	strb	r2, [r3, #0]
 800b378:	e009      	b.n	800b38e <HAL_UART_RxCpltCallback+0x1ee>
		  RB_push(&uart1RXrb, rxChar);
 800b37a:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	4619      	mov	r1, r3
 800b380:	4810      	ldr	r0, [pc, #64]	; (800b3c4 <HAL_UART_RxCpltCallback+0x224>)
 800b382:	f7ff f962 	bl	800a64a <RB_push>
		  prvRxChar = rxChar;
 800b386:	4b08      	ldr	r3, [pc, #32]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b388:	781a      	ldrb	r2, [r3, #0]
 800b38a:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <HAL_UART_RxCpltCallback+0x20c>)
 800b38c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 800b38e:	2201      	movs	r2, #1
 800b390:	4905      	ldr	r1, [pc, #20]	; (800b3a8 <HAL_UART_RxCpltCallback+0x208>)
 800b392:	480d      	ldr	r0, [pc, #52]	; (800b3c8 <HAL_UART_RxCpltCallback+0x228>)
 800b394:	f003 fffe 	bl	800f394 <HAL_UART_Receive_IT>
}
 800b398:	bf00      	nop
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	40004c00 	.word	0x40004c00
 800b3a4:	200006aa 	.word	0x200006aa
 800b3a8:	200006a8 	.word	0x200006a8
 800b3ac:	200006a9 	.word	0x200006a9
 800b3b0:	200004a8 	.word	0x200004a8
 800b3b4:	20000640 	.word	0x20000640
 800b3b8:	200004a4 	.word	0x200004a4
 800b3bc:	200005b0 	.word	0x200005b0
 800b3c0:	40013800 	.word	0x40013800
 800b3c4:	20000674 	.word	0x20000674
 800b3c8:	20000520 	.word	0x20000520

0800b3cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b3cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b3d0:	f7ff fda6 	bl	800af20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b3d4:	480c      	ldr	r0, [pc, #48]	; (800b408 <LoopForever+0x6>)
  ldr r1, =_edata
 800b3d6:	490d      	ldr	r1, [pc, #52]	; (800b40c <LoopForever+0xa>)
  ldr r2, =_sidata
 800b3d8:	4a0d      	ldr	r2, [pc, #52]	; (800b410 <LoopForever+0xe>)
  movs r3, #0
 800b3da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b3dc:	e002      	b.n	800b3e4 <LoopCopyDataInit>

0800b3de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b3de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b3e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b3e2:	3304      	adds	r3, #4

0800b3e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b3e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b3e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b3e8:	d3f9      	bcc.n	800b3de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b3ea:	4a0a      	ldr	r2, [pc, #40]	; (800b414 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b3ec:	4c0a      	ldr	r4, [pc, #40]	; (800b418 <LoopForever+0x16>)
  movs r3, #0
 800b3ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b3f0:	e001      	b.n	800b3f6 <LoopFillZerobss>

0800b3f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b3f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b3f4:	3204      	adds	r2, #4

0800b3f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b3f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b3f8:	d3fb      	bcc.n	800b3f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b3fa:	f00a ffa7 	bl	801634c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b3fe:	f7fe f855 	bl	80094ac <main>

0800b402 <LoopForever>:

LoopForever:
    b LoopForever
 800b402:	e7fe      	b.n	800b402 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b404:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800b408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b40c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 800b410:	0801a8f4 	.word	0x0801a8f4
  ldr r2, =_sbss
 800b414:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800b418:	2000654c 	.word	0x2000654c

0800b41c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b41c:	e7fe      	b.n	800b41c <ADC1_IRQHandler>

0800b41e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b428:	2003      	movs	r0, #3
 800b42a:	f000 f902 	bl	800b632 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b42e:	200f      	movs	r0, #15
 800b430:	f7ff fbcc 	bl	800abcc <HAL_InitTick>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d002      	beq.n	800b440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	71fb      	strb	r3, [r7, #7]
 800b43e:	e001      	b.n	800b444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b440:	f7ff f9b0 	bl	800a7a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b444:	79fb      	ldrb	r3, [r7, #7]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <HAL_IncTick+0x20>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	461a      	mov	r2, r3
 800b45a:	4b06      	ldr	r3, [pc, #24]	; (800b474 <HAL_IncTick+0x24>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4413      	add	r3, r2
 800b460:	4a04      	ldr	r2, [pc, #16]	; (800b474 <HAL_IncTick+0x24>)
 800b462:	6013      	str	r3, [r2, #0]
}
 800b464:	bf00      	nop
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20000074 	.word	0x20000074
 800b474:	200006ac 	.word	0x200006ac

0800b478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b478:	b480      	push	{r7}
 800b47a:	af00      	add	r7, sp, #0
  return uwTick;
 800b47c:	4b03      	ldr	r3, [pc, #12]	; (800b48c <HAL_GetTick+0x14>)
 800b47e:	681b      	ldr	r3, [r3, #0]
}
 800b480:	4618      	mov	r0, r3
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	200006ac 	.word	0x200006ac

0800b490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b498:	f7ff ffee 	bl	800b478 <HAL_GetTick>
 800b49c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a8:	d005      	beq.n	800b4b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b4aa:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <HAL_Delay+0x44>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b4b6:	bf00      	nop
 800b4b8:	f7ff ffde 	bl	800b478 <HAL_GetTick>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d8f7      	bhi.n	800b4b8 <HAL_Delay+0x28>
  {
  }
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	20000074 	.word	0x20000074

0800b4d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b4e8:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <__NVIC_SetPriorityGrouping+0x44>)
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b50a:	4a04      	ldr	r2, [pc, #16]	; (800b51c <__NVIC_SetPriorityGrouping+0x44>)
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	60d3      	str	r3, [r2, #12]
}
 800b510:	bf00      	nop
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	e000ed00 	.word	0xe000ed00

0800b520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b524:	4b04      	ldr	r3, [pc, #16]	; (800b538 <__NVIC_GetPriorityGrouping+0x18>)
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	0a1b      	lsrs	r3, r3, #8
 800b52a:	f003 0307 	and.w	r3, r3, #7
}
 800b52e:	4618      	mov	r0, r3
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	e000ed00 	.word	0xe000ed00

0800b53c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	db0b      	blt.n	800b566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	f003 021f 	and.w	r2, r3, #31
 800b554:	4907      	ldr	r1, [pc, #28]	; (800b574 <__NVIC_EnableIRQ+0x38>)
 800b556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b55a:	095b      	lsrs	r3, r3, #5
 800b55c:	2001      	movs	r0, #1
 800b55e:	fa00 f202 	lsl.w	r2, r0, r2
 800b562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	e000e100 	.word	0xe000e100

0800b578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	db0a      	blt.n	800b5a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	490c      	ldr	r1, [pc, #48]	; (800b5c4 <__NVIC_SetPriority+0x4c>)
 800b592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b596:	0112      	lsls	r2, r2, #4
 800b598:	b2d2      	uxtb	r2, r2
 800b59a:	440b      	add	r3, r1
 800b59c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b5a0:	e00a      	b.n	800b5b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	4908      	ldr	r1, [pc, #32]	; (800b5c8 <__NVIC_SetPriority+0x50>)
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	f003 030f 	and.w	r3, r3, #15
 800b5ae:	3b04      	subs	r3, #4
 800b5b0:	0112      	lsls	r2, r2, #4
 800b5b2:	b2d2      	uxtb	r2, r2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	761a      	strb	r2, [r3, #24]
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	e000e100 	.word	0xe000e100
 800b5c8:	e000ed00 	.word	0xe000ed00

0800b5cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b089      	sub	sp, #36	; 0x24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f003 0307 	and.w	r3, r3, #7
 800b5de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f1c3 0307 	rsb	r3, r3, #7
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	bf28      	it	cs
 800b5ea:	2304      	movcs	r3, #4
 800b5ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	2b06      	cmp	r3, #6
 800b5f4:	d902      	bls.n	800b5fc <NVIC_EncodePriority+0x30>
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	3b03      	subs	r3, #3
 800b5fa:	e000      	b.n	800b5fe <NVIC_EncodePriority+0x32>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b600:	f04f 32ff 	mov.w	r2, #4294967295
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	fa02 f303 	lsl.w	r3, r2, r3
 800b60a:	43da      	mvns	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	401a      	ands	r2, r3
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b614:	f04f 31ff 	mov.w	r1, #4294967295
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	fa01 f303 	lsl.w	r3, r1, r3
 800b61e:	43d9      	mvns	r1, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b624:	4313      	orrs	r3, r2
         );
}
 800b626:	4618      	mov	r0, r3
 800b628:	3724      	adds	r7, #36	; 0x24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b082      	sub	sp, #8
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff ff4c 	bl	800b4d8 <__NVIC_SetPriorityGrouping>
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b65a:	f7ff ff61 	bl	800b520 <__NVIC_GetPriorityGrouping>
 800b65e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	6978      	ldr	r0, [r7, #20]
 800b666:	f7ff ffb1 	bl	800b5cc <NVIC_EncodePriority>
 800b66a:	4602      	mov	r2, r0
 800b66c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff ff80 	bl	800b578 <__NVIC_SetPriority>
}
 800b678:	bf00      	nop
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff ff54 	bl	800b53c <__NVIC_EnableIRQ>
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d008      	beq.n	800b6c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2204      	movs	r2, #4
 800b6b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e040      	b.n	800b748 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f022 020e 	bic.w	r2, r2, #14
 800b6d4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 0201 	bic.w	r2, r2, #1
 800b6f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6fa:	f003 021c 	and.w	r2, r3, #28
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	2101      	movs	r1, #1
 800b704:	fa01 f202 	lsl.w	r2, r1, r2
 800b708:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b712:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00c      	beq.n	800b736 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b72a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b734:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d005      	beq.n	800b778 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2204      	movs	r2, #4
 800b770:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	73fb      	strb	r3, [r7, #15]
 800b776:	e047      	b.n	800b808 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f022 020e 	bic.w	r2, r2, #14
 800b786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 0201 	bic.w	r2, r2, #1
 800b796:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ac:	f003 021c 	and.w	r2, r3, #28
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	fa01 f202 	lsl.w	r2, r1, r2
 800b7ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b7c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00c      	beq.n	800b7e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b7e6:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	4798      	blx	r3
    }
  }
  return status;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800b822:	2300      	movs	r3, #0
 800b824:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b826:	4b2f      	ldr	r3, [pc, #188]	; (800b8e4 <HAL_FLASH_Program+0xd0>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d101      	bne.n	800b832 <HAL_FLASH_Program+0x1e>
 800b82e:	2302      	movs	r3, #2
 800b830:	e053      	b.n	800b8da <HAL_FLASH_Program+0xc6>
 800b832:	4b2c      	ldr	r3, [pc, #176]	; (800b8e4 <HAL_FLASH_Program+0xd0>)
 800b834:	2201      	movs	r2, #1
 800b836:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b838:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b83c:	f000 f894 	bl	800b968 <FLASH_WaitForLastOperation>
 800b840:	4603      	mov	r3, r0
 800b842:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800b844:	7dfb      	ldrb	r3, [r7, #23]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d143      	bne.n	800b8d2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b84a:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <HAL_FLASH_Program+0xd0>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800b850:	4b25      	ldr	r3, [pc, #148]	; (800b8e8 <HAL_FLASH_Program+0xd4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d009      	beq.n	800b870 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800b85c:	4b22      	ldr	r3, [pc, #136]	; (800b8e8 <HAL_FLASH_Program+0xd4>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a21      	ldr	r2, [pc, #132]	; (800b8e8 <HAL_FLASH_Program+0xd4>)
 800b862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b866:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800b868:	4b1e      	ldr	r3, [pc, #120]	; (800b8e4 <HAL_FLASH_Program+0xd0>)
 800b86a:	2202      	movs	r2, #2
 800b86c:	771a      	strb	r2, [r3, #28]
 800b86e:	e002      	b.n	800b876 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800b870:	4b1c      	ldr	r3, [pc, #112]	; (800b8e4 <HAL_FLASH_Program+0xd0>)
 800b872:	2200      	movs	r2, #0
 800b874:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d107      	bne.n	800b88c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800b87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f000 f8c9 	bl	800ba18 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800b886:	2301      	movs	r3, #1
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	e010      	b.n	800b8ae <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d002      	beq.n	800b898 <HAL_FLASH_Program+0x84>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2b02      	cmp	r3, #2
 800b896:	d10a      	bne.n	800b8ae <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	4619      	mov	r1, r3
 800b89c:	68b8      	ldr	r0, [r7, #8]
 800b89e:	f000 f8e1 	bl	800ba64 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d102      	bne.n	800b8ae <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800b8a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b8ac:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b8ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b8b2:	f000 f859 	bl	800b968 <FLASH_WaitForLastOperation>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d006      	beq.n	800b8ce <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800b8c0:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <HAL_FLASH_Program+0xd4>)
 800b8c2:	695a      	ldr	r2, [r3, #20]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	43db      	mvns	r3, r3
 800b8c8:	4907      	ldr	r1, [pc, #28]	; (800b8e8 <HAL_FLASH_Program+0xd4>)
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800b8ce:	f000 fa17 	bl	800bd00 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b8d2:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <HAL_FLASH_Program+0xd0>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]

  return status;
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000078 	.word	0x20000078
 800b8e8:	40022000 	.word	0x40022000

0800b8ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <HAL_FLASH_Unlock+0x38>)
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	da0b      	bge.n	800b916 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b8fe:	4b09      	ldr	r3, [pc, #36]	; (800b924 <HAL_FLASH_Unlock+0x38>)
 800b900:	4a09      	ldr	r2, [pc, #36]	; (800b928 <HAL_FLASH_Unlock+0x3c>)
 800b902:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b904:	4b07      	ldr	r3, [pc, #28]	; (800b924 <HAL_FLASH_Unlock+0x38>)
 800b906:	4a09      	ldr	r2, [pc, #36]	; (800b92c <HAL_FLASH_Unlock+0x40>)
 800b908:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <HAL_FLASH_Unlock+0x38>)
 800b90c:	695b      	ldr	r3, [r3, #20]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	da01      	bge.n	800b916 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800b916:	79fb      	ldrb	r3, [r7, #7]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	40022000 	.word	0x40022000
 800b928:	45670123 	.word	0x45670123
 800b92c:	cdef89ab 	.word	0xcdef89ab

0800b930 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <HAL_FLASH_Lock+0x1c>)
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	4a04      	ldr	r2, [pc, #16]	; (800b94c <HAL_FLASH_Lock+0x1c>)
 800b93a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b93e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	40022000 	.word	0x40022000

0800b950 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 800b950:	b480      	push	{r7}
 800b952:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800b954:	4b03      	ldr	r3, [pc, #12]	; (800b964 <HAL_FLASH_GetError+0x14>)
 800b956:	685b      	ldr	r3, [r3, #4]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	20000078 	.word	0x20000078

0800b968 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800b970:	f7ff fd82 	bl	800b478 <HAL_GetTick>
 800b974:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800b976:	e00d      	b.n	800b994 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97e:	d009      	beq.n	800b994 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800b980:	f7ff fd7a 	bl	800b478 <HAL_GetTick>
 800b984:	4602      	mov	r2, r0
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d801      	bhi.n	800b994 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	e036      	b.n	800ba02 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800b994:	4b1d      	ldr	r3, [pc, #116]	; (800ba0c <FLASH_WaitForLastOperation+0xa4>)
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1eb      	bne.n	800b978 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800b9a0:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <FLASH_WaitForLastOperation+0xa4>)
 800b9a2:	691a      	ldr	r2, [r3, #16]
 800b9a4:	4b1a      	ldr	r3, [pc, #104]	; (800ba10 <FLASH_WaitForLastOperation+0xa8>)
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d01e      	beq.n	800b9ee <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800b9b0:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <FLASH_WaitForLastOperation+0xac>)
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	4a16      	ldr	r2, [pc, #88]	; (800ba14 <FLASH_WaitForLastOperation+0xac>)
 800b9ba:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d007      	beq.n	800b9d6 <FLASH_WaitForLastOperation+0x6e>
 800b9c6:	4b11      	ldr	r3, [pc, #68]	; (800ba0c <FLASH_WaitForLastOperation+0xa4>)
 800b9c8:	699a      	ldr	r2, [r3, #24]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9d0:	490e      	ldr	r1, [pc, #56]	; (800ba0c <FLASH_WaitForLastOperation+0xa4>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	618b      	str	r3, [r1, #24]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d004      	beq.n	800b9ea <FLASH_WaitForLastOperation+0x82>
 800b9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ba0c <FLASH_WaitForLastOperation+0xa4>)
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b9e8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e009      	b.n	800ba02 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <FLASH_WaitForLastOperation+0xa4>)
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b9fa:	4b04      	ldr	r3, [pc, #16]	; (800ba0c <FLASH_WaitForLastOperation+0xa4>)
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	40022000 	.word	0x40022000
 800ba10:	0002c3fa 	.word	0x0002c3fa
 800ba14:	20000078 	.word	0x20000078

0800ba18 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ba24:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <FLASH_Program_DoubleWord+0x48>)
 800ba26:	695b      	ldr	r3, [r3, #20]
 800ba28:	4a0d      	ldr	r2, [pc, #52]	; (800ba60 <FLASH_Program_DoubleWord+0x48>)
 800ba2a:	f043 0301 	orr.w	r3, r3, #1
 800ba2e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800ba36:	f3bf 8f6f 	isb	sy
}
 800ba3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800ba3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba40:	f04f 0200 	mov.w	r2, #0
 800ba44:	f04f 0300 	mov.w	r3, #0
 800ba48:	000a      	movs	r2, r1
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	68f9      	ldr	r1, [r7, #12]
 800ba4e:	3104      	adds	r1, #4
 800ba50:	4613      	mov	r3, r2
 800ba52:	600b      	str	r3, [r1, #0]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	40022000 	.word	0x40022000

0800ba64 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b089      	sub	sp, #36	; 0x24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800ba6e:	2380      	movs	r3, #128	; 0x80
 800ba70:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800ba7a:	4b14      	ldr	r3, [pc, #80]	; (800bacc <FLASH_Program_Fast+0x68>)
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	4a13      	ldr	r2, [pc, #76]	; (800bacc <FLASH_Program_Fast+0x68>)
 800ba80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba86:	f3ef 8310 	mrs	r3, PRIMASK
 800ba8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba8c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800ba8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba90:	b672      	cpsid	i
}
 800ba92:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	3304      	adds	r3, #4
 800baa6:	617b      	str	r3, [r7, #20]
    row_index--;
 800baa8:	7ffb      	ldrb	r3, [r7, #31]
 800baaa:	3b01      	subs	r3, #1
 800baac:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800baae:	7ffb      	ldrb	r3, [r7, #31]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1ef      	bne.n	800ba94 <FLASH_Program_Fast+0x30>
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	f383 8810 	msr	PRIMASK, r3
}
 800babe:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800bac0:	bf00      	nop
 800bac2:	3724      	adds	r7, #36	; 0x24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	40022000 	.word	0x40022000

0800bad0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bada:	4b49      	ldr	r3, [pc, #292]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d101      	bne.n	800bae6 <HAL_FLASHEx_Erase+0x16>
 800bae2:	2302      	movs	r3, #2
 800bae4:	e087      	b.n	800bbf6 <HAL_FLASHEx_Erase+0x126>
 800bae6:	4b46      	ldr	r3, [pc, #280]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800bae8:	2201      	movs	r2, #1
 800baea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800baec:	f24c 3050 	movw	r0, #50000	; 0xc350
 800baf0:	f7ff ff3a 	bl	800b968 <FLASH_WaitForLastOperation>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d177      	bne.n	800bbee <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bafe:	4b40      	ldr	r3, [pc, #256]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800bb04:	4b3f      	ldr	r3, [pc, #252]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d013      	beq.n	800bb38 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800bb10:	4b3c      	ldr	r3, [pc, #240]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d009      	beq.n	800bb30 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800bb1c:	4b39      	ldr	r3, [pc, #228]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a38      	ldr	r2, [pc, #224]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb26:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800bb28:	4b35      	ldr	r3, [pc, #212]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	771a      	strb	r2, [r3, #28]
 800bb2e:	e016      	b.n	800bb5e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800bb30:	4b33      	ldr	r3, [pc, #204]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800bb32:	2201      	movs	r2, #1
 800bb34:	771a      	strb	r2, [r3, #28]
 800bb36:	e012      	b.n	800bb5e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800bb38:	4b32      	ldr	r3, [pc, #200]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d009      	beq.n	800bb58 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800bb44:	4b2f      	ldr	r3, [pc, #188]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a2e      	ldr	r2, [pc, #184]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb4e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800bb50:	4b2b      	ldr	r3, [pc, #172]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800bb52:	2202      	movs	r2, #2
 800bb54:	771a      	strb	r2, [r3, #28]
 800bb56:	e002      	b.n	800bb5e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800bb58:	4b29      	ldr	r3, [pc, #164]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d113      	bne.n	800bb8e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 f84c 	bl	800bc08 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bb70:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bb74:	f7ff fef8 	bl	800b968 <FLASH_WaitForLastOperation>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800bb7c:	4b21      	ldr	r3, [pc, #132]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	4a20      	ldr	r2, [pc, #128]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bb82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb86:	f023 0304 	bic.w	r3, r3, #4
 800bb8a:	6153      	str	r3, [r2, #20]
 800bb8c:	e02d      	b.n	800bbea <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295
 800bb94:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	60bb      	str	r3, [r7, #8]
 800bb9c:	e01d      	b.n	800bbda <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	4619      	mov	r1, r3
 800bba4:	68b8      	ldr	r0, [r7, #8]
 800bba6:	f000 f867 	bl	800bc78 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bbaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bbae:	f7ff fedb 	bl	800b968 <FLASH_WaitForLastOperation>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800bbb6:	4b13      	ldr	r3, [pc, #76]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	4a12      	ldr	r2, [pc, #72]	; (800bc04 <HAL_FLASHEx_Erase+0x134>)
 800bbbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bbc0:	f023 0302 	bic.w	r3, r3, #2
 800bbc4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d003      	beq.n	800bbd4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	601a      	str	r2, [r3, #0]
          break;
 800bbd2:	e00a      	b.n	800bbea <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	60bb      	str	r3, [r7, #8]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	689a      	ldr	r2, [r3, #8]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d3d9      	bcc.n	800bb9e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800bbea:	f000 f889 	bl	800bd00 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bbee:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <HAL_FLASHEx_Erase+0x130>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	701a      	strb	r2, [r3, #0]

  return status;
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000078 	.word	0x20000078
 800bc04:	40022000 	.word	0x40022000

0800bc08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800bc10:	4b18      	ldr	r3, [pc, #96]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d016      	beq.n	800bc4a <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d005      	beq.n	800bc32 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800bc26:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	4a12      	ldr	r2, [pc, #72]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc2c:	f043 0304 	orr.w	r3, r3, #4
 800bc30:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800bc3c:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	4a0c      	ldr	r2, [pc, #48]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc46:	6153      	str	r3, [r2, #20]
 800bc48:	e007      	b.n	800bc5a <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	4a09      	ldr	r2, [pc, #36]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc54:	f043 0304 	orr.w	r3, r3, #4
 800bc58:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800bc5a:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	4a05      	ldr	r2, [pc, #20]	; (800bc74 <FLASH_MassErase+0x6c>)
 800bc60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc64:	6153      	str	r3, [r2, #20]
}
 800bc66:	bf00      	nop
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	40022000 	.word	0x40022000

0800bc78 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800bc82:	4b1e      	ldr	r3, [pc, #120]	; (800bcfc <FLASH_PageErase+0x84>)
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d106      	bne.n	800bc9c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800bc8e:	4b1b      	ldr	r3, [pc, #108]	; (800bcfc <FLASH_PageErase+0x84>)
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	4a1a      	ldr	r2, [pc, #104]	; (800bcfc <FLASH_PageErase+0x84>)
 800bc94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc98:	6153      	str	r3, [r2, #20]
 800bc9a:	e011      	b.n	800bcc0 <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d006      	beq.n	800bcb4 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800bca6:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <FLASH_PageErase+0x84>)
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	4a14      	ldr	r2, [pc, #80]	; (800bcfc <FLASH_PageErase+0x84>)
 800bcac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcb0:	6153      	str	r3, [r2, #20]
 800bcb2:	e005      	b.n	800bcc0 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800bcb4:	4b11      	ldr	r3, [pc, #68]	; (800bcfc <FLASH_PageErase+0x84>)
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	4a10      	ldr	r2, [pc, #64]	; (800bcfc <FLASH_PageErase+0x84>)
 800bcba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bcbe:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800bcc0:	4b0e      	ldr	r3, [pc, #56]	; (800bcfc <FLASH_PageErase+0x84>)
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800bcd0:	490a      	ldr	r1, [pc, #40]	; (800bcfc <FLASH_PageErase+0x84>)
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800bcd6:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <FLASH_PageErase+0x84>)
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	4a08      	ldr	r2, [pc, #32]	; (800bcfc <FLASH_PageErase+0x84>)
 800bcdc:	f043 0302 	orr.w	r3, r3, #2
 800bce0:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800bce2:	4b06      	ldr	r3, [pc, #24]	; (800bcfc <FLASH_PageErase+0x84>)
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	4a05      	ldr	r2, [pc, #20]	; (800bcfc <FLASH_PageErase+0x84>)
 800bce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcec:	6153      	str	r3, [r2, #20]
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	40022000 	.word	0x40022000

0800bd00 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800bd06:	4b21      	ldr	r3, [pc, #132]	; (800bd8c <FLASH_FlushCaches+0x8c>)
 800bd08:	7f1b      	ldrb	r3, [r3, #28]
 800bd0a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800bd0c:	79fb      	ldrb	r3, [r7, #7]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d002      	beq.n	800bd18 <FLASH_FlushCaches+0x18>
 800bd12:	79fb      	ldrb	r3, [r7, #7]
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	d117      	bne.n	800bd48 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800bd18:	4b1d      	ldr	r3, [pc, #116]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a1c      	ldr	r2, [pc, #112]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd22:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800bd24:	4b1a      	ldr	r3, [pc, #104]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a19      	ldr	r2, [pc, #100]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	4b17      	ldr	r3, [pc, #92]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a16      	ldr	r2, [pc, #88]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd3a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bd3c:	4b14      	ldr	r3, [pc, #80]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a13      	ldr	r2, [pc, #76]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd46:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d002      	beq.n	800bd54 <FLASH_FlushCaches+0x54>
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	2b03      	cmp	r3, #3
 800bd52:	d111      	bne.n	800bd78 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800bd54:	4b0e      	ldr	r3, [pc, #56]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a0d      	ldr	r2, [pc, #52]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a0a      	ldr	r2, [pc, #40]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd6a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800bd6c:	4b08      	ldr	r3, [pc, #32]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a07      	ldr	r2, [pc, #28]	; (800bd90 <FLASH_FlushCaches+0x90>)
 800bd72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd76:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800bd78:	4b04      	ldr	r3, [pc, #16]	; (800bd8c <FLASH_FlushCaches+0x8c>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	771a      	strb	r2, [r3, #28]
}
 800bd7e:	bf00      	nop
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	20000078 	.word	0x20000078
 800bd90:	40022000 	.word	0x40022000

0800bd94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bda2:	e166      	b.n	800c072 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	2101      	movs	r1, #1
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	fa01 f303 	lsl.w	r3, r1, r3
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 8158 	beq.w	800c06c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	f003 0303 	and.w	r3, r3, #3
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d005      	beq.n	800bdd4 <HAL_GPIO_Init+0x40>
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f003 0303 	and.w	r3, r3, #3
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d130      	bne.n	800be36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	2203      	movs	r2, #3
 800bde0:	fa02 f303 	lsl.w	r3, r2, r3
 800bde4:	43db      	mvns	r3, r3
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	4013      	ands	r3, r2
 800bdea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	68da      	ldr	r2, [r3, #12]
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800be0a:	2201      	movs	r2, #1
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	fa02 f303 	lsl.w	r3, r2, r3
 800be12:	43db      	mvns	r3, r3
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4013      	ands	r3, r2
 800be18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	091b      	lsrs	r3, r3, #4
 800be20:	f003 0201 	and.w	r2, r3, #1
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	fa02 f303 	lsl.w	r3, r2, r3
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	f003 0303 	and.w	r3, r3, #3
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d017      	beq.n	800be72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	2203      	movs	r2, #3
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	43db      	mvns	r3, r3
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	4013      	ands	r3, r2
 800be58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	689a      	ldr	r2, [r3, #8]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	fa02 f303 	lsl.w	r3, r2, r3
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	4313      	orrs	r3, r2
 800be6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f003 0303 	and.w	r3, r3, #3
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d123      	bne.n	800bec6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	08da      	lsrs	r2, r3, #3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	3208      	adds	r2, #8
 800be86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	f003 0307 	and.w	r3, r3, #7
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	220f      	movs	r2, #15
 800be96:	fa02 f303 	lsl.w	r3, r2, r3
 800be9a:	43db      	mvns	r3, r3
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	4013      	ands	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	691a      	ldr	r2, [r3, #16]
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f003 0307 	and.w	r3, r3, #7
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	fa02 f303 	lsl.w	r3, r2, r3
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	08da      	lsrs	r2, r3, #3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3208      	adds	r2, #8
 800bec0:	6939      	ldr	r1, [r7, #16]
 800bec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	2203      	movs	r2, #3
 800bed2:	fa02 f303 	lsl.w	r3, r2, r3
 800bed6:	43db      	mvns	r3, r3
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	4013      	ands	r3, r2
 800bedc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	f003 0203 	and.w	r2, r3, #3
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	fa02 f303 	lsl.w	r3, r2, r3
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 80b2 	beq.w	800c06c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf08:	4b61      	ldr	r3, [pc, #388]	; (800c090 <HAL_GPIO_Init+0x2fc>)
 800bf0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf0c:	4a60      	ldr	r2, [pc, #384]	; (800c090 <HAL_GPIO_Init+0x2fc>)
 800bf0e:	f043 0301 	orr.w	r3, r3, #1
 800bf12:	6613      	str	r3, [r2, #96]	; 0x60
 800bf14:	4b5e      	ldr	r3, [pc, #376]	; (800c090 <HAL_GPIO_Init+0x2fc>)
 800bf16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800bf20:	4a5c      	ldr	r2, [pc, #368]	; (800c094 <HAL_GPIO_Init+0x300>)
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	089b      	lsrs	r3, r3, #2
 800bf26:	3302      	adds	r3, #2
 800bf28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	f003 0303 	and.w	r3, r3, #3
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	220f      	movs	r2, #15
 800bf38:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3c:	43db      	mvns	r3, r3
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	4013      	ands	r3, r2
 800bf42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bf4a:	d02b      	beq.n	800bfa4 <HAL_GPIO_Init+0x210>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a52      	ldr	r2, [pc, #328]	; (800c098 <HAL_GPIO_Init+0x304>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d025      	beq.n	800bfa0 <HAL_GPIO_Init+0x20c>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a51      	ldr	r2, [pc, #324]	; (800c09c <HAL_GPIO_Init+0x308>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d01f      	beq.n	800bf9c <HAL_GPIO_Init+0x208>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a50      	ldr	r2, [pc, #320]	; (800c0a0 <HAL_GPIO_Init+0x30c>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d019      	beq.n	800bf98 <HAL_GPIO_Init+0x204>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a4f      	ldr	r2, [pc, #316]	; (800c0a4 <HAL_GPIO_Init+0x310>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d013      	beq.n	800bf94 <HAL_GPIO_Init+0x200>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a4e      	ldr	r2, [pc, #312]	; (800c0a8 <HAL_GPIO_Init+0x314>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d00d      	beq.n	800bf90 <HAL_GPIO_Init+0x1fc>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a4d      	ldr	r2, [pc, #308]	; (800c0ac <HAL_GPIO_Init+0x318>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d007      	beq.n	800bf8c <HAL_GPIO_Init+0x1f8>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a4c      	ldr	r2, [pc, #304]	; (800c0b0 <HAL_GPIO_Init+0x31c>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d101      	bne.n	800bf88 <HAL_GPIO_Init+0x1f4>
 800bf84:	2307      	movs	r3, #7
 800bf86:	e00e      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bf88:	2308      	movs	r3, #8
 800bf8a:	e00c      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bf8c:	2306      	movs	r3, #6
 800bf8e:	e00a      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bf90:	2305      	movs	r3, #5
 800bf92:	e008      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bf94:	2304      	movs	r3, #4
 800bf96:	e006      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e004      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bf9c:	2302      	movs	r3, #2
 800bf9e:	e002      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e000      	b.n	800bfa6 <HAL_GPIO_Init+0x212>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	f002 0203 	and.w	r2, r2, #3
 800bfac:	0092      	lsls	r2, r2, #2
 800bfae:	4093      	lsls	r3, r2
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800bfb6:	4937      	ldr	r1, [pc, #220]	; (800c094 <HAL_GPIO_Init+0x300>)
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	089b      	lsrs	r3, r3, #2
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bfc4:	4b3b      	ldr	r3, [pc, #236]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bfe8:	4a32      	ldr	r2, [pc, #200]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bfee:	4b31      	ldr	r3, [pc, #196]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	43db      	mvns	r3, r3
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	4013      	ands	r3, r2
 800bffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4313      	orrs	r3, r2
 800c010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c012:	4a28      	ldr	r2, [pc, #160]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c018:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	43db      	mvns	r3, r3
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	4013      	ands	r3, r2
 800c026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	4313      	orrs	r3, r2
 800c03a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c03c:	4a1d      	ldr	r2, [pc, #116]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800c042:	4b1c      	ldr	r3, [pc, #112]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	43db      	mvns	r3, r3
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	4013      	ands	r3, r2
 800c050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4313      	orrs	r3, r2
 800c064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c066:	4a13      	ldr	r2, [pc, #76]	; (800c0b4 <HAL_GPIO_Init+0x320>)
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	3301      	adds	r3, #1
 800c070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	fa22 f303 	lsr.w	r3, r2, r3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f47f ae91 	bne.w	800bda4 <HAL_GPIO_Init+0x10>
  }
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	371c      	adds	r7, #28
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	40021000 	.word	0x40021000
 800c094:	40010000 	.word	0x40010000
 800c098:	48000400 	.word	0x48000400
 800c09c:	48000800 	.word	0x48000800
 800c0a0:	48000c00 	.word	0x48000c00
 800c0a4:	48001000 	.word	0x48001000
 800c0a8:	48001400 	.word	0x48001400
 800c0ac:	48001800 	.word	0x48001800
 800c0b0:	48001c00 	.word	0x48001c00
 800c0b4:	40010400 	.word	0x40010400

0800c0b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	807b      	strh	r3, [r7, #2]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c0c8:	787b      	ldrb	r3, [r7, #1]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c0ce:	887a      	ldrh	r2, [r7, #2]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c0d4:	e002      	b.n	800c0dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c0d6:	887a      	ldrh	r2, [r7, #2]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c0fa:	887a      	ldrh	r2, [r7, #2]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	4013      	ands	r3, r2
 800c100:	041a      	lsls	r2, r3, #16
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	43d9      	mvns	r1, r3
 800c106:	887b      	ldrh	r3, [r7, #2]
 800c108:	400b      	ands	r3, r1
 800c10a:	431a      	orrs	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	619a      	str	r2, [r3, #24]
}
 800c110:	bf00      	nop
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	4603      	mov	r3, r0
 800c124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c126:	4b08      	ldr	r3, [pc, #32]	; (800c148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c128:	695a      	ldr	r2, [r3, #20]
 800c12a:	88fb      	ldrh	r3, [r7, #6]
 800c12c:	4013      	ands	r3, r2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d006      	beq.n	800c140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c132:	4a05      	ldr	r2, [pc, #20]	; (800c148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c134:	88fb      	ldrh	r3, [r7, #6]
 800c136:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c138:	88fb      	ldrh	r3, [r7, #6]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 f806 	bl	800c14c <HAL_GPIO_EXTI_Callback>
  }
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	40010400 	.word	0x40010400

0800c14c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800c156:	bf00      	nop
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e081      	b.n	800c278 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d106      	bne.n	800c18e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7fe fb33 	bl	800a7f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2224      	movs	r2, #36	; 0x24
 800c192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f022 0201 	bic.w	r2, r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c1b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c1c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d107      	bne.n	800c1dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689a      	ldr	r2, [r3, #8]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1d8:	609a      	str	r2, [r3, #8]
 800c1da:	e006      	b.n	800c1ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	689a      	ldr	r2, [r3, #8]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c1e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d104      	bne.n	800c1fc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	6812      	ldr	r2, [r2, #0]
 800c206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c20a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c20e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68da      	ldr	r2, [r3, #12]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c21e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	691a      	ldr	r2, [r3, #16]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	695b      	ldr	r3, [r3, #20]
 800c228:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	430a      	orrs	r2, r1
 800c238:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	69d9      	ldr	r1, [r3, #28]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1a      	ldr	r2, [r3, #32]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f042 0201 	orr.w	r2, r2, #1
 800c258:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2220      	movs	r2, #32
 800c264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af02      	add	r7, sp, #8
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	607a      	str	r2, [r7, #4]
 800c28a:	461a      	mov	r2, r3
 800c28c:	460b      	mov	r3, r1
 800c28e:	817b      	strh	r3, [r7, #10]
 800c290:	4613      	mov	r3, r2
 800c292:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b20      	cmp	r3, #32
 800c29e:	f040 80da 	bne.w	800c456 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <HAL_I2C_Master_Transmit+0x30>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e0d3      	b.n	800c458 <HAL_I2C_Master_Transmit+0x1d8>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c2b8:	f7ff f8de 	bl	800b478 <HAL_GetTick>
 800c2bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	2319      	movs	r3, #25
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 fcd6 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e0be      	b.n	800c458 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2221      	movs	r2, #33	; 0x21
 800c2de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2210      	movs	r2, #16
 800c2e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	893a      	ldrh	r2, [r7, #8]
 800c2fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c306:	b29b      	uxth	r3, r3
 800c308:	2bff      	cmp	r3, #255	; 0xff
 800c30a:	d90e      	bls.n	800c32a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	22ff      	movs	r2, #255	; 0xff
 800c310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c316:	b2da      	uxtb	r2, r3
 800c318:	8979      	ldrh	r1, [r7, #10]
 800c31a:	4b51      	ldr	r3, [pc, #324]	; (800c460 <HAL_I2C_Master_Transmit+0x1e0>)
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f000 fecc 	bl	800d0c0 <I2C_TransferConfig>
 800c328:	e06c      	b.n	800c404 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c32e:	b29a      	uxth	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	8979      	ldrh	r1, [r7, #10]
 800c33c:	4b48      	ldr	r3, [pc, #288]	; (800c460 <HAL_I2C_Master_Transmit+0x1e0>)
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f000 febb 	bl	800d0c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c34a:	e05b      	b.n	800c404 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	6a39      	ldr	r1, [r7, #32]
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 fcd3 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e07b      	b.n	800c458 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	781a      	ldrb	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	3b01      	subs	r3, #1
 800c37e:	b29a      	uxth	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c388:	3b01      	subs	r3, #1
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c394:	b29b      	uxth	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d034      	beq.n	800c404 <HAL_I2C_Master_Transmit+0x184>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d130      	bne.n	800c404 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	2180      	movs	r1, #128	; 0x80
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f000 fc65 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e04d      	b.n	800c458 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	2bff      	cmp	r3, #255	; 0xff
 800c3c4:	d90e      	bls.n	800c3e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	22ff      	movs	r2, #255	; 0xff
 800c3ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	8979      	ldrh	r1, [r7, #10]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 fe6f 	bl	800d0c0 <I2C_TransferConfig>
 800c3e2:	e00f      	b.n	800c404 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	8979      	ldrh	r1, [r7, #10]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 fe5e 	bl	800d0c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c408:	b29b      	uxth	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d19e      	bne.n	800c34c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	6a39      	ldr	r1, [r7, #32]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f000 fcb2 	bl	800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c418:	4603      	mov	r3, r0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d001      	beq.n	800c422 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e01a      	b.n	800c458 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2220      	movs	r2, #32
 800c428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	6859      	ldr	r1, [r3, #4]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	4b0b      	ldr	r3, [pc, #44]	; (800c464 <HAL_I2C_Master_Transmit+0x1e4>)
 800c436:	400b      	ands	r3, r1
 800c438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2220      	movs	r2, #32
 800c43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	e000      	b.n	800c458 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800c456:	2302      	movs	r3, #2
  }
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	80002000 	.word	0x80002000
 800c464:	fe00e800 	.word	0xfe00e800

0800c468 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af02      	add	r7, sp, #8
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	607a      	str	r2, [r7, #4]
 800c472:	461a      	mov	r2, r3
 800c474:	460b      	mov	r3, r1
 800c476:	817b      	strh	r3, [r7, #10]
 800c478:	4613      	mov	r3, r2
 800c47a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b20      	cmp	r3, #32
 800c486:	f040 80db 	bne.w	800c640 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c490:	2b01      	cmp	r3, #1
 800c492:	d101      	bne.n	800c498 <HAL_I2C_Master_Receive+0x30>
 800c494:	2302      	movs	r3, #2
 800c496:	e0d4      	b.n	800c642 <HAL_I2C_Master_Receive+0x1da>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c4a0:	f7fe ffea 	bl	800b478 <HAL_GetTick>
 800c4a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	2319      	movs	r3, #25
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f000 fbe2 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e0bf      	b.n	800c642 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2222      	movs	r2, #34	; 0x22
 800c4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2210      	movs	r2, #16
 800c4ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	893a      	ldrh	r2, [r7, #8]
 800c4e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	2bff      	cmp	r3, #255	; 0xff
 800c4f2:	d90e      	bls.n	800c512 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	22ff      	movs	r2, #255	; 0xff
 800c4f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	8979      	ldrh	r1, [r7, #10]
 800c502:	4b52      	ldr	r3, [pc, #328]	; (800c64c <HAL_I2C_Master_Receive+0x1e4>)
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f000 fdd8 	bl	800d0c0 <I2C_TransferConfig>
 800c510:	e06d      	b.n	800c5ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c516:	b29a      	uxth	r2, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c520:	b2da      	uxtb	r2, r3
 800c522:	8979      	ldrh	r1, [r7, #10]
 800c524:	4b49      	ldr	r3, [pc, #292]	; (800c64c <HAL_I2C_Master_Receive+0x1e4>)
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f000 fdc7 	bl	800d0c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800c532:	e05c      	b.n	800c5ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	6a39      	ldr	r1, [r7, #32]
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 fc5b 	bl	800cdf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	e07c      	b.n	800c642 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c552:	b2d2      	uxtb	r2, r2
 800c554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c564:	3b01      	subs	r3, #1
 800c566:	b29a      	uxth	r2, r3
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c570:	b29b      	uxth	r3, r3
 800c572:	3b01      	subs	r3, #1
 800c574:	b29a      	uxth	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c57e:	b29b      	uxth	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d034      	beq.n	800c5ee <HAL_I2C_Master_Receive+0x186>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d130      	bne.n	800c5ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	6a3b      	ldr	r3, [r7, #32]
 800c592:	2200      	movs	r2, #0
 800c594:	2180      	movs	r1, #128	; 0x80
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 fb70 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e04d      	b.n	800c642 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	2bff      	cmp	r3, #255	; 0xff
 800c5ae:	d90e      	bls.n	800c5ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	22ff      	movs	r2, #255	; 0xff
 800c5b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	8979      	ldrh	r1, [r7, #10]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 fd7a 	bl	800d0c0 <I2C_TransferConfig>
 800c5cc:	e00f      	b.n	800c5ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	8979      	ldrh	r1, [r7, #10]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 fd69 	bl	800d0c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d19d      	bne.n	800c534 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c5f8:	697a      	ldr	r2, [r7, #20]
 800c5fa:	6a39      	ldr	r1, [r7, #32]
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f000 fbbd 	bl	800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	e01a      	b.n	800c642 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2220      	movs	r2, #32
 800c612:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6859      	ldr	r1, [r3, #4]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <HAL_I2C_Master_Receive+0x1e8>)
 800c620:	400b      	ands	r3, r1
 800c622:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2220      	movs	r2, #32
 800c628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	e000      	b.n	800c642 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800c640:	2302      	movs	r3, #2
  }
}
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	80002400 	.word	0x80002400
 800c650:	fe00e800 	.word	0xfe00e800

0800c654 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af02      	add	r7, sp, #8
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	4608      	mov	r0, r1
 800c65e:	4611      	mov	r1, r2
 800c660:	461a      	mov	r2, r3
 800c662:	4603      	mov	r3, r0
 800c664:	817b      	strh	r3, [r7, #10]
 800c666:	460b      	mov	r3, r1
 800c668:	813b      	strh	r3, [r7, #8]
 800c66a:	4613      	mov	r3, r2
 800c66c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b20      	cmp	r3, #32
 800c678:	f040 80f9 	bne.w	800c86e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <HAL_I2C_Mem_Write+0x34>
 800c682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c684:	2b00      	cmp	r3, #0
 800c686:	d105      	bne.n	800c694 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c68e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	e0ed      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d101      	bne.n	800c6a2 <HAL_I2C_Mem_Write+0x4e>
 800c69e:	2302      	movs	r3, #2
 800c6a0:	e0e6      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c6aa:	f7fe fee5 	bl	800b478 <HAL_GetTick>
 800c6ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	2319      	movs	r3, #25
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f000 fadd 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d001      	beq.n	800c6cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e0d1      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2221      	movs	r2, #33	; 0x21
 800c6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2240      	movs	r2, #64	; 0x40
 800c6d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6a3a      	ldr	r2, [r7, #32]
 800c6e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c6ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c6f4:	88f8      	ldrh	r0, [r7, #6]
 800c6f6:	893a      	ldrh	r2, [r7, #8]
 800c6f8:	8979      	ldrh	r1, [r7, #10]
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	4603      	mov	r3, r0
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 f9ed 	bl	800cae4 <I2C_RequestMemoryWrite>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d005      	beq.n	800c71c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e0a9      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c720:	b29b      	uxth	r3, r3
 800c722:	2bff      	cmp	r3, #255	; 0xff
 800c724:	d90e      	bls.n	800c744 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	22ff      	movs	r2, #255	; 0xff
 800c72a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c730:	b2da      	uxtb	r2, r3
 800c732:	8979      	ldrh	r1, [r7, #10]
 800c734:	2300      	movs	r3, #0
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 fcbf 	bl	800d0c0 <I2C_TransferConfig>
 800c742:	e00f      	b.n	800c764 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c748:	b29a      	uxth	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c752:	b2da      	uxtb	r2, r3
 800c754:	8979      	ldrh	r1, [r7, #10]
 800c756:	2300      	movs	r3, #0
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f000 fcae 	bl	800d0c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c764:	697a      	ldr	r2, [r7, #20]
 800c766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f000 fac7 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	e07b      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77c:	781a      	ldrb	r2, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c792:	b29b      	uxth	r3, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	b29a      	uxth	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d034      	beq.n	800c81c <HAL_I2C_Mem_Write+0x1c8>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d130      	bne.n	800c81c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2180      	movs	r1, #128	; 0x80
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f000 fa59 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d001      	beq.n	800c7d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e04d      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	2bff      	cmp	r3, #255	; 0xff
 800c7dc:	d90e      	bls.n	800c7fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	22ff      	movs	r2, #255	; 0xff
 800c7e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	8979      	ldrh	r1, [r7, #10]
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f000 fc63 	bl	800d0c0 <I2C_TransferConfig>
 800c7fa:	e00f      	b.n	800c81c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c800:	b29a      	uxth	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	8979      	ldrh	r1, [r7, #10]
 800c80e:	2300      	movs	r3, #0
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 fc52 	bl	800d0c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c820:	b29b      	uxth	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d19e      	bne.n	800c764 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 faa6 	bl	800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c836:	2301      	movs	r3, #1
 800c838:	e01a      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2220      	movs	r2, #32
 800c840:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6859      	ldr	r1, [r3, #4]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	4b0a      	ldr	r3, [pc, #40]	; (800c878 <HAL_I2C_Mem_Write+0x224>)
 800c84e:	400b      	ands	r3, r1
 800c850:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2220      	movs	r2, #32
 800c856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	e000      	b.n	800c870 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c86e:	2302      	movs	r3, #2
  }
}
 800c870:	4618      	mov	r0, r3
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	fe00e800 	.word	0xfe00e800

0800c87c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af02      	add	r7, sp, #8
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	4608      	mov	r0, r1
 800c886:	4611      	mov	r1, r2
 800c888:	461a      	mov	r2, r3
 800c88a:	4603      	mov	r3, r0
 800c88c:	817b      	strh	r3, [r7, #10]
 800c88e:	460b      	mov	r3, r1
 800c890:	813b      	strh	r3, [r7, #8]
 800c892:	4613      	mov	r3, r2
 800c894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	f040 80fd 	bne.w	800ca9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d002      	beq.n	800c8b0 <HAL_I2C_Mem_Read+0x34>
 800c8aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d105      	bne.n	800c8bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e0f1      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d101      	bne.n	800c8ca <HAL_I2C_Mem_Read+0x4e>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e0ea      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c8d2:	f7fe fdd1 	bl	800b478 <HAL_GetTick>
 800c8d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	2319      	movs	r3, #25
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 f9c9 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e0d5      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2222      	movs	r2, #34	; 0x22
 800c8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2240      	movs	r2, #64	; 0x40
 800c900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6a3a      	ldr	r2, [r7, #32]
 800c90e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c91c:	88f8      	ldrh	r0, [r7, #6]
 800c91e:	893a      	ldrh	r2, [r7, #8]
 800c920:	8979      	ldrh	r1, [r7, #10]
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	4603      	mov	r3, r0
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 f92d 	bl	800cb8c <I2C_RequestMemoryRead>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d005      	beq.n	800c944 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	e0ad      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c948:	b29b      	uxth	r3, r3
 800c94a:	2bff      	cmp	r3, #255	; 0xff
 800c94c:	d90e      	bls.n	800c96c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	22ff      	movs	r2, #255	; 0xff
 800c952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	8979      	ldrh	r1, [r7, #10]
 800c95c:	4b52      	ldr	r3, [pc, #328]	; (800caa8 <HAL_I2C_Mem_Read+0x22c>)
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 fbab 	bl	800d0c0 <I2C_TransferConfig>
 800c96a:	e00f      	b.n	800c98c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c970:	b29a      	uxth	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	8979      	ldrh	r1, [r7, #10]
 800c97e:	4b4a      	ldr	r3, [pc, #296]	; (800caa8 <HAL_I2C_Mem_Read+0x22c>)
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f000 fb9a 	bl	800d0c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	2200      	movs	r2, #0
 800c994:	2104      	movs	r1, #4
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f970 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e07c      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b0:	b2d2      	uxtb	r2, r2
 800c9b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b8:	1c5a      	adds	r2, r3, #1
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d034      	beq.n	800ca4c <HAL_I2C_Mem_Read+0x1d0>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d130      	bne.n	800ca4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2180      	movs	r1, #128	; 0x80
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f000 f941 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e04d      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	2bff      	cmp	r3, #255	; 0xff
 800ca0c:	d90e      	bls.n	800ca2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	22ff      	movs	r2, #255	; 0xff
 800ca12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	8979      	ldrh	r1, [r7, #10]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 fb4b 	bl	800d0c0 <I2C_TransferConfig>
 800ca2a:	e00f      	b.n	800ca4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	8979      	ldrh	r1, [r7, #10]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f000 fb3a 	bl	800d0c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d19a      	bne.n	800c98c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 f98e 	bl	800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e01a      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2220      	movs	r2, #32
 800ca70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6859      	ldr	r1, [r3, #4]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	4b0b      	ldr	r3, [pc, #44]	; (800caac <HAL_I2C_Mem_Read+0x230>)
 800ca7e:	400b      	ands	r3, r1
 800ca80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2220      	movs	r2, #32
 800ca86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e000      	b.n	800caa0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ca9e:	2302      	movs	r3, #2
  }
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	80002400 	.word	0x80002400
 800caac:	fe00e800 	.word	0xfe00e800

0800cab0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d005      	beq.n	800cadc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad4:	68ba      	ldr	r2, [r7, #8]
 800cad6:	68f9      	ldr	r1, [r7, #12]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	4798      	blx	r3
  }
}
 800cadc:	bf00      	nop
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af02      	add	r7, sp, #8
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	4608      	mov	r0, r1
 800caee:	4611      	mov	r1, r2
 800caf0:	461a      	mov	r2, r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	817b      	strh	r3, [r7, #10]
 800caf6:	460b      	mov	r3, r1
 800caf8:	813b      	strh	r3, [r7, #8]
 800cafa:	4613      	mov	r3, r2
 800cafc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800cafe:	88fb      	ldrh	r3, [r7, #6]
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	8979      	ldrh	r1, [r7, #10]
 800cb04:	4b20      	ldr	r3, [pc, #128]	; (800cb88 <I2C_RequestMemoryWrite+0xa4>)
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f000 fad7 	bl	800d0c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb12:	69fa      	ldr	r2, [r7, #28]
 800cb14:	69b9      	ldr	r1, [r7, #24]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f8f0 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e02c      	b.n	800cb80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d105      	bne.n	800cb38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb2c:	893b      	ldrh	r3, [r7, #8]
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	629a      	str	r2, [r3, #40]	; 0x28
 800cb36:	e015      	b.n	800cb64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cb38:	893b      	ldrh	r3, [r7, #8]
 800cb3a:	0a1b      	lsrs	r3, r3, #8
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb46:	69fa      	ldr	r2, [r7, #28]
 800cb48:	69b9      	ldr	r1, [r7, #24]
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 f8d6 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e012      	b.n	800cb80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cb5a:	893b      	ldrh	r3, [r7, #8]
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2180      	movs	r1, #128	; 0x80
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f000 f884 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e000      	b.n	800cb80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	80002000 	.word	0x80002000

0800cb8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	4608      	mov	r0, r1
 800cb96:	4611      	mov	r1, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	817b      	strh	r3, [r7, #10]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	813b      	strh	r3, [r7, #8]
 800cba2:	4613      	mov	r3, r2
 800cba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800cba6:	88fb      	ldrh	r3, [r7, #6]
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	8979      	ldrh	r1, [r7, #10]
 800cbac:	4b20      	ldr	r3, [pc, #128]	; (800cc30 <I2C_RequestMemoryRead+0xa4>)
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 fa84 	bl	800d0c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbb8:	69fa      	ldr	r2, [r7, #28]
 800cbba:	69b9      	ldr	r1, [r7, #24]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 f89d 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e02c      	b.n	800cc26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cbcc:	88fb      	ldrh	r3, [r7, #6]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d105      	bne.n	800cbde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cbd2:	893b      	ldrh	r3, [r7, #8]
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	629a      	str	r2, [r3, #40]	; 0x28
 800cbdc:	e015      	b.n	800cc0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cbde:	893b      	ldrh	r3, [r7, #8]
 800cbe0:	0a1b      	lsrs	r3, r3, #8
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbec:	69fa      	ldr	r2, [r7, #28]
 800cbee:	69b9      	ldr	r1, [r7, #24]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f000 f883 	bl	800ccfc <I2C_WaitOnTXISFlagUntilTimeout>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e012      	b.n	800cc26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cc00:	893b      	ldrh	r3, [r7, #8]
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2200      	movs	r2, #0
 800cc12:	2140      	movs	r1, #64	; 0x40
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f831 	bl	800cc7c <I2C_WaitOnFlagUntilTimeout>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e000      	b.n	800cc26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	80002000 	.word	0x80002000

0800cc34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	f003 0302 	and.w	r3, r3, #2
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d103      	bne.n	800cc52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	f003 0301 	and.w	r3, r3, #1
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d007      	beq.n	800cc70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	699a      	ldr	r2, [r3, #24]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f042 0201 	orr.w	r2, r2, #1
 800cc6e:	619a      	str	r2, [r3, #24]
  }
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc8c:	e022      	b.n	800ccd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc94:	d01e      	beq.n	800ccd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc96:	f7fe fbef 	bl	800b478 <HAL_GetTick>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d302      	bcc.n	800ccac <I2C_WaitOnFlagUntilTimeout+0x30>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d113      	bne.n	800ccd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccb0:	f043 0220 	orr.w	r2, r3, #32
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e00f      	b.n	800ccf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	699a      	ldr	r2, [r3, #24]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	4013      	ands	r3, r2
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	bf0c      	ite	eq
 800cce4:	2301      	moveq	r3, #1
 800cce6:	2300      	movne	r3, #0
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	461a      	mov	r2, r3
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d0cd      	beq.n	800cc8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cd08:	e02c      	b.n	800cd64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	68b9      	ldr	r1, [r7, #8]
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f000 f8ea 	bl	800cee8 <I2C_IsErrorOccurred>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e02a      	b.n	800cd74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd24:	d01e      	beq.n	800cd64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd26:	f7fe fba7 	bl	800b478 <HAL_GetTick>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d302      	bcc.n	800cd3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d113      	bne.n	800cd64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd40:	f043 0220 	orr.w	r2, r3, #32
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2220      	movs	r2, #32
 800cd4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e007      	b.n	800cd74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	699b      	ldr	r3, [r3, #24]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d1cb      	bne.n	800cd0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd88:	e028      	b.n	800cddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	68b9      	ldr	r1, [r7, #8]
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f000 f8aa 	bl	800cee8 <I2C_IsErrorOccurred>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e026      	b.n	800cdec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd9e:	f7fe fb6b 	bl	800b478 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d302      	bcc.n	800cdb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d113      	bne.n	800cddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb8:	f043 0220 	orr.w	r2, r3, #32
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2220      	movs	r2, #32
 800cdc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e007      	b.n	800cdec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b20      	cmp	r3, #32
 800cde8:	d1cf      	bne.n	800cd8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ce00:	e064      	b.n	800cecc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	68b9      	ldr	r1, [r7, #8]
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f000 f86e 	bl	800cee8 <I2C_IsErrorOccurred>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d001      	beq.n	800ce16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	e062      	b.n	800cedc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	f003 0320 	and.w	r3, r3, #32
 800ce20:	2b20      	cmp	r3, #32
 800ce22:	d138      	bne.n	800ce96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	699b      	ldr	r3, [r3, #24]
 800ce2a:	f003 0304 	and.w	r3, r3, #4
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d105      	bne.n	800ce3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d001      	beq.n	800ce3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e04e      	b.n	800cedc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	f003 0310 	and.w	r3, r3, #16
 800ce48:	2b10      	cmp	r3, #16
 800ce4a:	d107      	bne.n	800ce5c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2210      	movs	r2, #16
 800ce52:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2204      	movs	r2, #4
 800ce58:	645a      	str	r2, [r3, #68]	; 0x44
 800ce5a:	e002      	b.n	800ce62 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2220      	movs	r2, #32
 800ce68:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	6859      	ldr	r1, [r3, #4]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	4b1b      	ldr	r3, [pc, #108]	; (800cee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800ce76:	400b      	ands	r3, r1
 800ce78:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2220      	movs	r2, #32
 800ce7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e022      	b.n	800cedc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce96:	f7fe faef 	bl	800b478 <HAL_GetTick>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d302      	bcc.n	800ceac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10f      	bne.n	800cecc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb0:	f043 0220 	orr.w	r2, r3, #32
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2220      	movs	r2, #32
 800cebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	e007      	b.n	800cedc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	f003 0304 	and.w	r3, r3, #4
 800ced6:	2b04      	cmp	r3, #4
 800ced8:	d193      	bne.n	800ce02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	fe00e800 	.word	0xfe00e800

0800cee8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	; 0x28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	f003 0310 	and.w	r3, r3, #16
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d075      	beq.n	800d000 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2210      	movs	r2, #16
 800cf1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cf1c:	e056      	b.n	800cfcc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf24:	d052      	beq.n	800cfcc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cf26:	f7fe faa7 	bl	800b478 <HAL_GetTick>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d302      	bcc.n	800cf3c <I2C_IsErrorOccurred+0x54>
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d147      	bne.n	800cfcc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	699b      	ldr	r3, [r3, #24]
 800cf56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf5e:	d12e      	bne.n	800cfbe <I2C_IsErrorOccurred+0xd6>
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf66:	d02a      	beq.n	800cfbe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800cf68:	7cfb      	ldrb	r3, [r7, #19]
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d027      	beq.n	800cfbe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cf7e:	f7fe fa7b 	bl	800b478 <HAL_GetTick>
 800cf82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf84:	e01b      	b.n	800cfbe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cf86:	f7fe fa77 	bl	800b478 <HAL_GetTick>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	2b19      	cmp	r3, #25
 800cf92:	d914      	bls.n	800cfbe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf98:	f043 0220 	orr.w	r2, r3, #32
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	f003 0320 	and.w	r3, r3, #32
 800cfc8:	2b20      	cmp	r3, #32
 800cfca:	d1dc      	bne.n	800cf86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	f003 0320 	and.w	r3, r3, #32
 800cfd6:	2b20      	cmp	r3, #32
 800cfd8:	d003      	beq.n	800cfe2 <I2C_IsErrorOccurred+0xfa>
 800cfda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d09d      	beq.n	800cf1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cfe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d103      	bne.n	800cff2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2220      	movs	r2, #32
 800cff0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cff2:	6a3b      	ldr	r3, [r7, #32]
 800cff4:	f043 0304 	orr.w	r3, r3, #4
 800cff8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00b      	beq.n	800d02a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	f043 0301 	orr.w	r3, r3, #1
 800d018:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d022:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d024:	2301      	movs	r3, #1
 800d026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d034:	6a3b      	ldr	r3, [r7, #32]
 800d036:	f043 0308 	orr.w	r3, r3, #8
 800d03a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00b      	beq.n	800d06e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	f043 0302 	orr.w	r3, r3, #2
 800d05c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d06e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d072:	2b00      	cmp	r3, #0
 800d074:	d01c      	beq.n	800d0b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7ff fddc 	bl	800cc34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6859      	ldr	r1, [r3, #4]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	4b0d      	ldr	r3, [pc, #52]	; (800d0bc <I2C_IsErrorOccurred+0x1d4>)
 800d088:	400b      	ands	r3, r1
 800d08a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	431a      	orrs	r2, r3
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2220      	movs	r2, #32
 800d09c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3728      	adds	r7, #40	; 0x28
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	fe00e800 	.word	0xfe00e800

0800d0c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	607b      	str	r3, [r7, #4]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	817b      	strh	r3, [r7, #10]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d0d2:	897b      	ldrh	r3, [r7, #10]
 800d0d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d0d8:	7a7b      	ldrb	r3, [r7, #9]
 800d0da:	041b      	lsls	r3, r3, #16
 800d0dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d0e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	685a      	ldr	r2, [r3, #4]
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	0d5b      	lsrs	r3, r3, #21
 800d0fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d0fe:	4b08      	ldr	r3, [pc, #32]	; (800d120 <I2C_TransferConfig+0x60>)
 800d100:	430b      	orrs	r3, r1
 800d102:	43db      	mvns	r3, r3
 800d104:	ea02 0103 	and.w	r1, r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	430a      	orrs	r2, r1
 800d110:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d112:	bf00      	nop
 800d114:	371c      	adds	r7, #28
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop
 800d120:	03ff63ff 	.word	0x03ff63ff

0800d124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b20      	cmp	r3, #32
 800d138:	d138      	bne.n	800d1ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d140:	2b01      	cmp	r3, #1
 800d142:	d101      	bne.n	800d148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d144:	2302      	movs	r3, #2
 800d146:	e032      	b.n	800d1ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2224      	movs	r2, #36	; 0x24
 800d154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f022 0201 	bic.w	r2, r2, #1
 800d166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6819      	ldr	r1, [r3, #0]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f042 0201 	orr.w	r2, r2, #1
 800d196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2220      	movs	r2, #32
 800d19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e000      	b.n	800d1ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d1ac:	2302      	movs	r3, #2
  }
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b085      	sub	sp, #20
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b20      	cmp	r3, #32
 800d1ce:	d139      	bne.n	800d244 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d101      	bne.n	800d1de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d1da:	2302      	movs	r3, #2
 800d1dc:	e033      	b.n	800d246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2224      	movs	r2, #36	; 0x24
 800d1ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f022 0201 	bic.w	r2, r2, #1
 800d1fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d20c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	021b      	lsls	r3, r3, #8
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	4313      	orrs	r3, r2
 800d216:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f042 0201 	orr.w	r2, r2, #1
 800d22e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2220      	movs	r2, #32
 800d234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	e000      	b.n	800d246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d244:	2302      	movs	r3, #2
  }
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
	...

0800d254 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d254:	b480      	push	{r7}
 800d256:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d258:	4b0d      	ldr	r3, [pc, #52]	; (800d290 <HAL_PWREx_GetVoltageRange+0x3c>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d264:	d102      	bne.n	800d26c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800d266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d26a:	e00b      	b.n	800d284 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800d26c:	4b08      	ldr	r3, [pc, #32]	; (800d290 <HAL_PWREx_GetVoltageRange+0x3c>)
 800d26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d27a:	d102      	bne.n	800d282 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800d27c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d280:	e000      	b.n	800d284 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800d282:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800d284:	4618      	mov	r0, r3
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	40007000 	.word	0x40007000

0800d294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d141      	bne.n	800d326 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d2a2:	4b4b      	ldr	r3, [pc, #300]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d2aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2ae:	d131      	bne.n	800d314 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d2b0:	4b47      	ldr	r3, [pc, #284]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2b6:	4a46      	ldr	r2, [pc, #280]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d2c0:	4b43      	ldr	r3, [pc, #268]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d2c8:	4a41      	ldr	r2, [pc, #260]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d2ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800d2d0:	4b40      	ldr	r3, [pc, #256]	; (800d3d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2232      	movs	r2, #50	; 0x32
 800d2d6:	fb02 f303 	mul.w	r3, r2, r3
 800d2da:	4a3f      	ldr	r2, [pc, #252]	; (800d3d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e0:	0c9b      	lsrs	r3, r3, #18
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d2e6:	e002      	b.n	800d2ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d2ee:	4b38      	ldr	r3, [pc, #224]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2fa:	d102      	bne.n	800d302 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1f2      	bne.n	800d2e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d302:	4b33      	ldr	r3, [pc, #204]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d304:	695b      	ldr	r3, [r3, #20]
 800d306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d30a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d30e:	d158      	bne.n	800d3c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d310:	2303      	movs	r3, #3
 800d312:	e057      	b.n	800d3c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d314:	4b2e      	ldr	r3, [pc, #184]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d31a:	4a2d      	ldr	r2, [pc, #180]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d324:	e04d      	b.n	800d3c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d32c:	d141      	bne.n	800d3b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d32e:	4b28      	ldr	r3, [pc, #160]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d33a:	d131      	bne.n	800d3a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d33c:	4b24      	ldr	r3, [pc, #144]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d33e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d342:	4a23      	ldr	r2, [pc, #140]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d34c:	4b20      	ldr	r3, [pc, #128]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d354:	4a1e      	ldr	r2, [pc, #120]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d35a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800d35c:	4b1d      	ldr	r3, [pc, #116]	; (800d3d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2232      	movs	r2, #50	; 0x32
 800d362:	fb02 f303 	mul.w	r3, r2, r3
 800d366:	4a1c      	ldr	r2, [pc, #112]	; (800d3d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d368:	fba2 2303 	umull	r2, r3, r2, r3
 800d36c:	0c9b      	lsrs	r3, r3, #18
 800d36e:	3301      	adds	r3, #1
 800d370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d372:	e002      	b.n	800d37a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3b01      	subs	r3, #1
 800d378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d37a:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d37c:	695b      	ldr	r3, [r3, #20]
 800d37e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d386:	d102      	bne.n	800d38e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1f2      	bne.n	800d374 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d38e:	4b10      	ldr	r3, [pc, #64]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d390:	695b      	ldr	r3, [r3, #20]
 800d392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d39a:	d112      	bne.n	800d3c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e011      	b.n	800d3c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d3a0:	4b0b      	ldr	r3, [pc, #44]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3a6:	4a0a      	ldr	r2, [pc, #40]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d3b0:	e007      	b.n	800d3c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d3b2:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d3ba:	4a05      	ldr	r2, [pc, #20]	; (800d3d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d3bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d3c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3714      	adds	r7, #20
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr
 800d3d0:	40007000 	.word	0x40007000
 800d3d4:	2000006c 	.word	0x2000006c
 800d3d8:	431bde83 	.word	0x431bde83

0800d3dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b088      	sub	sp, #32
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d102      	bne.n	800d3f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	f000 bc08 	b.w	800dc00 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d3f0:	4b96      	ldr	r3, [pc, #600]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f003 030c 	and.w	r3, r3, #12
 800d3f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d3fa:	4b94      	ldr	r3, [pc, #592]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	f003 0303 	and.w	r3, r3, #3
 800d402:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0310 	and.w	r3, r3, #16
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 80e4 	beq.w	800d5da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d007      	beq.n	800d428 <HAL_RCC_OscConfig+0x4c>
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	2b0c      	cmp	r3, #12
 800d41c:	f040 808b 	bne.w	800d536 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2b01      	cmp	r3, #1
 800d424:	f040 8087 	bne.w	800d536 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d428:	4b88      	ldr	r3, [pc, #544]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f003 0302 	and.w	r3, r3, #2
 800d430:	2b00      	cmp	r3, #0
 800d432:	d005      	beq.n	800d440 <HAL_RCC_OscConfig+0x64>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	e3df      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a1a      	ldr	r2, [r3, #32]
 800d444:	4b81      	ldr	r3, [pc, #516]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0308 	and.w	r3, r3, #8
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d004      	beq.n	800d45a <HAL_RCC_OscConfig+0x7e>
 800d450:	4b7e      	ldr	r3, [pc, #504]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d458:	e005      	b.n	800d466 <HAL_RCC_OscConfig+0x8a>
 800d45a:	4b7c      	ldr	r3, [pc, #496]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d45c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d460:	091b      	lsrs	r3, r3, #4
 800d462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d466:	4293      	cmp	r3, r2
 800d468:	d223      	bcs.n	800d4b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 fdfe 	bl	800e070 <RCC_SetFlashLatencyFromMSIRange>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e3c0      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d47e:	4b73      	ldr	r3, [pc, #460]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a72      	ldr	r2, [pc, #456]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d484:	f043 0308 	orr.w	r3, r3, #8
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	4b70      	ldr	r3, [pc, #448]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	496d      	ldr	r1, [pc, #436]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d498:	4313      	orrs	r3, r2
 800d49a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d49c:	4b6b      	ldr	r3, [pc, #428]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	69db      	ldr	r3, [r3, #28]
 800d4a8:	021b      	lsls	r3, r3, #8
 800d4aa:	4968      	ldr	r1, [pc, #416]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	604b      	str	r3, [r1, #4]
 800d4b0:	e025      	b.n	800d4fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d4b2:	4b66      	ldr	r3, [pc, #408]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a65      	ldr	r2, [pc, #404]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d4b8:	f043 0308 	orr.w	r3, r3, #8
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	4b63      	ldr	r3, [pc, #396]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	4960      	ldr	r1, [pc, #384]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d4d0:	4b5e      	ldr	r3, [pc, #376]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	495b      	ldr	r1, [pc, #364]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d109      	bne.n	800d4fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 fdbe 	bl	800e070 <RCC_SetFlashLatencyFromMSIRange>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e380      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d4fe:	f000 fcc1 	bl	800de84 <HAL_RCC_GetSysClockFreq>
 800d502:	4602      	mov	r2, r0
 800d504:	4b51      	ldr	r3, [pc, #324]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	091b      	lsrs	r3, r3, #4
 800d50a:	f003 030f 	and.w	r3, r3, #15
 800d50e:	4950      	ldr	r1, [pc, #320]	; (800d650 <HAL_RCC_OscConfig+0x274>)
 800d510:	5ccb      	ldrb	r3, [r1, r3]
 800d512:	f003 031f 	and.w	r3, r3, #31
 800d516:	fa22 f303 	lsr.w	r3, r2, r3
 800d51a:	4a4e      	ldr	r2, [pc, #312]	; (800d654 <HAL_RCC_OscConfig+0x278>)
 800d51c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d51e:	4b4e      	ldr	r3, [pc, #312]	; (800d658 <HAL_RCC_OscConfig+0x27c>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4618      	mov	r0, r3
 800d524:	f7fd fb52 	bl	800abcc <HAL_InitTick>
 800d528:	4603      	mov	r3, r0
 800d52a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d052      	beq.n	800d5d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	e364      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d032      	beq.n	800d5a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d53e:	4b43      	ldr	r3, [pc, #268]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a42      	ldr	r2, [pc, #264]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d544:	f043 0301 	orr.w	r3, r3, #1
 800d548:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d54a:	f7fd ff95 	bl	800b478 <HAL_GetTick>
 800d54e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d550:	e008      	b.n	800d564 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d552:	f7fd ff91 	bl	800b478 <HAL_GetTick>
 800d556:	4602      	mov	r2, r0
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d901      	bls.n	800d564 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e34d      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d564:	4b39      	ldr	r3, [pc, #228]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f003 0302 	and.w	r3, r3, #2
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d0f0      	beq.n	800d552 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d570:	4b36      	ldr	r3, [pc, #216]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a35      	ldr	r2, [pc, #212]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d576:	f043 0308 	orr.w	r3, r3, #8
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	4b33      	ldr	r3, [pc, #204]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	4930      	ldr	r1, [pc, #192]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d58a:	4313      	orrs	r3, r2
 800d58c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d58e:	4b2f      	ldr	r3, [pc, #188]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	69db      	ldr	r3, [r3, #28]
 800d59a:	021b      	lsls	r3, r3, #8
 800d59c:	492b      	ldr	r1, [pc, #172]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	604b      	str	r3, [r1, #4]
 800d5a2:	e01a      	b.n	800d5da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d5a4:	4b29      	ldr	r3, [pc, #164]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a28      	ldr	r2, [pc, #160]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d5aa:	f023 0301 	bic.w	r3, r3, #1
 800d5ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d5b0:	f7fd ff62 	bl	800b478 <HAL_GetTick>
 800d5b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d5b6:	e008      	b.n	800d5ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d5b8:	f7fd ff5e 	bl	800b478 <HAL_GetTick>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	d901      	bls.n	800d5ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	e31a      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d5ca:	4b20      	ldr	r3, [pc, #128]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f003 0302 	and.w	r3, r3, #2
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1f0      	bne.n	800d5b8 <HAL_RCC_OscConfig+0x1dc>
 800d5d6:	e000      	b.n	800d5da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d5d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d073      	beq.n	800d6ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	2b08      	cmp	r3, #8
 800d5ea:	d005      	beq.n	800d5f8 <HAL_RCC_OscConfig+0x21c>
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	2b0c      	cmp	r3, #12
 800d5f0:	d10e      	bne.n	800d610 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b03      	cmp	r3, #3
 800d5f6:	d10b      	bne.n	800d610 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5f8:	4b14      	ldr	r3, [pc, #80]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d600:	2b00      	cmp	r3, #0
 800d602:	d063      	beq.n	800d6cc <HAL_RCC_OscConfig+0x2f0>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d15f      	bne.n	800d6cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	e2f7      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d618:	d106      	bne.n	800d628 <HAL_RCC_OscConfig+0x24c>
 800d61a:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a0b      	ldr	r2, [pc, #44]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d624:	6013      	str	r3, [r2, #0]
 800d626:	e025      	b.n	800d674 <HAL_RCC_OscConfig+0x298>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d630:	d114      	bne.n	800d65c <HAL_RCC_OscConfig+0x280>
 800d632:	4b06      	ldr	r3, [pc, #24]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a05      	ldr	r2, [pc, #20]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d63c:	6013      	str	r3, [r2, #0]
 800d63e:	4b03      	ldr	r3, [pc, #12]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a02      	ldr	r2, [pc, #8]	; (800d64c <HAL_RCC_OscConfig+0x270>)
 800d644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	e013      	b.n	800d674 <HAL_RCC_OscConfig+0x298>
 800d64c:	40021000 	.word	0x40021000
 800d650:	0801a0e4 	.word	0x0801a0e4
 800d654:	2000006c 	.word	0x2000006c
 800d658:	20000070 	.word	0x20000070
 800d65c:	4ba0      	ldr	r3, [pc, #640]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a9f      	ldr	r2, [pc, #636]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	4b9d      	ldr	r3, [pc, #628]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a9c      	ldr	r2, [pc, #624]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d66e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d013      	beq.n	800d6a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d67c:	f7fd fefc 	bl	800b478 <HAL_GetTick>
 800d680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d682:	e008      	b.n	800d696 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d684:	f7fd fef8 	bl	800b478 <HAL_GetTick>
 800d688:	4602      	mov	r2, r0
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	2b64      	cmp	r3, #100	; 0x64
 800d690:	d901      	bls.n	800d696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800d692:	2303      	movs	r3, #3
 800d694:	e2b4      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d696:	4b92      	ldr	r3, [pc, #584]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0f0      	beq.n	800d684 <HAL_RCC_OscConfig+0x2a8>
 800d6a2:	e014      	b.n	800d6ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6a4:	f7fd fee8 	bl	800b478 <HAL_GetTick>
 800d6a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d6aa:	e008      	b.n	800d6be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d6ac:	f7fd fee4 	bl	800b478 <HAL_GetTick>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	2b64      	cmp	r3, #100	; 0x64
 800d6b8:	d901      	bls.n	800d6be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	e2a0      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d6be:	4b88      	ldr	r3, [pc, #544]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1f0      	bne.n	800d6ac <HAL_RCC_OscConfig+0x2d0>
 800d6ca:	e000      	b.n	800d6ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f003 0302 	and.w	r3, r3, #2
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d060      	beq.n	800d79c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	2b04      	cmp	r3, #4
 800d6de:	d005      	beq.n	800d6ec <HAL_RCC_OscConfig+0x310>
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	2b0c      	cmp	r3, #12
 800d6e4:	d119      	bne.n	800d71a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d116      	bne.n	800d71a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d6ec:	4b7c      	ldr	r3, [pc, #496]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d005      	beq.n	800d704 <HAL_RCC_OscConfig+0x328>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	e27d      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d704:	4b76      	ldr	r3, [pc, #472]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	061b      	lsls	r3, r3, #24
 800d712:	4973      	ldr	r1, [pc, #460]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d714:	4313      	orrs	r3, r2
 800d716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d718:	e040      	b.n	800d79c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d023      	beq.n	800d76a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d722:	4b6f      	ldr	r3, [pc, #444]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a6e      	ldr	r2, [pc, #440]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d72c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d72e:	f7fd fea3 	bl	800b478 <HAL_GetTick>
 800d732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d734:	e008      	b.n	800d748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d736:	f7fd fe9f 	bl	800b478 <HAL_GetTick>
 800d73a:	4602      	mov	r2, r0
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	2b02      	cmp	r3, #2
 800d742:	d901      	bls.n	800d748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800d744:	2303      	movs	r3, #3
 800d746:	e25b      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d748:	4b65      	ldr	r3, [pc, #404]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d750:	2b00      	cmp	r3, #0
 800d752:	d0f0      	beq.n	800d736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d754:	4b62      	ldr	r3, [pc, #392]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	061b      	lsls	r3, r3, #24
 800d762:	495f      	ldr	r1, [pc, #380]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d764:	4313      	orrs	r3, r2
 800d766:	604b      	str	r3, [r1, #4]
 800d768:	e018      	b.n	800d79c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d76a:	4b5d      	ldr	r3, [pc, #372]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a5c      	ldr	r2, [pc, #368]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d776:	f7fd fe7f 	bl	800b478 <HAL_GetTick>
 800d77a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d77c:	e008      	b.n	800d790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d77e:	f7fd fe7b 	bl	800b478 <HAL_GetTick>
 800d782:	4602      	mov	r2, r0
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d901      	bls.n	800d790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800d78c:	2303      	movs	r3, #3
 800d78e:	e237      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d790:	4b53      	ldr	r3, [pc, #332]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1f0      	bne.n	800d77e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f003 0308 	and.w	r3, r3, #8
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d03c      	beq.n	800d822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d01c      	beq.n	800d7ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d7b0:	4b4b      	ldr	r3, [pc, #300]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d7b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7b6:	4a4a      	ldr	r2, [pc, #296]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d7b8:	f043 0301 	orr.w	r3, r3, #1
 800d7bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7c0:	f7fd fe5a 	bl	800b478 <HAL_GetTick>
 800d7c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d7c6:	e008      	b.n	800d7da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d7c8:	f7fd fe56 	bl	800b478 <HAL_GetTick>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d901      	bls.n	800d7da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e212      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d7da:	4b41      	ldr	r3, [pc, #260]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d7dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7e0:	f003 0302 	and.w	r3, r3, #2
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d0ef      	beq.n	800d7c8 <HAL_RCC_OscConfig+0x3ec>
 800d7e8:	e01b      	b.n	800d822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d7ea:	4b3d      	ldr	r3, [pc, #244]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d7ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7f0:	4a3b      	ldr	r2, [pc, #236]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d7f2:	f023 0301 	bic.w	r3, r3, #1
 800d7f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7fa:	f7fd fe3d 	bl	800b478 <HAL_GetTick>
 800d7fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d800:	e008      	b.n	800d814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d802:	f7fd fe39 	bl	800b478 <HAL_GetTick>
 800d806:	4602      	mov	r2, r0
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d901      	bls.n	800d814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800d810:	2303      	movs	r3, #3
 800d812:	e1f5      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d814:	4b32      	ldr	r3, [pc, #200]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d81a:	f003 0302 	and.w	r3, r3, #2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1ef      	bne.n	800d802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f003 0304 	and.w	r3, r3, #4
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f000 80a6 	beq.w	800d97c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d830:	2300      	movs	r3, #0
 800d832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d834:	4b2a      	ldr	r3, [pc, #168]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10d      	bne.n	800d85c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d840:	4b27      	ldr	r3, [pc, #156]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d844:	4a26      	ldr	r2, [pc, #152]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d84a:	6593      	str	r3, [r2, #88]	; 0x58
 800d84c:	4b24      	ldr	r3, [pc, #144]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d854:	60bb      	str	r3, [r7, #8]
 800d856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d858:	2301      	movs	r3, #1
 800d85a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d85c:	4b21      	ldr	r3, [pc, #132]	; (800d8e4 <HAL_RCC_OscConfig+0x508>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d864:	2b00      	cmp	r3, #0
 800d866:	d118      	bne.n	800d89a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d868:	4b1e      	ldr	r3, [pc, #120]	; (800d8e4 <HAL_RCC_OscConfig+0x508>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a1d      	ldr	r2, [pc, #116]	; (800d8e4 <HAL_RCC_OscConfig+0x508>)
 800d86e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d874:	f7fd fe00 	bl	800b478 <HAL_GetTick>
 800d878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d87a:	e008      	b.n	800d88e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d87c:	f7fd fdfc 	bl	800b478 <HAL_GetTick>
 800d880:	4602      	mov	r2, r0
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	2b02      	cmp	r3, #2
 800d888:	d901      	bls.n	800d88e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e1b8      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d88e:	4b15      	ldr	r3, [pc, #84]	; (800d8e4 <HAL_RCC_OscConfig+0x508>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0f0      	beq.n	800d87c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d108      	bne.n	800d8b4 <HAL_RCC_OscConfig+0x4d8>
 800d8a2:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8a8:	4a0d      	ldr	r2, [pc, #52]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d8aa:	f043 0301 	orr.w	r3, r3, #1
 800d8ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d8b2:	e029      	b.n	800d908 <HAL_RCC_OscConfig+0x52c>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	2b05      	cmp	r3, #5
 800d8ba:	d115      	bne.n	800d8e8 <HAL_RCC_OscConfig+0x50c>
 800d8bc:	4b08      	ldr	r3, [pc, #32]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c2:	4a07      	ldr	r2, [pc, #28]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d8c4:	f043 0304 	orr.w	r3, r3, #4
 800d8c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d8cc:	4b04      	ldr	r3, [pc, #16]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8d2:	4a03      	ldr	r2, [pc, #12]	; (800d8e0 <HAL_RCC_OscConfig+0x504>)
 800d8d4:	f043 0301 	orr.w	r3, r3, #1
 800d8d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d8dc:	e014      	b.n	800d908 <HAL_RCC_OscConfig+0x52c>
 800d8de:	bf00      	nop
 800d8e0:	40021000 	.word	0x40021000
 800d8e4:	40007000 	.word	0x40007000
 800d8e8:	4b9d      	ldr	r3, [pc, #628]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ee:	4a9c      	ldr	r2, [pc, #624]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d8f0:	f023 0301 	bic.w	r3, r3, #1
 800d8f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d8f8:	4b99      	ldr	r3, [pc, #612]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8fe:	4a98      	ldr	r2, [pc, #608]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d900:	f023 0304 	bic.w	r3, r3, #4
 800d904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d016      	beq.n	800d93e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d910:	f7fd fdb2 	bl	800b478 <HAL_GetTick>
 800d914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d916:	e00a      	b.n	800d92e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d918:	f7fd fdae 	bl	800b478 <HAL_GetTick>
 800d91c:	4602      	mov	r2, r0
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	1ad3      	subs	r3, r2, r3
 800d922:	f241 3288 	movw	r2, #5000	; 0x1388
 800d926:	4293      	cmp	r3, r2
 800d928:	d901      	bls.n	800d92e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e168      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d92e:	4b8c      	ldr	r3, [pc, #560]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d934:	f003 0302 	and.w	r3, r3, #2
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d0ed      	beq.n	800d918 <HAL_RCC_OscConfig+0x53c>
 800d93c:	e015      	b.n	800d96a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d93e:	f7fd fd9b 	bl	800b478 <HAL_GetTick>
 800d942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d944:	e00a      	b.n	800d95c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d946:	f7fd fd97 	bl	800b478 <HAL_GetTick>
 800d94a:	4602      	mov	r2, r0
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	f241 3288 	movw	r2, #5000	; 0x1388
 800d954:	4293      	cmp	r3, r2
 800d956:	d901      	bls.n	800d95c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d958:	2303      	movs	r3, #3
 800d95a:	e151      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d95c:	4b80      	ldr	r3, [pc, #512]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d962:	f003 0302 	and.w	r3, r3, #2
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1ed      	bne.n	800d946 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d96a:	7ffb      	ldrb	r3, [r7, #31]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d105      	bne.n	800d97c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d970:	4b7b      	ldr	r3, [pc, #492]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d974:	4a7a      	ldr	r2, [pc, #488]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d97a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f003 0320 	and.w	r3, r3, #32
 800d984:	2b00      	cmp	r3, #0
 800d986:	d03c      	beq.n	800da02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d01c      	beq.n	800d9ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d990:	4b73      	ldr	r3, [pc, #460]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d996:	4a72      	ldr	r2, [pc, #456]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d998:	f043 0301 	orr.w	r3, r3, #1
 800d99c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9a0:	f7fd fd6a 	bl	800b478 <HAL_GetTick>
 800d9a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d9a6:	e008      	b.n	800d9ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d9a8:	f7fd fd66 	bl	800b478 <HAL_GetTick>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	2b02      	cmp	r3, #2
 800d9b4:	d901      	bls.n	800d9ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800d9b6:	2303      	movs	r3, #3
 800d9b8:	e122      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d9ba:	4b69      	ldr	r3, [pc, #420]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d9bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d0ef      	beq.n	800d9a8 <HAL_RCC_OscConfig+0x5cc>
 800d9c8:	e01b      	b.n	800da02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d9ca:	4b65      	ldr	r3, [pc, #404]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d9cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d9d0:	4a63      	ldr	r2, [pc, #396]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d9d2:	f023 0301 	bic.w	r3, r3, #1
 800d9d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9da:	f7fd fd4d 	bl	800b478 <HAL_GetTick>
 800d9de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d9e0:	e008      	b.n	800d9f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d9e2:	f7fd fd49 	bl	800b478 <HAL_GetTick>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d901      	bls.n	800d9f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e105      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d9f4:	4b5a      	ldr	r3, [pc, #360]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800d9f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d9fa:	f003 0302 	and.w	r3, r3, #2
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1ef      	bne.n	800d9e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da06:	2b00      	cmp	r3, #0
 800da08:	f000 80f9 	beq.w	800dbfe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da10:	2b02      	cmp	r3, #2
 800da12:	f040 80cf 	bne.w	800dbb4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800da16:	4b52      	ldr	r3, [pc, #328]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	f003 0203 	and.w	r2, r3, #3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da26:	429a      	cmp	r2, r3
 800da28:	d12c      	bne.n	800da84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da34:	3b01      	subs	r3, #1
 800da36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800da38:	429a      	cmp	r2, r3
 800da3a:	d123      	bne.n	800da84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800da48:	429a      	cmp	r2, r3
 800da4a:	d11b      	bne.n	800da84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800da58:	429a      	cmp	r2, r3
 800da5a:	d113      	bne.n	800da84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da66:	085b      	lsrs	r3, r3, #1
 800da68:	3b01      	subs	r3, #1
 800da6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d109      	bne.n	800da84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da7a:	085b      	lsrs	r3, r3, #1
 800da7c:	3b01      	subs	r3, #1
 800da7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800da80:	429a      	cmp	r2, r3
 800da82:	d071      	beq.n	800db68 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	2b0c      	cmp	r3, #12
 800da88:	d068      	beq.n	800db5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800da8a:	4b35      	ldr	r3, [pc, #212]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da92:	2b00      	cmp	r3, #0
 800da94:	d105      	bne.n	800daa2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800da96:	4b32      	ldr	r3, [pc, #200]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	e0ac      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800daa6:	4b2e      	ldr	r3, [pc, #184]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a2d      	ldr	r2, [pc, #180]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800daac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dab0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800dab2:	f7fd fce1 	bl	800b478 <HAL_GetTick>
 800dab6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dab8:	e008      	b.n	800dacc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800daba:	f7fd fcdd 	bl	800b478 <HAL_GetTick>
 800dabe:	4602      	mov	r2, r0
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d901      	bls.n	800dacc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800dac8:	2303      	movs	r3, #3
 800daca:	e099      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dacc:	4b24      	ldr	r3, [pc, #144]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1f0      	bne.n	800daba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dad8:	4b21      	ldr	r3, [pc, #132]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800dada:	68da      	ldr	r2, [r3, #12]
 800dadc:	4b21      	ldr	r3, [pc, #132]	; (800db64 <HAL_RCC_OscConfig+0x788>)
 800dade:	4013      	ands	r3, r2
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dae8:	3a01      	subs	r2, #1
 800daea:	0112      	lsls	r2, r2, #4
 800daec:	4311      	orrs	r1, r2
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800daf2:	0212      	lsls	r2, r2, #8
 800daf4:	4311      	orrs	r1, r2
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800dafa:	0852      	lsrs	r2, r2, #1
 800dafc:	3a01      	subs	r2, #1
 800dafe:	0552      	lsls	r2, r2, #21
 800db00:	4311      	orrs	r1, r2
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800db06:	0852      	lsrs	r2, r2, #1
 800db08:	3a01      	subs	r2, #1
 800db0a:	0652      	lsls	r2, r2, #25
 800db0c:	4311      	orrs	r1, r2
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800db12:	06d2      	lsls	r2, r2, #27
 800db14:	430a      	orrs	r2, r1
 800db16:	4912      	ldr	r1, [pc, #72]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800db1c:	4b10      	ldr	r3, [pc, #64]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a0f      	ldr	r2, [pc, #60]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800db22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800db28:	4b0d      	ldr	r3, [pc, #52]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	4a0c      	ldr	r2, [pc, #48]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800db2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800db34:	f7fd fca0 	bl	800b478 <HAL_GetTick>
 800db38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db3a:	e008      	b.n	800db4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db3c:	f7fd fc9c 	bl	800b478 <HAL_GetTick>
 800db40:	4602      	mov	r2, r0
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	2b02      	cmp	r3, #2
 800db48:	d901      	bls.n	800db4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800db4a:	2303      	movs	r3, #3
 800db4c:	e058      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db4e:	4b04      	ldr	r3, [pc, #16]	; (800db60 <HAL_RCC_OscConfig+0x784>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db56:	2b00      	cmp	r3, #0
 800db58:	d0f0      	beq.n	800db3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800db5a:	e050      	b.n	800dbfe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e04f      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
 800db60:	40021000 	.word	0x40021000
 800db64:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db68:	4b27      	ldr	r3, [pc, #156]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d144      	bne.n	800dbfe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800db74:	4b24      	ldr	r3, [pc, #144]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a23      	ldr	r2, [pc, #140]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800db7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800db80:	4b21      	ldr	r3, [pc, #132]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	4a20      	ldr	r2, [pc, #128]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800db86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800db8c:	f7fd fc74 	bl	800b478 <HAL_GetTick>
 800db90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db92:	e008      	b.n	800dba6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db94:	f7fd fc70 	bl	800b478 <HAL_GetTick>
 800db98:	4602      	mov	r2, r0
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d901      	bls.n	800dba6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800dba2:	2303      	movs	r3, #3
 800dba4:	e02c      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dba6:	4b18      	ldr	r3, [pc, #96]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d0f0      	beq.n	800db94 <HAL_RCC_OscConfig+0x7b8>
 800dbb2:	e024      	b.n	800dbfe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	2b0c      	cmp	r3, #12
 800dbb8:	d01f      	beq.n	800dbfa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbba:	4b13      	ldr	r3, [pc, #76]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a12      	ldr	r2, [pc, #72]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800dbc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dbc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbc6:	f7fd fc57 	bl	800b478 <HAL_GetTick>
 800dbca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbcc:	e008      	b.n	800dbe0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbce:	f7fd fc53 	bl	800b478 <HAL_GetTick>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d901      	bls.n	800dbe0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800dbdc:	2303      	movs	r3, #3
 800dbde:	e00f      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbe0:	4b09      	ldr	r3, [pc, #36]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f0      	bne.n	800dbce <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800dbec:	4b06      	ldr	r3, [pc, #24]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800dbee:	68da      	ldr	r2, [r3, #12]
 800dbf0:	4905      	ldr	r1, [pc, #20]	; (800dc08 <HAL_RCC_OscConfig+0x82c>)
 800dbf2:	4b06      	ldr	r3, [pc, #24]	; (800dc0c <HAL_RCC_OscConfig+0x830>)
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	60cb      	str	r3, [r1, #12]
 800dbf8:	e001      	b.n	800dbfe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e000      	b.n	800dc00 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3720      	adds	r7, #32
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	40021000 	.word	0x40021000
 800dc0c:	feeefffc 	.word	0xfeeefffc

0800dc10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e11d      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dc28:	4b90      	ldr	r3, [pc, #576]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 030f 	and.w	r3, r3, #15
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d910      	bls.n	800dc58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc36:	4b8d      	ldr	r3, [pc, #564]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f023 020f 	bic.w	r2, r3, #15
 800dc3e:	498b      	ldr	r1, [pc, #556]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc46:	4b89      	ldr	r3, [pc, #548]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f003 030f 	and.w	r3, r3, #15
 800dc4e:	683a      	ldr	r2, [r7, #0]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d001      	beq.n	800dc58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e105      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 0302 	and.w	r3, r3, #2
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d010      	beq.n	800dc86 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	689a      	ldr	r2, [r3, #8]
 800dc68:	4b81      	ldr	r3, [pc, #516]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d908      	bls.n	800dc86 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc74:	4b7e      	ldr	r3, [pc, #504]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	497b      	ldr	r1, [pc, #492]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dc82:	4313      	orrs	r3, r2
 800dc84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 0301 	and.w	r3, r3, #1
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d079      	beq.n	800dd86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	d11e      	bne.n	800dcd8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dc9a:	4b75      	ldr	r3, [pc, #468]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e0dc      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800dcaa:	f000 fa3b 	bl	800e124 <RCC_GetSysClockFreqFromPLLSource>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	4a70      	ldr	r2, [pc, #448]	; (800de74 <HAL_RCC_ClockConfig+0x264>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d946      	bls.n	800dd44 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800dcb6:	4b6e      	ldr	r3, [pc, #440]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d140      	bne.n	800dd44 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dcc2:	4b6b      	ldr	r3, [pc, #428]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dcca:	4a69      	ldr	r2, [pc, #420]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dcd2:	2380      	movs	r3, #128	; 0x80
 800dcd4:	617b      	str	r3, [r7, #20]
 800dcd6:	e035      	b.n	800dd44 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	d107      	bne.n	800dcf0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dce0:	4b63      	ldr	r3, [pc, #396]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d115      	bne.n	800dd18 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800dcec:	2301      	movs	r3, #1
 800dcee:	e0b9      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d107      	bne.n	800dd08 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800dcf8:	4b5d      	ldr	r3, [pc, #372]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 0302 	and.w	r3, r3, #2
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d109      	bne.n	800dd18 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e0ad      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd08:	4b59      	ldr	r3, [pc, #356]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e0a5      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800dd18:	f000 f8b4 	bl	800de84 <HAL_RCC_GetSysClockFreq>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	4a55      	ldr	r2, [pc, #340]	; (800de74 <HAL_RCC_ClockConfig+0x264>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d90f      	bls.n	800dd44 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800dd24:	4b52      	ldr	r3, [pc, #328]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d109      	bne.n	800dd44 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd30:	4b4f      	ldr	r3, [pc, #316]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd38:	4a4d      	ldr	r2, [pc, #308]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd3e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dd40:	2380      	movs	r3, #128	; 0x80
 800dd42:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dd44:	4b4a      	ldr	r3, [pc, #296]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	f023 0203 	bic.w	r2, r3, #3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	4947      	ldr	r1, [pc, #284]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd52:	4313      	orrs	r3, r2
 800dd54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd56:	f7fd fb8f 	bl	800b478 <HAL_GetTick>
 800dd5a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd5c:	e00a      	b.n	800dd74 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd5e:	f7fd fb8b 	bl	800b478 <HAL_GetTick>
 800dd62:	4602      	mov	r2, r0
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d901      	bls.n	800dd74 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800dd70:	2303      	movs	r3, #3
 800dd72:	e077      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd74:	4b3e      	ldr	r3, [pc, #248]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f003 020c 	and.w	r2, r3, #12
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d1eb      	bne.n	800dd5e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	2b80      	cmp	r3, #128	; 0x80
 800dd8a:	d105      	bne.n	800dd98 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800dd8c:	4b38      	ldr	r3, [pc, #224]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	4a37      	ldr	r2, [pc, #220]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800dd92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd96:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f003 0302 	and.w	r3, r3, #2
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d010      	beq.n	800ddc6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	689a      	ldr	r2, [r3, #8]
 800dda8:	4b31      	ldr	r3, [pc, #196]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d208      	bcs.n	800ddc6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ddb4:	4b2e      	ldr	r3, [pc, #184]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	492b      	ldr	r1, [pc, #172]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ddc6:	4b29      	ldr	r3, [pc, #164]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 030f 	and.w	r3, r3, #15
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d210      	bcs.n	800ddf6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddd4:	4b25      	ldr	r3, [pc, #148]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f023 020f 	bic.w	r2, r3, #15
 800dddc:	4923      	ldr	r1, [pc, #140]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dde4:	4b21      	ldr	r3, [pc, #132]	; (800de6c <HAL_RCC_ClockConfig+0x25c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f003 030f 	and.w	r3, r3, #15
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d001      	beq.n	800ddf6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e036      	b.n	800de64 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 0304 	and.w	r3, r3, #4
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d008      	beq.n	800de14 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de02:	4b1b      	ldr	r3, [pc, #108]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	4918      	ldr	r1, [pc, #96]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800de10:	4313      	orrs	r3, r2
 800de12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d009      	beq.n	800de34 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800de20:	4b13      	ldr	r3, [pc, #76]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	00db      	lsls	r3, r3, #3
 800de2e:	4910      	ldr	r1, [pc, #64]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800de30:	4313      	orrs	r3, r2
 800de32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800de34:	f000 f826 	bl	800de84 <HAL_RCC_GetSysClockFreq>
 800de38:	4602      	mov	r2, r0
 800de3a:	4b0d      	ldr	r3, [pc, #52]	; (800de70 <HAL_RCC_ClockConfig+0x260>)
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	091b      	lsrs	r3, r3, #4
 800de40:	f003 030f 	and.w	r3, r3, #15
 800de44:	490c      	ldr	r1, [pc, #48]	; (800de78 <HAL_RCC_ClockConfig+0x268>)
 800de46:	5ccb      	ldrb	r3, [r1, r3]
 800de48:	f003 031f 	and.w	r3, r3, #31
 800de4c:	fa22 f303 	lsr.w	r3, r2, r3
 800de50:	4a0a      	ldr	r2, [pc, #40]	; (800de7c <HAL_RCC_ClockConfig+0x26c>)
 800de52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800de54:	4b0a      	ldr	r3, [pc, #40]	; (800de80 <HAL_RCC_ClockConfig+0x270>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fc feb7 	bl	800abcc <HAL_InitTick>
 800de5e:	4603      	mov	r3, r0
 800de60:	73fb      	strb	r3, [r7, #15]

  return status;
 800de62:	7bfb      	ldrb	r3, [r7, #15]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	40022000 	.word	0x40022000
 800de70:	40021000 	.word	0x40021000
 800de74:	04c4b400 	.word	0x04c4b400
 800de78:	0801a0e4 	.word	0x0801a0e4
 800de7c:	2000006c 	.word	0x2000006c
 800de80:	20000070 	.word	0x20000070

0800de84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de84:	b480      	push	{r7}
 800de86:	b089      	sub	sp, #36	; 0x24
 800de88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800de8a:	2300      	movs	r3, #0
 800de8c:	61fb      	str	r3, [r7, #28]
 800de8e:	2300      	movs	r3, #0
 800de90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de92:	4b3e      	ldr	r3, [pc, #248]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f003 030c 	and.w	r3, r3, #12
 800de9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800de9c:	4b3b      	ldr	r3, [pc, #236]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	f003 0303 	and.w	r3, r3, #3
 800dea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d005      	beq.n	800deb8 <HAL_RCC_GetSysClockFreq+0x34>
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2b0c      	cmp	r3, #12
 800deb0:	d121      	bne.n	800def6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d11e      	bne.n	800def6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800deb8:	4b34      	ldr	r3, [pc, #208]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f003 0308 	and.w	r3, r3, #8
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d107      	bne.n	800ded4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800dec4:	4b31      	ldr	r3, [pc, #196]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800dec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800deca:	0a1b      	lsrs	r3, r3, #8
 800decc:	f003 030f 	and.w	r3, r3, #15
 800ded0:	61fb      	str	r3, [r7, #28]
 800ded2:	e005      	b.n	800dee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ded4:	4b2d      	ldr	r3, [pc, #180]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	091b      	lsrs	r3, r3, #4
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800dee0:	4a2b      	ldr	r2, [pc, #172]	; (800df90 <HAL_RCC_GetSysClockFreq+0x10c>)
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10d      	bne.n	800df0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800def4:	e00a      	b.n	800df0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	2b04      	cmp	r3, #4
 800defa:	d102      	bne.n	800df02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800defc:	4b25      	ldr	r3, [pc, #148]	; (800df94 <HAL_RCC_GetSysClockFreq+0x110>)
 800defe:	61bb      	str	r3, [r7, #24]
 800df00:	e004      	b.n	800df0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	2b08      	cmp	r3, #8
 800df06:	d101      	bne.n	800df0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800df08:	4b23      	ldr	r3, [pc, #140]	; (800df98 <HAL_RCC_GetSysClockFreq+0x114>)
 800df0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	2b0c      	cmp	r3, #12
 800df10:	d134      	bne.n	800df7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800df12:	4b1e      	ldr	r3, [pc, #120]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	f003 0303 	and.w	r3, r3, #3
 800df1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d003      	beq.n	800df2a <HAL_RCC_GetSysClockFreq+0xa6>
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b03      	cmp	r3, #3
 800df26:	d003      	beq.n	800df30 <HAL_RCC_GetSysClockFreq+0xac>
 800df28:	e005      	b.n	800df36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800df2a:	4b1a      	ldr	r3, [pc, #104]	; (800df94 <HAL_RCC_GetSysClockFreq+0x110>)
 800df2c:	617b      	str	r3, [r7, #20]
      break;
 800df2e:	e005      	b.n	800df3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800df30:	4b19      	ldr	r3, [pc, #100]	; (800df98 <HAL_RCC_GetSysClockFreq+0x114>)
 800df32:	617b      	str	r3, [r7, #20]
      break;
 800df34:	e002      	b.n	800df3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	617b      	str	r3, [r7, #20]
      break;
 800df3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800df3c:	4b13      	ldr	r3, [pc, #76]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	091b      	lsrs	r3, r3, #4
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	3301      	adds	r3, #1
 800df48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800df4a:	4b10      	ldr	r3, [pc, #64]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	0a1b      	lsrs	r3, r3, #8
 800df50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df54:	697a      	ldr	r2, [r7, #20]
 800df56:	fb03 f202 	mul.w	r2, r3, r2
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800df62:	4b0a      	ldr	r3, [pc, #40]	; (800df8c <HAL_RCC_GetSysClockFreq+0x108>)
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	0e5b      	lsrs	r3, r3, #25
 800df68:	f003 0303 	and.w	r3, r3, #3
 800df6c:	3301      	adds	r3, #1
 800df6e:	005b      	lsls	r3, r3, #1
 800df70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800df72:	697a      	ldr	r2, [r7, #20]
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	fbb2 f3f3 	udiv	r3, r2, r3
 800df7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800df7c:	69bb      	ldr	r3, [r7, #24]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3724      	adds	r7, #36	; 0x24
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	40021000 	.word	0x40021000
 800df90:	0801a0fc 	.word	0x0801a0fc
 800df94:	00f42400 	.word	0x00f42400
 800df98:	007a1200 	.word	0x007a1200

0800df9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfa0:	4b03      	ldr	r3, [pc, #12]	; (800dfb0 <HAL_RCC_GetHCLKFreq+0x14>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	2000006c 	.word	0x2000006c

0800dfb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800dfb8:	f7ff fff0 	bl	800df9c <HAL_RCC_GetHCLKFreq>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	4b06      	ldr	r3, [pc, #24]	; (800dfd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	0a1b      	lsrs	r3, r3, #8
 800dfc4:	f003 0307 	and.w	r3, r3, #7
 800dfc8:	4904      	ldr	r1, [pc, #16]	; (800dfdc <HAL_RCC_GetPCLK1Freq+0x28>)
 800dfca:	5ccb      	ldrb	r3, [r1, r3]
 800dfcc:	f003 031f 	and.w	r3, r3, #31
 800dfd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	40021000 	.word	0x40021000
 800dfdc:	0801a0f4 	.word	0x0801a0f4

0800dfe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800dfe4:	f7ff ffda 	bl	800df9c <HAL_RCC_GetHCLKFreq>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	4b06      	ldr	r3, [pc, #24]	; (800e004 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	0adb      	lsrs	r3, r3, #11
 800dff0:	f003 0307 	and.w	r3, r3, #7
 800dff4:	4904      	ldr	r1, [pc, #16]	; (800e008 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dff6:	5ccb      	ldrb	r3, [r1, r3]
 800dff8:	f003 031f 	and.w	r3, r3, #31
 800dffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e000:	4618      	mov	r0, r3
 800e002:	bd80      	pop	{r7, pc}
 800e004:	40021000 	.word	0x40021000
 800e008:	0801a0f4 	.word	0x0801a0f4

0800e00c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	220f      	movs	r2, #15
 800e01a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800e01c:	4b12      	ldr	r3, [pc, #72]	; (800e068 <HAL_RCC_GetClockConfig+0x5c>)
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	f003 0203 	and.w	r2, r3, #3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800e028:	4b0f      	ldr	r3, [pc, #60]	; (800e068 <HAL_RCC_GetClockConfig+0x5c>)
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800e034:	4b0c      	ldr	r3, [pc, #48]	; (800e068 <HAL_RCC_GetClockConfig+0x5c>)
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800e040:	4b09      	ldr	r3, [pc, #36]	; (800e068 <HAL_RCC_GetClockConfig+0x5c>)
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	08db      	lsrs	r3, r3, #3
 800e046:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800e04e:	4b07      	ldr	r3, [pc, #28]	; (800e06c <HAL_RCC_GetClockConfig+0x60>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 020f 	and.w	r2, r3, #15
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	601a      	str	r2, [r3, #0]
}
 800e05a:	bf00      	nop
 800e05c:	370c      	adds	r7, #12
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	40021000 	.word	0x40021000
 800e06c:	40022000 	.word	0x40022000

0800e070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e078:	2300      	movs	r3, #0
 800e07a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e07c:	4b27      	ldr	r3, [pc, #156]	; (800e11c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d003      	beq.n	800e090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800e088:	f7ff f8e4 	bl	800d254 <HAL_PWREx_GetVoltageRange>
 800e08c:	6178      	str	r0, [r7, #20]
 800e08e:	e014      	b.n	800e0ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800e090:	4b22      	ldr	r3, [pc, #136]	; (800e11c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e094:	4a21      	ldr	r2, [pc, #132]	; (800e11c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e09a:	6593      	str	r3, [r2, #88]	; 0x58
 800e09c:	4b1f      	ldr	r3, [pc, #124]	; (800e11c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0a4:	60fb      	str	r3, [r7, #12]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800e0a8:	f7ff f8d4 	bl	800d254 <HAL_PWREx_GetVoltageRange>
 800e0ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800e0ae:	4b1b      	ldr	r3, [pc, #108]	; (800e11c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0b2:	4a1a      	ldr	r2, [pc, #104]	; (800e11c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800e0b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e0b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c0:	d10b      	bne.n	800e0da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b80      	cmp	r3, #128	; 0x80
 800e0c6:	d913      	bls.n	800e0f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2ba0      	cmp	r3, #160	; 0xa0
 800e0cc:	d902      	bls.n	800e0d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	613b      	str	r3, [r7, #16]
 800e0d2:	e00d      	b.n	800e0f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	613b      	str	r3, [r7, #16]
 800e0d8:	e00a      	b.n	800e0f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b7f      	cmp	r3, #127	; 0x7f
 800e0de:	d902      	bls.n	800e0e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	613b      	str	r3, [r7, #16]
 800e0e4:	e004      	b.n	800e0f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b70      	cmp	r3, #112	; 0x70
 800e0ea:	d101      	bne.n	800e0f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e0f0:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f023 020f 	bic.w	r2, r3, #15
 800e0f8:	4909      	ldr	r1, [pc, #36]	; (800e120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800e100:	4b07      	ldr	r3, [pc, #28]	; (800e120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f003 030f 	and.w	r3, r3, #15
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d001      	beq.n	800e112 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e000      	b.n	800e114 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3718      	adds	r7, #24
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	40021000 	.word	0x40021000
 800e120:	40022000 	.word	0x40022000

0800e124 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e124:	b480      	push	{r7}
 800e126:	b087      	sub	sp, #28
 800e128:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e12a:	4b2d      	ldr	r3, [pc, #180]	; (800e1e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	f003 0303 	and.w	r3, r3, #3
 800e132:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2b03      	cmp	r3, #3
 800e138:	d00b      	beq.n	800e152 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d825      	bhi.n	800e18c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b01      	cmp	r3, #1
 800e144:	d008      	beq.n	800e158 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d11f      	bne.n	800e18c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800e14c:	4b25      	ldr	r3, [pc, #148]	; (800e1e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800e14e:	613b      	str	r3, [r7, #16]
    break;
 800e150:	e01f      	b.n	800e192 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800e152:	4b25      	ldr	r3, [pc, #148]	; (800e1e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800e154:	613b      	str	r3, [r7, #16]
    break;
 800e156:	e01c      	b.n	800e192 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800e158:	4b21      	ldr	r3, [pc, #132]	; (800e1e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f003 0308 	and.w	r3, r3, #8
 800e160:	2b00      	cmp	r3, #0
 800e162:	d107      	bne.n	800e174 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800e164:	4b1e      	ldr	r3, [pc, #120]	; (800e1e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800e166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e16a:	0a1b      	lsrs	r3, r3, #8
 800e16c:	f003 030f 	and.w	r3, r3, #15
 800e170:	617b      	str	r3, [r7, #20]
 800e172:	e005      	b.n	800e180 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800e174:	4b1a      	ldr	r3, [pc, #104]	; (800e1e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	091b      	lsrs	r3, r3, #4
 800e17a:	f003 030f 	and.w	r3, r3, #15
 800e17e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800e180:	4a1a      	ldr	r2, [pc, #104]	; (800e1ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e188:	613b      	str	r3, [r7, #16]
    break;
 800e18a:	e002      	b.n	800e192 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800e18c:	2300      	movs	r3, #0
 800e18e:	613b      	str	r3, [r7, #16]
    break;
 800e190:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e192:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	091b      	lsrs	r3, r3, #4
 800e198:	f003 030f 	and.w	r3, r3, #15
 800e19c:	3301      	adds	r3, #1
 800e19e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800e1a0:	4b0f      	ldr	r3, [pc, #60]	; (800e1e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	0a1b      	lsrs	r3, r3, #8
 800e1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1aa:	693a      	ldr	r2, [r7, #16]
 800e1ac:	fb03 f202 	mul.w	r2, r3, r2
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e1b8:	4b09      	ldr	r3, [pc, #36]	; (800e1e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	0e5b      	lsrs	r3, r3, #25
 800e1be:	f003 0303 	and.w	r3, r3, #3
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	005b      	lsls	r3, r3, #1
 800e1c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800e1c8:	693a      	ldr	r2, [r7, #16]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800e1d2:	683b      	ldr	r3, [r7, #0]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	371c      	adds	r7, #28
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr
 800e1e0:	40021000 	.word	0x40021000
 800e1e4:	00f42400 	.word	0x00f42400
 800e1e8:	007a1200 	.word	0x007a1200
 800e1ec:	0801a0fc 	.word	0x0801a0fc

0800e1f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d040      	beq.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e210:	2b80      	cmp	r3, #128	; 0x80
 800e212:	d02a      	beq.n	800e26a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e214:	2b80      	cmp	r3, #128	; 0x80
 800e216:	d825      	bhi.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e218:	2b60      	cmp	r3, #96	; 0x60
 800e21a:	d026      	beq.n	800e26a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e21c:	2b60      	cmp	r3, #96	; 0x60
 800e21e:	d821      	bhi.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e220:	2b40      	cmp	r3, #64	; 0x40
 800e222:	d006      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800e224:	2b40      	cmp	r3, #64	; 0x40
 800e226:	d81d      	bhi.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d009      	beq.n	800e240 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800e22c:	2b20      	cmp	r3, #32
 800e22e:	d010      	beq.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800e230:	e018      	b.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e232:	4b89      	ldr	r3, [pc, #548]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	4a88      	ldr	r2, [pc, #544]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e23c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e23e:	e015      	b.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3304      	adds	r3, #4
 800e244:	2100      	movs	r1, #0
 800e246:	4618      	mov	r0, r3
 800e248:	f000 fb02 	bl	800e850 <RCCEx_PLLSAI1_Config>
 800e24c:	4603      	mov	r3, r0
 800e24e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e250:	e00c      	b.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3320      	adds	r3, #32
 800e256:	2100      	movs	r1, #0
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 fbed 	bl	800ea38 <RCCEx_PLLSAI2_Config>
 800e25e:	4603      	mov	r3, r0
 800e260:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e262:	e003      	b.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	74fb      	strb	r3, [r7, #19]
      break;
 800e268:	e000      	b.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800e26a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e26c:	7cfb      	ldrb	r3, [r7, #19]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10b      	bne.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e272:	4b79      	ldr	r3, [pc, #484]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e278:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e280:	4975      	ldr	r1, [pc, #468]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e282:	4313      	orrs	r3, r2
 800e284:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e288:	e001      	b.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e28a:	7cfb      	ldrb	r3, [r7, #19]
 800e28c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e296:	2b00      	cmp	r3, #0
 800e298:	d047      	beq.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2a2:	d030      	beq.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2a8:	d82a      	bhi.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e2aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2ae:	d02a      	beq.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e2b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2b4:	d824      	bhi.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ba:	d008      	beq.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 800e2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2c0:	d81e      	bhi.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00a      	beq.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 800e2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2ca:	d010      	beq.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e2cc:	e018      	b.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e2ce:	4b62      	ldr	r3, [pc, #392]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	4a61      	ldr	r2, [pc, #388]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e2d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e2da:	e015      	b.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 fab4 	bl	800e850 <RCCEx_PLLSAI1_Config>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e2ec:	e00c      	b.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	3320      	adds	r3, #32
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 fb9f 	bl	800ea38 <RCCEx_PLLSAI2_Config>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e2fe:	e003      	b.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e300:	2301      	movs	r3, #1
 800e302:	74fb      	strb	r3, [r7, #19]
      break;
 800e304:	e000      	b.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800e306:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e308:	7cfb      	ldrb	r3, [r7, #19]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d10b      	bne.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e30e:	4b52      	ldr	r3, [pc, #328]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e310:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31c:	494e      	ldr	r1, [pc, #312]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e31e:	4313      	orrs	r3, r2
 800e320:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e324:	e001      	b.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e326:	7cfb      	ldrb	r3, [r7, #19]
 800e328:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 809f 	beq.w	800e476 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e338:	2300      	movs	r3, #0
 800e33a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e33c:	4b46      	ldr	r3, [pc, #280]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e344:	2b00      	cmp	r3, #0
 800e346:	d101      	bne.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800e348:	2301      	movs	r3, #1
 800e34a:	e000      	b.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800e34c:	2300      	movs	r3, #0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00d      	beq.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e352:	4b41      	ldr	r3, [pc, #260]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e356:	4a40      	ldr	r2, [pc, #256]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e35c:	6593      	str	r3, [r2, #88]	; 0x58
 800e35e:	4b3e      	ldr	r3, [pc, #248]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e366:	60bb      	str	r3, [r7, #8]
 800e368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e36a:	2301      	movs	r3, #1
 800e36c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e36e:	4b3b      	ldr	r3, [pc, #236]	; (800e45c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a3a      	ldr	r2, [pc, #232]	; (800e45c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800e374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e37a:	f7fd f87d 	bl	800b478 <HAL_GetTick>
 800e37e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e380:	e009      	b.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e382:	f7fd f879 	bl	800b478 <HAL_GetTick>
 800e386:	4602      	mov	r2, r0
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	1ad3      	subs	r3, r2, r3
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	d902      	bls.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800e390:	2303      	movs	r3, #3
 800e392:	74fb      	strb	r3, [r7, #19]
        break;
 800e394:	e005      	b.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e396:	4b31      	ldr	r3, [pc, #196]	; (800e45c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d0ef      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800e3a2:	7cfb      	ldrb	r3, [r7, #19]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d15b      	bne.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e3a8:	4b2b      	ldr	r3, [pc, #172]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d01f      	beq.n	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3c0:	697a      	ldr	r2, [r7, #20]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d019      	beq.n	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e3c6:	4b24      	ldr	r3, [pc, #144]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e3d2:	4b21      	ldr	r3, [pc, #132]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d8:	4a1f      	ldr	r2, [pc, #124]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e3da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e3e2:	4b1d      	ldr	r3, [pc, #116]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3e8:	4a1b      	ldr	r2, [pc, #108]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e3ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e3f2:	4a19      	ldr	r2, [pc, #100]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f003 0301 	and.w	r3, r3, #1
 800e400:	2b00      	cmp	r3, #0
 800e402:	d016      	beq.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e404:	f7fd f838 	bl	800b478 <HAL_GetTick>
 800e408:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e40a:	e00b      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e40c:	f7fd f834 	bl	800b478 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	f241 3288 	movw	r2, #5000	; 0x1388
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d902      	bls.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800e41e:	2303      	movs	r3, #3
 800e420:	74fb      	strb	r3, [r7, #19]
            break;
 800e422:	e006      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e424:	4b0c      	ldr	r3, [pc, #48]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e42a:	f003 0302 	and.w	r3, r3, #2
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d0ec      	beq.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800e432:	7cfb      	ldrb	r3, [r7, #19]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10c      	bne.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e438:	4b07      	ldr	r3, [pc, #28]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e448:	4903      	ldr	r1, [pc, #12]	; (800e458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800e44a:	4313      	orrs	r3, r2
 800e44c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e450:	e008      	b.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e452:	7cfb      	ldrb	r3, [r7, #19]
 800e454:	74bb      	strb	r3, [r7, #18]
 800e456:	e005      	b.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800e458:	40021000 	.word	0x40021000
 800e45c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e460:	7cfb      	ldrb	r3, [r7, #19]
 800e462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e464:	7c7b      	ldrb	r3, [r7, #17]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d105      	bne.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e46a:	4ba0      	ldr	r3, [pc, #640]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e46e:	4a9f      	ldr	r2, [pc, #636]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00a      	beq.n	800e498 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e482:	4b9a      	ldr	r3, [pc, #616]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e488:	f023 0203 	bic.w	r2, r3, #3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e490:	4996      	ldr	r1, [pc, #600]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e492:	4313      	orrs	r3, r2
 800e494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f003 0302 	and.w	r3, r3, #2
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00a      	beq.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e4a4:	4b91      	ldr	r3, [pc, #580]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4aa:	f023 020c 	bic.w	r2, r3, #12
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b2:	498e      	ldr	r1, [pc, #568]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f003 0304 	and.w	r3, r3, #4
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00a      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e4c6:	4b89      	ldr	r3, [pc, #548]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d4:	4985      	ldr	r1, [pc, #532]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f003 0308 	and.w	r3, r3, #8
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00a      	beq.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e4e8:	4b80      	ldr	r3, [pc, #512]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4f6:	497d      	ldr	r1, [pc, #500]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0310 	and.w	r3, r3, #16
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00a      	beq.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e50a:	4b78      	ldr	r3, [pc, #480]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e518:	4974      	ldr	r1, [pc, #464]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e51a:	4313      	orrs	r3, r2
 800e51c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f003 0320 	and.w	r3, r3, #32
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00a      	beq.n	800e542 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e52c:	4b6f      	ldr	r3, [pc, #444]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e52e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e53a:	496c      	ldr	r1, [pc, #432]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e53c:	4313      	orrs	r3, r2
 800e53e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00a      	beq.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e54e:	4b67      	ldr	r3, [pc, #412]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e55c:	4963      	ldr	r1, [pc, #396]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e55e:	4313      	orrs	r3, r2
 800e560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00a      	beq.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e570:	4b5e      	ldr	r3, [pc, #376]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e57e:	495b      	ldr	r1, [pc, #364]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e580:	4313      	orrs	r3, r2
 800e582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00a      	beq.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e592:	4b56      	ldr	r3, [pc, #344]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a0:	4952      	ldr	r1, [pc, #328]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00a      	beq.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e5b4:	4b4d      	ldr	r3, [pc, #308]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c2:	494a      	ldr	r1, [pc, #296]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00a      	beq.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e5d6:	4b45      	ldr	r3, [pc, #276]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5e4:	4941      	ldr	r1, [pc, #260]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00a      	beq.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e5f8:	4b3c      	ldr	r3, [pc, #240]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e5fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e5fe:	f023 0203 	bic.w	r2, r3, #3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e606:	4939      	ldr	r1, [pc, #228]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e608:	4313      	orrs	r3, r2
 800e60a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e616:	2b00      	cmp	r3, #0
 800e618:	d028      	beq.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e61a:	4b34      	ldr	r3, [pc, #208]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e628:	4930      	ldr	r1, [pc, #192]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e62a:	4313      	orrs	r3, r2
 800e62c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e638:	d106      	bne.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e63a:	4b2c      	ldr	r3, [pc, #176]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	4a2b      	ldr	r2, [pc, #172]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e644:	60d3      	str	r3, [r2, #12]
 800e646:	e011      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e64c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e650:	d10c      	bne.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3304      	adds	r3, #4
 800e656:	2101      	movs	r1, #1
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 f8f9 	bl	800e850 <RCCEx_PLLSAI1_Config>
 800e65e:	4603      	mov	r3, r0
 800e660:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800e662:	7cfb      	ldrb	r3, [r7, #19]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800e668:	7cfb      	ldrb	r3, [r7, #19]
 800e66a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e674:	2b00      	cmp	r3, #0
 800e676:	d04d      	beq.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e680:	d108      	bne.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800e682:	4b1a      	ldr	r3, [pc, #104]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e688:	4a18      	ldr	r2, [pc, #96]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e68a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e68e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800e692:	e012      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800e694:	4b15      	ldr	r3, [pc, #84]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e69a:	4a14      	ldr	r2, [pc, #80]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e69c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800e6a4:	4b11      	ldr	r3, [pc, #68]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6b2:	490e      	ldr	r1, [pc, #56]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e6c2:	d106      	bne.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e6c4:	4b09      	ldr	r3, [pc, #36]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	4a08      	ldr	r2, [pc, #32]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e6ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6ce:	60d3      	str	r3, [r2, #12]
 800e6d0:	e020      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6da:	d109      	bne.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e6dc:	4b03      	ldr	r3, [pc, #12]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	4a02      	ldr	r2, [pc, #8]	; (800e6ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800e6e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6e6:	60d3      	str	r3, [r2, #12]
 800e6e8:	e014      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800e6ea:	bf00      	nop
 800e6ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e6f8:	d10c      	bne.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	2101      	movs	r1, #1
 800e700:	4618      	mov	r0, r3
 800e702:	f000 f8a5 	bl	800e850 <RCCEx_PLLSAI1_Config>
 800e706:	4603      	mov	r3, r0
 800e708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e70a:	7cfb      	ldrb	r3, [r7, #19]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d001      	beq.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800e710:	7cfb      	ldrb	r3, [r7, #19]
 800e712:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d028      	beq.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e720:	4b4a      	ldr	r3, [pc, #296]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e72e:	4947      	ldr	r1, [pc, #284]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e730:	4313      	orrs	r3, r2
 800e732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e73a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e73e:	d106      	bne.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e740:	4b42      	ldr	r3, [pc, #264]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	4a41      	ldr	r2, [pc, #260]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e74a:	60d3      	str	r3, [r2, #12]
 800e74c:	e011      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e756:	d10c      	bne.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	3304      	adds	r3, #4
 800e75c:	2101      	movs	r1, #1
 800e75e:	4618      	mov	r0, r3
 800e760:	f000 f876 	bl	800e850 <RCCEx_PLLSAI1_Config>
 800e764:	4603      	mov	r3, r0
 800e766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e768:	7cfb      	ldrb	r3, [r7, #19]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800e76e:	7cfb      	ldrb	r3, [r7, #19]
 800e770:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d01e      	beq.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e77e:	4b33      	ldr	r3, [pc, #204]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e784:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78e:	492f      	ldr	r1, [pc, #188]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e790:	4313      	orrs	r3, r2
 800e792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e79c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e7a0:	d10c      	bne.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	2102      	movs	r1, #2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f000 f851 	bl	800e850 <RCCEx_PLLSAI1_Config>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e7b2:	7cfb      	ldrb	r3, [r7, #19]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d001      	beq.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800e7b8:	7cfb      	ldrb	r3, [r7, #19]
 800e7ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00b      	beq.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e7c8:	4b20      	ldr	r3, [pc, #128]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e7ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7ce:	f023 0204 	bic.w	r2, r3, #4
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7d8:	491c      	ldr	r1, [pc, #112]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00b      	beq.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e7ec:	4b17      	ldr	r3, [pc, #92]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e7ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7f2:	f023 0218 	bic.w	r2, r3, #24
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7fc:	4913      	ldr	r1, [pc, #76]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e7fe:	4313      	orrs	r3, r2
 800e800:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d017      	beq.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e810:	4b0e      	ldr	r3, [pc, #56]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e820:	490a      	ldr	r1, [pc, #40]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e822:	4313      	orrs	r3, r2
 800e824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e82e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e832:	d105      	bne.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e834:	4b05      	ldr	r3, [pc, #20]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	4a04      	ldr	r2, [pc, #16]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e83a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e83e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800e840:	7cbb      	ldrb	r3, [r7, #18]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	40021000 	.word	0x40021000

0800e850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e85a:	2300      	movs	r3, #0
 800e85c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e85e:	4b72      	ldr	r3, [pc, #456]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	f003 0303 	and.w	r3, r3, #3
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00e      	beq.n	800e888 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e86a:	4b6f      	ldr	r3, [pc, #444]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	f003 0203 	and.w	r2, r3, #3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	d103      	bne.n	800e882 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
       ||
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d142      	bne.n	800e908 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	73fb      	strb	r3, [r7, #15]
 800e886:	e03f      	b.n	800e908 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b03      	cmp	r3, #3
 800e88e:	d018      	beq.n	800e8c2 <RCCEx_PLLSAI1_Config+0x72>
 800e890:	2b03      	cmp	r3, #3
 800e892:	d825      	bhi.n	800e8e0 <RCCEx_PLLSAI1_Config+0x90>
 800e894:	2b01      	cmp	r3, #1
 800e896:	d002      	beq.n	800e89e <RCCEx_PLLSAI1_Config+0x4e>
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d009      	beq.n	800e8b0 <RCCEx_PLLSAI1_Config+0x60>
 800e89c:	e020      	b.n	800e8e0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e89e:	4b62      	ldr	r3, [pc, #392]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f003 0302 	and.w	r3, r3, #2
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d11d      	bne.n	800e8e6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e8ae:	e01a      	b.n	800e8e6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e8b0:	4b5d      	ldr	r3, [pc, #372]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d116      	bne.n	800e8ea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e8c0:	e013      	b.n	800e8ea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e8c2:	4b59      	ldr	r3, [pc, #356]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10f      	bne.n	800e8ee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e8ce:	4b56      	ldr	r3, [pc, #344]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d109      	bne.n	800e8ee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e8de:	e006      	b.n	800e8ee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e8e4:	e004      	b.n	800e8f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800e8e6:	bf00      	nop
 800e8e8:	e002      	b.n	800e8f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800e8ea:	bf00      	nop
 800e8ec:	e000      	b.n	800e8f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800e8ee:	bf00      	nop
    }

    if(status == HAL_OK)
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d108      	bne.n	800e908 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800e8f6:	4b4c      	ldr	r3, [pc, #304]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	f023 0203 	bic.w	r2, r3, #3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4949      	ldr	r1, [pc, #292]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e904:	4313      	orrs	r3, r2
 800e906:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800e908:	7bfb      	ldrb	r3, [r7, #15]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f040 8086 	bne.w	800ea1c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800e910:	4b45      	ldr	r3, [pc, #276]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a44      	ldr	r2, [pc, #272]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e91a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e91c:	f7fc fdac 	bl	800b478 <HAL_GetTick>
 800e920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e922:	e009      	b.n	800e938 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e924:	f7fc fda8 	bl	800b478 <HAL_GetTick>
 800e928:	4602      	mov	r2, r0
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	1ad3      	subs	r3, r2, r3
 800e92e:	2b02      	cmp	r3, #2
 800e930:	d902      	bls.n	800e938 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800e932:	2303      	movs	r3, #3
 800e934:	73fb      	strb	r3, [r7, #15]
        break;
 800e936:	e005      	b.n	800e944 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e938:	4b3b      	ldr	r3, [pc, #236]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1ef      	bne.n	800e924 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d168      	bne.n	800ea1c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d113      	bne.n	800e978 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e950:	4b35      	ldr	r3, [pc, #212]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e952:	691a      	ldr	r2, [r3, #16]
 800e954:	4b35      	ldr	r3, [pc, #212]	; (800ea2c <RCCEx_PLLSAI1_Config+0x1dc>)
 800e956:	4013      	ands	r3, r2
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	6892      	ldr	r2, [r2, #8]
 800e95c:	0211      	lsls	r1, r2, #8
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	68d2      	ldr	r2, [r2, #12]
 800e962:	06d2      	lsls	r2, r2, #27
 800e964:	4311      	orrs	r1, r2
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	6852      	ldr	r2, [r2, #4]
 800e96a:	3a01      	subs	r2, #1
 800e96c:	0112      	lsls	r2, r2, #4
 800e96e:	430a      	orrs	r2, r1
 800e970:	492d      	ldr	r1, [pc, #180]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e972:	4313      	orrs	r3, r2
 800e974:	610b      	str	r3, [r1, #16]
 800e976:	e02d      	b.n	800e9d4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d115      	bne.n	800e9aa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e97e:	4b2a      	ldr	r3, [pc, #168]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e980:	691a      	ldr	r2, [r3, #16]
 800e982:	4b2b      	ldr	r3, [pc, #172]	; (800ea30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800e984:	4013      	ands	r3, r2
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	6892      	ldr	r2, [r2, #8]
 800e98a:	0211      	lsls	r1, r2, #8
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	6912      	ldr	r2, [r2, #16]
 800e990:	0852      	lsrs	r2, r2, #1
 800e992:	3a01      	subs	r2, #1
 800e994:	0552      	lsls	r2, r2, #21
 800e996:	4311      	orrs	r1, r2
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	6852      	ldr	r2, [r2, #4]
 800e99c:	3a01      	subs	r2, #1
 800e99e:	0112      	lsls	r2, r2, #4
 800e9a0:	430a      	orrs	r2, r1
 800e9a2:	4921      	ldr	r1, [pc, #132]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	610b      	str	r3, [r1, #16]
 800e9a8:	e014      	b.n	800e9d4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e9aa:	4b1f      	ldr	r3, [pc, #124]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e9ac:	691a      	ldr	r2, [r3, #16]
 800e9ae:	4b21      	ldr	r3, [pc, #132]	; (800ea34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	6892      	ldr	r2, [r2, #8]
 800e9b6:	0211      	lsls	r1, r2, #8
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	6952      	ldr	r2, [r2, #20]
 800e9bc:	0852      	lsrs	r2, r2, #1
 800e9be:	3a01      	subs	r2, #1
 800e9c0:	0652      	lsls	r2, r2, #25
 800e9c2:	4311      	orrs	r1, r2
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	6852      	ldr	r2, [r2, #4]
 800e9c8:	3a01      	subs	r2, #1
 800e9ca:	0112      	lsls	r2, r2, #4
 800e9cc:	430a      	orrs	r2, r1
 800e9ce:	4916      	ldr	r1, [pc, #88]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e9d4:	4b14      	ldr	r3, [pc, #80]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a13      	ldr	r2, [pc, #76]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e9da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9e0:	f7fc fd4a 	bl	800b478 <HAL_GetTick>
 800e9e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e9e6:	e009      	b.n	800e9fc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e9e8:	f7fc fd46 	bl	800b478 <HAL_GetTick>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	d902      	bls.n	800e9fc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	73fb      	strb	r3, [r7, #15]
          break;
 800e9fa:	e005      	b.n	800ea08 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d0ef      	beq.n	800e9e8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800ea08:	7bfb      	ldrb	r3, [r7, #15]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ea0e:	4b06      	ldr	r3, [pc, #24]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ea10:	691a      	ldr	r2, [r3, #16]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	4904      	ldr	r1, [pc, #16]	; (800ea28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ea1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	40021000 	.word	0x40021000
 800ea2c:	07ff800f 	.word	0x07ff800f
 800ea30:	ff9f800f 	.word	0xff9f800f
 800ea34:	f9ff800f 	.word	0xf9ff800f

0800ea38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ea46:	4b72      	ldr	r3, [pc, #456]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	f003 0303 	and.w	r3, r3, #3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00e      	beq.n	800ea70 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ea52:	4b6f      	ldr	r3, [pc, #444]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	f003 0203 	and.w	r2, r3, #3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d103      	bne.n	800ea6a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
       ||
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d142      	bne.n	800eaf0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	73fb      	strb	r3, [r7, #15]
 800ea6e:	e03f      	b.n	800eaf0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b03      	cmp	r3, #3
 800ea76:	d018      	beq.n	800eaaa <RCCEx_PLLSAI2_Config+0x72>
 800ea78:	2b03      	cmp	r3, #3
 800ea7a:	d825      	bhi.n	800eac8 <RCCEx_PLLSAI2_Config+0x90>
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d002      	beq.n	800ea86 <RCCEx_PLLSAI2_Config+0x4e>
 800ea80:	2b02      	cmp	r3, #2
 800ea82:	d009      	beq.n	800ea98 <RCCEx_PLLSAI2_Config+0x60>
 800ea84:	e020      	b.n	800eac8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ea86:	4b62      	ldr	r3, [pc, #392]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d11d      	bne.n	800eace <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ea96:	e01a      	b.n	800eace <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ea98:	4b5d      	ldr	r3, [pc, #372]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d116      	bne.n	800ead2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800eaa8:	e013      	b.n	800ead2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800eaaa:	4b59      	ldr	r3, [pc, #356]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d10f      	bne.n	800ead6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800eab6:	4b56      	ldr	r3, [pc, #344]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d109      	bne.n	800ead6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eac6:	e006      	b.n	800ead6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	73fb      	strb	r3, [r7, #15]
      break;
 800eacc:	e004      	b.n	800ead8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800eace:	bf00      	nop
 800ead0:	e002      	b.n	800ead8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800ead2:	bf00      	nop
 800ead4:	e000      	b.n	800ead8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800ead6:	bf00      	nop
    }

    if(status == HAL_OK)
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d108      	bne.n	800eaf0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800eade:	4b4c      	ldr	r3, [pc, #304]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	f023 0203 	bic.w	r2, r3, #3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4949      	ldr	r1, [pc, #292]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eaec:	4313      	orrs	r3, r2
 800eaee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800eaf0:	7bfb      	ldrb	r3, [r7, #15]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f040 8086 	bne.w	800ec04 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800eaf8:	4b45      	ldr	r3, [pc, #276]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a44      	ldr	r2, [pc, #272]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eafe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb04:	f7fc fcb8 	bl	800b478 <HAL_GetTick>
 800eb08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800eb0a:	e009      	b.n	800eb20 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800eb0c:	f7fc fcb4 	bl	800b478 <HAL_GetTick>
 800eb10:	4602      	mov	r2, r0
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d902      	bls.n	800eb20 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	73fb      	strb	r3, [r7, #15]
        break;
 800eb1e:	e005      	b.n	800eb2c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800eb20:	4b3b      	ldr	r3, [pc, #236]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1ef      	bne.n	800eb0c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800eb2c:	7bfb      	ldrb	r3, [r7, #15]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d168      	bne.n	800ec04 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d113      	bne.n	800eb60 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800eb38:	4b35      	ldr	r3, [pc, #212]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eb3a:	695a      	ldr	r2, [r3, #20]
 800eb3c:	4b35      	ldr	r3, [pc, #212]	; (800ec14 <RCCEx_PLLSAI2_Config+0x1dc>)
 800eb3e:	4013      	ands	r3, r2
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	6892      	ldr	r2, [r2, #8]
 800eb44:	0211      	lsls	r1, r2, #8
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	68d2      	ldr	r2, [r2, #12]
 800eb4a:	06d2      	lsls	r2, r2, #27
 800eb4c:	4311      	orrs	r1, r2
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	6852      	ldr	r2, [r2, #4]
 800eb52:	3a01      	subs	r2, #1
 800eb54:	0112      	lsls	r2, r2, #4
 800eb56:	430a      	orrs	r2, r1
 800eb58:	492d      	ldr	r1, [pc, #180]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	614b      	str	r3, [r1, #20]
 800eb5e:	e02d      	b.n	800ebbc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d115      	bne.n	800eb92 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800eb66:	4b2a      	ldr	r3, [pc, #168]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eb68:	695a      	ldr	r2, [r3, #20]
 800eb6a:	4b2b      	ldr	r3, [pc, #172]	; (800ec18 <RCCEx_PLLSAI2_Config+0x1e0>)
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	6892      	ldr	r2, [r2, #8]
 800eb72:	0211      	lsls	r1, r2, #8
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	6912      	ldr	r2, [r2, #16]
 800eb78:	0852      	lsrs	r2, r2, #1
 800eb7a:	3a01      	subs	r2, #1
 800eb7c:	0552      	lsls	r2, r2, #21
 800eb7e:	4311      	orrs	r1, r2
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	6852      	ldr	r2, [r2, #4]
 800eb84:	3a01      	subs	r2, #1
 800eb86:	0112      	lsls	r2, r2, #4
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	4921      	ldr	r1, [pc, #132]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	614b      	str	r3, [r1, #20]
 800eb90:	e014      	b.n	800ebbc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800eb92:	4b1f      	ldr	r3, [pc, #124]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800eb94:	695a      	ldr	r2, [r3, #20]
 800eb96:	4b21      	ldr	r3, [pc, #132]	; (800ec1c <RCCEx_PLLSAI2_Config+0x1e4>)
 800eb98:	4013      	ands	r3, r2
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	6892      	ldr	r2, [r2, #8]
 800eb9e:	0211      	lsls	r1, r2, #8
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	6952      	ldr	r2, [r2, #20]
 800eba4:	0852      	lsrs	r2, r2, #1
 800eba6:	3a01      	subs	r2, #1
 800eba8:	0652      	lsls	r2, r2, #25
 800ebaa:	4311      	orrs	r1, r2
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	6852      	ldr	r2, [r2, #4]
 800ebb0:	3a01      	subs	r2, #1
 800ebb2:	0112      	lsls	r2, r2, #4
 800ebb4:	430a      	orrs	r2, r1
 800ebb6:	4916      	ldr	r1, [pc, #88]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ebbc:	4b14      	ldr	r3, [pc, #80]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a13      	ldr	r2, [pc, #76]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ebc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebc8:	f7fc fc56 	bl	800b478 <HAL_GetTick>
 800ebcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ebce:	e009      	b.n	800ebe4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ebd0:	f7fc fc52 	bl	800b478 <HAL_GetTick>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	2b02      	cmp	r3, #2
 800ebdc:	d902      	bls.n	800ebe4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800ebde:	2303      	movs	r3, #3
 800ebe0:	73fb      	strb	r3, [r7, #15]
          break;
 800ebe2:	e005      	b.n	800ebf0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ebe4:	4b0a      	ldr	r3, [pc, #40]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d0ef      	beq.n	800ebd0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ebf6:	4b06      	ldr	r3, [pc, #24]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ebf8:	695a      	ldr	r2, [r3, #20]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	4904      	ldr	r1, [pc, #16]	; (800ec10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ec00:	4313      	orrs	r3, r2
 800ec02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	40021000 	.word	0x40021000
 800ec14:	07ff800f 	.word	0x07ff800f
 800ec18:	ff9f800f 	.word	0xff9f800f
 800ec1c:	f9ff800f 	.word	0xf9ff800f

0800ec20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d101      	bne.n	800ec32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e049      	b.n	800ecc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d106      	bne.n	800ec4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f841 	bl	800ecce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2202      	movs	r2, #2
 800ec50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3304      	adds	r3, #4
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	4610      	mov	r0, r2
 800ec60:	f000 f9f8 	bl	800f054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2201      	movs	r2, #1
 800ec68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ecce:	b480      	push	{r7}
 800ecd0:	b083      	sub	sp, #12
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ecd6:	bf00      	nop
 800ecd8:	370c      	adds	r7, #12
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
	...

0800ece4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d001      	beq.n	800ecfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	e04f      	b.n	800ed9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2202      	movs	r2, #2
 800ed00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68da      	ldr	r2, [r3, #12]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f042 0201 	orr.w	r2, r2, #1
 800ed12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a23      	ldr	r2, [pc, #140]	; (800eda8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d01d      	beq.n	800ed5a <HAL_TIM_Base_Start_IT+0x76>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed26:	d018      	beq.n	800ed5a <HAL_TIM_Base_Start_IT+0x76>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a1f      	ldr	r2, [pc, #124]	; (800edac <HAL_TIM_Base_Start_IT+0xc8>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d013      	beq.n	800ed5a <HAL_TIM_Base_Start_IT+0x76>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a1e      	ldr	r2, [pc, #120]	; (800edb0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d00e      	beq.n	800ed5a <HAL_TIM_Base_Start_IT+0x76>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a1c      	ldr	r2, [pc, #112]	; (800edb4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d009      	beq.n	800ed5a <HAL_TIM_Base_Start_IT+0x76>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a1b      	ldr	r2, [pc, #108]	; (800edb8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d004      	beq.n	800ed5a <HAL_TIM_Base_Start_IT+0x76>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a19      	ldr	r2, [pc, #100]	; (800edbc <HAL_TIM_Base_Start_IT+0xd8>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d115      	bne.n	800ed86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	689a      	ldr	r2, [r3, #8]
 800ed60:	4b17      	ldr	r3, [pc, #92]	; (800edc0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed62:	4013      	ands	r3, r2
 800ed64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2b06      	cmp	r3, #6
 800ed6a:	d015      	beq.n	800ed98 <HAL_TIM_Base_Start_IT+0xb4>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed72:	d011      	beq.n	800ed98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f042 0201 	orr.w	r2, r2, #1
 800ed82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed84:	e008      	b.n	800ed98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f042 0201 	orr.w	r2, r2, #1
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	e000      	b.n	800ed9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3714      	adds	r7, #20
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr
 800eda8:	40012c00 	.word	0x40012c00
 800edac:	40000400 	.word	0x40000400
 800edb0:	40000800 	.word	0x40000800
 800edb4:	40000c00 	.word	0x40000c00
 800edb8:	40013400 	.word	0x40013400
 800edbc:	40014000 	.word	0x40014000
 800edc0:	00010007 	.word	0x00010007

0800edc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	f003 0302 	and.w	r3, r3, #2
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	d122      	bne.n	800ee20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	f003 0302 	and.w	r3, r3, #2
 800ede4:	2b02      	cmp	r3, #2
 800ede6:	d11b      	bne.n	800ee20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f06f 0202 	mvn.w	r2, #2
 800edf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2201      	movs	r2, #1
 800edf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	f003 0303 	and.w	r3, r3, #3
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d003      	beq.n	800ee0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f905 	bl	800f016 <HAL_TIM_IC_CaptureCallback>
 800ee0c:	e005      	b.n	800ee1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 f8f7 	bl	800f002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f908 	bl	800f02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	691b      	ldr	r3, [r3, #16]
 800ee26:	f003 0304 	and.w	r3, r3, #4
 800ee2a:	2b04      	cmp	r3, #4
 800ee2c:	d122      	bne.n	800ee74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	f003 0304 	and.w	r3, r3, #4
 800ee38:	2b04      	cmp	r3, #4
 800ee3a:	d11b      	bne.n	800ee74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f06f 0204 	mvn.w	r2, #4
 800ee44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2202      	movs	r2, #2
 800ee4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	699b      	ldr	r3, [r3, #24]
 800ee52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d003      	beq.n	800ee62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f8db 	bl	800f016 <HAL_TIM_IC_CaptureCallback>
 800ee60:	e005      	b.n	800ee6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f8cd 	bl	800f002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 f8de 	bl	800f02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	f003 0308 	and.w	r3, r3, #8
 800ee7e:	2b08      	cmp	r3, #8
 800ee80:	d122      	bne.n	800eec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	f003 0308 	and.w	r3, r3, #8
 800ee8c:	2b08      	cmp	r3, #8
 800ee8e:	d11b      	bne.n	800eec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f06f 0208 	mvn.w	r2, #8
 800ee98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2204      	movs	r2, #4
 800ee9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	69db      	ldr	r3, [r3, #28]
 800eea6:	f003 0303 	and.w	r3, r3, #3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f8b1 	bl	800f016 <HAL_TIM_IC_CaptureCallback>
 800eeb4:	e005      	b.n	800eec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f8a3 	bl	800f002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f8b4 	bl	800f02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	691b      	ldr	r3, [r3, #16]
 800eece:	f003 0310 	and.w	r3, r3, #16
 800eed2:	2b10      	cmp	r3, #16
 800eed4:	d122      	bne.n	800ef1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	f003 0310 	and.w	r3, r3, #16
 800eee0:	2b10      	cmp	r3, #16
 800eee2:	d11b      	bne.n	800ef1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f06f 0210 	mvn.w	r2, #16
 800eeec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2208      	movs	r2, #8
 800eef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	69db      	ldr	r3, [r3, #28]
 800eefa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d003      	beq.n	800ef0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 f887 	bl	800f016 <HAL_TIM_IC_CaptureCallback>
 800ef08:	e005      	b.n	800ef16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f879 	bl	800f002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 f88a 	bl	800f02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	f003 0301 	and.w	r3, r3, #1
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d10e      	bne.n	800ef48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	f003 0301 	and.w	r3, r3, #1
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d107      	bne.n	800ef48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f06f 0201 	mvn.w	r2, #1
 800ef40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7fa ff44 	bl	8009dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	691b      	ldr	r3, [r3, #16]
 800ef4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef52:	2b80      	cmp	r3, #128	; 0x80
 800ef54:	d10e      	bne.n	800ef74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef60:	2b80      	cmp	r3, #128	; 0x80
 800ef62:	d107      	bne.n	800ef74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ef6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f914 	bl	800f19c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef82:	d10e      	bne.n	800efa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef8e:	2b80      	cmp	r3, #128	; 0x80
 800ef90:	d107      	bne.n	800efa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 f907 	bl	800f1b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efac:	2b40      	cmp	r3, #64	; 0x40
 800efae:	d10e      	bne.n	800efce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efba:	2b40      	cmp	r3, #64	; 0x40
 800efbc:	d107      	bne.n	800efce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800efc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f000 f838 	bl	800f03e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	691b      	ldr	r3, [r3, #16]
 800efd4:	f003 0320 	and.w	r3, r3, #32
 800efd8:	2b20      	cmp	r3, #32
 800efda:	d10e      	bne.n	800effa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	f003 0320 	and.w	r3, r3, #32
 800efe6:	2b20      	cmp	r3, #32
 800efe8:	d107      	bne.n	800effa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f06f 0220 	mvn.w	r2, #32
 800eff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f000 f8c7 	bl	800f188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800effa:	bf00      	nop
 800effc:	3708      	adds	r7, #8
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f002:	b480      	push	{r7}
 800f004:	b083      	sub	sp, #12
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f00a:	bf00      	nop
 800f00c:	370c      	adds	r7, #12
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr

0800f016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f016:	b480      	push	{r7}
 800f018:	b083      	sub	sp, #12
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f01e:	bf00      	nop
 800f020:	370c      	adds	r7, #12
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr

0800f02a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f02a:	b480      	push	{r7}
 800f02c:	b083      	sub	sp, #12
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f032:	bf00      	nop
 800f034:	370c      	adds	r7, #12
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr

0800f03e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f03e:	b480      	push	{r7}
 800f040:	b083      	sub	sp, #12
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f046:	bf00      	nop
 800f048:	370c      	adds	r7, #12
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
	...

0800f054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a40      	ldr	r2, [pc, #256]	; (800f168 <TIM_Base_SetConfig+0x114>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d013      	beq.n	800f094 <TIM_Base_SetConfig+0x40>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f072:	d00f      	beq.n	800f094 <TIM_Base_SetConfig+0x40>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a3d      	ldr	r2, [pc, #244]	; (800f16c <TIM_Base_SetConfig+0x118>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d00b      	beq.n	800f094 <TIM_Base_SetConfig+0x40>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a3c      	ldr	r2, [pc, #240]	; (800f170 <TIM_Base_SetConfig+0x11c>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d007      	beq.n	800f094 <TIM_Base_SetConfig+0x40>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a3b      	ldr	r2, [pc, #236]	; (800f174 <TIM_Base_SetConfig+0x120>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d003      	beq.n	800f094 <TIM_Base_SetConfig+0x40>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a3a      	ldr	r2, [pc, #232]	; (800f178 <TIM_Base_SetConfig+0x124>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d108      	bne.n	800f0a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f09a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a2f      	ldr	r2, [pc, #188]	; (800f168 <TIM_Base_SetConfig+0x114>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d01f      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0b4:	d01b      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a2c      	ldr	r2, [pc, #176]	; (800f16c <TIM_Base_SetConfig+0x118>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d017      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a2b      	ldr	r2, [pc, #172]	; (800f170 <TIM_Base_SetConfig+0x11c>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d013      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a2a      	ldr	r2, [pc, #168]	; (800f174 <TIM_Base_SetConfig+0x120>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00f      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a29      	ldr	r2, [pc, #164]	; (800f178 <TIM_Base_SetConfig+0x124>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d00b      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a28      	ldr	r2, [pc, #160]	; (800f17c <TIM_Base_SetConfig+0x128>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d007      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a27      	ldr	r2, [pc, #156]	; (800f180 <TIM_Base_SetConfig+0x12c>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d003      	beq.n	800f0ee <TIM_Base_SetConfig+0x9a>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4a26      	ldr	r2, [pc, #152]	; (800f184 <TIM_Base_SetConfig+0x130>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d108      	bne.n	800f100 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	695b      	ldr	r3, [r3, #20]
 800f10a:	4313      	orrs	r3, r2
 800f10c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	689a      	ldr	r2, [r3, #8]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a10      	ldr	r2, [pc, #64]	; (800f168 <TIM_Base_SetConfig+0x114>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d00f      	beq.n	800f14c <TIM_Base_SetConfig+0xf8>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4a12      	ldr	r2, [pc, #72]	; (800f178 <TIM_Base_SetConfig+0x124>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d00b      	beq.n	800f14c <TIM_Base_SetConfig+0xf8>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a11      	ldr	r2, [pc, #68]	; (800f17c <TIM_Base_SetConfig+0x128>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d007      	beq.n	800f14c <TIM_Base_SetConfig+0xf8>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a10      	ldr	r2, [pc, #64]	; (800f180 <TIM_Base_SetConfig+0x12c>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d003      	beq.n	800f14c <TIM_Base_SetConfig+0xf8>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a0f      	ldr	r2, [pc, #60]	; (800f184 <TIM_Base_SetConfig+0x130>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d103      	bne.n	800f154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	691a      	ldr	r2, [r3, #16]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2201      	movs	r2, #1
 800f158:	615a      	str	r2, [r3, #20]
}
 800f15a:	bf00      	nop
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	40012c00 	.word	0x40012c00
 800f16c:	40000400 	.word	0x40000400
 800f170:	40000800 	.word	0x40000800
 800f174:	40000c00 	.word	0x40000c00
 800f178:	40013400 	.word	0x40013400
 800f17c:	40014000 	.word	0x40014000
 800f180:	40014400 	.word	0x40014400
 800f184:	40014800 	.word	0x40014800

0800f188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f188:	b480      	push	{r7}
 800f18a:	b083      	sub	sp, #12
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f190:	bf00      	nop
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f1b8:	bf00      	nop
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d101      	bne.n	800f1d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e042      	b.n	800f25c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d106      	bne.n	800f1ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f7fb fbb5 	bl	800a958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2224      	movs	r2, #36	; 0x24
 800f1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f022 0201 	bic.w	r2, r2, #1
 800f204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fc52 	bl	800fab0 <UART_SetConfig>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d101      	bne.n	800f216 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f212:	2301      	movs	r3, #1
 800f214:	e022      	b.n	800f25c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d002      	beq.n	800f224 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 ff42 	bl	80100a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	689a      	ldr	r2, [r3, #8]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f042 0201 	orr.w	r2, r2, #1
 800f252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 ffc9 	bl	80101ec <UART_CheckIdleState>
 800f25a:	4603      	mov	r3, r0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b08a      	sub	sp, #40	; 0x28
 800f268:	af02      	add	r7, sp, #8
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	603b      	str	r3, [r7, #0]
 800f270:	4613      	mov	r3, r2
 800f272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f27a:	2b20      	cmp	r3, #32
 800f27c:	f040 8084 	bne.w	800f388 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <HAL_UART_Transmit+0x28>
 800f286:	88fb      	ldrh	r3, [r7, #6]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	e07c      	b.n	800f38a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f296:	2b01      	cmp	r3, #1
 800f298:	d101      	bne.n	800f29e <HAL_UART_Transmit+0x3a>
 800f29a:	2302      	movs	r3, #2
 800f29c:	e075      	b.n	800f38a <HAL_UART_Transmit+0x126>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2221      	movs	r2, #33	; 0x21
 800f2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f2b6:	f7fc f8df 	bl	800b478 <HAL_GetTick>
 800f2ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	88fa      	ldrh	r2, [r7, #6]
 800f2c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	88fa      	ldrh	r2, [r7, #6]
 800f2c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2d4:	d108      	bne.n	800f2e8 <HAL_UART_Transmit+0x84>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d104      	bne.n	800f2e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	61bb      	str	r3, [r7, #24]
 800f2e6:	e003      	b.n	800f2f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f2f8:	e02d      	b.n	800f356 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	2200      	movs	r2, #0
 800f302:	2180      	movs	r1, #128	; 0x80
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	f000 ffbc 	bl	8010282 <UART_WaitOnFlagUntilTimeout>
 800f30a:	4603      	mov	r3, r0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d001      	beq.n	800f314 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f310:	2303      	movs	r3, #3
 800f312:	e03a      	b.n	800f38a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d10b      	bne.n	800f332 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	881a      	ldrh	r2, [r3, #0]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f326:	b292      	uxth	r2, r2
 800f328:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	3302      	adds	r3, #2
 800f32e:	61bb      	str	r3, [r7, #24]
 800f330:	e008      	b.n	800f344 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	781a      	ldrb	r2, [r3, #0]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	b292      	uxth	r2, r2
 800f33c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	3301      	adds	r3, #1
 800f342:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	3b01      	subs	r3, #1
 800f34e:	b29a      	uxth	r2, r3
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1cb      	bne.n	800f2fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	2200      	movs	r2, #0
 800f36a:	2140      	movs	r1, #64	; 0x40
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f000 ff88 	bl	8010282 <UART_WaitOnFlagUntilTimeout>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800f378:	2303      	movs	r3, #3
 800f37a:	e006      	b.n	800f38a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2220      	movs	r2, #32
 800f380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f384:	2300      	movs	r3, #0
 800f386:	e000      	b.n	800f38a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800f388:	2302      	movs	r3, #2
  }
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3720      	adds	r7, #32
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
	...

0800f394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b08a      	sub	sp, #40	; 0x28
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3a8:	2b20      	cmp	r3, #32
 800f3aa:	d142      	bne.n	800f432 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d002      	beq.n	800f3b8 <HAL_UART_Receive_IT+0x24>
 800f3b2:	88fb      	ldrh	r3, [r7, #6]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e03b      	b.n	800f434 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d101      	bne.n	800f3ca <HAL_UART_Receive_IT+0x36>
 800f3c6:	2302      	movs	r3, #2
 800f3c8:	e034      	b.n	800f434 <HAL_UART_Receive_IT+0xa0>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	4a17      	ldr	r2, [pc, #92]	; (800f43c <HAL_UART_Receive_IT+0xa8>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d01f      	beq.n	800f422 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d018      	beq.n	800f422 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	e853 3f00 	ldrex	r3, [r3]
 800f3fc:	613b      	str	r3, [r7, #16]
   return(result);
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f404:	627b      	str	r3, [r7, #36]	; 0x24
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	461a      	mov	r2, r3
 800f40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40e:	623b      	str	r3, [r7, #32]
 800f410:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f412:	69f9      	ldr	r1, [r7, #28]
 800f414:	6a3a      	ldr	r2, [r7, #32]
 800f416:	e841 2300 	strex	r3, r2, [r1]
 800f41a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d1e6      	bne.n	800f3f0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	461a      	mov	r2, r3
 800f426:	68b9      	ldr	r1, [r7, #8]
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f000 fff3 	bl	8010414 <UART_Start_Receive_IT>
 800f42e:	4603      	mov	r3, r0
 800f430:	e000      	b.n	800f434 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f432:	2302      	movs	r3, #2
  }
}
 800f434:	4618      	mov	r0, r3
 800f436:	3728      	adds	r7, #40	; 0x28
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	40008000 	.word	0x40008000

0800f440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b0ba      	sub	sp, #232	; 0xe8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	69db      	ldr	r3, [r3, #28]
 800f44e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f46a:	f640 030f 	movw	r3, #2063	; 0x80f
 800f46e:	4013      	ands	r3, r2
 800f470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d11b      	bne.n	800f4b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f480:	f003 0320 	and.w	r3, r3, #32
 800f484:	2b00      	cmp	r3, #0
 800f486:	d015      	beq.n	800f4b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f48c:	f003 0320 	and.w	r3, r3, #32
 800f490:	2b00      	cmp	r3, #0
 800f492:	d105      	bne.n	800f4a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d009      	beq.n	800f4b4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f000 82d6 	beq.w	800fa56 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	4798      	blx	r3
      }
      return;
 800f4b2:	e2d0      	b.n	800fa56 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800f4b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 811f 	beq.w	800f6fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f4be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f4c2:	4b8b      	ldr	r3, [pc, #556]	; (800f6f0 <HAL_UART_IRQHandler+0x2b0>)
 800f4c4:	4013      	ands	r3, r2
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d106      	bne.n	800f4d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f4ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f4ce:	4b89      	ldr	r3, [pc, #548]	; (800f6f4 <HAL_UART_IRQHandler+0x2b4>)
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f000 8112 	beq.w	800f6fc <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4dc:	f003 0301 	and.w	r3, r3, #1
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d011      	beq.n	800f508 <HAL_UART_IRQHandler+0xc8>
 800f4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00b      	beq.n	800f508 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4fe:	f043 0201 	orr.w	r2, r3, #1
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f50c:	f003 0302 	and.w	r3, r3, #2
 800f510:	2b00      	cmp	r3, #0
 800f512:	d011      	beq.n	800f538 <HAL_UART_IRQHandler+0xf8>
 800f514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00b      	beq.n	800f538 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2202      	movs	r2, #2
 800f526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f52e:	f043 0204 	orr.w	r2, r3, #4
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f53c:	f003 0304 	and.w	r3, r3, #4
 800f540:	2b00      	cmp	r3, #0
 800f542:	d011      	beq.n	800f568 <HAL_UART_IRQHandler+0x128>
 800f544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f548:	f003 0301 	and.w	r3, r3, #1
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00b      	beq.n	800f568 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2204      	movs	r2, #4
 800f556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f55e:	f043 0202 	orr.w	r2, r3, #2
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f56c:	f003 0308 	and.w	r3, r3, #8
 800f570:	2b00      	cmp	r3, #0
 800f572:	d017      	beq.n	800f5a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f578:	f003 0320 	and.w	r3, r3, #32
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d105      	bne.n	800f58c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f580:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f584:	4b5a      	ldr	r3, [pc, #360]	; (800f6f0 <HAL_UART_IRQHandler+0x2b0>)
 800f586:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00b      	beq.n	800f5a4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2208      	movs	r2, #8
 800f592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f59a:	f043 0208 	orr.w	r2, r3, #8
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d012      	beq.n	800f5d6 <HAL_UART_IRQHandler+0x196>
 800f5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00c      	beq.n	800f5d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5cc:	f043 0220 	orr.w	r2, r3, #32
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 823c 	beq.w	800fa5a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5e6:	f003 0320 	and.w	r3, r3, #32
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d013      	beq.n	800f616 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5f2:	f003 0320 	and.w	r3, r3, #32
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d105      	bne.n	800f606 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f5fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f602:	2b00      	cmp	r3, #0
 800f604:	d007      	beq.n	800f616 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f61c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f62a:	2b40      	cmp	r3, #64	; 0x40
 800f62c:	d005      	beq.n	800f63a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f62e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f632:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f636:	2b00      	cmp	r3, #0
 800f638:	d04f      	beq.n	800f6da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f001 f814 	bl	8010668 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f64a:	2b40      	cmp	r3, #64	; 0x40
 800f64c:	d141      	bne.n	800f6d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3308      	adds	r3, #8
 800f654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f65c:	e853 3f00 	ldrex	r3, [r3]
 800f660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f66c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	3308      	adds	r3, #8
 800f676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f67a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f67e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f68a:	e841 2300 	strex	r3, r2, [r1]
 800f68e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1d9      	bne.n	800f64e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d013      	beq.n	800f6ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6a6:	4a14      	ldr	r2, [pc, #80]	; (800f6f8 <HAL_UART_IRQHandler+0x2b8>)
 800f6a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fc f850 	bl	800b754 <HAL_DMA_Abort_IT>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d017      	beq.n	800f6ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6c8:	e00f      	b.n	800f6ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f000 f9da 	bl	800fa84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6d0:	e00b      	b.n	800f6ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f9d6 	bl	800fa84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6d8:	e007      	b.n	800f6ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 f9d2 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f6e8:	e1b7      	b.n	800fa5a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6ea:	bf00      	nop
    return;
 800f6ec:	e1b5      	b.n	800fa5a <HAL_UART_IRQHandler+0x61a>
 800f6ee:	bf00      	nop
 800f6f0:	10000001 	.word	0x10000001
 800f6f4:	04000120 	.word	0x04000120
 800f6f8:	08010735 	.word	0x08010735

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f700:	2b01      	cmp	r3, #1
 800f702:	f040 814a 	bne.w	800f99a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f70a:	f003 0310 	and.w	r3, r3, #16
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 8143 	beq.w	800f99a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f718:	f003 0310 	and.w	r3, r3, #16
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 813c 	beq.w	800f99a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2210      	movs	r2, #16
 800f728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f734:	2b40      	cmp	r3, #64	; 0x40
 800f736:	f040 80b5 	bne.w	800f8a4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f746:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	f000 8187 	beq.w	800fa5e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f75a:	429a      	cmp	r2, r3
 800f75c:	f080 817f 	bcs.w	800fa5e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f003 0320 	and.w	r3, r3, #32
 800f776:	2b00      	cmp	r3, #0
 800f778:	f040 8086 	bne.w	800f888 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f788:	e853 3f00 	ldrex	r3, [r3]
 800f78c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f7aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f7b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f7b6:	e841 2300 	strex	r3, r2, [r1]
 800f7ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1da      	bne.n	800f77c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	3308      	adds	r3, #8
 800f7cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7d0:	e853 3f00 	ldrex	r3, [r3]
 800f7d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f7d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7d8:	f023 0301 	bic.w	r3, r3, #1
 800f7dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	3308      	adds	r3, #8
 800f7e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f7ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f7ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f7f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7f6:	e841 2300 	strex	r3, r2, [r1]
 800f7fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f7fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1e1      	bne.n	800f7c6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3308      	adds	r3, #8
 800f808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f80a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f80c:	e853 3f00 	ldrex	r3, [r3]
 800f810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	3308      	adds	r3, #8
 800f822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f826:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f82c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f82e:	e841 2300 	strex	r3, r2, [r1]
 800f832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f836:	2b00      	cmp	r3, #0
 800f838:	d1e3      	bne.n	800f802 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2220      	movs	r2, #32
 800f83e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f850:	e853 3f00 	ldrex	r3, [r3]
 800f854:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f858:	f023 0310 	bic.w	r3, r3, #16
 800f85c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	461a      	mov	r2, r3
 800f866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f86a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f86c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f872:	e841 2300 	strex	r3, r2, [r1]
 800f876:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1e4      	bne.n	800f848 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f882:	4618      	mov	r0, r3
 800f884:	f7fb ff0a 	bl	800b69c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f894:	b29b      	uxth	r3, r3
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	b29b      	uxth	r3, r3
 800f89a:	4619      	mov	r1, r3
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 f8fb 	bl	800fa98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f8a2:	e0dc      	b.n	800fa5e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	1ad3      	subs	r3, r2, r3
 800f8b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 80ce 	beq.w	800fa62 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800f8c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 80c9 	beq.w	800fa62 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d8:	e853 3f00 	ldrex	r3, [r3]
 800f8dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8f2:	647b      	str	r3, [r7, #68]	; 0x44
 800f8f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8fa:	e841 2300 	strex	r3, r2, [r1]
 800f8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1e4      	bne.n	800f8d0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	3308      	adds	r3, #8
 800f90c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f910:	e853 3f00 	ldrex	r3, [r3]
 800f914:	623b      	str	r3, [r7, #32]
   return(result);
 800f916:	6a3b      	ldr	r3, [r7, #32]
 800f918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f91c:	f023 0301 	bic.w	r3, r3, #1
 800f920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3308      	adds	r3, #8
 800f92a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f92e:	633a      	str	r2, [r7, #48]	; 0x30
 800f930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f936:	e841 2300 	strex	r3, r2, [r1]
 800f93a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e1      	bne.n	800f906 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2220      	movs	r2, #32
 800f946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	e853 3f00 	ldrex	r3, [r3]
 800f962:	60fb      	str	r3, [r7, #12]
   return(result);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f023 0310 	bic.w	r3, r3, #16
 800f96a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	461a      	mov	r2, r3
 800f974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f978:	61fb      	str	r3, [r7, #28]
 800f97a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97c:	69b9      	ldr	r1, [r7, #24]
 800f97e:	69fa      	ldr	r2, [r7, #28]
 800f980:	e841 2300 	strex	r3, r2, [r1]
 800f984:	617b      	str	r3, [r7, #20]
   return(result);
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1e4      	bne.n	800f956 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f98c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f990:	4619      	mov	r1, r3
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f880 	bl	800fa98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f998:	e063      	b.n	800fa62 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f99e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00e      	beq.n	800f9c4 <HAL_UART_IRQHandler+0x584>
 800f9a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d008      	beq.n	800f9c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f9ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f001 fb5f 	bl	8011080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9c2:	e051      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d014      	beq.n	800f9fa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d105      	bne.n	800f9e8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f9dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d008      	beq.n	800f9fa <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d03a      	beq.n	800fa66 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	4798      	blx	r3
    }
    return;
 800f9f8:	e035      	b.n	800fa66 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d009      	beq.n	800fa1a <HAL_UART_IRQHandler+0x5da>
 800fa06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d003      	beq.n	800fa1a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 fea4 	bl	8010760 <UART_EndTransmit_IT>
    return;
 800fa18:	e026      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fa1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d009      	beq.n	800fa3a <HAL_UART_IRQHandler+0x5fa>
 800fa26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d003      	beq.n	800fa3a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f001 fb38 	bl	80110a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa38:	e016      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fa3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d010      	beq.n	800fa68 <HAL_UART_IRQHandler+0x628>
 800fa46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	da0c      	bge.n	800fa68 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f001 fb20 	bl	8011094 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa54:	e008      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
      return;
 800fa56:	bf00      	nop
 800fa58:	e006      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
    return;
 800fa5a:	bf00      	nop
 800fa5c:	e004      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
      return;
 800fa5e:	bf00      	nop
 800fa60:	e002      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
      return;
 800fa62:	bf00      	nop
 800fa64:	e000      	b.n	800fa68 <HAL_UART_IRQHandler+0x628>
    return;
 800fa66:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800fa68:	37e8      	adds	r7, #232	; 0xe8
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop

0800fa70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	460b      	mov	r3, r1
 800faa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fab4:	b08c      	sub	sp, #48	; 0x30
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800faba:	2300      	movs	r3, #0
 800fabc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	689a      	ldr	r2, [r3, #8]
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	691b      	ldr	r3, [r3, #16]
 800fac8:	431a      	orrs	r2, r3
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	695b      	ldr	r3, [r3, #20]
 800face:	431a      	orrs	r2, r3
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	69db      	ldr	r3, [r3, #28]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	4baa      	ldr	r3, [pc, #680]	; (800fd88 <UART_SetConfig+0x2d8>)
 800fae0:	4013      	ands	r3, r2
 800fae2:	697a      	ldr	r2, [r7, #20]
 800fae4:	6812      	ldr	r2, [r2, #0]
 800fae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fae8:	430b      	orrs	r3, r1
 800faea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	68da      	ldr	r2, [r3, #12]
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	430a      	orrs	r2, r1
 800fb00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a9f      	ldr	r2, [pc, #636]	; (800fd8c <UART_SetConfig+0x2dc>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d004      	beq.n	800fb1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800fb26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	6812      	ldr	r2, [r2, #0]
 800fb2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb30:	430b      	orrs	r3, r1
 800fb32:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3a:	f023 010f 	bic.w	r1, r3, #15
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	430a      	orrs	r2, r1
 800fb48:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a90      	ldr	r2, [pc, #576]	; (800fd90 <UART_SetConfig+0x2e0>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d125      	bne.n	800fba0 <UART_SetConfig+0xf0>
 800fb54:	4b8f      	ldr	r3, [pc, #572]	; (800fd94 <UART_SetConfig+0x2e4>)
 800fb56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb5a:	f003 0303 	and.w	r3, r3, #3
 800fb5e:	2b03      	cmp	r3, #3
 800fb60:	d81a      	bhi.n	800fb98 <UART_SetConfig+0xe8>
 800fb62:	a201      	add	r2, pc, #4	; (adr r2, 800fb68 <UART_SetConfig+0xb8>)
 800fb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb68:	0800fb79 	.word	0x0800fb79
 800fb6c:	0800fb89 	.word	0x0800fb89
 800fb70:	0800fb81 	.word	0x0800fb81
 800fb74:	0800fb91 	.word	0x0800fb91
 800fb78:	2301      	movs	r3, #1
 800fb7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb7e:	e116      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fb80:	2302      	movs	r3, #2
 800fb82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb86:	e112      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fb88:	2304      	movs	r3, #4
 800fb8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb8e:	e10e      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fb90:	2308      	movs	r3, #8
 800fb92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb96:	e10a      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fb98:	2310      	movs	r3, #16
 800fb9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb9e:	e106      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a7c      	ldr	r2, [pc, #496]	; (800fd98 <UART_SetConfig+0x2e8>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d138      	bne.n	800fc1c <UART_SetConfig+0x16c>
 800fbaa:	4b7a      	ldr	r3, [pc, #488]	; (800fd94 <UART_SetConfig+0x2e4>)
 800fbac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbb0:	f003 030c 	and.w	r3, r3, #12
 800fbb4:	2b0c      	cmp	r3, #12
 800fbb6:	d82d      	bhi.n	800fc14 <UART_SetConfig+0x164>
 800fbb8:	a201      	add	r2, pc, #4	; (adr r2, 800fbc0 <UART_SetConfig+0x110>)
 800fbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbbe:	bf00      	nop
 800fbc0:	0800fbf5 	.word	0x0800fbf5
 800fbc4:	0800fc15 	.word	0x0800fc15
 800fbc8:	0800fc15 	.word	0x0800fc15
 800fbcc:	0800fc15 	.word	0x0800fc15
 800fbd0:	0800fc05 	.word	0x0800fc05
 800fbd4:	0800fc15 	.word	0x0800fc15
 800fbd8:	0800fc15 	.word	0x0800fc15
 800fbdc:	0800fc15 	.word	0x0800fc15
 800fbe0:	0800fbfd 	.word	0x0800fbfd
 800fbe4:	0800fc15 	.word	0x0800fc15
 800fbe8:	0800fc15 	.word	0x0800fc15
 800fbec:	0800fc15 	.word	0x0800fc15
 800fbf0:	0800fc0d 	.word	0x0800fc0d
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fbfa:	e0d8      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc02:	e0d4      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc04:	2304      	movs	r3, #4
 800fc06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc0a:	e0d0      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc0c:	2308      	movs	r3, #8
 800fc0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc12:	e0cc      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc14:	2310      	movs	r3, #16
 800fc16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc1a:	e0c8      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a5e      	ldr	r2, [pc, #376]	; (800fd9c <UART_SetConfig+0x2ec>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d125      	bne.n	800fc72 <UART_SetConfig+0x1c2>
 800fc26:	4b5b      	ldr	r3, [pc, #364]	; (800fd94 <UART_SetConfig+0x2e4>)
 800fc28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc30:	2b30      	cmp	r3, #48	; 0x30
 800fc32:	d016      	beq.n	800fc62 <UART_SetConfig+0x1b2>
 800fc34:	2b30      	cmp	r3, #48	; 0x30
 800fc36:	d818      	bhi.n	800fc6a <UART_SetConfig+0x1ba>
 800fc38:	2b20      	cmp	r3, #32
 800fc3a:	d00a      	beq.n	800fc52 <UART_SetConfig+0x1a2>
 800fc3c:	2b20      	cmp	r3, #32
 800fc3e:	d814      	bhi.n	800fc6a <UART_SetConfig+0x1ba>
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d002      	beq.n	800fc4a <UART_SetConfig+0x19a>
 800fc44:	2b10      	cmp	r3, #16
 800fc46:	d008      	beq.n	800fc5a <UART_SetConfig+0x1aa>
 800fc48:	e00f      	b.n	800fc6a <UART_SetConfig+0x1ba>
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc50:	e0ad      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc52:	2302      	movs	r3, #2
 800fc54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc58:	e0a9      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc5a:	2304      	movs	r3, #4
 800fc5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc60:	e0a5      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc62:	2308      	movs	r3, #8
 800fc64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc68:	e0a1      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc6a:	2310      	movs	r3, #16
 800fc6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc70:	e09d      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a4a      	ldr	r2, [pc, #296]	; (800fda0 <UART_SetConfig+0x2f0>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d125      	bne.n	800fcc8 <UART_SetConfig+0x218>
 800fc7c:	4b45      	ldr	r3, [pc, #276]	; (800fd94 <UART_SetConfig+0x2e4>)
 800fc7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fc86:	2bc0      	cmp	r3, #192	; 0xc0
 800fc88:	d016      	beq.n	800fcb8 <UART_SetConfig+0x208>
 800fc8a:	2bc0      	cmp	r3, #192	; 0xc0
 800fc8c:	d818      	bhi.n	800fcc0 <UART_SetConfig+0x210>
 800fc8e:	2b80      	cmp	r3, #128	; 0x80
 800fc90:	d00a      	beq.n	800fca8 <UART_SetConfig+0x1f8>
 800fc92:	2b80      	cmp	r3, #128	; 0x80
 800fc94:	d814      	bhi.n	800fcc0 <UART_SetConfig+0x210>
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d002      	beq.n	800fca0 <UART_SetConfig+0x1f0>
 800fc9a:	2b40      	cmp	r3, #64	; 0x40
 800fc9c:	d008      	beq.n	800fcb0 <UART_SetConfig+0x200>
 800fc9e:	e00f      	b.n	800fcc0 <UART_SetConfig+0x210>
 800fca0:	2300      	movs	r3, #0
 800fca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fca6:	e082      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fca8:	2302      	movs	r3, #2
 800fcaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcae:	e07e      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fcb0:	2304      	movs	r3, #4
 800fcb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcb6:	e07a      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fcb8:	2308      	movs	r3, #8
 800fcba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcbe:	e076      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fcc0:	2310      	movs	r3, #16
 800fcc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcc6:	e072      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a35      	ldr	r2, [pc, #212]	; (800fda4 <UART_SetConfig+0x2f4>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d12a      	bne.n	800fd28 <UART_SetConfig+0x278>
 800fcd2:	4b30      	ldr	r3, [pc, #192]	; (800fd94 <UART_SetConfig+0x2e4>)
 800fcd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fce0:	d01a      	beq.n	800fd18 <UART_SetConfig+0x268>
 800fce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fce6:	d81b      	bhi.n	800fd20 <UART_SetConfig+0x270>
 800fce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcec:	d00c      	beq.n	800fd08 <UART_SetConfig+0x258>
 800fcee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcf2:	d815      	bhi.n	800fd20 <UART_SetConfig+0x270>
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d003      	beq.n	800fd00 <UART_SetConfig+0x250>
 800fcf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcfc:	d008      	beq.n	800fd10 <UART_SetConfig+0x260>
 800fcfe:	e00f      	b.n	800fd20 <UART_SetConfig+0x270>
 800fd00:	2300      	movs	r3, #0
 800fd02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd06:	e052      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd08:	2302      	movs	r3, #2
 800fd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd0e:	e04e      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd10:	2304      	movs	r3, #4
 800fd12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd16:	e04a      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd18:	2308      	movs	r3, #8
 800fd1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd1e:	e046      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd20:	2310      	movs	r3, #16
 800fd22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd26:	e042      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4a17      	ldr	r2, [pc, #92]	; (800fd8c <UART_SetConfig+0x2dc>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d13a      	bne.n	800fda8 <UART_SetConfig+0x2f8>
 800fd32:	4b18      	ldr	r3, [pc, #96]	; (800fd94 <UART_SetConfig+0x2e4>)
 800fd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fd3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd40:	d01a      	beq.n	800fd78 <UART_SetConfig+0x2c8>
 800fd42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd46:	d81b      	bhi.n	800fd80 <UART_SetConfig+0x2d0>
 800fd48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd4c:	d00c      	beq.n	800fd68 <UART_SetConfig+0x2b8>
 800fd4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd52:	d815      	bhi.n	800fd80 <UART_SetConfig+0x2d0>
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d003      	beq.n	800fd60 <UART_SetConfig+0x2b0>
 800fd58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd5c:	d008      	beq.n	800fd70 <UART_SetConfig+0x2c0>
 800fd5e:	e00f      	b.n	800fd80 <UART_SetConfig+0x2d0>
 800fd60:	2300      	movs	r3, #0
 800fd62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd66:	e022      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd68:	2302      	movs	r3, #2
 800fd6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd6e:	e01e      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd70:	2304      	movs	r3, #4
 800fd72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd76:	e01a      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd78:	2308      	movs	r3, #8
 800fd7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd7e:	e016      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd80:	2310      	movs	r3, #16
 800fd82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd86:	e012      	b.n	800fdae <UART_SetConfig+0x2fe>
 800fd88:	cfff69f3 	.word	0xcfff69f3
 800fd8c:	40008000 	.word	0x40008000
 800fd90:	40013800 	.word	0x40013800
 800fd94:	40021000 	.word	0x40021000
 800fd98:	40004400 	.word	0x40004400
 800fd9c:	40004800 	.word	0x40004800
 800fda0:	40004c00 	.word	0x40004c00
 800fda4:	40005000 	.word	0x40005000
 800fda8:	2310      	movs	r3, #16
 800fdaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4aae      	ldr	r2, [pc, #696]	; (801006c <UART_SetConfig+0x5bc>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	f040 8097 	bne.w	800fee8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fdba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fdbe:	2b08      	cmp	r3, #8
 800fdc0:	d823      	bhi.n	800fe0a <UART_SetConfig+0x35a>
 800fdc2:	a201      	add	r2, pc, #4	; (adr r2, 800fdc8 <UART_SetConfig+0x318>)
 800fdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc8:	0800fded 	.word	0x0800fded
 800fdcc:	0800fe0b 	.word	0x0800fe0b
 800fdd0:	0800fdf5 	.word	0x0800fdf5
 800fdd4:	0800fe0b 	.word	0x0800fe0b
 800fdd8:	0800fdfb 	.word	0x0800fdfb
 800fddc:	0800fe0b 	.word	0x0800fe0b
 800fde0:	0800fe0b 	.word	0x0800fe0b
 800fde4:	0800fe0b 	.word	0x0800fe0b
 800fde8:	0800fe03 	.word	0x0800fe03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdec:	f7fe f8e2 	bl	800dfb4 <HAL_RCC_GetPCLK1Freq>
 800fdf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fdf2:	e010      	b.n	800fe16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fdf4:	4b9e      	ldr	r3, [pc, #632]	; (8010070 <UART_SetConfig+0x5c0>)
 800fdf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fdf8:	e00d      	b.n	800fe16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fdfa:	f7fe f843 	bl	800de84 <HAL_RCC_GetSysClockFreq>
 800fdfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fe00:	e009      	b.n	800fe16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fe08:	e005      	b.n	800fe16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fe14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 8130 	beq.w	801007e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe22:	4a94      	ldr	r2, [pc, #592]	; (8010074 <UART_SetConfig+0x5c4>)
 800fe24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	4613      	mov	r3, r2
 800fe38:	005b      	lsls	r3, r3, #1
 800fe3a:	4413      	add	r3, r2
 800fe3c:	69ba      	ldr	r2, [r7, #24]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d305      	bcc.n	800fe4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe48:	69ba      	ldr	r2, [r7, #24]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d903      	bls.n	800fe56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fe54:	e113      	b.n	801007e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe58:	2200      	movs	r2, #0
 800fe5a:	60bb      	str	r3, [r7, #8]
 800fe5c:	60fa      	str	r2, [r7, #12]
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe62:	4a84      	ldr	r2, [pc, #528]	; (8010074 <UART_SetConfig+0x5c4>)
 800fe64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	603b      	str	r3, [r7, #0]
 800fe6e:	607a      	str	r2, [r7, #4]
 800fe70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fe78:	f7f0 fefe 	bl	8000c78 <__aeabi_uldivmod>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	460b      	mov	r3, r1
 800fe80:	4610      	mov	r0, r2
 800fe82:	4619      	mov	r1, r3
 800fe84:	f04f 0200 	mov.w	r2, #0
 800fe88:	f04f 0300 	mov.w	r3, #0
 800fe8c:	020b      	lsls	r3, r1, #8
 800fe8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fe92:	0202      	lsls	r2, r0, #8
 800fe94:	6979      	ldr	r1, [r7, #20]
 800fe96:	6849      	ldr	r1, [r1, #4]
 800fe98:	0849      	lsrs	r1, r1, #1
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	460c      	mov	r4, r1
 800fe9e:	4605      	mov	r5, r0
 800fea0:	eb12 0804 	adds.w	r8, r2, r4
 800fea4:	eb43 0905 	adc.w	r9, r3, r5
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	469a      	mov	sl, r3
 800feb0:	4693      	mov	fp, r2
 800feb2:	4652      	mov	r2, sl
 800feb4:	465b      	mov	r3, fp
 800feb6:	4640      	mov	r0, r8
 800feb8:	4649      	mov	r1, r9
 800feba:	f7f0 fedd 	bl	8000c78 <__aeabi_uldivmod>
 800febe:	4602      	mov	r2, r0
 800fec0:	460b      	mov	r3, r1
 800fec2:	4613      	mov	r3, r2
 800fec4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fec6:	6a3b      	ldr	r3, [r7, #32]
 800fec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fecc:	d308      	bcc.n	800fee0 <UART_SetConfig+0x430>
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fed4:	d204      	bcs.n	800fee0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	6a3a      	ldr	r2, [r7, #32]
 800fedc:	60da      	str	r2, [r3, #12]
 800fede:	e0ce      	b.n	801007e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800fee0:	2301      	movs	r3, #1
 800fee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fee6:	e0ca      	b.n	801007e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fef0:	d166      	bne.n	800ffc0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800fef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fef6:	2b08      	cmp	r3, #8
 800fef8:	d827      	bhi.n	800ff4a <UART_SetConfig+0x49a>
 800fefa:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <UART_SetConfig+0x450>)
 800fefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff00:	0800ff25 	.word	0x0800ff25
 800ff04:	0800ff2d 	.word	0x0800ff2d
 800ff08:	0800ff35 	.word	0x0800ff35
 800ff0c:	0800ff4b 	.word	0x0800ff4b
 800ff10:	0800ff3b 	.word	0x0800ff3b
 800ff14:	0800ff4b 	.word	0x0800ff4b
 800ff18:	0800ff4b 	.word	0x0800ff4b
 800ff1c:	0800ff4b 	.word	0x0800ff4b
 800ff20:	0800ff43 	.word	0x0800ff43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff24:	f7fe f846 	bl	800dfb4 <HAL_RCC_GetPCLK1Freq>
 800ff28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ff2a:	e014      	b.n	800ff56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff2c:	f7fe f858 	bl	800dfe0 <HAL_RCC_GetPCLK2Freq>
 800ff30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ff32:	e010      	b.n	800ff56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff34:	4b4e      	ldr	r3, [pc, #312]	; (8010070 <UART_SetConfig+0x5c0>)
 800ff36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ff38:	e00d      	b.n	800ff56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff3a:	f7fd ffa3 	bl	800de84 <HAL_RCC_GetSysClockFreq>
 800ff3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ff40:	e009      	b.n	800ff56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ff48:	e005      	b.n	800ff56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ff54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f000 8090 	beq.w	801007e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff62:	4a44      	ldr	r2, [pc, #272]	; (8010074 <UART_SetConfig+0x5c4>)
 800ff64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff70:	005a      	lsls	r2, r3, #1
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	085b      	lsrs	r3, r3, #1
 800ff78:	441a      	add	r2, r3
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff82:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff84:	6a3b      	ldr	r3, [r7, #32]
 800ff86:	2b0f      	cmp	r3, #15
 800ff88:	d916      	bls.n	800ffb8 <UART_SetConfig+0x508>
 800ff8a:	6a3b      	ldr	r3, [r7, #32]
 800ff8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff90:	d212      	bcs.n	800ffb8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff92:	6a3b      	ldr	r3, [r7, #32]
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	f023 030f 	bic.w	r3, r3, #15
 800ff9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff9c:	6a3b      	ldr	r3, [r7, #32]
 800ff9e:	085b      	lsrs	r3, r3, #1
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	f003 0307 	and.w	r3, r3, #7
 800ffa6:	b29a      	uxth	r2, r3
 800ffa8:	8bfb      	ldrh	r3, [r7, #30]
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	8bfa      	ldrh	r2, [r7, #30]
 800ffb4:	60da      	str	r2, [r3, #12]
 800ffb6:	e062      	b.n	801007e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ffbe:	e05e      	b.n	801007e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ffc4:	2b08      	cmp	r3, #8
 800ffc6:	d828      	bhi.n	801001a <UART_SetConfig+0x56a>
 800ffc8:	a201      	add	r2, pc, #4	; (adr r2, 800ffd0 <UART_SetConfig+0x520>)
 800ffca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffce:	bf00      	nop
 800ffd0:	0800fff5 	.word	0x0800fff5
 800ffd4:	0800fffd 	.word	0x0800fffd
 800ffd8:	08010005 	.word	0x08010005
 800ffdc:	0801001b 	.word	0x0801001b
 800ffe0:	0801000b 	.word	0x0801000b
 800ffe4:	0801001b 	.word	0x0801001b
 800ffe8:	0801001b 	.word	0x0801001b
 800ffec:	0801001b 	.word	0x0801001b
 800fff0:	08010013 	.word	0x08010013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fff4:	f7fd ffde 	bl	800dfb4 <HAL_RCC_GetPCLK1Freq>
 800fff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fffa:	e014      	b.n	8010026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fffc:	f7fd fff0 	bl	800dfe0 <HAL_RCC_GetPCLK2Freq>
 8010000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010002:	e010      	b.n	8010026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010004:	4b1a      	ldr	r3, [pc, #104]	; (8010070 <UART_SetConfig+0x5c0>)
 8010006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010008:	e00d      	b.n	8010026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801000a:	f7fd ff3b 	bl	800de84 <HAL_RCC_GetSysClockFreq>
 801000e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010010:	e009      	b.n	8010026 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010018:	e005      	b.n	8010026 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801001a:	2300      	movs	r3, #0
 801001c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010024:	bf00      	nop
    }

    if (pclk != 0U)
 8010026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010028:	2b00      	cmp	r3, #0
 801002a:	d028      	beq.n	801007e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010030:	4a10      	ldr	r2, [pc, #64]	; (8010074 <UART_SetConfig+0x5c4>)
 8010032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010036:	461a      	mov	r2, r3
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	fbb3 f2f2 	udiv	r2, r3, r2
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	085b      	lsrs	r3, r3, #1
 8010044:	441a      	add	r2, r3
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	fbb2 f3f3 	udiv	r3, r2, r3
 801004e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010050:	6a3b      	ldr	r3, [r7, #32]
 8010052:	2b0f      	cmp	r3, #15
 8010054:	d910      	bls.n	8010078 <UART_SetConfig+0x5c8>
 8010056:	6a3b      	ldr	r3, [r7, #32]
 8010058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801005c:	d20c      	bcs.n	8010078 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801005e:	6a3b      	ldr	r3, [r7, #32]
 8010060:	b29a      	uxth	r2, r3
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	60da      	str	r2, [r3, #12]
 8010068:	e009      	b.n	801007e <UART_SetConfig+0x5ce>
 801006a:	bf00      	nop
 801006c:	40008000 	.word	0x40008000
 8010070:	00f42400 	.word	0x00f42400
 8010074:	0801a12c 	.word	0x0801a12c
      }
      else
      {
        ret = HAL_ERROR;
 8010078:	2301      	movs	r3, #1
 801007a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	2201      	movs	r2, #1
 8010082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	2201      	movs	r2, #1
 801008a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	2200      	movs	r2, #0
 8010092:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	2200      	movs	r2, #0
 8010098:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801009a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3730      	adds	r7, #48	; 0x30
 80100a2:	46bd      	mov	sp, r7
 80100a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080100a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b4:	f003 0301 	and.w	r3, r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00a      	beq.n	80100d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	430a      	orrs	r2, r1
 80100d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d6:	f003 0302 	and.w	r3, r3, #2
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d00a      	beq.n	80100f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	430a      	orrs	r2, r1
 80100f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f8:	f003 0304 	and.w	r3, r3, #4
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00a      	beq.n	8010116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	430a      	orrs	r2, r1
 8010114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801011a:	f003 0308 	and.w	r3, r3, #8
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00a      	beq.n	8010138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	430a      	orrs	r2, r1
 8010136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801013c:	f003 0310 	and.w	r3, r3, #16
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00a      	beq.n	801015a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	430a      	orrs	r2, r1
 8010158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801015e:	f003 0320 	and.w	r3, r3, #32
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00a      	beq.n	801017c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	689b      	ldr	r3, [r3, #8]
 801016c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	430a      	orrs	r2, r1
 801017a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010184:	2b00      	cmp	r3, #0
 8010186:	d01a      	beq.n	80101be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	430a      	orrs	r2, r1
 801019c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101a6:	d10a      	bne.n	80101be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	430a      	orrs	r2, r1
 80101bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00a      	beq.n	80101e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	430a      	orrs	r2, r1
 80101de:	605a      	str	r2, [r3, #4]
  }
}
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af02      	add	r7, sp, #8
 80101f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80101fc:	f7fb f93c 	bl	800b478 <HAL_GetTick>
 8010200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f003 0308 	and.w	r3, r3, #8
 801020c:	2b08      	cmp	r3, #8
 801020e:	d10e      	bne.n	801022e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2200      	movs	r2, #0
 801021a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f82f 	bl	8010282 <UART_WaitOnFlagUntilTimeout>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d001      	beq.n	801022e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801022a:	2303      	movs	r3, #3
 801022c:	e025      	b.n	801027a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f003 0304 	and.w	r3, r3, #4
 8010238:	2b04      	cmp	r3, #4
 801023a:	d10e      	bne.n	801025a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801023c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f819 	bl	8010282 <UART_WaitOnFlagUntilTimeout>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d001      	beq.n	801025a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010256:	2303      	movs	r3, #3
 8010258:	e00f      	b.n	801027a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2220      	movs	r2, #32
 801025e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2220      	movs	r2, #32
 8010266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2200      	movs	r2, #0
 8010274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010278:	2300      	movs	r3, #0
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b09c      	sub	sp, #112	; 0x70
 8010286:	af00      	add	r7, sp, #0
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	60b9      	str	r1, [r7, #8]
 801028c:	603b      	str	r3, [r7, #0]
 801028e:	4613      	mov	r3, r2
 8010290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010292:	e0a9      	b.n	80103e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801029a:	f000 80a5 	beq.w	80103e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801029e:	f7fb f8eb 	bl	800b478 <HAL_GetTick>
 80102a2:	4602      	mov	r2, r0
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	1ad3      	subs	r3, r2, r3
 80102a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d302      	bcc.n	80102b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80102ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d140      	bne.n	8010336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102bc:	e853 3f00 	ldrex	r3, [r3]
 80102c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80102c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80102c8:	667b      	str	r3, [r7, #100]	; 0x64
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	461a      	mov	r2, r3
 80102d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102da:	e841 2300 	strex	r3, r2, [r1]
 80102de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80102e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1e6      	bne.n	80102b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	3308      	adds	r3, #8
 80102ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102f0:	e853 3f00 	ldrex	r3, [r3]
 80102f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	f023 0301 	bic.w	r3, r3, #1
 80102fc:	663b      	str	r3, [r7, #96]	; 0x60
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3308      	adds	r3, #8
 8010304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010306:	64ba      	str	r2, [r7, #72]	; 0x48
 8010308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801030c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801030e:	e841 2300 	strex	r3, r2, [r1]
 8010312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010316:	2b00      	cmp	r3, #0
 8010318:	d1e5      	bne.n	80102e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2220      	movs	r2, #32
 801031e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2220      	movs	r2, #32
 8010326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010332:	2303      	movs	r3, #3
 8010334:	e069      	b.n	801040a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f003 0304 	and.w	r3, r3, #4
 8010340:	2b00      	cmp	r3, #0
 8010342:	d051      	beq.n	80103e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	69db      	ldr	r3, [r3, #28]
 801034a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801034e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010352:	d149      	bne.n	80103e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801035c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010366:	e853 3f00 	ldrex	r3, [r3]
 801036a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	461a      	mov	r2, r3
 801037a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801037c:	637b      	str	r3, [r7, #52]	; 0x34
 801037e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010384:	e841 2300 	strex	r3, r2, [r1]
 8010388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1e6      	bne.n	801035e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3308      	adds	r3, #8
 8010396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	e853 3f00 	ldrex	r3, [r3]
 801039e:	613b      	str	r3, [r7, #16]
   return(result);
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	f023 0301 	bic.w	r3, r3, #1
 80103a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	3308      	adds	r3, #8
 80103ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103b0:	623a      	str	r2, [r7, #32]
 80103b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b4:	69f9      	ldr	r1, [r7, #28]
 80103b6:	6a3a      	ldr	r2, [r7, #32]
 80103b8:	e841 2300 	strex	r3, r2, [r1]
 80103bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1e5      	bne.n	8010390 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2220      	movs	r2, #32
 80103c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2220      	movs	r2, #32
 80103d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2220      	movs	r2, #32
 80103d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80103e4:	2303      	movs	r3, #3
 80103e6:	e010      	b.n	801040a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	69da      	ldr	r2, [r3, #28]
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	4013      	ands	r3, r2
 80103f2:	68ba      	ldr	r2, [r7, #8]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	bf0c      	ite	eq
 80103f8:	2301      	moveq	r3, #1
 80103fa:	2300      	movne	r3, #0
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	461a      	mov	r2, r3
 8010400:	79fb      	ldrb	r3, [r7, #7]
 8010402:	429a      	cmp	r2, r3
 8010404:	f43f af46 	beq.w	8010294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3770      	adds	r7, #112	; 0x70
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
	...

08010414 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010414:	b480      	push	{r7}
 8010416:	b0a3      	sub	sp, #140	; 0x8c
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	4613      	mov	r3, r2
 8010420:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	68ba      	ldr	r2, [r7, #8]
 8010426:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	88fa      	ldrh	r2, [r7, #6]
 801042c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	88fa      	ldrh	r2, [r7, #6]
 8010434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2200      	movs	r2, #0
 801043c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010446:	d10e      	bne.n	8010466 <UART_Start_Receive_IT+0x52>
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	691b      	ldr	r3, [r3, #16]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d105      	bne.n	801045c <UART_Start_Receive_IT+0x48>
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801045a:	e02d      	b.n	80104b8 <UART_Start_Receive_IT+0xa4>
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	22ff      	movs	r2, #255	; 0xff
 8010460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010464:	e028      	b.n	80104b8 <UART_Start_Receive_IT+0xa4>
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d10d      	bne.n	801048a <UART_Start_Receive_IT+0x76>
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d104      	bne.n	8010480 <UART_Start_Receive_IT+0x6c>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	22ff      	movs	r2, #255	; 0xff
 801047a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801047e:	e01b      	b.n	80104b8 <UART_Start_Receive_IT+0xa4>
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	227f      	movs	r2, #127	; 0x7f
 8010484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010488:	e016      	b.n	80104b8 <UART_Start_Receive_IT+0xa4>
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010492:	d10d      	bne.n	80104b0 <UART_Start_Receive_IT+0x9c>
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d104      	bne.n	80104a6 <UART_Start_Receive_IT+0x92>
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	227f      	movs	r2, #127	; 0x7f
 80104a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104a4:	e008      	b.n	80104b8 <UART_Start_Receive_IT+0xa4>
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	223f      	movs	r2, #63	; 0x3f
 80104aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104ae:	e003      	b.n	80104b8 <UART_Start_Receive_IT+0xa4>
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2200      	movs	r2, #0
 80104bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2222      	movs	r2, #34	; 0x22
 80104c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	3308      	adds	r3, #8
 80104ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104d2:	e853 3f00 	ldrex	r3, [r3]
 80104d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80104d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104da:	f043 0301 	orr.w	r3, r3, #1
 80104de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	3308      	adds	r3, #8
 80104e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80104ec:	673a      	str	r2, [r7, #112]	; 0x70
 80104ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80104f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80104f4:	e841 2300 	strex	r3, r2, [r1]
 80104f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80104fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1e3      	bne.n	80104c8 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010508:	d153      	bne.n	80105b2 <UART_Start_Receive_IT+0x19e>
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010510:	88fa      	ldrh	r2, [r7, #6]
 8010512:	429a      	cmp	r2, r3
 8010514:	d34d      	bcc.n	80105b2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801051e:	d107      	bne.n	8010530 <UART_Start_Receive_IT+0x11c>
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	691b      	ldr	r3, [r3, #16]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d103      	bne.n	8010530 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	4a4b      	ldr	r2, [pc, #300]	; (8010658 <UART_Start_Receive_IT+0x244>)
 801052c:	671a      	str	r2, [r3, #112]	; 0x70
 801052e:	e002      	b.n	8010536 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4a4a      	ldr	r2, [pc, #296]	; (801065c <UART_Start_Receive_IT+0x248>)
 8010534:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2200      	movs	r2, #0
 801053a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d01a      	beq.n	801057c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054e:	e853 3f00 	ldrex	r3, [r3]
 8010552:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801055a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	461a      	mov	r2, r3
 8010564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010568:	65fb      	str	r3, [r7, #92]	; 0x5c
 801056a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801056e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010570:	e841 2300 	strex	r3, r2, [r1]
 8010574:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1e4      	bne.n	8010546 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3308      	adds	r3, #8
 8010582:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010586:	e853 3f00 	ldrex	r3, [r3]
 801058a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801058c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010592:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	3308      	adds	r3, #8
 801059a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801059c:	64ba      	str	r2, [r7, #72]	; 0x48
 801059e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105a4:	e841 2300 	strex	r3, r2, [r1]
 80105a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80105aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e5      	bne.n	801057c <UART_Start_Receive_IT+0x168>
 80105b0:	e04a      	b.n	8010648 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105ba:	d107      	bne.n	80105cc <UART_Start_Receive_IT+0x1b8>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d103      	bne.n	80105cc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	4a26      	ldr	r2, [pc, #152]	; (8010660 <UART_Start_Receive_IT+0x24c>)
 80105c8:	671a      	str	r2, [r3, #112]	; 0x70
 80105ca:	e002      	b.n	80105d2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	4a25      	ldr	r2, [pc, #148]	; (8010664 <UART_Start_Receive_IT+0x250>)
 80105d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	691b      	ldr	r3, [r3, #16]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d019      	beq.n	8010616 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ea:	e853 3f00 	ldrex	r3, [r3]
 80105ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80105f6:	677b      	str	r3, [r7, #116]	; 0x74
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	461a      	mov	r2, r3
 80105fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010600:	637b      	str	r3, [r7, #52]	; 0x34
 8010602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010608:	e841 2300 	strex	r3, r2, [r1]
 801060c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1e6      	bne.n	80105e2 <UART_Start_Receive_IT+0x1ce>
 8010614:	e018      	b.n	8010648 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	e853 3f00 	ldrex	r3, [r3]
 8010622:	613b      	str	r3, [r7, #16]
   return(result);
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	f043 0320 	orr.w	r3, r3, #32
 801062a:	67bb      	str	r3, [r7, #120]	; 0x78
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	461a      	mov	r2, r3
 8010632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010634:	623b      	str	r3, [r7, #32]
 8010636:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010638:	69f9      	ldr	r1, [r7, #28]
 801063a:	6a3a      	ldr	r2, [r7, #32]
 801063c:	e841 2300 	strex	r3, r2, [r1]
 8010640:	61bb      	str	r3, [r7, #24]
   return(result);
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1e6      	bne.n	8010616 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8010648:	2300      	movs	r3, #0
}
 801064a:	4618      	mov	r0, r3
 801064c:	378c      	adds	r7, #140	; 0x8c
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	08010d7d 	.word	0x08010d7d
 801065c:	08010a81 	.word	0x08010a81
 8010660:	0801091b 	.word	0x0801091b
 8010664:	080107b7 	.word	0x080107b7

08010668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010668:	b480      	push	{r7}
 801066a:	b095      	sub	sp, #84	; 0x54
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010678:	e853 3f00 	ldrex	r3, [r3]
 801067c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801067e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	461a      	mov	r2, r3
 801068c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801068e:	643b      	str	r3, [r7, #64]	; 0x40
 8010690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010696:	e841 2300 	strex	r3, r2, [r1]
 801069a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1e6      	bne.n	8010670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	3308      	adds	r3, #8
 80106a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106aa:	6a3b      	ldr	r3, [r7, #32]
 80106ac:	e853 3f00 	ldrex	r3, [r3]
 80106b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80106b8:	f023 0301 	bic.w	r3, r3, #1
 80106bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3308      	adds	r3, #8
 80106c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80106c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106ce:	e841 2300 	strex	r3, r2, [r1]
 80106d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d1e3      	bne.n	80106a2 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d118      	bne.n	8010714 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	e853 3f00 	ldrex	r3, [r3]
 80106ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	f023 0310 	bic.w	r3, r3, #16
 80106f6:	647b      	str	r3, [r7, #68]	; 0x44
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	461a      	mov	r2, r3
 80106fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010700:	61bb      	str	r3, [r7, #24]
 8010702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010704:	6979      	ldr	r1, [r7, #20]
 8010706:	69ba      	ldr	r2, [r7, #24]
 8010708:	e841 2300 	strex	r3, r2, [r1]
 801070c:	613b      	str	r3, [r7, #16]
   return(result);
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d1e6      	bne.n	80106e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2220      	movs	r2, #32
 8010718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010728:	bf00      	nop
 801072a:	3754      	adds	r7, #84	; 0x54
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2200      	movs	r2, #0
 8010746:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2200      	movs	r2, #0
 801074e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f7ff f996 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010758:	bf00      	nop
 801075a:	3710      	adds	r7, #16
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b088      	sub	sp, #32
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	e853 3f00 	ldrex	r3, [r3]
 8010774:	60bb      	str	r3, [r7, #8]
   return(result);
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801077c:	61fb      	str	r3, [r7, #28]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	61bb      	str	r3, [r7, #24]
 8010788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078a:	6979      	ldr	r1, [r7, #20]
 801078c:	69ba      	ldr	r2, [r7, #24]
 801078e:	e841 2300 	strex	r3, r2, [r1]
 8010792:	613b      	str	r3, [r7, #16]
   return(result);
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1e6      	bne.n	8010768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2220      	movs	r2, #32
 801079e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2200      	movs	r2, #0
 80107a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7ff f961 	bl	800fa70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107ae:	bf00      	nop
 80107b0:	3720      	adds	r7, #32
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}

080107b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80107b6:	b580      	push	{r7, lr}
 80107b8:	b096      	sub	sp, #88	; 0x58
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107ce:	2b22      	cmp	r3, #34	; 0x22
 80107d0:	f040 8095 	bne.w	80108fe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80107da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80107de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80107e2:	b2d9      	uxtb	r1, r3
 80107e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107ee:	400a      	ands	r2, r1
 80107f0:	b2d2      	uxtb	r2, r2
 80107f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107f8:	1c5a      	adds	r2, r3, #1
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010804:	b29b      	uxth	r3, r3
 8010806:	3b01      	subs	r3, #1
 8010808:	b29a      	uxth	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010816:	b29b      	uxth	r3, r3
 8010818:	2b00      	cmp	r3, #0
 801081a:	d17a      	bne.n	8010912 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010824:	e853 3f00 	ldrex	r3, [r3]
 8010828:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801082a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010830:	653b      	str	r3, [r7, #80]	; 0x50
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	461a      	mov	r2, r3
 8010838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801083a:	647b      	str	r3, [r7, #68]	; 0x44
 801083c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801083e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010842:	e841 2300 	strex	r3, r2, [r1]
 8010846:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1e6      	bne.n	801081c <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	3308      	adds	r3, #8
 8010854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010858:	e853 3f00 	ldrex	r3, [r3]
 801085c:	623b      	str	r3, [r7, #32]
   return(result);
 801085e:	6a3b      	ldr	r3, [r7, #32]
 8010860:	f023 0301 	bic.w	r3, r3, #1
 8010864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	3308      	adds	r3, #8
 801086c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801086e:	633a      	str	r2, [r7, #48]	; 0x30
 8010870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010876:	e841 2300 	strex	r3, r2, [r1]
 801087a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1e5      	bne.n	801084e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2220      	movs	r2, #32
 8010886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010894:	2b01      	cmp	r3, #1
 8010896:	d12e      	bne.n	80108f6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	e853 3f00 	ldrex	r3, [r3]
 80108aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f023 0310 	bic.w	r3, r3, #16
 80108b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	461a      	mov	r2, r3
 80108ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108bc:	61fb      	str	r3, [r7, #28]
 80108be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c0:	69b9      	ldr	r1, [r7, #24]
 80108c2:	69fa      	ldr	r2, [r7, #28]
 80108c4:	e841 2300 	strex	r3, r2, [r1]
 80108c8:	617b      	str	r3, [r7, #20]
   return(result);
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1e6      	bne.n	801089e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	69db      	ldr	r3, [r3, #28]
 80108d6:	f003 0310 	and.w	r3, r3, #16
 80108da:	2b10      	cmp	r3, #16
 80108dc:	d103      	bne.n	80108e6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2210      	movs	r2, #16
 80108e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7ff f8d2 	bl	800fa98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108f4:	e00d      	b.n	8010912 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7fa fc52 	bl	800b1a0 <HAL_UART_RxCpltCallback>
}
 80108fc:	e009      	b.n	8010912 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	8b1b      	ldrh	r3, [r3, #24]
 8010904:	b29a      	uxth	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f042 0208 	orr.w	r2, r2, #8
 801090e:	b292      	uxth	r2, r2
 8010910:	831a      	strh	r2, [r3, #24]
}
 8010912:	bf00      	nop
 8010914:	3758      	adds	r7, #88	; 0x58
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b096      	sub	sp, #88	; 0x58
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010928:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010932:	2b22      	cmp	r3, #34	; 0x22
 8010934:	f040 8095 	bne.w	8010a62 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801093e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010946:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010948:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801094c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010950:	4013      	ands	r3, r2
 8010952:	b29a      	uxth	r2, r3
 8010954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010956:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801095c:	1c9a      	adds	r2, r3, #2
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010968:	b29b      	uxth	r3, r3
 801096a:	3b01      	subs	r3, #1
 801096c:	b29a      	uxth	r2, r3
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801097a:	b29b      	uxth	r3, r3
 801097c:	2b00      	cmp	r3, #0
 801097e:	d17a      	bne.n	8010a76 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010988:	e853 3f00 	ldrex	r3, [r3]
 801098c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	461a      	mov	r2, r3
 801099c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801099e:	643b      	str	r3, [r7, #64]	; 0x40
 80109a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109a6:	e841 2300 	strex	r3, r2, [r1]
 80109aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1e6      	bne.n	8010980 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3308      	adds	r3, #8
 80109b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ba:	6a3b      	ldr	r3, [r7, #32]
 80109bc:	e853 3f00 	ldrex	r3, [r3]
 80109c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	f023 0301 	bic.w	r3, r3, #1
 80109c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	3308      	adds	r3, #8
 80109d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109da:	e841 2300 	strex	r3, r2, [r1]
 80109de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1e5      	bne.n	80109b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2220      	movs	r2, #32
 80109ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2200      	movs	r2, #0
 80109f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d12e      	bne.n	8010a5a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	e853 3f00 	ldrex	r3, [r3]
 8010a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	f023 0310 	bic.w	r3, r3, #16
 8010a16:	647b      	str	r3, [r7, #68]	; 0x44
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a20:	61bb      	str	r3, [r7, #24]
 8010a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a24:	6979      	ldr	r1, [r7, #20]
 8010a26:	69ba      	ldr	r2, [r7, #24]
 8010a28:	e841 2300 	strex	r3, r2, [r1]
 8010a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1e6      	bne.n	8010a02 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	69db      	ldr	r3, [r3, #28]
 8010a3a:	f003 0310 	and.w	r3, r3, #16
 8010a3e:	2b10      	cmp	r3, #16
 8010a40:	d103      	bne.n	8010a4a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2210      	movs	r2, #16
 8010a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a50:	4619      	mov	r1, r3
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7ff f820 	bl	800fa98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a58:	e00d      	b.n	8010a76 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7fa fba0 	bl	800b1a0 <HAL_UART_RxCpltCallback>
}
 8010a60:	e009      	b.n	8010a76 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	8b1b      	ldrh	r3, [r3, #24]
 8010a68:	b29a      	uxth	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f042 0208 	orr.w	r2, r2, #8
 8010a72:	b292      	uxth	r2, r2
 8010a74:	831a      	strh	r2, [r3, #24]
}
 8010a76:	bf00      	nop
 8010a78:	3758      	adds	r7, #88	; 0x58
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
	...

08010a80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b0a6      	sub	sp, #152	; 0x98
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a8e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	69db      	ldr	r3, [r3, #28]
 8010a98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ab6:	2b22      	cmp	r3, #34	; 0x22
 8010ab8:	f040 814f 	bne.w	8010d5a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ac2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ac6:	e0f6      	b.n	8010cb6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010ace:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010ad2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010ad6:	b2d9      	uxtb	r1, r3
 8010ad8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ae2:	400a      	ands	r2, r1
 8010ae4:	b2d2      	uxtb	r2, r2
 8010ae6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010aec:	1c5a      	adds	r2, r3, #1
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	3b01      	subs	r3, #1
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	69db      	ldr	r3, [r3, #28]
 8010b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010b0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b12:	f003 0307 	and.w	r3, r3, #7
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d053      	beq.n	8010bc2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b1e:	f003 0301 	and.w	r3, r3, #1
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d011      	beq.n	8010b4a <UART_RxISR_8BIT_FIFOEN+0xca>
 8010b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00b      	beq.n	8010b4a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	2201      	movs	r2, #1
 8010b38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b40:	f043 0201 	orr.w	r2, r3, #1
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b4e:	f003 0302 	and.w	r3, r3, #2
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d011      	beq.n	8010b7a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b5a:	f003 0301 	and.w	r3, r3, #1
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00b      	beq.n	8010b7a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2202      	movs	r2, #2
 8010b68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b70:	f043 0204 	orr.w	r2, r3, #4
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b7e:	f003 0304 	and.w	r3, r3, #4
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d011      	beq.n	8010baa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b8a:	f003 0301 	and.w	r3, r3, #1
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d00b      	beq.n	8010baa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2204      	movs	r2, #4
 8010b98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ba0:	f043 0202 	orr.w	r2, r3, #2
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d006      	beq.n	8010bc2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7fe ff65 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d173      	bne.n	8010cb6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bd6:	e853 3f00 	ldrex	r3, [r3]
 8010bda:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	461a      	mov	r2, r3
 8010bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010bf2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010bf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010bf8:	e841 2300 	strex	r3, r2, [r1]
 8010bfc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1e4      	bne.n	8010bce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	3308      	adds	r3, #8
 8010c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c0e:	e853 3f00 	ldrex	r3, [r3]
 8010c12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010c1a:	f023 0301 	bic.w	r3, r3, #1
 8010c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	3308      	adds	r3, #8
 8010c26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010c28:	657a      	str	r2, [r7, #84]	; 0x54
 8010c2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c30:	e841 2300 	strex	r3, r2, [r1]
 8010c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1e3      	bne.n	8010c04 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2220      	movs	r2, #32
 8010c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2200      	movs	r2, #0
 8010c48:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d12e      	bne.n	8010cb0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c60:	e853 3f00 	ldrex	r3, [r3]
 8010c64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c68:	f023 0310 	bic.w	r3, r3, #16
 8010c6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	461a      	mov	r2, r3
 8010c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c76:	643b      	str	r3, [r7, #64]	; 0x40
 8010c78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c7e:	e841 2300 	strex	r3, r2, [r1]
 8010c82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d1e6      	bne.n	8010c58 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	69db      	ldr	r3, [r3, #28]
 8010c90:	f003 0310 	and.w	r3, r3, #16
 8010c94:	2b10      	cmp	r3, #16
 8010c96:	d103      	bne.n	8010ca0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2210      	movs	r2, #16
 8010c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f7fe fef5 	bl	800fa98 <HAL_UARTEx_RxEventCallback>
 8010cae:	e002      	b.n	8010cb6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f7fa fa75 	bl	800b1a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010cb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d006      	beq.n	8010ccc <UART_RxISR_8BIT_FIFOEN+0x24c>
 8010cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cc2:	f003 0320 	and.w	r3, r3, #32
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f47f aefe 	bne.w	8010ac8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010cd6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d047      	beq.n	8010d6e <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ce4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d240      	bcs.n	8010d6e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	3308      	adds	r3, #8
 8010cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	e853 3f00 	ldrex	r3, [r3]
 8010cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010d02:	673b      	str	r3, [r7, #112]	; 0x70
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3308      	adds	r3, #8
 8010d0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010d0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d14:	e841 2300 	strex	r3, r2, [r1]
 8010d18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1e5      	bne.n	8010cec <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	4a15      	ldr	r2, [pc, #84]	; (8010d78 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8010d24:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	e853 3f00 	ldrex	r3, [r3]
 8010d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	f043 0320 	orr.w	r3, r3, #32
 8010d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	461a      	mov	r2, r3
 8010d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d44:	61bb      	str	r3, [r7, #24]
 8010d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d48:	6979      	ldr	r1, [r7, #20]
 8010d4a:	69ba      	ldr	r2, [r7, #24]
 8010d4c:	e841 2300 	strex	r3, r2, [r1]
 8010d50:	613b      	str	r3, [r7, #16]
   return(result);
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1e6      	bne.n	8010d26 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d58:	e009      	b.n	8010d6e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	8b1b      	ldrh	r3, [r3, #24]
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f042 0208 	orr.w	r2, r2, #8
 8010d6a:	b292      	uxth	r2, r2
 8010d6c:	831a      	strh	r2, [r3, #24]
}
 8010d6e:	bf00      	nop
 8010d70:	3798      	adds	r7, #152	; 0x98
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	080107b7 	.word	0x080107b7

08010d7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b0a8      	sub	sp, #160	; 0xa0
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d8a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010db2:	2b22      	cmp	r3, #34	; 0x22
 8010db4:	f040 8153 	bne.w	801105e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010dbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010dc2:	e0fa      	b.n	8010fba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010dca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010dd6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010dda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010dde:	4013      	ands	r3, r2
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010de6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dec:	1c9a      	adds	r2, r3, #2
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	b29a      	uxth	r2, r3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	69db      	ldr	r3, [r3, #28]
 8010e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e12:	f003 0307 	and.w	r3, r3, #7
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d053      	beq.n	8010ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e1e:	f003 0301 	and.w	r3, r3, #1
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d011      	beq.n	8010e4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8010e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d00b      	beq.n	8010e4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2201      	movs	r2, #1
 8010e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e40:	f043 0201 	orr.w	r2, r3, #1
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e4e:	f003 0302 	and.w	r3, r3, #2
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d011      	beq.n	8010e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e5a:	f003 0301 	and.w	r3, r3, #1
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00b      	beq.n	8010e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2202      	movs	r2, #2
 8010e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e70:	f043 0204 	orr.w	r2, r3, #4
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e7e:	f003 0304 	and.w	r3, r3, #4
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d011      	beq.n	8010eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e8a:	f003 0301 	and.w	r3, r3, #1
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00b      	beq.n	8010eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2204      	movs	r2, #4
 8010e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ea0:	f043 0202 	orr.w	r2, r3, #2
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d006      	beq.n	8010ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f7fe fde5 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d175      	bne.n	8010fba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ed6:	e853 3f00 	ldrex	r3, [r3]
 8010eda:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	461a      	mov	r2, r3
 8010eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ef2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ef6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ef8:	e841 2300 	strex	r3, r2, [r1]
 8010efc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1e4      	bne.n	8010ece <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	3308      	adds	r3, #8
 8010f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f0e:	e853 3f00 	ldrex	r3, [r3]
 8010f12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010f1a:	f023 0301 	bic.w	r3, r3, #1
 8010f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	3308      	adds	r3, #8
 8010f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8010f2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f34:	e841 2300 	strex	r3, r2, [r1]
 8010f38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d1e1      	bne.n	8010f04 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2220      	movs	r2, #32
 8010f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d12e      	bne.n	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f64:	e853 3f00 	ldrex	r3, [r3]
 8010f68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f6c:	f023 0310 	bic.w	r3, r3, #16
 8010f70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	461a      	mov	r2, r3
 8010f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8010f7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f82:	e841 2300 	strex	r3, r2, [r1]
 8010f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1e6      	bne.n	8010f5c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	69db      	ldr	r3, [r3, #28]
 8010f94:	f003 0310 	and.w	r3, r3, #16
 8010f98:	2b10      	cmp	r3, #16
 8010f9a:	d103      	bne.n	8010fa4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	2210      	movs	r2, #16
 8010fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010faa:	4619      	mov	r1, r3
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7fe fd73 	bl	800fa98 <HAL_UARTEx_RxEventCallback>
 8010fb2:	e002      	b.n	8010fba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7fa f8f3 	bl	800b1a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010fba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d006      	beq.n	8010fd0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8010fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010fc6:	f003 0320 	and.w	r3, r3, #32
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f47f aefa 	bne.w	8010dc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fd6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010fda:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d047      	beq.n	8011072 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010fe8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d240      	bcs.n	8011072 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	3308      	adds	r3, #8
 8010ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffa:	e853 3f00 	ldrex	r3, [r3]
 8010ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8011000:	6a3b      	ldr	r3, [r7, #32]
 8011002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011006:	677b      	str	r3, [r7, #116]	; 0x74
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3308      	adds	r3, #8
 801100e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011010:	633a      	str	r2, [r7, #48]	; 0x30
 8011012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011018:	e841 2300 	strex	r3, r2, [r1]
 801101c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1e5      	bne.n	8010ff0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a15      	ldr	r2, [pc, #84]	; (801107c <UART_RxISR_16BIT_FIFOEN+0x300>)
 8011028:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	e853 3f00 	ldrex	r3, [r3]
 8011036:	60fb      	str	r3, [r7, #12]
   return(result);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f043 0320 	orr.w	r3, r3, #32
 801103e:	673b      	str	r3, [r7, #112]	; 0x70
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	461a      	mov	r2, r3
 8011046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011048:	61fb      	str	r3, [r7, #28]
 801104a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104c:	69b9      	ldr	r1, [r7, #24]
 801104e:	69fa      	ldr	r2, [r7, #28]
 8011050:	e841 2300 	strex	r3, r2, [r1]
 8011054:	617b      	str	r3, [r7, #20]
   return(result);
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1e6      	bne.n	801102a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801105c:	e009      	b.n	8011072 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	8b1b      	ldrh	r3, [r3, #24]
 8011064:	b29a      	uxth	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f042 0208 	orr.w	r2, r2, #8
 801106e:	b292      	uxth	r2, r2
 8011070:	831a      	strh	r2, [r3, #24]
}
 8011072:	bf00      	nop
 8011074:	37a0      	adds	r7, #160	; 0xa0
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	0801091b 	.word	0x0801091b

08011080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011088:	bf00      	nop
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80110bc:	b480      	push	{r7}
 80110be:	b085      	sub	sp, #20
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d101      	bne.n	80110d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80110ce:	2302      	movs	r3, #2
 80110d0:	e027      	b.n	8011122 <HAL_UARTEx_DisableFifoMode+0x66>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2201      	movs	r2, #1
 80110d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2224      	movs	r2, #36	; 0x24
 80110de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f022 0201 	bic.w	r2, r2, #1
 80110f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2200      	movs	r2, #0
 8011106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2220      	movs	r2, #32
 8011114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3714      	adds	r7, #20
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b084      	sub	sp, #16
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801113e:	2b01      	cmp	r3, #1
 8011140:	d101      	bne.n	8011146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011142:	2302      	movs	r3, #2
 8011144:	e02d      	b.n	80111a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2201      	movs	r2, #1
 801114a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2224      	movs	r2, #36	; 0x24
 8011152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f022 0201 	bic.w	r2, r2, #1
 801116c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	689b      	ldr	r3, [r3, #8]
 8011174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	683a      	ldr	r2, [r7, #0]
 801117e:	430a      	orrs	r2, r1
 8011180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 f850 	bl	8011228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	68fa      	ldr	r2, [r7, #12]
 801118e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2220      	movs	r2, #32
 8011194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b084      	sub	sp, #16
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
 80111b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d101      	bne.n	80111c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80111be:	2302      	movs	r3, #2
 80111c0:	e02d      	b.n	801121e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2201      	movs	r2, #1
 80111c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2224      	movs	r2, #36	; 0x24
 80111ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f022 0201 	bic.w	r2, r2, #1
 80111e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	683a      	ldr	r2, [r7, #0]
 80111fa:	430a      	orrs	r2, r1
 80111fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f812 	bl	8011228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2220      	movs	r2, #32
 8011210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2200      	movs	r2, #0
 8011218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801121c:	2300      	movs	r3, #0
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
	...

08011228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011228:	b480      	push	{r7}
 801122a:	b085      	sub	sp, #20
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011234:	2b00      	cmp	r3, #0
 8011236:	d108      	bne.n	801124a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2201      	movs	r2, #1
 801123c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2201      	movs	r2, #1
 8011244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011248:	e031      	b.n	80112ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801124a:	2308      	movs	r3, #8
 801124c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801124e:	2308      	movs	r3, #8
 8011250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	689b      	ldr	r3, [r3, #8]
 8011258:	0e5b      	lsrs	r3, r3, #25
 801125a:	b2db      	uxtb	r3, r3
 801125c:	f003 0307 	and.w	r3, r3, #7
 8011260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	0f5b      	lsrs	r3, r3, #29
 801126a:	b2db      	uxtb	r3, r3
 801126c:	f003 0307 	and.w	r3, r3, #7
 8011270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011272:	7bbb      	ldrb	r3, [r7, #14]
 8011274:	7b3a      	ldrb	r2, [r7, #12]
 8011276:	4911      	ldr	r1, [pc, #68]	; (80112bc <UARTEx_SetNbDataToProcess+0x94>)
 8011278:	5c8a      	ldrb	r2, [r1, r2]
 801127a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801127e:	7b3a      	ldrb	r2, [r7, #12]
 8011280:	490f      	ldr	r1, [pc, #60]	; (80112c0 <UARTEx_SetNbDataToProcess+0x98>)
 8011282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011284:	fb93 f3f2 	sdiv	r3, r3, r2
 8011288:	b29a      	uxth	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011290:	7bfb      	ldrb	r3, [r7, #15]
 8011292:	7b7a      	ldrb	r2, [r7, #13]
 8011294:	4909      	ldr	r1, [pc, #36]	; (80112bc <UARTEx_SetNbDataToProcess+0x94>)
 8011296:	5c8a      	ldrb	r2, [r1, r2]
 8011298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801129c:	7b7a      	ldrb	r2, [r7, #13]
 801129e:	4908      	ldr	r1, [pc, #32]	; (80112c0 <UARTEx_SetNbDataToProcess+0x98>)
 80112a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80112ae:	bf00      	nop
 80112b0:	3714      	adds	r7, #20
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	0801a144 	.word	0x0801a144
 80112c0:	0801a14c 	.word	0x0801a14c

080112c4 <__NVIC_SetPriority>:
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	4603      	mov	r3, r0
 80112cc:	6039      	str	r1, [r7, #0]
 80112ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80112d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	db0a      	blt.n	80112ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	b2da      	uxtb	r2, r3
 80112dc:	490c      	ldr	r1, [pc, #48]	; (8011310 <__NVIC_SetPriority+0x4c>)
 80112de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112e2:	0112      	lsls	r2, r2, #4
 80112e4:	b2d2      	uxtb	r2, r2
 80112e6:	440b      	add	r3, r1
 80112e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80112ec:	e00a      	b.n	8011304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	4908      	ldr	r1, [pc, #32]	; (8011314 <__NVIC_SetPriority+0x50>)
 80112f4:	79fb      	ldrb	r3, [r7, #7]
 80112f6:	f003 030f 	and.w	r3, r3, #15
 80112fa:	3b04      	subs	r3, #4
 80112fc:	0112      	lsls	r2, r2, #4
 80112fe:	b2d2      	uxtb	r2, r2
 8011300:	440b      	add	r3, r1
 8011302:	761a      	strb	r2, [r3, #24]
}
 8011304:	bf00      	nop
 8011306:	370c      	adds	r7, #12
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr
 8011310:	e000e100 	.word	0xe000e100
 8011314:	e000ed00 	.word	0xe000ed00

08011318 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011318:	b580      	push	{r7, lr}
 801131a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801131c:	4b05      	ldr	r3, [pc, #20]	; (8011334 <SysTick_Handler+0x1c>)
 801131e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011320:	f002 ffca 	bl	80142b8 <xTaskGetSchedulerState>
 8011324:	4603      	mov	r3, r0
 8011326:	2b01      	cmp	r3, #1
 8011328:	d001      	beq.n	801132e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801132a:	f003 fee5 	bl	80150f8 <xPortSysTickHandler>
  }
}
 801132e:	bf00      	nop
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	e000e010 	.word	0xe000e010

08011338 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011338:	b580      	push	{r7, lr}
 801133a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801133c:	2100      	movs	r1, #0
 801133e:	f06f 0004 	mvn.w	r0, #4
 8011342:	f7ff ffbf 	bl	80112c4 <__NVIC_SetPriority>
#endif
}
 8011346:	bf00      	nop
 8011348:	bd80      	pop	{r7, pc}
	...

0801134c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011352:	f3ef 8305 	mrs	r3, IPSR
 8011356:	603b      	str	r3, [r7, #0]
  return(result);
 8011358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801135a:	2b00      	cmp	r3, #0
 801135c:	d003      	beq.n	8011366 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801135e:	f06f 0305 	mvn.w	r3, #5
 8011362:	607b      	str	r3, [r7, #4]
 8011364:	e00c      	b.n	8011380 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011366:	4b0a      	ldr	r3, [pc, #40]	; (8011390 <osKernelInitialize+0x44>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d105      	bne.n	801137a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801136e:	4b08      	ldr	r3, [pc, #32]	; (8011390 <osKernelInitialize+0x44>)
 8011370:	2201      	movs	r2, #1
 8011372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011374:	2300      	movs	r3, #0
 8011376:	607b      	str	r3, [r7, #4]
 8011378:	e002      	b.n	8011380 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801137a:	f04f 33ff 	mov.w	r3, #4294967295
 801137e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011380:	687b      	ldr	r3, [r7, #4]
}
 8011382:	4618      	mov	r0, r3
 8011384:	370c      	adds	r7, #12
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	200006b0 	.word	0x200006b0

08011394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801139a:	f3ef 8305 	mrs	r3, IPSR
 801139e:	603b      	str	r3, [r7, #0]
  return(result);
 80113a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d003      	beq.n	80113ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80113a6:	f06f 0305 	mvn.w	r3, #5
 80113aa:	607b      	str	r3, [r7, #4]
 80113ac:	e010      	b.n	80113d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80113ae:	4b0b      	ldr	r3, [pc, #44]	; (80113dc <osKernelStart+0x48>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d109      	bne.n	80113ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80113b6:	f7ff ffbf 	bl	8011338 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80113ba:	4b08      	ldr	r3, [pc, #32]	; (80113dc <osKernelStart+0x48>)
 80113bc:	2202      	movs	r2, #2
 80113be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80113c0:	f002 fa72 	bl	80138a8 <vTaskStartScheduler>
      stat = osOK;
 80113c4:	2300      	movs	r3, #0
 80113c6:	607b      	str	r3, [r7, #4]
 80113c8:	e002      	b.n	80113d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80113ca:	f04f 33ff 	mov.w	r3, #4294967295
 80113ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80113d0:	687b      	ldr	r3, [r7, #4]
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3708      	adds	r7, #8
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	200006b0 	.word	0x200006b0

080113e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113e6:	f3ef 8305 	mrs	r3, IPSR
 80113ea:	603b      	str	r3, [r7, #0]
  return(result);
 80113ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80113f2:	f002 fb7b 	bl	8013aec <xTaskGetTickCountFromISR>
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	e002      	b.n	8011400 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80113fa:	f002 fb67 	bl	8013acc <xTaskGetTickCount>
 80113fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8011400:	687b      	ldr	r3, [r7, #4]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3708      	adds	r7, #8
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}

0801140a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801140a:	b580      	push	{r7, lr}
 801140c:	b08e      	sub	sp, #56	; 0x38
 801140e:	af04      	add	r7, sp, #16
 8011410:	60f8      	str	r0, [r7, #12]
 8011412:	60b9      	str	r1, [r7, #8]
 8011414:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011416:	2300      	movs	r3, #0
 8011418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801141a:	f3ef 8305 	mrs	r3, IPSR
 801141e:	617b      	str	r3, [r7, #20]
  return(result);
 8011420:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011422:	2b00      	cmp	r3, #0
 8011424:	d17e      	bne.n	8011524 <osThreadNew+0x11a>
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d07b      	beq.n	8011524 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801142c:	2380      	movs	r3, #128	; 0x80
 801142e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011430:	2318      	movs	r3, #24
 8011432:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011434:	2300      	movs	r3, #0
 8011436:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011438:	f04f 33ff 	mov.w	r3, #4294967295
 801143c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d045      	beq.n	80114d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <osThreadNew+0x48>
        name = attr->name;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	699b      	ldr	r3, [r3, #24]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d002      	beq.n	8011460 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	699b      	ldr	r3, [r3, #24]
 801145e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d008      	beq.n	8011478 <osThreadNew+0x6e>
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	2b38      	cmp	r3, #56	; 0x38
 801146a:	d805      	bhi.n	8011478 <osThreadNew+0x6e>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	f003 0301 	and.w	r3, r3, #1
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <osThreadNew+0x72>
        return (NULL);
 8011478:	2300      	movs	r3, #0
 801147a:	e054      	b.n	8011526 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	695b      	ldr	r3, [r3, #20]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d003      	beq.n	801148c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	695b      	ldr	r3, [r3, #20]
 8011488:	089b      	lsrs	r3, r3, #2
 801148a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	689b      	ldr	r3, [r3, #8]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d00e      	beq.n	80114b2 <osThreadNew+0xa8>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	2b5b      	cmp	r3, #91	; 0x5b
 801149a:	d90a      	bls.n	80114b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d006      	beq.n	80114b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	695b      	ldr	r3, [r3, #20]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d002      	beq.n	80114b2 <osThreadNew+0xa8>
        mem = 1;
 80114ac:	2301      	movs	r3, #1
 80114ae:	61bb      	str	r3, [r7, #24]
 80114b0:	e010      	b.n	80114d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d10c      	bne.n	80114d4 <osThreadNew+0xca>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d108      	bne.n	80114d4 <osThreadNew+0xca>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d104      	bne.n	80114d4 <osThreadNew+0xca>
          mem = 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	61bb      	str	r3, [r7, #24]
 80114ce:	e001      	b.n	80114d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80114d0:	2300      	movs	r3, #0
 80114d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d110      	bne.n	80114fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114e2:	9202      	str	r2, [sp, #8]
 80114e4:	9301      	str	r3, [sp, #4]
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	9300      	str	r3, [sp, #0]
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	6a3a      	ldr	r2, [r7, #32]
 80114ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f001 fe25 	bl	8013140 <xTaskCreateStatic>
 80114f6:	4603      	mov	r3, r0
 80114f8:	613b      	str	r3, [r7, #16]
 80114fa:	e013      	b.n	8011524 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d110      	bne.n	8011524 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011502:	6a3b      	ldr	r3, [r7, #32]
 8011504:	b29a      	uxth	r2, r3
 8011506:	f107 0310 	add.w	r3, r7, #16
 801150a:	9301      	str	r3, [sp, #4]
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f001 fe70 	bl	80131fa <xTaskCreate>
 801151a:	4603      	mov	r3, r0
 801151c:	2b01      	cmp	r3, #1
 801151e:	d001      	beq.n	8011524 <osThreadNew+0x11a>
            hTask = NULL;
 8011520:	2300      	movs	r3, #0
 8011522:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011524:	693b      	ldr	r3, [r7, #16]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3728      	adds	r7, #40	; 0x28
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 801152e:	b580      	push	{r7, lr}
 8011530:	b086      	sub	sp, #24
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801153a:	f3ef 8305 	mrs	r3, IPSR
 801153e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011540:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011542:	2b00      	cmp	r3, #0
 8011544:	d003      	beq.n	801154e <osThreadSuspend+0x20>
    stat = osErrorISR;
 8011546:	f06f 0305 	mvn.w	r3, #5
 801154a:	617b      	str	r3, [r7, #20]
 801154c:	e00b      	b.n	8011566 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d103      	bne.n	801155c <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8011554:	f06f 0303 	mvn.w	r3, #3
 8011558:	617b      	str	r3, [r7, #20]
 801155a:	e004      	b.n	8011566 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801155c:	2300      	movs	r3, #0
 801155e:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8011560:	6938      	ldr	r0, [r7, #16]
 8011562:	f002 f89b 	bl	801369c <vTaskSuspend>
  }

  return (stat);
 8011566:	697b      	ldr	r3, [r7, #20]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3718      	adds	r7, #24
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801157c:	f3ef 8305 	mrs	r3, IPSR
 8011580:	60fb      	str	r3, [r7, #12]
  return(result);
 8011582:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011584:	2b00      	cmp	r3, #0
 8011586:	d003      	beq.n	8011590 <osThreadResume+0x20>
    stat = osErrorISR;
 8011588:	f06f 0305 	mvn.w	r3, #5
 801158c:	617b      	str	r3, [r7, #20]
 801158e:	e00b      	b.n	80115a8 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d103      	bne.n	801159e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8011596:	f06f 0303 	mvn.w	r3, #3
 801159a:	617b      	str	r3, [r7, #20]
 801159c:	e004      	b.n	80115a8 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 801159e:	2300      	movs	r3, #0
 80115a0:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80115a2:	6938      	ldr	r0, [r7, #16]
 80115a4:	f002 f922 	bl	80137ec <vTaskResume>
  }

  return (stat);
 80115a8:	697b      	ldr	r3, [r7, #20]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3718      	adds	r7, #24
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b086      	sub	sp, #24
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115be:	f3ef 8305 	mrs	r3, IPSR
 80115c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80115c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d003      	beq.n	80115d2 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80115ca:	f06f 0305 	mvn.w	r3, #5
 80115ce:	617b      	str	r3, [r7, #20]
 80115d0:	e017      	b.n	8011602 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d103      	bne.n	80115e0 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80115d8:	f06f 0303 	mvn.w	r3, #3
 80115dc:	617b      	str	r3, [r7, #20]
 80115de:	e010      	b.n	8011602 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80115e0:	6938      	ldr	r0, [r7, #16]
 80115e2:	f001 fff5 	bl	80135d0 <eTaskGetState>
 80115e6:	4603      	mov	r3, r0
 80115e8:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80115ea:	7bfb      	ldrb	r3, [r7, #15]
 80115ec:	2b04      	cmp	r3, #4
 80115ee:	d005      	beq.n	80115fc <osThreadTerminate+0x4a>
      stat = osOK;
 80115f0:	2300      	movs	r3, #0
 80115f2:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80115f4:	6938      	ldr	r0, [r7, #16]
 80115f6:	f001 ff45 	bl	8013484 <vTaskDelete>
 80115fa:	e002      	b.n	8011602 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80115fc:	f06f 0302 	mvn.w	r3, #2
 8011600:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8011602:	697b      	ldr	r3, [r7, #20]
}
 8011604:	4618      	mov	r0, r3
 8011606:	3718      	adds	r7, #24
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011614:	f3ef 8305 	mrs	r3, IPSR
 8011618:	60bb      	str	r3, [r7, #8]
  return(result);
 801161a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801161c:	2b00      	cmp	r3, #0
 801161e:	d003      	beq.n	8011628 <osDelay+0x1c>
    stat = osErrorISR;
 8011620:	f06f 0305 	mvn.w	r3, #5
 8011624:	60fb      	str	r3, [r7, #12]
 8011626:	e007      	b.n	8011638 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011628:	2300      	movs	r3, #0
 801162a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d002      	beq.n	8011638 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f001 ff98 	bl	8013568 <vTaskDelay>
    }
  }

  return (stat);
 8011638:	68fb      	ldr	r3, [r7, #12]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3710      	adds	r7, #16
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}

08011642 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8011642:	b580      	push	{r7, lr}
 8011644:	b086      	sub	sp, #24
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801164a:	2300      	movs	r3, #0
 801164c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801164e:	f3ef 8305 	mrs	r3, IPSR
 8011652:	60fb      	str	r3, [r7, #12]
  return(result);
 8011654:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8011656:	2b00      	cmp	r3, #0
 8011658:	d12d      	bne.n	80116b6 <osEventFlagsNew+0x74>
    mem = -1;
 801165a:	f04f 33ff 	mov.w	r3, #4294967295
 801165e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d015      	beq.n	8011692 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d006      	beq.n	801167c <osEventFlagsNew+0x3a>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	2b1f      	cmp	r3, #31
 8011674:	d902      	bls.n	801167c <osEventFlagsNew+0x3a>
        mem = 1;
 8011676:	2301      	movs	r3, #1
 8011678:	613b      	str	r3, [r7, #16]
 801167a:	e00c      	b.n	8011696 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d108      	bne.n	8011696 <osEventFlagsNew+0x54>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d104      	bne.n	8011696 <osEventFlagsNew+0x54>
          mem = 0;
 801168c:	2300      	movs	r3, #0
 801168e:	613b      	str	r3, [r7, #16]
 8011690:	e001      	b.n	8011696 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	2b01      	cmp	r3, #1
 801169a:	d106      	bne.n	80116aa <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f000 fb2b 	bl	8011cfc <xEventGroupCreateStatic>
 80116a6:	6178      	str	r0, [r7, #20]
 80116a8:	e005      	b.n	80116b6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d102      	bne.n	80116b6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80116b0:	f000 fb5b 	bl	8011d6a <xEventGroupCreate>
 80116b4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80116b6:	697b      	ldr	r3, [r7, #20]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3718      	adds	r7, #24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b086      	sub	sp, #24
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d004      	beq.n	80116de <osEventFlagsSet+0x1e>
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d003      	beq.n	80116e6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80116de:	f06f 0303 	mvn.w	r3, #3
 80116e2:	617b      	str	r3, [r7, #20]
 80116e4:	e028      	b.n	8011738 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116e6:	f3ef 8305 	mrs	r3, IPSR
 80116ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80116ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d01d      	beq.n	801172e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80116f2:	2300      	movs	r3, #0
 80116f4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80116f6:	f107 0308 	add.w	r3, r7, #8
 80116fa:	461a      	mov	r2, r3
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6938      	ldr	r0, [r7, #16]
 8011700:	f000 fcd6 	bl	80120b0 <xEventGroupSetBitsFromISR>
 8011704:	4603      	mov	r3, r0
 8011706:	2b00      	cmp	r3, #0
 8011708:	d103      	bne.n	8011712 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801170a:	f06f 0302 	mvn.w	r3, #2
 801170e:	617b      	str	r3, [r7, #20]
 8011710:	e012      	b.n	8011738 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d00d      	beq.n	8011738 <osEventFlagsSet+0x78>
 801171c:	4b09      	ldr	r3, [pc, #36]	; (8011744 <osEventFlagsSet+0x84>)
 801171e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	f3bf 8f4f 	dsb	sy
 8011728:	f3bf 8f6f 	isb	sy
 801172c:	e004      	b.n	8011738 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801172e:	6839      	ldr	r1, [r7, #0]
 8011730:	6938      	ldr	r0, [r7, #16]
 8011732:	f000 fc03 	bl	8011f3c <xEventGroupSetBits>
 8011736:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011738:	697b      	ldr	r3, [r7, #20]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3718      	adds	r7, #24
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	e000ed04 	.word	0xe000ed04

08011748 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011748:	b580      	push	{r7, lr}
 801174a:	b08c      	sub	sp, #48	; 0x30
 801174c:	af02      	add	r7, sp, #8
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d004      	beq.n	801176a <osEventFlagsWait+0x22>
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011766:	2b00      	cmp	r3, #0
 8011768:	d003      	beq.n	8011772 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801176a:	f06f 0303 	mvn.w	r3, #3
 801176e:	61fb      	str	r3, [r7, #28]
 8011770:	e04b      	b.n	801180a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011772:	f3ef 8305 	mrs	r3, IPSR
 8011776:	617b      	str	r3, [r7, #20]
  return(result);
 8011778:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801177a:	2b00      	cmp	r3, #0
 801177c:	d003      	beq.n	8011786 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801177e:	f06f 0305 	mvn.w	r3, #5
 8011782:	61fb      	str	r3, [r7, #28]
 8011784:	e041      	b.n	801180a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f003 0301 	and.w	r3, r3, #1
 801178c:	2b00      	cmp	r3, #0
 801178e:	d002      	beq.n	8011796 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8011790:	2301      	movs	r3, #1
 8011792:	627b      	str	r3, [r7, #36]	; 0x24
 8011794:	e001      	b.n	801179a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8011796:	2300      	movs	r3, #0
 8011798:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f003 0302 	and.w	r3, r3, #2
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d002      	beq.n	80117aa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80117a4:	2300      	movs	r3, #0
 80117a6:	623b      	str	r3, [r7, #32]
 80117a8:	e001      	b.n	80117ae <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80117aa:	2301      	movs	r3, #1
 80117ac:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	9300      	str	r3, [sp, #0]
 80117b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b4:	6a3a      	ldr	r2, [r7, #32]
 80117b6:	68b9      	ldr	r1, [r7, #8]
 80117b8:	69b8      	ldr	r0, [r7, #24]
 80117ba:	f000 faf1 	bl	8011da0 <xEventGroupWaitBits>
 80117be:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d010      	beq.n	80117ec <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	4013      	ands	r3, r2
 80117d0:	68ba      	ldr	r2, [r7, #8]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d019      	beq.n	801180a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d003      	beq.n	80117e4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80117dc:	f06f 0301 	mvn.w	r3, #1
 80117e0:	61fb      	str	r3, [r7, #28]
 80117e2:	e012      	b.n	801180a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80117e4:	f06f 0302 	mvn.w	r3, #2
 80117e8:	61fb      	str	r3, [r7, #28]
 80117ea:	e00e      	b.n	801180a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	4013      	ands	r3, r2
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d109      	bne.n	801180a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d003      	beq.n	8011804 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80117fc:	f06f 0301 	mvn.w	r3, #1
 8011800:	61fb      	str	r3, [r7, #28]
 8011802:	e002      	b.n	801180a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011804:	f06f 0302 	mvn.w	r3, #2
 8011808:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801180a:	69fb      	ldr	r3, [r7, #28]
}
 801180c:	4618      	mov	r0, r3
 801180e:	3728      	adds	r7, #40	; 0x28
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011814:	b580      	push	{r7, lr}
 8011816:	b088      	sub	sp, #32
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801181c:	2300      	movs	r3, #0
 801181e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011820:	f3ef 8305 	mrs	r3, IPSR
 8011824:	60bb      	str	r3, [r7, #8]
  return(result);
 8011826:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8011828:	2b00      	cmp	r3, #0
 801182a:	d174      	bne.n	8011916 <osMutexNew+0x102>
    if (attr != NULL) {
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d003      	beq.n	801183a <osMutexNew+0x26>
      type = attr->attr_bits;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	61bb      	str	r3, [r7, #24]
 8011838:	e001      	b.n	801183e <osMutexNew+0x2a>
    } else {
      type = 0U;
 801183a:	2300      	movs	r3, #0
 801183c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	f003 0301 	and.w	r3, r3, #1
 8011844:	2b00      	cmp	r3, #0
 8011846:	d002      	beq.n	801184e <osMutexNew+0x3a>
      rmtx = 1U;
 8011848:	2301      	movs	r3, #1
 801184a:	617b      	str	r3, [r7, #20]
 801184c:	e001      	b.n	8011852 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801184e:	2300      	movs	r3, #0
 8011850:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	f003 0308 	and.w	r3, r3, #8
 8011858:	2b00      	cmp	r3, #0
 801185a:	d15c      	bne.n	8011916 <osMutexNew+0x102>
      mem = -1;
 801185c:	f04f 33ff 	mov.w	r3, #4294967295
 8011860:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d015      	beq.n	8011894 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d006      	beq.n	801187e <osMutexNew+0x6a>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	2b4f      	cmp	r3, #79	; 0x4f
 8011876:	d902      	bls.n	801187e <osMutexNew+0x6a>
          mem = 1;
 8011878:	2301      	movs	r3, #1
 801187a:	613b      	str	r3, [r7, #16]
 801187c:	e00c      	b.n	8011898 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d108      	bne.n	8011898 <osMutexNew+0x84>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d104      	bne.n	8011898 <osMutexNew+0x84>
            mem = 0;
 801188e:	2300      	movs	r3, #0
 8011890:	613b      	str	r3, [r7, #16]
 8011892:	e001      	b.n	8011898 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8011894:	2300      	movs	r3, #0
 8011896:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	2b01      	cmp	r3, #1
 801189c:	d112      	bne.n	80118c4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d007      	beq.n	80118b4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	689b      	ldr	r3, [r3, #8]
 80118a8:	4619      	mov	r1, r3
 80118aa:	2004      	movs	r0, #4
 80118ac:	f000 fe37 	bl	801251e <xQueueCreateMutexStatic>
 80118b0:	61f8      	str	r0, [r7, #28]
 80118b2:	e016      	b.n	80118e2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	689b      	ldr	r3, [r3, #8]
 80118b8:	4619      	mov	r1, r3
 80118ba:	2001      	movs	r0, #1
 80118bc:	f000 fe2f 	bl	801251e <xQueueCreateMutexStatic>
 80118c0:	61f8      	str	r0, [r7, #28]
 80118c2:	e00e      	b.n	80118e2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d10b      	bne.n	80118e2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d004      	beq.n	80118da <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80118d0:	2004      	movs	r0, #4
 80118d2:	f000 fe0c 	bl	80124ee <xQueueCreateMutex>
 80118d6:	61f8      	str	r0, [r7, #28]
 80118d8:	e003      	b.n	80118e2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80118da:	2001      	movs	r0, #1
 80118dc:	f000 fe07 	bl	80124ee <xQueueCreateMutex>
 80118e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d00c      	beq.n	8011902 <osMutexNew+0xee>
        if (attr != NULL) {
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d003      	beq.n	80118f6 <osMutexNew+0xe2>
          name = attr->name;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	60fb      	str	r3, [r7, #12]
 80118f4:	e001      	b.n	80118fa <osMutexNew+0xe6>
        } else {
          name = NULL;
 80118f6:	2300      	movs	r3, #0
 80118f8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80118fa:	68f9      	ldr	r1, [r7, #12]
 80118fc:	69f8      	ldr	r0, [r7, #28]
 80118fe:	f001 fbc1 	bl	8013084 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011902:	69fb      	ldr	r3, [r7, #28]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d006      	beq.n	8011916 <osMutexNew+0x102>
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d003      	beq.n	8011916 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	f043 0301 	orr.w	r3, r3, #1
 8011914:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011916:	69fb      	ldr	r3, [r7, #28]
}
 8011918:	4618      	mov	r0, r3
 801191a:	3720      	adds	r7, #32
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011920:	b580      	push	{r7, lr}
 8011922:	b086      	sub	sp, #24
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f023 0301 	bic.w	r3, r3, #1
 8011930:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f003 0301 	and.w	r3, r3, #1
 8011938:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801193a:	2300      	movs	r3, #0
 801193c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801193e:	f3ef 8305 	mrs	r3, IPSR
 8011942:	60bb      	str	r3, [r7, #8]
  return(result);
 8011944:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8011946:	2b00      	cmp	r3, #0
 8011948:	d003      	beq.n	8011952 <osMutexAcquire+0x32>
    stat = osErrorISR;
 801194a:	f06f 0305 	mvn.w	r3, #5
 801194e:	617b      	str	r3, [r7, #20]
 8011950:	e02c      	b.n	80119ac <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d103      	bne.n	8011960 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8011958:	f06f 0303 	mvn.w	r3, #3
 801195c:	617b      	str	r3, [r7, #20]
 801195e:	e025      	b.n	80119ac <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d011      	beq.n	801198a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011966:	6839      	ldr	r1, [r7, #0]
 8011968:	6938      	ldr	r0, [r7, #16]
 801196a:	f000 fe27 	bl	80125bc <xQueueTakeMutexRecursive>
 801196e:	4603      	mov	r3, r0
 8011970:	2b01      	cmp	r3, #1
 8011972:	d01b      	beq.n	80119ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d003      	beq.n	8011982 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 801197a:	f06f 0301 	mvn.w	r3, #1
 801197e:	617b      	str	r3, [r7, #20]
 8011980:	e014      	b.n	80119ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8011982:	f06f 0302 	mvn.w	r3, #2
 8011986:	617b      	str	r3, [r7, #20]
 8011988:	e010      	b.n	80119ac <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801198a:	6839      	ldr	r1, [r7, #0]
 801198c:	6938      	ldr	r0, [r7, #16]
 801198e:	f001 f8c5 	bl	8012b1c <xQueueSemaphoreTake>
 8011992:	4603      	mov	r3, r0
 8011994:	2b01      	cmp	r3, #1
 8011996:	d009      	beq.n	80119ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d003      	beq.n	80119a6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801199e:	f06f 0301 	mvn.w	r3, #1
 80119a2:	617b      	str	r3, [r7, #20]
 80119a4:	e002      	b.n	80119ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80119a6:	f06f 0302 	mvn.w	r3, #2
 80119aa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80119ac:	697b      	ldr	r3, [r7, #20]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3718      	adds	r7, #24
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b086      	sub	sp, #24
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f023 0301 	bic.w	r3, r3, #1
 80119c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f003 0301 	and.w	r3, r3, #1
 80119cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119d2:	f3ef 8305 	mrs	r3, IPSR
 80119d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80119d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d003      	beq.n	80119e6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80119de:	f06f 0305 	mvn.w	r3, #5
 80119e2:	617b      	str	r3, [r7, #20]
 80119e4:	e01f      	b.n	8011a26 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d103      	bne.n	80119f4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80119ec:	f06f 0303 	mvn.w	r3, #3
 80119f0:	617b      	str	r3, [r7, #20]
 80119f2:	e018      	b.n	8011a26 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d009      	beq.n	8011a0e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80119fa:	6938      	ldr	r0, [r7, #16]
 80119fc:	f000 fdaa 	bl	8012554 <xQueueGiveMutexRecursive>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d00f      	beq.n	8011a26 <osMutexRelease+0x70>
        stat = osErrorResource;
 8011a06:	f06f 0302 	mvn.w	r3, #2
 8011a0a:	617b      	str	r3, [r7, #20]
 8011a0c:	e00b      	b.n	8011a26 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011a0e:	2300      	movs	r3, #0
 8011a10:	2200      	movs	r2, #0
 8011a12:	2100      	movs	r1, #0
 8011a14:	6938      	ldr	r0, [r7, #16]
 8011a16:	f000 fe07 	bl	8012628 <xQueueGenericSend>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d002      	beq.n	8011a26 <osMutexRelease+0x70>
        stat = osErrorResource;
 8011a20:	f06f 0302 	mvn.w	r3, #2
 8011a24:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011a26:	697b      	ldr	r3, [r7, #20]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3718      	adds	r7, #24
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b08a      	sub	sp, #40	; 0x28
 8011a34:	af02      	add	r7, sp, #8
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a40:	f3ef 8305 	mrs	r3, IPSR
 8011a44:	613b      	str	r3, [r7, #16]
  return(result);
 8011a46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d15f      	bne.n	8011b0c <osMessageQueueNew+0xdc>
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d05c      	beq.n	8011b0c <osMessageQueueNew+0xdc>
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d059      	beq.n	8011b0c <osMessageQueueNew+0xdc>
    mem = -1;
 8011a58:	f04f 33ff 	mov.w	r3, #4294967295
 8011a5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d029      	beq.n	8011ab8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d012      	beq.n	8011a92 <osMessageQueueNew+0x62>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	2b4f      	cmp	r3, #79	; 0x4f
 8011a72:	d90e      	bls.n	8011a92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d00a      	beq.n	8011a92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	695a      	ldr	r2, [r3, #20]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	68b9      	ldr	r1, [r7, #8]
 8011a84:	fb01 f303 	mul.w	r3, r1, r3
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d302      	bcc.n	8011a92 <osMessageQueueNew+0x62>
        mem = 1;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	61bb      	str	r3, [r7, #24]
 8011a90:	e014      	b.n	8011abc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d110      	bne.n	8011abc <osMessageQueueNew+0x8c>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d10c      	bne.n	8011abc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d108      	bne.n	8011abc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	695b      	ldr	r3, [r3, #20]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d104      	bne.n	8011abc <osMessageQueueNew+0x8c>
          mem = 0;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	61bb      	str	r3, [r7, #24]
 8011ab6:	e001      	b.n	8011abc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d10b      	bne.n	8011ada <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	691a      	ldr	r2, [r3, #16]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	689b      	ldr	r3, [r3, #8]
 8011aca:	2100      	movs	r1, #0
 8011acc:	9100      	str	r1, [sp, #0]
 8011ace:	68b9      	ldr	r1, [r7, #8]
 8011ad0:	68f8      	ldr	r0, [r7, #12]
 8011ad2:	f000 fc1d 	bl	8012310 <xQueueGenericCreateStatic>
 8011ad6:	61f8      	str	r0, [r7, #28]
 8011ad8:	e008      	b.n	8011aec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011ada:	69bb      	ldr	r3, [r7, #24]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d105      	bne.n	8011aec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	68b9      	ldr	r1, [r7, #8]
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f000 fc8b 	bl	8012400 <xQueueGenericCreate>
 8011aea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00c      	beq.n	8011b0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d003      	beq.n	8011b00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	617b      	str	r3, [r7, #20]
 8011afe:	e001      	b.n	8011b04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011b00:	2300      	movs	r3, #0
 8011b02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011b04:	6979      	ldr	r1, [r7, #20]
 8011b06:	69f8      	ldr	r0, [r7, #28]
 8011b08:	f001 fabc 	bl	8013084 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011b0c:	69fb      	ldr	r3, [r7, #28]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3720      	adds	r7, #32
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
	...

08011b18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b088      	sub	sp, #32
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	603b      	str	r3, [r7, #0]
 8011b24:	4613      	mov	r3, r2
 8011b26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b30:	f3ef 8305 	mrs	r3, IPSR
 8011b34:	617b      	str	r3, [r7, #20]
  return(result);
 8011b36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d028      	beq.n	8011b8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d005      	beq.n	8011b4e <osMessageQueuePut+0x36>
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d002      	beq.n	8011b4e <osMessageQueuePut+0x36>
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d003      	beq.n	8011b56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011b4e:	f06f 0303 	mvn.w	r3, #3
 8011b52:	61fb      	str	r3, [r7, #28]
 8011b54:	e038      	b.n	8011bc8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011b56:	2300      	movs	r3, #0
 8011b58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011b5a:	f107 0210 	add.w	r2, r7, #16
 8011b5e:	2300      	movs	r3, #0
 8011b60:	68b9      	ldr	r1, [r7, #8]
 8011b62:	69b8      	ldr	r0, [r7, #24]
 8011b64:	f000 fe5e 	bl	8012824 <xQueueGenericSendFromISR>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d003      	beq.n	8011b76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011b6e:	f06f 0302 	mvn.w	r3, #2
 8011b72:	61fb      	str	r3, [r7, #28]
 8011b74:	e028      	b.n	8011bc8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d025      	beq.n	8011bc8 <osMessageQueuePut+0xb0>
 8011b7c:	4b15      	ldr	r3, [pc, #84]	; (8011bd4 <osMessageQueuePut+0xbc>)
 8011b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b82:	601a      	str	r2, [r3, #0]
 8011b84:	f3bf 8f4f 	dsb	sy
 8011b88:	f3bf 8f6f 	isb	sy
 8011b8c:	e01c      	b.n	8011bc8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d002      	beq.n	8011b9a <osMessageQueuePut+0x82>
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d103      	bne.n	8011ba2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011b9a:	f06f 0303 	mvn.w	r3, #3
 8011b9e:	61fb      	str	r3, [r7, #28]
 8011ba0:	e012      	b.n	8011bc8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	683a      	ldr	r2, [r7, #0]
 8011ba6:	68b9      	ldr	r1, [r7, #8]
 8011ba8:	69b8      	ldr	r0, [r7, #24]
 8011baa:	f000 fd3d 	bl	8012628 <xQueueGenericSend>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d009      	beq.n	8011bc8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d003      	beq.n	8011bc2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011bba:	f06f 0301 	mvn.w	r3, #1
 8011bbe:	61fb      	str	r3, [r7, #28]
 8011bc0:	e002      	b.n	8011bc8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011bc2:	f06f 0302 	mvn.w	r3, #2
 8011bc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011bc8:	69fb      	ldr	r3, [r7, #28]
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3720      	adds	r7, #32
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	e000ed04 	.word	0xe000ed04

08011bd8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b088      	sub	sp, #32
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
 8011be4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011bea:	2300      	movs	r3, #0
 8011bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bee:	f3ef 8305 	mrs	r3, IPSR
 8011bf2:	617b      	str	r3, [r7, #20]
  return(result);
 8011bf4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d028      	beq.n	8011c4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d005      	beq.n	8011c0c <osMessageQueueGet+0x34>
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d002      	beq.n	8011c0c <osMessageQueueGet+0x34>
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d003      	beq.n	8011c14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011c0c:	f06f 0303 	mvn.w	r3, #3
 8011c10:	61fb      	str	r3, [r7, #28]
 8011c12:	e037      	b.n	8011c84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011c14:	2300      	movs	r3, #0
 8011c16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011c18:	f107 0310 	add.w	r3, r7, #16
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	68b9      	ldr	r1, [r7, #8]
 8011c20:	69b8      	ldr	r0, [r7, #24]
 8011c22:	f001 f887 	bl	8012d34 <xQueueReceiveFromISR>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d003      	beq.n	8011c34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011c2c:	f06f 0302 	mvn.w	r3, #2
 8011c30:	61fb      	str	r3, [r7, #28]
 8011c32:	e027      	b.n	8011c84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d024      	beq.n	8011c84 <osMessageQueueGet+0xac>
 8011c3a:	4b15      	ldr	r3, [pc, #84]	; (8011c90 <osMessageQueueGet+0xb8>)
 8011c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c40:	601a      	str	r2, [r3, #0]
 8011c42:	f3bf 8f4f 	dsb	sy
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	e01b      	b.n	8011c84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d002      	beq.n	8011c58 <osMessageQueueGet+0x80>
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d103      	bne.n	8011c60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011c58:	f06f 0303 	mvn.w	r3, #3
 8011c5c:	61fb      	str	r3, [r7, #28]
 8011c5e:	e011      	b.n	8011c84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011c60:	683a      	ldr	r2, [r7, #0]
 8011c62:	68b9      	ldr	r1, [r7, #8]
 8011c64:	69b8      	ldr	r0, [r7, #24]
 8011c66:	f000 fe79 	bl	801295c <xQueueReceive>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d009      	beq.n	8011c84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d003      	beq.n	8011c7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011c76:	f06f 0301 	mvn.w	r3, #1
 8011c7a:	61fb      	str	r3, [r7, #28]
 8011c7c:	e002      	b.n	8011c84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011c7e:	f06f 0302 	mvn.w	r3, #2
 8011c82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011c84:	69fb      	ldr	r3, [r7, #28]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3720      	adds	r7, #32
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	e000ed04 	.word	0xe000ed04

08011c94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011c94:	b480      	push	{r7}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	4a07      	ldr	r2, [pc, #28]	; (8011cc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8011ca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	4a06      	ldr	r2, [pc, #24]	; (8011cc4 <vApplicationGetIdleTaskMemory+0x30>)
 8011caa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2280      	movs	r2, #128	; 0x80
 8011cb0:	601a      	str	r2, [r3, #0]
}
 8011cb2:	bf00      	nop
 8011cb4:	3714      	adds	r7, #20
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	200006b4 	.word	0x200006b4
 8011cc4:	20000710 	.word	0x20000710

08011cc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	60f8      	str	r0, [r7, #12]
 8011cd0:	60b9      	str	r1, [r7, #8]
 8011cd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	4a07      	ldr	r2, [pc, #28]	; (8011cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8011cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	4a06      	ldr	r2, [pc, #24]	; (8011cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8011cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ce6:	601a      	str	r2, [r3, #0]
}
 8011ce8:	bf00      	nop
 8011cea:	3714      	adds	r7, #20
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr
 8011cf4:	20000910 	.word	0x20000910
 8011cf8:	2000096c 	.word	0x2000096c

08011cfc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b086      	sub	sp, #24
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10a      	bne.n	8011d20 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0e:	f383 8811 	msr	BASEPRI, r3
 8011d12:	f3bf 8f6f 	isb	sy
 8011d16:	f3bf 8f4f 	dsb	sy
 8011d1a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011d1c:	bf00      	nop
 8011d1e:	e7fe      	b.n	8011d1e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011d20:	2320      	movs	r3, #32
 8011d22:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	2b20      	cmp	r3, #32
 8011d28:	d00a      	beq.n	8011d40 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2e:	f383 8811 	msr	BASEPRI, r3
 8011d32:	f3bf 8f6f 	isb	sy
 8011d36:	f3bf 8f4f 	dsb	sy
 8011d3a:	60fb      	str	r3, [r7, #12]
}
 8011d3c:	bf00      	nop
 8011d3e:	e7fe      	b.n	8011d3e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d00a      	beq.n	8011d60 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	3304      	adds	r3, #4
 8011d54:	4618      	mov	r0, r3
 8011d56:	f000 f9bf 	bl	80120d8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011d60:	697b      	ldr	r3, [r7, #20]
	}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3718      	adds	r7, #24
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}

08011d6a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b082      	sub	sp, #8
 8011d6e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011d70:	2020      	movs	r0, #32
 8011d72:	f003 fa51 	bl	8015218 <pvPortMalloc>
 8011d76:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00a      	beq.n	8011d94 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3304      	adds	r3, #4
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 f9a5 	bl	80120d8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2200      	movs	r2, #0
 8011d92:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011d94:	687b      	ldr	r3, [r7, #4]
	}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3708      	adds	r7, #8
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
	...

08011da0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b090      	sub	sp, #64	; 0x40
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011db6:	2300      	movs	r3, #0
 8011db8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10a      	bne.n	8011dd6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8011dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc4:	f383 8811 	msr	BASEPRI, r3
 8011dc8:	f3bf 8f6f 	isb	sy
 8011dcc:	f3bf 8f4f 	dsb	sy
 8011dd0:	623b      	str	r3, [r7, #32]
}
 8011dd2:	bf00      	nop
 8011dd4:	e7fe      	b.n	8011dd4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00a      	beq.n	8011df6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8011de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de4:	f383 8811 	msr	BASEPRI, r3
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	61fb      	str	r3, [r7, #28]
}
 8011df2:	bf00      	nop
 8011df4:	e7fe      	b.n	8011df4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d10a      	bne.n	8011e12 <xEventGroupWaitBits+0x72>
	__asm volatile
 8011dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e00:	f383 8811 	msr	BASEPRI, r3
 8011e04:	f3bf 8f6f 	isb	sy
 8011e08:	f3bf 8f4f 	dsb	sy
 8011e0c:	61bb      	str	r3, [r7, #24]
}
 8011e0e:	bf00      	nop
 8011e10:	e7fe      	b.n	8011e10 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e12:	f002 fa51 	bl	80142b8 <xTaskGetSchedulerState>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d102      	bne.n	8011e22 <xEventGroupWaitBits+0x82>
 8011e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d101      	bne.n	8011e26 <xEventGroupWaitBits+0x86>
 8011e22:	2301      	movs	r3, #1
 8011e24:	e000      	b.n	8011e28 <xEventGroupWaitBits+0x88>
 8011e26:	2300      	movs	r3, #0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d10a      	bne.n	8011e42 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e30:	f383 8811 	msr	BASEPRI, r3
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	f3bf 8f4f 	dsb	sy
 8011e3c:	617b      	str	r3, [r7, #20]
}
 8011e3e:	bf00      	nop
 8011e40:	e7fe      	b.n	8011e40 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011e42:	f001 fd97 	bl	8013974 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011e4c:	683a      	ldr	r2, [r7, #0]
 8011e4e:	68b9      	ldr	r1, [r7, #8]
 8011e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e52:	f000 f90b 	bl	801206c <prvTestWaitCondition>
 8011e56:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d00e      	beq.n	8011e7c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e60:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d028      	beq.n	8011ebe <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	43db      	mvns	r3, r3
 8011e74:	401a      	ands	r2, r3
 8011e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e78:	601a      	str	r2, [r3, #0]
 8011e7a:	e020      	b.n	8011ebe <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d104      	bne.n	8011e8c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e84:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011e86:	2301      	movs	r3, #1
 8011e88:	633b      	str	r3, [r7, #48]	; 0x30
 8011e8a:	e018      	b.n	8011ebe <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d003      	beq.n	8011e9a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e98:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d003      	beq.n	8011ea8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011ea6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eaa:	1d18      	adds	r0, r3, #4
 8011eac:	68ba      	ldr	r2, [r7, #8]
 8011eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	f001 ff67 	bl	8013d88 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011ebe:	f001 fd67 	bl	8013990 <xTaskResumeAll>
 8011ec2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d031      	beq.n	8011f2e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d107      	bne.n	8011ee0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011ed0:	4b19      	ldr	r3, [pc, #100]	; (8011f38 <xEventGroupWaitBits+0x198>)
 8011ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed6:	601a      	str	r2, [r3, #0]
 8011ed8:	f3bf 8f4f 	dsb	sy
 8011edc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011ee0:	f002 fb60 	bl	80145a4 <uxTaskResetEventItemValue>
 8011ee4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d11a      	bne.n	8011f26 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011ef0:	f003 f870 	bl	8014fd4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	68b9      	ldr	r1, [r7, #8]
 8011efe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f00:	f000 f8b4 	bl	801206c <prvTestWaitCondition>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d009      	beq.n	8011f1e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d006      	beq.n	8011f1e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	43db      	mvns	r3, r3
 8011f18:	401a      	ands	r2, r3
 8011f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f1c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011f22:	f003 f887 	bl	8015034 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3740      	adds	r7, #64	; 0x40
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	e000ed04 	.word	0xe000ed04

08011f3c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b08e      	sub	sp, #56	; 0x38
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011f46:	2300      	movs	r3, #0
 8011f48:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d10a      	bne.n	8011f6e <xEventGroupSetBits+0x32>
	__asm volatile
 8011f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f5c:	f383 8811 	msr	BASEPRI, r3
 8011f60:	f3bf 8f6f 	isb	sy
 8011f64:	f3bf 8f4f 	dsb	sy
 8011f68:	613b      	str	r3, [r7, #16]
}
 8011f6a:	bf00      	nop
 8011f6c:	e7fe      	b.n	8011f6c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d00a      	beq.n	8011f8e <xEventGroupSetBits+0x52>
	__asm volatile
 8011f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7c:	f383 8811 	msr	BASEPRI, r3
 8011f80:	f3bf 8f6f 	isb	sy
 8011f84:	f3bf 8f4f 	dsb	sy
 8011f88:	60fb      	str	r3, [r7, #12]
}
 8011f8a:	bf00      	nop
 8011f8c:	e7fe      	b.n	8011f8c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f90:	3304      	adds	r3, #4
 8011f92:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f96:	3308      	adds	r3, #8
 8011f98:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011f9a:	f001 fceb 	bl	8013974 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa0:	68db      	ldr	r3, [r3, #12]
 8011fa2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	431a      	orrs	r2, r3
 8011fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fae:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011fb0:	e03c      	b.n	801202c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011fc8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011fca:	69bb      	ldr	r3, [r7, #24]
 8011fcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011fd0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d108      	bne.n	8011fee <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	69bb      	ldr	r3, [r7, #24]
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d00b      	beq.n	8012000 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fec:	e008      	b.n	8012000 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	4013      	ands	r3, r2
 8011ff6:	69ba      	ldr	r2, [r7, #24]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d101      	bne.n	8012000 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012002:	2b00      	cmp	r3, #0
 8012004:	d010      	beq.n	8012028 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801200c:	2b00      	cmp	r3, #0
 801200e:	d003      	beq.n	8012018 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	4313      	orrs	r3, r2
 8012016:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012020:	4619      	mov	r1, r3
 8012022:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012024:	f001 ff7c 	bl	8013f20 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801202c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801202e:	6a3b      	ldr	r3, [r7, #32]
 8012030:	429a      	cmp	r2, r3
 8012032:	d1be      	bne.n	8011fb2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203a:	43db      	mvns	r3, r3
 801203c:	401a      	ands	r2, r3
 801203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012040:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012042:	f001 fca5 	bl	8013990 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012048:	681b      	ldr	r3, [r3, #0]
}
 801204a:	4618      	mov	r0, r3
 801204c:	3738      	adds	r7, #56	; 0x38
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b082      	sub	sp, #8
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
 801205a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801205c:	6839      	ldr	r1, [r7, #0]
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f7ff ff6c 	bl	8011f3c <xEventGroupSetBits>
}
 8012064:	bf00      	nop
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801206c:	b480      	push	{r7}
 801206e:	b087      	sub	sp, #28
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012078:	2300      	movs	r3, #0
 801207a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d107      	bne.n	8012092 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	4013      	ands	r3, r2
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00a      	beq.n	80120a2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801208c:	2301      	movs	r3, #1
 801208e:	617b      	str	r3, [r7, #20]
 8012090:	e007      	b.n	80120a2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	4013      	ands	r3, r2
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	429a      	cmp	r2, r3
 801209c:	d101      	bne.n	80120a2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801209e:	2301      	movs	r3, #1
 80120a0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80120a2:	697b      	ldr	r3, [r7, #20]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	371c      	adds	r7, #28
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr

080120b0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b086      	sub	sp, #24
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	68ba      	ldr	r2, [r7, #8]
 80120c0:	68f9      	ldr	r1, [r7, #12]
 80120c2:	4804      	ldr	r0, [pc, #16]	; (80120d4 <xEventGroupSetBitsFromISR+0x24>)
 80120c4:	f002 fe3c 	bl	8014d40 <xTimerPendFunctionCallFromISR>
 80120c8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80120ca:	697b      	ldr	r3, [r7, #20]
	}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3718      	adds	r7, #24
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	08012053 	.word	0x08012053

080120d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80120d8:	b480      	push	{r7}
 80120da:	b083      	sub	sp, #12
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f103 0208 	add.w	r2, r3, #8
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f04f 32ff 	mov.w	r2, #4294967295
 80120f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f103 0208 	add.w	r2, r3, #8
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f103 0208 	add.w	r2, r3, #8
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2200      	movs	r2, #0
 801210a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801210c:	bf00      	nop
 801210e:	370c      	adds	r7, #12
 8012110:	46bd      	mov	sp, r7
 8012112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012116:	4770      	bx	lr

08012118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012118:	b480      	push	{r7}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012126:	bf00      	nop
 8012128:	370c      	adds	r7, #12
 801212a:	46bd      	mov	sp, r7
 801212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012130:	4770      	bx	lr

08012132 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012132:	b480      	push	{r7}
 8012134:	b085      	sub	sp, #20
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
 801213a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	689a      	ldr	r2, [r3, #8]
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	683a      	ldr	r2, [r7, #0]
 8012156:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	683a      	ldr	r2, [r7, #0]
 801215c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	1c5a      	adds	r2, r3, #1
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	601a      	str	r2, [r3, #0]
}
 801216e:	bf00      	nop
 8012170:	3714      	adds	r7, #20
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr

0801217a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801217a:	b480      	push	{r7}
 801217c:	b085      	sub	sp, #20
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
 8012182:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012190:	d103      	bne.n	801219a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	691b      	ldr	r3, [r3, #16]
 8012196:	60fb      	str	r3, [r7, #12]
 8012198:	e00c      	b.n	80121b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	3308      	adds	r3, #8
 801219e:	60fb      	str	r3, [r7, #12]
 80121a0:	e002      	b.n	80121a8 <vListInsert+0x2e>
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	60fb      	str	r3, [r7, #12]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	68ba      	ldr	r2, [r7, #8]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d2f6      	bcs.n	80121a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	685a      	ldr	r2, [r3, #4]
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	683a      	ldr	r2, [r7, #0]
 80121c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	683a      	ldr	r2, [r7, #0]
 80121ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	1c5a      	adds	r2, r3, #1
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	601a      	str	r2, [r3, #0]
}
 80121e0:	bf00      	nop
 80121e2:	3714      	adds	r7, #20
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr

080121ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80121ec:	b480      	push	{r7}
 80121ee:	b085      	sub	sp, #20
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	691b      	ldr	r3, [r3, #16]
 80121f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	6892      	ldr	r2, [r2, #8]
 8012202:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	6852      	ldr	r2, [r2, #4]
 801220c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	685b      	ldr	r3, [r3, #4]
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	429a      	cmp	r2, r3
 8012216:	d103      	bne.n	8012220 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	689a      	ldr	r2, [r3, #8]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	1e5a      	subs	r2, r3, #1
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3714      	adds	r7, #20
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d10a      	bne.n	801226a <xQueueGenericReset+0x2a>
	__asm volatile
 8012254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012258:	f383 8811 	msr	BASEPRI, r3
 801225c:	f3bf 8f6f 	isb	sy
 8012260:	f3bf 8f4f 	dsb	sy
 8012264:	60bb      	str	r3, [r7, #8]
}
 8012266:	bf00      	nop
 8012268:	e7fe      	b.n	8012268 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801226a:	f002 feb3 	bl	8014fd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012276:	68f9      	ldr	r1, [r7, #12]
 8012278:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801227a:	fb01 f303 	mul.w	r3, r1, r3
 801227e:	441a      	add	r2, r3
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2200      	movs	r2, #0
 8012288:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681a      	ldr	r2, [r3, #0]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	681a      	ldr	r2, [r3, #0]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801229a:	3b01      	subs	r3, #1
 801229c:	68f9      	ldr	r1, [r7, #12]
 801229e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80122a0:	fb01 f303 	mul.w	r3, r1, r3
 80122a4:	441a      	add	r2, r3
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	22ff      	movs	r2, #255	; 0xff
 80122ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	22ff      	movs	r2, #255	; 0xff
 80122b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d114      	bne.n	80122ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d01a      	beq.n	80122fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	3310      	adds	r3, #16
 80122cc:	4618      	mov	r0, r3
 80122ce:	f001 fdc3 	bl	8013e58 <xTaskRemoveFromEventList>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d012      	beq.n	80122fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80122d8:	4b0c      	ldr	r3, [pc, #48]	; (801230c <xQueueGenericReset+0xcc>)
 80122da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122de:	601a      	str	r2, [r3, #0]
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	e009      	b.n	80122fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	3310      	adds	r3, #16
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7ff fef2 	bl	80120d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	3324      	adds	r3, #36	; 0x24
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7ff feed 	bl	80120d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80122fe:	f002 fe99 	bl	8015034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012302:	2301      	movs	r3, #1
}
 8012304:	4618      	mov	r0, r3
 8012306:	3710      	adds	r7, #16
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	e000ed04 	.word	0xe000ed04

08012310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012310:	b580      	push	{r7, lr}
 8012312:	b08e      	sub	sp, #56	; 0x38
 8012314:	af02      	add	r7, sp, #8
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
 801231c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d10a      	bne.n	801233a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012328:	f383 8811 	msr	BASEPRI, r3
 801232c:	f3bf 8f6f 	isb	sy
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012336:	bf00      	nop
 8012338:	e7fe      	b.n	8012338 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d10a      	bne.n	8012356 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012344:	f383 8811 	msr	BASEPRI, r3
 8012348:	f3bf 8f6f 	isb	sy
 801234c:	f3bf 8f4f 	dsb	sy
 8012350:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012352:	bf00      	nop
 8012354:	e7fe      	b.n	8012354 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <xQueueGenericCreateStatic+0x52>
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d001      	beq.n	8012366 <xQueueGenericCreateStatic+0x56>
 8012362:	2301      	movs	r3, #1
 8012364:	e000      	b.n	8012368 <xQueueGenericCreateStatic+0x58>
 8012366:	2300      	movs	r3, #0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d10a      	bne.n	8012382 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012370:	f383 8811 	msr	BASEPRI, r3
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	f3bf 8f4f 	dsb	sy
 801237c:	623b      	str	r3, [r7, #32]
}
 801237e:	bf00      	nop
 8012380:	e7fe      	b.n	8012380 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d102      	bne.n	801238e <xQueueGenericCreateStatic+0x7e>
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d101      	bne.n	8012392 <xQueueGenericCreateStatic+0x82>
 801238e:	2301      	movs	r3, #1
 8012390:	e000      	b.n	8012394 <xQueueGenericCreateStatic+0x84>
 8012392:	2300      	movs	r3, #0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d10a      	bne.n	80123ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801239c:	f383 8811 	msr	BASEPRI, r3
 80123a0:	f3bf 8f6f 	isb	sy
 80123a4:	f3bf 8f4f 	dsb	sy
 80123a8:	61fb      	str	r3, [r7, #28]
}
 80123aa:	bf00      	nop
 80123ac:	e7fe      	b.n	80123ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80123ae:	2350      	movs	r3, #80	; 0x50
 80123b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	2b50      	cmp	r3, #80	; 0x50
 80123b6:	d00a      	beq.n	80123ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80123b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123bc:	f383 8811 	msr	BASEPRI, r3
 80123c0:	f3bf 8f6f 	isb	sy
 80123c4:	f3bf 8f4f 	dsb	sy
 80123c8:	61bb      	str	r3, [r7, #24]
}
 80123ca:	bf00      	nop
 80123cc:	e7fe      	b.n	80123cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80123ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80123d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d00d      	beq.n	80123f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80123da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123dc:	2201      	movs	r2, #1
 80123de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80123e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80123e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	4613      	mov	r3, r2
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	68b9      	ldr	r1, [r7, #8]
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f000 f83f 	bl	8012474 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80123f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3730      	adds	r7, #48	; 0x30
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012400:	b580      	push	{r7, lr}
 8012402:	b08a      	sub	sp, #40	; 0x28
 8012404:	af02      	add	r7, sp, #8
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	60b9      	str	r1, [r7, #8]
 801240a:	4613      	mov	r3, r2
 801240c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d10a      	bne.n	801242a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012418:	f383 8811 	msr	BASEPRI, r3
 801241c:	f3bf 8f6f 	isb	sy
 8012420:	f3bf 8f4f 	dsb	sy
 8012424:	613b      	str	r3, [r7, #16]
}
 8012426:	bf00      	nop
 8012428:	e7fe      	b.n	8012428 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	68ba      	ldr	r2, [r7, #8]
 801242e:	fb02 f303 	mul.w	r3, r2, r3
 8012432:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	3350      	adds	r3, #80	; 0x50
 8012438:	4618      	mov	r0, r3
 801243a:	f002 feed 	bl	8015218 <pvPortMalloc>
 801243e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d011      	beq.n	801246a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	3350      	adds	r3, #80	; 0x50
 801244e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	2200      	movs	r2, #0
 8012454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012458:	79fa      	ldrb	r2, [r7, #7]
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	9300      	str	r3, [sp, #0]
 801245e:	4613      	mov	r3, r2
 8012460:	697a      	ldr	r2, [r7, #20]
 8012462:	68b9      	ldr	r1, [r7, #8]
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f000 f805 	bl	8012474 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801246a:	69bb      	ldr	r3, [r7, #24]
	}
 801246c:	4618      	mov	r0, r3
 801246e:	3720      	adds	r7, #32
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
 8012480:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d103      	bne.n	8012490 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	69ba      	ldr	r2, [r7, #24]
 801248c:	601a      	str	r2, [r3, #0]
 801248e:	e002      	b.n	8012496 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80124a2:	2101      	movs	r1, #1
 80124a4:	69b8      	ldr	r0, [r7, #24]
 80124a6:	f7ff fecb 	bl	8012240 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80124aa:	69bb      	ldr	r3, [r7, #24]
 80124ac:	78fa      	ldrb	r2, [r7, #3]
 80124ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80124b2:	bf00      	nop
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b082      	sub	sp, #8
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00e      	beq.n	80124e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2200      	movs	r2, #0
 80124cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80124da:	2300      	movs	r3, #0
 80124dc:	2200      	movs	r2, #0
 80124de:	2100      	movs	r1, #0
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f000 f8a1 	bl	8012628 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80124e6:	bf00      	nop
 80124e8:	3708      	adds	r7, #8
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b086      	sub	sp, #24
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	4603      	mov	r3, r0
 80124f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80124f8:	2301      	movs	r3, #1
 80124fa:	617b      	str	r3, [r7, #20]
 80124fc:	2300      	movs	r3, #0
 80124fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012500:	79fb      	ldrb	r3, [r7, #7]
 8012502:	461a      	mov	r2, r3
 8012504:	6939      	ldr	r1, [r7, #16]
 8012506:	6978      	ldr	r0, [r7, #20]
 8012508:	f7ff ff7a 	bl	8012400 <xQueueGenericCreate>
 801250c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff ffd3 	bl	80124ba <prvInitialiseMutex>

		return xNewQueue;
 8012514:	68fb      	ldr	r3, [r7, #12]
	}
 8012516:	4618      	mov	r0, r3
 8012518:	3718      	adds	r7, #24
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}

0801251e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801251e:	b580      	push	{r7, lr}
 8012520:	b088      	sub	sp, #32
 8012522:	af02      	add	r7, sp, #8
 8012524:	4603      	mov	r3, r0
 8012526:	6039      	str	r1, [r7, #0]
 8012528:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801252a:	2301      	movs	r3, #1
 801252c:	617b      	str	r3, [r7, #20]
 801252e:	2300      	movs	r3, #0
 8012530:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012532:	79fb      	ldrb	r3, [r7, #7]
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	2200      	movs	r2, #0
 801253a:	6939      	ldr	r1, [r7, #16]
 801253c:	6978      	ldr	r0, [r7, #20]
 801253e:	f7ff fee7 	bl	8012310 <xQueueGenericCreateStatic>
 8012542:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	f7ff ffb8 	bl	80124ba <prvInitialiseMutex>

		return xNewQueue;
 801254a:	68fb      	ldr	r3, [r7, #12]
	}
 801254c:	4618      	mov	r0, r3
 801254e:	3718      	adds	r7, #24
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8012554:	b590      	push	{r4, r7, lr}
 8012556:	b087      	sub	sp, #28
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d10a      	bne.n	801257c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8012566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256a:	f383 8811 	msr	BASEPRI, r3
 801256e:	f3bf 8f6f 	isb	sy
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	60fb      	str	r3, [r7, #12]
}
 8012578:	bf00      	nop
 801257a:	e7fe      	b.n	801257a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	689c      	ldr	r4, [r3, #8]
 8012580:	f001 fe8a 	bl	8014298 <xTaskGetCurrentTaskHandle>
 8012584:	4603      	mov	r3, r0
 8012586:	429c      	cmp	r4, r3
 8012588:	d111      	bne.n	80125ae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	68db      	ldr	r3, [r3, #12]
 801258e:	1e5a      	subs	r2, r3, #1
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d105      	bne.n	80125a8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801259c:	2300      	movs	r3, #0
 801259e:	2200      	movs	r2, #0
 80125a0:	2100      	movs	r1, #0
 80125a2:	6938      	ldr	r0, [r7, #16]
 80125a4:	f000 f840 	bl	8012628 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80125a8:	2301      	movs	r3, #1
 80125aa:	617b      	str	r3, [r7, #20]
 80125ac:	e001      	b.n	80125b2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80125ae:	2300      	movs	r3, #0
 80125b0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80125b2:	697b      	ldr	r3, [r7, #20]
	}
 80125b4:	4618      	mov	r0, r3
 80125b6:	371c      	adds	r7, #28
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd90      	pop	{r4, r7, pc}

080125bc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80125bc:	b590      	push	{r4, r7, lr}
 80125be:	b087      	sub	sp, #28
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d10a      	bne.n	80125e6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80125d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d4:	f383 8811 	msr	BASEPRI, r3
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	60fb      	str	r3, [r7, #12]
}
 80125e2:	bf00      	nop
 80125e4:	e7fe      	b.n	80125e4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	689c      	ldr	r4, [r3, #8]
 80125ea:	f001 fe55 	bl	8014298 <xTaskGetCurrentTaskHandle>
 80125ee:	4603      	mov	r3, r0
 80125f0:	429c      	cmp	r4, r3
 80125f2:	d107      	bne.n	8012604 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	68db      	ldr	r3, [r3, #12]
 80125f8:	1c5a      	adds	r2, r3, #1
 80125fa:	693b      	ldr	r3, [r7, #16]
 80125fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80125fe:	2301      	movs	r3, #1
 8012600:	617b      	str	r3, [r7, #20]
 8012602:	e00c      	b.n	801261e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8012604:	6839      	ldr	r1, [r7, #0]
 8012606:	6938      	ldr	r0, [r7, #16]
 8012608:	f000 fa88 	bl	8012b1c <xQueueSemaphoreTake>
 801260c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d004      	beq.n	801261e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	1c5a      	adds	r2, r3, #1
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801261e:	697b      	ldr	r3, [r7, #20]
	}
 8012620:	4618      	mov	r0, r3
 8012622:	371c      	adds	r7, #28
 8012624:	46bd      	mov	sp, r7
 8012626:	bd90      	pop	{r4, r7, pc}

08012628 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b08e      	sub	sp, #56	; 0x38
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
 8012634:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012636:	2300      	movs	r3, #0
 8012638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012640:	2b00      	cmp	r3, #0
 8012642:	d10a      	bne.n	801265a <xQueueGenericSend+0x32>
	__asm volatile
 8012644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012648:	f383 8811 	msr	BASEPRI, r3
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012656:	bf00      	nop
 8012658:	e7fe      	b.n	8012658 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d103      	bne.n	8012668 <xQueueGenericSend+0x40>
 8012660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012664:	2b00      	cmp	r3, #0
 8012666:	d101      	bne.n	801266c <xQueueGenericSend+0x44>
 8012668:	2301      	movs	r3, #1
 801266a:	e000      	b.n	801266e <xQueueGenericSend+0x46>
 801266c:	2300      	movs	r3, #0
 801266e:	2b00      	cmp	r3, #0
 8012670:	d10a      	bne.n	8012688 <xQueueGenericSend+0x60>
	__asm volatile
 8012672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012676:	f383 8811 	msr	BASEPRI, r3
 801267a:	f3bf 8f6f 	isb	sy
 801267e:	f3bf 8f4f 	dsb	sy
 8012682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012684:	bf00      	nop
 8012686:	e7fe      	b.n	8012686 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b02      	cmp	r3, #2
 801268c:	d103      	bne.n	8012696 <xQueueGenericSend+0x6e>
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012692:	2b01      	cmp	r3, #1
 8012694:	d101      	bne.n	801269a <xQueueGenericSend+0x72>
 8012696:	2301      	movs	r3, #1
 8012698:	e000      	b.n	801269c <xQueueGenericSend+0x74>
 801269a:	2300      	movs	r3, #0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d10a      	bne.n	80126b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80126a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a4:	f383 8811 	msr	BASEPRI, r3
 80126a8:	f3bf 8f6f 	isb	sy
 80126ac:	f3bf 8f4f 	dsb	sy
 80126b0:	623b      	str	r3, [r7, #32]
}
 80126b2:	bf00      	nop
 80126b4:	e7fe      	b.n	80126b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126b6:	f001 fdff 	bl	80142b8 <xTaskGetSchedulerState>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d102      	bne.n	80126c6 <xQueueGenericSend+0x9e>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d101      	bne.n	80126ca <xQueueGenericSend+0xa2>
 80126c6:	2301      	movs	r3, #1
 80126c8:	e000      	b.n	80126cc <xQueueGenericSend+0xa4>
 80126ca:	2300      	movs	r3, #0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d10a      	bne.n	80126e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80126d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d4:	f383 8811 	msr	BASEPRI, r3
 80126d8:	f3bf 8f6f 	isb	sy
 80126dc:	f3bf 8f4f 	dsb	sy
 80126e0:	61fb      	str	r3, [r7, #28]
}
 80126e2:	bf00      	nop
 80126e4:	e7fe      	b.n	80126e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126e6:	f002 fc75 	bl	8014fd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d302      	bcc.n	80126fc <xQueueGenericSend+0xd4>
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	2b02      	cmp	r3, #2
 80126fa:	d129      	bne.n	8012750 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126fc:	683a      	ldr	r2, [r7, #0]
 80126fe:	68b9      	ldr	r1, [r7, #8]
 8012700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012702:	f000 fbaf 	bl	8012e64 <prvCopyDataToQueue>
 8012706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801270c:	2b00      	cmp	r3, #0
 801270e:	d010      	beq.n	8012732 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012712:	3324      	adds	r3, #36	; 0x24
 8012714:	4618      	mov	r0, r3
 8012716:	f001 fb9f 	bl	8013e58 <xTaskRemoveFromEventList>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d013      	beq.n	8012748 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012720:	4b3f      	ldr	r3, [pc, #252]	; (8012820 <xQueueGenericSend+0x1f8>)
 8012722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012726:	601a      	str	r2, [r3, #0]
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	f3bf 8f6f 	isb	sy
 8012730:	e00a      	b.n	8012748 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012734:	2b00      	cmp	r3, #0
 8012736:	d007      	beq.n	8012748 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012738:	4b39      	ldr	r3, [pc, #228]	; (8012820 <xQueueGenericSend+0x1f8>)
 801273a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801273e:	601a      	str	r2, [r3, #0]
 8012740:	f3bf 8f4f 	dsb	sy
 8012744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012748:	f002 fc74 	bl	8015034 <vPortExitCritical>
				return pdPASS;
 801274c:	2301      	movs	r3, #1
 801274e:	e063      	b.n	8012818 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d103      	bne.n	801275e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012756:	f002 fc6d 	bl	8015034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801275a:	2300      	movs	r3, #0
 801275c:	e05c      	b.n	8012818 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012760:	2b00      	cmp	r3, #0
 8012762:	d106      	bne.n	8012772 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012764:	f107 0314 	add.w	r3, r7, #20
 8012768:	4618      	mov	r0, r3
 801276a:	f001 fc3b 	bl	8013fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801276e:	2301      	movs	r3, #1
 8012770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012772:	f002 fc5f 	bl	8015034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012776:	f001 f8fd 	bl	8013974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801277a:	f002 fc2b 	bl	8014fd4 <vPortEnterCritical>
 801277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012784:	b25b      	sxtb	r3, r3
 8012786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801278a:	d103      	bne.n	8012794 <xQueueGenericSend+0x16c>
 801278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278e:	2200      	movs	r2, #0
 8012790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801279a:	b25b      	sxtb	r3, r3
 801279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a0:	d103      	bne.n	80127aa <xQueueGenericSend+0x182>
 80127a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a4:	2200      	movs	r2, #0
 80127a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127aa:	f002 fc43 	bl	8015034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127ae:	1d3a      	adds	r2, r7, #4
 80127b0:	f107 0314 	add.w	r3, r7, #20
 80127b4:	4611      	mov	r1, r2
 80127b6:	4618      	mov	r0, r3
 80127b8:	f001 fc2a 	bl	8014010 <xTaskCheckForTimeOut>
 80127bc:	4603      	mov	r3, r0
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d124      	bne.n	801280c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80127c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127c4:	f000 fc46 	bl	8013054 <prvIsQueueFull>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d018      	beq.n	8012800 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80127ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d0:	3310      	adds	r3, #16
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	4611      	mov	r1, r2
 80127d6:	4618      	mov	r0, r3
 80127d8:	f001 fab2 	bl	8013d40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80127dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127de:	f000 fbd1 	bl	8012f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80127e2:	f001 f8d5 	bl	8013990 <xTaskResumeAll>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f47f af7c 	bne.w	80126e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80127ee:	4b0c      	ldr	r3, [pc, #48]	; (8012820 <xQueueGenericSend+0x1f8>)
 80127f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127f4:	601a      	str	r2, [r3, #0]
 80127f6:	f3bf 8f4f 	dsb	sy
 80127fa:	f3bf 8f6f 	isb	sy
 80127fe:	e772      	b.n	80126e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012802:	f000 fbbf 	bl	8012f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012806:	f001 f8c3 	bl	8013990 <xTaskResumeAll>
 801280a:	e76c      	b.n	80126e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801280c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801280e:	f000 fbb9 	bl	8012f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012812:	f001 f8bd 	bl	8013990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012818:	4618      	mov	r0, r3
 801281a:	3738      	adds	r7, #56	; 0x38
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}
 8012820:	e000ed04 	.word	0xe000ed04

08012824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b090      	sub	sp, #64	; 0x40
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
 8012830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10a      	bne.n	8012852 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012840:	f383 8811 	msr	BASEPRI, r3
 8012844:	f3bf 8f6f 	isb	sy
 8012848:	f3bf 8f4f 	dsb	sy
 801284c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801284e:	bf00      	nop
 8012850:	e7fe      	b.n	8012850 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d103      	bne.n	8012860 <xQueueGenericSendFromISR+0x3c>
 8012858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <xQueueGenericSendFromISR+0x40>
 8012860:	2301      	movs	r3, #1
 8012862:	e000      	b.n	8012866 <xQueueGenericSendFromISR+0x42>
 8012864:	2300      	movs	r3, #0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d10a      	bne.n	8012880 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286e:	f383 8811 	msr	BASEPRI, r3
 8012872:	f3bf 8f6f 	isb	sy
 8012876:	f3bf 8f4f 	dsb	sy
 801287a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801287c:	bf00      	nop
 801287e:	e7fe      	b.n	801287e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	2b02      	cmp	r3, #2
 8012884:	d103      	bne.n	801288e <xQueueGenericSendFromISR+0x6a>
 8012886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801288a:	2b01      	cmp	r3, #1
 801288c:	d101      	bne.n	8012892 <xQueueGenericSendFromISR+0x6e>
 801288e:	2301      	movs	r3, #1
 8012890:	e000      	b.n	8012894 <xQueueGenericSendFromISR+0x70>
 8012892:	2300      	movs	r3, #0
 8012894:	2b00      	cmp	r3, #0
 8012896:	d10a      	bne.n	80128ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289c:	f383 8811 	msr	BASEPRI, r3
 80128a0:	f3bf 8f6f 	isb	sy
 80128a4:	f3bf 8f4f 	dsb	sy
 80128a8:	623b      	str	r3, [r7, #32]
}
 80128aa:	bf00      	nop
 80128ac:	e7fe      	b.n	80128ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128ae:	f002 fc73 	bl	8015198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80128b2:	f3ef 8211 	mrs	r2, BASEPRI
 80128b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ba:	f383 8811 	msr	BASEPRI, r3
 80128be:	f3bf 8f6f 	isb	sy
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	61fa      	str	r2, [r7, #28]
 80128c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80128ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80128ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d302      	bcc.n	80128e0 <xQueueGenericSendFromISR+0xbc>
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	2b02      	cmp	r3, #2
 80128de:	d12f      	bne.n	8012940 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80128e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80128f0:	683a      	ldr	r2, [r7, #0]
 80128f2:	68b9      	ldr	r1, [r7, #8]
 80128f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128f6:	f000 fab5 	bl	8012e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80128fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80128fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012902:	d112      	bne.n	801292a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	2b00      	cmp	r3, #0
 801290a:	d016      	beq.n	801293a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290e:	3324      	adds	r3, #36	; 0x24
 8012910:	4618      	mov	r0, r3
 8012912:	f001 faa1 	bl	8013e58 <xTaskRemoveFromEventList>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	d00e      	beq.n	801293a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d00b      	beq.n	801293a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2201      	movs	r2, #1
 8012926:	601a      	str	r2, [r3, #0]
 8012928:	e007      	b.n	801293a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801292a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801292e:	3301      	adds	r3, #1
 8012930:	b2db      	uxtb	r3, r3
 8012932:	b25a      	sxtb	r2, r3
 8012934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801293a:	2301      	movs	r3, #1
 801293c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801293e:	e001      	b.n	8012944 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012940:	2300      	movs	r3, #0
 8012942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012946:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801294e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012952:	4618      	mov	r0, r3
 8012954:	3740      	adds	r7, #64	; 0x40
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
	...

0801295c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b08c      	sub	sp, #48	; 0x30
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012968:	2300      	movs	r3, #0
 801296a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012972:	2b00      	cmp	r3, #0
 8012974:	d10a      	bne.n	801298c <xQueueReceive+0x30>
	__asm volatile
 8012976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	623b      	str	r3, [r7, #32]
}
 8012988:	bf00      	nop
 801298a:	e7fe      	b.n	801298a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d103      	bne.n	801299a <xQueueReceive+0x3e>
 8012992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012996:	2b00      	cmp	r3, #0
 8012998:	d101      	bne.n	801299e <xQueueReceive+0x42>
 801299a:	2301      	movs	r3, #1
 801299c:	e000      	b.n	80129a0 <xQueueReceive+0x44>
 801299e:	2300      	movs	r3, #0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d10a      	bne.n	80129ba <xQueueReceive+0x5e>
	__asm volatile
 80129a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a8:	f383 8811 	msr	BASEPRI, r3
 80129ac:	f3bf 8f6f 	isb	sy
 80129b0:	f3bf 8f4f 	dsb	sy
 80129b4:	61fb      	str	r3, [r7, #28]
}
 80129b6:	bf00      	nop
 80129b8:	e7fe      	b.n	80129b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129ba:	f001 fc7d 	bl	80142b8 <xTaskGetSchedulerState>
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d102      	bne.n	80129ca <xQueueReceive+0x6e>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d101      	bne.n	80129ce <xQueueReceive+0x72>
 80129ca:	2301      	movs	r3, #1
 80129cc:	e000      	b.n	80129d0 <xQueueReceive+0x74>
 80129ce:	2300      	movs	r3, #0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d10a      	bne.n	80129ea <xQueueReceive+0x8e>
	__asm volatile
 80129d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d8:	f383 8811 	msr	BASEPRI, r3
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	61bb      	str	r3, [r7, #24]
}
 80129e6:	bf00      	nop
 80129e8:	e7fe      	b.n	80129e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80129ea:	f002 faf3 	bl	8014fd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80129ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80129f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d01f      	beq.n	8012a3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80129fa:	68b9      	ldr	r1, [r7, #8]
 80129fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129fe:	f000 fa9b 	bl	8012f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a04:	1e5a      	subs	r2, r3, #1
 8012a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0c:	691b      	ldr	r3, [r3, #16]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d00f      	beq.n	8012a32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a14:	3310      	adds	r3, #16
 8012a16:	4618      	mov	r0, r3
 8012a18:	f001 fa1e 	bl	8013e58 <xTaskRemoveFromEventList>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d007      	beq.n	8012a32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012a22:	4b3d      	ldr	r3, [pc, #244]	; (8012b18 <xQueueReceive+0x1bc>)
 8012a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a28:	601a      	str	r2, [r3, #0]
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012a32:	f002 faff 	bl	8015034 <vPortExitCritical>
				return pdPASS;
 8012a36:	2301      	movs	r3, #1
 8012a38:	e069      	b.n	8012b0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d103      	bne.n	8012a48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012a40:	f002 faf8 	bl	8015034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a44:	2300      	movs	r3, #0
 8012a46:	e062      	b.n	8012b0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d106      	bne.n	8012a5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a4e:	f107 0310 	add.w	r3, r7, #16
 8012a52:	4618      	mov	r0, r3
 8012a54:	f001 fac6 	bl	8013fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a5c:	f002 faea 	bl	8015034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a60:	f000 ff88 	bl	8013974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a64:	f002 fab6 	bl	8014fd4 <vPortEnterCritical>
 8012a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a6e:	b25b      	sxtb	r3, r3
 8012a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a74:	d103      	bne.n	8012a7e <xQueueReceive+0x122>
 8012a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a84:	b25b      	sxtb	r3, r3
 8012a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a8a:	d103      	bne.n	8012a94 <xQueueReceive+0x138>
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a94:	f002 face 	bl	8015034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a98:	1d3a      	adds	r2, r7, #4
 8012a9a:	f107 0310 	add.w	r3, r7, #16
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f001 fab5 	bl	8014010 <xTaskCheckForTimeOut>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d123      	bne.n	8012af4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aae:	f000 fabb 	bl	8013028 <prvIsQueueEmpty>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d017      	beq.n	8012ae8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aba:	3324      	adds	r3, #36	; 0x24
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f001 f93d 	bl	8013d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ac8:	f000 fa5c 	bl	8012f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012acc:	f000 ff60 	bl	8013990 <xTaskResumeAll>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d189      	bne.n	80129ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012ad6:	4b10      	ldr	r3, [pc, #64]	; (8012b18 <xQueueReceive+0x1bc>)
 8012ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	f3bf 8f4f 	dsb	sy
 8012ae2:	f3bf 8f6f 	isb	sy
 8012ae6:	e780      	b.n	80129ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aea:	f000 fa4b 	bl	8012f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012aee:	f000 ff4f 	bl	8013990 <xTaskResumeAll>
 8012af2:	e77a      	b.n	80129ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012af6:	f000 fa45 	bl	8012f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012afa:	f000 ff49 	bl	8013990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b00:	f000 fa92 	bl	8013028 <prvIsQueueEmpty>
 8012b04:	4603      	mov	r3, r0
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f43f af6f 	beq.w	80129ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3730      	adds	r7, #48	; 0x30
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	e000ed04 	.word	0xe000ed04

08012b1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08e      	sub	sp, #56	; 0x38
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012b26:	2300      	movs	r3, #0
 8012b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d10a      	bne.n	8012b4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3c:	f383 8811 	msr	BASEPRI, r3
 8012b40:	f3bf 8f6f 	isb	sy
 8012b44:	f3bf 8f4f 	dsb	sy
 8012b48:	623b      	str	r3, [r7, #32]
}
 8012b4a:	bf00      	nop
 8012b4c:	e7fe      	b.n	8012b4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d00a      	beq.n	8012b6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b5a:	f383 8811 	msr	BASEPRI, r3
 8012b5e:	f3bf 8f6f 	isb	sy
 8012b62:	f3bf 8f4f 	dsb	sy
 8012b66:	61fb      	str	r3, [r7, #28]
}
 8012b68:	bf00      	nop
 8012b6a:	e7fe      	b.n	8012b6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b6c:	f001 fba4 	bl	80142b8 <xTaskGetSchedulerState>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d102      	bne.n	8012b7c <xQueueSemaphoreTake+0x60>
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d101      	bne.n	8012b80 <xQueueSemaphoreTake+0x64>
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	e000      	b.n	8012b82 <xQueueSemaphoreTake+0x66>
 8012b80:	2300      	movs	r3, #0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d10a      	bne.n	8012b9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b8a:	f383 8811 	msr	BASEPRI, r3
 8012b8e:	f3bf 8f6f 	isb	sy
 8012b92:	f3bf 8f4f 	dsb	sy
 8012b96:	61bb      	str	r3, [r7, #24]
}
 8012b98:	bf00      	nop
 8012b9a:	e7fe      	b.n	8012b9a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b9c:	f002 fa1a 	bl	8014fd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ba4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d024      	beq.n	8012bf6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bae:	1e5a      	subs	r2, r3, #1
 8012bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d104      	bne.n	8012bc6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012bbc:	f001 fd0a 	bl	80145d4 <pvTaskIncrementMutexHeldCount>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc8:	691b      	ldr	r3, [r3, #16]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00f      	beq.n	8012bee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd0:	3310      	adds	r3, #16
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f001 f940 	bl	8013e58 <xTaskRemoveFromEventList>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d007      	beq.n	8012bee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012bde:	4b54      	ldr	r3, [pc, #336]	; (8012d30 <xQueueSemaphoreTake+0x214>)
 8012be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012be4:	601a      	str	r2, [r3, #0]
 8012be6:	f3bf 8f4f 	dsb	sy
 8012bea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012bee:	f002 fa21 	bl	8015034 <vPortExitCritical>
				return pdPASS;
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	e097      	b.n	8012d26 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d111      	bne.n	8012c20 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d00a      	beq.n	8012c18 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c06:	f383 8811 	msr	BASEPRI, r3
 8012c0a:	f3bf 8f6f 	isb	sy
 8012c0e:	f3bf 8f4f 	dsb	sy
 8012c12:	617b      	str	r3, [r7, #20]
}
 8012c14:	bf00      	nop
 8012c16:	e7fe      	b.n	8012c16 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012c18:	f002 fa0c 	bl	8015034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	e082      	b.n	8012d26 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d106      	bne.n	8012c34 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c26:	f107 030c 	add.w	r3, r7, #12
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f001 f9da 	bl	8013fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c30:	2301      	movs	r3, #1
 8012c32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c34:	f002 f9fe 	bl	8015034 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c38:	f000 fe9c 	bl	8013974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c3c:	f002 f9ca 	bl	8014fd4 <vPortEnterCritical>
 8012c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c46:	b25b      	sxtb	r3, r3
 8012c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c4c:	d103      	bne.n	8012c56 <xQueueSemaphoreTake+0x13a>
 8012c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c50:	2200      	movs	r2, #0
 8012c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c5c:	b25b      	sxtb	r3, r3
 8012c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c62:	d103      	bne.n	8012c6c <xQueueSemaphoreTake+0x150>
 8012c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c66:	2200      	movs	r2, #0
 8012c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c6c:	f002 f9e2 	bl	8015034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c70:	463a      	mov	r2, r7
 8012c72:	f107 030c 	add.w	r3, r7, #12
 8012c76:	4611      	mov	r1, r2
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f001 f9c9 	bl	8014010 <xTaskCheckForTimeOut>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d132      	bne.n	8012cea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c86:	f000 f9cf 	bl	8013028 <prvIsQueueEmpty>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d026      	beq.n	8012cde <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d109      	bne.n	8012cac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012c98:	f002 f99c 	bl	8014fd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9e:	689b      	ldr	r3, [r3, #8]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f001 fb27 	bl	80142f4 <xTaskPriorityInherit>
 8012ca6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012ca8:	f002 f9c4 	bl	8015034 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cae:	3324      	adds	r3, #36	; 0x24
 8012cb0:	683a      	ldr	r2, [r7, #0]
 8012cb2:	4611      	mov	r1, r2
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f001 f843 	bl	8013d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cbc:	f000 f962 	bl	8012f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012cc0:	f000 fe66 	bl	8013990 <xTaskResumeAll>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f47f af68 	bne.w	8012b9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012ccc:	4b18      	ldr	r3, [pc, #96]	; (8012d30 <xQueueSemaphoreTake+0x214>)
 8012cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cd2:	601a      	str	r2, [r3, #0]
 8012cd4:	f3bf 8f4f 	dsb	sy
 8012cd8:	f3bf 8f6f 	isb	sy
 8012cdc:	e75e      	b.n	8012b9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ce0:	f000 f950 	bl	8012f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012ce4:	f000 fe54 	bl	8013990 <xTaskResumeAll>
 8012ce8:	e758      	b.n	8012b9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cec:	f000 f94a 	bl	8012f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012cf0:	f000 fe4e 	bl	8013990 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cf6:	f000 f997 	bl	8013028 <prvIsQueueEmpty>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	f43f af4d 	beq.w	8012b9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d00d      	beq.n	8012d24 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012d08:	f002 f964 	bl	8014fd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d0e:	f000 f891 	bl	8012e34 <prvGetDisinheritPriorityAfterTimeout>
 8012d12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f001 fbc0 	bl	80144a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012d20:	f002 f988 	bl	8015034 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3738      	adds	r7, #56	; 0x38
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	e000ed04 	.word	0xe000ed04

08012d34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b08e      	sub	sp, #56	; 0x38
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d10a      	bne.n	8012d60 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4e:	f383 8811 	msr	BASEPRI, r3
 8012d52:	f3bf 8f6f 	isb	sy
 8012d56:	f3bf 8f4f 	dsb	sy
 8012d5a:	623b      	str	r3, [r7, #32]
}
 8012d5c:	bf00      	nop
 8012d5e:	e7fe      	b.n	8012d5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d103      	bne.n	8012d6e <xQueueReceiveFromISR+0x3a>
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d101      	bne.n	8012d72 <xQueueReceiveFromISR+0x3e>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e000      	b.n	8012d74 <xQueueReceiveFromISR+0x40>
 8012d72:	2300      	movs	r3, #0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d10a      	bne.n	8012d8e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d7c:	f383 8811 	msr	BASEPRI, r3
 8012d80:	f3bf 8f6f 	isb	sy
 8012d84:	f3bf 8f4f 	dsb	sy
 8012d88:	61fb      	str	r3, [r7, #28]
}
 8012d8a:	bf00      	nop
 8012d8c:	e7fe      	b.n	8012d8c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d8e:	f002 fa03 	bl	8015198 <vPortValidateInterruptPriority>
	__asm volatile
 8012d92:	f3ef 8211 	mrs	r2, BASEPRI
 8012d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9a:	f383 8811 	msr	BASEPRI, r3
 8012d9e:	f3bf 8f6f 	isb	sy
 8012da2:	f3bf 8f4f 	dsb	sy
 8012da6:	61ba      	str	r2, [r7, #24]
 8012da8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012daa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012db2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d02f      	beq.n	8012e1a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012dc4:	68b9      	ldr	r1, [r7, #8]
 8012dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dc8:	f000 f8b6 	bl	8012f38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dce:	1e5a      	subs	r2, r3, #1
 8012dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012dd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ddc:	d112      	bne.n	8012e04 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de0:	691b      	ldr	r3, [r3, #16]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d016      	beq.n	8012e14 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de8:	3310      	adds	r3, #16
 8012dea:	4618      	mov	r0, r3
 8012dec:	f001 f834 	bl	8013e58 <xTaskRemoveFromEventList>
 8012df0:	4603      	mov	r3, r0
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d00e      	beq.n	8012e14 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d00b      	beq.n	8012e14 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	601a      	str	r2, [r3, #0]
 8012e02:	e007      	b.n	8012e14 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e08:	3301      	adds	r3, #1
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	b25a      	sxtb	r2, r3
 8012e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012e14:	2301      	movs	r3, #1
 8012e16:	637b      	str	r3, [r7, #52]	; 0x34
 8012e18:	e001      	b.n	8012e1e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8012e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	f383 8811 	msr	BASEPRI, r3
}
 8012e28:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3738      	adds	r7, #56	; 0x38
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d006      	beq.n	8012e52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012e4e:	60fb      	str	r3, [r7, #12]
 8012e50:	e001      	b.n	8012e56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012e52:	2300      	movs	r3, #0
 8012e54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012e56:	68fb      	ldr	r3, [r7, #12]
	}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3714      	adds	r7, #20
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b086      	sub	sp, #24
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012e70:	2300      	movs	r3, #0
 8012e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d10d      	bne.n	8012e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d14d      	bne.n	8012f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	689b      	ldr	r3, [r3, #8]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f001 fa98 	bl	80143c4 <xTaskPriorityDisinherit>
 8012e94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	609a      	str	r2, [r3, #8]
 8012e9c:	e043      	b.n	8012f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d119      	bne.n	8012ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6858      	ldr	r0, [r3, #4]
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eac:	461a      	mov	r2, r3
 8012eae:	68b9      	ldr	r1, [r7, #8]
 8012eb0:	f003 fa73 	bl	801639a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	685a      	ldr	r2, [r3, #4]
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ebc:	441a      	add	r2, r3
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	685a      	ldr	r2, [r3, #4]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	689b      	ldr	r3, [r3, #8]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d32b      	bcc.n	8012f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	605a      	str	r2, [r3, #4]
 8012ed6:	e026      	b.n	8012f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	68d8      	ldr	r0, [r3, #12]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee0:	461a      	mov	r2, r3
 8012ee2:	68b9      	ldr	r1, [r7, #8]
 8012ee4:	f003 fa59 	bl	801639a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	68da      	ldr	r2, [r3, #12]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef0:	425b      	negs	r3, r3
 8012ef2:	441a      	add	r2, r3
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	68da      	ldr	r2, [r3, #12]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d207      	bcs.n	8012f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	689a      	ldr	r2, [r3, #8]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f0c:	425b      	negs	r3, r3
 8012f0e:	441a      	add	r2, r3
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2b02      	cmp	r3, #2
 8012f18:	d105      	bne.n	8012f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d002      	beq.n	8012f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	3b01      	subs	r3, #1
 8012f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	1c5a      	adds	r2, r3, #1
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012f2e:	697b      	ldr	r3, [r7, #20]
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3718      	adds	r7, #24
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d018      	beq.n	8012f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	68da      	ldr	r2, [r3, #12]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f52:	441a      	add	r2, r3
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	68da      	ldr	r2, [r3, #12]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	689b      	ldr	r3, [r3, #8]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d303      	bcc.n	8012f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	68d9      	ldr	r1, [r3, #12]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f74:	461a      	mov	r2, r3
 8012f76:	6838      	ldr	r0, [r7, #0]
 8012f78:	f003 fa0f 	bl	801639a <memcpy>
	}
}
 8012f7c:	bf00      	nop
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012f8c:	f002 f822 	bl	8014fd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f98:	e011      	b.n	8012fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d012      	beq.n	8012fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	3324      	adds	r3, #36	; 0x24
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f000 ff56 	bl	8013e58 <xTaskRemoveFromEventList>
 8012fac:	4603      	mov	r3, r0
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d001      	beq.n	8012fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012fb2:	f001 f88f 	bl	80140d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012fb6:	7bfb      	ldrb	r3, [r7, #15]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	dce9      	bgt.n	8012f9a <prvUnlockQueue+0x16>
 8012fc6:	e000      	b.n	8012fca <prvUnlockQueue+0x46>
					break;
 8012fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	22ff      	movs	r2, #255	; 0xff
 8012fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012fd2:	f002 f82f 	bl	8015034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012fd6:	f001 fffd 	bl	8014fd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012fe2:	e011      	b.n	8013008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	691b      	ldr	r3, [r3, #16]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d012      	beq.n	8013012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	3310      	adds	r3, #16
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f000 ff31 	bl	8013e58 <xTaskRemoveFromEventList>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d001      	beq.n	8013000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012ffc:	f001 f86a 	bl	80140d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013000:	7bbb      	ldrb	r3, [r7, #14]
 8013002:	3b01      	subs	r3, #1
 8013004:	b2db      	uxtb	r3, r3
 8013006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801300c:	2b00      	cmp	r3, #0
 801300e:	dce9      	bgt.n	8012fe4 <prvUnlockQueue+0x60>
 8013010:	e000      	b.n	8013014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	22ff      	movs	r2, #255	; 0xff
 8013018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801301c:	f002 f80a 	bl	8015034 <vPortExitCritical>
}
 8013020:	bf00      	nop
 8013022:	3710      	adds	r7, #16
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013030:	f001 ffd0 	bl	8014fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013038:	2b00      	cmp	r3, #0
 801303a:	d102      	bne.n	8013042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801303c:	2301      	movs	r3, #1
 801303e:	60fb      	str	r3, [r7, #12]
 8013040:	e001      	b.n	8013046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013042:	2300      	movs	r3, #0
 8013044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013046:	f001 fff5 	bl	8015034 <vPortExitCritical>

	return xReturn;
 801304a:	68fb      	ldr	r3, [r7, #12]
}
 801304c:	4618      	mov	r0, r3
 801304e:	3710      	adds	r7, #16
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801305c:	f001 ffba 	bl	8014fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013068:	429a      	cmp	r2, r3
 801306a:	d102      	bne.n	8013072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801306c:	2301      	movs	r3, #1
 801306e:	60fb      	str	r3, [r7, #12]
 8013070:	e001      	b.n	8013076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013072:	2300      	movs	r3, #0
 8013074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013076:	f001 ffdd 	bl	8015034 <vPortExitCritical>

	return xReturn;
 801307a:	68fb      	ldr	r3, [r7, #12]
}
 801307c:	4618      	mov	r0, r3
 801307e:	3710      	adds	r7, #16
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013084:	b480      	push	{r7}
 8013086:	b085      	sub	sp, #20
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801308e:	2300      	movs	r3, #0
 8013090:	60fb      	str	r3, [r7, #12]
 8013092:	e014      	b.n	80130be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013094:	4a0f      	ldr	r2, [pc, #60]	; (80130d4 <vQueueAddToRegistry+0x50>)
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d10b      	bne.n	80130b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80130a0:	490c      	ldr	r1, [pc, #48]	; (80130d4 <vQueueAddToRegistry+0x50>)
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	683a      	ldr	r2, [r7, #0]
 80130a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80130aa:	4a0a      	ldr	r2, [pc, #40]	; (80130d4 <vQueueAddToRegistry+0x50>)
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	00db      	lsls	r3, r3, #3
 80130b0:	4413      	add	r3, r2
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80130b6:	e006      	b.n	80130c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	3301      	adds	r3, #1
 80130bc:	60fb      	str	r3, [r7, #12]
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2b07      	cmp	r3, #7
 80130c2:	d9e7      	bls.n	8013094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80130c4:	bf00      	nop
 80130c6:	bf00      	nop
 80130c8:	3714      	adds	r7, #20
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop
 80130d4:	20000d6c 	.word	0x20000d6c

080130d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80130e8:	f001 ff74 	bl	8014fd4 <vPortEnterCritical>
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130f2:	b25b      	sxtb	r3, r3
 80130f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130f8:	d103      	bne.n	8013102 <vQueueWaitForMessageRestricted+0x2a>
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	2200      	movs	r2, #0
 80130fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013108:	b25b      	sxtb	r3, r3
 801310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801310e:	d103      	bne.n	8013118 <vQueueWaitForMessageRestricted+0x40>
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2200      	movs	r2, #0
 8013114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013118:	f001 ff8c 	bl	8015034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013120:	2b00      	cmp	r3, #0
 8013122:	d106      	bne.n	8013132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	3324      	adds	r3, #36	; 0x24
 8013128:	687a      	ldr	r2, [r7, #4]
 801312a:	68b9      	ldr	r1, [r7, #8]
 801312c:	4618      	mov	r0, r3
 801312e:	f000 fe67 	bl	8013e00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013132:	6978      	ldr	r0, [r7, #20]
 8013134:	f7ff ff26 	bl	8012f84 <prvUnlockQueue>
	}
 8013138:	bf00      	nop
 801313a:	3718      	adds	r7, #24
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}

08013140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013140:	b580      	push	{r7, lr}
 8013142:	b08e      	sub	sp, #56	; 0x38
 8013144:	af04      	add	r7, sp, #16
 8013146:	60f8      	str	r0, [r7, #12]
 8013148:	60b9      	str	r1, [r7, #8]
 801314a:	607a      	str	r2, [r7, #4]
 801314c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013150:	2b00      	cmp	r3, #0
 8013152:	d10a      	bne.n	801316a <xTaskCreateStatic+0x2a>
	__asm volatile
 8013154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013158:	f383 8811 	msr	BASEPRI, r3
 801315c:	f3bf 8f6f 	isb	sy
 8013160:	f3bf 8f4f 	dsb	sy
 8013164:	623b      	str	r3, [r7, #32]
}
 8013166:	bf00      	nop
 8013168:	e7fe      	b.n	8013168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316c:	2b00      	cmp	r3, #0
 801316e:	d10a      	bne.n	8013186 <xTaskCreateStatic+0x46>
	__asm volatile
 8013170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013174:	f383 8811 	msr	BASEPRI, r3
 8013178:	f3bf 8f6f 	isb	sy
 801317c:	f3bf 8f4f 	dsb	sy
 8013180:	61fb      	str	r3, [r7, #28]
}
 8013182:	bf00      	nop
 8013184:	e7fe      	b.n	8013184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013186:	235c      	movs	r3, #92	; 0x5c
 8013188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	2b5c      	cmp	r3, #92	; 0x5c
 801318e:	d00a      	beq.n	80131a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8013190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013194:	f383 8811 	msr	BASEPRI, r3
 8013198:	f3bf 8f6f 	isb	sy
 801319c:	f3bf 8f4f 	dsb	sy
 80131a0:	61bb      	str	r3, [r7, #24]
}
 80131a2:	bf00      	nop
 80131a4:	e7fe      	b.n	80131a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80131a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80131a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d01e      	beq.n	80131ec <xTaskCreateStatic+0xac>
 80131ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d01b      	beq.n	80131ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80131be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c0:	2202      	movs	r2, #2
 80131c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80131c6:	2300      	movs	r3, #0
 80131c8:	9303      	str	r3, [sp, #12]
 80131ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131cc:	9302      	str	r3, [sp, #8]
 80131ce:	f107 0314 	add.w	r3, r7, #20
 80131d2:	9301      	str	r3, [sp, #4]
 80131d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d6:	9300      	str	r3, [sp, #0]
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	68b9      	ldr	r1, [r7, #8]
 80131de:	68f8      	ldr	r0, [r7, #12]
 80131e0:	f000 f850 	bl	8013284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131e6:	f000 f8dd 	bl	80133a4 <prvAddNewTaskToReadyList>
 80131ea:	e001      	b.n	80131f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80131ec:	2300      	movs	r3, #0
 80131ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80131f0:	697b      	ldr	r3, [r7, #20]
	}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3728      	adds	r7, #40	; 0x28
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b08c      	sub	sp, #48	; 0x30
 80131fe:	af04      	add	r7, sp, #16
 8013200:	60f8      	str	r0, [r7, #12]
 8013202:	60b9      	str	r1, [r7, #8]
 8013204:	603b      	str	r3, [r7, #0]
 8013206:	4613      	mov	r3, r2
 8013208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801320a:	88fb      	ldrh	r3, [r7, #6]
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	4618      	mov	r0, r3
 8013210:	f002 f802 	bl	8015218 <pvPortMalloc>
 8013214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00e      	beq.n	801323a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801321c:	205c      	movs	r0, #92	; 0x5c
 801321e:	f001 fffb 	bl	8015218 <pvPortMalloc>
 8013222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013224:	69fb      	ldr	r3, [r7, #28]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d003      	beq.n	8013232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	697a      	ldr	r2, [r7, #20]
 801322e:	631a      	str	r2, [r3, #48]	; 0x30
 8013230:	e005      	b.n	801323e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013232:	6978      	ldr	r0, [r7, #20]
 8013234:	f002 f8bc 	bl	80153b0 <vPortFree>
 8013238:	e001      	b.n	801323e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801323a:	2300      	movs	r3, #0
 801323c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d017      	beq.n	8013274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013244:	69fb      	ldr	r3, [r7, #28]
 8013246:	2200      	movs	r2, #0
 8013248:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801324c:	88fa      	ldrh	r2, [r7, #6]
 801324e:	2300      	movs	r3, #0
 8013250:	9303      	str	r3, [sp, #12]
 8013252:	69fb      	ldr	r3, [r7, #28]
 8013254:	9302      	str	r3, [sp, #8]
 8013256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013258:	9301      	str	r3, [sp, #4]
 801325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325c:	9300      	str	r3, [sp, #0]
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	68b9      	ldr	r1, [r7, #8]
 8013262:	68f8      	ldr	r0, [r7, #12]
 8013264:	f000 f80e 	bl	8013284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013268:	69f8      	ldr	r0, [r7, #28]
 801326a:	f000 f89b 	bl	80133a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801326e:	2301      	movs	r3, #1
 8013270:	61bb      	str	r3, [r7, #24]
 8013272:	e002      	b.n	801327a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013274:	f04f 33ff 	mov.w	r3, #4294967295
 8013278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801327a:	69bb      	ldr	r3, [r7, #24]
	}
 801327c:	4618      	mov	r0, r3
 801327e:	3720      	adds	r7, #32
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b088      	sub	sp, #32
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
 8013290:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013294:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	461a      	mov	r2, r3
 801329c:	21a5      	movs	r1, #165	; 0xa5
 801329e:	f002 ffec 	bl	801627a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80132a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80132ac:	3b01      	subs	r3, #1
 80132ae:	009b      	lsls	r3, r3, #2
 80132b0:	4413      	add	r3, r2
 80132b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	f023 0307 	bic.w	r3, r3, #7
 80132ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80132bc:	69bb      	ldr	r3, [r7, #24]
 80132be:	f003 0307 	and.w	r3, r3, #7
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00a      	beq.n	80132dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80132c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ca:	f383 8811 	msr	BASEPRI, r3
 80132ce:	f3bf 8f6f 	isb	sy
 80132d2:	f3bf 8f4f 	dsb	sy
 80132d6:	617b      	str	r3, [r7, #20]
}
 80132d8:	bf00      	nop
 80132da:	e7fe      	b.n	80132da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d01f      	beq.n	8013322 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80132e2:	2300      	movs	r3, #0
 80132e4:	61fb      	str	r3, [r7, #28]
 80132e6:	e012      	b.n	801330e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80132e8:	68ba      	ldr	r2, [r7, #8]
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	4413      	add	r3, r2
 80132ee:	7819      	ldrb	r1, [r3, #0]
 80132f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	4413      	add	r3, r2
 80132f6:	3334      	adds	r3, #52	; 0x34
 80132f8:	460a      	mov	r2, r1
 80132fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80132fc:	68ba      	ldr	r2, [r7, #8]
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	4413      	add	r3, r2
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d006      	beq.n	8013316 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	3301      	adds	r3, #1
 801330c:	61fb      	str	r3, [r7, #28]
 801330e:	69fb      	ldr	r3, [r7, #28]
 8013310:	2b0f      	cmp	r3, #15
 8013312:	d9e9      	bls.n	80132e8 <prvInitialiseNewTask+0x64>
 8013314:	e000      	b.n	8013318 <prvInitialiseNewTask+0x94>
			{
				break;
 8013316:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331a:	2200      	movs	r2, #0
 801331c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013320:	e003      	b.n	801332a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013324:	2200      	movs	r2, #0
 8013326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332c:	2b37      	cmp	r3, #55	; 0x37
 801332e:	d901      	bls.n	8013334 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013330:	2337      	movs	r3, #55	; 0x37
 8013332:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013338:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801333e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013342:	2200      	movs	r2, #0
 8013344:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013348:	3304      	adds	r3, #4
 801334a:	4618      	mov	r0, r3
 801334c:	f7fe fee4 	bl	8012118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013352:	3318      	adds	r3, #24
 8013354:	4618      	mov	r0, r3
 8013356:	f7fe fedf 	bl	8012118 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801335e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013368:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801336e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013372:	2200      	movs	r2, #0
 8013374:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013378:	2200      	movs	r2, #0
 801337a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801337e:	683a      	ldr	r2, [r7, #0]
 8013380:	68f9      	ldr	r1, [r7, #12]
 8013382:	69b8      	ldr	r0, [r7, #24]
 8013384:	f001 fcfc 	bl	8014d80 <pxPortInitialiseStack>
 8013388:	4602      	mov	r2, r0
 801338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013390:	2b00      	cmp	r3, #0
 8013392:	d002      	beq.n	801339a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013398:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801339a:	bf00      	nop
 801339c:	3720      	adds	r7, #32
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
	...

080133a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80133ac:	f001 fe12 	bl	8014fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80133b0:	4b2d      	ldr	r3, [pc, #180]	; (8013468 <prvAddNewTaskToReadyList+0xc4>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	3301      	adds	r3, #1
 80133b6:	4a2c      	ldr	r2, [pc, #176]	; (8013468 <prvAddNewTaskToReadyList+0xc4>)
 80133b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80133ba:	4b2c      	ldr	r3, [pc, #176]	; (801346c <prvAddNewTaskToReadyList+0xc8>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d109      	bne.n	80133d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80133c2:	4a2a      	ldr	r2, [pc, #168]	; (801346c <prvAddNewTaskToReadyList+0xc8>)
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80133c8:	4b27      	ldr	r3, [pc, #156]	; (8013468 <prvAddNewTaskToReadyList+0xc4>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d110      	bne.n	80133f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80133d0:	f000 fea4 	bl	801411c <prvInitialiseTaskLists>
 80133d4:	e00d      	b.n	80133f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80133d6:	4b26      	ldr	r3, [pc, #152]	; (8013470 <prvAddNewTaskToReadyList+0xcc>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d109      	bne.n	80133f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80133de:	4b23      	ldr	r3, [pc, #140]	; (801346c <prvAddNewTaskToReadyList+0xc8>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d802      	bhi.n	80133f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80133ec:	4a1f      	ldr	r2, [pc, #124]	; (801346c <prvAddNewTaskToReadyList+0xc8>)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80133f2:	4b20      	ldr	r3, [pc, #128]	; (8013474 <prvAddNewTaskToReadyList+0xd0>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	3301      	adds	r3, #1
 80133f8:	4a1e      	ldr	r2, [pc, #120]	; (8013474 <prvAddNewTaskToReadyList+0xd0>)
 80133fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80133fc:	4b1d      	ldr	r3, [pc, #116]	; (8013474 <prvAddNewTaskToReadyList+0xd0>)
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013408:	4b1b      	ldr	r3, [pc, #108]	; (8013478 <prvAddNewTaskToReadyList+0xd4>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	429a      	cmp	r2, r3
 801340e:	d903      	bls.n	8013418 <prvAddNewTaskToReadyList+0x74>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013414:	4a18      	ldr	r2, [pc, #96]	; (8013478 <prvAddNewTaskToReadyList+0xd4>)
 8013416:	6013      	str	r3, [r2, #0]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801341c:	4613      	mov	r3, r2
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	4413      	add	r3, r2
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	4a15      	ldr	r2, [pc, #84]	; (801347c <prvAddNewTaskToReadyList+0xd8>)
 8013426:	441a      	add	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3304      	adds	r3, #4
 801342c:	4619      	mov	r1, r3
 801342e:	4610      	mov	r0, r2
 8013430:	f7fe fe7f 	bl	8012132 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013434:	f001 fdfe 	bl	8015034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013438:	4b0d      	ldr	r3, [pc, #52]	; (8013470 <prvAddNewTaskToReadyList+0xcc>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00e      	beq.n	801345e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013440:	4b0a      	ldr	r3, [pc, #40]	; (801346c <prvAddNewTaskToReadyList+0xc8>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801344a:	429a      	cmp	r2, r3
 801344c:	d207      	bcs.n	801345e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801344e:	4b0c      	ldr	r3, [pc, #48]	; (8013480 <prvAddNewTaskToReadyList+0xdc>)
 8013450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013454:	601a      	str	r2, [r3, #0]
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801345e:	bf00      	nop
 8013460:	3708      	adds	r7, #8
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	20001280 	.word	0x20001280
 801346c:	20000dac 	.word	0x20000dac
 8013470:	2000128c 	.word	0x2000128c
 8013474:	2000129c 	.word	0x2000129c
 8013478:	20001288 	.word	0x20001288
 801347c:	20000db0 	.word	0x20000db0
 8013480:	e000ed04 	.word	0xe000ed04

08013484 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013484:	b580      	push	{r7, lr}
 8013486:	b084      	sub	sp, #16
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801348c:	f001 fda2 	bl	8014fd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d102      	bne.n	801349c <vTaskDelete+0x18>
 8013496:	4b2c      	ldr	r3, [pc, #176]	; (8013548 <vTaskDelete+0xc4>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	e000      	b.n	801349e <vTaskDelete+0x1a>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	3304      	adds	r3, #4
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7fe fea1 	bl	80121ec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d004      	beq.n	80134bc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	3318      	adds	r3, #24
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fe fe98 	bl	80121ec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80134bc:	4b23      	ldr	r3, [pc, #140]	; (801354c <vTaskDelete+0xc8>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	3301      	adds	r3, #1
 80134c2:	4a22      	ldr	r2, [pc, #136]	; (801354c <vTaskDelete+0xc8>)
 80134c4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80134c6:	4b20      	ldr	r3, [pc, #128]	; (8013548 <vTaskDelete+0xc4>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	68fa      	ldr	r2, [r7, #12]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d10b      	bne.n	80134e8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	3304      	adds	r3, #4
 80134d4:	4619      	mov	r1, r3
 80134d6:	481e      	ldr	r0, [pc, #120]	; (8013550 <vTaskDelete+0xcc>)
 80134d8:	f7fe fe2b 	bl	8012132 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80134dc:	4b1d      	ldr	r3, [pc, #116]	; (8013554 <vTaskDelete+0xd0>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	3301      	adds	r3, #1
 80134e2:	4a1c      	ldr	r2, [pc, #112]	; (8013554 <vTaskDelete+0xd0>)
 80134e4:	6013      	str	r3, [r2, #0]
 80134e6:	e009      	b.n	80134fc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80134e8:	4b1b      	ldr	r3, [pc, #108]	; (8013558 <vTaskDelete+0xd4>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	3b01      	subs	r3, #1
 80134ee:	4a1a      	ldr	r2, [pc, #104]	; (8013558 <vTaskDelete+0xd4>)
 80134f0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80134f2:	68f8      	ldr	r0, [r7, #12]
 80134f4:	f000 fe80 	bl	80141f8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80134f8:	f000 feae 	bl	8014258 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80134fc:	f001 fd9a 	bl	8015034 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013500:	4b16      	ldr	r3, [pc, #88]	; (801355c <vTaskDelete+0xd8>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d01b      	beq.n	8013540 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8013508:	4b0f      	ldr	r3, [pc, #60]	; (8013548 <vTaskDelete+0xc4>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	429a      	cmp	r2, r3
 8013510:	d116      	bne.n	8013540 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013512:	4b13      	ldr	r3, [pc, #76]	; (8013560 <vTaskDelete+0xdc>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d00a      	beq.n	8013530 <vTaskDelete+0xac>
	__asm volatile
 801351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351e:	f383 8811 	msr	BASEPRI, r3
 8013522:	f3bf 8f6f 	isb	sy
 8013526:	f3bf 8f4f 	dsb	sy
 801352a:	60bb      	str	r3, [r7, #8]
}
 801352c:	bf00      	nop
 801352e:	e7fe      	b.n	801352e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8013530:	4b0c      	ldr	r3, [pc, #48]	; (8013564 <vTaskDelete+0xe0>)
 8013532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013536:	601a      	str	r2, [r3, #0]
 8013538:	f3bf 8f4f 	dsb	sy
 801353c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013540:	bf00      	nop
 8013542:	3710      	adds	r7, #16
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	20000dac 	.word	0x20000dac
 801354c:	2000129c 	.word	0x2000129c
 8013550:	20001254 	.word	0x20001254
 8013554:	20001268 	.word	0x20001268
 8013558:	20001280 	.word	0x20001280
 801355c:	2000128c 	.word	0x2000128c
 8013560:	200012a8 	.word	0x200012a8
 8013564:	e000ed04 	.word	0xe000ed04

08013568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013568:	b580      	push	{r7, lr}
 801356a:	b084      	sub	sp, #16
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013570:	2300      	movs	r3, #0
 8013572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d017      	beq.n	80135aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801357a:	4b13      	ldr	r3, [pc, #76]	; (80135c8 <vTaskDelay+0x60>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d00a      	beq.n	8013598 <vTaskDelay+0x30>
	__asm volatile
 8013582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013586:	f383 8811 	msr	BASEPRI, r3
 801358a:	f3bf 8f6f 	isb	sy
 801358e:	f3bf 8f4f 	dsb	sy
 8013592:	60bb      	str	r3, [r7, #8]
}
 8013594:	bf00      	nop
 8013596:	e7fe      	b.n	8013596 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013598:	f000 f9ec 	bl	8013974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801359c:	2100      	movs	r1, #0
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f001 f82c 	bl	80145fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80135a4:	f000 f9f4 	bl	8013990 <xTaskResumeAll>
 80135a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d107      	bne.n	80135c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80135b0:	4b06      	ldr	r3, [pc, #24]	; (80135cc <vTaskDelay+0x64>)
 80135b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135b6:	601a      	str	r2, [r3, #0]
 80135b8:	f3bf 8f4f 	dsb	sy
 80135bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80135c0:	bf00      	nop
 80135c2:	3710      	adds	r7, #16
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	200012a8 	.word	0x200012a8
 80135cc:	e000ed04 	.word	0xe000ed04

080135d0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b088      	sub	sp, #32
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d10a      	bne.n	80135f8 <eTaskGetState+0x28>
	__asm volatile
 80135e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
 80135ee:	f3bf 8f4f 	dsb	sy
 80135f2:	60bb      	str	r3, [r7, #8]
}
 80135f4:	bf00      	nop
 80135f6:	e7fe      	b.n	80135f6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80135f8:	4b23      	ldr	r3, [pc, #140]	; (8013688 <eTaskGetState+0xb8>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	69ba      	ldr	r2, [r7, #24]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d102      	bne.n	8013608 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013602:	2300      	movs	r3, #0
 8013604:	77fb      	strb	r3, [r7, #31]
 8013606:	e03a      	b.n	801367e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8013608:	f001 fce4 	bl	8014fd4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	695b      	ldr	r3, [r3, #20]
 8013610:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013612:	4b1e      	ldr	r3, [pc, #120]	; (801368c <eTaskGetState+0xbc>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8013618:	4b1d      	ldr	r3, [pc, #116]	; (8013690 <eTaskGetState+0xc0>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801361e:	f001 fd09 	bl	8015034 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013622:	697a      	ldr	r2, [r7, #20]
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	429a      	cmp	r2, r3
 8013628:	d003      	beq.n	8013632 <eTaskGetState+0x62>
 801362a:	697a      	ldr	r2, [r7, #20]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	429a      	cmp	r2, r3
 8013630:	d102      	bne.n	8013638 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013632:	2302      	movs	r3, #2
 8013634:	77fb      	strb	r3, [r7, #31]
 8013636:	e022      	b.n	801367e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	4a16      	ldr	r2, [pc, #88]	; (8013694 <eTaskGetState+0xc4>)
 801363c:	4293      	cmp	r3, r2
 801363e:	d112      	bne.n	8013666 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10b      	bne.n	8013660 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801364e:	b2db      	uxtb	r3, r3
 8013650:	2b01      	cmp	r3, #1
 8013652:	d102      	bne.n	801365a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8013654:	2302      	movs	r3, #2
 8013656:	77fb      	strb	r3, [r7, #31]
 8013658:	e011      	b.n	801367e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801365a:	2303      	movs	r3, #3
 801365c:	77fb      	strb	r3, [r7, #31]
 801365e:	e00e      	b.n	801367e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013660:	2302      	movs	r3, #2
 8013662:	77fb      	strb	r3, [r7, #31]
 8013664:	e00b      	b.n	801367e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	4a0b      	ldr	r2, [pc, #44]	; (8013698 <eTaskGetState+0xc8>)
 801366a:	4293      	cmp	r3, r2
 801366c:	d002      	beq.n	8013674 <eTaskGetState+0xa4>
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d102      	bne.n	801367a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013674:	2304      	movs	r3, #4
 8013676:	77fb      	strb	r3, [r7, #31]
 8013678:	e001      	b.n	801367e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801367a:	2301      	movs	r3, #1
 801367c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801367e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013680:	4618      	mov	r0, r3
 8013682:	3720      	adds	r7, #32
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	20000dac 	.word	0x20000dac
 801368c:	20001238 	.word	0x20001238
 8013690:	2000123c 	.word	0x2000123c
 8013694:	2000126c 	.word	0x2000126c
 8013698:	20001254 	.word	0x20001254

0801369c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801369c:	b580      	push	{r7, lr}
 801369e:	b084      	sub	sp, #16
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80136a4:	f001 fc96 	bl	8014fd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d102      	bne.n	80136b4 <vTaskSuspend+0x18>
 80136ae:	4b30      	ldr	r3, [pc, #192]	; (8013770 <vTaskSuspend+0xd4>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	e000      	b.n	80136b6 <vTaskSuspend+0x1a>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	3304      	adds	r3, #4
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fe fd95 	bl	80121ec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d004      	beq.n	80136d4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	3318      	adds	r3, #24
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7fe fd8c 	bl	80121ec <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	3304      	adds	r3, #4
 80136d8:	4619      	mov	r1, r3
 80136da:	4826      	ldr	r0, [pc, #152]	; (8013774 <vTaskSuspend+0xd8>)
 80136dc:	f7fe fd29 	bl	8012132 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80136e6:	b2db      	uxtb	r3, r3
 80136e8:	2b01      	cmp	r3, #1
 80136ea:	d103      	bne.n	80136f4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80136f4:	f001 fc9e 	bl	8015034 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80136f8:	4b1f      	ldr	r3, [pc, #124]	; (8013778 <vTaskSuspend+0xdc>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d005      	beq.n	801370c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013700:	f001 fc68 	bl	8014fd4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8013704:	f000 fda8 	bl	8014258 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013708:	f001 fc94 	bl	8015034 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801370c:	4b18      	ldr	r3, [pc, #96]	; (8013770 <vTaskSuspend+0xd4>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	429a      	cmp	r2, r3
 8013714:	d127      	bne.n	8013766 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8013716:	4b18      	ldr	r3, [pc, #96]	; (8013778 <vTaskSuspend+0xdc>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d017      	beq.n	801374e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801371e:	4b17      	ldr	r3, [pc, #92]	; (801377c <vTaskSuspend+0xe0>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d00a      	beq.n	801373c <vTaskSuspend+0xa0>
	__asm volatile
 8013726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801372a:	f383 8811 	msr	BASEPRI, r3
 801372e:	f3bf 8f6f 	isb	sy
 8013732:	f3bf 8f4f 	dsb	sy
 8013736:	60bb      	str	r3, [r7, #8]
}
 8013738:	bf00      	nop
 801373a:	e7fe      	b.n	801373a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 801373c:	4b10      	ldr	r3, [pc, #64]	; (8013780 <vTaskSuspend+0xe4>)
 801373e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	f3bf 8f4f 	dsb	sy
 8013748:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801374c:	e00b      	b.n	8013766 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801374e:	4b09      	ldr	r3, [pc, #36]	; (8013774 <vTaskSuspend+0xd8>)
 8013750:	681a      	ldr	r2, [r3, #0]
 8013752:	4b0c      	ldr	r3, [pc, #48]	; (8013784 <vTaskSuspend+0xe8>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	429a      	cmp	r2, r3
 8013758:	d103      	bne.n	8013762 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801375a:	4b05      	ldr	r3, [pc, #20]	; (8013770 <vTaskSuspend+0xd4>)
 801375c:	2200      	movs	r2, #0
 801375e:	601a      	str	r2, [r3, #0]
	}
 8013760:	e001      	b.n	8013766 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8013762:	f000 fa8f 	bl	8013c84 <vTaskSwitchContext>
	}
 8013766:	bf00      	nop
 8013768:	3710      	adds	r7, #16
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	20000dac 	.word	0x20000dac
 8013774:	2000126c 	.word	0x2000126c
 8013778:	2000128c 	.word	0x2000128c
 801377c:	200012a8 	.word	0x200012a8
 8013780:	e000ed04 	.word	0xe000ed04
 8013784:	20001280 	.word	0x20001280

08013788 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013788:	b480      	push	{r7}
 801378a:	b087      	sub	sp, #28
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013790:	2300      	movs	r3, #0
 8013792:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d10a      	bne.n	80137b4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a2:	f383 8811 	msr	BASEPRI, r3
 80137a6:	f3bf 8f6f 	isb	sy
 80137aa:	f3bf 8f4f 	dsb	sy
 80137ae:	60fb      	str	r3, [r7, #12]
}
 80137b0:	bf00      	nop
 80137b2:	e7fe      	b.n	80137b2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	695b      	ldr	r3, [r3, #20]
 80137b8:	4a0a      	ldr	r2, [pc, #40]	; (80137e4 <prvTaskIsTaskSuspended+0x5c>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d10a      	bne.n	80137d4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137c2:	4a09      	ldr	r2, [pc, #36]	; (80137e8 <prvTaskIsTaskSuspended+0x60>)
 80137c4:	4293      	cmp	r3, r2
 80137c6:	d005      	beq.n	80137d4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d101      	bne.n	80137d4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80137d0:	2301      	movs	r3, #1
 80137d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80137d4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80137d6:	4618      	mov	r0, r3
 80137d8:	371c      	adds	r7, #28
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	2000126c 	.word	0x2000126c
 80137e8:	20001240 	.word	0x20001240

080137ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d10a      	bne.n	8013814 <vTaskResume+0x28>
	__asm volatile
 80137fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	60bb      	str	r3, [r7, #8]
}
 8013810:	bf00      	nop
 8013812:	e7fe      	b.n	8013812 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8013814:	4b20      	ldr	r3, [pc, #128]	; (8013898 <vTaskResume+0xac>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	68fa      	ldr	r2, [r7, #12]
 801381a:	429a      	cmp	r2, r3
 801381c:	d038      	beq.n	8013890 <vTaskResume+0xa4>
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d035      	beq.n	8013890 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8013824:	f001 fbd6 	bl	8014fd4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013828:	68f8      	ldr	r0, [r7, #12]
 801382a:	f7ff ffad 	bl	8013788 <prvTaskIsTaskSuspended>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d02b      	beq.n	801388c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	3304      	adds	r3, #4
 8013838:	4618      	mov	r0, r3
 801383a:	f7fe fcd7 	bl	80121ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013842:	4b16      	ldr	r3, [pc, #88]	; (801389c <vTaskResume+0xb0>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	429a      	cmp	r2, r3
 8013848:	d903      	bls.n	8013852 <vTaskResume+0x66>
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801384e:	4a13      	ldr	r2, [pc, #76]	; (801389c <vTaskResume+0xb0>)
 8013850:	6013      	str	r3, [r2, #0]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013856:	4613      	mov	r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	4413      	add	r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	4a10      	ldr	r2, [pc, #64]	; (80138a0 <vTaskResume+0xb4>)
 8013860:	441a      	add	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	3304      	adds	r3, #4
 8013866:	4619      	mov	r1, r3
 8013868:	4610      	mov	r0, r2
 801386a:	f7fe fc62 	bl	8012132 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013872:	4b09      	ldr	r3, [pc, #36]	; (8013898 <vTaskResume+0xac>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013878:	429a      	cmp	r2, r3
 801387a:	d307      	bcc.n	801388c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801387c:	4b09      	ldr	r3, [pc, #36]	; (80138a4 <vTaskResume+0xb8>)
 801387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013882:	601a      	str	r2, [r3, #0]
 8013884:	f3bf 8f4f 	dsb	sy
 8013888:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801388c:	f001 fbd2 	bl	8015034 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013890:	bf00      	nop
 8013892:	3710      	adds	r7, #16
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	20000dac 	.word	0x20000dac
 801389c:	20001288 	.word	0x20001288
 80138a0:	20000db0 	.word	0x20000db0
 80138a4:	e000ed04 	.word	0xe000ed04

080138a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08a      	sub	sp, #40	; 0x28
 80138ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80138ae:	2300      	movs	r3, #0
 80138b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80138b2:	2300      	movs	r3, #0
 80138b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80138b6:	463a      	mov	r2, r7
 80138b8:	1d39      	adds	r1, r7, #4
 80138ba:	f107 0308 	add.w	r3, r7, #8
 80138be:	4618      	mov	r0, r3
 80138c0:	f7fe f9e8 	bl	8011c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80138c4:	6839      	ldr	r1, [r7, #0]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	68ba      	ldr	r2, [r7, #8]
 80138ca:	9202      	str	r2, [sp, #8]
 80138cc:	9301      	str	r3, [sp, #4]
 80138ce:	2300      	movs	r3, #0
 80138d0:	9300      	str	r3, [sp, #0]
 80138d2:	2300      	movs	r3, #0
 80138d4:	460a      	mov	r2, r1
 80138d6:	4921      	ldr	r1, [pc, #132]	; (801395c <vTaskStartScheduler+0xb4>)
 80138d8:	4821      	ldr	r0, [pc, #132]	; (8013960 <vTaskStartScheduler+0xb8>)
 80138da:	f7ff fc31 	bl	8013140 <xTaskCreateStatic>
 80138de:	4603      	mov	r3, r0
 80138e0:	4a20      	ldr	r2, [pc, #128]	; (8013964 <vTaskStartScheduler+0xbc>)
 80138e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80138e4:	4b1f      	ldr	r3, [pc, #124]	; (8013964 <vTaskStartScheduler+0xbc>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d002      	beq.n	80138f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80138ec:	2301      	movs	r3, #1
 80138ee:	617b      	str	r3, [r7, #20]
 80138f0:	e001      	b.n	80138f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80138f2:	2300      	movs	r3, #0
 80138f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d102      	bne.n	8013902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80138fc:	f000 fed2 	bl	80146a4 <xTimerCreateTimerTask>
 8013900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d116      	bne.n	8013936 <vTaskStartScheduler+0x8e>
	__asm volatile
 8013908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390c:	f383 8811 	msr	BASEPRI, r3
 8013910:	f3bf 8f6f 	isb	sy
 8013914:	f3bf 8f4f 	dsb	sy
 8013918:	613b      	str	r3, [r7, #16]
}
 801391a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801391c:	4b12      	ldr	r3, [pc, #72]	; (8013968 <vTaskStartScheduler+0xc0>)
 801391e:	f04f 32ff 	mov.w	r2, #4294967295
 8013922:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013924:	4b11      	ldr	r3, [pc, #68]	; (801396c <vTaskStartScheduler+0xc4>)
 8013926:	2201      	movs	r2, #1
 8013928:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801392a:	4b11      	ldr	r3, [pc, #68]	; (8013970 <vTaskStartScheduler+0xc8>)
 801392c:	2200      	movs	r2, #0
 801392e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013930:	f001 faae 	bl	8014e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013934:	e00e      	b.n	8013954 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393c:	d10a      	bne.n	8013954 <vTaskStartScheduler+0xac>
	__asm volatile
 801393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013942:	f383 8811 	msr	BASEPRI, r3
 8013946:	f3bf 8f6f 	isb	sy
 801394a:	f3bf 8f4f 	dsb	sy
 801394e:	60fb      	str	r3, [r7, #12]
}
 8013950:	bf00      	nop
 8013952:	e7fe      	b.n	8013952 <vTaskStartScheduler+0xaa>
}
 8013954:	bf00      	nop
 8013956:	3718      	adds	r7, #24
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	08019f8c 	.word	0x08019f8c
 8013960:	080140ed 	.word	0x080140ed
 8013964:	200012a4 	.word	0x200012a4
 8013968:	200012a0 	.word	0x200012a0
 801396c:	2000128c 	.word	0x2000128c
 8013970:	20001284 	.word	0x20001284

08013974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013974:	b480      	push	{r7}
 8013976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013978:	4b04      	ldr	r3, [pc, #16]	; (801398c <vTaskSuspendAll+0x18>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	3301      	adds	r3, #1
 801397e:	4a03      	ldr	r2, [pc, #12]	; (801398c <vTaskSuspendAll+0x18>)
 8013980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013982:	bf00      	nop
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	200012a8 	.word	0x200012a8

08013990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013996:	2300      	movs	r3, #0
 8013998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801399a:	2300      	movs	r3, #0
 801399c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801399e:	4b42      	ldr	r3, [pc, #264]	; (8013aa8 <xTaskResumeAll+0x118>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d10a      	bne.n	80139bc <xTaskResumeAll+0x2c>
	__asm volatile
 80139a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139aa:	f383 8811 	msr	BASEPRI, r3
 80139ae:	f3bf 8f6f 	isb	sy
 80139b2:	f3bf 8f4f 	dsb	sy
 80139b6:	603b      	str	r3, [r7, #0]
}
 80139b8:	bf00      	nop
 80139ba:	e7fe      	b.n	80139ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80139bc:	f001 fb0a 	bl	8014fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80139c0:	4b39      	ldr	r3, [pc, #228]	; (8013aa8 <xTaskResumeAll+0x118>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	3b01      	subs	r3, #1
 80139c6:	4a38      	ldr	r2, [pc, #224]	; (8013aa8 <xTaskResumeAll+0x118>)
 80139c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80139ca:	4b37      	ldr	r3, [pc, #220]	; (8013aa8 <xTaskResumeAll+0x118>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d162      	bne.n	8013a98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80139d2:	4b36      	ldr	r3, [pc, #216]	; (8013aac <xTaskResumeAll+0x11c>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d05e      	beq.n	8013a98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80139da:	e02f      	b.n	8013a3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139dc:	4b34      	ldr	r3, [pc, #208]	; (8013ab0 <xTaskResumeAll+0x120>)
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	68db      	ldr	r3, [r3, #12]
 80139e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	3318      	adds	r3, #24
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7fe fbff 	bl	80121ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	3304      	adds	r3, #4
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fe fbfa 	bl	80121ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139fc:	4b2d      	ldr	r3, [pc, #180]	; (8013ab4 <xTaskResumeAll+0x124>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d903      	bls.n	8013a0c <xTaskResumeAll+0x7c>
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a08:	4a2a      	ldr	r2, [pc, #168]	; (8013ab4 <xTaskResumeAll+0x124>)
 8013a0a:	6013      	str	r3, [r2, #0]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a10:	4613      	mov	r3, r2
 8013a12:	009b      	lsls	r3, r3, #2
 8013a14:	4413      	add	r3, r2
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	4a27      	ldr	r2, [pc, #156]	; (8013ab8 <xTaskResumeAll+0x128>)
 8013a1a:	441a      	add	r2, r3
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	3304      	adds	r3, #4
 8013a20:	4619      	mov	r1, r3
 8013a22:	4610      	mov	r0, r2
 8013a24:	f7fe fb85 	bl	8012132 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a2c:	4b23      	ldr	r3, [pc, #140]	; (8013abc <xTaskResumeAll+0x12c>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d302      	bcc.n	8013a3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013a36:	4b22      	ldr	r3, [pc, #136]	; (8013ac0 <xTaskResumeAll+0x130>)
 8013a38:	2201      	movs	r2, #1
 8013a3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013a3c:	4b1c      	ldr	r3, [pc, #112]	; (8013ab0 <xTaskResumeAll+0x120>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d1cb      	bne.n	80139dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013a4a:	f000 fc05 	bl	8014258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013a4e:	4b1d      	ldr	r3, [pc, #116]	; (8013ac4 <xTaskResumeAll+0x134>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d010      	beq.n	8013a7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013a5a:	f000 f859 	bl	8013b10 <xTaskIncrementTick>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d002      	beq.n	8013a6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013a64:	4b16      	ldr	r3, [pc, #88]	; (8013ac0 <xTaskResumeAll+0x130>)
 8013a66:	2201      	movs	r2, #1
 8013a68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	3b01      	subs	r3, #1
 8013a6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d1f1      	bne.n	8013a5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013a76:	4b13      	ldr	r3, [pc, #76]	; (8013ac4 <xTaskResumeAll+0x134>)
 8013a78:	2200      	movs	r2, #0
 8013a7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013a7c:	4b10      	ldr	r3, [pc, #64]	; (8013ac0 <xTaskResumeAll+0x130>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d009      	beq.n	8013a98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013a84:	2301      	movs	r3, #1
 8013a86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013a88:	4b0f      	ldr	r3, [pc, #60]	; (8013ac8 <xTaskResumeAll+0x138>)
 8013a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a8e:	601a      	str	r2, [r3, #0]
 8013a90:	f3bf 8f4f 	dsb	sy
 8013a94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013a98:	f001 facc 	bl	8015034 <vPortExitCritical>

	return xAlreadyYielded;
 8013a9c:	68bb      	ldr	r3, [r7, #8]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	200012a8 	.word	0x200012a8
 8013aac:	20001280 	.word	0x20001280
 8013ab0:	20001240 	.word	0x20001240
 8013ab4:	20001288 	.word	0x20001288
 8013ab8:	20000db0 	.word	0x20000db0
 8013abc:	20000dac 	.word	0x20000dac
 8013ac0:	20001294 	.word	0x20001294
 8013ac4:	20001290 	.word	0x20001290
 8013ac8:	e000ed04 	.word	0xe000ed04

08013acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013acc:	b480      	push	{r7}
 8013ace:	b083      	sub	sp, #12
 8013ad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013ad2:	4b05      	ldr	r3, [pc, #20]	; (8013ae8 <xTaskGetTickCount+0x1c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013ad8:	687b      	ldr	r3, [r7, #4]
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	370c      	adds	r7, #12
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop
 8013ae8:	20001284 	.word	0x20001284

08013aec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013af2:	f001 fb51 	bl	8015198 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013af6:	2300      	movs	r3, #0
 8013af8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013afa:	4b04      	ldr	r3, [pc, #16]	; (8013b0c <xTaskGetTickCountFromISR+0x20>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b00:	683b      	ldr	r3, [r7, #0]
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20001284 	.word	0x20001284

08013b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013b16:	2300      	movs	r3, #0
 8013b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b1a:	4b4f      	ldr	r3, [pc, #316]	; (8013c58 <xTaskIncrementTick+0x148>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	f040 808f 	bne.w	8013c42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013b24:	4b4d      	ldr	r3, [pc, #308]	; (8013c5c <xTaskIncrementTick+0x14c>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	3301      	adds	r3, #1
 8013b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013b2c:	4a4b      	ldr	r2, [pc, #300]	; (8013c5c <xTaskIncrementTick+0x14c>)
 8013b2e:	693b      	ldr	r3, [r7, #16]
 8013b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d120      	bne.n	8013b7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013b38:	4b49      	ldr	r3, [pc, #292]	; (8013c60 <xTaskIncrementTick+0x150>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00a      	beq.n	8013b58 <xTaskIncrementTick+0x48>
	__asm volatile
 8013b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b46:	f383 8811 	msr	BASEPRI, r3
 8013b4a:	f3bf 8f6f 	isb	sy
 8013b4e:	f3bf 8f4f 	dsb	sy
 8013b52:	603b      	str	r3, [r7, #0]
}
 8013b54:	bf00      	nop
 8013b56:	e7fe      	b.n	8013b56 <xTaskIncrementTick+0x46>
 8013b58:	4b41      	ldr	r3, [pc, #260]	; (8013c60 <xTaskIncrementTick+0x150>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	60fb      	str	r3, [r7, #12]
 8013b5e:	4b41      	ldr	r3, [pc, #260]	; (8013c64 <xTaskIncrementTick+0x154>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	4a3f      	ldr	r2, [pc, #252]	; (8013c60 <xTaskIncrementTick+0x150>)
 8013b64:	6013      	str	r3, [r2, #0]
 8013b66:	4a3f      	ldr	r2, [pc, #252]	; (8013c64 <xTaskIncrementTick+0x154>)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	6013      	str	r3, [r2, #0]
 8013b6c:	4b3e      	ldr	r3, [pc, #248]	; (8013c68 <xTaskIncrementTick+0x158>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	3301      	adds	r3, #1
 8013b72:	4a3d      	ldr	r2, [pc, #244]	; (8013c68 <xTaskIncrementTick+0x158>)
 8013b74:	6013      	str	r3, [r2, #0]
 8013b76:	f000 fb6f 	bl	8014258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013b7a:	4b3c      	ldr	r3, [pc, #240]	; (8013c6c <xTaskIncrementTick+0x15c>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	693a      	ldr	r2, [r7, #16]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d349      	bcc.n	8013c18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b84:	4b36      	ldr	r3, [pc, #216]	; (8013c60 <xTaskIncrementTick+0x150>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d104      	bne.n	8013b98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b8e:	4b37      	ldr	r3, [pc, #220]	; (8013c6c <xTaskIncrementTick+0x15c>)
 8013b90:	f04f 32ff 	mov.w	r2, #4294967295
 8013b94:	601a      	str	r2, [r3, #0]
					break;
 8013b96:	e03f      	b.n	8013c18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b98:	4b31      	ldr	r3, [pc, #196]	; (8013c60 <xTaskIncrementTick+0x150>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	68db      	ldr	r3, [r3, #12]
 8013b9e:	68db      	ldr	r3, [r3, #12]
 8013ba0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013ba8:	693a      	ldr	r2, [r7, #16]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d203      	bcs.n	8013bb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013bb0:	4a2e      	ldr	r2, [pc, #184]	; (8013c6c <xTaskIncrementTick+0x15c>)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013bb6:	e02f      	b.n	8013c18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	3304      	adds	r3, #4
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fe fb15 	bl	80121ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d004      	beq.n	8013bd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	3318      	adds	r3, #24
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fe fb0c 	bl	80121ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd8:	4b25      	ldr	r3, [pc, #148]	; (8013c70 <xTaskIncrementTick+0x160>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d903      	bls.n	8013be8 <xTaskIncrementTick+0xd8>
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be4:	4a22      	ldr	r2, [pc, #136]	; (8013c70 <xTaskIncrementTick+0x160>)
 8013be6:	6013      	str	r3, [r2, #0]
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bec:	4613      	mov	r3, r2
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	4413      	add	r3, r2
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	4a1f      	ldr	r2, [pc, #124]	; (8013c74 <xTaskIncrementTick+0x164>)
 8013bf6:	441a      	add	r2, r3
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	3304      	adds	r3, #4
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	4610      	mov	r0, r2
 8013c00:	f7fe fa97 	bl	8012132 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c08:	4b1b      	ldr	r3, [pc, #108]	; (8013c78 <xTaskIncrementTick+0x168>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d3b8      	bcc.n	8013b84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013c12:	2301      	movs	r3, #1
 8013c14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c16:	e7b5      	b.n	8013b84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013c18:	4b17      	ldr	r3, [pc, #92]	; (8013c78 <xTaskIncrementTick+0x168>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c1e:	4915      	ldr	r1, [pc, #84]	; (8013c74 <xTaskIncrementTick+0x164>)
 8013c20:	4613      	mov	r3, r2
 8013c22:	009b      	lsls	r3, r3, #2
 8013c24:	4413      	add	r3, r2
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	440b      	add	r3, r1
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d901      	bls.n	8013c34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013c30:	2301      	movs	r3, #1
 8013c32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013c34:	4b11      	ldr	r3, [pc, #68]	; (8013c7c <xTaskIncrementTick+0x16c>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d007      	beq.n	8013c4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	617b      	str	r3, [r7, #20]
 8013c40:	e004      	b.n	8013c4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013c42:	4b0f      	ldr	r3, [pc, #60]	; (8013c80 <xTaskIncrementTick+0x170>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	3301      	adds	r3, #1
 8013c48:	4a0d      	ldr	r2, [pc, #52]	; (8013c80 <xTaskIncrementTick+0x170>)
 8013c4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013c4c:	697b      	ldr	r3, [r7, #20]
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3718      	adds	r7, #24
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	bf00      	nop
 8013c58:	200012a8 	.word	0x200012a8
 8013c5c:	20001284 	.word	0x20001284
 8013c60:	20001238 	.word	0x20001238
 8013c64:	2000123c 	.word	0x2000123c
 8013c68:	20001298 	.word	0x20001298
 8013c6c:	200012a0 	.word	0x200012a0
 8013c70:	20001288 	.word	0x20001288
 8013c74:	20000db0 	.word	0x20000db0
 8013c78:	20000dac 	.word	0x20000dac
 8013c7c:	20001294 	.word	0x20001294
 8013c80:	20001290 	.word	0x20001290

08013c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013c84:	b480      	push	{r7}
 8013c86:	b085      	sub	sp, #20
 8013c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013c8a:	4b28      	ldr	r3, [pc, #160]	; (8013d2c <vTaskSwitchContext+0xa8>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d003      	beq.n	8013c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013c92:	4b27      	ldr	r3, [pc, #156]	; (8013d30 <vTaskSwitchContext+0xac>)
 8013c94:	2201      	movs	r2, #1
 8013c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013c98:	e041      	b.n	8013d1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013c9a:	4b25      	ldr	r3, [pc, #148]	; (8013d30 <vTaskSwitchContext+0xac>)
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ca0:	4b24      	ldr	r3, [pc, #144]	; (8013d34 <vTaskSwitchContext+0xb0>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	60fb      	str	r3, [r7, #12]
 8013ca6:	e010      	b.n	8013cca <vTaskSwitchContext+0x46>
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d10a      	bne.n	8013cc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8013cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb2:	f383 8811 	msr	BASEPRI, r3
 8013cb6:	f3bf 8f6f 	isb	sy
 8013cba:	f3bf 8f4f 	dsb	sy
 8013cbe:	607b      	str	r3, [r7, #4]
}
 8013cc0:	bf00      	nop
 8013cc2:	e7fe      	b.n	8013cc2 <vTaskSwitchContext+0x3e>
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	3b01      	subs	r3, #1
 8013cc8:	60fb      	str	r3, [r7, #12]
 8013cca:	491b      	ldr	r1, [pc, #108]	; (8013d38 <vTaskSwitchContext+0xb4>)
 8013ccc:	68fa      	ldr	r2, [r7, #12]
 8013cce:	4613      	mov	r3, r2
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	4413      	add	r3, r2
 8013cd4:	009b      	lsls	r3, r3, #2
 8013cd6:	440b      	add	r3, r1
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d0e4      	beq.n	8013ca8 <vTaskSwitchContext+0x24>
 8013cde:	68fa      	ldr	r2, [r7, #12]
 8013ce0:	4613      	mov	r3, r2
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	4413      	add	r3, r2
 8013ce6:	009b      	lsls	r3, r3, #2
 8013ce8:	4a13      	ldr	r2, [pc, #76]	; (8013d38 <vTaskSwitchContext+0xb4>)
 8013cea:	4413      	add	r3, r2
 8013cec:	60bb      	str	r3, [r7, #8]
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	685a      	ldr	r2, [r3, #4]
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	605a      	str	r2, [r3, #4]
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	685a      	ldr	r2, [r3, #4]
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	3308      	adds	r3, #8
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d104      	bne.n	8013d0e <vTaskSwitchContext+0x8a>
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	685a      	ldr	r2, [r3, #4]
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	605a      	str	r2, [r3, #4]
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	68db      	ldr	r3, [r3, #12]
 8013d14:	4a09      	ldr	r2, [pc, #36]	; (8013d3c <vTaskSwitchContext+0xb8>)
 8013d16:	6013      	str	r3, [r2, #0]
 8013d18:	4a06      	ldr	r2, [pc, #24]	; (8013d34 <vTaskSwitchContext+0xb0>)
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	6013      	str	r3, [r2, #0]
}
 8013d1e:	bf00      	nop
 8013d20:	3714      	adds	r7, #20
 8013d22:	46bd      	mov	sp, r7
 8013d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d28:	4770      	bx	lr
 8013d2a:	bf00      	nop
 8013d2c:	200012a8 	.word	0x200012a8
 8013d30:	20001294 	.word	0x20001294
 8013d34:	20001288 	.word	0x20001288
 8013d38:	20000db0 	.word	0x20000db0
 8013d3c:	20000dac 	.word	0x20000dac

08013d40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d10a      	bne.n	8013d66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d54:	f383 8811 	msr	BASEPRI, r3
 8013d58:	f3bf 8f6f 	isb	sy
 8013d5c:	f3bf 8f4f 	dsb	sy
 8013d60:	60fb      	str	r3, [r7, #12]
}
 8013d62:	bf00      	nop
 8013d64:	e7fe      	b.n	8013d64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d66:	4b07      	ldr	r3, [pc, #28]	; (8013d84 <vTaskPlaceOnEventList+0x44>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	3318      	adds	r3, #24
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f7fe fa03 	bl	801217a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013d74:	2101      	movs	r1, #1
 8013d76:	6838      	ldr	r0, [r7, #0]
 8013d78:	f000 fc40 	bl	80145fc <prvAddCurrentTaskToDelayedList>
}
 8013d7c:	bf00      	nop
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	20000dac 	.word	0x20000dac

08013d88 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b086      	sub	sp, #24
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10a      	bne.n	8013db0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8013d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9e:	f383 8811 	msr	BASEPRI, r3
 8013da2:	f3bf 8f6f 	isb	sy
 8013da6:	f3bf 8f4f 	dsb	sy
 8013daa:	617b      	str	r3, [r7, #20]
}
 8013dac:	bf00      	nop
 8013dae:	e7fe      	b.n	8013dae <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013db0:	4b11      	ldr	r3, [pc, #68]	; (8013df8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d10a      	bne.n	8013dce <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dbc:	f383 8811 	msr	BASEPRI, r3
 8013dc0:	f3bf 8f6f 	isb	sy
 8013dc4:	f3bf 8f4f 	dsb	sy
 8013dc8:	613b      	str	r3, [r7, #16]
}
 8013dca:	bf00      	nop
 8013dcc:	e7fe      	b.n	8013dcc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013dce:	4b0b      	ldr	r3, [pc, #44]	; (8013dfc <vTaskPlaceOnUnorderedEventList+0x74>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	68ba      	ldr	r2, [r7, #8]
 8013dd4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013dd8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013dda:	4b08      	ldr	r3, [pc, #32]	; (8013dfc <vTaskPlaceOnUnorderedEventList+0x74>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	3318      	adds	r3, #24
 8013de0:	4619      	mov	r1, r3
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	f7fe f9a5 	bl	8012132 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013de8:	2101      	movs	r1, #1
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f000 fc06 	bl	80145fc <prvAddCurrentTaskToDelayedList>
}
 8013df0:	bf00      	nop
 8013df2:	3718      	adds	r7, #24
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	200012a8 	.word	0x200012a8
 8013dfc:	20000dac 	.word	0x20000dac

08013e00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b086      	sub	sp, #24
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d10a      	bne.n	8013e28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e16:	f383 8811 	msr	BASEPRI, r3
 8013e1a:	f3bf 8f6f 	isb	sy
 8013e1e:	f3bf 8f4f 	dsb	sy
 8013e22:	617b      	str	r3, [r7, #20]
}
 8013e24:	bf00      	nop
 8013e26:	e7fe      	b.n	8013e26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013e28:	4b0a      	ldr	r3, [pc, #40]	; (8013e54 <vTaskPlaceOnEventListRestricted+0x54>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	3318      	adds	r3, #24
 8013e2e:	4619      	mov	r1, r3
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f7fe f97e 	bl	8012132 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d002      	beq.n	8013e42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013e42:	6879      	ldr	r1, [r7, #4]
 8013e44:	68b8      	ldr	r0, [r7, #8]
 8013e46:	f000 fbd9 	bl	80145fc <prvAddCurrentTaskToDelayedList>
	}
 8013e4a:	bf00      	nop
 8013e4c:	3718      	adds	r7, #24
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	20000dac 	.word	0x20000dac

08013e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b086      	sub	sp, #24
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	68db      	ldr	r3, [r3, #12]
 8013e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d10a      	bne.n	8013e84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e72:	f383 8811 	msr	BASEPRI, r3
 8013e76:	f3bf 8f6f 	isb	sy
 8013e7a:	f3bf 8f4f 	dsb	sy
 8013e7e:	60fb      	str	r3, [r7, #12]
}
 8013e80:	bf00      	nop
 8013e82:	e7fe      	b.n	8013e82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	3318      	adds	r3, #24
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7fe f9af 	bl	80121ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e8e:	4b1e      	ldr	r3, [pc, #120]	; (8013f08 <xTaskRemoveFromEventList+0xb0>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d11d      	bne.n	8013ed2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	3304      	adds	r3, #4
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fe f9a6 	bl	80121ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013ea0:	693b      	ldr	r3, [r7, #16]
 8013ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ea4:	4b19      	ldr	r3, [pc, #100]	; (8013f0c <xTaskRemoveFromEventList+0xb4>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d903      	bls.n	8013eb4 <xTaskRemoveFromEventList+0x5c>
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eb0:	4a16      	ldr	r2, [pc, #88]	; (8013f0c <xTaskRemoveFromEventList+0xb4>)
 8013eb2:	6013      	str	r3, [r2, #0]
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eb8:	4613      	mov	r3, r2
 8013eba:	009b      	lsls	r3, r3, #2
 8013ebc:	4413      	add	r3, r2
 8013ebe:	009b      	lsls	r3, r3, #2
 8013ec0:	4a13      	ldr	r2, [pc, #76]	; (8013f10 <xTaskRemoveFromEventList+0xb8>)
 8013ec2:	441a      	add	r2, r3
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	3304      	adds	r3, #4
 8013ec8:	4619      	mov	r1, r3
 8013eca:	4610      	mov	r0, r2
 8013ecc:	f7fe f931 	bl	8012132 <vListInsertEnd>
 8013ed0:	e005      	b.n	8013ede <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	3318      	adds	r3, #24
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	480e      	ldr	r0, [pc, #56]	; (8013f14 <xTaskRemoveFromEventList+0xbc>)
 8013eda:	f7fe f92a 	bl	8012132 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ee2:	4b0d      	ldr	r3, [pc, #52]	; (8013f18 <xTaskRemoveFromEventList+0xc0>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d905      	bls.n	8013ef8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013eec:	2301      	movs	r3, #1
 8013eee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013ef0:	4b0a      	ldr	r3, [pc, #40]	; (8013f1c <xTaskRemoveFromEventList+0xc4>)
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	601a      	str	r2, [r3, #0]
 8013ef6:	e001      	b.n	8013efc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013efc:	697b      	ldr	r3, [r7, #20]
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3718      	adds	r7, #24
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	200012a8 	.word	0x200012a8
 8013f0c:	20001288 	.word	0x20001288
 8013f10:	20000db0 	.word	0x20000db0
 8013f14:	20001240 	.word	0x20001240
 8013f18:	20000dac 	.word	0x20000dac
 8013f1c:	20001294 	.word	0x20001294

08013f20 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8013f2a:	4b29      	ldr	r3, [pc, #164]	; (8013fd0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10a      	bne.n	8013f48 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f36:	f383 8811 	msr	BASEPRI, r3
 8013f3a:	f3bf 8f6f 	isb	sy
 8013f3e:	f3bf 8f4f 	dsb	sy
 8013f42:	613b      	str	r3, [r7, #16]
}
 8013f44:	bf00      	nop
 8013f46:	e7fe      	b.n	8013f46 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d10a      	bne.n	8013f74 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8013f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f62:	f383 8811 	msr	BASEPRI, r3
 8013f66:	f3bf 8f6f 	isb	sy
 8013f6a:	f3bf 8f4f 	dsb	sy
 8013f6e:	60fb      	str	r3, [r7, #12]
}
 8013f70:	bf00      	nop
 8013f72:	e7fe      	b.n	8013f72 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f7fe f939 	bl	80121ec <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	3304      	adds	r3, #4
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7fe f934 	bl	80121ec <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f88:	4b12      	ldr	r3, [pc, #72]	; (8013fd4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d903      	bls.n	8013f98 <vTaskRemoveFromUnorderedEventList+0x78>
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f94:	4a0f      	ldr	r2, [pc, #60]	; (8013fd4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013f96:	6013      	str	r3, [r2, #0]
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f9c:	4613      	mov	r3, r2
 8013f9e:	009b      	lsls	r3, r3, #2
 8013fa0:	4413      	add	r3, r2
 8013fa2:	009b      	lsls	r3, r3, #2
 8013fa4:	4a0c      	ldr	r2, [pc, #48]	; (8013fd8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8013fa6:	441a      	add	r2, r3
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	3304      	adds	r3, #4
 8013fac:	4619      	mov	r1, r3
 8013fae:	4610      	mov	r0, r2
 8013fb0:	f7fe f8bf 	bl	8012132 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb8:	4b08      	ldr	r3, [pc, #32]	; (8013fdc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d902      	bls.n	8013fc8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8013fc2:	4b07      	ldr	r3, [pc, #28]	; (8013fe0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013fc4:	2201      	movs	r2, #1
 8013fc6:	601a      	str	r2, [r3, #0]
	}
}
 8013fc8:	bf00      	nop
 8013fca:	3718      	adds	r7, #24
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	200012a8 	.word	0x200012a8
 8013fd4:	20001288 	.word	0x20001288
 8013fd8:	20000db0 	.word	0x20000db0
 8013fdc:	20000dac 	.word	0x20000dac
 8013fe0:	20001294 	.word	0x20001294

08013fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b083      	sub	sp, #12
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013fec:	4b06      	ldr	r3, [pc, #24]	; (8014008 <vTaskInternalSetTimeOutState+0x24>)
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013ff4:	4b05      	ldr	r3, [pc, #20]	; (801400c <vTaskInternalSetTimeOutState+0x28>)
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	605a      	str	r2, [r3, #4]
}
 8013ffc:	bf00      	nop
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr
 8014008:	20001298 	.word	0x20001298
 801400c:	20001284 	.word	0x20001284

08014010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b088      	sub	sp, #32
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d10a      	bne.n	8014036 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014024:	f383 8811 	msr	BASEPRI, r3
 8014028:	f3bf 8f6f 	isb	sy
 801402c:	f3bf 8f4f 	dsb	sy
 8014030:	613b      	str	r3, [r7, #16]
}
 8014032:	bf00      	nop
 8014034:	e7fe      	b.n	8014034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d10a      	bne.n	8014052 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014040:	f383 8811 	msr	BASEPRI, r3
 8014044:	f3bf 8f6f 	isb	sy
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	60fb      	str	r3, [r7, #12]
}
 801404e:	bf00      	nop
 8014050:	e7fe      	b.n	8014050 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014052:	f000 ffbf 	bl	8014fd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014056:	4b1d      	ldr	r3, [pc, #116]	; (80140cc <xTaskCheckForTimeOut+0xbc>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	69ba      	ldr	r2, [r7, #24]
 8014062:	1ad3      	subs	r3, r2, r3
 8014064:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406e:	d102      	bne.n	8014076 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014070:	2300      	movs	r3, #0
 8014072:	61fb      	str	r3, [r7, #28]
 8014074:	e023      	b.n	80140be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681a      	ldr	r2, [r3, #0]
 801407a:	4b15      	ldr	r3, [pc, #84]	; (80140d0 <xTaskCheckForTimeOut+0xc0>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	429a      	cmp	r2, r3
 8014080:	d007      	beq.n	8014092 <xTaskCheckForTimeOut+0x82>
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	69ba      	ldr	r2, [r7, #24]
 8014088:	429a      	cmp	r2, r3
 801408a:	d302      	bcc.n	8014092 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801408c:	2301      	movs	r3, #1
 801408e:	61fb      	str	r3, [r7, #28]
 8014090:	e015      	b.n	80140be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	697a      	ldr	r2, [r7, #20]
 8014098:	429a      	cmp	r2, r3
 801409a:	d20b      	bcs.n	80140b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	1ad2      	subs	r2, r2, r3
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f7ff ff9b 	bl	8013fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140ae:	2300      	movs	r3, #0
 80140b0:	61fb      	str	r3, [r7, #28]
 80140b2:	e004      	b.n	80140be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	2200      	movs	r2, #0
 80140b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140ba:	2301      	movs	r3, #1
 80140bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80140be:	f000 ffb9 	bl	8015034 <vPortExitCritical>

	return xReturn;
 80140c2:	69fb      	ldr	r3, [r7, #28]
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3720      	adds	r7, #32
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	20001284 	.word	0x20001284
 80140d0:	20001298 	.word	0x20001298

080140d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80140d4:	b480      	push	{r7}
 80140d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80140d8:	4b03      	ldr	r3, [pc, #12]	; (80140e8 <vTaskMissedYield+0x14>)
 80140da:	2201      	movs	r2, #1
 80140dc:	601a      	str	r2, [r3, #0]
}
 80140de:	bf00      	nop
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr
 80140e8:	20001294 	.word	0x20001294

080140ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80140f4:	f000 f852 	bl	801419c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80140f8:	4b06      	ldr	r3, [pc, #24]	; (8014114 <prvIdleTask+0x28>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d9f9      	bls.n	80140f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014100:	4b05      	ldr	r3, [pc, #20]	; (8014118 <prvIdleTask+0x2c>)
 8014102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014106:	601a      	str	r2, [r3, #0]
 8014108:	f3bf 8f4f 	dsb	sy
 801410c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014110:	e7f0      	b.n	80140f4 <prvIdleTask+0x8>
 8014112:	bf00      	nop
 8014114:	20000db0 	.word	0x20000db0
 8014118:	e000ed04 	.word	0xe000ed04

0801411c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014122:	2300      	movs	r3, #0
 8014124:	607b      	str	r3, [r7, #4]
 8014126:	e00c      	b.n	8014142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	4613      	mov	r3, r2
 801412c:	009b      	lsls	r3, r3, #2
 801412e:	4413      	add	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4a12      	ldr	r2, [pc, #72]	; (801417c <prvInitialiseTaskLists+0x60>)
 8014134:	4413      	add	r3, r2
 8014136:	4618      	mov	r0, r3
 8014138:	f7fd ffce 	bl	80120d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	3301      	adds	r3, #1
 8014140:	607b      	str	r3, [r7, #4]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2b37      	cmp	r3, #55	; 0x37
 8014146:	d9ef      	bls.n	8014128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014148:	480d      	ldr	r0, [pc, #52]	; (8014180 <prvInitialiseTaskLists+0x64>)
 801414a:	f7fd ffc5 	bl	80120d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801414e:	480d      	ldr	r0, [pc, #52]	; (8014184 <prvInitialiseTaskLists+0x68>)
 8014150:	f7fd ffc2 	bl	80120d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014154:	480c      	ldr	r0, [pc, #48]	; (8014188 <prvInitialiseTaskLists+0x6c>)
 8014156:	f7fd ffbf 	bl	80120d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801415a:	480c      	ldr	r0, [pc, #48]	; (801418c <prvInitialiseTaskLists+0x70>)
 801415c:	f7fd ffbc 	bl	80120d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014160:	480b      	ldr	r0, [pc, #44]	; (8014190 <prvInitialiseTaskLists+0x74>)
 8014162:	f7fd ffb9 	bl	80120d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014166:	4b0b      	ldr	r3, [pc, #44]	; (8014194 <prvInitialiseTaskLists+0x78>)
 8014168:	4a05      	ldr	r2, [pc, #20]	; (8014180 <prvInitialiseTaskLists+0x64>)
 801416a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801416c:	4b0a      	ldr	r3, [pc, #40]	; (8014198 <prvInitialiseTaskLists+0x7c>)
 801416e:	4a05      	ldr	r2, [pc, #20]	; (8014184 <prvInitialiseTaskLists+0x68>)
 8014170:	601a      	str	r2, [r3, #0]
}
 8014172:	bf00      	nop
 8014174:	3708      	adds	r7, #8
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}
 801417a:	bf00      	nop
 801417c:	20000db0 	.word	0x20000db0
 8014180:	20001210 	.word	0x20001210
 8014184:	20001224 	.word	0x20001224
 8014188:	20001240 	.word	0x20001240
 801418c:	20001254 	.word	0x20001254
 8014190:	2000126c 	.word	0x2000126c
 8014194:	20001238 	.word	0x20001238
 8014198:	2000123c 	.word	0x2000123c

0801419c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141a2:	e019      	b.n	80141d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141a4:	f000 ff16 	bl	8014fd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141a8:	4b10      	ldr	r3, [pc, #64]	; (80141ec <prvCheckTasksWaitingTermination+0x50>)
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	3304      	adds	r3, #4
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7fe f819 	bl	80121ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141ba:	4b0d      	ldr	r3, [pc, #52]	; (80141f0 <prvCheckTasksWaitingTermination+0x54>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	3b01      	subs	r3, #1
 80141c0:	4a0b      	ldr	r2, [pc, #44]	; (80141f0 <prvCheckTasksWaitingTermination+0x54>)
 80141c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141c4:	4b0b      	ldr	r3, [pc, #44]	; (80141f4 <prvCheckTasksWaitingTermination+0x58>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	3b01      	subs	r3, #1
 80141ca:	4a0a      	ldr	r2, [pc, #40]	; (80141f4 <prvCheckTasksWaitingTermination+0x58>)
 80141cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80141ce:	f000 ff31 	bl	8015034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f000 f810 	bl	80141f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141d8:	4b06      	ldr	r3, [pc, #24]	; (80141f4 <prvCheckTasksWaitingTermination+0x58>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d1e1      	bne.n	80141a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80141e0:	bf00      	nop
 80141e2:	bf00      	nop
 80141e4:	3708      	adds	r7, #8
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	20001254 	.word	0x20001254
 80141f0:	20001280 	.word	0x20001280
 80141f4:	20001268 	.word	0x20001268

080141f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b084      	sub	sp, #16
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014206:	2b00      	cmp	r3, #0
 8014208:	d108      	bne.n	801421c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801420e:	4618      	mov	r0, r3
 8014210:	f001 f8ce 	bl	80153b0 <vPortFree>
				vPortFree( pxTCB );
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f001 f8cb 	bl	80153b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801421a:	e018      	b.n	801424e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014222:	2b01      	cmp	r3, #1
 8014224:	d103      	bne.n	801422e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f001 f8c2 	bl	80153b0 <vPortFree>
	}
 801422c:	e00f      	b.n	801424e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014234:	2b02      	cmp	r3, #2
 8014236:	d00a      	beq.n	801424e <prvDeleteTCB+0x56>
	__asm volatile
 8014238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801423c:	f383 8811 	msr	BASEPRI, r3
 8014240:	f3bf 8f6f 	isb	sy
 8014244:	f3bf 8f4f 	dsb	sy
 8014248:	60fb      	str	r3, [r7, #12]
}
 801424a:	bf00      	nop
 801424c:	e7fe      	b.n	801424c <prvDeleteTCB+0x54>
	}
 801424e:	bf00      	nop
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
	...

08014258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014258:	b480      	push	{r7}
 801425a:	b083      	sub	sp, #12
 801425c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801425e:	4b0c      	ldr	r3, [pc, #48]	; (8014290 <prvResetNextTaskUnblockTime+0x38>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d104      	bne.n	8014272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014268:	4b0a      	ldr	r3, [pc, #40]	; (8014294 <prvResetNextTaskUnblockTime+0x3c>)
 801426a:	f04f 32ff 	mov.w	r2, #4294967295
 801426e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014270:	e008      	b.n	8014284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014272:	4b07      	ldr	r3, [pc, #28]	; (8014290 <prvResetNextTaskUnblockTime+0x38>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	4a04      	ldr	r2, [pc, #16]	; (8014294 <prvResetNextTaskUnblockTime+0x3c>)
 8014282:	6013      	str	r3, [r2, #0]
}
 8014284:	bf00      	nop
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr
 8014290:	20001238 	.word	0x20001238
 8014294:	200012a0 	.word	0x200012a0

08014298 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801429e:	4b05      	ldr	r3, [pc, #20]	; (80142b4 <xTaskGetCurrentTaskHandle+0x1c>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80142a4:	687b      	ldr	r3, [r7, #4]
	}
 80142a6:	4618      	mov	r0, r3
 80142a8:	370c      	adds	r7, #12
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr
 80142b2:	bf00      	nop
 80142b4:	20000dac 	.word	0x20000dac

080142b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80142b8:	b480      	push	{r7}
 80142ba:	b083      	sub	sp, #12
 80142bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80142be:	4b0b      	ldr	r3, [pc, #44]	; (80142ec <xTaskGetSchedulerState+0x34>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d102      	bne.n	80142cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80142c6:	2301      	movs	r3, #1
 80142c8:	607b      	str	r3, [r7, #4]
 80142ca:	e008      	b.n	80142de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142cc:	4b08      	ldr	r3, [pc, #32]	; (80142f0 <xTaskGetSchedulerState+0x38>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d102      	bne.n	80142da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80142d4:	2302      	movs	r3, #2
 80142d6:	607b      	str	r3, [r7, #4]
 80142d8:	e001      	b.n	80142de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80142da:	2300      	movs	r3, #0
 80142dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80142de:	687b      	ldr	r3, [r7, #4]
	}
 80142e0:	4618      	mov	r0, r3
 80142e2:	370c      	adds	r7, #12
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr
 80142ec:	2000128c 	.word	0x2000128c
 80142f0:	200012a8 	.word	0x200012a8

080142f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014300:	2300      	movs	r3, #0
 8014302:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d051      	beq.n	80143ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801430e:	4b2a      	ldr	r3, [pc, #168]	; (80143b8 <xTaskPriorityInherit+0xc4>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014314:	429a      	cmp	r2, r3
 8014316:	d241      	bcs.n	801439c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	699b      	ldr	r3, [r3, #24]
 801431c:	2b00      	cmp	r3, #0
 801431e:	db06      	blt.n	801432e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014320:	4b25      	ldr	r3, [pc, #148]	; (80143b8 <xTaskPriorityInherit+0xc4>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014326:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	6959      	ldr	r1, [r3, #20]
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014336:	4613      	mov	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4413      	add	r3, r2
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	4a1f      	ldr	r2, [pc, #124]	; (80143bc <xTaskPriorityInherit+0xc8>)
 8014340:	4413      	add	r3, r2
 8014342:	4299      	cmp	r1, r3
 8014344:	d122      	bne.n	801438c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	3304      	adds	r3, #4
 801434a:	4618      	mov	r0, r3
 801434c:	f7fd ff4e 	bl	80121ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014350:	4b19      	ldr	r3, [pc, #100]	; (80143b8 <xTaskPriorityInherit+0xc4>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801435e:	4b18      	ldr	r3, [pc, #96]	; (80143c0 <xTaskPriorityInherit+0xcc>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	429a      	cmp	r2, r3
 8014364:	d903      	bls.n	801436e <xTaskPriorityInherit+0x7a>
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801436a:	4a15      	ldr	r2, [pc, #84]	; (80143c0 <xTaskPriorityInherit+0xcc>)
 801436c:	6013      	str	r3, [r2, #0]
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014372:	4613      	mov	r3, r2
 8014374:	009b      	lsls	r3, r3, #2
 8014376:	4413      	add	r3, r2
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	4a10      	ldr	r2, [pc, #64]	; (80143bc <xTaskPriorityInherit+0xc8>)
 801437c:	441a      	add	r2, r3
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	3304      	adds	r3, #4
 8014382:	4619      	mov	r1, r3
 8014384:	4610      	mov	r0, r2
 8014386:	f7fd fed4 	bl	8012132 <vListInsertEnd>
 801438a:	e004      	b.n	8014396 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801438c:	4b0a      	ldr	r3, [pc, #40]	; (80143b8 <xTaskPriorityInherit+0xc4>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014396:	2301      	movs	r3, #1
 8014398:	60fb      	str	r3, [r7, #12]
 801439a:	e008      	b.n	80143ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143a0:	4b05      	ldr	r3, [pc, #20]	; (80143b8 <xTaskPriorityInherit+0xc4>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d201      	bcs.n	80143ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80143aa:	2301      	movs	r3, #1
 80143ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80143ae:	68fb      	ldr	r3, [r7, #12]
	}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3710      	adds	r7, #16
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	20000dac 	.word	0x20000dac
 80143bc:	20000db0 	.word	0x20000db0
 80143c0:	20001288 	.word	0x20001288

080143c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b086      	sub	sp, #24
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80143d0:	2300      	movs	r3, #0
 80143d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d056      	beq.n	8014488 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80143da:	4b2e      	ldr	r3, [pc, #184]	; (8014494 <xTaskPriorityDisinherit+0xd0>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	693a      	ldr	r2, [r7, #16]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d00a      	beq.n	80143fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80143e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e8:	f383 8811 	msr	BASEPRI, r3
 80143ec:	f3bf 8f6f 	isb	sy
 80143f0:	f3bf 8f4f 	dsb	sy
 80143f4:	60fb      	str	r3, [r7, #12]
}
 80143f6:	bf00      	nop
 80143f8:	e7fe      	b.n	80143f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d10a      	bne.n	8014418 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014406:	f383 8811 	msr	BASEPRI, r3
 801440a:	f3bf 8f6f 	isb	sy
 801440e:	f3bf 8f4f 	dsb	sy
 8014412:	60bb      	str	r3, [r7, #8]
}
 8014414:	bf00      	nop
 8014416:	e7fe      	b.n	8014416 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801441c:	1e5a      	subs	r2, r3, #1
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801442a:	429a      	cmp	r2, r3
 801442c:	d02c      	beq.n	8014488 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014432:	2b00      	cmp	r3, #0
 8014434:	d128      	bne.n	8014488 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	3304      	adds	r3, #4
 801443a:	4618      	mov	r0, r3
 801443c:	f7fd fed6 	bl	80121ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014440:	693b      	ldr	r3, [r7, #16]
 8014442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801444c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014454:	693b      	ldr	r3, [r7, #16]
 8014456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014458:	4b0f      	ldr	r3, [pc, #60]	; (8014498 <xTaskPriorityDisinherit+0xd4>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	429a      	cmp	r2, r3
 801445e:	d903      	bls.n	8014468 <xTaskPriorityDisinherit+0xa4>
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014464:	4a0c      	ldr	r2, [pc, #48]	; (8014498 <xTaskPriorityDisinherit+0xd4>)
 8014466:	6013      	str	r3, [r2, #0]
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446c:	4613      	mov	r3, r2
 801446e:	009b      	lsls	r3, r3, #2
 8014470:	4413      	add	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	4a09      	ldr	r2, [pc, #36]	; (801449c <xTaskPriorityDisinherit+0xd8>)
 8014476:	441a      	add	r2, r3
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	3304      	adds	r3, #4
 801447c:	4619      	mov	r1, r3
 801447e:	4610      	mov	r0, r2
 8014480:	f7fd fe57 	bl	8012132 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014484:	2301      	movs	r3, #1
 8014486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014488:	697b      	ldr	r3, [r7, #20]
	}
 801448a:	4618      	mov	r0, r3
 801448c:	3718      	adds	r7, #24
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	20000dac 	.word	0x20000dac
 8014498:	20001288 	.word	0x20001288
 801449c:	20000db0 	.word	0x20000db0

080144a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b088      	sub	sp, #32
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80144ae:	2301      	movs	r3, #1
 80144b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d06a      	beq.n	801458e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10a      	bne.n	80144d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80144c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c4:	f383 8811 	msr	BASEPRI, r3
 80144c8:	f3bf 8f6f 	isb	sy
 80144cc:	f3bf 8f4f 	dsb	sy
 80144d0:	60fb      	str	r3, [r7, #12]
}
 80144d2:	bf00      	nop
 80144d4:	e7fe      	b.n	80144d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144da:	683a      	ldr	r2, [r7, #0]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d902      	bls.n	80144e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	61fb      	str	r3, [r7, #28]
 80144e4:	e002      	b.n	80144ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f0:	69fa      	ldr	r2, [r7, #28]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d04b      	beq.n	801458e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144fa:	697a      	ldr	r2, [r7, #20]
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d146      	bne.n	801458e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014500:	4b25      	ldr	r3, [pc, #148]	; (8014598 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	69ba      	ldr	r2, [r7, #24]
 8014506:	429a      	cmp	r2, r3
 8014508:	d10a      	bne.n	8014520 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801450e:	f383 8811 	msr	BASEPRI, r3
 8014512:	f3bf 8f6f 	isb	sy
 8014516:	f3bf 8f4f 	dsb	sy
 801451a:	60bb      	str	r3, [r7, #8]
}
 801451c:	bf00      	nop
 801451e:	e7fe      	b.n	801451e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014520:	69bb      	ldr	r3, [r7, #24]
 8014522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014524:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	69fa      	ldr	r2, [r7, #28]
 801452a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801452c:	69bb      	ldr	r3, [r7, #24]
 801452e:	699b      	ldr	r3, [r3, #24]
 8014530:	2b00      	cmp	r3, #0
 8014532:	db04      	blt.n	801453e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	6959      	ldr	r1, [r3, #20]
 8014542:	693a      	ldr	r2, [r7, #16]
 8014544:	4613      	mov	r3, r2
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	4413      	add	r3, r2
 801454a:	009b      	lsls	r3, r3, #2
 801454c:	4a13      	ldr	r2, [pc, #76]	; (801459c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801454e:	4413      	add	r3, r2
 8014550:	4299      	cmp	r1, r3
 8014552:	d11c      	bne.n	801458e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014554:	69bb      	ldr	r3, [r7, #24]
 8014556:	3304      	adds	r3, #4
 8014558:	4618      	mov	r0, r3
 801455a:	f7fd fe47 	bl	80121ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801455e:	69bb      	ldr	r3, [r7, #24]
 8014560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014562:	4b0f      	ldr	r3, [pc, #60]	; (80145a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	429a      	cmp	r2, r3
 8014568:	d903      	bls.n	8014572 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801456e:	4a0c      	ldr	r2, [pc, #48]	; (80145a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014570:	6013      	str	r3, [r2, #0]
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014576:	4613      	mov	r3, r2
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	4413      	add	r3, r2
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	4a07      	ldr	r2, [pc, #28]	; (801459c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014580:	441a      	add	r2, r3
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	3304      	adds	r3, #4
 8014586:	4619      	mov	r1, r3
 8014588:	4610      	mov	r0, r2
 801458a:	f7fd fdd2 	bl	8012132 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801458e:	bf00      	nop
 8014590:	3720      	adds	r7, #32
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	20000dac 	.word	0x20000dac
 801459c:	20000db0 	.word	0x20000db0
 80145a0:	20001288 	.word	0x20001288

080145a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80145a4:	b480      	push	{r7}
 80145a6:	b083      	sub	sp, #12
 80145a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80145aa:	4b09      	ldr	r3, [pc, #36]	; (80145d0 <uxTaskResetEventItemValue+0x2c>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	699b      	ldr	r3, [r3, #24]
 80145b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145b2:	4b07      	ldr	r3, [pc, #28]	; (80145d0 <uxTaskResetEventItemValue+0x2c>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145b8:	4b05      	ldr	r3, [pc, #20]	; (80145d0 <uxTaskResetEventItemValue+0x2c>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80145c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80145c2:	687b      	ldr	r3, [r7, #4]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	370c      	adds	r7, #12
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr
 80145d0:	20000dac 	.word	0x20000dac

080145d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80145d4:	b480      	push	{r7}
 80145d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80145d8:	4b07      	ldr	r3, [pc, #28]	; (80145f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d004      	beq.n	80145ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80145e0:	4b05      	ldr	r3, [pc, #20]	; (80145f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80145e6:	3201      	adds	r2, #1
 80145e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80145ea:	4b03      	ldr	r3, [pc, #12]	; (80145f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80145ec:	681b      	ldr	r3, [r3, #0]
	}
 80145ee:	4618      	mov	r0, r3
 80145f0:	46bd      	mov	sp, r7
 80145f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f6:	4770      	bx	lr
 80145f8:	20000dac 	.word	0x20000dac

080145fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014606:	4b21      	ldr	r3, [pc, #132]	; (801468c <prvAddCurrentTaskToDelayedList+0x90>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801460c:	4b20      	ldr	r3, [pc, #128]	; (8014690 <prvAddCurrentTaskToDelayedList+0x94>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	3304      	adds	r3, #4
 8014612:	4618      	mov	r0, r3
 8014614:	f7fd fdea 	bl	80121ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801461e:	d10a      	bne.n	8014636 <prvAddCurrentTaskToDelayedList+0x3a>
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d007      	beq.n	8014636 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014626:	4b1a      	ldr	r3, [pc, #104]	; (8014690 <prvAddCurrentTaskToDelayedList+0x94>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	3304      	adds	r3, #4
 801462c:	4619      	mov	r1, r3
 801462e:	4819      	ldr	r0, [pc, #100]	; (8014694 <prvAddCurrentTaskToDelayedList+0x98>)
 8014630:	f7fd fd7f 	bl	8012132 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014634:	e026      	b.n	8014684 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014636:	68fa      	ldr	r2, [r7, #12]
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	4413      	add	r3, r2
 801463c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801463e:	4b14      	ldr	r3, [pc, #80]	; (8014690 <prvAddCurrentTaskToDelayedList+0x94>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	68ba      	ldr	r2, [r7, #8]
 8014644:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014646:	68ba      	ldr	r2, [r7, #8]
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	429a      	cmp	r2, r3
 801464c:	d209      	bcs.n	8014662 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801464e:	4b12      	ldr	r3, [pc, #72]	; (8014698 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	4b0f      	ldr	r3, [pc, #60]	; (8014690 <prvAddCurrentTaskToDelayedList+0x94>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	3304      	adds	r3, #4
 8014658:	4619      	mov	r1, r3
 801465a:	4610      	mov	r0, r2
 801465c:	f7fd fd8d 	bl	801217a <vListInsert>
}
 8014660:	e010      	b.n	8014684 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014662:	4b0e      	ldr	r3, [pc, #56]	; (801469c <prvAddCurrentTaskToDelayedList+0xa0>)
 8014664:	681a      	ldr	r2, [r3, #0]
 8014666:	4b0a      	ldr	r3, [pc, #40]	; (8014690 <prvAddCurrentTaskToDelayedList+0x94>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	3304      	adds	r3, #4
 801466c:	4619      	mov	r1, r3
 801466e:	4610      	mov	r0, r2
 8014670:	f7fd fd83 	bl	801217a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014674:	4b0a      	ldr	r3, [pc, #40]	; (80146a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	68ba      	ldr	r2, [r7, #8]
 801467a:	429a      	cmp	r2, r3
 801467c:	d202      	bcs.n	8014684 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801467e:	4a08      	ldr	r2, [pc, #32]	; (80146a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	6013      	str	r3, [r2, #0]
}
 8014684:	bf00      	nop
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}
 801468c:	20001284 	.word	0x20001284
 8014690:	20000dac 	.word	0x20000dac
 8014694:	2000126c 	.word	0x2000126c
 8014698:	2000123c 	.word	0x2000123c
 801469c:	20001238 	.word	0x20001238
 80146a0:	200012a0 	.word	0x200012a0

080146a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b08a      	sub	sp, #40	; 0x28
 80146a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80146aa:	2300      	movs	r3, #0
 80146ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80146ae:	f000 fb07 	bl	8014cc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80146b2:	4b1c      	ldr	r3, [pc, #112]	; (8014724 <xTimerCreateTimerTask+0x80>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d021      	beq.n	80146fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80146ba:	2300      	movs	r3, #0
 80146bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80146be:	2300      	movs	r3, #0
 80146c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80146c2:	1d3a      	adds	r2, r7, #4
 80146c4:	f107 0108 	add.w	r1, r7, #8
 80146c8:	f107 030c 	add.w	r3, r7, #12
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7fd fafb 	bl	8011cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80146d2:	6879      	ldr	r1, [r7, #4]
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	68fa      	ldr	r2, [r7, #12]
 80146d8:	9202      	str	r2, [sp, #8]
 80146da:	9301      	str	r3, [sp, #4]
 80146dc:	2302      	movs	r3, #2
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	2300      	movs	r3, #0
 80146e2:	460a      	mov	r2, r1
 80146e4:	4910      	ldr	r1, [pc, #64]	; (8014728 <xTimerCreateTimerTask+0x84>)
 80146e6:	4811      	ldr	r0, [pc, #68]	; (801472c <xTimerCreateTimerTask+0x88>)
 80146e8:	f7fe fd2a 	bl	8013140 <xTaskCreateStatic>
 80146ec:	4603      	mov	r3, r0
 80146ee:	4a10      	ldr	r2, [pc, #64]	; (8014730 <xTimerCreateTimerTask+0x8c>)
 80146f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80146f2:	4b0f      	ldr	r3, [pc, #60]	; (8014730 <xTimerCreateTimerTask+0x8c>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d001      	beq.n	80146fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80146fa:	2301      	movs	r3, #1
 80146fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d10a      	bne.n	801471a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014708:	f383 8811 	msr	BASEPRI, r3
 801470c:	f3bf 8f6f 	isb	sy
 8014710:	f3bf 8f4f 	dsb	sy
 8014714:	613b      	str	r3, [r7, #16]
}
 8014716:	bf00      	nop
 8014718:	e7fe      	b.n	8014718 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801471a:	697b      	ldr	r3, [r7, #20]
}
 801471c:	4618      	mov	r0, r3
 801471e:	3718      	adds	r7, #24
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	200012dc 	.word	0x200012dc
 8014728:	08019f94 	.word	0x08019f94
 801472c:	08014869 	.word	0x08014869
 8014730:	200012e0 	.word	0x200012e0

08014734 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b08a      	sub	sp, #40	; 0x28
 8014738:	af00      	add	r7, sp, #0
 801473a:	60f8      	str	r0, [r7, #12]
 801473c:	60b9      	str	r1, [r7, #8]
 801473e:	607a      	str	r2, [r7, #4]
 8014740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014742:	2300      	movs	r3, #0
 8014744:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d10a      	bne.n	8014762 <xTimerGenericCommand+0x2e>
	__asm volatile
 801474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014750:	f383 8811 	msr	BASEPRI, r3
 8014754:	f3bf 8f6f 	isb	sy
 8014758:	f3bf 8f4f 	dsb	sy
 801475c:	623b      	str	r3, [r7, #32]
}
 801475e:	bf00      	nop
 8014760:	e7fe      	b.n	8014760 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014762:	4b1a      	ldr	r3, [pc, #104]	; (80147cc <xTimerGenericCommand+0x98>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d02a      	beq.n	80147c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	2b05      	cmp	r3, #5
 801477a:	dc18      	bgt.n	80147ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801477c:	f7ff fd9c 	bl	80142b8 <xTaskGetSchedulerState>
 8014780:	4603      	mov	r3, r0
 8014782:	2b02      	cmp	r3, #2
 8014784:	d109      	bne.n	801479a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014786:	4b11      	ldr	r3, [pc, #68]	; (80147cc <xTimerGenericCommand+0x98>)
 8014788:	6818      	ldr	r0, [r3, #0]
 801478a:	f107 0110 	add.w	r1, r7, #16
 801478e:	2300      	movs	r3, #0
 8014790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014792:	f7fd ff49 	bl	8012628 <xQueueGenericSend>
 8014796:	6278      	str	r0, [r7, #36]	; 0x24
 8014798:	e012      	b.n	80147c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801479a:	4b0c      	ldr	r3, [pc, #48]	; (80147cc <xTimerGenericCommand+0x98>)
 801479c:	6818      	ldr	r0, [r3, #0]
 801479e:	f107 0110 	add.w	r1, r7, #16
 80147a2:	2300      	movs	r3, #0
 80147a4:	2200      	movs	r2, #0
 80147a6:	f7fd ff3f 	bl	8012628 <xQueueGenericSend>
 80147aa:	6278      	str	r0, [r7, #36]	; 0x24
 80147ac:	e008      	b.n	80147c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80147ae:	4b07      	ldr	r3, [pc, #28]	; (80147cc <xTimerGenericCommand+0x98>)
 80147b0:	6818      	ldr	r0, [r3, #0]
 80147b2:	f107 0110 	add.w	r1, r7, #16
 80147b6:	2300      	movs	r3, #0
 80147b8:	683a      	ldr	r2, [r7, #0]
 80147ba:	f7fe f833 	bl	8012824 <xQueueGenericSendFromISR>
 80147be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80147c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3728      	adds	r7, #40	; 0x28
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	200012dc 	.word	0x200012dc

080147d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b088      	sub	sp, #32
 80147d4:	af02      	add	r7, sp, #8
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147da:	4b22      	ldr	r3, [pc, #136]	; (8014864 <prvProcessExpiredTimer+0x94>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	68db      	ldr	r3, [r3, #12]
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	3304      	adds	r3, #4
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fd fcff 	bl	80121ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147f4:	f003 0304 	and.w	r3, r3, #4
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d022      	beq.n	8014842 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	699a      	ldr	r2, [r3, #24]
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	18d1      	adds	r1, r2, r3
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	683a      	ldr	r2, [r7, #0]
 8014808:	6978      	ldr	r0, [r7, #20]
 801480a:	f000 f8d1 	bl	80149b0 <prvInsertTimerInActiveList>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	d01f      	beq.n	8014854 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014814:	2300      	movs	r3, #0
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	2300      	movs	r3, #0
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	2100      	movs	r1, #0
 801481e:	6978      	ldr	r0, [r7, #20]
 8014820:	f7ff ff88 	bl	8014734 <xTimerGenericCommand>
 8014824:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d113      	bne.n	8014854 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014830:	f383 8811 	msr	BASEPRI, r3
 8014834:	f3bf 8f6f 	isb	sy
 8014838:	f3bf 8f4f 	dsb	sy
 801483c:	60fb      	str	r3, [r7, #12]
}
 801483e:	bf00      	nop
 8014840:	e7fe      	b.n	8014840 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014842:	697b      	ldr	r3, [r7, #20]
 8014844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014848:	f023 0301 	bic.w	r3, r3, #1
 801484c:	b2da      	uxtb	r2, r3
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	6a1b      	ldr	r3, [r3, #32]
 8014858:	6978      	ldr	r0, [r7, #20]
 801485a:	4798      	blx	r3
}
 801485c:	bf00      	nop
 801485e:	3718      	adds	r7, #24
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}
 8014864:	200012d4 	.word	0x200012d4

08014868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014870:	f107 0308 	add.w	r3, r7, #8
 8014874:	4618      	mov	r0, r3
 8014876:	f000 f857 	bl	8014928 <prvGetNextExpireTime>
 801487a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	4619      	mov	r1, r3
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f000 f803 	bl	801488c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014886:	f000 f8d5 	bl	8014a34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801488a:	e7f1      	b.n	8014870 <prvTimerTask+0x8>

0801488c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014896:	f7ff f86d 	bl	8013974 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801489a:	f107 0308 	add.w	r3, r7, #8
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 f866 	bl	8014970 <prvSampleTimeNow>
 80148a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d130      	bne.n	801490e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d10a      	bne.n	80148c8 <prvProcessTimerOrBlockTask+0x3c>
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d806      	bhi.n	80148c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80148ba:	f7ff f869 	bl	8013990 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80148be:	68f9      	ldr	r1, [r7, #12]
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7ff ff85 	bl	80147d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80148c6:	e024      	b.n	8014912 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d008      	beq.n	80148e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80148ce:	4b13      	ldr	r3, [pc, #76]	; (801491c <prvProcessTimerOrBlockTask+0x90>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d101      	bne.n	80148dc <prvProcessTimerOrBlockTask+0x50>
 80148d8:	2301      	movs	r3, #1
 80148da:	e000      	b.n	80148de <prvProcessTimerOrBlockTask+0x52>
 80148dc:	2300      	movs	r3, #0
 80148de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80148e0:	4b0f      	ldr	r3, [pc, #60]	; (8014920 <prvProcessTimerOrBlockTask+0x94>)
 80148e2:	6818      	ldr	r0, [r3, #0]
 80148e4:	687a      	ldr	r2, [r7, #4]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	1ad3      	subs	r3, r2, r3
 80148ea:	683a      	ldr	r2, [r7, #0]
 80148ec:	4619      	mov	r1, r3
 80148ee:	f7fe fbf3 	bl	80130d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80148f2:	f7ff f84d 	bl	8013990 <xTaskResumeAll>
 80148f6:	4603      	mov	r3, r0
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d10a      	bne.n	8014912 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80148fc:	4b09      	ldr	r3, [pc, #36]	; (8014924 <prvProcessTimerOrBlockTask+0x98>)
 80148fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014902:	601a      	str	r2, [r3, #0]
 8014904:	f3bf 8f4f 	dsb	sy
 8014908:	f3bf 8f6f 	isb	sy
}
 801490c:	e001      	b.n	8014912 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801490e:	f7ff f83f 	bl	8013990 <xTaskResumeAll>
}
 8014912:	bf00      	nop
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	200012d8 	.word	0x200012d8
 8014920:	200012dc 	.word	0x200012dc
 8014924:	e000ed04 	.word	0xe000ed04

08014928 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014928:	b480      	push	{r7}
 801492a:	b085      	sub	sp, #20
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014930:	4b0e      	ldr	r3, [pc, #56]	; (801496c <prvGetNextExpireTime+0x44>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d101      	bne.n	801493e <prvGetNextExpireTime+0x16>
 801493a:	2201      	movs	r2, #1
 801493c:	e000      	b.n	8014940 <prvGetNextExpireTime+0x18>
 801493e:	2200      	movs	r2, #0
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d105      	bne.n	8014958 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801494c:	4b07      	ldr	r3, [pc, #28]	; (801496c <prvGetNextExpireTime+0x44>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	60fb      	str	r3, [r7, #12]
 8014956:	e001      	b.n	801495c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014958:	2300      	movs	r3, #0
 801495a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801495c:	68fb      	ldr	r3, [r7, #12]
}
 801495e:	4618      	mov	r0, r3
 8014960:	3714      	adds	r7, #20
 8014962:	46bd      	mov	sp, r7
 8014964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014968:	4770      	bx	lr
 801496a:	bf00      	nop
 801496c:	200012d4 	.word	0x200012d4

08014970 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014978:	f7ff f8a8 	bl	8013acc <xTaskGetTickCount>
 801497c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801497e:	4b0b      	ldr	r3, [pc, #44]	; (80149ac <prvSampleTimeNow+0x3c>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	429a      	cmp	r2, r3
 8014986:	d205      	bcs.n	8014994 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014988:	f000 f936 	bl	8014bf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2201      	movs	r2, #1
 8014990:	601a      	str	r2, [r3, #0]
 8014992:	e002      	b.n	801499a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801499a:	4a04      	ldr	r2, [pc, #16]	; (80149ac <prvSampleTimeNow+0x3c>)
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80149a0:	68fb      	ldr	r3, [r7, #12]
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3710      	adds	r7, #16
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
 80149aa:	bf00      	nop
 80149ac:	200012e4 	.word	0x200012e4

080149b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
 80149bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80149be:	2300      	movs	r3, #0
 80149c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	68fa      	ldr	r2, [r7, #12]
 80149cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d812      	bhi.n	80149fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	1ad2      	subs	r2, r2, r3
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	699b      	ldr	r3, [r3, #24]
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d302      	bcc.n	80149ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80149e4:	2301      	movs	r3, #1
 80149e6:	617b      	str	r3, [r7, #20]
 80149e8:	e01b      	b.n	8014a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80149ea:	4b10      	ldr	r3, [pc, #64]	; (8014a2c <prvInsertTimerInActiveList+0x7c>)
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	3304      	adds	r3, #4
 80149f2:	4619      	mov	r1, r3
 80149f4:	4610      	mov	r0, r2
 80149f6:	f7fd fbc0 	bl	801217a <vListInsert>
 80149fa:	e012      	b.n	8014a22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d206      	bcs.n	8014a12 <prvInsertTimerInActiveList+0x62>
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d302      	bcc.n	8014a12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	617b      	str	r3, [r7, #20]
 8014a10:	e007      	b.n	8014a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014a12:	4b07      	ldr	r3, [pc, #28]	; (8014a30 <prvInsertTimerInActiveList+0x80>)
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	3304      	adds	r3, #4
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	4610      	mov	r0, r2
 8014a1e:	f7fd fbac 	bl	801217a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014a22:	697b      	ldr	r3, [r7, #20]
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3718      	adds	r7, #24
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	200012d8 	.word	0x200012d8
 8014a30:	200012d4 	.word	0x200012d4

08014a34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b08e      	sub	sp, #56	; 0x38
 8014a38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014a3a:	e0ca      	b.n	8014bd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	da18      	bge.n	8014a74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014a42:	1d3b      	adds	r3, r7, #4
 8014a44:	3304      	adds	r3, #4
 8014a46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d10a      	bne.n	8014a64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a52:	f383 8811 	msr	BASEPRI, r3
 8014a56:	f3bf 8f6f 	isb	sy
 8014a5a:	f3bf 8f4f 	dsb	sy
 8014a5e:	61fb      	str	r3, [r7, #28]
}
 8014a60:	bf00      	nop
 8014a62:	e7fe      	b.n	8014a62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a6a:	6850      	ldr	r0, [r2, #4]
 8014a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a6e:	6892      	ldr	r2, [r2, #8]
 8014a70:	4611      	mov	r1, r2
 8014a72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f2c0 80ab 	blt.w	8014bd2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a82:	695b      	ldr	r3, [r3, #20]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d004      	beq.n	8014a92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8a:	3304      	adds	r3, #4
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7fd fbad 	bl	80121ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014a92:	463b      	mov	r3, r7
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7ff ff6b 	bl	8014970 <prvSampleTimeNow>
 8014a9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2b09      	cmp	r3, #9
 8014aa0:	f200 8096 	bhi.w	8014bd0 <prvProcessReceivedCommands+0x19c>
 8014aa4:	a201      	add	r2, pc, #4	; (adr r2, 8014aac <prvProcessReceivedCommands+0x78>)
 8014aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aaa:	bf00      	nop
 8014aac:	08014ad5 	.word	0x08014ad5
 8014ab0:	08014ad5 	.word	0x08014ad5
 8014ab4:	08014ad5 	.word	0x08014ad5
 8014ab8:	08014b49 	.word	0x08014b49
 8014abc:	08014b5d 	.word	0x08014b5d
 8014ac0:	08014ba7 	.word	0x08014ba7
 8014ac4:	08014ad5 	.word	0x08014ad5
 8014ac8:	08014ad5 	.word	0x08014ad5
 8014acc:	08014b49 	.word	0x08014b49
 8014ad0:	08014b5d 	.word	0x08014b5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ada:	f043 0301 	orr.w	r3, r3, #1
 8014ade:	b2da      	uxtb	r2, r3
 8014ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014ae6:	68ba      	ldr	r2, [r7, #8]
 8014ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aea:	699b      	ldr	r3, [r3, #24]
 8014aec:	18d1      	adds	r1, r2, r3
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014af4:	f7ff ff5c 	bl	80149b0 <prvInsertTimerInActiveList>
 8014af8:	4603      	mov	r3, r0
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d069      	beq.n	8014bd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b00:	6a1b      	ldr	r3, [r3, #32]
 8014b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b0c:	f003 0304 	and.w	r3, r3, #4
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d05e      	beq.n	8014bd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014b14:	68ba      	ldr	r2, [r7, #8]
 8014b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b18:	699b      	ldr	r3, [r3, #24]
 8014b1a:	441a      	add	r2, r3
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	9300      	str	r3, [sp, #0]
 8014b20:	2300      	movs	r3, #0
 8014b22:	2100      	movs	r1, #0
 8014b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b26:	f7ff fe05 	bl	8014734 <xTimerGenericCommand>
 8014b2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014b2c:	6a3b      	ldr	r3, [r7, #32]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d14f      	bne.n	8014bd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b36:	f383 8811 	msr	BASEPRI, r3
 8014b3a:	f3bf 8f6f 	isb	sy
 8014b3e:	f3bf 8f4f 	dsb	sy
 8014b42:	61bb      	str	r3, [r7, #24]
}
 8014b44:	bf00      	nop
 8014b46:	e7fe      	b.n	8014b46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b4e:	f023 0301 	bic.w	r3, r3, #1
 8014b52:	b2da      	uxtb	r2, r3
 8014b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014b5a:	e03a      	b.n	8014bd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b62:	f043 0301 	orr.w	r3, r3, #1
 8014b66:	b2da      	uxtb	r2, r3
 8014b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b76:	699b      	ldr	r3, [r3, #24]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d10a      	bne.n	8014b92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b80:	f383 8811 	msr	BASEPRI, r3
 8014b84:	f3bf 8f6f 	isb	sy
 8014b88:	f3bf 8f4f 	dsb	sy
 8014b8c:	617b      	str	r3, [r7, #20]
}
 8014b8e:	bf00      	nop
 8014b90:	e7fe      	b.n	8014b90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b94:	699a      	ldr	r2, [r3, #24]
 8014b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b98:	18d1      	adds	r1, r2, r3
 8014b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ba0:	f7ff ff06 	bl	80149b0 <prvInsertTimerInActiveList>
					break;
 8014ba4:	e015      	b.n	8014bd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bac:	f003 0302 	and.w	r3, r3, #2
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d103      	bne.n	8014bbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bb6:	f000 fbfb 	bl	80153b0 <vPortFree>
 8014bba:	e00a      	b.n	8014bd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bc2:	f023 0301 	bic.w	r3, r3, #1
 8014bc6:	b2da      	uxtb	r2, r3
 8014bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014bce:	e000      	b.n	8014bd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8014bd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014bd2:	4b08      	ldr	r3, [pc, #32]	; (8014bf4 <prvProcessReceivedCommands+0x1c0>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	1d39      	adds	r1, r7, #4
 8014bd8:	2200      	movs	r2, #0
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fd febe 	bl	801295c <xQueueReceive>
 8014be0:	4603      	mov	r3, r0
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	f47f af2a 	bne.w	8014a3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8014be8:	bf00      	nop
 8014bea:	bf00      	nop
 8014bec:	3730      	adds	r7, #48	; 0x30
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	200012dc 	.word	0x200012dc

08014bf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b088      	sub	sp, #32
 8014bfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014bfe:	e048      	b.n	8014c92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014c00:	4b2d      	ldr	r3, [pc, #180]	; (8014cb8 <prvSwitchTimerLists+0xc0>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	68db      	ldr	r3, [r3, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c0a:	4b2b      	ldr	r3, [pc, #172]	; (8014cb8 <prvSwitchTimerLists+0xc0>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	68db      	ldr	r3, [r3, #12]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	3304      	adds	r3, #4
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7fd fae7 	bl	80121ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	6a1b      	ldr	r3, [r3, #32]
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c2c:	f003 0304 	and.w	r3, r3, #4
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d02e      	beq.n	8014c92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	699b      	ldr	r3, [r3, #24]
 8014c38:	693a      	ldr	r2, [r7, #16]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014c3e:	68ba      	ldr	r2, [r7, #8]
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d90e      	bls.n	8014c64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	68ba      	ldr	r2, [r7, #8]
 8014c4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	68fa      	ldr	r2, [r7, #12]
 8014c50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014c52:	4b19      	ldr	r3, [pc, #100]	; (8014cb8 <prvSwitchTimerLists+0xc0>)
 8014c54:	681a      	ldr	r2, [r3, #0]
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	3304      	adds	r3, #4
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	4610      	mov	r0, r2
 8014c5e:	f7fd fa8c 	bl	801217a <vListInsert>
 8014c62:	e016      	b.n	8014c92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014c64:	2300      	movs	r3, #0
 8014c66:	9300      	str	r3, [sp, #0]
 8014c68:	2300      	movs	r3, #0
 8014c6a:	693a      	ldr	r2, [r7, #16]
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	68f8      	ldr	r0, [r7, #12]
 8014c70:	f7ff fd60 	bl	8014734 <xTimerGenericCommand>
 8014c74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d10a      	bne.n	8014c92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c80:	f383 8811 	msr	BASEPRI, r3
 8014c84:	f3bf 8f6f 	isb	sy
 8014c88:	f3bf 8f4f 	dsb	sy
 8014c8c:	603b      	str	r3, [r7, #0]
}
 8014c8e:	bf00      	nop
 8014c90:	e7fe      	b.n	8014c90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014c92:	4b09      	ldr	r3, [pc, #36]	; (8014cb8 <prvSwitchTimerLists+0xc0>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d1b1      	bne.n	8014c00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014c9c:	4b06      	ldr	r3, [pc, #24]	; (8014cb8 <prvSwitchTimerLists+0xc0>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014ca2:	4b06      	ldr	r3, [pc, #24]	; (8014cbc <prvSwitchTimerLists+0xc4>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	4a04      	ldr	r2, [pc, #16]	; (8014cb8 <prvSwitchTimerLists+0xc0>)
 8014ca8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014caa:	4a04      	ldr	r2, [pc, #16]	; (8014cbc <prvSwitchTimerLists+0xc4>)
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	6013      	str	r3, [r2, #0]
}
 8014cb0:	bf00      	nop
 8014cb2:	3718      	adds	r7, #24
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	200012d4 	.word	0x200012d4
 8014cbc:	200012d8 	.word	0x200012d8

08014cc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014cc6:	f000 f985 	bl	8014fd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014cca:	4b15      	ldr	r3, [pc, #84]	; (8014d20 <prvCheckForValidListAndQueue+0x60>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d120      	bne.n	8014d14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014cd2:	4814      	ldr	r0, [pc, #80]	; (8014d24 <prvCheckForValidListAndQueue+0x64>)
 8014cd4:	f7fd fa00 	bl	80120d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014cd8:	4813      	ldr	r0, [pc, #76]	; (8014d28 <prvCheckForValidListAndQueue+0x68>)
 8014cda:	f7fd f9fd 	bl	80120d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014cde:	4b13      	ldr	r3, [pc, #76]	; (8014d2c <prvCheckForValidListAndQueue+0x6c>)
 8014ce0:	4a10      	ldr	r2, [pc, #64]	; (8014d24 <prvCheckForValidListAndQueue+0x64>)
 8014ce2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014ce4:	4b12      	ldr	r3, [pc, #72]	; (8014d30 <prvCheckForValidListAndQueue+0x70>)
 8014ce6:	4a10      	ldr	r2, [pc, #64]	; (8014d28 <prvCheckForValidListAndQueue+0x68>)
 8014ce8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014cea:	2300      	movs	r3, #0
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	4b11      	ldr	r3, [pc, #68]	; (8014d34 <prvCheckForValidListAndQueue+0x74>)
 8014cf0:	4a11      	ldr	r2, [pc, #68]	; (8014d38 <prvCheckForValidListAndQueue+0x78>)
 8014cf2:	2110      	movs	r1, #16
 8014cf4:	200a      	movs	r0, #10
 8014cf6:	f7fd fb0b 	bl	8012310 <xQueueGenericCreateStatic>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	4a08      	ldr	r2, [pc, #32]	; (8014d20 <prvCheckForValidListAndQueue+0x60>)
 8014cfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014d00:	4b07      	ldr	r3, [pc, #28]	; (8014d20 <prvCheckForValidListAndQueue+0x60>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d005      	beq.n	8014d14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014d08:	4b05      	ldr	r3, [pc, #20]	; (8014d20 <prvCheckForValidListAndQueue+0x60>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	490b      	ldr	r1, [pc, #44]	; (8014d3c <prvCheckForValidListAndQueue+0x7c>)
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7fe f9b8 	bl	8013084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d14:	f000 f98e 	bl	8015034 <vPortExitCritical>
}
 8014d18:	bf00      	nop
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	200012dc 	.word	0x200012dc
 8014d24:	200012ac 	.word	0x200012ac
 8014d28:	200012c0 	.word	0x200012c0
 8014d2c:	200012d4 	.word	0x200012d4
 8014d30:	200012d8 	.word	0x200012d8
 8014d34:	20001388 	.word	0x20001388
 8014d38:	200012e8 	.word	0x200012e8
 8014d3c:	08019f9c 	.word	0x08019f9c

08014d40 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b08a      	sub	sp, #40	; 0x28
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
 8014d4c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8014d4e:	f06f 0301 	mvn.w	r3, #1
 8014d52:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014d60:	4b06      	ldr	r3, [pc, #24]	; (8014d7c <xTimerPendFunctionCallFromISR+0x3c>)
 8014d62:	6818      	ldr	r0, [r3, #0]
 8014d64:	f107 0114 	add.w	r1, r7, #20
 8014d68:	2300      	movs	r3, #0
 8014d6a:	683a      	ldr	r2, [r7, #0]
 8014d6c:	f7fd fd5a 	bl	8012824 <xQueueGenericSendFromISR>
 8014d70:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8014d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3728      	adds	r7, #40	; 0x28
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	200012dc 	.word	0x200012dc

08014d80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014d80:	b480      	push	{r7}
 8014d82:	b085      	sub	sp, #20
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	60b9      	str	r1, [r7, #8]
 8014d8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	3b04      	subs	r3, #4
 8014d90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	3b04      	subs	r3, #4
 8014d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	f023 0201 	bic.w	r2, r3, #1
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	3b04      	subs	r3, #4
 8014dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014db0:	4a0c      	ldr	r2, [pc, #48]	; (8014de4 <pxPortInitialiseStack+0x64>)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	3b14      	subs	r3, #20
 8014dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014dbc:	687a      	ldr	r2, [r7, #4]
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	3b04      	subs	r3, #4
 8014dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f06f 0202 	mvn.w	r2, #2
 8014dce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	3b20      	subs	r3, #32
 8014dd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3714      	adds	r7, #20
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr
 8014de4:	08014de9 	.word	0x08014de9

08014de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014de8:	b480      	push	{r7}
 8014dea:	b085      	sub	sp, #20
 8014dec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014dee:	2300      	movs	r3, #0
 8014df0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014df2:	4b12      	ldr	r3, [pc, #72]	; (8014e3c <prvTaskExitError+0x54>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dfa:	d00a      	beq.n	8014e12 <prvTaskExitError+0x2a>
	__asm volatile
 8014dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e00:	f383 8811 	msr	BASEPRI, r3
 8014e04:	f3bf 8f6f 	isb	sy
 8014e08:	f3bf 8f4f 	dsb	sy
 8014e0c:	60fb      	str	r3, [r7, #12]
}
 8014e0e:	bf00      	nop
 8014e10:	e7fe      	b.n	8014e10 <prvTaskExitError+0x28>
	__asm volatile
 8014e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e16:	f383 8811 	msr	BASEPRI, r3
 8014e1a:	f3bf 8f6f 	isb	sy
 8014e1e:	f3bf 8f4f 	dsb	sy
 8014e22:	60bb      	str	r3, [r7, #8]
}
 8014e24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014e26:	bf00      	nop
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d0fc      	beq.n	8014e28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014e2e:	bf00      	nop
 8014e30:	bf00      	nop
 8014e32:	3714      	adds	r7, #20
 8014e34:	46bd      	mov	sp, r7
 8014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3a:	4770      	bx	lr
 8014e3c:	20000098 	.word	0x20000098

08014e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014e40:	4b07      	ldr	r3, [pc, #28]	; (8014e60 <pxCurrentTCBConst2>)
 8014e42:	6819      	ldr	r1, [r3, #0]
 8014e44:	6808      	ldr	r0, [r1, #0]
 8014e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4a:	f380 8809 	msr	PSP, r0
 8014e4e:	f3bf 8f6f 	isb	sy
 8014e52:	f04f 0000 	mov.w	r0, #0
 8014e56:	f380 8811 	msr	BASEPRI, r0
 8014e5a:	4770      	bx	lr
 8014e5c:	f3af 8000 	nop.w

08014e60 <pxCurrentTCBConst2>:
 8014e60:	20000dac 	.word	0x20000dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014e64:	bf00      	nop
 8014e66:	bf00      	nop

08014e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014e68:	4808      	ldr	r0, [pc, #32]	; (8014e8c <prvPortStartFirstTask+0x24>)
 8014e6a:	6800      	ldr	r0, [r0, #0]
 8014e6c:	6800      	ldr	r0, [r0, #0]
 8014e6e:	f380 8808 	msr	MSP, r0
 8014e72:	f04f 0000 	mov.w	r0, #0
 8014e76:	f380 8814 	msr	CONTROL, r0
 8014e7a:	b662      	cpsie	i
 8014e7c:	b661      	cpsie	f
 8014e7e:	f3bf 8f4f 	dsb	sy
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	df00      	svc	0
 8014e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014e8a:	bf00      	nop
 8014e8c:	e000ed08 	.word	0xe000ed08

08014e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b086      	sub	sp, #24
 8014e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014e96:	4b46      	ldr	r3, [pc, #280]	; (8014fb0 <xPortStartScheduler+0x120>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	4a46      	ldr	r2, [pc, #280]	; (8014fb4 <xPortStartScheduler+0x124>)
 8014e9c:	4293      	cmp	r3, r2
 8014e9e:	d10a      	bne.n	8014eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8014ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea4:	f383 8811 	msr	BASEPRI, r3
 8014ea8:	f3bf 8f6f 	isb	sy
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	613b      	str	r3, [r7, #16]
}
 8014eb2:	bf00      	nop
 8014eb4:	e7fe      	b.n	8014eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014eb6:	4b3e      	ldr	r3, [pc, #248]	; (8014fb0 <xPortStartScheduler+0x120>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	4a3f      	ldr	r2, [pc, #252]	; (8014fb8 <xPortStartScheduler+0x128>)
 8014ebc:	4293      	cmp	r3, r2
 8014ebe:	d10a      	bne.n	8014ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8014ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec4:	f383 8811 	msr	BASEPRI, r3
 8014ec8:	f3bf 8f6f 	isb	sy
 8014ecc:	f3bf 8f4f 	dsb	sy
 8014ed0:	60fb      	str	r3, [r7, #12]
}
 8014ed2:	bf00      	nop
 8014ed4:	e7fe      	b.n	8014ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014ed6:	4b39      	ldr	r3, [pc, #228]	; (8014fbc <xPortStartScheduler+0x12c>)
 8014ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	b2db      	uxtb	r3, r3
 8014ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	22ff      	movs	r2, #255	; 0xff
 8014ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ef0:	78fb      	ldrb	r3, [r7, #3]
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014ef8:	b2da      	uxtb	r2, r3
 8014efa:	4b31      	ldr	r3, [pc, #196]	; (8014fc0 <xPortStartScheduler+0x130>)
 8014efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014efe:	4b31      	ldr	r3, [pc, #196]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f00:	2207      	movs	r2, #7
 8014f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f04:	e009      	b.n	8014f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014f06:	4b2f      	ldr	r3, [pc, #188]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	4a2d      	ldr	r2, [pc, #180]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014f10:	78fb      	ldrb	r3, [r7, #3]
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	005b      	lsls	r3, r3, #1
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f1a:	78fb      	ldrb	r3, [r7, #3]
 8014f1c:	b2db      	uxtb	r3, r3
 8014f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f22:	2b80      	cmp	r3, #128	; 0x80
 8014f24:	d0ef      	beq.n	8014f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014f26:	4b27      	ldr	r3, [pc, #156]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	f1c3 0307 	rsb	r3, r3, #7
 8014f2e:	2b04      	cmp	r3, #4
 8014f30:	d00a      	beq.n	8014f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8014f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f36:	f383 8811 	msr	BASEPRI, r3
 8014f3a:	f3bf 8f6f 	isb	sy
 8014f3e:	f3bf 8f4f 	dsb	sy
 8014f42:	60bb      	str	r3, [r7, #8]
}
 8014f44:	bf00      	nop
 8014f46:	e7fe      	b.n	8014f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014f48:	4b1e      	ldr	r3, [pc, #120]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	021b      	lsls	r3, r3, #8
 8014f4e:	4a1d      	ldr	r2, [pc, #116]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014f52:	4b1c      	ldr	r3, [pc, #112]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014f5a:	4a1a      	ldr	r2, [pc, #104]	; (8014fc4 <xPortStartScheduler+0x134>)
 8014f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014f66:	4b18      	ldr	r3, [pc, #96]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	4a17      	ldr	r2, [pc, #92]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014f72:	4b15      	ldr	r3, [pc, #84]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	4a14      	ldr	r2, [pc, #80]	; (8014fc8 <xPortStartScheduler+0x138>)
 8014f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014f7e:	f000 f8dd 	bl	801513c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014f82:	4b12      	ldr	r3, [pc, #72]	; (8014fcc <xPortStartScheduler+0x13c>)
 8014f84:	2200      	movs	r2, #0
 8014f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014f88:	f000 f8fc 	bl	8015184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014f8c:	4b10      	ldr	r3, [pc, #64]	; (8014fd0 <xPortStartScheduler+0x140>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	4a0f      	ldr	r2, [pc, #60]	; (8014fd0 <xPortStartScheduler+0x140>)
 8014f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014f98:	f7ff ff66 	bl	8014e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014f9c:	f7fe fe72 	bl	8013c84 <vTaskSwitchContext>
	prvTaskExitError();
 8014fa0:	f7ff ff22 	bl	8014de8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014fa4:	2300      	movs	r3, #0
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3718      	adds	r7, #24
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	e000ed00 	.word	0xe000ed00
 8014fb4:	410fc271 	.word	0x410fc271
 8014fb8:	410fc270 	.word	0x410fc270
 8014fbc:	e000e400 	.word	0xe000e400
 8014fc0:	200013d8 	.word	0x200013d8
 8014fc4:	200013dc 	.word	0x200013dc
 8014fc8:	e000ed20 	.word	0xe000ed20
 8014fcc:	20000098 	.word	0x20000098
 8014fd0:	e000ef34 	.word	0xe000ef34

08014fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8014fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fde:	f383 8811 	msr	BASEPRI, r3
 8014fe2:	f3bf 8f6f 	isb	sy
 8014fe6:	f3bf 8f4f 	dsb	sy
 8014fea:	607b      	str	r3, [r7, #4]
}
 8014fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014fee:	4b0f      	ldr	r3, [pc, #60]	; (801502c <vPortEnterCritical+0x58>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	4a0d      	ldr	r2, [pc, #52]	; (801502c <vPortEnterCritical+0x58>)
 8014ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ff8:	4b0c      	ldr	r3, [pc, #48]	; (801502c <vPortEnterCritical+0x58>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d10f      	bne.n	8015020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015000:	4b0b      	ldr	r3, [pc, #44]	; (8015030 <vPortEnterCritical+0x5c>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	b2db      	uxtb	r3, r3
 8015006:	2b00      	cmp	r3, #0
 8015008:	d00a      	beq.n	8015020 <vPortEnterCritical+0x4c>
	__asm volatile
 801500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801500e:	f383 8811 	msr	BASEPRI, r3
 8015012:	f3bf 8f6f 	isb	sy
 8015016:	f3bf 8f4f 	dsb	sy
 801501a:	603b      	str	r3, [r7, #0]
}
 801501c:	bf00      	nop
 801501e:	e7fe      	b.n	801501e <vPortEnterCritical+0x4a>
	}
}
 8015020:	bf00      	nop
 8015022:	370c      	adds	r7, #12
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	20000098 	.word	0x20000098
 8015030:	e000ed04 	.word	0xe000ed04

08015034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801503a:	4b12      	ldr	r3, [pc, #72]	; (8015084 <vPortExitCritical+0x50>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d10a      	bne.n	8015058 <vPortExitCritical+0x24>
	__asm volatile
 8015042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	607b      	str	r3, [r7, #4]
}
 8015054:	bf00      	nop
 8015056:	e7fe      	b.n	8015056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015058:	4b0a      	ldr	r3, [pc, #40]	; (8015084 <vPortExitCritical+0x50>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	3b01      	subs	r3, #1
 801505e:	4a09      	ldr	r2, [pc, #36]	; (8015084 <vPortExitCritical+0x50>)
 8015060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015062:	4b08      	ldr	r3, [pc, #32]	; (8015084 <vPortExitCritical+0x50>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d105      	bne.n	8015076 <vPortExitCritical+0x42>
 801506a:	2300      	movs	r3, #0
 801506c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	f383 8811 	msr	BASEPRI, r3
}
 8015074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015076:	bf00      	nop
 8015078:	370c      	adds	r7, #12
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr
 8015082:	bf00      	nop
 8015084:	20000098 	.word	0x20000098
	...

08015090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015090:	f3ef 8009 	mrs	r0, PSP
 8015094:	f3bf 8f6f 	isb	sy
 8015098:	4b15      	ldr	r3, [pc, #84]	; (80150f0 <pxCurrentTCBConst>)
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	f01e 0f10 	tst.w	lr, #16
 80150a0:	bf08      	it	eq
 80150a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80150a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150aa:	6010      	str	r0, [r2, #0]
 80150ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80150b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80150b4:	f380 8811 	msr	BASEPRI, r0
 80150b8:	f3bf 8f4f 	dsb	sy
 80150bc:	f3bf 8f6f 	isb	sy
 80150c0:	f7fe fde0 	bl	8013c84 <vTaskSwitchContext>
 80150c4:	f04f 0000 	mov.w	r0, #0
 80150c8:	f380 8811 	msr	BASEPRI, r0
 80150cc:	bc09      	pop	{r0, r3}
 80150ce:	6819      	ldr	r1, [r3, #0]
 80150d0:	6808      	ldr	r0, [r1, #0]
 80150d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d6:	f01e 0f10 	tst.w	lr, #16
 80150da:	bf08      	it	eq
 80150dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80150e0:	f380 8809 	msr	PSP, r0
 80150e4:	f3bf 8f6f 	isb	sy
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	f3af 8000 	nop.w

080150f0 <pxCurrentTCBConst>:
 80150f0:	20000dac 	.word	0x20000dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80150f4:	bf00      	nop
 80150f6:	bf00      	nop

080150f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
	__asm volatile
 80150fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015102:	f383 8811 	msr	BASEPRI, r3
 8015106:	f3bf 8f6f 	isb	sy
 801510a:	f3bf 8f4f 	dsb	sy
 801510e:	607b      	str	r3, [r7, #4]
}
 8015110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015112:	f7fe fcfd 	bl	8013b10 <xTaskIncrementTick>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d003      	beq.n	8015124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801511c:	4b06      	ldr	r3, [pc, #24]	; (8015138 <xPortSysTickHandler+0x40>)
 801511e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	2300      	movs	r3, #0
 8015126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	f383 8811 	msr	BASEPRI, r3
}
 801512e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015130:	bf00      	nop
 8015132:	3708      	adds	r7, #8
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}
 8015138:	e000ed04 	.word	0xe000ed04

0801513c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801513c:	b480      	push	{r7}
 801513e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015140:	4b0b      	ldr	r3, [pc, #44]	; (8015170 <vPortSetupTimerInterrupt+0x34>)
 8015142:	2200      	movs	r2, #0
 8015144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015146:	4b0b      	ldr	r3, [pc, #44]	; (8015174 <vPortSetupTimerInterrupt+0x38>)
 8015148:	2200      	movs	r2, #0
 801514a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801514c:	4b0a      	ldr	r3, [pc, #40]	; (8015178 <vPortSetupTimerInterrupt+0x3c>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	4a0a      	ldr	r2, [pc, #40]	; (801517c <vPortSetupTimerInterrupt+0x40>)
 8015152:	fba2 2303 	umull	r2, r3, r2, r3
 8015156:	099b      	lsrs	r3, r3, #6
 8015158:	4a09      	ldr	r2, [pc, #36]	; (8015180 <vPortSetupTimerInterrupt+0x44>)
 801515a:	3b01      	subs	r3, #1
 801515c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801515e:	4b04      	ldr	r3, [pc, #16]	; (8015170 <vPortSetupTimerInterrupt+0x34>)
 8015160:	2207      	movs	r2, #7
 8015162:	601a      	str	r2, [r3, #0]
}
 8015164:	bf00      	nop
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	e000e010 	.word	0xe000e010
 8015174:	e000e018 	.word	0xe000e018
 8015178:	2000006c 	.word	0x2000006c
 801517c:	10624dd3 	.word	0x10624dd3
 8015180:	e000e014 	.word	0xe000e014

08015184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015194 <vPortEnableVFP+0x10>
 8015188:	6801      	ldr	r1, [r0, #0]
 801518a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801518e:	6001      	str	r1, [r0, #0]
 8015190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015192:	bf00      	nop
 8015194:	e000ed88 	.word	0xe000ed88

08015198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015198:	b480      	push	{r7}
 801519a:	b085      	sub	sp, #20
 801519c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801519e:	f3ef 8305 	mrs	r3, IPSR
 80151a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	2b0f      	cmp	r3, #15
 80151a8:	d914      	bls.n	80151d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80151aa:	4a17      	ldr	r2, [pc, #92]	; (8015208 <vPortValidateInterruptPriority+0x70>)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	4413      	add	r3, r2
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80151b4:	4b15      	ldr	r3, [pc, #84]	; (801520c <vPortValidateInterruptPriority+0x74>)
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	7afa      	ldrb	r2, [r7, #11]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d20a      	bcs.n	80151d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80151be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c2:	f383 8811 	msr	BASEPRI, r3
 80151c6:	f3bf 8f6f 	isb	sy
 80151ca:	f3bf 8f4f 	dsb	sy
 80151ce:	607b      	str	r3, [r7, #4]
}
 80151d0:	bf00      	nop
 80151d2:	e7fe      	b.n	80151d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80151d4:	4b0e      	ldr	r3, [pc, #56]	; (8015210 <vPortValidateInterruptPriority+0x78>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80151dc:	4b0d      	ldr	r3, [pc, #52]	; (8015214 <vPortValidateInterruptPriority+0x7c>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d90a      	bls.n	80151fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80151e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e8:	f383 8811 	msr	BASEPRI, r3
 80151ec:	f3bf 8f6f 	isb	sy
 80151f0:	f3bf 8f4f 	dsb	sy
 80151f4:	603b      	str	r3, [r7, #0]
}
 80151f6:	bf00      	nop
 80151f8:	e7fe      	b.n	80151f8 <vPortValidateInterruptPriority+0x60>
	}
 80151fa:	bf00      	nop
 80151fc:	3714      	adds	r7, #20
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	e000e3f0 	.word	0xe000e3f0
 801520c:	200013d8 	.word	0x200013d8
 8015210:	e000ed0c 	.word	0xe000ed0c
 8015214:	200013dc 	.word	0x200013dc

08015218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b08a      	sub	sp, #40	; 0x28
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015220:	2300      	movs	r3, #0
 8015222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015224:	f7fe fba6 	bl	8013974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015228:	4b5b      	ldr	r3, [pc, #364]	; (8015398 <pvPortMalloc+0x180>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d101      	bne.n	8015234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015230:	f000 f920 	bl	8015474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015234:	4b59      	ldr	r3, [pc, #356]	; (801539c <pvPortMalloc+0x184>)
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	4013      	ands	r3, r2
 801523c:	2b00      	cmp	r3, #0
 801523e:	f040 8093 	bne.w	8015368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d01d      	beq.n	8015284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015248:	2208      	movs	r2, #8
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	4413      	add	r3, r2
 801524e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f003 0307 	and.w	r3, r3, #7
 8015256:	2b00      	cmp	r3, #0
 8015258:	d014      	beq.n	8015284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	f023 0307 	bic.w	r3, r3, #7
 8015260:	3308      	adds	r3, #8
 8015262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f003 0307 	and.w	r3, r3, #7
 801526a:	2b00      	cmp	r3, #0
 801526c:	d00a      	beq.n	8015284 <pvPortMalloc+0x6c>
	__asm volatile
 801526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015272:	f383 8811 	msr	BASEPRI, r3
 8015276:	f3bf 8f6f 	isb	sy
 801527a:	f3bf 8f4f 	dsb	sy
 801527e:	617b      	str	r3, [r7, #20]
}
 8015280:	bf00      	nop
 8015282:	e7fe      	b.n	8015282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d06e      	beq.n	8015368 <pvPortMalloc+0x150>
 801528a:	4b45      	ldr	r3, [pc, #276]	; (80153a0 <pvPortMalloc+0x188>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	429a      	cmp	r2, r3
 8015292:	d869      	bhi.n	8015368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015294:	4b43      	ldr	r3, [pc, #268]	; (80153a4 <pvPortMalloc+0x18c>)
 8015296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015298:	4b42      	ldr	r3, [pc, #264]	; (80153a4 <pvPortMalloc+0x18c>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801529e:	e004      	b.n	80152aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80152a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80152a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80152aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d903      	bls.n	80152bc <pvPortMalloc+0xa4>
 80152b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d1f1      	bne.n	80152a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80152bc:	4b36      	ldr	r3, [pc, #216]	; (8015398 <pvPortMalloc+0x180>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d050      	beq.n	8015368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80152c6:	6a3b      	ldr	r3, [r7, #32]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2208      	movs	r2, #8
 80152cc:	4413      	add	r3, r2
 80152ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80152d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	6a3b      	ldr	r3, [r7, #32]
 80152d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80152d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152da:	685a      	ldr	r2, [r3, #4]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	1ad2      	subs	r2, r2, r3
 80152e0:	2308      	movs	r3, #8
 80152e2:	005b      	lsls	r3, r3, #1
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d91f      	bls.n	8015328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80152e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4413      	add	r3, r2
 80152ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80152f0:	69bb      	ldr	r3, [r7, #24]
 80152f2:	f003 0307 	and.w	r3, r3, #7
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d00a      	beq.n	8015310 <pvPortMalloc+0xf8>
	__asm volatile
 80152fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152fe:	f383 8811 	msr	BASEPRI, r3
 8015302:	f3bf 8f6f 	isb	sy
 8015306:	f3bf 8f4f 	dsb	sy
 801530a:	613b      	str	r3, [r7, #16]
}
 801530c:	bf00      	nop
 801530e:	e7fe      	b.n	801530e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015312:	685a      	ldr	r2, [r3, #4]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	1ad2      	subs	r2, r2, r3
 8015318:	69bb      	ldr	r3, [r7, #24]
 801531a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015322:	69b8      	ldr	r0, [r7, #24]
 8015324:	f000 f908 	bl	8015538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015328:	4b1d      	ldr	r3, [pc, #116]	; (80153a0 <pvPortMalloc+0x188>)
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	1ad3      	subs	r3, r2, r3
 8015332:	4a1b      	ldr	r2, [pc, #108]	; (80153a0 <pvPortMalloc+0x188>)
 8015334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015336:	4b1a      	ldr	r3, [pc, #104]	; (80153a0 <pvPortMalloc+0x188>)
 8015338:	681a      	ldr	r2, [r3, #0]
 801533a:	4b1b      	ldr	r3, [pc, #108]	; (80153a8 <pvPortMalloc+0x190>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	429a      	cmp	r2, r3
 8015340:	d203      	bcs.n	801534a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015342:	4b17      	ldr	r3, [pc, #92]	; (80153a0 <pvPortMalloc+0x188>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4a18      	ldr	r2, [pc, #96]	; (80153a8 <pvPortMalloc+0x190>)
 8015348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534c:	685a      	ldr	r2, [r3, #4]
 801534e:	4b13      	ldr	r3, [pc, #76]	; (801539c <pvPortMalloc+0x184>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	431a      	orrs	r2, r3
 8015354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535a:	2200      	movs	r2, #0
 801535c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801535e:	4b13      	ldr	r3, [pc, #76]	; (80153ac <pvPortMalloc+0x194>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	3301      	adds	r3, #1
 8015364:	4a11      	ldr	r2, [pc, #68]	; (80153ac <pvPortMalloc+0x194>)
 8015366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015368:	f7fe fb12 	bl	8013990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	f003 0307 	and.w	r3, r3, #7
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00a      	beq.n	801538c <pvPortMalloc+0x174>
	__asm volatile
 8015376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801537a:	f383 8811 	msr	BASEPRI, r3
 801537e:	f3bf 8f6f 	isb	sy
 8015382:	f3bf 8f4f 	dsb	sy
 8015386:	60fb      	str	r3, [r7, #12]
}
 8015388:	bf00      	nop
 801538a:	e7fe      	b.n	801538a <pvPortMalloc+0x172>
	return pvReturn;
 801538c:	69fb      	ldr	r3, [r7, #28]
}
 801538e:	4618      	mov	r0, r3
 8015390:	3728      	adds	r7, #40	; 0x28
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
 8015396:	bf00      	nop
 8015398:	200063e8 	.word	0x200063e8
 801539c:	200063fc 	.word	0x200063fc
 80153a0:	200063ec 	.word	0x200063ec
 80153a4:	200063e0 	.word	0x200063e0
 80153a8:	200063f0 	.word	0x200063f0
 80153ac:	200063f4 	.word	0x200063f4

080153b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b086      	sub	sp, #24
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d04d      	beq.n	801545e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80153c2:	2308      	movs	r3, #8
 80153c4:	425b      	negs	r3, r3
 80153c6:	697a      	ldr	r2, [r7, #20]
 80153c8:	4413      	add	r3, r2
 80153ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	685a      	ldr	r2, [r3, #4]
 80153d4:	4b24      	ldr	r3, [pc, #144]	; (8015468 <vPortFree+0xb8>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4013      	ands	r3, r2
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d10a      	bne.n	80153f4 <vPortFree+0x44>
	__asm volatile
 80153de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e2:	f383 8811 	msr	BASEPRI, r3
 80153e6:	f3bf 8f6f 	isb	sy
 80153ea:	f3bf 8f4f 	dsb	sy
 80153ee:	60fb      	str	r3, [r7, #12]
}
 80153f0:	bf00      	nop
 80153f2:	e7fe      	b.n	80153f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d00a      	beq.n	8015412 <vPortFree+0x62>
	__asm volatile
 80153fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015400:	f383 8811 	msr	BASEPRI, r3
 8015404:	f3bf 8f6f 	isb	sy
 8015408:	f3bf 8f4f 	dsb	sy
 801540c:	60bb      	str	r3, [r7, #8]
}
 801540e:	bf00      	nop
 8015410:	e7fe      	b.n	8015410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015412:	693b      	ldr	r3, [r7, #16]
 8015414:	685a      	ldr	r2, [r3, #4]
 8015416:	4b14      	ldr	r3, [pc, #80]	; (8015468 <vPortFree+0xb8>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	4013      	ands	r3, r2
 801541c:	2b00      	cmp	r3, #0
 801541e:	d01e      	beq.n	801545e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d11a      	bne.n	801545e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	685a      	ldr	r2, [r3, #4]
 801542c:	4b0e      	ldr	r3, [pc, #56]	; (8015468 <vPortFree+0xb8>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	43db      	mvns	r3, r3
 8015432:	401a      	ands	r2, r3
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015438:	f7fe fa9c 	bl	8013974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	685a      	ldr	r2, [r3, #4]
 8015440:	4b0a      	ldr	r3, [pc, #40]	; (801546c <vPortFree+0xbc>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	4413      	add	r3, r2
 8015446:	4a09      	ldr	r2, [pc, #36]	; (801546c <vPortFree+0xbc>)
 8015448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801544a:	6938      	ldr	r0, [r7, #16]
 801544c:	f000 f874 	bl	8015538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015450:	4b07      	ldr	r3, [pc, #28]	; (8015470 <vPortFree+0xc0>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	3301      	adds	r3, #1
 8015456:	4a06      	ldr	r2, [pc, #24]	; (8015470 <vPortFree+0xc0>)
 8015458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801545a:	f7fe fa99 	bl	8013990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801545e:	bf00      	nop
 8015460:	3718      	adds	r7, #24
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}
 8015466:	bf00      	nop
 8015468:	200063fc 	.word	0x200063fc
 801546c:	200063ec 	.word	0x200063ec
 8015470:	200063f8 	.word	0x200063f8

08015474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015474:	b480      	push	{r7}
 8015476:	b085      	sub	sp, #20
 8015478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801547a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801547e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015480:	4b27      	ldr	r3, [pc, #156]	; (8015520 <prvHeapInit+0xac>)
 8015482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	f003 0307 	and.w	r3, r3, #7
 801548a:	2b00      	cmp	r3, #0
 801548c:	d00c      	beq.n	80154a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	3307      	adds	r3, #7
 8015492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f023 0307 	bic.w	r3, r3, #7
 801549a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801549c:	68ba      	ldr	r2, [r7, #8]
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	1ad3      	subs	r3, r2, r3
 80154a2:	4a1f      	ldr	r2, [pc, #124]	; (8015520 <prvHeapInit+0xac>)
 80154a4:	4413      	add	r3, r2
 80154a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80154ac:	4a1d      	ldr	r2, [pc, #116]	; (8015524 <prvHeapInit+0xb0>)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80154b2:	4b1c      	ldr	r3, [pc, #112]	; (8015524 <prvHeapInit+0xb0>)
 80154b4:	2200      	movs	r2, #0
 80154b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	68ba      	ldr	r2, [r7, #8]
 80154bc:	4413      	add	r3, r2
 80154be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80154c0:	2208      	movs	r2, #8
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	1a9b      	subs	r3, r3, r2
 80154c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f023 0307 	bic.w	r3, r3, #7
 80154ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	4a15      	ldr	r2, [pc, #84]	; (8015528 <prvHeapInit+0xb4>)
 80154d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80154d6:	4b14      	ldr	r3, [pc, #80]	; (8015528 <prvHeapInit+0xb4>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	2200      	movs	r2, #0
 80154dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80154de:	4b12      	ldr	r3, [pc, #72]	; (8015528 <prvHeapInit+0xb4>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	2200      	movs	r2, #0
 80154e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	68fa      	ldr	r2, [r7, #12]
 80154ee:	1ad2      	subs	r2, r2, r3
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80154f4:	4b0c      	ldr	r3, [pc, #48]	; (8015528 <prvHeapInit+0xb4>)
 80154f6:	681a      	ldr	r2, [r3, #0]
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	4a0a      	ldr	r2, [pc, #40]	; (801552c <prvHeapInit+0xb8>)
 8015502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	4a09      	ldr	r2, [pc, #36]	; (8015530 <prvHeapInit+0xbc>)
 801550a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801550c:	4b09      	ldr	r3, [pc, #36]	; (8015534 <prvHeapInit+0xc0>)
 801550e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015512:	601a      	str	r2, [r3, #0]
}
 8015514:	bf00      	nop
 8015516:	3714      	adds	r7, #20
 8015518:	46bd      	mov	sp, r7
 801551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551e:	4770      	bx	lr
 8015520:	200013e0 	.word	0x200013e0
 8015524:	200063e0 	.word	0x200063e0
 8015528:	200063e8 	.word	0x200063e8
 801552c:	200063f0 	.word	0x200063f0
 8015530:	200063ec 	.word	0x200063ec
 8015534:	200063fc 	.word	0x200063fc

08015538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015538:	b480      	push	{r7}
 801553a:	b085      	sub	sp, #20
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015540:	4b28      	ldr	r3, [pc, #160]	; (80155e4 <prvInsertBlockIntoFreeList+0xac>)
 8015542:	60fb      	str	r3, [r7, #12]
 8015544:	e002      	b.n	801554c <prvInsertBlockIntoFreeList+0x14>
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	60fb      	str	r3, [r7, #12]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	687a      	ldr	r2, [r7, #4]
 8015552:	429a      	cmp	r2, r3
 8015554:	d8f7      	bhi.n	8015546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	68ba      	ldr	r2, [r7, #8]
 8015560:	4413      	add	r3, r2
 8015562:	687a      	ldr	r2, [r7, #4]
 8015564:	429a      	cmp	r2, r3
 8015566:	d108      	bne.n	801557a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	685a      	ldr	r2, [r3, #4]
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	441a      	add	r2, r3
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	68ba      	ldr	r2, [r7, #8]
 8015584:	441a      	add	r2, r3
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	429a      	cmp	r2, r3
 801558c:	d118      	bne.n	80155c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	4b15      	ldr	r3, [pc, #84]	; (80155e8 <prvInsertBlockIntoFreeList+0xb0>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	429a      	cmp	r2, r3
 8015598:	d00d      	beq.n	80155b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	685a      	ldr	r2, [r3, #4]
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	441a      	add	r2, r3
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	681a      	ldr	r2, [r3, #0]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	601a      	str	r2, [r3, #0]
 80155b4:	e008      	b.n	80155c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80155b6:	4b0c      	ldr	r3, [pc, #48]	; (80155e8 <prvInsertBlockIntoFreeList+0xb0>)
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	601a      	str	r2, [r3, #0]
 80155be:	e003      	b.n	80155c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80155c8:	68fa      	ldr	r2, [r7, #12]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d002      	beq.n	80155d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80155d6:	bf00      	nop
 80155d8:	3714      	adds	r7, #20
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr
 80155e2:	bf00      	nop
 80155e4:	200063e0 	.word	0x200063e0
 80155e8:	200063e8 	.word	0x200063e8

080155ec <malloc>:
 80155ec:	4b02      	ldr	r3, [pc, #8]	; (80155f8 <malloc+0xc>)
 80155ee:	4601      	mov	r1, r0
 80155f0:	6818      	ldr	r0, [r3, #0]
 80155f2:	f000 b82b 	b.w	801564c <_malloc_r>
 80155f6:	bf00      	nop
 80155f8:	200000f4 	.word	0x200000f4

080155fc <free>:
 80155fc:	4b02      	ldr	r3, [pc, #8]	; (8015608 <free+0xc>)
 80155fe:	4601      	mov	r1, r0
 8015600:	6818      	ldr	r0, [r3, #0]
 8015602:	f001 bd53 	b.w	80170ac <_free_r>
 8015606:	bf00      	nop
 8015608:	200000f4 	.word	0x200000f4

0801560c <sbrk_aligned>:
 801560c:	b570      	push	{r4, r5, r6, lr}
 801560e:	4e0e      	ldr	r6, [pc, #56]	; (8015648 <sbrk_aligned+0x3c>)
 8015610:	460c      	mov	r4, r1
 8015612:	6831      	ldr	r1, [r6, #0]
 8015614:	4605      	mov	r5, r0
 8015616:	b911      	cbnz	r1, 801561e <sbrk_aligned+0x12>
 8015618:	f000 fe70 	bl	80162fc <_sbrk_r>
 801561c:	6030      	str	r0, [r6, #0]
 801561e:	4621      	mov	r1, r4
 8015620:	4628      	mov	r0, r5
 8015622:	f000 fe6b 	bl	80162fc <_sbrk_r>
 8015626:	1c43      	adds	r3, r0, #1
 8015628:	d00a      	beq.n	8015640 <sbrk_aligned+0x34>
 801562a:	1cc4      	adds	r4, r0, #3
 801562c:	f024 0403 	bic.w	r4, r4, #3
 8015630:	42a0      	cmp	r0, r4
 8015632:	d007      	beq.n	8015644 <sbrk_aligned+0x38>
 8015634:	1a21      	subs	r1, r4, r0
 8015636:	4628      	mov	r0, r5
 8015638:	f000 fe60 	bl	80162fc <_sbrk_r>
 801563c:	3001      	adds	r0, #1
 801563e:	d101      	bne.n	8015644 <sbrk_aligned+0x38>
 8015640:	f04f 34ff 	mov.w	r4, #4294967295
 8015644:	4620      	mov	r0, r4
 8015646:	bd70      	pop	{r4, r5, r6, pc}
 8015648:	20006404 	.word	0x20006404

0801564c <_malloc_r>:
 801564c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015650:	1ccd      	adds	r5, r1, #3
 8015652:	f025 0503 	bic.w	r5, r5, #3
 8015656:	3508      	adds	r5, #8
 8015658:	2d0c      	cmp	r5, #12
 801565a:	bf38      	it	cc
 801565c:	250c      	movcc	r5, #12
 801565e:	2d00      	cmp	r5, #0
 8015660:	4607      	mov	r7, r0
 8015662:	db01      	blt.n	8015668 <_malloc_r+0x1c>
 8015664:	42a9      	cmp	r1, r5
 8015666:	d905      	bls.n	8015674 <_malloc_r+0x28>
 8015668:	230c      	movs	r3, #12
 801566a:	603b      	str	r3, [r7, #0]
 801566c:	2600      	movs	r6, #0
 801566e:	4630      	mov	r0, r6
 8015670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015674:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015748 <_malloc_r+0xfc>
 8015678:	f000 f868 	bl	801574c <__malloc_lock>
 801567c:	f8d8 3000 	ldr.w	r3, [r8]
 8015680:	461c      	mov	r4, r3
 8015682:	bb5c      	cbnz	r4, 80156dc <_malloc_r+0x90>
 8015684:	4629      	mov	r1, r5
 8015686:	4638      	mov	r0, r7
 8015688:	f7ff ffc0 	bl	801560c <sbrk_aligned>
 801568c:	1c43      	adds	r3, r0, #1
 801568e:	4604      	mov	r4, r0
 8015690:	d155      	bne.n	801573e <_malloc_r+0xf2>
 8015692:	f8d8 4000 	ldr.w	r4, [r8]
 8015696:	4626      	mov	r6, r4
 8015698:	2e00      	cmp	r6, #0
 801569a:	d145      	bne.n	8015728 <_malloc_r+0xdc>
 801569c:	2c00      	cmp	r4, #0
 801569e:	d048      	beq.n	8015732 <_malloc_r+0xe6>
 80156a0:	6823      	ldr	r3, [r4, #0]
 80156a2:	4631      	mov	r1, r6
 80156a4:	4638      	mov	r0, r7
 80156a6:	eb04 0903 	add.w	r9, r4, r3
 80156aa:	f000 fe27 	bl	80162fc <_sbrk_r>
 80156ae:	4581      	cmp	r9, r0
 80156b0:	d13f      	bne.n	8015732 <_malloc_r+0xe6>
 80156b2:	6821      	ldr	r1, [r4, #0]
 80156b4:	1a6d      	subs	r5, r5, r1
 80156b6:	4629      	mov	r1, r5
 80156b8:	4638      	mov	r0, r7
 80156ba:	f7ff ffa7 	bl	801560c <sbrk_aligned>
 80156be:	3001      	adds	r0, #1
 80156c0:	d037      	beq.n	8015732 <_malloc_r+0xe6>
 80156c2:	6823      	ldr	r3, [r4, #0]
 80156c4:	442b      	add	r3, r5
 80156c6:	6023      	str	r3, [r4, #0]
 80156c8:	f8d8 3000 	ldr.w	r3, [r8]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d038      	beq.n	8015742 <_malloc_r+0xf6>
 80156d0:	685a      	ldr	r2, [r3, #4]
 80156d2:	42a2      	cmp	r2, r4
 80156d4:	d12b      	bne.n	801572e <_malloc_r+0xe2>
 80156d6:	2200      	movs	r2, #0
 80156d8:	605a      	str	r2, [r3, #4]
 80156da:	e00f      	b.n	80156fc <_malloc_r+0xb0>
 80156dc:	6822      	ldr	r2, [r4, #0]
 80156de:	1b52      	subs	r2, r2, r5
 80156e0:	d41f      	bmi.n	8015722 <_malloc_r+0xd6>
 80156e2:	2a0b      	cmp	r2, #11
 80156e4:	d917      	bls.n	8015716 <_malloc_r+0xca>
 80156e6:	1961      	adds	r1, r4, r5
 80156e8:	42a3      	cmp	r3, r4
 80156ea:	6025      	str	r5, [r4, #0]
 80156ec:	bf18      	it	ne
 80156ee:	6059      	strne	r1, [r3, #4]
 80156f0:	6863      	ldr	r3, [r4, #4]
 80156f2:	bf08      	it	eq
 80156f4:	f8c8 1000 	streq.w	r1, [r8]
 80156f8:	5162      	str	r2, [r4, r5]
 80156fa:	604b      	str	r3, [r1, #4]
 80156fc:	4638      	mov	r0, r7
 80156fe:	f104 060b 	add.w	r6, r4, #11
 8015702:	f000 f829 	bl	8015758 <__malloc_unlock>
 8015706:	f026 0607 	bic.w	r6, r6, #7
 801570a:	1d23      	adds	r3, r4, #4
 801570c:	1af2      	subs	r2, r6, r3
 801570e:	d0ae      	beq.n	801566e <_malloc_r+0x22>
 8015710:	1b9b      	subs	r3, r3, r6
 8015712:	50a3      	str	r3, [r4, r2]
 8015714:	e7ab      	b.n	801566e <_malloc_r+0x22>
 8015716:	42a3      	cmp	r3, r4
 8015718:	6862      	ldr	r2, [r4, #4]
 801571a:	d1dd      	bne.n	80156d8 <_malloc_r+0x8c>
 801571c:	f8c8 2000 	str.w	r2, [r8]
 8015720:	e7ec      	b.n	80156fc <_malloc_r+0xb0>
 8015722:	4623      	mov	r3, r4
 8015724:	6864      	ldr	r4, [r4, #4]
 8015726:	e7ac      	b.n	8015682 <_malloc_r+0x36>
 8015728:	4634      	mov	r4, r6
 801572a:	6876      	ldr	r6, [r6, #4]
 801572c:	e7b4      	b.n	8015698 <_malloc_r+0x4c>
 801572e:	4613      	mov	r3, r2
 8015730:	e7cc      	b.n	80156cc <_malloc_r+0x80>
 8015732:	230c      	movs	r3, #12
 8015734:	603b      	str	r3, [r7, #0]
 8015736:	4638      	mov	r0, r7
 8015738:	f000 f80e 	bl	8015758 <__malloc_unlock>
 801573c:	e797      	b.n	801566e <_malloc_r+0x22>
 801573e:	6025      	str	r5, [r4, #0]
 8015740:	e7dc      	b.n	80156fc <_malloc_r+0xb0>
 8015742:	605b      	str	r3, [r3, #4]
 8015744:	deff      	udf	#255	; 0xff
 8015746:	bf00      	nop
 8015748:	20006400 	.word	0x20006400

0801574c <__malloc_lock>:
 801574c:	4801      	ldr	r0, [pc, #4]	; (8015754 <__malloc_lock+0x8>)
 801574e:	f000 be22 	b.w	8016396 <__retarget_lock_acquire_recursive>
 8015752:	bf00      	nop
 8015754:	20006548 	.word	0x20006548

08015758 <__malloc_unlock>:
 8015758:	4801      	ldr	r0, [pc, #4]	; (8015760 <__malloc_unlock+0x8>)
 801575a:	f000 be1d 	b.w	8016398 <__retarget_lock_release_recursive>
 801575e:	bf00      	nop
 8015760:	20006548 	.word	0x20006548

08015764 <__cvt>:
 8015764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015768:	ec55 4b10 	vmov	r4, r5, d0
 801576c:	2d00      	cmp	r5, #0
 801576e:	460e      	mov	r6, r1
 8015770:	4619      	mov	r1, r3
 8015772:	462b      	mov	r3, r5
 8015774:	bfbb      	ittet	lt
 8015776:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801577a:	461d      	movlt	r5, r3
 801577c:	2300      	movge	r3, #0
 801577e:	232d      	movlt	r3, #45	; 0x2d
 8015780:	700b      	strb	r3, [r1, #0]
 8015782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015784:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015788:	4691      	mov	r9, r2
 801578a:	f023 0820 	bic.w	r8, r3, #32
 801578e:	bfbc      	itt	lt
 8015790:	4622      	movlt	r2, r4
 8015792:	4614      	movlt	r4, r2
 8015794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015798:	d005      	beq.n	80157a6 <__cvt+0x42>
 801579a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801579e:	d100      	bne.n	80157a2 <__cvt+0x3e>
 80157a0:	3601      	adds	r6, #1
 80157a2:	2102      	movs	r1, #2
 80157a4:	e000      	b.n	80157a8 <__cvt+0x44>
 80157a6:	2103      	movs	r1, #3
 80157a8:	ab03      	add	r3, sp, #12
 80157aa:	9301      	str	r3, [sp, #4]
 80157ac:	ab02      	add	r3, sp, #8
 80157ae:	9300      	str	r3, [sp, #0]
 80157b0:	ec45 4b10 	vmov	d0, r4, r5
 80157b4:	4653      	mov	r3, sl
 80157b6:	4632      	mov	r2, r6
 80157b8:	f000 fe86 	bl	80164c8 <_dtoa_r>
 80157bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80157c0:	4607      	mov	r7, r0
 80157c2:	d102      	bne.n	80157ca <__cvt+0x66>
 80157c4:	f019 0f01 	tst.w	r9, #1
 80157c8:	d022      	beq.n	8015810 <__cvt+0xac>
 80157ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80157ce:	eb07 0906 	add.w	r9, r7, r6
 80157d2:	d110      	bne.n	80157f6 <__cvt+0x92>
 80157d4:	783b      	ldrb	r3, [r7, #0]
 80157d6:	2b30      	cmp	r3, #48	; 0x30
 80157d8:	d10a      	bne.n	80157f0 <__cvt+0x8c>
 80157da:	2200      	movs	r2, #0
 80157dc:	2300      	movs	r3, #0
 80157de:	4620      	mov	r0, r4
 80157e0:	4629      	mov	r1, r5
 80157e2:	f7eb f989 	bl	8000af8 <__aeabi_dcmpeq>
 80157e6:	b918      	cbnz	r0, 80157f0 <__cvt+0x8c>
 80157e8:	f1c6 0601 	rsb	r6, r6, #1
 80157ec:	f8ca 6000 	str.w	r6, [sl]
 80157f0:	f8da 3000 	ldr.w	r3, [sl]
 80157f4:	4499      	add	r9, r3
 80157f6:	2200      	movs	r2, #0
 80157f8:	2300      	movs	r3, #0
 80157fa:	4620      	mov	r0, r4
 80157fc:	4629      	mov	r1, r5
 80157fe:	f7eb f97b 	bl	8000af8 <__aeabi_dcmpeq>
 8015802:	b108      	cbz	r0, 8015808 <__cvt+0xa4>
 8015804:	f8cd 900c 	str.w	r9, [sp, #12]
 8015808:	2230      	movs	r2, #48	; 0x30
 801580a:	9b03      	ldr	r3, [sp, #12]
 801580c:	454b      	cmp	r3, r9
 801580e:	d307      	bcc.n	8015820 <__cvt+0xbc>
 8015810:	9b03      	ldr	r3, [sp, #12]
 8015812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015814:	1bdb      	subs	r3, r3, r7
 8015816:	4638      	mov	r0, r7
 8015818:	6013      	str	r3, [r2, #0]
 801581a:	b004      	add	sp, #16
 801581c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015820:	1c59      	adds	r1, r3, #1
 8015822:	9103      	str	r1, [sp, #12]
 8015824:	701a      	strb	r2, [r3, #0]
 8015826:	e7f0      	b.n	801580a <__cvt+0xa6>

08015828 <__exponent>:
 8015828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801582a:	4603      	mov	r3, r0
 801582c:	2900      	cmp	r1, #0
 801582e:	bfb8      	it	lt
 8015830:	4249      	neglt	r1, r1
 8015832:	f803 2b02 	strb.w	r2, [r3], #2
 8015836:	bfb4      	ite	lt
 8015838:	222d      	movlt	r2, #45	; 0x2d
 801583a:	222b      	movge	r2, #43	; 0x2b
 801583c:	2909      	cmp	r1, #9
 801583e:	7042      	strb	r2, [r0, #1]
 8015840:	dd2a      	ble.n	8015898 <__exponent+0x70>
 8015842:	f10d 0207 	add.w	r2, sp, #7
 8015846:	4617      	mov	r7, r2
 8015848:	260a      	movs	r6, #10
 801584a:	4694      	mov	ip, r2
 801584c:	fb91 f5f6 	sdiv	r5, r1, r6
 8015850:	fb06 1415 	mls	r4, r6, r5, r1
 8015854:	3430      	adds	r4, #48	; 0x30
 8015856:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801585a:	460c      	mov	r4, r1
 801585c:	2c63      	cmp	r4, #99	; 0x63
 801585e:	f102 32ff 	add.w	r2, r2, #4294967295
 8015862:	4629      	mov	r1, r5
 8015864:	dcf1      	bgt.n	801584a <__exponent+0x22>
 8015866:	3130      	adds	r1, #48	; 0x30
 8015868:	f1ac 0402 	sub.w	r4, ip, #2
 801586c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015870:	1c41      	adds	r1, r0, #1
 8015872:	4622      	mov	r2, r4
 8015874:	42ba      	cmp	r2, r7
 8015876:	d30a      	bcc.n	801588e <__exponent+0x66>
 8015878:	f10d 0209 	add.w	r2, sp, #9
 801587c:	eba2 020c 	sub.w	r2, r2, ip
 8015880:	42bc      	cmp	r4, r7
 8015882:	bf88      	it	hi
 8015884:	2200      	movhi	r2, #0
 8015886:	4413      	add	r3, r2
 8015888:	1a18      	subs	r0, r3, r0
 801588a:	b003      	add	sp, #12
 801588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801588e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015892:	f801 5f01 	strb.w	r5, [r1, #1]!
 8015896:	e7ed      	b.n	8015874 <__exponent+0x4c>
 8015898:	2330      	movs	r3, #48	; 0x30
 801589a:	3130      	adds	r1, #48	; 0x30
 801589c:	7083      	strb	r3, [r0, #2]
 801589e:	70c1      	strb	r1, [r0, #3]
 80158a0:	1d03      	adds	r3, r0, #4
 80158a2:	e7f1      	b.n	8015888 <__exponent+0x60>

080158a4 <_printf_float>:
 80158a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a8:	ed2d 8b02 	vpush	{d8}
 80158ac:	b08d      	sub	sp, #52	; 0x34
 80158ae:	460c      	mov	r4, r1
 80158b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80158b4:	4616      	mov	r6, r2
 80158b6:	461f      	mov	r7, r3
 80158b8:	4605      	mov	r5, r0
 80158ba:	f000 fce7 	bl	801628c <_localeconv_r>
 80158be:	f8d0 a000 	ldr.w	sl, [r0]
 80158c2:	4650      	mov	r0, sl
 80158c4:	f7ea fcec 	bl	80002a0 <strlen>
 80158c8:	2300      	movs	r3, #0
 80158ca:	930a      	str	r3, [sp, #40]	; 0x28
 80158cc:	6823      	ldr	r3, [r4, #0]
 80158ce:	9305      	str	r3, [sp, #20]
 80158d0:	f8d8 3000 	ldr.w	r3, [r8]
 80158d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80158d8:	3307      	adds	r3, #7
 80158da:	f023 0307 	bic.w	r3, r3, #7
 80158de:	f103 0208 	add.w	r2, r3, #8
 80158e2:	f8c8 2000 	str.w	r2, [r8]
 80158e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80158ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80158ee:	9307      	str	r3, [sp, #28]
 80158f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80158f4:	ee08 0a10 	vmov	s16, r0
 80158f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80158fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015900:	4b9e      	ldr	r3, [pc, #632]	; (8015b7c <_printf_float+0x2d8>)
 8015902:	f04f 32ff 	mov.w	r2, #4294967295
 8015906:	f7eb f929 	bl	8000b5c <__aeabi_dcmpun>
 801590a:	bb88      	cbnz	r0, 8015970 <_printf_float+0xcc>
 801590c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015910:	4b9a      	ldr	r3, [pc, #616]	; (8015b7c <_printf_float+0x2d8>)
 8015912:	f04f 32ff 	mov.w	r2, #4294967295
 8015916:	f7eb f903 	bl	8000b20 <__aeabi_dcmple>
 801591a:	bb48      	cbnz	r0, 8015970 <_printf_float+0xcc>
 801591c:	2200      	movs	r2, #0
 801591e:	2300      	movs	r3, #0
 8015920:	4640      	mov	r0, r8
 8015922:	4649      	mov	r1, r9
 8015924:	f7eb f8f2 	bl	8000b0c <__aeabi_dcmplt>
 8015928:	b110      	cbz	r0, 8015930 <_printf_float+0x8c>
 801592a:	232d      	movs	r3, #45	; 0x2d
 801592c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015930:	4a93      	ldr	r2, [pc, #588]	; (8015b80 <_printf_float+0x2dc>)
 8015932:	4b94      	ldr	r3, [pc, #592]	; (8015b84 <_printf_float+0x2e0>)
 8015934:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015938:	bf94      	ite	ls
 801593a:	4690      	movls	r8, r2
 801593c:	4698      	movhi	r8, r3
 801593e:	2303      	movs	r3, #3
 8015940:	6123      	str	r3, [r4, #16]
 8015942:	9b05      	ldr	r3, [sp, #20]
 8015944:	f023 0304 	bic.w	r3, r3, #4
 8015948:	6023      	str	r3, [r4, #0]
 801594a:	f04f 0900 	mov.w	r9, #0
 801594e:	9700      	str	r7, [sp, #0]
 8015950:	4633      	mov	r3, r6
 8015952:	aa0b      	add	r2, sp, #44	; 0x2c
 8015954:	4621      	mov	r1, r4
 8015956:	4628      	mov	r0, r5
 8015958:	f000 f9da 	bl	8015d10 <_printf_common>
 801595c:	3001      	adds	r0, #1
 801595e:	f040 8090 	bne.w	8015a82 <_printf_float+0x1de>
 8015962:	f04f 30ff 	mov.w	r0, #4294967295
 8015966:	b00d      	add	sp, #52	; 0x34
 8015968:	ecbd 8b02 	vpop	{d8}
 801596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015970:	4642      	mov	r2, r8
 8015972:	464b      	mov	r3, r9
 8015974:	4640      	mov	r0, r8
 8015976:	4649      	mov	r1, r9
 8015978:	f7eb f8f0 	bl	8000b5c <__aeabi_dcmpun>
 801597c:	b140      	cbz	r0, 8015990 <_printf_float+0xec>
 801597e:	464b      	mov	r3, r9
 8015980:	2b00      	cmp	r3, #0
 8015982:	bfbc      	itt	lt
 8015984:	232d      	movlt	r3, #45	; 0x2d
 8015986:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801598a:	4a7f      	ldr	r2, [pc, #508]	; (8015b88 <_printf_float+0x2e4>)
 801598c:	4b7f      	ldr	r3, [pc, #508]	; (8015b8c <_printf_float+0x2e8>)
 801598e:	e7d1      	b.n	8015934 <_printf_float+0x90>
 8015990:	6863      	ldr	r3, [r4, #4]
 8015992:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015996:	9206      	str	r2, [sp, #24]
 8015998:	1c5a      	adds	r2, r3, #1
 801599a:	d13f      	bne.n	8015a1c <_printf_float+0x178>
 801599c:	2306      	movs	r3, #6
 801599e:	6063      	str	r3, [r4, #4]
 80159a0:	9b05      	ldr	r3, [sp, #20]
 80159a2:	6861      	ldr	r1, [r4, #4]
 80159a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80159a8:	2300      	movs	r3, #0
 80159aa:	9303      	str	r3, [sp, #12]
 80159ac:	ab0a      	add	r3, sp, #40	; 0x28
 80159ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80159b2:	ab09      	add	r3, sp, #36	; 0x24
 80159b4:	ec49 8b10 	vmov	d0, r8, r9
 80159b8:	9300      	str	r3, [sp, #0]
 80159ba:	6022      	str	r2, [r4, #0]
 80159bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80159c0:	4628      	mov	r0, r5
 80159c2:	f7ff fecf 	bl	8015764 <__cvt>
 80159c6:	9b06      	ldr	r3, [sp, #24]
 80159c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159ca:	2b47      	cmp	r3, #71	; 0x47
 80159cc:	4680      	mov	r8, r0
 80159ce:	d108      	bne.n	80159e2 <_printf_float+0x13e>
 80159d0:	1cc8      	adds	r0, r1, #3
 80159d2:	db02      	blt.n	80159da <_printf_float+0x136>
 80159d4:	6863      	ldr	r3, [r4, #4]
 80159d6:	4299      	cmp	r1, r3
 80159d8:	dd41      	ble.n	8015a5e <_printf_float+0x1ba>
 80159da:	f1ab 0302 	sub.w	r3, fp, #2
 80159de:	fa5f fb83 	uxtb.w	fp, r3
 80159e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80159e6:	d820      	bhi.n	8015a2a <_printf_float+0x186>
 80159e8:	3901      	subs	r1, #1
 80159ea:	465a      	mov	r2, fp
 80159ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80159f0:	9109      	str	r1, [sp, #36]	; 0x24
 80159f2:	f7ff ff19 	bl	8015828 <__exponent>
 80159f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159f8:	1813      	adds	r3, r2, r0
 80159fa:	2a01      	cmp	r2, #1
 80159fc:	4681      	mov	r9, r0
 80159fe:	6123      	str	r3, [r4, #16]
 8015a00:	dc02      	bgt.n	8015a08 <_printf_float+0x164>
 8015a02:	6822      	ldr	r2, [r4, #0]
 8015a04:	07d2      	lsls	r2, r2, #31
 8015a06:	d501      	bpl.n	8015a0c <_printf_float+0x168>
 8015a08:	3301      	adds	r3, #1
 8015a0a:	6123      	str	r3, [r4, #16]
 8015a0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d09c      	beq.n	801594e <_printf_float+0xaa>
 8015a14:	232d      	movs	r3, #45	; 0x2d
 8015a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a1a:	e798      	b.n	801594e <_printf_float+0xaa>
 8015a1c:	9a06      	ldr	r2, [sp, #24]
 8015a1e:	2a47      	cmp	r2, #71	; 0x47
 8015a20:	d1be      	bne.n	80159a0 <_printf_float+0xfc>
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d1bc      	bne.n	80159a0 <_printf_float+0xfc>
 8015a26:	2301      	movs	r3, #1
 8015a28:	e7b9      	b.n	801599e <_printf_float+0xfa>
 8015a2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015a2e:	d118      	bne.n	8015a62 <_printf_float+0x1be>
 8015a30:	2900      	cmp	r1, #0
 8015a32:	6863      	ldr	r3, [r4, #4]
 8015a34:	dd0b      	ble.n	8015a4e <_printf_float+0x1aa>
 8015a36:	6121      	str	r1, [r4, #16]
 8015a38:	b913      	cbnz	r3, 8015a40 <_printf_float+0x19c>
 8015a3a:	6822      	ldr	r2, [r4, #0]
 8015a3c:	07d0      	lsls	r0, r2, #31
 8015a3e:	d502      	bpl.n	8015a46 <_printf_float+0x1a2>
 8015a40:	3301      	adds	r3, #1
 8015a42:	440b      	add	r3, r1
 8015a44:	6123      	str	r3, [r4, #16]
 8015a46:	65a1      	str	r1, [r4, #88]	; 0x58
 8015a48:	f04f 0900 	mov.w	r9, #0
 8015a4c:	e7de      	b.n	8015a0c <_printf_float+0x168>
 8015a4e:	b913      	cbnz	r3, 8015a56 <_printf_float+0x1b2>
 8015a50:	6822      	ldr	r2, [r4, #0]
 8015a52:	07d2      	lsls	r2, r2, #31
 8015a54:	d501      	bpl.n	8015a5a <_printf_float+0x1b6>
 8015a56:	3302      	adds	r3, #2
 8015a58:	e7f4      	b.n	8015a44 <_printf_float+0x1a0>
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	e7f2      	b.n	8015a44 <_printf_float+0x1a0>
 8015a5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a64:	4299      	cmp	r1, r3
 8015a66:	db05      	blt.n	8015a74 <_printf_float+0x1d0>
 8015a68:	6823      	ldr	r3, [r4, #0]
 8015a6a:	6121      	str	r1, [r4, #16]
 8015a6c:	07d8      	lsls	r0, r3, #31
 8015a6e:	d5ea      	bpl.n	8015a46 <_printf_float+0x1a2>
 8015a70:	1c4b      	adds	r3, r1, #1
 8015a72:	e7e7      	b.n	8015a44 <_printf_float+0x1a0>
 8015a74:	2900      	cmp	r1, #0
 8015a76:	bfd4      	ite	le
 8015a78:	f1c1 0202 	rsble	r2, r1, #2
 8015a7c:	2201      	movgt	r2, #1
 8015a7e:	4413      	add	r3, r2
 8015a80:	e7e0      	b.n	8015a44 <_printf_float+0x1a0>
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	055a      	lsls	r2, r3, #21
 8015a86:	d407      	bmi.n	8015a98 <_printf_float+0x1f4>
 8015a88:	6923      	ldr	r3, [r4, #16]
 8015a8a:	4642      	mov	r2, r8
 8015a8c:	4631      	mov	r1, r6
 8015a8e:	4628      	mov	r0, r5
 8015a90:	47b8      	blx	r7
 8015a92:	3001      	adds	r0, #1
 8015a94:	d12c      	bne.n	8015af0 <_printf_float+0x24c>
 8015a96:	e764      	b.n	8015962 <_printf_float+0xbe>
 8015a98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015a9c:	f240 80e0 	bls.w	8015c60 <_printf_float+0x3bc>
 8015aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	f7eb f826 	bl	8000af8 <__aeabi_dcmpeq>
 8015aac:	2800      	cmp	r0, #0
 8015aae:	d034      	beq.n	8015b1a <_printf_float+0x276>
 8015ab0:	4a37      	ldr	r2, [pc, #220]	; (8015b90 <_printf_float+0x2ec>)
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	4631      	mov	r1, r6
 8015ab6:	4628      	mov	r0, r5
 8015ab8:	47b8      	blx	r7
 8015aba:	3001      	adds	r0, #1
 8015abc:	f43f af51 	beq.w	8015962 <_printf_float+0xbe>
 8015ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	db02      	blt.n	8015ace <_printf_float+0x22a>
 8015ac8:	6823      	ldr	r3, [r4, #0]
 8015aca:	07d8      	lsls	r0, r3, #31
 8015acc:	d510      	bpl.n	8015af0 <_printf_float+0x24c>
 8015ace:	ee18 3a10 	vmov	r3, s16
 8015ad2:	4652      	mov	r2, sl
 8015ad4:	4631      	mov	r1, r6
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	47b8      	blx	r7
 8015ada:	3001      	adds	r0, #1
 8015adc:	f43f af41 	beq.w	8015962 <_printf_float+0xbe>
 8015ae0:	f04f 0800 	mov.w	r8, #0
 8015ae4:	f104 091a 	add.w	r9, r4, #26
 8015ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aea:	3b01      	subs	r3, #1
 8015aec:	4543      	cmp	r3, r8
 8015aee:	dc09      	bgt.n	8015b04 <_printf_float+0x260>
 8015af0:	6823      	ldr	r3, [r4, #0]
 8015af2:	079b      	lsls	r3, r3, #30
 8015af4:	f100 8107 	bmi.w	8015d06 <_printf_float+0x462>
 8015af8:	68e0      	ldr	r0, [r4, #12]
 8015afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015afc:	4298      	cmp	r0, r3
 8015afe:	bfb8      	it	lt
 8015b00:	4618      	movlt	r0, r3
 8015b02:	e730      	b.n	8015966 <_printf_float+0xc2>
 8015b04:	2301      	movs	r3, #1
 8015b06:	464a      	mov	r2, r9
 8015b08:	4631      	mov	r1, r6
 8015b0a:	4628      	mov	r0, r5
 8015b0c:	47b8      	blx	r7
 8015b0e:	3001      	adds	r0, #1
 8015b10:	f43f af27 	beq.w	8015962 <_printf_float+0xbe>
 8015b14:	f108 0801 	add.w	r8, r8, #1
 8015b18:	e7e6      	b.n	8015ae8 <_printf_float+0x244>
 8015b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	dc39      	bgt.n	8015b94 <_printf_float+0x2f0>
 8015b20:	4a1b      	ldr	r2, [pc, #108]	; (8015b90 <_printf_float+0x2ec>)
 8015b22:	2301      	movs	r3, #1
 8015b24:	4631      	mov	r1, r6
 8015b26:	4628      	mov	r0, r5
 8015b28:	47b8      	blx	r7
 8015b2a:	3001      	adds	r0, #1
 8015b2c:	f43f af19 	beq.w	8015962 <_printf_float+0xbe>
 8015b30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b34:	4313      	orrs	r3, r2
 8015b36:	d102      	bne.n	8015b3e <_printf_float+0x29a>
 8015b38:	6823      	ldr	r3, [r4, #0]
 8015b3a:	07d9      	lsls	r1, r3, #31
 8015b3c:	d5d8      	bpl.n	8015af0 <_printf_float+0x24c>
 8015b3e:	ee18 3a10 	vmov	r3, s16
 8015b42:	4652      	mov	r2, sl
 8015b44:	4631      	mov	r1, r6
 8015b46:	4628      	mov	r0, r5
 8015b48:	47b8      	blx	r7
 8015b4a:	3001      	adds	r0, #1
 8015b4c:	f43f af09 	beq.w	8015962 <_printf_float+0xbe>
 8015b50:	f04f 0900 	mov.w	r9, #0
 8015b54:	f104 0a1a 	add.w	sl, r4, #26
 8015b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b5a:	425b      	negs	r3, r3
 8015b5c:	454b      	cmp	r3, r9
 8015b5e:	dc01      	bgt.n	8015b64 <_printf_float+0x2c0>
 8015b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b62:	e792      	b.n	8015a8a <_printf_float+0x1e6>
 8015b64:	2301      	movs	r3, #1
 8015b66:	4652      	mov	r2, sl
 8015b68:	4631      	mov	r1, r6
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	47b8      	blx	r7
 8015b6e:	3001      	adds	r0, #1
 8015b70:	f43f aef7 	beq.w	8015962 <_printf_float+0xbe>
 8015b74:	f109 0901 	add.w	r9, r9, #1
 8015b78:	e7ee      	b.n	8015b58 <_printf_float+0x2b4>
 8015b7a:	bf00      	nop
 8015b7c:	7fefffff 	.word	0x7fefffff
 8015b80:	0801a154 	.word	0x0801a154
 8015b84:	0801a158 	.word	0x0801a158
 8015b88:	0801a15c 	.word	0x0801a15c
 8015b8c:	0801a160 	.word	0x0801a160
 8015b90:	0801a164 	.word	0x0801a164
 8015b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	bfa8      	it	ge
 8015b9c:	461a      	movge	r2, r3
 8015b9e:	2a00      	cmp	r2, #0
 8015ba0:	4691      	mov	r9, r2
 8015ba2:	dc37      	bgt.n	8015c14 <_printf_float+0x370>
 8015ba4:	f04f 0b00 	mov.w	fp, #0
 8015ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015bac:	f104 021a 	add.w	r2, r4, #26
 8015bb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015bb2:	9305      	str	r3, [sp, #20]
 8015bb4:	eba3 0309 	sub.w	r3, r3, r9
 8015bb8:	455b      	cmp	r3, fp
 8015bba:	dc33      	bgt.n	8015c24 <_printf_float+0x380>
 8015bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	db3b      	blt.n	8015c3c <_printf_float+0x398>
 8015bc4:	6823      	ldr	r3, [r4, #0]
 8015bc6:	07da      	lsls	r2, r3, #31
 8015bc8:	d438      	bmi.n	8015c3c <_printf_float+0x398>
 8015bca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015bce:	eba2 0903 	sub.w	r9, r2, r3
 8015bd2:	9b05      	ldr	r3, [sp, #20]
 8015bd4:	1ad2      	subs	r2, r2, r3
 8015bd6:	4591      	cmp	r9, r2
 8015bd8:	bfa8      	it	ge
 8015bda:	4691      	movge	r9, r2
 8015bdc:	f1b9 0f00 	cmp.w	r9, #0
 8015be0:	dc35      	bgt.n	8015c4e <_printf_float+0x3aa>
 8015be2:	f04f 0800 	mov.w	r8, #0
 8015be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015bea:	f104 0a1a 	add.w	sl, r4, #26
 8015bee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bf2:	1a9b      	subs	r3, r3, r2
 8015bf4:	eba3 0309 	sub.w	r3, r3, r9
 8015bf8:	4543      	cmp	r3, r8
 8015bfa:	f77f af79 	ble.w	8015af0 <_printf_float+0x24c>
 8015bfe:	2301      	movs	r3, #1
 8015c00:	4652      	mov	r2, sl
 8015c02:	4631      	mov	r1, r6
 8015c04:	4628      	mov	r0, r5
 8015c06:	47b8      	blx	r7
 8015c08:	3001      	adds	r0, #1
 8015c0a:	f43f aeaa 	beq.w	8015962 <_printf_float+0xbe>
 8015c0e:	f108 0801 	add.w	r8, r8, #1
 8015c12:	e7ec      	b.n	8015bee <_printf_float+0x34a>
 8015c14:	4613      	mov	r3, r2
 8015c16:	4631      	mov	r1, r6
 8015c18:	4642      	mov	r2, r8
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	47b8      	blx	r7
 8015c1e:	3001      	adds	r0, #1
 8015c20:	d1c0      	bne.n	8015ba4 <_printf_float+0x300>
 8015c22:	e69e      	b.n	8015962 <_printf_float+0xbe>
 8015c24:	2301      	movs	r3, #1
 8015c26:	4631      	mov	r1, r6
 8015c28:	4628      	mov	r0, r5
 8015c2a:	9205      	str	r2, [sp, #20]
 8015c2c:	47b8      	blx	r7
 8015c2e:	3001      	adds	r0, #1
 8015c30:	f43f ae97 	beq.w	8015962 <_printf_float+0xbe>
 8015c34:	9a05      	ldr	r2, [sp, #20]
 8015c36:	f10b 0b01 	add.w	fp, fp, #1
 8015c3a:	e7b9      	b.n	8015bb0 <_printf_float+0x30c>
 8015c3c:	ee18 3a10 	vmov	r3, s16
 8015c40:	4652      	mov	r2, sl
 8015c42:	4631      	mov	r1, r6
 8015c44:	4628      	mov	r0, r5
 8015c46:	47b8      	blx	r7
 8015c48:	3001      	adds	r0, #1
 8015c4a:	d1be      	bne.n	8015bca <_printf_float+0x326>
 8015c4c:	e689      	b.n	8015962 <_printf_float+0xbe>
 8015c4e:	9a05      	ldr	r2, [sp, #20]
 8015c50:	464b      	mov	r3, r9
 8015c52:	4442      	add	r2, r8
 8015c54:	4631      	mov	r1, r6
 8015c56:	4628      	mov	r0, r5
 8015c58:	47b8      	blx	r7
 8015c5a:	3001      	adds	r0, #1
 8015c5c:	d1c1      	bne.n	8015be2 <_printf_float+0x33e>
 8015c5e:	e680      	b.n	8015962 <_printf_float+0xbe>
 8015c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c62:	2a01      	cmp	r2, #1
 8015c64:	dc01      	bgt.n	8015c6a <_printf_float+0x3c6>
 8015c66:	07db      	lsls	r3, r3, #31
 8015c68:	d53a      	bpl.n	8015ce0 <_printf_float+0x43c>
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	4642      	mov	r2, r8
 8015c6e:	4631      	mov	r1, r6
 8015c70:	4628      	mov	r0, r5
 8015c72:	47b8      	blx	r7
 8015c74:	3001      	adds	r0, #1
 8015c76:	f43f ae74 	beq.w	8015962 <_printf_float+0xbe>
 8015c7a:	ee18 3a10 	vmov	r3, s16
 8015c7e:	4652      	mov	r2, sl
 8015c80:	4631      	mov	r1, r6
 8015c82:	4628      	mov	r0, r5
 8015c84:	47b8      	blx	r7
 8015c86:	3001      	adds	r0, #1
 8015c88:	f43f ae6b 	beq.w	8015962 <_printf_float+0xbe>
 8015c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015c90:	2200      	movs	r2, #0
 8015c92:	2300      	movs	r3, #0
 8015c94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015c98:	f7ea ff2e 	bl	8000af8 <__aeabi_dcmpeq>
 8015c9c:	b9d8      	cbnz	r0, 8015cd6 <_printf_float+0x432>
 8015c9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015ca2:	f108 0201 	add.w	r2, r8, #1
 8015ca6:	4631      	mov	r1, r6
 8015ca8:	4628      	mov	r0, r5
 8015caa:	47b8      	blx	r7
 8015cac:	3001      	adds	r0, #1
 8015cae:	d10e      	bne.n	8015cce <_printf_float+0x42a>
 8015cb0:	e657      	b.n	8015962 <_printf_float+0xbe>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	4652      	mov	r2, sl
 8015cb6:	4631      	mov	r1, r6
 8015cb8:	4628      	mov	r0, r5
 8015cba:	47b8      	blx	r7
 8015cbc:	3001      	adds	r0, #1
 8015cbe:	f43f ae50 	beq.w	8015962 <_printf_float+0xbe>
 8015cc2:	f108 0801 	add.w	r8, r8, #1
 8015cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cc8:	3b01      	subs	r3, #1
 8015cca:	4543      	cmp	r3, r8
 8015ccc:	dcf1      	bgt.n	8015cb2 <_printf_float+0x40e>
 8015cce:	464b      	mov	r3, r9
 8015cd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015cd4:	e6da      	b.n	8015a8c <_printf_float+0x1e8>
 8015cd6:	f04f 0800 	mov.w	r8, #0
 8015cda:	f104 0a1a 	add.w	sl, r4, #26
 8015cde:	e7f2      	b.n	8015cc6 <_printf_float+0x422>
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	4642      	mov	r2, r8
 8015ce4:	e7df      	b.n	8015ca6 <_printf_float+0x402>
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	464a      	mov	r2, r9
 8015cea:	4631      	mov	r1, r6
 8015cec:	4628      	mov	r0, r5
 8015cee:	47b8      	blx	r7
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	f43f ae36 	beq.w	8015962 <_printf_float+0xbe>
 8015cf6:	f108 0801 	add.w	r8, r8, #1
 8015cfa:	68e3      	ldr	r3, [r4, #12]
 8015cfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cfe:	1a5b      	subs	r3, r3, r1
 8015d00:	4543      	cmp	r3, r8
 8015d02:	dcf0      	bgt.n	8015ce6 <_printf_float+0x442>
 8015d04:	e6f8      	b.n	8015af8 <_printf_float+0x254>
 8015d06:	f04f 0800 	mov.w	r8, #0
 8015d0a:	f104 0919 	add.w	r9, r4, #25
 8015d0e:	e7f4      	b.n	8015cfa <_printf_float+0x456>

08015d10 <_printf_common>:
 8015d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d14:	4616      	mov	r6, r2
 8015d16:	4699      	mov	r9, r3
 8015d18:	688a      	ldr	r2, [r1, #8]
 8015d1a:	690b      	ldr	r3, [r1, #16]
 8015d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015d20:	4293      	cmp	r3, r2
 8015d22:	bfb8      	it	lt
 8015d24:	4613      	movlt	r3, r2
 8015d26:	6033      	str	r3, [r6, #0]
 8015d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015d2c:	4607      	mov	r7, r0
 8015d2e:	460c      	mov	r4, r1
 8015d30:	b10a      	cbz	r2, 8015d36 <_printf_common+0x26>
 8015d32:	3301      	adds	r3, #1
 8015d34:	6033      	str	r3, [r6, #0]
 8015d36:	6823      	ldr	r3, [r4, #0]
 8015d38:	0699      	lsls	r1, r3, #26
 8015d3a:	bf42      	ittt	mi
 8015d3c:	6833      	ldrmi	r3, [r6, #0]
 8015d3e:	3302      	addmi	r3, #2
 8015d40:	6033      	strmi	r3, [r6, #0]
 8015d42:	6825      	ldr	r5, [r4, #0]
 8015d44:	f015 0506 	ands.w	r5, r5, #6
 8015d48:	d106      	bne.n	8015d58 <_printf_common+0x48>
 8015d4a:	f104 0a19 	add.w	sl, r4, #25
 8015d4e:	68e3      	ldr	r3, [r4, #12]
 8015d50:	6832      	ldr	r2, [r6, #0]
 8015d52:	1a9b      	subs	r3, r3, r2
 8015d54:	42ab      	cmp	r3, r5
 8015d56:	dc26      	bgt.n	8015da6 <_printf_common+0x96>
 8015d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015d5c:	1e13      	subs	r3, r2, #0
 8015d5e:	6822      	ldr	r2, [r4, #0]
 8015d60:	bf18      	it	ne
 8015d62:	2301      	movne	r3, #1
 8015d64:	0692      	lsls	r2, r2, #26
 8015d66:	d42b      	bmi.n	8015dc0 <_printf_common+0xb0>
 8015d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d6c:	4649      	mov	r1, r9
 8015d6e:	4638      	mov	r0, r7
 8015d70:	47c0      	blx	r8
 8015d72:	3001      	adds	r0, #1
 8015d74:	d01e      	beq.n	8015db4 <_printf_common+0xa4>
 8015d76:	6823      	ldr	r3, [r4, #0]
 8015d78:	6922      	ldr	r2, [r4, #16]
 8015d7a:	f003 0306 	and.w	r3, r3, #6
 8015d7e:	2b04      	cmp	r3, #4
 8015d80:	bf02      	ittt	eq
 8015d82:	68e5      	ldreq	r5, [r4, #12]
 8015d84:	6833      	ldreq	r3, [r6, #0]
 8015d86:	1aed      	subeq	r5, r5, r3
 8015d88:	68a3      	ldr	r3, [r4, #8]
 8015d8a:	bf0c      	ite	eq
 8015d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d90:	2500      	movne	r5, #0
 8015d92:	4293      	cmp	r3, r2
 8015d94:	bfc4      	itt	gt
 8015d96:	1a9b      	subgt	r3, r3, r2
 8015d98:	18ed      	addgt	r5, r5, r3
 8015d9a:	2600      	movs	r6, #0
 8015d9c:	341a      	adds	r4, #26
 8015d9e:	42b5      	cmp	r5, r6
 8015da0:	d11a      	bne.n	8015dd8 <_printf_common+0xc8>
 8015da2:	2000      	movs	r0, #0
 8015da4:	e008      	b.n	8015db8 <_printf_common+0xa8>
 8015da6:	2301      	movs	r3, #1
 8015da8:	4652      	mov	r2, sl
 8015daa:	4649      	mov	r1, r9
 8015dac:	4638      	mov	r0, r7
 8015dae:	47c0      	blx	r8
 8015db0:	3001      	adds	r0, #1
 8015db2:	d103      	bne.n	8015dbc <_printf_common+0xac>
 8015db4:	f04f 30ff 	mov.w	r0, #4294967295
 8015db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dbc:	3501      	adds	r5, #1
 8015dbe:	e7c6      	b.n	8015d4e <_printf_common+0x3e>
 8015dc0:	18e1      	adds	r1, r4, r3
 8015dc2:	1c5a      	adds	r2, r3, #1
 8015dc4:	2030      	movs	r0, #48	; 0x30
 8015dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015dca:	4422      	add	r2, r4
 8015dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015dd4:	3302      	adds	r3, #2
 8015dd6:	e7c7      	b.n	8015d68 <_printf_common+0x58>
 8015dd8:	2301      	movs	r3, #1
 8015dda:	4622      	mov	r2, r4
 8015ddc:	4649      	mov	r1, r9
 8015dde:	4638      	mov	r0, r7
 8015de0:	47c0      	blx	r8
 8015de2:	3001      	adds	r0, #1
 8015de4:	d0e6      	beq.n	8015db4 <_printf_common+0xa4>
 8015de6:	3601      	adds	r6, #1
 8015de8:	e7d9      	b.n	8015d9e <_printf_common+0x8e>
	...

08015dec <_printf_i>:
 8015dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015df0:	7e0f      	ldrb	r7, [r1, #24]
 8015df2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015df4:	2f78      	cmp	r7, #120	; 0x78
 8015df6:	4691      	mov	r9, r2
 8015df8:	4680      	mov	r8, r0
 8015dfa:	460c      	mov	r4, r1
 8015dfc:	469a      	mov	sl, r3
 8015dfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015e02:	d807      	bhi.n	8015e14 <_printf_i+0x28>
 8015e04:	2f62      	cmp	r7, #98	; 0x62
 8015e06:	d80a      	bhi.n	8015e1e <_printf_i+0x32>
 8015e08:	2f00      	cmp	r7, #0
 8015e0a:	f000 80d4 	beq.w	8015fb6 <_printf_i+0x1ca>
 8015e0e:	2f58      	cmp	r7, #88	; 0x58
 8015e10:	f000 80c0 	beq.w	8015f94 <_printf_i+0x1a8>
 8015e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015e1c:	e03a      	b.n	8015e94 <_printf_i+0xa8>
 8015e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015e22:	2b15      	cmp	r3, #21
 8015e24:	d8f6      	bhi.n	8015e14 <_printf_i+0x28>
 8015e26:	a101      	add	r1, pc, #4	; (adr r1, 8015e2c <_printf_i+0x40>)
 8015e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e2c:	08015e85 	.word	0x08015e85
 8015e30:	08015e99 	.word	0x08015e99
 8015e34:	08015e15 	.word	0x08015e15
 8015e38:	08015e15 	.word	0x08015e15
 8015e3c:	08015e15 	.word	0x08015e15
 8015e40:	08015e15 	.word	0x08015e15
 8015e44:	08015e99 	.word	0x08015e99
 8015e48:	08015e15 	.word	0x08015e15
 8015e4c:	08015e15 	.word	0x08015e15
 8015e50:	08015e15 	.word	0x08015e15
 8015e54:	08015e15 	.word	0x08015e15
 8015e58:	08015f9d 	.word	0x08015f9d
 8015e5c:	08015ec5 	.word	0x08015ec5
 8015e60:	08015f57 	.word	0x08015f57
 8015e64:	08015e15 	.word	0x08015e15
 8015e68:	08015e15 	.word	0x08015e15
 8015e6c:	08015fbf 	.word	0x08015fbf
 8015e70:	08015e15 	.word	0x08015e15
 8015e74:	08015ec5 	.word	0x08015ec5
 8015e78:	08015e15 	.word	0x08015e15
 8015e7c:	08015e15 	.word	0x08015e15
 8015e80:	08015f5f 	.word	0x08015f5f
 8015e84:	682b      	ldr	r3, [r5, #0]
 8015e86:	1d1a      	adds	r2, r3, #4
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	602a      	str	r2, [r5, #0]
 8015e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e94:	2301      	movs	r3, #1
 8015e96:	e09f      	b.n	8015fd8 <_printf_i+0x1ec>
 8015e98:	6820      	ldr	r0, [r4, #0]
 8015e9a:	682b      	ldr	r3, [r5, #0]
 8015e9c:	0607      	lsls	r7, r0, #24
 8015e9e:	f103 0104 	add.w	r1, r3, #4
 8015ea2:	6029      	str	r1, [r5, #0]
 8015ea4:	d501      	bpl.n	8015eaa <_printf_i+0xbe>
 8015ea6:	681e      	ldr	r6, [r3, #0]
 8015ea8:	e003      	b.n	8015eb2 <_printf_i+0xc6>
 8015eaa:	0646      	lsls	r6, r0, #25
 8015eac:	d5fb      	bpl.n	8015ea6 <_printf_i+0xba>
 8015eae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015eb2:	2e00      	cmp	r6, #0
 8015eb4:	da03      	bge.n	8015ebe <_printf_i+0xd2>
 8015eb6:	232d      	movs	r3, #45	; 0x2d
 8015eb8:	4276      	negs	r6, r6
 8015eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ebe:	485a      	ldr	r0, [pc, #360]	; (8016028 <_printf_i+0x23c>)
 8015ec0:	230a      	movs	r3, #10
 8015ec2:	e012      	b.n	8015eea <_printf_i+0xfe>
 8015ec4:	682b      	ldr	r3, [r5, #0]
 8015ec6:	6820      	ldr	r0, [r4, #0]
 8015ec8:	1d19      	adds	r1, r3, #4
 8015eca:	6029      	str	r1, [r5, #0]
 8015ecc:	0605      	lsls	r5, r0, #24
 8015ece:	d501      	bpl.n	8015ed4 <_printf_i+0xe8>
 8015ed0:	681e      	ldr	r6, [r3, #0]
 8015ed2:	e002      	b.n	8015eda <_printf_i+0xee>
 8015ed4:	0641      	lsls	r1, r0, #25
 8015ed6:	d5fb      	bpl.n	8015ed0 <_printf_i+0xe4>
 8015ed8:	881e      	ldrh	r6, [r3, #0]
 8015eda:	4853      	ldr	r0, [pc, #332]	; (8016028 <_printf_i+0x23c>)
 8015edc:	2f6f      	cmp	r7, #111	; 0x6f
 8015ede:	bf0c      	ite	eq
 8015ee0:	2308      	moveq	r3, #8
 8015ee2:	230a      	movne	r3, #10
 8015ee4:	2100      	movs	r1, #0
 8015ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015eea:	6865      	ldr	r5, [r4, #4]
 8015eec:	60a5      	str	r5, [r4, #8]
 8015eee:	2d00      	cmp	r5, #0
 8015ef0:	bfa2      	ittt	ge
 8015ef2:	6821      	ldrge	r1, [r4, #0]
 8015ef4:	f021 0104 	bicge.w	r1, r1, #4
 8015ef8:	6021      	strge	r1, [r4, #0]
 8015efa:	b90e      	cbnz	r6, 8015f00 <_printf_i+0x114>
 8015efc:	2d00      	cmp	r5, #0
 8015efe:	d04b      	beq.n	8015f98 <_printf_i+0x1ac>
 8015f00:	4615      	mov	r5, r2
 8015f02:	fbb6 f1f3 	udiv	r1, r6, r3
 8015f06:	fb03 6711 	mls	r7, r3, r1, r6
 8015f0a:	5dc7      	ldrb	r7, [r0, r7]
 8015f0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015f10:	4637      	mov	r7, r6
 8015f12:	42bb      	cmp	r3, r7
 8015f14:	460e      	mov	r6, r1
 8015f16:	d9f4      	bls.n	8015f02 <_printf_i+0x116>
 8015f18:	2b08      	cmp	r3, #8
 8015f1a:	d10b      	bne.n	8015f34 <_printf_i+0x148>
 8015f1c:	6823      	ldr	r3, [r4, #0]
 8015f1e:	07de      	lsls	r6, r3, #31
 8015f20:	d508      	bpl.n	8015f34 <_printf_i+0x148>
 8015f22:	6923      	ldr	r3, [r4, #16]
 8015f24:	6861      	ldr	r1, [r4, #4]
 8015f26:	4299      	cmp	r1, r3
 8015f28:	bfde      	ittt	le
 8015f2a:	2330      	movle	r3, #48	; 0x30
 8015f2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f34:	1b52      	subs	r2, r2, r5
 8015f36:	6122      	str	r2, [r4, #16]
 8015f38:	f8cd a000 	str.w	sl, [sp]
 8015f3c:	464b      	mov	r3, r9
 8015f3e:	aa03      	add	r2, sp, #12
 8015f40:	4621      	mov	r1, r4
 8015f42:	4640      	mov	r0, r8
 8015f44:	f7ff fee4 	bl	8015d10 <_printf_common>
 8015f48:	3001      	adds	r0, #1
 8015f4a:	d14a      	bne.n	8015fe2 <_printf_i+0x1f6>
 8015f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f50:	b004      	add	sp, #16
 8015f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f56:	6823      	ldr	r3, [r4, #0]
 8015f58:	f043 0320 	orr.w	r3, r3, #32
 8015f5c:	6023      	str	r3, [r4, #0]
 8015f5e:	4833      	ldr	r0, [pc, #204]	; (801602c <_printf_i+0x240>)
 8015f60:	2778      	movs	r7, #120	; 0x78
 8015f62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	6829      	ldr	r1, [r5, #0]
 8015f6a:	061f      	lsls	r7, r3, #24
 8015f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015f70:	d402      	bmi.n	8015f78 <_printf_i+0x18c>
 8015f72:	065f      	lsls	r7, r3, #25
 8015f74:	bf48      	it	mi
 8015f76:	b2b6      	uxthmi	r6, r6
 8015f78:	07df      	lsls	r7, r3, #31
 8015f7a:	bf48      	it	mi
 8015f7c:	f043 0320 	orrmi.w	r3, r3, #32
 8015f80:	6029      	str	r1, [r5, #0]
 8015f82:	bf48      	it	mi
 8015f84:	6023      	strmi	r3, [r4, #0]
 8015f86:	b91e      	cbnz	r6, 8015f90 <_printf_i+0x1a4>
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	f023 0320 	bic.w	r3, r3, #32
 8015f8e:	6023      	str	r3, [r4, #0]
 8015f90:	2310      	movs	r3, #16
 8015f92:	e7a7      	b.n	8015ee4 <_printf_i+0xf8>
 8015f94:	4824      	ldr	r0, [pc, #144]	; (8016028 <_printf_i+0x23c>)
 8015f96:	e7e4      	b.n	8015f62 <_printf_i+0x176>
 8015f98:	4615      	mov	r5, r2
 8015f9a:	e7bd      	b.n	8015f18 <_printf_i+0x12c>
 8015f9c:	682b      	ldr	r3, [r5, #0]
 8015f9e:	6826      	ldr	r6, [r4, #0]
 8015fa0:	6961      	ldr	r1, [r4, #20]
 8015fa2:	1d18      	adds	r0, r3, #4
 8015fa4:	6028      	str	r0, [r5, #0]
 8015fa6:	0635      	lsls	r5, r6, #24
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	d501      	bpl.n	8015fb0 <_printf_i+0x1c4>
 8015fac:	6019      	str	r1, [r3, #0]
 8015fae:	e002      	b.n	8015fb6 <_printf_i+0x1ca>
 8015fb0:	0670      	lsls	r0, r6, #25
 8015fb2:	d5fb      	bpl.n	8015fac <_printf_i+0x1c0>
 8015fb4:	8019      	strh	r1, [r3, #0]
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	6123      	str	r3, [r4, #16]
 8015fba:	4615      	mov	r5, r2
 8015fbc:	e7bc      	b.n	8015f38 <_printf_i+0x14c>
 8015fbe:	682b      	ldr	r3, [r5, #0]
 8015fc0:	1d1a      	adds	r2, r3, #4
 8015fc2:	602a      	str	r2, [r5, #0]
 8015fc4:	681d      	ldr	r5, [r3, #0]
 8015fc6:	6862      	ldr	r2, [r4, #4]
 8015fc8:	2100      	movs	r1, #0
 8015fca:	4628      	mov	r0, r5
 8015fcc:	f7ea f918 	bl	8000200 <memchr>
 8015fd0:	b108      	cbz	r0, 8015fd6 <_printf_i+0x1ea>
 8015fd2:	1b40      	subs	r0, r0, r5
 8015fd4:	6060      	str	r0, [r4, #4]
 8015fd6:	6863      	ldr	r3, [r4, #4]
 8015fd8:	6123      	str	r3, [r4, #16]
 8015fda:	2300      	movs	r3, #0
 8015fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fe0:	e7aa      	b.n	8015f38 <_printf_i+0x14c>
 8015fe2:	6923      	ldr	r3, [r4, #16]
 8015fe4:	462a      	mov	r2, r5
 8015fe6:	4649      	mov	r1, r9
 8015fe8:	4640      	mov	r0, r8
 8015fea:	47d0      	blx	sl
 8015fec:	3001      	adds	r0, #1
 8015fee:	d0ad      	beq.n	8015f4c <_printf_i+0x160>
 8015ff0:	6823      	ldr	r3, [r4, #0]
 8015ff2:	079b      	lsls	r3, r3, #30
 8015ff4:	d413      	bmi.n	801601e <_printf_i+0x232>
 8015ff6:	68e0      	ldr	r0, [r4, #12]
 8015ff8:	9b03      	ldr	r3, [sp, #12]
 8015ffa:	4298      	cmp	r0, r3
 8015ffc:	bfb8      	it	lt
 8015ffe:	4618      	movlt	r0, r3
 8016000:	e7a6      	b.n	8015f50 <_printf_i+0x164>
 8016002:	2301      	movs	r3, #1
 8016004:	4632      	mov	r2, r6
 8016006:	4649      	mov	r1, r9
 8016008:	4640      	mov	r0, r8
 801600a:	47d0      	blx	sl
 801600c:	3001      	adds	r0, #1
 801600e:	d09d      	beq.n	8015f4c <_printf_i+0x160>
 8016010:	3501      	adds	r5, #1
 8016012:	68e3      	ldr	r3, [r4, #12]
 8016014:	9903      	ldr	r1, [sp, #12]
 8016016:	1a5b      	subs	r3, r3, r1
 8016018:	42ab      	cmp	r3, r5
 801601a:	dcf2      	bgt.n	8016002 <_printf_i+0x216>
 801601c:	e7eb      	b.n	8015ff6 <_printf_i+0x20a>
 801601e:	2500      	movs	r5, #0
 8016020:	f104 0619 	add.w	r6, r4, #25
 8016024:	e7f5      	b.n	8016012 <_printf_i+0x226>
 8016026:	bf00      	nop
 8016028:	0801a166 	.word	0x0801a166
 801602c:	0801a177 	.word	0x0801a177

08016030 <std>:
 8016030:	2300      	movs	r3, #0
 8016032:	b510      	push	{r4, lr}
 8016034:	4604      	mov	r4, r0
 8016036:	e9c0 3300 	strd	r3, r3, [r0]
 801603a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801603e:	6083      	str	r3, [r0, #8]
 8016040:	8181      	strh	r1, [r0, #12]
 8016042:	6643      	str	r3, [r0, #100]	; 0x64
 8016044:	81c2      	strh	r2, [r0, #14]
 8016046:	6183      	str	r3, [r0, #24]
 8016048:	4619      	mov	r1, r3
 801604a:	2208      	movs	r2, #8
 801604c:	305c      	adds	r0, #92	; 0x5c
 801604e:	f000 f914 	bl	801627a <memset>
 8016052:	4b0d      	ldr	r3, [pc, #52]	; (8016088 <std+0x58>)
 8016054:	6263      	str	r3, [r4, #36]	; 0x24
 8016056:	4b0d      	ldr	r3, [pc, #52]	; (801608c <std+0x5c>)
 8016058:	62a3      	str	r3, [r4, #40]	; 0x28
 801605a:	4b0d      	ldr	r3, [pc, #52]	; (8016090 <std+0x60>)
 801605c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801605e:	4b0d      	ldr	r3, [pc, #52]	; (8016094 <std+0x64>)
 8016060:	6323      	str	r3, [r4, #48]	; 0x30
 8016062:	4b0d      	ldr	r3, [pc, #52]	; (8016098 <std+0x68>)
 8016064:	6224      	str	r4, [r4, #32]
 8016066:	429c      	cmp	r4, r3
 8016068:	d006      	beq.n	8016078 <std+0x48>
 801606a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801606e:	4294      	cmp	r4, r2
 8016070:	d002      	beq.n	8016078 <std+0x48>
 8016072:	33d0      	adds	r3, #208	; 0xd0
 8016074:	429c      	cmp	r4, r3
 8016076:	d105      	bne.n	8016084 <std+0x54>
 8016078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016080:	f000 b988 	b.w	8016394 <__retarget_lock_init_recursive>
 8016084:	bd10      	pop	{r4, pc}
 8016086:	bf00      	nop
 8016088:	080161f5 	.word	0x080161f5
 801608c:	08016217 	.word	0x08016217
 8016090:	0801624f 	.word	0x0801624f
 8016094:	08016273 	.word	0x08016273
 8016098:	20006408 	.word	0x20006408

0801609c <stdio_exit_handler>:
 801609c:	4a02      	ldr	r2, [pc, #8]	; (80160a8 <stdio_exit_handler+0xc>)
 801609e:	4903      	ldr	r1, [pc, #12]	; (80160ac <stdio_exit_handler+0x10>)
 80160a0:	4803      	ldr	r0, [pc, #12]	; (80160b0 <stdio_exit_handler+0x14>)
 80160a2:	f000 b869 	b.w	8016178 <_fwalk_sglue>
 80160a6:	bf00      	nop
 80160a8:	2000009c 	.word	0x2000009c
 80160ac:	08017bf9 	.word	0x08017bf9
 80160b0:	200000a8 	.word	0x200000a8

080160b4 <cleanup_stdio>:
 80160b4:	6841      	ldr	r1, [r0, #4]
 80160b6:	4b0c      	ldr	r3, [pc, #48]	; (80160e8 <cleanup_stdio+0x34>)
 80160b8:	4299      	cmp	r1, r3
 80160ba:	b510      	push	{r4, lr}
 80160bc:	4604      	mov	r4, r0
 80160be:	d001      	beq.n	80160c4 <cleanup_stdio+0x10>
 80160c0:	f001 fd9a 	bl	8017bf8 <_fflush_r>
 80160c4:	68a1      	ldr	r1, [r4, #8]
 80160c6:	4b09      	ldr	r3, [pc, #36]	; (80160ec <cleanup_stdio+0x38>)
 80160c8:	4299      	cmp	r1, r3
 80160ca:	d002      	beq.n	80160d2 <cleanup_stdio+0x1e>
 80160cc:	4620      	mov	r0, r4
 80160ce:	f001 fd93 	bl	8017bf8 <_fflush_r>
 80160d2:	68e1      	ldr	r1, [r4, #12]
 80160d4:	4b06      	ldr	r3, [pc, #24]	; (80160f0 <cleanup_stdio+0x3c>)
 80160d6:	4299      	cmp	r1, r3
 80160d8:	d004      	beq.n	80160e4 <cleanup_stdio+0x30>
 80160da:	4620      	mov	r0, r4
 80160dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160e0:	f001 bd8a 	b.w	8017bf8 <_fflush_r>
 80160e4:	bd10      	pop	{r4, pc}
 80160e6:	bf00      	nop
 80160e8:	20006408 	.word	0x20006408
 80160ec:	20006470 	.word	0x20006470
 80160f0:	200064d8 	.word	0x200064d8

080160f4 <global_stdio_init.part.0>:
 80160f4:	b510      	push	{r4, lr}
 80160f6:	4b0b      	ldr	r3, [pc, #44]	; (8016124 <global_stdio_init.part.0+0x30>)
 80160f8:	4c0b      	ldr	r4, [pc, #44]	; (8016128 <global_stdio_init.part.0+0x34>)
 80160fa:	4a0c      	ldr	r2, [pc, #48]	; (801612c <global_stdio_init.part.0+0x38>)
 80160fc:	601a      	str	r2, [r3, #0]
 80160fe:	4620      	mov	r0, r4
 8016100:	2200      	movs	r2, #0
 8016102:	2104      	movs	r1, #4
 8016104:	f7ff ff94 	bl	8016030 <std>
 8016108:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801610c:	2201      	movs	r2, #1
 801610e:	2109      	movs	r1, #9
 8016110:	f7ff ff8e 	bl	8016030 <std>
 8016114:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016118:	2202      	movs	r2, #2
 801611a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801611e:	2112      	movs	r1, #18
 8016120:	f7ff bf86 	b.w	8016030 <std>
 8016124:	20006540 	.word	0x20006540
 8016128:	20006408 	.word	0x20006408
 801612c:	0801609d 	.word	0x0801609d

08016130 <__sfp_lock_acquire>:
 8016130:	4801      	ldr	r0, [pc, #4]	; (8016138 <__sfp_lock_acquire+0x8>)
 8016132:	f000 b930 	b.w	8016396 <__retarget_lock_acquire_recursive>
 8016136:	bf00      	nop
 8016138:	20006549 	.word	0x20006549

0801613c <__sfp_lock_release>:
 801613c:	4801      	ldr	r0, [pc, #4]	; (8016144 <__sfp_lock_release+0x8>)
 801613e:	f000 b92b 	b.w	8016398 <__retarget_lock_release_recursive>
 8016142:	bf00      	nop
 8016144:	20006549 	.word	0x20006549

08016148 <__sinit>:
 8016148:	b510      	push	{r4, lr}
 801614a:	4604      	mov	r4, r0
 801614c:	f7ff fff0 	bl	8016130 <__sfp_lock_acquire>
 8016150:	6a23      	ldr	r3, [r4, #32]
 8016152:	b11b      	cbz	r3, 801615c <__sinit+0x14>
 8016154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016158:	f7ff bff0 	b.w	801613c <__sfp_lock_release>
 801615c:	4b04      	ldr	r3, [pc, #16]	; (8016170 <__sinit+0x28>)
 801615e:	6223      	str	r3, [r4, #32]
 8016160:	4b04      	ldr	r3, [pc, #16]	; (8016174 <__sinit+0x2c>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d1f5      	bne.n	8016154 <__sinit+0xc>
 8016168:	f7ff ffc4 	bl	80160f4 <global_stdio_init.part.0>
 801616c:	e7f2      	b.n	8016154 <__sinit+0xc>
 801616e:	bf00      	nop
 8016170:	080160b5 	.word	0x080160b5
 8016174:	20006540 	.word	0x20006540

08016178 <_fwalk_sglue>:
 8016178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801617c:	4607      	mov	r7, r0
 801617e:	4688      	mov	r8, r1
 8016180:	4614      	mov	r4, r2
 8016182:	2600      	movs	r6, #0
 8016184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016188:	f1b9 0901 	subs.w	r9, r9, #1
 801618c:	d505      	bpl.n	801619a <_fwalk_sglue+0x22>
 801618e:	6824      	ldr	r4, [r4, #0]
 8016190:	2c00      	cmp	r4, #0
 8016192:	d1f7      	bne.n	8016184 <_fwalk_sglue+0xc>
 8016194:	4630      	mov	r0, r6
 8016196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801619a:	89ab      	ldrh	r3, [r5, #12]
 801619c:	2b01      	cmp	r3, #1
 801619e:	d907      	bls.n	80161b0 <_fwalk_sglue+0x38>
 80161a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80161a4:	3301      	adds	r3, #1
 80161a6:	d003      	beq.n	80161b0 <_fwalk_sglue+0x38>
 80161a8:	4629      	mov	r1, r5
 80161aa:	4638      	mov	r0, r7
 80161ac:	47c0      	blx	r8
 80161ae:	4306      	orrs	r6, r0
 80161b0:	3568      	adds	r5, #104	; 0x68
 80161b2:	e7e9      	b.n	8016188 <_fwalk_sglue+0x10>

080161b4 <siprintf>:
 80161b4:	b40e      	push	{r1, r2, r3}
 80161b6:	b500      	push	{lr}
 80161b8:	b09c      	sub	sp, #112	; 0x70
 80161ba:	ab1d      	add	r3, sp, #116	; 0x74
 80161bc:	9002      	str	r0, [sp, #8]
 80161be:	9006      	str	r0, [sp, #24]
 80161c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80161c4:	4809      	ldr	r0, [pc, #36]	; (80161ec <siprintf+0x38>)
 80161c6:	9107      	str	r1, [sp, #28]
 80161c8:	9104      	str	r1, [sp, #16]
 80161ca:	4909      	ldr	r1, [pc, #36]	; (80161f0 <siprintf+0x3c>)
 80161cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80161d0:	9105      	str	r1, [sp, #20]
 80161d2:	6800      	ldr	r0, [r0, #0]
 80161d4:	9301      	str	r3, [sp, #4]
 80161d6:	a902      	add	r1, sp, #8
 80161d8:	f001 fb8a 	bl	80178f0 <_svfiprintf_r>
 80161dc:	9b02      	ldr	r3, [sp, #8]
 80161de:	2200      	movs	r2, #0
 80161e0:	701a      	strb	r2, [r3, #0]
 80161e2:	b01c      	add	sp, #112	; 0x70
 80161e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80161e8:	b003      	add	sp, #12
 80161ea:	4770      	bx	lr
 80161ec:	200000f4 	.word	0x200000f4
 80161f0:	ffff0208 	.word	0xffff0208

080161f4 <__sread>:
 80161f4:	b510      	push	{r4, lr}
 80161f6:	460c      	mov	r4, r1
 80161f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161fc:	f000 f86c 	bl	80162d8 <_read_r>
 8016200:	2800      	cmp	r0, #0
 8016202:	bfab      	itete	ge
 8016204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016206:	89a3      	ldrhlt	r3, [r4, #12]
 8016208:	181b      	addge	r3, r3, r0
 801620a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801620e:	bfac      	ite	ge
 8016210:	6563      	strge	r3, [r4, #84]	; 0x54
 8016212:	81a3      	strhlt	r3, [r4, #12]
 8016214:	bd10      	pop	{r4, pc}

08016216 <__swrite>:
 8016216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801621a:	461f      	mov	r7, r3
 801621c:	898b      	ldrh	r3, [r1, #12]
 801621e:	05db      	lsls	r3, r3, #23
 8016220:	4605      	mov	r5, r0
 8016222:	460c      	mov	r4, r1
 8016224:	4616      	mov	r6, r2
 8016226:	d505      	bpl.n	8016234 <__swrite+0x1e>
 8016228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801622c:	2302      	movs	r3, #2
 801622e:	2200      	movs	r2, #0
 8016230:	f000 f840 	bl	80162b4 <_lseek_r>
 8016234:	89a3      	ldrh	r3, [r4, #12]
 8016236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801623a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801623e:	81a3      	strh	r3, [r4, #12]
 8016240:	4632      	mov	r2, r6
 8016242:	463b      	mov	r3, r7
 8016244:	4628      	mov	r0, r5
 8016246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801624a:	f000 b867 	b.w	801631c <_write_r>

0801624e <__sseek>:
 801624e:	b510      	push	{r4, lr}
 8016250:	460c      	mov	r4, r1
 8016252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016256:	f000 f82d 	bl	80162b4 <_lseek_r>
 801625a:	1c43      	adds	r3, r0, #1
 801625c:	89a3      	ldrh	r3, [r4, #12]
 801625e:	bf15      	itete	ne
 8016260:	6560      	strne	r0, [r4, #84]	; 0x54
 8016262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801626a:	81a3      	strheq	r3, [r4, #12]
 801626c:	bf18      	it	ne
 801626e:	81a3      	strhne	r3, [r4, #12]
 8016270:	bd10      	pop	{r4, pc}

08016272 <__sclose>:
 8016272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016276:	f000 b80d 	b.w	8016294 <_close_r>

0801627a <memset>:
 801627a:	4402      	add	r2, r0
 801627c:	4603      	mov	r3, r0
 801627e:	4293      	cmp	r3, r2
 8016280:	d100      	bne.n	8016284 <memset+0xa>
 8016282:	4770      	bx	lr
 8016284:	f803 1b01 	strb.w	r1, [r3], #1
 8016288:	e7f9      	b.n	801627e <memset+0x4>
	...

0801628c <_localeconv_r>:
 801628c:	4800      	ldr	r0, [pc, #0]	; (8016290 <_localeconv_r+0x4>)
 801628e:	4770      	bx	lr
 8016290:	200001e8 	.word	0x200001e8

08016294 <_close_r>:
 8016294:	b538      	push	{r3, r4, r5, lr}
 8016296:	4d06      	ldr	r5, [pc, #24]	; (80162b0 <_close_r+0x1c>)
 8016298:	2300      	movs	r3, #0
 801629a:	4604      	mov	r4, r0
 801629c:	4608      	mov	r0, r1
 801629e:	602b      	str	r3, [r5, #0]
 80162a0:	f7f4 fdd3 	bl	800ae4a <_close>
 80162a4:	1c43      	adds	r3, r0, #1
 80162a6:	d102      	bne.n	80162ae <_close_r+0x1a>
 80162a8:	682b      	ldr	r3, [r5, #0]
 80162aa:	b103      	cbz	r3, 80162ae <_close_r+0x1a>
 80162ac:	6023      	str	r3, [r4, #0]
 80162ae:	bd38      	pop	{r3, r4, r5, pc}
 80162b0:	20006544 	.word	0x20006544

080162b4 <_lseek_r>:
 80162b4:	b538      	push	{r3, r4, r5, lr}
 80162b6:	4d07      	ldr	r5, [pc, #28]	; (80162d4 <_lseek_r+0x20>)
 80162b8:	4604      	mov	r4, r0
 80162ba:	4608      	mov	r0, r1
 80162bc:	4611      	mov	r1, r2
 80162be:	2200      	movs	r2, #0
 80162c0:	602a      	str	r2, [r5, #0]
 80162c2:	461a      	mov	r2, r3
 80162c4:	f7f4 fde8 	bl	800ae98 <_lseek>
 80162c8:	1c43      	adds	r3, r0, #1
 80162ca:	d102      	bne.n	80162d2 <_lseek_r+0x1e>
 80162cc:	682b      	ldr	r3, [r5, #0]
 80162ce:	b103      	cbz	r3, 80162d2 <_lseek_r+0x1e>
 80162d0:	6023      	str	r3, [r4, #0]
 80162d2:	bd38      	pop	{r3, r4, r5, pc}
 80162d4:	20006544 	.word	0x20006544

080162d8 <_read_r>:
 80162d8:	b538      	push	{r3, r4, r5, lr}
 80162da:	4d07      	ldr	r5, [pc, #28]	; (80162f8 <_read_r+0x20>)
 80162dc:	4604      	mov	r4, r0
 80162de:	4608      	mov	r0, r1
 80162e0:	4611      	mov	r1, r2
 80162e2:	2200      	movs	r2, #0
 80162e4:	602a      	str	r2, [r5, #0]
 80162e6:	461a      	mov	r2, r3
 80162e8:	f7f4 fd76 	bl	800add8 <_read>
 80162ec:	1c43      	adds	r3, r0, #1
 80162ee:	d102      	bne.n	80162f6 <_read_r+0x1e>
 80162f0:	682b      	ldr	r3, [r5, #0]
 80162f2:	b103      	cbz	r3, 80162f6 <_read_r+0x1e>
 80162f4:	6023      	str	r3, [r4, #0]
 80162f6:	bd38      	pop	{r3, r4, r5, pc}
 80162f8:	20006544 	.word	0x20006544

080162fc <_sbrk_r>:
 80162fc:	b538      	push	{r3, r4, r5, lr}
 80162fe:	4d06      	ldr	r5, [pc, #24]	; (8016318 <_sbrk_r+0x1c>)
 8016300:	2300      	movs	r3, #0
 8016302:	4604      	mov	r4, r0
 8016304:	4608      	mov	r0, r1
 8016306:	602b      	str	r3, [r5, #0]
 8016308:	f7f4 fdd4 	bl	800aeb4 <_sbrk>
 801630c:	1c43      	adds	r3, r0, #1
 801630e:	d102      	bne.n	8016316 <_sbrk_r+0x1a>
 8016310:	682b      	ldr	r3, [r5, #0]
 8016312:	b103      	cbz	r3, 8016316 <_sbrk_r+0x1a>
 8016314:	6023      	str	r3, [r4, #0]
 8016316:	bd38      	pop	{r3, r4, r5, pc}
 8016318:	20006544 	.word	0x20006544

0801631c <_write_r>:
 801631c:	b538      	push	{r3, r4, r5, lr}
 801631e:	4d07      	ldr	r5, [pc, #28]	; (801633c <_write_r+0x20>)
 8016320:	4604      	mov	r4, r0
 8016322:	4608      	mov	r0, r1
 8016324:	4611      	mov	r1, r2
 8016326:	2200      	movs	r2, #0
 8016328:	602a      	str	r2, [r5, #0]
 801632a:	461a      	mov	r2, r3
 801632c:	f7f4 fd71 	bl	800ae12 <_write>
 8016330:	1c43      	adds	r3, r0, #1
 8016332:	d102      	bne.n	801633a <_write_r+0x1e>
 8016334:	682b      	ldr	r3, [r5, #0]
 8016336:	b103      	cbz	r3, 801633a <_write_r+0x1e>
 8016338:	6023      	str	r3, [r4, #0]
 801633a:	bd38      	pop	{r3, r4, r5, pc}
 801633c:	20006544 	.word	0x20006544

08016340 <__errno>:
 8016340:	4b01      	ldr	r3, [pc, #4]	; (8016348 <__errno+0x8>)
 8016342:	6818      	ldr	r0, [r3, #0]
 8016344:	4770      	bx	lr
 8016346:	bf00      	nop
 8016348:	200000f4 	.word	0x200000f4

0801634c <__libc_init_array>:
 801634c:	b570      	push	{r4, r5, r6, lr}
 801634e:	4d0d      	ldr	r5, [pc, #52]	; (8016384 <__libc_init_array+0x38>)
 8016350:	4c0d      	ldr	r4, [pc, #52]	; (8016388 <__libc_init_array+0x3c>)
 8016352:	1b64      	subs	r4, r4, r5
 8016354:	10a4      	asrs	r4, r4, #2
 8016356:	2600      	movs	r6, #0
 8016358:	42a6      	cmp	r6, r4
 801635a:	d109      	bne.n	8016370 <__libc_init_array+0x24>
 801635c:	4d0b      	ldr	r5, [pc, #44]	; (801638c <__libc_init_array+0x40>)
 801635e:	4c0c      	ldr	r4, [pc, #48]	; (8016390 <__libc_init_array+0x44>)
 8016360:	f003 fc38 	bl	8019bd4 <_init>
 8016364:	1b64      	subs	r4, r4, r5
 8016366:	10a4      	asrs	r4, r4, #2
 8016368:	2600      	movs	r6, #0
 801636a:	42a6      	cmp	r6, r4
 801636c:	d105      	bne.n	801637a <__libc_init_array+0x2e>
 801636e:	bd70      	pop	{r4, r5, r6, pc}
 8016370:	f855 3b04 	ldr.w	r3, [r5], #4
 8016374:	4798      	blx	r3
 8016376:	3601      	adds	r6, #1
 8016378:	e7ee      	b.n	8016358 <__libc_init_array+0xc>
 801637a:	f855 3b04 	ldr.w	r3, [r5], #4
 801637e:	4798      	blx	r3
 8016380:	3601      	adds	r6, #1
 8016382:	e7f2      	b.n	801636a <__libc_init_array+0x1e>
 8016384:	0801a8ec 	.word	0x0801a8ec
 8016388:	0801a8ec 	.word	0x0801a8ec
 801638c:	0801a8ec 	.word	0x0801a8ec
 8016390:	0801a8f0 	.word	0x0801a8f0

08016394 <__retarget_lock_init_recursive>:
 8016394:	4770      	bx	lr

08016396 <__retarget_lock_acquire_recursive>:
 8016396:	4770      	bx	lr

08016398 <__retarget_lock_release_recursive>:
 8016398:	4770      	bx	lr

0801639a <memcpy>:
 801639a:	440a      	add	r2, r1
 801639c:	4291      	cmp	r1, r2
 801639e:	f100 33ff 	add.w	r3, r0, #4294967295
 80163a2:	d100      	bne.n	80163a6 <memcpy+0xc>
 80163a4:	4770      	bx	lr
 80163a6:	b510      	push	{r4, lr}
 80163a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163b0:	4291      	cmp	r1, r2
 80163b2:	d1f9      	bne.n	80163a8 <memcpy+0xe>
 80163b4:	bd10      	pop	{r4, pc}

080163b6 <quorem>:
 80163b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ba:	6903      	ldr	r3, [r0, #16]
 80163bc:	690c      	ldr	r4, [r1, #16]
 80163be:	42a3      	cmp	r3, r4
 80163c0:	4607      	mov	r7, r0
 80163c2:	db7e      	blt.n	80164c2 <quorem+0x10c>
 80163c4:	3c01      	subs	r4, #1
 80163c6:	f101 0814 	add.w	r8, r1, #20
 80163ca:	f100 0514 	add.w	r5, r0, #20
 80163ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80163d2:	9301      	str	r3, [sp, #4]
 80163d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80163d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80163dc:	3301      	adds	r3, #1
 80163de:	429a      	cmp	r2, r3
 80163e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80163e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80163e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80163ec:	d331      	bcc.n	8016452 <quorem+0x9c>
 80163ee:	f04f 0e00 	mov.w	lr, #0
 80163f2:	4640      	mov	r0, r8
 80163f4:	46ac      	mov	ip, r5
 80163f6:	46f2      	mov	sl, lr
 80163f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80163fc:	b293      	uxth	r3, r2
 80163fe:	fb06 e303 	mla	r3, r6, r3, lr
 8016402:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016406:	0c1a      	lsrs	r2, r3, #16
 8016408:	b29b      	uxth	r3, r3
 801640a:	ebaa 0303 	sub.w	r3, sl, r3
 801640e:	f8dc a000 	ldr.w	sl, [ip]
 8016412:	fa13 f38a 	uxtah	r3, r3, sl
 8016416:	fb06 220e 	mla	r2, r6, lr, r2
 801641a:	9300      	str	r3, [sp, #0]
 801641c:	9b00      	ldr	r3, [sp, #0]
 801641e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016422:	b292      	uxth	r2, r2
 8016424:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801642c:	f8bd 3000 	ldrh.w	r3, [sp]
 8016430:	4581      	cmp	r9, r0
 8016432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016436:	f84c 3b04 	str.w	r3, [ip], #4
 801643a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801643e:	d2db      	bcs.n	80163f8 <quorem+0x42>
 8016440:	f855 300b 	ldr.w	r3, [r5, fp]
 8016444:	b92b      	cbnz	r3, 8016452 <quorem+0x9c>
 8016446:	9b01      	ldr	r3, [sp, #4]
 8016448:	3b04      	subs	r3, #4
 801644a:	429d      	cmp	r5, r3
 801644c:	461a      	mov	r2, r3
 801644e:	d32c      	bcc.n	80164aa <quorem+0xf4>
 8016450:	613c      	str	r4, [r7, #16]
 8016452:	4638      	mov	r0, r7
 8016454:	f001 f8f2 	bl	801763c <__mcmp>
 8016458:	2800      	cmp	r0, #0
 801645a:	db22      	blt.n	80164a2 <quorem+0xec>
 801645c:	3601      	adds	r6, #1
 801645e:	4629      	mov	r1, r5
 8016460:	2000      	movs	r0, #0
 8016462:	f858 2b04 	ldr.w	r2, [r8], #4
 8016466:	f8d1 c000 	ldr.w	ip, [r1]
 801646a:	b293      	uxth	r3, r2
 801646c:	1ac3      	subs	r3, r0, r3
 801646e:	0c12      	lsrs	r2, r2, #16
 8016470:	fa13 f38c 	uxtah	r3, r3, ip
 8016474:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801647c:	b29b      	uxth	r3, r3
 801647e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016482:	45c1      	cmp	r9, r8
 8016484:	f841 3b04 	str.w	r3, [r1], #4
 8016488:	ea4f 4022 	mov.w	r0, r2, asr #16
 801648c:	d2e9      	bcs.n	8016462 <quorem+0xac>
 801648e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016496:	b922      	cbnz	r2, 80164a2 <quorem+0xec>
 8016498:	3b04      	subs	r3, #4
 801649a:	429d      	cmp	r5, r3
 801649c:	461a      	mov	r2, r3
 801649e:	d30a      	bcc.n	80164b6 <quorem+0x100>
 80164a0:	613c      	str	r4, [r7, #16]
 80164a2:	4630      	mov	r0, r6
 80164a4:	b003      	add	sp, #12
 80164a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164aa:	6812      	ldr	r2, [r2, #0]
 80164ac:	3b04      	subs	r3, #4
 80164ae:	2a00      	cmp	r2, #0
 80164b0:	d1ce      	bne.n	8016450 <quorem+0x9a>
 80164b2:	3c01      	subs	r4, #1
 80164b4:	e7c9      	b.n	801644a <quorem+0x94>
 80164b6:	6812      	ldr	r2, [r2, #0]
 80164b8:	3b04      	subs	r3, #4
 80164ba:	2a00      	cmp	r2, #0
 80164bc:	d1f0      	bne.n	80164a0 <quorem+0xea>
 80164be:	3c01      	subs	r4, #1
 80164c0:	e7eb      	b.n	801649a <quorem+0xe4>
 80164c2:	2000      	movs	r0, #0
 80164c4:	e7ee      	b.n	80164a4 <quorem+0xee>
	...

080164c8 <_dtoa_r>:
 80164c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164cc:	ed2d 8b04 	vpush	{d8-d9}
 80164d0:	69c5      	ldr	r5, [r0, #28]
 80164d2:	b093      	sub	sp, #76	; 0x4c
 80164d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80164d8:	ec57 6b10 	vmov	r6, r7, d0
 80164dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80164e0:	9107      	str	r1, [sp, #28]
 80164e2:	4604      	mov	r4, r0
 80164e4:	920a      	str	r2, [sp, #40]	; 0x28
 80164e6:	930d      	str	r3, [sp, #52]	; 0x34
 80164e8:	b975      	cbnz	r5, 8016508 <_dtoa_r+0x40>
 80164ea:	2010      	movs	r0, #16
 80164ec:	f7ff f87e 	bl	80155ec <malloc>
 80164f0:	4602      	mov	r2, r0
 80164f2:	61e0      	str	r0, [r4, #28]
 80164f4:	b920      	cbnz	r0, 8016500 <_dtoa_r+0x38>
 80164f6:	4bae      	ldr	r3, [pc, #696]	; (80167b0 <_dtoa_r+0x2e8>)
 80164f8:	21ef      	movs	r1, #239	; 0xef
 80164fa:	48ae      	ldr	r0, [pc, #696]	; (80167b4 <_dtoa_r+0x2ec>)
 80164fc:	f001 fbbe 	bl	8017c7c <__assert_func>
 8016500:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016504:	6005      	str	r5, [r0, #0]
 8016506:	60c5      	str	r5, [r0, #12]
 8016508:	69e3      	ldr	r3, [r4, #28]
 801650a:	6819      	ldr	r1, [r3, #0]
 801650c:	b151      	cbz	r1, 8016524 <_dtoa_r+0x5c>
 801650e:	685a      	ldr	r2, [r3, #4]
 8016510:	604a      	str	r2, [r1, #4]
 8016512:	2301      	movs	r3, #1
 8016514:	4093      	lsls	r3, r2
 8016516:	608b      	str	r3, [r1, #8]
 8016518:	4620      	mov	r0, r4
 801651a:	f000 fe53 	bl	80171c4 <_Bfree>
 801651e:	69e3      	ldr	r3, [r4, #28]
 8016520:	2200      	movs	r2, #0
 8016522:	601a      	str	r2, [r3, #0]
 8016524:	1e3b      	subs	r3, r7, #0
 8016526:	bfbb      	ittet	lt
 8016528:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801652c:	9303      	strlt	r3, [sp, #12]
 801652e:	2300      	movge	r3, #0
 8016530:	2201      	movlt	r2, #1
 8016532:	bfac      	ite	ge
 8016534:	f8c8 3000 	strge.w	r3, [r8]
 8016538:	f8c8 2000 	strlt.w	r2, [r8]
 801653c:	4b9e      	ldr	r3, [pc, #632]	; (80167b8 <_dtoa_r+0x2f0>)
 801653e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016542:	ea33 0308 	bics.w	r3, r3, r8
 8016546:	d11b      	bne.n	8016580 <_dtoa_r+0xb8>
 8016548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801654a:	f242 730f 	movw	r3, #9999	; 0x270f
 801654e:	6013      	str	r3, [r2, #0]
 8016550:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016554:	4333      	orrs	r3, r6
 8016556:	f000 8593 	beq.w	8017080 <_dtoa_r+0xbb8>
 801655a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801655c:	b963      	cbnz	r3, 8016578 <_dtoa_r+0xb0>
 801655e:	4b97      	ldr	r3, [pc, #604]	; (80167bc <_dtoa_r+0x2f4>)
 8016560:	e027      	b.n	80165b2 <_dtoa_r+0xea>
 8016562:	4b97      	ldr	r3, [pc, #604]	; (80167c0 <_dtoa_r+0x2f8>)
 8016564:	9300      	str	r3, [sp, #0]
 8016566:	3308      	adds	r3, #8
 8016568:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801656a:	6013      	str	r3, [r2, #0]
 801656c:	9800      	ldr	r0, [sp, #0]
 801656e:	b013      	add	sp, #76	; 0x4c
 8016570:	ecbd 8b04 	vpop	{d8-d9}
 8016574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016578:	4b90      	ldr	r3, [pc, #576]	; (80167bc <_dtoa_r+0x2f4>)
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	3303      	adds	r3, #3
 801657e:	e7f3      	b.n	8016568 <_dtoa_r+0xa0>
 8016580:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016584:	2200      	movs	r2, #0
 8016586:	ec51 0b17 	vmov	r0, r1, d7
 801658a:	eeb0 8a47 	vmov.f32	s16, s14
 801658e:	eef0 8a67 	vmov.f32	s17, s15
 8016592:	2300      	movs	r3, #0
 8016594:	f7ea fab0 	bl	8000af8 <__aeabi_dcmpeq>
 8016598:	4681      	mov	r9, r0
 801659a:	b160      	cbz	r0, 80165b6 <_dtoa_r+0xee>
 801659c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801659e:	2301      	movs	r3, #1
 80165a0:	6013      	str	r3, [r2, #0]
 80165a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	f000 8568 	beq.w	801707a <_dtoa_r+0xbb2>
 80165aa:	4b86      	ldr	r3, [pc, #536]	; (80167c4 <_dtoa_r+0x2fc>)
 80165ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80165ae:	6013      	str	r3, [r2, #0]
 80165b0:	3b01      	subs	r3, #1
 80165b2:	9300      	str	r3, [sp, #0]
 80165b4:	e7da      	b.n	801656c <_dtoa_r+0xa4>
 80165b6:	aa10      	add	r2, sp, #64	; 0x40
 80165b8:	a911      	add	r1, sp, #68	; 0x44
 80165ba:	4620      	mov	r0, r4
 80165bc:	eeb0 0a48 	vmov.f32	s0, s16
 80165c0:	eef0 0a68 	vmov.f32	s1, s17
 80165c4:	f001 f8e0 	bl	8017788 <__d2b>
 80165c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80165cc:	4682      	mov	sl, r0
 80165ce:	2d00      	cmp	r5, #0
 80165d0:	d07f      	beq.n	80166d2 <_dtoa_r+0x20a>
 80165d2:	ee18 3a90 	vmov	r3, s17
 80165d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80165da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80165de:	ec51 0b18 	vmov	r0, r1, d8
 80165e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80165e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80165ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80165ee:	4619      	mov	r1, r3
 80165f0:	2200      	movs	r2, #0
 80165f2:	4b75      	ldr	r3, [pc, #468]	; (80167c8 <_dtoa_r+0x300>)
 80165f4:	f7e9 fe60 	bl	80002b8 <__aeabi_dsub>
 80165f8:	a367      	add	r3, pc, #412	; (adr r3, 8016798 <_dtoa_r+0x2d0>)
 80165fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165fe:	f7ea f813 	bl	8000628 <__aeabi_dmul>
 8016602:	a367      	add	r3, pc, #412	; (adr r3, 80167a0 <_dtoa_r+0x2d8>)
 8016604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016608:	f7e9 fe58 	bl	80002bc <__adddf3>
 801660c:	4606      	mov	r6, r0
 801660e:	4628      	mov	r0, r5
 8016610:	460f      	mov	r7, r1
 8016612:	f7e9 ff9f 	bl	8000554 <__aeabi_i2d>
 8016616:	a364      	add	r3, pc, #400	; (adr r3, 80167a8 <_dtoa_r+0x2e0>)
 8016618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661c:	f7ea f804 	bl	8000628 <__aeabi_dmul>
 8016620:	4602      	mov	r2, r0
 8016622:	460b      	mov	r3, r1
 8016624:	4630      	mov	r0, r6
 8016626:	4639      	mov	r1, r7
 8016628:	f7e9 fe48 	bl	80002bc <__adddf3>
 801662c:	4606      	mov	r6, r0
 801662e:	460f      	mov	r7, r1
 8016630:	f7ea faaa 	bl	8000b88 <__aeabi_d2iz>
 8016634:	2200      	movs	r2, #0
 8016636:	4683      	mov	fp, r0
 8016638:	2300      	movs	r3, #0
 801663a:	4630      	mov	r0, r6
 801663c:	4639      	mov	r1, r7
 801663e:	f7ea fa65 	bl	8000b0c <__aeabi_dcmplt>
 8016642:	b148      	cbz	r0, 8016658 <_dtoa_r+0x190>
 8016644:	4658      	mov	r0, fp
 8016646:	f7e9 ff85 	bl	8000554 <__aeabi_i2d>
 801664a:	4632      	mov	r2, r6
 801664c:	463b      	mov	r3, r7
 801664e:	f7ea fa53 	bl	8000af8 <__aeabi_dcmpeq>
 8016652:	b908      	cbnz	r0, 8016658 <_dtoa_r+0x190>
 8016654:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016658:	f1bb 0f16 	cmp.w	fp, #22
 801665c:	d857      	bhi.n	801670e <_dtoa_r+0x246>
 801665e:	4b5b      	ldr	r3, [pc, #364]	; (80167cc <_dtoa_r+0x304>)
 8016660:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016668:	ec51 0b18 	vmov	r0, r1, d8
 801666c:	f7ea fa4e 	bl	8000b0c <__aeabi_dcmplt>
 8016670:	2800      	cmp	r0, #0
 8016672:	d04e      	beq.n	8016712 <_dtoa_r+0x24a>
 8016674:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016678:	2300      	movs	r3, #0
 801667a:	930c      	str	r3, [sp, #48]	; 0x30
 801667c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801667e:	1b5b      	subs	r3, r3, r5
 8016680:	1e5a      	subs	r2, r3, #1
 8016682:	bf45      	ittet	mi
 8016684:	f1c3 0301 	rsbmi	r3, r3, #1
 8016688:	9305      	strmi	r3, [sp, #20]
 801668a:	2300      	movpl	r3, #0
 801668c:	2300      	movmi	r3, #0
 801668e:	9206      	str	r2, [sp, #24]
 8016690:	bf54      	ite	pl
 8016692:	9305      	strpl	r3, [sp, #20]
 8016694:	9306      	strmi	r3, [sp, #24]
 8016696:	f1bb 0f00 	cmp.w	fp, #0
 801669a:	db3c      	blt.n	8016716 <_dtoa_r+0x24e>
 801669c:	9b06      	ldr	r3, [sp, #24]
 801669e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80166a2:	445b      	add	r3, fp
 80166a4:	9306      	str	r3, [sp, #24]
 80166a6:	2300      	movs	r3, #0
 80166a8:	9308      	str	r3, [sp, #32]
 80166aa:	9b07      	ldr	r3, [sp, #28]
 80166ac:	2b09      	cmp	r3, #9
 80166ae:	d868      	bhi.n	8016782 <_dtoa_r+0x2ba>
 80166b0:	2b05      	cmp	r3, #5
 80166b2:	bfc4      	itt	gt
 80166b4:	3b04      	subgt	r3, #4
 80166b6:	9307      	strgt	r3, [sp, #28]
 80166b8:	9b07      	ldr	r3, [sp, #28]
 80166ba:	f1a3 0302 	sub.w	r3, r3, #2
 80166be:	bfcc      	ite	gt
 80166c0:	2500      	movgt	r5, #0
 80166c2:	2501      	movle	r5, #1
 80166c4:	2b03      	cmp	r3, #3
 80166c6:	f200 8085 	bhi.w	80167d4 <_dtoa_r+0x30c>
 80166ca:	e8df f003 	tbb	[pc, r3]
 80166ce:	3b2e      	.short	0x3b2e
 80166d0:	5839      	.short	0x5839
 80166d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80166d6:	441d      	add	r5, r3
 80166d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80166dc:	2b20      	cmp	r3, #32
 80166de:	bfc1      	itttt	gt
 80166e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80166e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80166e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80166ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80166f0:	bfd6      	itet	le
 80166f2:	f1c3 0320 	rsble	r3, r3, #32
 80166f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80166fa:	fa06 f003 	lslle.w	r0, r6, r3
 80166fe:	f7e9 ff19 	bl	8000534 <__aeabi_ui2d>
 8016702:	2201      	movs	r2, #1
 8016704:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016708:	3d01      	subs	r5, #1
 801670a:	920e      	str	r2, [sp, #56]	; 0x38
 801670c:	e76f      	b.n	80165ee <_dtoa_r+0x126>
 801670e:	2301      	movs	r3, #1
 8016710:	e7b3      	b.n	801667a <_dtoa_r+0x1b2>
 8016712:	900c      	str	r0, [sp, #48]	; 0x30
 8016714:	e7b2      	b.n	801667c <_dtoa_r+0x1b4>
 8016716:	9b05      	ldr	r3, [sp, #20]
 8016718:	eba3 030b 	sub.w	r3, r3, fp
 801671c:	9305      	str	r3, [sp, #20]
 801671e:	f1cb 0300 	rsb	r3, fp, #0
 8016722:	9308      	str	r3, [sp, #32]
 8016724:	2300      	movs	r3, #0
 8016726:	930b      	str	r3, [sp, #44]	; 0x2c
 8016728:	e7bf      	b.n	80166aa <_dtoa_r+0x1e2>
 801672a:	2300      	movs	r3, #0
 801672c:	9309      	str	r3, [sp, #36]	; 0x24
 801672e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016730:	2b00      	cmp	r3, #0
 8016732:	dc52      	bgt.n	80167da <_dtoa_r+0x312>
 8016734:	2301      	movs	r3, #1
 8016736:	9301      	str	r3, [sp, #4]
 8016738:	9304      	str	r3, [sp, #16]
 801673a:	461a      	mov	r2, r3
 801673c:	920a      	str	r2, [sp, #40]	; 0x28
 801673e:	e00b      	b.n	8016758 <_dtoa_r+0x290>
 8016740:	2301      	movs	r3, #1
 8016742:	e7f3      	b.n	801672c <_dtoa_r+0x264>
 8016744:	2300      	movs	r3, #0
 8016746:	9309      	str	r3, [sp, #36]	; 0x24
 8016748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801674a:	445b      	add	r3, fp
 801674c:	9301      	str	r3, [sp, #4]
 801674e:	3301      	adds	r3, #1
 8016750:	2b01      	cmp	r3, #1
 8016752:	9304      	str	r3, [sp, #16]
 8016754:	bfb8      	it	lt
 8016756:	2301      	movlt	r3, #1
 8016758:	69e0      	ldr	r0, [r4, #28]
 801675a:	2100      	movs	r1, #0
 801675c:	2204      	movs	r2, #4
 801675e:	f102 0614 	add.w	r6, r2, #20
 8016762:	429e      	cmp	r6, r3
 8016764:	d93d      	bls.n	80167e2 <_dtoa_r+0x31a>
 8016766:	6041      	str	r1, [r0, #4]
 8016768:	4620      	mov	r0, r4
 801676a:	f000 fceb 	bl	8017144 <_Balloc>
 801676e:	9000      	str	r0, [sp, #0]
 8016770:	2800      	cmp	r0, #0
 8016772:	d139      	bne.n	80167e8 <_dtoa_r+0x320>
 8016774:	4b16      	ldr	r3, [pc, #88]	; (80167d0 <_dtoa_r+0x308>)
 8016776:	4602      	mov	r2, r0
 8016778:	f240 11af 	movw	r1, #431	; 0x1af
 801677c:	e6bd      	b.n	80164fa <_dtoa_r+0x32>
 801677e:	2301      	movs	r3, #1
 8016780:	e7e1      	b.n	8016746 <_dtoa_r+0x27e>
 8016782:	2501      	movs	r5, #1
 8016784:	2300      	movs	r3, #0
 8016786:	9307      	str	r3, [sp, #28]
 8016788:	9509      	str	r5, [sp, #36]	; 0x24
 801678a:	f04f 33ff 	mov.w	r3, #4294967295
 801678e:	9301      	str	r3, [sp, #4]
 8016790:	9304      	str	r3, [sp, #16]
 8016792:	2200      	movs	r2, #0
 8016794:	2312      	movs	r3, #18
 8016796:	e7d1      	b.n	801673c <_dtoa_r+0x274>
 8016798:	636f4361 	.word	0x636f4361
 801679c:	3fd287a7 	.word	0x3fd287a7
 80167a0:	8b60c8b3 	.word	0x8b60c8b3
 80167a4:	3fc68a28 	.word	0x3fc68a28
 80167a8:	509f79fb 	.word	0x509f79fb
 80167ac:	3fd34413 	.word	0x3fd34413
 80167b0:	0801a195 	.word	0x0801a195
 80167b4:	0801a1ac 	.word	0x0801a1ac
 80167b8:	7ff00000 	.word	0x7ff00000
 80167bc:	0801a191 	.word	0x0801a191
 80167c0:	0801a188 	.word	0x0801a188
 80167c4:	0801a165 	.word	0x0801a165
 80167c8:	3ff80000 	.word	0x3ff80000
 80167cc:	0801a298 	.word	0x0801a298
 80167d0:	0801a204 	.word	0x0801a204
 80167d4:	2301      	movs	r3, #1
 80167d6:	9309      	str	r3, [sp, #36]	; 0x24
 80167d8:	e7d7      	b.n	801678a <_dtoa_r+0x2c2>
 80167da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167dc:	9301      	str	r3, [sp, #4]
 80167de:	9304      	str	r3, [sp, #16]
 80167e0:	e7ba      	b.n	8016758 <_dtoa_r+0x290>
 80167e2:	3101      	adds	r1, #1
 80167e4:	0052      	lsls	r2, r2, #1
 80167e6:	e7ba      	b.n	801675e <_dtoa_r+0x296>
 80167e8:	69e3      	ldr	r3, [r4, #28]
 80167ea:	9a00      	ldr	r2, [sp, #0]
 80167ec:	601a      	str	r2, [r3, #0]
 80167ee:	9b04      	ldr	r3, [sp, #16]
 80167f0:	2b0e      	cmp	r3, #14
 80167f2:	f200 80a8 	bhi.w	8016946 <_dtoa_r+0x47e>
 80167f6:	2d00      	cmp	r5, #0
 80167f8:	f000 80a5 	beq.w	8016946 <_dtoa_r+0x47e>
 80167fc:	f1bb 0f00 	cmp.w	fp, #0
 8016800:	dd38      	ble.n	8016874 <_dtoa_r+0x3ac>
 8016802:	4bc0      	ldr	r3, [pc, #768]	; (8016b04 <_dtoa_r+0x63c>)
 8016804:	f00b 020f 	and.w	r2, fp, #15
 8016808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801680c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016810:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016814:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016818:	d019      	beq.n	801684e <_dtoa_r+0x386>
 801681a:	4bbb      	ldr	r3, [pc, #748]	; (8016b08 <_dtoa_r+0x640>)
 801681c:	ec51 0b18 	vmov	r0, r1, d8
 8016820:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016824:	f7ea f82a 	bl	800087c <__aeabi_ddiv>
 8016828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801682c:	f008 080f 	and.w	r8, r8, #15
 8016830:	2503      	movs	r5, #3
 8016832:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016b08 <_dtoa_r+0x640>
 8016836:	f1b8 0f00 	cmp.w	r8, #0
 801683a:	d10a      	bne.n	8016852 <_dtoa_r+0x38a>
 801683c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016840:	4632      	mov	r2, r6
 8016842:	463b      	mov	r3, r7
 8016844:	f7ea f81a 	bl	800087c <__aeabi_ddiv>
 8016848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801684c:	e02b      	b.n	80168a6 <_dtoa_r+0x3de>
 801684e:	2502      	movs	r5, #2
 8016850:	e7ef      	b.n	8016832 <_dtoa_r+0x36a>
 8016852:	f018 0f01 	tst.w	r8, #1
 8016856:	d008      	beq.n	801686a <_dtoa_r+0x3a2>
 8016858:	4630      	mov	r0, r6
 801685a:	4639      	mov	r1, r7
 801685c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016860:	f7e9 fee2 	bl	8000628 <__aeabi_dmul>
 8016864:	3501      	adds	r5, #1
 8016866:	4606      	mov	r6, r0
 8016868:	460f      	mov	r7, r1
 801686a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801686e:	f109 0908 	add.w	r9, r9, #8
 8016872:	e7e0      	b.n	8016836 <_dtoa_r+0x36e>
 8016874:	f000 809f 	beq.w	80169b6 <_dtoa_r+0x4ee>
 8016878:	f1cb 0600 	rsb	r6, fp, #0
 801687c:	4ba1      	ldr	r3, [pc, #644]	; (8016b04 <_dtoa_r+0x63c>)
 801687e:	4fa2      	ldr	r7, [pc, #648]	; (8016b08 <_dtoa_r+0x640>)
 8016880:	f006 020f 	and.w	r2, r6, #15
 8016884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801688c:	ec51 0b18 	vmov	r0, r1, d8
 8016890:	f7e9 feca 	bl	8000628 <__aeabi_dmul>
 8016894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016898:	1136      	asrs	r6, r6, #4
 801689a:	2300      	movs	r3, #0
 801689c:	2502      	movs	r5, #2
 801689e:	2e00      	cmp	r6, #0
 80168a0:	d17e      	bne.n	80169a0 <_dtoa_r+0x4d8>
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d1d0      	bne.n	8016848 <_dtoa_r+0x380>
 80168a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	f000 8084 	beq.w	80169ba <_dtoa_r+0x4f2>
 80168b2:	4b96      	ldr	r3, [pc, #600]	; (8016b0c <_dtoa_r+0x644>)
 80168b4:	2200      	movs	r2, #0
 80168b6:	4640      	mov	r0, r8
 80168b8:	4649      	mov	r1, r9
 80168ba:	f7ea f927 	bl	8000b0c <__aeabi_dcmplt>
 80168be:	2800      	cmp	r0, #0
 80168c0:	d07b      	beq.n	80169ba <_dtoa_r+0x4f2>
 80168c2:	9b04      	ldr	r3, [sp, #16]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d078      	beq.n	80169ba <_dtoa_r+0x4f2>
 80168c8:	9b01      	ldr	r3, [sp, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	dd39      	ble.n	8016942 <_dtoa_r+0x47a>
 80168ce:	4b90      	ldr	r3, [pc, #576]	; (8016b10 <_dtoa_r+0x648>)
 80168d0:	2200      	movs	r2, #0
 80168d2:	4640      	mov	r0, r8
 80168d4:	4649      	mov	r1, r9
 80168d6:	f7e9 fea7 	bl	8000628 <__aeabi_dmul>
 80168da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168de:	9e01      	ldr	r6, [sp, #4]
 80168e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80168e4:	3501      	adds	r5, #1
 80168e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80168ea:	4628      	mov	r0, r5
 80168ec:	f7e9 fe32 	bl	8000554 <__aeabi_i2d>
 80168f0:	4642      	mov	r2, r8
 80168f2:	464b      	mov	r3, r9
 80168f4:	f7e9 fe98 	bl	8000628 <__aeabi_dmul>
 80168f8:	4b86      	ldr	r3, [pc, #536]	; (8016b14 <_dtoa_r+0x64c>)
 80168fa:	2200      	movs	r2, #0
 80168fc:	f7e9 fcde 	bl	80002bc <__adddf3>
 8016900:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016908:	9303      	str	r3, [sp, #12]
 801690a:	2e00      	cmp	r6, #0
 801690c:	d158      	bne.n	80169c0 <_dtoa_r+0x4f8>
 801690e:	4b82      	ldr	r3, [pc, #520]	; (8016b18 <_dtoa_r+0x650>)
 8016910:	2200      	movs	r2, #0
 8016912:	4640      	mov	r0, r8
 8016914:	4649      	mov	r1, r9
 8016916:	f7e9 fccf 	bl	80002b8 <__aeabi_dsub>
 801691a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801691e:	4680      	mov	r8, r0
 8016920:	4689      	mov	r9, r1
 8016922:	f7ea f911 	bl	8000b48 <__aeabi_dcmpgt>
 8016926:	2800      	cmp	r0, #0
 8016928:	f040 8296 	bne.w	8016e58 <_dtoa_r+0x990>
 801692c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016930:	4640      	mov	r0, r8
 8016932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016936:	4649      	mov	r1, r9
 8016938:	f7ea f8e8 	bl	8000b0c <__aeabi_dcmplt>
 801693c:	2800      	cmp	r0, #0
 801693e:	f040 8289 	bne.w	8016e54 <_dtoa_r+0x98c>
 8016942:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016948:	2b00      	cmp	r3, #0
 801694a:	f2c0 814e 	blt.w	8016bea <_dtoa_r+0x722>
 801694e:	f1bb 0f0e 	cmp.w	fp, #14
 8016952:	f300 814a 	bgt.w	8016bea <_dtoa_r+0x722>
 8016956:	4b6b      	ldr	r3, [pc, #428]	; (8016b04 <_dtoa_r+0x63c>)
 8016958:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801695c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016962:	2b00      	cmp	r3, #0
 8016964:	f280 80dc 	bge.w	8016b20 <_dtoa_r+0x658>
 8016968:	9b04      	ldr	r3, [sp, #16]
 801696a:	2b00      	cmp	r3, #0
 801696c:	f300 80d8 	bgt.w	8016b20 <_dtoa_r+0x658>
 8016970:	f040 826f 	bne.w	8016e52 <_dtoa_r+0x98a>
 8016974:	4b68      	ldr	r3, [pc, #416]	; (8016b18 <_dtoa_r+0x650>)
 8016976:	2200      	movs	r2, #0
 8016978:	4640      	mov	r0, r8
 801697a:	4649      	mov	r1, r9
 801697c:	f7e9 fe54 	bl	8000628 <__aeabi_dmul>
 8016980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016984:	f7ea f8d6 	bl	8000b34 <__aeabi_dcmpge>
 8016988:	9e04      	ldr	r6, [sp, #16]
 801698a:	4637      	mov	r7, r6
 801698c:	2800      	cmp	r0, #0
 801698e:	f040 8245 	bne.w	8016e1c <_dtoa_r+0x954>
 8016992:	9d00      	ldr	r5, [sp, #0]
 8016994:	2331      	movs	r3, #49	; 0x31
 8016996:	f805 3b01 	strb.w	r3, [r5], #1
 801699a:	f10b 0b01 	add.w	fp, fp, #1
 801699e:	e241      	b.n	8016e24 <_dtoa_r+0x95c>
 80169a0:	07f2      	lsls	r2, r6, #31
 80169a2:	d505      	bpl.n	80169b0 <_dtoa_r+0x4e8>
 80169a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169a8:	f7e9 fe3e 	bl	8000628 <__aeabi_dmul>
 80169ac:	3501      	adds	r5, #1
 80169ae:	2301      	movs	r3, #1
 80169b0:	1076      	asrs	r6, r6, #1
 80169b2:	3708      	adds	r7, #8
 80169b4:	e773      	b.n	801689e <_dtoa_r+0x3d6>
 80169b6:	2502      	movs	r5, #2
 80169b8:	e775      	b.n	80168a6 <_dtoa_r+0x3de>
 80169ba:	9e04      	ldr	r6, [sp, #16]
 80169bc:	465f      	mov	r7, fp
 80169be:	e792      	b.n	80168e6 <_dtoa_r+0x41e>
 80169c0:	9900      	ldr	r1, [sp, #0]
 80169c2:	4b50      	ldr	r3, [pc, #320]	; (8016b04 <_dtoa_r+0x63c>)
 80169c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80169c8:	4431      	add	r1, r6
 80169ca:	9102      	str	r1, [sp, #8]
 80169cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80169ce:	eeb0 9a47 	vmov.f32	s18, s14
 80169d2:	eef0 9a67 	vmov.f32	s19, s15
 80169d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80169da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80169de:	2900      	cmp	r1, #0
 80169e0:	d044      	beq.n	8016a6c <_dtoa_r+0x5a4>
 80169e2:	494e      	ldr	r1, [pc, #312]	; (8016b1c <_dtoa_r+0x654>)
 80169e4:	2000      	movs	r0, #0
 80169e6:	f7e9 ff49 	bl	800087c <__aeabi_ddiv>
 80169ea:	ec53 2b19 	vmov	r2, r3, d9
 80169ee:	f7e9 fc63 	bl	80002b8 <__aeabi_dsub>
 80169f2:	9d00      	ldr	r5, [sp, #0]
 80169f4:	ec41 0b19 	vmov	d9, r0, r1
 80169f8:	4649      	mov	r1, r9
 80169fa:	4640      	mov	r0, r8
 80169fc:	f7ea f8c4 	bl	8000b88 <__aeabi_d2iz>
 8016a00:	4606      	mov	r6, r0
 8016a02:	f7e9 fda7 	bl	8000554 <__aeabi_i2d>
 8016a06:	4602      	mov	r2, r0
 8016a08:	460b      	mov	r3, r1
 8016a0a:	4640      	mov	r0, r8
 8016a0c:	4649      	mov	r1, r9
 8016a0e:	f7e9 fc53 	bl	80002b8 <__aeabi_dsub>
 8016a12:	3630      	adds	r6, #48	; 0x30
 8016a14:	f805 6b01 	strb.w	r6, [r5], #1
 8016a18:	ec53 2b19 	vmov	r2, r3, d9
 8016a1c:	4680      	mov	r8, r0
 8016a1e:	4689      	mov	r9, r1
 8016a20:	f7ea f874 	bl	8000b0c <__aeabi_dcmplt>
 8016a24:	2800      	cmp	r0, #0
 8016a26:	d164      	bne.n	8016af2 <_dtoa_r+0x62a>
 8016a28:	4642      	mov	r2, r8
 8016a2a:	464b      	mov	r3, r9
 8016a2c:	4937      	ldr	r1, [pc, #220]	; (8016b0c <_dtoa_r+0x644>)
 8016a2e:	2000      	movs	r0, #0
 8016a30:	f7e9 fc42 	bl	80002b8 <__aeabi_dsub>
 8016a34:	ec53 2b19 	vmov	r2, r3, d9
 8016a38:	f7ea f868 	bl	8000b0c <__aeabi_dcmplt>
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	f040 80b6 	bne.w	8016bae <_dtoa_r+0x6e6>
 8016a42:	9b02      	ldr	r3, [sp, #8]
 8016a44:	429d      	cmp	r5, r3
 8016a46:	f43f af7c 	beq.w	8016942 <_dtoa_r+0x47a>
 8016a4a:	4b31      	ldr	r3, [pc, #196]	; (8016b10 <_dtoa_r+0x648>)
 8016a4c:	ec51 0b19 	vmov	r0, r1, d9
 8016a50:	2200      	movs	r2, #0
 8016a52:	f7e9 fde9 	bl	8000628 <__aeabi_dmul>
 8016a56:	4b2e      	ldr	r3, [pc, #184]	; (8016b10 <_dtoa_r+0x648>)
 8016a58:	ec41 0b19 	vmov	d9, r0, r1
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	4640      	mov	r0, r8
 8016a60:	4649      	mov	r1, r9
 8016a62:	f7e9 fde1 	bl	8000628 <__aeabi_dmul>
 8016a66:	4680      	mov	r8, r0
 8016a68:	4689      	mov	r9, r1
 8016a6a:	e7c5      	b.n	80169f8 <_dtoa_r+0x530>
 8016a6c:	ec51 0b17 	vmov	r0, r1, d7
 8016a70:	f7e9 fdda 	bl	8000628 <__aeabi_dmul>
 8016a74:	9b02      	ldr	r3, [sp, #8]
 8016a76:	9d00      	ldr	r5, [sp, #0]
 8016a78:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a7a:	ec41 0b19 	vmov	d9, r0, r1
 8016a7e:	4649      	mov	r1, r9
 8016a80:	4640      	mov	r0, r8
 8016a82:	f7ea f881 	bl	8000b88 <__aeabi_d2iz>
 8016a86:	4606      	mov	r6, r0
 8016a88:	f7e9 fd64 	bl	8000554 <__aeabi_i2d>
 8016a8c:	3630      	adds	r6, #48	; 0x30
 8016a8e:	4602      	mov	r2, r0
 8016a90:	460b      	mov	r3, r1
 8016a92:	4640      	mov	r0, r8
 8016a94:	4649      	mov	r1, r9
 8016a96:	f7e9 fc0f 	bl	80002b8 <__aeabi_dsub>
 8016a9a:	f805 6b01 	strb.w	r6, [r5], #1
 8016a9e:	9b02      	ldr	r3, [sp, #8]
 8016aa0:	429d      	cmp	r5, r3
 8016aa2:	4680      	mov	r8, r0
 8016aa4:	4689      	mov	r9, r1
 8016aa6:	f04f 0200 	mov.w	r2, #0
 8016aaa:	d124      	bne.n	8016af6 <_dtoa_r+0x62e>
 8016aac:	4b1b      	ldr	r3, [pc, #108]	; (8016b1c <_dtoa_r+0x654>)
 8016aae:	ec51 0b19 	vmov	r0, r1, d9
 8016ab2:	f7e9 fc03 	bl	80002bc <__adddf3>
 8016ab6:	4602      	mov	r2, r0
 8016ab8:	460b      	mov	r3, r1
 8016aba:	4640      	mov	r0, r8
 8016abc:	4649      	mov	r1, r9
 8016abe:	f7ea f843 	bl	8000b48 <__aeabi_dcmpgt>
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	d173      	bne.n	8016bae <_dtoa_r+0x6e6>
 8016ac6:	ec53 2b19 	vmov	r2, r3, d9
 8016aca:	4914      	ldr	r1, [pc, #80]	; (8016b1c <_dtoa_r+0x654>)
 8016acc:	2000      	movs	r0, #0
 8016ace:	f7e9 fbf3 	bl	80002b8 <__aeabi_dsub>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	4640      	mov	r0, r8
 8016ad8:	4649      	mov	r1, r9
 8016ada:	f7ea f817 	bl	8000b0c <__aeabi_dcmplt>
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	f43f af2f 	beq.w	8016942 <_dtoa_r+0x47a>
 8016ae4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016ae6:	1e6b      	subs	r3, r5, #1
 8016ae8:	930f      	str	r3, [sp, #60]	; 0x3c
 8016aea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016aee:	2b30      	cmp	r3, #48	; 0x30
 8016af0:	d0f8      	beq.n	8016ae4 <_dtoa_r+0x61c>
 8016af2:	46bb      	mov	fp, r7
 8016af4:	e04a      	b.n	8016b8c <_dtoa_r+0x6c4>
 8016af6:	4b06      	ldr	r3, [pc, #24]	; (8016b10 <_dtoa_r+0x648>)
 8016af8:	f7e9 fd96 	bl	8000628 <__aeabi_dmul>
 8016afc:	4680      	mov	r8, r0
 8016afe:	4689      	mov	r9, r1
 8016b00:	e7bd      	b.n	8016a7e <_dtoa_r+0x5b6>
 8016b02:	bf00      	nop
 8016b04:	0801a298 	.word	0x0801a298
 8016b08:	0801a270 	.word	0x0801a270
 8016b0c:	3ff00000 	.word	0x3ff00000
 8016b10:	40240000 	.word	0x40240000
 8016b14:	401c0000 	.word	0x401c0000
 8016b18:	40140000 	.word	0x40140000
 8016b1c:	3fe00000 	.word	0x3fe00000
 8016b20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016b24:	9d00      	ldr	r5, [sp, #0]
 8016b26:	4642      	mov	r2, r8
 8016b28:	464b      	mov	r3, r9
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	4639      	mov	r1, r7
 8016b2e:	f7e9 fea5 	bl	800087c <__aeabi_ddiv>
 8016b32:	f7ea f829 	bl	8000b88 <__aeabi_d2iz>
 8016b36:	9001      	str	r0, [sp, #4]
 8016b38:	f7e9 fd0c 	bl	8000554 <__aeabi_i2d>
 8016b3c:	4642      	mov	r2, r8
 8016b3e:	464b      	mov	r3, r9
 8016b40:	f7e9 fd72 	bl	8000628 <__aeabi_dmul>
 8016b44:	4602      	mov	r2, r0
 8016b46:	460b      	mov	r3, r1
 8016b48:	4630      	mov	r0, r6
 8016b4a:	4639      	mov	r1, r7
 8016b4c:	f7e9 fbb4 	bl	80002b8 <__aeabi_dsub>
 8016b50:	9e01      	ldr	r6, [sp, #4]
 8016b52:	9f04      	ldr	r7, [sp, #16]
 8016b54:	3630      	adds	r6, #48	; 0x30
 8016b56:	f805 6b01 	strb.w	r6, [r5], #1
 8016b5a:	9e00      	ldr	r6, [sp, #0]
 8016b5c:	1bae      	subs	r6, r5, r6
 8016b5e:	42b7      	cmp	r7, r6
 8016b60:	4602      	mov	r2, r0
 8016b62:	460b      	mov	r3, r1
 8016b64:	d134      	bne.n	8016bd0 <_dtoa_r+0x708>
 8016b66:	f7e9 fba9 	bl	80002bc <__adddf3>
 8016b6a:	4642      	mov	r2, r8
 8016b6c:	464b      	mov	r3, r9
 8016b6e:	4606      	mov	r6, r0
 8016b70:	460f      	mov	r7, r1
 8016b72:	f7e9 ffe9 	bl	8000b48 <__aeabi_dcmpgt>
 8016b76:	b9c8      	cbnz	r0, 8016bac <_dtoa_r+0x6e4>
 8016b78:	4642      	mov	r2, r8
 8016b7a:	464b      	mov	r3, r9
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	4639      	mov	r1, r7
 8016b80:	f7e9 ffba 	bl	8000af8 <__aeabi_dcmpeq>
 8016b84:	b110      	cbz	r0, 8016b8c <_dtoa_r+0x6c4>
 8016b86:	9b01      	ldr	r3, [sp, #4]
 8016b88:	07db      	lsls	r3, r3, #31
 8016b8a:	d40f      	bmi.n	8016bac <_dtoa_r+0x6e4>
 8016b8c:	4651      	mov	r1, sl
 8016b8e:	4620      	mov	r0, r4
 8016b90:	f000 fb18 	bl	80171c4 <_Bfree>
 8016b94:	2300      	movs	r3, #0
 8016b96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b98:	702b      	strb	r3, [r5, #0]
 8016b9a:	f10b 0301 	add.w	r3, fp, #1
 8016b9e:	6013      	str	r3, [r2, #0]
 8016ba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	f43f ace2 	beq.w	801656c <_dtoa_r+0xa4>
 8016ba8:	601d      	str	r5, [r3, #0]
 8016baa:	e4df      	b.n	801656c <_dtoa_r+0xa4>
 8016bac:	465f      	mov	r7, fp
 8016bae:	462b      	mov	r3, r5
 8016bb0:	461d      	mov	r5, r3
 8016bb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016bb6:	2a39      	cmp	r2, #57	; 0x39
 8016bb8:	d106      	bne.n	8016bc8 <_dtoa_r+0x700>
 8016bba:	9a00      	ldr	r2, [sp, #0]
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	d1f7      	bne.n	8016bb0 <_dtoa_r+0x6e8>
 8016bc0:	9900      	ldr	r1, [sp, #0]
 8016bc2:	2230      	movs	r2, #48	; 0x30
 8016bc4:	3701      	adds	r7, #1
 8016bc6:	700a      	strb	r2, [r1, #0]
 8016bc8:	781a      	ldrb	r2, [r3, #0]
 8016bca:	3201      	adds	r2, #1
 8016bcc:	701a      	strb	r2, [r3, #0]
 8016bce:	e790      	b.n	8016af2 <_dtoa_r+0x62a>
 8016bd0:	4ba3      	ldr	r3, [pc, #652]	; (8016e60 <_dtoa_r+0x998>)
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	f7e9 fd28 	bl	8000628 <__aeabi_dmul>
 8016bd8:	2200      	movs	r2, #0
 8016bda:	2300      	movs	r3, #0
 8016bdc:	4606      	mov	r6, r0
 8016bde:	460f      	mov	r7, r1
 8016be0:	f7e9 ff8a 	bl	8000af8 <__aeabi_dcmpeq>
 8016be4:	2800      	cmp	r0, #0
 8016be6:	d09e      	beq.n	8016b26 <_dtoa_r+0x65e>
 8016be8:	e7d0      	b.n	8016b8c <_dtoa_r+0x6c4>
 8016bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016bec:	2a00      	cmp	r2, #0
 8016bee:	f000 80ca 	beq.w	8016d86 <_dtoa_r+0x8be>
 8016bf2:	9a07      	ldr	r2, [sp, #28]
 8016bf4:	2a01      	cmp	r2, #1
 8016bf6:	f300 80ad 	bgt.w	8016d54 <_dtoa_r+0x88c>
 8016bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bfc:	2a00      	cmp	r2, #0
 8016bfe:	f000 80a5 	beq.w	8016d4c <_dtoa_r+0x884>
 8016c02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016c06:	9e08      	ldr	r6, [sp, #32]
 8016c08:	9d05      	ldr	r5, [sp, #20]
 8016c0a:	9a05      	ldr	r2, [sp, #20]
 8016c0c:	441a      	add	r2, r3
 8016c0e:	9205      	str	r2, [sp, #20]
 8016c10:	9a06      	ldr	r2, [sp, #24]
 8016c12:	2101      	movs	r1, #1
 8016c14:	441a      	add	r2, r3
 8016c16:	4620      	mov	r0, r4
 8016c18:	9206      	str	r2, [sp, #24]
 8016c1a:	f000 fb89 	bl	8017330 <__i2b>
 8016c1e:	4607      	mov	r7, r0
 8016c20:	b165      	cbz	r5, 8016c3c <_dtoa_r+0x774>
 8016c22:	9b06      	ldr	r3, [sp, #24]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	dd09      	ble.n	8016c3c <_dtoa_r+0x774>
 8016c28:	42ab      	cmp	r3, r5
 8016c2a:	9a05      	ldr	r2, [sp, #20]
 8016c2c:	bfa8      	it	ge
 8016c2e:	462b      	movge	r3, r5
 8016c30:	1ad2      	subs	r2, r2, r3
 8016c32:	9205      	str	r2, [sp, #20]
 8016c34:	9a06      	ldr	r2, [sp, #24]
 8016c36:	1aed      	subs	r5, r5, r3
 8016c38:	1ad3      	subs	r3, r2, r3
 8016c3a:	9306      	str	r3, [sp, #24]
 8016c3c:	9b08      	ldr	r3, [sp, #32]
 8016c3e:	b1f3      	cbz	r3, 8016c7e <_dtoa_r+0x7b6>
 8016c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	f000 80a3 	beq.w	8016d8e <_dtoa_r+0x8c6>
 8016c48:	2e00      	cmp	r6, #0
 8016c4a:	dd10      	ble.n	8016c6e <_dtoa_r+0x7a6>
 8016c4c:	4639      	mov	r1, r7
 8016c4e:	4632      	mov	r2, r6
 8016c50:	4620      	mov	r0, r4
 8016c52:	f000 fc2d 	bl	80174b0 <__pow5mult>
 8016c56:	4652      	mov	r2, sl
 8016c58:	4601      	mov	r1, r0
 8016c5a:	4607      	mov	r7, r0
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f000 fb7d 	bl	801735c <__multiply>
 8016c62:	4651      	mov	r1, sl
 8016c64:	4680      	mov	r8, r0
 8016c66:	4620      	mov	r0, r4
 8016c68:	f000 faac 	bl	80171c4 <_Bfree>
 8016c6c:	46c2      	mov	sl, r8
 8016c6e:	9b08      	ldr	r3, [sp, #32]
 8016c70:	1b9a      	subs	r2, r3, r6
 8016c72:	d004      	beq.n	8016c7e <_dtoa_r+0x7b6>
 8016c74:	4651      	mov	r1, sl
 8016c76:	4620      	mov	r0, r4
 8016c78:	f000 fc1a 	bl	80174b0 <__pow5mult>
 8016c7c:	4682      	mov	sl, r0
 8016c7e:	2101      	movs	r1, #1
 8016c80:	4620      	mov	r0, r4
 8016c82:	f000 fb55 	bl	8017330 <__i2b>
 8016c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	f340 8081 	ble.w	8016d92 <_dtoa_r+0x8ca>
 8016c90:	461a      	mov	r2, r3
 8016c92:	4601      	mov	r1, r0
 8016c94:	4620      	mov	r0, r4
 8016c96:	f000 fc0b 	bl	80174b0 <__pow5mult>
 8016c9a:	9b07      	ldr	r3, [sp, #28]
 8016c9c:	2b01      	cmp	r3, #1
 8016c9e:	4606      	mov	r6, r0
 8016ca0:	dd7a      	ble.n	8016d98 <_dtoa_r+0x8d0>
 8016ca2:	f04f 0800 	mov.w	r8, #0
 8016ca6:	6933      	ldr	r3, [r6, #16]
 8016ca8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016cac:	6918      	ldr	r0, [r3, #16]
 8016cae:	f000 faf1 	bl	8017294 <__hi0bits>
 8016cb2:	f1c0 0020 	rsb	r0, r0, #32
 8016cb6:	9b06      	ldr	r3, [sp, #24]
 8016cb8:	4418      	add	r0, r3
 8016cba:	f010 001f 	ands.w	r0, r0, #31
 8016cbe:	f000 8094 	beq.w	8016dea <_dtoa_r+0x922>
 8016cc2:	f1c0 0320 	rsb	r3, r0, #32
 8016cc6:	2b04      	cmp	r3, #4
 8016cc8:	f340 8085 	ble.w	8016dd6 <_dtoa_r+0x90e>
 8016ccc:	9b05      	ldr	r3, [sp, #20]
 8016cce:	f1c0 001c 	rsb	r0, r0, #28
 8016cd2:	4403      	add	r3, r0
 8016cd4:	9305      	str	r3, [sp, #20]
 8016cd6:	9b06      	ldr	r3, [sp, #24]
 8016cd8:	4403      	add	r3, r0
 8016cda:	4405      	add	r5, r0
 8016cdc:	9306      	str	r3, [sp, #24]
 8016cde:	9b05      	ldr	r3, [sp, #20]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	dd05      	ble.n	8016cf0 <_dtoa_r+0x828>
 8016ce4:	4651      	mov	r1, sl
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	4620      	mov	r0, r4
 8016cea:	f000 fc3b 	bl	8017564 <__lshift>
 8016cee:	4682      	mov	sl, r0
 8016cf0:	9b06      	ldr	r3, [sp, #24]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	dd05      	ble.n	8016d02 <_dtoa_r+0x83a>
 8016cf6:	4631      	mov	r1, r6
 8016cf8:	461a      	mov	r2, r3
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	f000 fc32 	bl	8017564 <__lshift>
 8016d00:	4606      	mov	r6, r0
 8016d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d072      	beq.n	8016dee <_dtoa_r+0x926>
 8016d08:	4631      	mov	r1, r6
 8016d0a:	4650      	mov	r0, sl
 8016d0c:	f000 fc96 	bl	801763c <__mcmp>
 8016d10:	2800      	cmp	r0, #0
 8016d12:	da6c      	bge.n	8016dee <_dtoa_r+0x926>
 8016d14:	2300      	movs	r3, #0
 8016d16:	4651      	mov	r1, sl
 8016d18:	220a      	movs	r2, #10
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	f000 fa74 	bl	8017208 <__multadd>
 8016d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d26:	4682      	mov	sl, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	f000 81b0 	beq.w	801708e <_dtoa_r+0xbc6>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	4639      	mov	r1, r7
 8016d32:	220a      	movs	r2, #10
 8016d34:	4620      	mov	r0, r4
 8016d36:	f000 fa67 	bl	8017208 <__multadd>
 8016d3a:	9b01      	ldr	r3, [sp, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	4607      	mov	r7, r0
 8016d40:	f300 8096 	bgt.w	8016e70 <_dtoa_r+0x9a8>
 8016d44:	9b07      	ldr	r3, [sp, #28]
 8016d46:	2b02      	cmp	r3, #2
 8016d48:	dc59      	bgt.n	8016dfe <_dtoa_r+0x936>
 8016d4a:	e091      	b.n	8016e70 <_dtoa_r+0x9a8>
 8016d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016d52:	e758      	b.n	8016c06 <_dtoa_r+0x73e>
 8016d54:	9b04      	ldr	r3, [sp, #16]
 8016d56:	1e5e      	subs	r6, r3, #1
 8016d58:	9b08      	ldr	r3, [sp, #32]
 8016d5a:	42b3      	cmp	r3, r6
 8016d5c:	bfbf      	itttt	lt
 8016d5e:	9b08      	ldrlt	r3, [sp, #32]
 8016d60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8016d62:	9608      	strlt	r6, [sp, #32]
 8016d64:	1af3      	sublt	r3, r6, r3
 8016d66:	bfb4      	ite	lt
 8016d68:	18d2      	addlt	r2, r2, r3
 8016d6a:	1b9e      	subge	r6, r3, r6
 8016d6c:	9b04      	ldr	r3, [sp, #16]
 8016d6e:	bfbc      	itt	lt
 8016d70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8016d72:	2600      	movlt	r6, #0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	bfb7      	itett	lt
 8016d78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8016d7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8016d80:	1a9d      	sublt	r5, r3, r2
 8016d82:	2300      	movlt	r3, #0
 8016d84:	e741      	b.n	8016c0a <_dtoa_r+0x742>
 8016d86:	9e08      	ldr	r6, [sp, #32]
 8016d88:	9d05      	ldr	r5, [sp, #20]
 8016d8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016d8c:	e748      	b.n	8016c20 <_dtoa_r+0x758>
 8016d8e:	9a08      	ldr	r2, [sp, #32]
 8016d90:	e770      	b.n	8016c74 <_dtoa_r+0x7ac>
 8016d92:	9b07      	ldr	r3, [sp, #28]
 8016d94:	2b01      	cmp	r3, #1
 8016d96:	dc19      	bgt.n	8016dcc <_dtoa_r+0x904>
 8016d98:	9b02      	ldr	r3, [sp, #8]
 8016d9a:	b9bb      	cbnz	r3, 8016dcc <_dtoa_r+0x904>
 8016d9c:	9b03      	ldr	r3, [sp, #12]
 8016d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016da2:	b99b      	cbnz	r3, 8016dcc <_dtoa_r+0x904>
 8016da4:	9b03      	ldr	r3, [sp, #12]
 8016da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016daa:	0d1b      	lsrs	r3, r3, #20
 8016dac:	051b      	lsls	r3, r3, #20
 8016dae:	b183      	cbz	r3, 8016dd2 <_dtoa_r+0x90a>
 8016db0:	9b05      	ldr	r3, [sp, #20]
 8016db2:	3301      	adds	r3, #1
 8016db4:	9305      	str	r3, [sp, #20]
 8016db6:	9b06      	ldr	r3, [sp, #24]
 8016db8:	3301      	adds	r3, #1
 8016dba:	9306      	str	r3, [sp, #24]
 8016dbc:	f04f 0801 	mov.w	r8, #1
 8016dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f47f af6f 	bne.w	8016ca6 <_dtoa_r+0x7de>
 8016dc8:	2001      	movs	r0, #1
 8016dca:	e774      	b.n	8016cb6 <_dtoa_r+0x7ee>
 8016dcc:	f04f 0800 	mov.w	r8, #0
 8016dd0:	e7f6      	b.n	8016dc0 <_dtoa_r+0x8f8>
 8016dd2:	4698      	mov	r8, r3
 8016dd4:	e7f4      	b.n	8016dc0 <_dtoa_r+0x8f8>
 8016dd6:	d082      	beq.n	8016cde <_dtoa_r+0x816>
 8016dd8:	9a05      	ldr	r2, [sp, #20]
 8016dda:	331c      	adds	r3, #28
 8016ddc:	441a      	add	r2, r3
 8016dde:	9205      	str	r2, [sp, #20]
 8016de0:	9a06      	ldr	r2, [sp, #24]
 8016de2:	441a      	add	r2, r3
 8016de4:	441d      	add	r5, r3
 8016de6:	9206      	str	r2, [sp, #24]
 8016de8:	e779      	b.n	8016cde <_dtoa_r+0x816>
 8016dea:	4603      	mov	r3, r0
 8016dec:	e7f4      	b.n	8016dd8 <_dtoa_r+0x910>
 8016dee:	9b04      	ldr	r3, [sp, #16]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	dc37      	bgt.n	8016e64 <_dtoa_r+0x99c>
 8016df4:	9b07      	ldr	r3, [sp, #28]
 8016df6:	2b02      	cmp	r3, #2
 8016df8:	dd34      	ble.n	8016e64 <_dtoa_r+0x99c>
 8016dfa:	9b04      	ldr	r3, [sp, #16]
 8016dfc:	9301      	str	r3, [sp, #4]
 8016dfe:	9b01      	ldr	r3, [sp, #4]
 8016e00:	b963      	cbnz	r3, 8016e1c <_dtoa_r+0x954>
 8016e02:	4631      	mov	r1, r6
 8016e04:	2205      	movs	r2, #5
 8016e06:	4620      	mov	r0, r4
 8016e08:	f000 f9fe 	bl	8017208 <__multadd>
 8016e0c:	4601      	mov	r1, r0
 8016e0e:	4606      	mov	r6, r0
 8016e10:	4650      	mov	r0, sl
 8016e12:	f000 fc13 	bl	801763c <__mcmp>
 8016e16:	2800      	cmp	r0, #0
 8016e18:	f73f adbb 	bgt.w	8016992 <_dtoa_r+0x4ca>
 8016e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e1e:	9d00      	ldr	r5, [sp, #0]
 8016e20:	ea6f 0b03 	mvn.w	fp, r3
 8016e24:	f04f 0800 	mov.w	r8, #0
 8016e28:	4631      	mov	r1, r6
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	f000 f9ca 	bl	80171c4 <_Bfree>
 8016e30:	2f00      	cmp	r7, #0
 8016e32:	f43f aeab 	beq.w	8016b8c <_dtoa_r+0x6c4>
 8016e36:	f1b8 0f00 	cmp.w	r8, #0
 8016e3a:	d005      	beq.n	8016e48 <_dtoa_r+0x980>
 8016e3c:	45b8      	cmp	r8, r7
 8016e3e:	d003      	beq.n	8016e48 <_dtoa_r+0x980>
 8016e40:	4641      	mov	r1, r8
 8016e42:	4620      	mov	r0, r4
 8016e44:	f000 f9be 	bl	80171c4 <_Bfree>
 8016e48:	4639      	mov	r1, r7
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	f000 f9ba 	bl	80171c4 <_Bfree>
 8016e50:	e69c      	b.n	8016b8c <_dtoa_r+0x6c4>
 8016e52:	2600      	movs	r6, #0
 8016e54:	4637      	mov	r7, r6
 8016e56:	e7e1      	b.n	8016e1c <_dtoa_r+0x954>
 8016e58:	46bb      	mov	fp, r7
 8016e5a:	4637      	mov	r7, r6
 8016e5c:	e599      	b.n	8016992 <_dtoa_r+0x4ca>
 8016e5e:	bf00      	nop
 8016e60:	40240000 	.word	0x40240000
 8016e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f000 80c8 	beq.w	8016ffc <_dtoa_r+0xb34>
 8016e6c:	9b04      	ldr	r3, [sp, #16]
 8016e6e:	9301      	str	r3, [sp, #4]
 8016e70:	2d00      	cmp	r5, #0
 8016e72:	dd05      	ble.n	8016e80 <_dtoa_r+0x9b8>
 8016e74:	4639      	mov	r1, r7
 8016e76:	462a      	mov	r2, r5
 8016e78:	4620      	mov	r0, r4
 8016e7a:	f000 fb73 	bl	8017564 <__lshift>
 8016e7e:	4607      	mov	r7, r0
 8016e80:	f1b8 0f00 	cmp.w	r8, #0
 8016e84:	d05b      	beq.n	8016f3e <_dtoa_r+0xa76>
 8016e86:	6879      	ldr	r1, [r7, #4]
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f000 f95b 	bl	8017144 <_Balloc>
 8016e8e:	4605      	mov	r5, r0
 8016e90:	b928      	cbnz	r0, 8016e9e <_dtoa_r+0x9d6>
 8016e92:	4b83      	ldr	r3, [pc, #524]	; (80170a0 <_dtoa_r+0xbd8>)
 8016e94:	4602      	mov	r2, r0
 8016e96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8016e9a:	f7ff bb2e 	b.w	80164fa <_dtoa_r+0x32>
 8016e9e:	693a      	ldr	r2, [r7, #16]
 8016ea0:	3202      	adds	r2, #2
 8016ea2:	0092      	lsls	r2, r2, #2
 8016ea4:	f107 010c 	add.w	r1, r7, #12
 8016ea8:	300c      	adds	r0, #12
 8016eaa:	f7ff fa76 	bl	801639a <memcpy>
 8016eae:	2201      	movs	r2, #1
 8016eb0:	4629      	mov	r1, r5
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	f000 fb56 	bl	8017564 <__lshift>
 8016eb8:	9b00      	ldr	r3, [sp, #0]
 8016eba:	3301      	adds	r3, #1
 8016ebc:	9304      	str	r3, [sp, #16]
 8016ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ec2:	4413      	add	r3, r2
 8016ec4:	9308      	str	r3, [sp, #32]
 8016ec6:	9b02      	ldr	r3, [sp, #8]
 8016ec8:	f003 0301 	and.w	r3, r3, #1
 8016ecc:	46b8      	mov	r8, r7
 8016ece:	9306      	str	r3, [sp, #24]
 8016ed0:	4607      	mov	r7, r0
 8016ed2:	9b04      	ldr	r3, [sp, #16]
 8016ed4:	4631      	mov	r1, r6
 8016ed6:	3b01      	subs	r3, #1
 8016ed8:	4650      	mov	r0, sl
 8016eda:	9301      	str	r3, [sp, #4]
 8016edc:	f7ff fa6b 	bl	80163b6 <quorem>
 8016ee0:	4641      	mov	r1, r8
 8016ee2:	9002      	str	r0, [sp, #8]
 8016ee4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016ee8:	4650      	mov	r0, sl
 8016eea:	f000 fba7 	bl	801763c <__mcmp>
 8016eee:	463a      	mov	r2, r7
 8016ef0:	9005      	str	r0, [sp, #20]
 8016ef2:	4631      	mov	r1, r6
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	f000 fbbd 	bl	8017674 <__mdiff>
 8016efa:	68c2      	ldr	r2, [r0, #12]
 8016efc:	4605      	mov	r5, r0
 8016efe:	bb02      	cbnz	r2, 8016f42 <_dtoa_r+0xa7a>
 8016f00:	4601      	mov	r1, r0
 8016f02:	4650      	mov	r0, sl
 8016f04:	f000 fb9a 	bl	801763c <__mcmp>
 8016f08:	4602      	mov	r2, r0
 8016f0a:	4629      	mov	r1, r5
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8016f10:	f000 f958 	bl	80171c4 <_Bfree>
 8016f14:	9b07      	ldr	r3, [sp, #28]
 8016f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f18:	9d04      	ldr	r5, [sp, #16]
 8016f1a:	ea43 0102 	orr.w	r1, r3, r2
 8016f1e:	9b06      	ldr	r3, [sp, #24]
 8016f20:	4319      	orrs	r1, r3
 8016f22:	d110      	bne.n	8016f46 <_dtoa_r+0xa7e>
 8016f24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016f28:	d029      	beq.n	8016f7e <_dtoa_r+0xab6>
 8016f2a:	9b05      	ldr	r3, [sp, #20]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	dd02      	ble.n	8016f36 <_dtoa_r+0xa6e>
 8016f30:	9b02      	ldr	r3, [sp, #8]
 8016f32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016f36:	9b01      	ldr	r3, [sp, #4]
 8016f38:	f883 9000 	strb.w	r9, [r3]
 8016f3c:	e774      	b.n	8016e28 <_dtoa_r+0x960>
 8016f3e:	4638      	mov	r0, r7
 8016f40:	e7ba      	b.n	8016eb8 <_dtoa_r+0x9f0>
 8016f42:	2201      	movs	r2, #1
 8016f44:	e7e1      	b.n	8016f0a <_dtoa_r+0xa42>
 8016f46:	9b05      	ldr	r3, [sp, #20]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	db04      	blt.n	8016f56 <_dtoa_r+0xa8e>
 8016f4c:	9907      	ldr	r1, [sp, #28]
 8016f4e:	430b      	orrs	r3, r1
 8016f50:	9906      	ldr	r1, [sp, #24]
 8016f52:	430b      	orrs	r3, r1
 8016f54:	d120      	bne.n	8016f98 <_dtoa_r+0xad0>
 8016f56:	2a00      	cmp	r2, #0
 8016f58:	dded      	ble.n	8016f36 <_dtoa_r+0xa6e>
 8016f5a:	4651      	mov	r1, sl
 8016f5c:	2201      	movs	r2, #1
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f000 fb00 	bl	8017564 <__lshift>
 8016f64:	4631      	mov	r1, r6
 8016f66:	4682      	mov	sl, r0
 8016f68:	f000 fb68 	bl	801763c <__mcmp>
 8016f6c:	2800      	cmp	r0, #0
 8016f6e:	dc03      	bgt.n	8016f78 <_dtoa_r+0xab0>
 8016f70:	d1e1      	bne.n	8016f36 <_dtoa_r+0xa6e>
 8016f72:	f019 0f01 	tst.w	r9, #1
 8016f76:	d0de      	beq.n	8016f36 <_dtoa_r+0xa6e>
 8016f78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016f7c:	d1d8      	bne.n	8016f30 <_dtoa_r+0xa68>
 8016f7e:	9a01      	ldr	r2, [sp, #4]
 8016f80:	2339      	movs	r3, #57	; 0x39
 8016f82:	7013      	strb	r3, [r2, #0]
 8016f84:	462b      	mov	r3, r5
 8016f86:	461d      	mov	r5, r3
 8016f88:	3b01      	subs	r3, #1
 8016f8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016f8e:	2a39      	cmp	r2, #57	; 0x39
 8016f90:	d06c      	beq.n	801706c <_dtoa_r+0xba4>
 8016f92:	3201      	adds	r2, #1
 8016f94:	701a      	strb	r2, [r3, #0]
 8016f96:	e747      	b.n	8016e28 <_dtoa_r+0x960>
 8016f98:	2a00      	cmp	r2, #0
 8016f9a:	dd07      	ble.n	8016fac <_dtoa_r+0xae4>
 8016f9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016fa0:	d0ed      	beq.n	8016f7e <_dtoa_r+0xab6>
 8016fa2:	9a01      	ldr	r2, [sp, #4]
 8016fa4:	f109 0301 	add.w	r3, r9, #1
 8016fa8:	7013      	strb	r3, [r2, #0]
 8016faa:	e73d      	b.n	8016e28 <_dtoa_r+0x960>
 8016fac:	9b04      	ldr	r3, [sp, #16]
 8016fae:	9a08      	ldr	r2, [sp, #32]
 8016fb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8016fb4:	4293      	cmp	r3, r2
 8016fb6:	d043      	beq.n	8017040 <_dtoa_r+0xb78>
 8016fb8:	4651      	mov	r1, sl
 8016fba:	2300      	movs	r3, #0
 8016fbc:	220a      	movs	r2, #10
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f000 f922 	bl	8017208 <__multadd>
 8016fc4:	45b8      	cmp	r8, r7
 8016fc6:	4682      	mov	sl, r0
 8016fc8:	f04f 0300 	mov.w	r3, #0
 8016fcc:	f04f 020a 	mov.w	r2, #10
 8016fd0:	4641      	mov	r1, r8
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	d107      	bne.n	8016fe6 <_dtoa_r+0xb1e>
 8016fd6:	f000 f917 	bl	8017208 <__multadd>
 8016fda:	4680      	mov	r8, r0
 8016fdc:	4607      	mov	r7, r0
 8016fde:	9b04      	ldr	r3, [sp, #16]
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	9304      	str	r3, [sp, #16]
 8016fe4:	e775      	b.n	8016ed2 <_dtoa_r+0xa0a>
 8016fe6:	f000 f90f 	bl	8017208 <__multadd>
 8016fea:	4639      	mov	r1, r7
 8016fec:	4680      	mov	r8, r0
 8016fee:	2300      	movs	r3, #0
 8016ff0:	220a      	movs	r2, #10
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f000 f908 	bl	8017208 <__multadd>
 8016ff8:	4607      	mov	r7, r0
 8016ffa:	e7f0      	b.n	8016fde <_dtoa_r+0xb16>
 8016ffc:	9b04      	ldr	r3, [sp, #16]
 8016ffe:	9301      	str	r3, [sp, #4]
 8017000:	9d00      	ldr	r5, [sp, #0]
 8017002:	4631      	mov	r1, r6
 8017004:	4650      	mov	r0, sl
 8017006:	f7ff f9d6 	bl	80163b6 <quorem>
 801700a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801700e:	9b00      	ldr	r3, [sp, #0]
 8017010:	f805 9b01 	strb.w	r9, [r5], #1
 8017014:	1aea      	subs	r2, r5, r3
 8017016:	9b01      	ldr	r3, [sp, #4]
 8017018:	4293      	cmp	r3, r2
 801701a:	dd07      	ble.n	801702c <_dtoa_r+0xb64>
 801701c:	4651      	mov	r1, sl
 801701e:	2300      	movs	r3, #0
 8017020:	220a      	movs	r2, #10
 8017022:	4620      	mov	r0, r4
 8017024:	f000 f8f0 	bl	8017208 <__multadd>
 8017028:	4682      	mov	sl, r0
 801702a:	e7ea      	b.n	8017002 <_dtoa_r+0xb3a>
 801702c:	9b01      	ldr	r3, [sp, #4]
 801702e:	2b00      	cmp	r3, #0
 8017030:	bfc8      	it	gt
 8017032:	461d      	movgt	r5, r3
 8017034:	9b00      	ldr	r3, [sp, #0]
 8017036:	bfd8      	it	le
 8017038:	2501      	movle	r5, #1
 801703a:	441d      	add	r5, r3
 801703c:	f04f 0800 	mov.w	r8, #0
 8017040:	4651      	mov	r1, sl
 8017042:	2201      	movs	r2, #1
 8017044:	4620      	mov	r0, r4
 8017046:	f000 fa8d 	bl	8017564 <__lshift>
 801704a:	4631      	mov	r1, r6
 801704c:	4682      	mov	sl, r0
 801704e:	f000 faf5 	bl	801763c <__mcmp>
 8017052:	2800      	cmp	r0, #0
 8017054:	dc96      	bgt.n	8016f84 <_dtoa_r+0xabc>
 8017056:	d102      	bne.n	801705e <_dtoa_r+0xb96>
 8017058:	f019 0f01 	tst.w	r9, #1
 801705c:	d192      	bne.n	8016f84 <_dtoa_r+0xabc>
 801705e:	462b      	mov	r3, r5
 8017060:	461d      	mov	r5, r3
 8017062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017066:	2a30      	cmp	r2, #48	; 0x30
 8017068:	d0fa      	beq.n	8017060 <_dtoa_r+0xb98>
 801706a:	e6dd      	b.n	8016e28 <_dtoa_r+0x960>
 801706c:	9a00      	ldr	r2, [sp, #0]
 801706e:	429a      	cmp	r2, r3
 8017070:	d189      	bne.n	8016f86 <_dtoa_r+0xabe>
 8017072:	f10b 0b01 	add.w	fp, fp, #1
 8017076:	2331      	movs	r3, #49	; 0x31
 8017078:	e796      	b.n	8016fa8 <_dtoa_r+0xae0>
 801707a:	4b0a      	ldr	r3, [pc, #40]	; (80170a4 <_dtoa_r+0xbdc>)
 801707c:	f7ff ba99 	b.w	80165b2 <_dtoa_r+0xea>
 8017080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017082:	2b00      	cmp	r3, #0
 8017084:	f47f aa6d 	bne.w	8016562 <_dtoa_r+0x9a>
 8017088:	4b07      	ldr	r3, [pc, #28]	; (80170a8 <_dtoa_r+0xbe0>)
 801708a:	f7ff ba92 	b.w	80165b2 <_dtoa_r+0xea>
 801708e:	9b01      	ldr	r3, [sp, #4]
 8017090:	2b00      	cmp	r3, #0
 8017092:	dcb5      	bgt.n	8017000 <_dtoa_r+0xb38>
 8017094:	9b07      	ldr	r3, [sp, #28]
 8017096:	2b02      	cmp	r3, #2
 8017098:	f73f aeb1 	bgt.w	8016dfe <_dtoa_r+0x936>
 801709c:	e7b0      	b.n	8017000 <_dtoa_r+0xb38>
 801709e:	bf00      	nop
 80170a0:	0801a204 	.word	0x0801a204
 80170a4:	0801a164 	.word	0x0801a164
 80170a8:	0801a188 	.word	0x0801a188

080170ac <_free_r>:
 80170ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170ae:	2900      	cmp	r1, #0
 80170b0:	d044      	beq.n	801713c <_free_r+0x90>
 80170b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170b6:	9001      	str	r0, [sp, #4]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	f1a1 0404 	sub.w	r4, r1, #4
 80170be:	bfb8      	it	lt
 80170c0:	18e4      	addlt	r4, r4, r3
 80170c2:	f7fe fb43 	bl	801574c <__malloc_lock>
 80170c6:	4a1e      	ldr	r2, [pc, #120]	; (8017140 <_free_r+0x94>)
 80170c8:	9801      	ldr	r0, [sp, #4]
 80170ca:	6813      	ldr	r3, [r2, #0]
 80170cc:	b933      	cbnz	r3, 80170dc <_free_r+0x30>
 80170ce:	6063      	str	r3, [r4, #4]
 80170d0:	6014      	str	r4, [r2, #0]
 80170d2:	b003      	add	sp, #12
 80170d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170d8:	f7fe bb3e 	b.w	8015758 <__malloc_unlock>
 80170dc:	42a3      	cmp	r3, r4
 80170de:	d908      	bls.n	80170f2 <_free_r+0x46>
 80170e0:	6825      	ldr	r5, [r4, #0]
 80170e2:	1961      	adds	r1, r4, r5
 80170e4:	428b      	cmp	r3, r1
 80170e6:	bf01      	itttt	eq
 80170e8:	6819      	ldreq	r1, [r3, #0]
 80170ea:	685b      	ldreq	r3, [r3, #4]
 80170ec:	1949      	addeq	r1, r1, r5
 80170ee:	6021      	streq	r1, [r4, #0]
 80170f0:	e7ed      	b.n	80170ce <_free_r+0x22>
 80170f2:	461a      	mov	r2, r3
 80170f4:	685b      	ldr	r3, [r3, #4]
 80170f6:	b10b      	cbz	r3, 80170fc <_free_r+0x50>
 80170f8:	42a3      	cmp	r3, r4
 80170fa:	d9fa      	bls.n	80170f2 <_free_r+0x46>
 80170fc:	6811      	ldr	r1, [r2, #0]
 80170fe:	1855      	adds	r5, r2, r1
 8017100:	42a5      	cmp	r5, r4
 8017102:	d10b      	bne.n	801711c <_free_r+0x70>
 8017104:	6824      	ldr	r4, [r4, #0]
 8017106:	4421      	add	r1, r4
 8017108:	1854      	adds	r4, r2, r1
 801710a:	42a3      	cmp	r3, r4
 801710c:	6011      	str	r1, [r2, #0]
 801710e:	d1e0      	bne.n	80170d2 <_free_r+0x26>
 8017110:	681c      	ldr	r4, [r3, #0]
 8017112:	685b      	ldr	r3, [r3, #4]
 8017114:	6053      	str	r3, [r2, #4]
 8017116:	440c      	add	r4, r1
 8017118:	6014      	str	r4, [r2, #0]
 801711a:	e7da      	b.n	80170d2 <_free_r+0x26>
 801711c:	d902      	bls.n	8017124 <_free_r+0x78>
 801711e:	230c      	movs	r3, #12
 8017120:	6003      	str	r3, [r0, #0]
 8017122:	e7d6      	b.n	80170d2 <_free_r+0x26>
 8017124:	6825      	ldr	r5, [r4, #0]
 8017126:	1961      	adds	r1, r4, r5
 8017128:	428b      	cmp	r3, r1
 801712a:	bf04      	itt	eq
 801712c:	6819      	ldreq	r1, [r3, #0]
 801712e:	685b      	ldreq	r3, [r3, #4]
 8017130:	6063      	str	r3, [r4, #4]
 8017132:	bf04      	itt	eq
 8017134:	1949      	addeq	r1, r1, r5
 8017136:	6021      	streq	r1, [r4, #0]
 8017138:	6054      	str	r4, [r2, #4]
 801713a:	e7ca      	b.n	80170d2 <_free_r+0x26>
 801713c:	b003      	add	sp, #12
 801713e:	bd30      	pop	{r4, r5, pc}
 8017140:	20006400 	.word	0x20006400

08017144 <_Balloc>:
 8017144:	b570      	push	{r4, r5, r6, lr}
 8017146:	69c6      	ldr	r6, [r0, #28]
 8017148:	4604      	mov	r4, r0
 801714a:	460d      	mov	r5, r1
 801714c:	b976      	cbnz	r6, 801716c <_Balloc+0x28>
 801714e:	2010      	movs	r0, #16
 8017150:	f7fe fa4c 	bl	80155ec <malloc>
 8017154:	4602      	mov	r2, r0
 8017156:	61e0      	str	r0, [r4, #28]
 8017158:	b920      	cbnz	r0, 8017164 <_Balloc+0x20>
 801715a:	4b18      	ldr	r3, [pc, #96]	; (80171bc <_Balloc+0x78>)
 801715c:	4818      	ldr	r0, [pc, #96]	; (80171c0 <_Balloc+0x7c>)
 801715e:	216b      	movs	r1, #107	; 0x6b
 8017160:	f000 fd8c 	bl	8017c7c <__assert_func>
 8017164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017168:	6006      	str	r6, [r0, #0]
 801716a:	60c6      	str	r6, [r0, #12]
 801716c:	69e6      	ldr	r6, [r4, #28]
 801716e:	68f3      	ldr	r3, [r6, #12]
 8017170:	b183      	cbz	r3, 8017194 <_Balloc+0x50>
 8017172:	69e3      	ldr	r3, [r4, #28]
 8017174:	68db      	ldr	r3, [r3, #12]
 8017176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801717a:	b9b8      	cbnz	r0, 80171ac <_Balloc+0x68>
 801717c:	2101      	movs	r1, #1
 801717e:	fa01 f605 	lsl.w	r6, r1, r5
 8017182:	1d72      	adds	r2, r6, #5
 8017184:	0092      	lsls	r2, r2, #2
 8017186:	4620      	mov	r0, r4
 8017188:	f000 fd96 	bl	8017cb8 <_calloc_r>
 801718c:	b160      	cbz	r0, 80171a8 <_Balloc+0x64>
 801718e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017192:	e00e      	b.n	80171b2 <_Balloc+0x6e>
 8017194:	2221      	movs	r2, #33	; 0x21
 8017196:	2104      	movs	r1, #4
 8017198:	4620      	mov	r0, r4
 801719a:	f000 fd8d 	bl	8017cb8 <_calloc_r>
 801719e:	69e3      	ldr	r3, [r4, #28]
 80171a0:	60f0      	str	r0, [r6, #12]
 80171a2:	68db      	ldr	r3, [r3, #12]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d1e4      	bne.n	8017172 <_Balloc+0x2e>
 80171a8:	2000      	movs	r0, #0
 80171aa:	bd70      	pop	{r4, r5, r6, pc}
 80171ac:	6802      	ldr	r2, [r0, #0]
 80171ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80171b2:	2300      	movs	r3, #0
 80171b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80171b8:	e7f7      	b.n	80171aa <_Balloc+0x66>
 80171ba:	bf00      	nop
 80171bc:	0801a195 	.word	0x0801a195
 80171c0:	0801a215 	.word	0x0801a215

080171c4 <_Bfree>:
 80171c4:	b570      	push	{r4, r5, r6, lr}
 80171c6:	69c6      	ldr	r6, [r0, #28]
 80171c8:	4605      	mov	r5, r0
 80171ca:	460c      	mov	r4, r1
 80171cc:	b976      	cbnz	r6, 80171ec <_Bfree+0x28>
 80171ce:	2010      	movs	r0, #16
 80171d0:	f7fe fa0c 	bl	80155ec <malloc>
 80171d4:	4602      	mov	r2, r0
 80171d6:	61e8      	str	r0, [r5, #28]
 80171d8:	b920      	cbnz	r0, 80171e4 <_Bfree+0x20>
 80171da:	4b09      	ldr	r3, [pc, #36]	; (8017200 <_Bfree+0x3c>)
 80171dc:	4809      	ldr	r0, [pc, #36]	; (8017204 <_Bfree+0x40>)
 80171de:	218f      	movs	r1, #143	; 0x8f
 80171e0:	f000 fd4c 	bl	8017c7c <__assert_func>
 80171e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80171e8:	6006      	str	r6, [r0, #0]
 80171ea:	60c6      	str	r6, [r0, #12]
 80171ec:	b13c      	cbz	r4, 80171fe <_Bfree+0x3a>
 80171ee:	69eb      	ldr	r3, [r5, #28]
 80171f0:	6862      	ldr	r2, [r4, #4]
 80171f2:	68db      	ldr	r3, [r3, #12]
 80171f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80171f8:	6021      	str	r1, [r4, #0]
 80171fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80171fe:	bd70      	pop	{r4, r5, r6, pc}
 8017200:	0801a195 	.word	0x0801a195
 8017204:	0801a215 	.word	0x0801a215

08017208 <__multadd>:
 8017208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801720c:	690d      	ldr	r5, [r1, #16]
 801720e:	4607      	mov	r7, r0
 8017210:	460c      	mov	r4, r1
 8017212:	461e      	mov	r6, r3
 8017214:	f101 0c14 	add.w	ip, r1, #20
 8017218:	2000      	movs	r0, #0
 801721a:	f8dc 3000 	ldr.w	r3, [ip]
 801721e:	b299      	uxth	r1, r3
 8017220:	fb02 6101 	mla	r1, r2, r1, r6
 8017224:	0c1e      	lsrs	r6, r3, #16
 8017226:	0c0b      	lsrs	r3, r1, #16
 8017228:	fb02 3306 	mla	r3, r2, r6, r3
 801722c:	b289      	uxth	r1, r1
 801722e:	3001      	adds	r0, #1
 8017230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017234:	4285      	cmp	r5, r0
 8017236:	f84c 1b04 	str.w	r1, [ip], #4
 801723a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801723e:	dcec      	bgt.n	801721a <__multadd+0x12>
 8017240:	b30e      	cbz	r6, 8017286 <__multadd+0x7e>
 8017242:	68a3      	ldr	r3, [r4, #8]
 8017244:	42ab      	cmp	r3, r5
 8017246:	dc19      	bgt.n	801727c <__multadd+0x74>
 8017248:	6861      	ldr	r1, [r4, #4]
 801724a:	4638      	mov	r0, r7
 801724c:	3101      	adds	r1, #1
 801724e:	f7ff ff79 	bl	8017144 <_Balloc>
 8017252:	4680      	mov	r8, r0
 8017254:	b928      	cbnz	r0, 8017262 <__multadd+0x5a>
 8017256:	4602      	mov	r2, r0
 8017258:	4b0c      	ldr	r3, [pc, #48]	; (801728c <__multadd+0x84>)
 801725a:	480d      	ldr	r0, [pc, #52]	; (8017290 <__multadd+0x88>)
 801725c:	21ba      	movs	r1, #186	; 0xba
 801725e:	f000 fd0d 	bl	8017c7c <__assert_func>
 8017262:	6922      	ldr	r2, [r4, #16]
 8017264:	3202      	adds	r2, #2
 8017266:	f104 010c 	add.w	r1, r4, #12
 801726a:	0092      	lsls	r2, r2, #2
 801726c:	300c      	adds	r0, #12
 801726e:	f7ff f894 	bl	801639a <memcpy>
 8017272:	4621      	mov	r1, r4
 8017274:	4638      	mov	r0, r7
 8017276:	f7ff ffa5 	bl	80171c4 <_Bfree>
 801727a:	4644      	mov	r4, r8
 801727c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017280:	3501      	adds	r5, #1
 8017282:	615e      	str	r6, [r3, #20]
 8017284:	6125      	str	r5, [r4, #16]
 8017286:	4620      	mov	r0, r4
 8017288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801728c:	0801a204 	.word	0x0801a204
 8017290:	0801a215 	.word	0x0801a215

08017294 <__hi0bits>:
 8017294:	0c03      	lsrs	r3, r0, #16
 8017296:	041b      	lsls	r3, r3, #16
 8017298:	b9d3      	cbnz	r3, 80172d0 <__hi0bits+0x3c>
 801729a:	0400      	lsls	r0, r0, #16
 801729c:	2310      	movs	r3, #16
 801729e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80172a2:	bf04      	itt	eq
 80172a4:	0200      	lsleq	r0, r0, #8
 80172a6:	3308      	addeq	r3, #8
 80172a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80172ac:	bf04      	itt	eq
 80172ae:	0100      	lsleq	r0, r0, #4
 80172b0:	3304      	addeq	r3, #4
 80172b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80172b6:	bf04      	itt	eq
 80172b8:	0080      	lsleq	r0, r0, #2
 80172ba:	3302      	addeq	r3, #2
 80172bc:	2800      	cmp	r0, #0
 80172be:	db05      	blt.n	80172cc <__hi0bits+0x38>
 80172c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80172c4:	f103 0301 	add.w	r3, r3, #1
 80172c8:	bf08      	it	eq
 80172ca:	2320      	moveq	r3, #32
 80172cc:	4618      	mov	r0, r3
 80172ce:	4770      	bx	lr
 80172d0:	2300      	movs	r3, #0
 80172d2:	e7e4      	b.n	801729e <__hi0bits+0xa>

080172d4 <__lo0bits>:
 80172d4:	6803      	ldr	r3, [r0, #0]
 80172d6:	f013 0207 	ands.w	r2, r3, #7
 80172da:	d00c      	beq.n	80172f6 <__lo0bits+0x22>
 80172dc:	07d9      	lsls	r1, r3, #31
 80172de:	d422      	bmi.n	8017326 <__lo0bits+0x52>
 80172e0:	079a      	lsls	r2, r3, #30
 80172e2:	bf49      	itett	mi
 80172e4:	085b      	lsrmi	r3, r3, #1
 80172e6:	089b      	lsrpl	r3, r3, #2
 80172e8:	6003      	strmi	r3, [r0, #0]
 80172ea:	2201      	movmi	r2, #1
 80172ec:	bf5c      	itt	pl
 80172ee:	6003      	strpl	r3, [r0, #0]
 80172f0:	2202      	movpl	r2, #2
 80172f2:	4610      	mov	r0, r2
 80172f4:	4770      	bx	lr
 80172f6:	b299      	uxth	r1, r3
 80172f8:	b909      	cbnz	r1, 80172fe <__lo0bits+0x2a>
 80172fa:	0c1b      	lsrs	r3, r3, #16
 80172fc:	2210      	movs	r2, #16
 80172fe:	b2d9      	uxtb	r1, r3
 8017300:	b909      	cbnz	r1, 8017306 <__lo0bits+0x32>
 8017302:	3208      	adds	r2, #8
 8017304:	0a1b      	lsrs	r3, r3, #8
 8017306:	0719      	lsls	r1, r3, #28
 8017308:	bf04      	itt	eq
 801730a:	091b      	lsreq	r3, r3, #4
 801730c:	3204      	addeq	r2, #4
 801730e:	0799      	lsls	r1, r3, #30
 8017310:	bf04      	itt	eq
 8017312:	089b      	lsreq	r3, r3, #2
 8017314:	3202      	addeq	r2, #2
 8017316:	07d9      	lsls	r1, r3, #31
 8017318:	d403      	bmi.n	8017322 <__lo0bits+0x4e>
 801731a:	085b      	lsrs	r3, r3, #1
 801731c:	f102 0201 	add.w	r2, r2, #1
 8017320:	d003      	beq.n	801732a <__lo0bits+0x56>
 8017322:	6003      	str	r3, [r0, #0]
 8017324:	e7e5      	b.n	80172f2 <__lo0bits+0x1e>
 8017326:	2200      	movs	r2, #0
 8017328:	e7e3      	b.n	80172f2 <__lo0bits+0x1e>
 801732a:	2220      	movs	r2, #32
 801732c:	e7e1      	b.n	80172f2 <__lo0bits+0x1e>
	...

08017330 <__i2b>:
 8017330:	b510      	push	{r4, lr}
 8017332:	460c      	mov	r4, r1
 8017334:	2101      	movs	r1, #1
 8017336:	f7ff ff05 	bl	8017144 <_Balloc>
 801733a:	4602      	mov	r2, r0
 801733c:	b928      	cbnz	r0, 801734a <__i2b+0x1a>
 801733e:	4b05      	ldr	r3, [pc, #20]	; (8017354 <__i2b+0x24>)
 8017340:	4805      	ldr	r0, [pc, #20]	; (8017358 <__i2b+0x28>)
 8017342:	f240 1145 	movw	r1, #325	; 0x145
 8017346:	f000 fc99 	bl	8017c7c <__assert_func>
 801734a:	2301      	movs	r3, #1
 801734c:	6144      	str	r4, [r0, #20]
 801734e:	6103      	str	r3, [r0, #16]
 8017350:	bd10      	pop	{r4, pc}
 8017352:	bf00      	nop
 8017354:	0801a204 	.word	0x0801a204
 8017358:	0801a215 	.word	0x0801a215

0801735c <__multiply>:
 801735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017360:	4691      	mov	r9, r2
 8017362:	690a      	ldr	r2, [r1, #16]
 8017364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017368:	429a      	cmp	r2, r3
 801736a:	bfb8      	it	lt
 801736c:	460b      	movlt	r3, r1
 801736e:	460c      	mov	r4, r1
 8017370:	bfbc      	itt	lt
 8017372:	464c      	movlt	r4, r9
 8017374:	4699      	movlt	r9, r3
 8017376:	6927      	ldr	r7, [r4, #16]
 8017378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801737c:	68a3      	ldr	r3, [r4, #8]
 801737e:	6861      	ldr	r1, [r4, #4]
 8017380:	eb07 060a 	add.w	r6, r7, sl
 8017384:	42b3      	cmp	r3, r6
 8017386:	b085      	sub	sp, #20
 8017388:	bfb8      	it	lt
 801738a:	3101      	addlt	r1, #1
 801738c:	f7ff feda 	bl	8017144 <_Balloc>
 8017390:	b930      	cbnz	r0, 80173a0 <__multiply+0x44>
 8017392:	4602      	mov	r2, r0
 8017394:	4b44      	ldr	r3, [pc, #272]	; (80174a8 <__multiply+0x14c>)
 8017396:	4845      	ldr	r0, [pc, #276]	; (80174ac <__multiply+0x150>)
 8017398:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801739c:	f000 fc6e 	bl	8017c7c <__assert_func>
 80173a0:	f100 0514 	add.w	r5, r0, #20
 80173a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80173a8:	462b      	mov	r3, r5
 80173aa:	2200      	movs	r2, #0
 80173ac:	4543      	cmp	r3, r8
 80173ae:	d321      	bcc.n	80173f4 <__multiply+0x98>
 80173b0:	f104 0314 	add.w	r3, r4, #20
 80173b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80173b8:	f109 0314 	add.w	r3, r9, #20
 80173bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80173c0:	9202      	str	r2, [sp, #8]
 80173c2:	1b3a      	subs	r2, r7, r4
 80173c4:	3a15      	subs	r2, #21
 80173c6:	f022 0203 	bic.w	r2, r2, #3
 80173ca:	3204      	adds	r2, #4
 80173cc:	f104 0115 	add.w	r1, r4, #21
 80173d0:	428f      	cmp	r7, r1
 80173d2:	bf38      	it	cc
 80173d4:	2204      	movcc	r2, #4
 80173d6:	9201      	str	r2, [sp, #4]
 80173d8:	9a02      	ldr	r2, [sp, #8]
 80173da:	9303      	str	r3, [sp, #12]
 80173dc:	429a      	cmp	r2, r3
 80173de:	d80c      	bhi.n	80173fa <__multiply+0x9e>
 80173e0:	2e00      	cmp	r6, #0
 80173e2:	dd03      	ble.n	80173ec <__multiply+0x90>
 80173e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d05b      	beq.n	80174a4 <__multiply+0x148>
 80173ec:	6106      	str	r6, [r0, #16]
 80173ee:	b005      	add	sp, #20
 80173f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f4:	f843 2b04 	str.w	r2, [r3], #4
 80173f8:	e7d8      	b.n	80173ac <__multiply+0x50>
 80173fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80173fe:	f1ba 0f00 	cmp.w	sl, #0
 8017402:	d024      	beq.n	801744e <__multiply+0xf2>
 8017404:	f104 0e14 	add.w	lr, r4, #20
 8017408:	46a9      	mov	r9, r5
 801740a:	f04f 0c00 	mov.w	ip, #0
 801740e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017412:	f8d9 1000 	ldr.w	r1, [r9]
 8017416:	fa1f fb82 	uxth.w	fp, r2
 801741a:	b289      	uxth	r1, r1
 801741c:	fb0a 110b 	mla	r1, sl, fp, r1
 8017420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017424:	f8d9 2000 	ldr.w	r2, [r9]
 8017428:	4461      	add	r1, ip
 801742a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801742e:	fb0a c20b 	mla	r2, sl, fp, ip
 8017432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017436:	b289      	uxth	r1, r1
 8017438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801743c:	4577      	cmp	r7, lr
 801743e:	f849 1b04 	str.w	r1, [r9], #4
 8017442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017446:	d8e2      	bhi.n	801740e <__multiply+0xb2>
 8017448:	9a01      	ldr	r2, [sp, #4]
 801744a:	f845 c002 	str.w	ip, [r5, r2]
 801744e:	9a03      	ldr	r2, [sp, #12]
 8017450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017454:	3304      	adds	r3, #4
 8017456:	f1b9 0f00 	cmp.w	r9, #0
 801745a:	d021      	beq.n	80174a0 <__multiply+0x144>
 801745c:	6829      	ldr	r1, [r5, #0]
 801745e:	f104 0c14 	add.w	ip, r4, #20
 8017462:	46ae      	mov	lr, r5
 8017464:	f04f 0a00 	mov.w	sl, #0
 8017468:	f8bc b000 	ldrh.w	fp, [ip]
 801746c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017470:	fb09 220b 	mla	r2, r9, fp, r2
 8017474:	4452      	add	r2, sl
 8017476:	b289      	uxth	r1, r1
 8017478:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801747c:	f84e 1b04 	str.w	r1, [lr], #4
 8017480:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017484:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017488:	f8be 1000 	ldrh.w	r1, [lr]
 801748c:	fb09 110a 	mla	r1, r9, sl, r1
 8017490:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017494:	4567      	cmp	r7, ip
 8017496:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801749a:	d8e5      	bhi.n	8017468 <__multiply+0x10c>
 801749c:	9a01      	ldr	r2, [sp, #4]
 801749e:	50a9      	str	r1, [r5, r2]
 80174a0:	3504      	adds	r5, #4
 80174a2:	e799      	b.n	80173d8 <__multiply+0x7c>
 80174a4:	3e01      	subs	r6, #1
 80174a6:	e79b      	b.n	80173e0 <__multiply+0x84>
 80174a8:	0801a204 	.word	0x0801a204
 80174ac:	0801a215 	.word	0x0801a215

080174b0 <__pow5mult>:
 80174b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174b4:	4615      	mov	r5, r2
 80174b6:	f012 0203 	ands.w	r2, r2, #3
 80174ba:	4606      	mov	r6, r0
 80174bc:	460f      	mov	r7, r1
 80174be:	d007      	beq.n	80174d0 <__pow5mult+0x20>
 80174c0:	4c25      	ldr	r4, [pc, #148]	; (8017558 <__pow5mult+0xa8>)
 80174c2:	3a01      	subs	r2, #1
 80174c4:	2300      	movs	r3, #0
 80174c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80174ca:	f7ff fe9d 	bl	8017208 <__multadd>
 80174ce:	4607      	mov	r7, r0
 80174d0:	10ad      	asrs	r5, r5, #2
 80174d2:	d03d      	beq.n	8017550 <__pow5mult+0xa0>
 80174d4:	69f4      	ldr	r4, [r6, #28]
 80174d6:	b97c      	cbnz	r4, 80174f8 <__pow5mult+0x48>
 80174d8:	2010      	movs	r0, #16
 80174da:	f7fe f887 	bl	80155ec <malloc>
 80174de:	4602      	mov	r2, r0
 80174e0:	61f0      	str	r0, [r6, #28]
 80174e2:	b928      	cbnz	r0, 80174f0 <__pow5mult+0x40>
 80174e4:	4b1d      	ldr	r3, [pc, #116]	; (801755c <__pow5mult+0xac>)
 80174e6:	481e      	ldr	r0, [pc, #120]	; (8017560 <__pow5mult+0xb0>)
 80174e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80174ec:	f000 fbc6 	bl	8017c7c <__assert_func>
 80174f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80174f4:	6004      	str	r4, [r0, #0]
 80174f6:	60c4      	str	r4, [r0, #12]
 80174f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80174fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017500:	b94c      	cbnz	r4, 8017516 <__pow5mult+0x66>
 8017502:	f240 2171 	movw	r1, #625	; 0x271
 8017506:	4630      	mov	r0, r6
 8017508:	f7ff ff12 	bl	8017330 <__i2b>
 801750c:	2300      	movs	r3, #0
 801750e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017512:	4604      	mov	r4, r0
 8017514:	6003      	str	r3, [r0, #0]
 8017516:	f04f 0900 	mov.w	r9, #0
 801751a:	07eb      	lsls	r3, r5, #31
 801751c:	d50a      	bpl.n	8017534 <__pow5mult+0x84>
 801751e:	4639      	mov	r1, r7
 8017520:	4622      	mov	r2, r4
 8017522:	4630      	mov	r0, r6
 8017524:	f7ff ff1a 	bl	801735c <__multiply>
 8017528:	4639      	mov	r1, r7
 801752a:	4680      	mov	r8, r0
 801752c:	4630      	mov	r0, r6
 801752e:	f7ff fe49 	bl	80171c4 <_Bfree>
 8017532:	4647      	mov	r7, r8
 8017534:	106d      	asrs	r5, r5, #1
 8017536:	d00b      	beq.n	8017550 <__pow5mult+0xa0>
 8017538:	6820      	ldr	r0, [r4, #0]
 801753a:	b938      	cbnz	r0, 801754c <__pow5mult+0x9c>
 801753c:	4622      	mov	r2, r4
 801753e:	4621      	mov	r1, r4
 8017540:	4630      	mov	r0, r6
 8017542:	f7ff ff0b 	bl	801735c <__multiply>
 8017546:	6020      	str	r0, [r4, #0]
 8017548:	f8c0 9000 	str.w	r9, [r0]
 801754c:	4604      	mov	r4, r0
 801754e:	e7e4      	b.n	801751a <__pow5mult+0x6a>
 8017550:	4638      	mov	r0, r7
 8017552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017556:	bf00      	nop
 8017558:	0801a360 	.word	0x0801a360
 801755c:	0801a195 	.word	0x0801a195
 8017560:	0801a215 	.word	0x0801a215

08017564 <__lshift>:
 8017564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017568:	460c      	mov	r4, r1
 801756a:	6849      	ldr	r1, [r1, #4]
 801756c:	6923      	ldr	r3, [r4, #16]
 801756e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017572:	68a3      	ldr	r3, [r4, #8]
 8017574:	4607      	mov	r7, r0
 8017576:	4691      	mov	r9, r2
 8017578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801757c:	f108 0601 	add.w	r6, r8, #1
 8017580:	42b3      	cmp	r3, r6
 8017582:	db0b      	blt.n	801759c <__lshift+0x38>
 8017584:	4638      	mov	r0, r7
 8017586:	f7ff fddd 	bl	8017144 <_Balloc>
 801758a:	4605      	mov	r5, r0
 801758c:	b948      	cbnz	r0, 80175a2 <__lshift+0x3e>
 801758e:	4602      	mov	r2, r0
 8017590:	4b28      	ldr	r3, [pc, #160]	; (8017634 <__lshift+0xd0>)
 8017592:	4829      	ldr	r0, [pc, #164]	; (8017638 <__lshift+0xd4>)
 8017594:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017598:	f000 fb70 	bl	8017c7c <__assert_func>
 801759c:	3101      	adds	r1, #1
 801759e:	005b      	lsls	r3, r3, #1
 80175a0:	e7ee      	b.n	8017580 <__lshift+0x1c>
 80175a2:	2300      	movs	r3, #0
 80175a4:	f100 0114 	add.w	r1, r0, #20
 80175a8:	f100 0210 	add.w	r2, r0, #16
 80175ac:	4618      	mov	r0, r3
 80175ae:	4553      	cmp	r3, sl
 80175b0:	db33      	blt.n	801761a <__lshift+0xb6>
 80175b2:	6920      	ldr	r0, [r4, #16]
 80175b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80175b8:	f104 0314 	add.w	r3, r4, #20
 80175bc:	f019 091f 	ands.w	r9, r9, #31
 80175c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80175c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80175c8:	d02b      	beq.n	8017622 <__lshift+0xbe>
 80175ca:	f1c9 0e20 	rsb	lr, r9, #32
 80175ce:	468a      	mov	sl, r1
 80175d0:	2200      	movs	r2, #0
 80175d2:	6818      	ldr	r0, [r3, #0]
 80175d4:	fa00 f009 	lsl.w	r0, r0, r9
 80175d8:	4310      	orrs	r0, r2
 80175da:	f84a 0b04 	str.w	r0, [sl], #4
 80175de:	f853 2b04 	ldr.w	r2, [r3], #4
 80175e2:	459c      	cmp	ip, r3
 80175e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80175e8:	d8f3      	bhi.n	80175d2 <__lshift+0x6e>
 80175ea:	ebac 0304 	sub.w	r3, ip, r4
 80175ee:	3b15      	subs	r3, #21
 80175f0:	f023 0303 	bic.w	r3, r3, #3
 80175f4:	3304      	adds	r3, #4
 80175f6:	f104 0015 	add.w	r0, r4, #21
 80175fa:	4584      	cmp	ip, r0
 80175fc:	bf38      	it	cc
 80175fe:	2304      	movcc	r3, #4
 8017600:	50ca      	str	r2, [r1, r3]
 8017602:	b10a      	cbz	r2, 8017608 <__lshift+0xa4>
 8017604:	f108 0602 	add.w	r6, r8, #2
 8017608:	3e01      	subs	r6, #1
 801760a:	4638      	mov	r0, r7
 801760c:	612e      	str	r6, [r5, #16]
 801760e:	4621      	mov	r1, r4
 8017610:	f7ff fdd8 	bl	80171c4 <_Bfree>
 8017614:	4628      	mov	r0, r5
 8017616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801761a:	f842 0f04 	str.w	r0, [r2, #4]!
 801761e:	3301      	adds	r3, #1
 8017620:	e7c5      	b.n	80175ae <__lshift+0x4a>
 8017622:	3904      	subs	r1, #4
 8017624:	f853 2b04 	ldr.w	r2, [r3], #4
 8017628:	f841 2f04 	str.w	r2, [r1, #4]!
 801762c:	459c      	cmp	ip, r3
 801762e:	d8f9      	bhi.n	8017624 <__lshift+0xc0>
 8017630:	e7ea      	b.n	8017608 <__lshift+0xa4>
 8017632:	bf00      	nop
 8017634:	0801a204 	.word	0x0801a204
 8017638:	0801a215 	.word	0x0801a215

0801763c <__mcmp>:
 801763c:	b530      	push	{r4, r5, lr}
 801763e:	6902      	ldr	r2, [r0, #16]
 8017640:	690c      	ldr	r4, [r1, #16]
 8017642:	1b12      	subs	r2, r2, r4
 8017644:	d10e      	bne.n	8017664 <__mcmp+0x28>
 8017646:	f100 0314 	add.w	r3, r0, #20
 801764a:	3114      	adds	r1, #20
 801764c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017654:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017658:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801765c:	42a5      	cmp	r5, r4
 801765e:	d003      	beq.n	8017668 <__mcmp+0x2c>
 8017660:	d305      	bcc.n	801766e <__mcmp+0x32>
 8017662:	2201      	movs	r2, #1
 8017664:	4610      	mov	r0, r2
 8017666:	bd30      	pop	{r4, r5, pc}
 8017668:	4283      	cmp	r3, r0
 801766a:	d3f3      	bcc.n	8017654 <__mcmp+0x18>
 801766c:	e7fa      	b.n	8017664 <__mcmp+0x28>
 801766e:	f04f 32ff 	mov.w	r2, #4294967295
 8017672:	e7f7      	b.n	8017664 <__mcmp+0x28>

08017674 <__mdiff>:
 8017674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017678:	460c      	mov	r4, r1
 801767a:	4606      	mov	r6, r0
 801767c:	4611      	mov	r1, r2
 801767e:	4620      	mov	r0, r4
 8017680:	4690      	mov	r8, r2
 8017682:	f7ff ffdb 	bl	801763c <__mcmp>
 8017686:	1e05      	subs	r5, r0, #0
 8017688:	d110      	bne.n	80176ac <__mdiff+0x38>
 801768a:	4629      	mov	r1, r5
 801768c:	4630      	mov	r0, r6
 801768e:	f7ff fd59 	bl	8017144 <_Balloc>
 8017692:	b930      	cbnz	r0, 80176a2 <__mdiff+0x2e>
 8017694:	4b3a      	ldr	r3, [pc, #232]	; (8017780 <__mdiff+0x10c>)
 8017696:	4602      	mov	r2, r0
 8017698:	f240 2137 	movw	r1, #567	; 0x237
 801769c:	4839      	ldr	r0, [pc, #228]	; (8017784 <__mdiff+0x110>)
 801769e:	f000 faed 	bl	8017c7c <__assert_func>
 80176a2:	2301      	movs	r3, #1
 80176a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80176a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176ac:	bfa4      	itt	ge
 80176ae:	4643      	movge	r3, r8
 80176b0:	46a0      	movge	r8, r4
 80176b2:	4630      	mov	r0, r6
 80176b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80176b8:	bfa6      	itte	ge
 80176ba:	461c      	movge	r4, r3
 80176bc:	2500      	movge	r5, #0
 80176be:	2501      	movlt	r5, #1
 80176c0:	f7ff fd40 	bl	8017144 <_Balloc>
 80176c4:	b920      	cbnz	r0, 80176d0 <__mdiff+0x5c>
 80176c6:	4b2e      	ldr	r3, [pc, #184]	; (8017780 <__mdiff+0x10c>)
 80176c8:	4602      	mov	r2, r0
 80176ca:	f240 2145 	movw	r1, #581	; 0x245
 80176ce:	e7e5      	b.n	801769c <__mdiff+0x28>
 80176d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80176d4:	6926      	ldr	r6, [r4, #16]
 80176d6:	60c5      	str	r5, [r0, #12]
 80176d8:	f104 0914 	add.w	r9, r4, #20
 80176dc:	f108 0514 	add.w	r5, r8, #20
 80176e0:	f100 0e14 	add.w	lr, r0, #20
 80176e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80176e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80176ec:	f108 0210 	add.w	r2, r8, #16
 80176f0:	46f2      	mov	sl, lr
 80176f2:	2100      	movs	r1, #0
 80176f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80176f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80176fc:	fa11 f88b 	uxtah	r8, r1, fp
 8017700:	b299      	uxth	r1, r3
 8017702:	0c1b      	lsrs	r3, r3, #16
 8017704:	eba8 0801 	sub.w	r8, r8, r1
 8017708:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801770c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017710:	fa1f f888 	uxth.w	r8, r8
 8017714:	1419      	asrs	r1, r3, #16
 8017716:	454e      	cmp	r6, r9
 8017718:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801771c:	f84a 3b04 	str.w	r3, [sl], #4
 8017720:	d8e8      	bhi.n	80176f4 <__mdiff+0x80>
 8017722:	1b33      	subs	r3, r6, r4
 8017724:	3b15      	subs	r3, #21
 8017726:	f023 0303 	bic.w	r3, r3, #3
 801772a:	3304      	adds	r3, #4
 801772c:	3415      	adds	r4, #21
 801772e:	42a6      	cmp	r6, r4
 8017730:	bf38      	it	cc
 8017732:	2304      	movcc	r3, #4
 8017734:	441d      	add	r5, r3
 8017736:	4473      	add	r3, lr
 8017738:	469e      	mov	lr, r3
 801773a:	462e      	mov	r6, r5
 801773c:	4566      	cmp	r6, ip
 801773e:	d30e      	bcc.n	801775e <__mdiff+0xea>
 8017740:	f10c 0203 	add.w	r2, ip, #3
 8017744:	1b52      	subs	r2, r2, r5
 8017746:	f022 0203 	bic.w	r2, r2, #3
 801774a:	3d03      	subs	r5, #3
 801774c:	45ac      	cmp	ip, r5
 801774e:	bf38      	it	cc
 8017750:	2200      	movcc	r2, #0
 8017752:	4413      	add	r3, r2
 8017754:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017758:	b17a      	cbz	r2, 801777a <__mdiff+0x106>
 801775a:	6107      	str	r7, [r0, #16]
 801775c:	e7a4      	b.n	80176a8 <__mdiff+0x34>
 801775e:	f856 8b04 	ldr.w	r8, [r6], #4
 8017762:	fa11 f288 	uxtah	r2, r1, r8
 8017766:	1414      	asrs	r4, r2, #16
 8017768:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801776c:	b292      	uxth	r2, r2
 801776e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017772:	f84e 2b04 	str.w	r2, [lr], #4
 8017776:	1421      	asrs	r1, r4, #16
 8017778:	e7e0      	b.n	801773c <__mdiff+0xc8>
 801777a:	3f01      	subs	r7, #1
 801777c:	e7ea      	b.n	8017754 <__mdiff+0xe0>
 801777e:	bf00      	nop
 8017780:	0801a204 	.word	0x0801a204
 8017784:	0801a215 	.word	0x0801a215

08017788 <__d2b>:
 8017788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801778c:	460f      	mov	r7, r1
 801778e:	2101      	movs	r1, #1
 8017790:	ec59 8b10 	vmov	r8, r9, d0
 8017794:	4616      	mov	r6, r2
 8017796:	f7ff fcd5 	bl	8017144 <_Balloc>
 801779a:	4604      	mov	r4, r0
 801779c:	b930      	cbnz	r0, 80177ac <__d2b+0x24>
 801779e:	4602      	mov	r2, r0
 80177a0:	4b24      	ldr	r3, [pc, #144]	; (8017834 <__d2b+0xac>)
 80177a2:	4825      	ldr	r0, [pc, #148]	; (8017838 <__d2b+0xb0>)
 80177a4:	f240 310f 	movw	r1, #783	; 0x30f
 80177a8:	f000 fa68 	bl	8017c7c <__assert_func>
 80177ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80177b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80177b4:	bb2d      	cbnz	r5, 8017802 <__d2b+0x7a>
 80177b6:	9301      	str	r3, [sp, #4]
 80177b8:	f1b8 0300 	subs.w	r3, r8, #0
 80177bc:	d026      	beq.n	801780c <__d2b+0x84>
 80177be:	4668      	mov	r0, sp
 80177c0:	9300      	str	r3, [sp, #0]
 80177c2:	f7ff fd87 	bl	80172d4 <__lo0bits>
 80177c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80177ca:	b1e8      	cbz	r0, 8017808 <__d2b+0x80>
 80177cc:	f1c0 0320 	rsb	r3, r0, #32
 80177d0:	fa02 f303 	lsl.w	r3, r2, r3
 80177d4:	430b      	orrs	r3, r1
 80177d6:	40c2      	lsrs	r2, r0
 80177d8:	6163      	str	r3, [r4, #20]
 80177da:	9201      	str	r2, [sp, #4]
 80177dc:	9b01      	ldr	r3, [sp, #4]
 80177de:	61a3      	str	r3, [r4, #24]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	bf14      	ite	ne
 80177e4:	2202      	movne	r2, #2
 80177e6:	2201      	moveq	r2, #1
 80177e8:	6122      	str	r2, [r4, #16]
 80177ea:	b1bd      	cbz	r5, 801781c <__d2b+0x94>
 80177ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80177f0:	4405      	add	r5, r0
 80177f2:	603d      	str	r5, [r7, #0]
 80177f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80177f8:	6030      	str	r0, [r6, #0]
 80177fa:	4620      	mov	r0, r4
 80177fc:	b003      	add	sp, #12
 80177fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017806:	e7d6      	b.n	80177b6 <__d2b+0x2e>
 8017808:	6161      	str	r1, [r4, #20]
 801780a:	e7e7      	b.n	80177dc <__d2b+0x54>
 801780c:	a801      	add	r0, sp, #4
 801780e:	f7ff fd61 	bl	80172d4 <__lo0bits>
 8017812:	9b01      	ldr	r3, [sp, #4]
 8017814:	6163      	str	r3, [r4, #20]
 8017816:	3020      	adds	r0, #32
 8017818:	2201      	movs	r2, #1
 801781a:	e7e5      	b.n	80177e8 <__d2b+0x60>
 801781c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017820:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017824:	6038      	str	r0, [r7, #0]
 8017826:	6918      	ldr	r0, [r3, #16]
 8017828:	f7ff fd34 	bl	8017294 <__hi0bits>
 801782c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017830:	e7e2      	b.n	80177f8 <__d2b+0x70>
 8017832:	bf00      	nop
 8017834:	0801a204 	.word	0x0801a204
 8017838:	0801a215 	.word	0x0801a215

0801783c <__ssputs_r>:
 801783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017840:	688e      	ldr	r6, [r1, #8]
 8017842:	461f      	mov	r7, r3
 8017844:	42be      	cmp	r6, r7
 8017846:	680b      	ldr	r3, [r1, #0]
 8017848:	4682      	mov	sl, r0
 801784a:	460c      	mov	r4, r1
 801784c:	4690      	mov	r8, r2
 801784e:	d82c      	bhi.n	80178aa <__ssputs_r+0x6e>
 8017850:	898a      	ldrh	r2, [r1, #12]
 8017852:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017856:	d026      	beq.n	80178a6 <__ssputs_r+0x6a>
 8017858:	6965      	ldr	r5, [r4, #20]
 801785a:	6909      	ldr	r1, [r1, #16]
 801785c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017860:	eba3 0901 	sub.w	r9, r3, r1
 8017864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017868:	1c7b      	adds	r3, r7, #1
 801786a:	444b      	add	r3, r9
 801786c:	106d      	asrs	r5, r5, #1
 801786e:	429d      	cmp	r5, r3
 8017870:	bf38      	it	cc
 8017872:	461d      	movcc	r5, r3
 8017874:	0553      	lsls	r3, r2, #21
 8017876:	d527      	bpl.n	80178c8 <__ssputs_r+0x8c>
 8017878:	4629      	mov	r1, r5
 801787a:	f7fd fee7 	bl	801564c <_malloc_r>
 801787e:	4606      	mov	r6, r0
 8017880:	b360      	cbz	r0, 80178dc <__ssputs_r+0xa0>
 8017882:	6921      	ldr	r1, [r4, #16]
 8017884:	464a      	mov	r2, r9
 8017886:	f7fe fd88 	bl	801639a <memcpy>
 801788a:	89a3      	ldrh	r3, [r4, #12]
 801788c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017894:	81a3      	strh	r3, [r4, #12]
 8017896:	6126      	str	r6, [r4, #16]
 8017898:	6165      	str	r5, [r4, #20]
 801789a:	444e      	add	r6, r9
 801789c:	eba5 0509 	sub.w	r5, r5, r9
 80178a0:	6026      	str	r6, [r4, #0]
 80178a2:	60a5      	str	r5, [r4, #8]
 80178a4:	463e      	mov	r6, r7
 80178a6:	42be      	cmp	r6, r7
 80178a8:	d900      	bls.n	80178ac <__ssputs_r+0x70>
 80178aa:	463e      	mov	r6, r7
 80178ac:	6820      	ldr	r0, [r4, #0]
 80178ae:	4632      	mov	r2, r6
 80178b0:	4641      	mov	r1, r8
 80178b2:	f000 f9c9 	bl	8017c48 <memmove>
 80178b6:	68a3      	ldr	r3, [r4, #8]
 80178b8:	1b9b      	subs	r3, r3, r6
 80178ba:	60a3      	str	r3, [r4, #8]
 80178bc:	6823      	ldr	r3, [r4, #0]
 80178be:	4433      	add	r3, r6
 80178c0:	6023      	str	r3, [r4, #0]
 80178c2:	2000      	movs	r0, #0
 80178c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178c8:	462a      	mov	r2, r5
 80178ca:	f000 fa1d 	bl	8017d08 <_realloc_r>
 80178ce:	4606      	mov	r6, r0
 80178d0:	2800      	cmp	r0, #0
 80178d2:	d1e0      	bne.n	8017896 <__ssputs_r+0x5a>
 80178d4:	6921      	ldr	r1, [r4, #16]
 80178d6:	4650      	mov	r0, sl
 80178d8:	f7ff fbe8 	bl	80170ac <_free_r>
 80178dc:	230c      	movs	r3, #12
 80178de:	f8ca 3000 	str.w	r3, [sl]
 80178e2:	89a3      	ldrh	r3, [r4, #12]
 80178e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178e8:	81a3      	strh	r3, [r4, #12]
 80178ea:	f04f 30ff 	mov.w	r0, #4294967295
 80178ee:	e7e9      	b.n	80178c4 <__ssputs_r+0x88>

080178f0 <_svfiprintf_r>:
 80178f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f4:	4698      	mov	r8, r3
 80178f6:	898b      	ldrh	r3, [r1, #12]
 80178f8:	061b      	lsls	r3, r3, #24
 80178fa:	b09d      	sub	sp, #116	; 0x74
 80178fc:	4607      	mov	r7, r0
 80178fe:	460d      	mov	r5, r1
 8017900:	4614      	mov	r4, r2
 8017902:	d50e      	bpl.n	8017922 <_svfiprintf_r+0x32>
 8017904:	690b      	ldr	r3, [r1, #16]
 8017906:	b963      	cbnz	r3, 8017922 <_svfiprintf_r+0x32>
 8017908:	2140      	movs	r1, #64	; 0x40
 801790a:	f7fd fe9f 	bl	801564c <_malloc_r>
 801790e:	6028      	str	r0, [r5, #0]
 8017910:	6128      	str	r0, [r5, #16]
 8017912:	b920      	cbnz	r0, 801791e <_svfiprintf_r+0x2e>
 8017914:	230c      	movs	r3, #12
 8017916:	603b      	str	r3, [r7, #0]
 8017918:	f04f 30ff 	mov.w	r0, #4294967295
 801791c:	e0d0      	b.n	8017ac0 <_svfiprintf_r+0x1d0>
 801791e:	2340      	movs	r3, #64	; 0x40
 8017920:	616b      	str	r3, [r5, #20]
 8017922:	2300      	movs	r3, #0
 8017924:	9309      	str	r3, [sp, #36]	; 0x24
 8017926:	2320      	movs	r3, #32
 8017928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801792c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017930:	2330      	movs	r3, #48	; 0x30
 8017932:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017ad8 <_svfiprintf_r+0x1e8>
 8017936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801793a:	f04f 0901 	mov.w	r9, #1
 801793e:	4623      	mov	r3, r4
 8017940:	469a      	mov	sl, r3
 8017942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017946:	b10a      	cbz	r2, 801794c <_svfiprintf_r+0x5c>
 8017948:	2a25      	cmp	r2, #37	; 0x25
 801794a:	d1f9      	bne.n	8017940 <_svfiprintf_r+0x50>
 801794c:	ebba 0b04 	subs.w	fp, sl, r4
 8017950:	d00b      	beq.n	801796a <_svfiprintf_r+0x7a>
 8017952:	465b      	mov	r3, fp
 8017954:	4622      	mov	r2, r4
 8017956:	4629      	mov	r1, r5
 8017958:	4638      	mov	r0, r7
 801795a:	f7ff ff6f 	bl	801783c <__ssputs_r>
 801795e:	3001      	adds	r0, #1
 8017960:	f000 80a9 	beq.w	8017ab6 <_svfiprintf_r+0x1c6>
 8017964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017966:	445a      	add	r2, fp
 8017968:	9209      	str	r2, [sp, #36]	; 0x24
 801796a:	f89a 3000 	ldrb.w	r3, [sl]
 801796e:	2b00      	cmp	r3, #0
 8017970:	f000 80a1 	beq.w	8017ab6 <_svfiprintf_r+0x1c6>
 8017974:	2300      	movs	r3, #0
 8017976:	f04f 32ff 	mov.w	r2, #4294967295
 801797a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801797e:	f10a 0a01 	add.w	sl, sl, #1
 8017982:	9304      	str	r3, [sp, #16]
 8017984:	9307      	str	r3, [sp, #28]
 8017986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801798a:	931a      	str	r3, [sp, #104]	; 0x68
 801798c:	4654      	mov	r4, sl
 801798e:	2205      	movs	r2, #5
 8017990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017994:	4850      	ldr	r0, [pc, #320]	; (8017ad8 <_svfiprintf_r+0x1e8>)
 8017996:	f7e8 fc33 	bl	8000200 <memchr>
 801799a:	9a04      	ldr	r2, [sp, #16]
 801799c:	b9d8      	cbnz	r0, 80179d6 <_svfiprintf_r+0xe6>
 801799e:	06d0      	lsls	r0, r2, #27
 80179a0:	bf44      	itt	mi
 80179a2:	2320      	movmi	r3, #32
 80179a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179a8:	0711      	lsls	r1, r2, #28
 80179aa:	bf44      	itt	mi
 80179ac:	232b      	movmi	r3, #43	; 0x2b
 80179ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179b2:	f89a 3000 	ldrb.w	r3, [sl]
 80179b6:	2b2a      	cmp	r3, #42	; 0x2a
 80179b8:	d015      	beq.n	80179e6 <_svfiprintf_r+0xf6>
 80179ba:	9a07      	ldr	r2, [sp, #28]
 80179bc:	4654      	mov	r4, sl
 80179be:	2000      	movs	r0, #0
 80179c0:	f04f 0c0a 	mov.w	ip, #10
 80179c4:	4621      	mov	r1, r4
 80179c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179ca:	3b30      	subs	r3, #48	; 0x30
 80179cc:	2b09      	cmp	r3, #9
 80179ce:	d94d      	bls.n	8017a6c <_svfiprintf_r+0x17c>
 80179d0:	b1b0      	cbz	r0, 8017a00 <_svfiprintf_r+0x110>
 80179d2:	9207      	str	r2, [sp, #28]
 80179d4:	e014      	b.n	8017a00 <_svfiprintf_r+0x110>
 80179d6:	eba0 0308 	sub.w	r3, r0, r8
 80179da:	fa09 f303 	lsl.w	r3, r9, r3
 80179de:	4313      	orrs	r3, r2
 80179e0:	9304      	str	r3, [sp, #16]
 80179e2:	46a2      	mov	sl, r4
 80179e4:	e7d2      	b.n	801798c <_svfiprintf_r+0x9c>
 80179e6:	9b03      	ldr	r3, [sp, #12]
 80179e8:	1d19      	adds	r1, r3, #4
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	9103      	str	r1, [sp, #12]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	bfbb      	ittet	lt
 80179f2:	425b      	neglt	r3, r3
 80179f4:	f042 0202 	orrlt.w	r2, r2, #2
 80179f8:	9307      	strge	r3, [sp, #28]
 80179fa:	9307      	strlt	r3, [sp, #28]
 80179fc:	bfb8      	it	lt
 80179fe:	9204      	strlt	r2, [sp, #16]
 8017a00:	7823      	ldrb	r3, [r4, #0]
 8017a02:	2b2e      	cmp	r3, #46	; 0x2e
 8017a04:	d10c      	bne.n	8017a20 <_svfiprintf_r+0x130>
 8017a06:	7863      	ldrb	r3, [r4, #1]
 8017a08:	2b2a      	cmp	r3, #42	; 0x2a
 8017a0a:	d134      	bne.n	8017a76 <_svfiprintf_r+0x186>
 8017a0c:	9b03      	ldr	r3, [sp, #12]
 8017a0e:	1d1a      	adds	r2, r3, #4
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	9203      	str	r2, [sp, #12]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	bfb8      	it	lt
 8017a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a1c:	3402      	adds	r4, #2
 8017a1e:	9305      	str	r3, [sp, #20]
 8017a20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017ae8 <_svfiprintf_r+0x1f8>
 8017a24:	7821      	ldrb	r1, [r4, #0]
 8017a26:	2203      	movs	r2, #3
 8017a28:	4650      	mov	r0, sl
 8017a2a:	f7e8 fbe9 	bl	8000200 <memchr>
 8017a2e:	b138      	cbz	r0, 8017a40 <_svfiprintf_r+0x150>
 8017a30:	9b04      	ldr	r3, [sp, #16]
 8017a32:	eba0 000a 	sub.w	r0, r0, sl
 8017a36:	2240      	movs	r2, #64	; 0x40
 8017a38:	4082      	lsls	r2, r0
 8017a3a:	4313      	orrs	r3, r2
 8017a3c:	3401      	adds	r4, #1
 8017a3e:	9304      	str	r3, [sp, #16]
 8017a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a44:	4825      	ldr	r0, [pc, #148]	; (8017adc <_svfiprintf_r+0x1ec>)
 8017a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a4a:	2206      	movs	r2, #6
 8017a4c:	f7e8 fbd8 	bl	8000200 <memchr>
 8017a50:	2800      	cmp	r0, #0
 8017a52:	d038      	beq.n	8017ac6 <_svfiprintf_r+0x1d6>
 8017a54:	4b22      	ldr	r3, [pc, #136]	; (8017ae0 <_svfiprintf_r+0x1f0>)
 8017a56:	bb1b      	cbnz	r3, 8017aa0 <_svfiprintf_r+0x1b0>
 8017a58:	9b03      	ldr	r3, [sp, #12]
 8017a5a:	3307      	adds	r3, #7
 8017a5c:	f023 0307 	bic.w	r3, r3, #7
 8017a60:	3308      	adds	r3, #8
 8017a62:	9303      	str	r3, [sp, #12]
 8017a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a66:	4433      	add	r3, r6
 8017a68:	9309      	str	r3, [sp, #36]	; 0x24
 8017a6a:	e768      	b.n	801793e <_svfiprintf_r+0x4e>
 8017a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a70:	460c      	mov	r4, r1
 8017a72:	2001      	movs	r0, #1
 8017a74:	e7a6      	b.n	80179c4 <_svfiprintf_r+0xd4>
 8017a76:	2300      	movs	r3, #0
 8017a78:	3401      	adds	r4, #1
 8017a7a:	9305      	str	r3, [sp, #20]
 8017a7c:	4619      	mov	r1, r3
 8017a7e:	f04f 0c0a 	mov.w	ip, #10
 8017a82:	4620      	mov	r0, r4
 8017a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a88:	3a30      	subs	r2, #48	; 0x30
 8017a8a:	2a09      	cmp	r2, #9
 8017a8c:	d903      	bls.n	8017a96 <_svfiprintf_r+0x1a6>
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d0c6      	beq.n	8017a20 <_svfiprintf_r+0x130>
 8017a92:	9105      	str	r1, [sp, #20]
 8017a94:	e7c4      	b.n	8017a20 <_svfiprintf_r+0x130>
 8017a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a9a:	4604      	mov	r4, r0
 8017a9c:	2301      	movs	r3, #1
 8017a9e:	e7f0      	b.n	8017a82 <_svfiprintf_r+0x192>
 8017aa0:	ab03      	add	r3, sp, #12
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	462a      	mov	r2, r5
 8017aa6:	4b0f      	ldr	r3, [pc, #60]	; (8017ae4 <_svfiprintf_r+0x1f4>)
 8017aa8:	a904      	add	r1, sp, #16
 8017aaa:	4638      	mov	r0, r7
 8017aac:	f7fd fefa 	bl	80158a4 <_printf_float>
 8017ab0:	1c42      	adds	r2, r0, #1
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	d1d6      	bne.n	8017a64 <_svfiprintf_r+0x174>
 8017ab6:	89ab      	ldrh	r3, [r5, #12]
 8017ab8:	065b      	lsls	r3, r3, #25
 8017aba:	f53f af2d 	bmi.w	8017918 <_svfiprintf_r+0x28>
 8017abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ac0:	b01d      	add	sp, #116	; 0x74
 8017ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ac6:	ab03      	add	r3, sp, #12
 8017ac8:	9300      	str	r3, [sp, #0]
 8017aca:	462a      	mov	r2, r5
 8017acc:	4b05      	ldr	r3, [pc, #20]	; (8017ae4 <_svfiprintf_r+0x1f4>)
 8017ace:	a904      	add	r1, sp, #16
 8017ad0:	4638      	mov	r0, r7
 8017ad2:	f7fe f98b 	bl	8015dec <_printf_i>
 8017ad6:	e7eb      	b.n	8017ab0 <_svfiprintf_r+0x1c0>
 8017ad8:	0801a36c 	.word	0x0801a36c
 8017adc:	0801a376 	.word	0x0801a376
 8017ae0:	080158a5 	.word	0x080158a5
 8017ae4:	0801783d 	.word	0x0801783d
 8017ae8:	0801a372 	.word	0x0801a372

08017aec <__sflush_r>:
 8017aec:	898a      	ldrh	r2, [r1, #12]
 8017aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017af2:	4605      	mov	r5, r0
 8017af4:	0710      	lsls	r0, r2, #28
 8017af6:	460c      	mov	r4, r1
 8017af8:	d458      	bmi.n	8017bac <__sflush_r+0xc0>
 8017afa:	684b      	ldr	r3, [r1, #4]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	dc05      	bgt.n	8017b0c <__sflush_r+0x20>
 8017b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	dc02      	bgt.n	8017b0c <__sflush_r+0x20>
 8017b06:	2000      	movs	r0, #0
 8017b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b0e:	2e00      	cmp	r6, #0
 8017b10:	d0f9      	beq.n	8017b06 <__sflush_r+0x1a>
 8017b12:	2300      	movs	r3, #0
 8017b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b18:	682f      	ldr	r7, [r5, #0]
 8017b1a:	6a21      	ldr	r1, [r4, #32]
 8017b1c:	602b      	str	r3, [r5, #0]
 8017b1e:	d032      	beq.n	8017b86 <__sflush_r+0x9a>
 8017b20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b22:	89a3      	ldrh	r3, [r4, #12]
 8017b24:	075a      	lsls	r2, r3, #29
 8017b26:	d505      	bpl.n	8017b34 <__sflush_r+0x48>
 8017b28:	6863      	ldr	r3, [r4, #4]
 8017b2a:	1ac0      	subs	r0, r0, r3
 8017b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b2e:	b10b      	cbz	r3, 8017b34 <__sflush_r+0x48>
 8017b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b32:	1ac0      	subs	r0, r0, r3
 8017b34:	2300      	movs	r3, #0
 8017b36:	4602      	mov	r2, r0
 8017b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b3a:	6a21      	ldr	r1, [r4, #32]
 8017b3c:	4628      	mov	r0, r5
 8017b3e:	47b0      	blx	r6
 8017b40:	1c43      	adds	r3, r0, #1
 8017b42:	89a3      	ldrh	r3, [r4, #12]
 8017b44:	d106      	bne.n	8017b54 <__sflush_r+0x68>
 8017b46:	6829      	ldr	r1, [r5, #0]
 8017b48:	291d      	cmp	r1, #29
 8017b4a:	d82b      	bhi.n	8017ba4 <__sflush_r+0xb8>
 8017b4c:	4a29      	ldr	r2, [pc, #164]	; (8017bf4 <__sflush_r+0x108>)
 8017b4e:	410a      	asrs	r2, r1
 8017b50:	07d6      	lsls	r6, r2, #31
 8017b52:	d427      	bmi.n	8017ba4 <__sflush_r+0xb8>
 8017b54:	2200      	movs	r2, #0
 8017b56:	6062      	str	r2, [r4, #4]
 8017b58:	04d9      	lsls	r1, r3, #19
 8017b5a:	6922      	ldr	r2, [r4, #16]
 8017b5c:	6022      	str	r2, [r4, #0]
 8017b5e:	d504      	bpl.n	8017b6a <__sflush_r+0x7e>
 8017b60:	1c42      	adds	r2, r0, #1
 8017b62:	d101      	bne.n	8017b68 <__sflush_r+0x7c>
 8017b64:	682b      	ldr	r3, [r5, #0]
 8017b66:	b903      	cbnz	r3, 8017b6a <__sflush_r+0x7e>
 8017b68:	6560      	str	r0, [r4, #84]	; 0x54
 8017b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b6c:	602f      	str	r7, [r5, #0]
 8017b6e:	2900      	cmp	r1, #0
 8017b70:	d0c9      	beq.n	8017b06 <__sflush_r+0x1a>
 8017b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b76:	4299      	cmp	r1, r3
 8017b78:	d002      	beq.n	8017b80 <__sflush_r+0x94>
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	f7ff fa96 	bl	80170ac <_free_r>
 8017b80:	2000      	movs	r0, #0
 8017b82:	6360      	str	r0, [r4, #52]	; 0x34
 8017b84:	e7c0      	b.n	8017b08 <__sflush_r+0x1c>
 8017b86:	2301      	movs	r3, #1
 8017b88:	4628      	mov	r0, r5
 8017b8a:	47b0      	blx	r6
 8017b8c:	1c41      	adds	r1, r0, #1
 8017b8e:	d1c8      	bne.n	8017b22 <__sflush_r+0x36>
 8017b90:	682b      	ldr	r3, [r5, #0]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d0c5      	beq.n	8017b22 <__sflush_r+0x36>
 8017b96:	2b1d      	cmp	r3, #29
 8017b98:	d001      	beq.n	8017b9e <__sflush_r+0xb2>
 8017b9a:	2b16      	cmp	r3, #22
 8017b9c:	d101      	bne.n	8017ba2 <__sflush_r+0xb6>
 8017b9e:	602f      	str	r7, [r5, #0]
 8017ba0:	e7b1      	b.n	8017b06 <__sflush_r+0x1a>
 8017ba2:	89a3      	ldrh	r3, [r4, #12]
 8017ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ba8:	81a3      	strh	r3, [r4, #12]
 8017baa:	e7ad      	b.n	8017b08 <__sflush_r+0x1c>
 8017bac:	690f      	ldr	r7, [r1, #16]
 8017bae:	2f00      	cmp	r7, #0
 8017bb0:	d0a9      	beq.n	8017b06 <__sflush_r+0x1a>
 8017bb2:	0793      	lsls	r3, r2, #30
 8017bb4:	680e      	ldr	r6, [r1, #0]
 8017bb6:	bf08      	it	eq
 8017bb8:	694b      	ldreq	r3, [r1, #20]
 8017bba:	600f      	str	r7, [r1, #0]
 8017bbc:	bf18      	it	ne
 8017bbe:	2300      	movne	r3, #0
 8017bc0:	eba6 0807 	sub.w	r8, r6, r7
 8017bc4:	608b      	str	r3, [r1, #8]
 8017bc6:	f1b8 0f00 	cmp.w	r8, #0
 8017bca:	dd9c      	ble.n	8017b06 <__sflush_r+0x1a>
 8017bcc:	6a21      	ldr	r1, [r4, #32]
 8017bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bd0:	4643      	mov	r3, r8
 8017bd2:	463a      	mov	r2, r7
 8017bd4:	4628      	mov	r0, r5
 8017bd6:	47b0      	blx	r6
 8017bd8:	2800      	cmp	r0, #0
 8017bda:	dc06      	bgt.n	8017bea <__sflush_r+0xfe>
 8017bdc:	89a3      	ldrh	r3, [r4, #12]
 8017bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017be2:	81a3      	strh	r3, [r4, #12]
 8017be4:	f04f 30ff 	mov.w	r0, #4294967295
 8017be8:	e78e      	b.n	8017b08 <__sflush_r+0x1c>
 8017bea:	4407      	add	r7, r0
 8017bec:	eba8 0800 	sub.w	r8, r8, r0
 8017bf0:	e7e9      	b.n	8017bc6 <__sflush_r+0xda>
 8017bf2:	bf00      	nop
 8017bf4:	dfbffffe 	.word	0xdfbffffe

08017bf8 <_fflush_r>:
 8017bf8:	b538      	push	{r3, r4, r5, lr}
 8017bfa:	690b      	ldr	r3, [r1, #16]
 8017bfc:	4605      	mov	r5, r0
 8017bfe:	460c      	mov	r4, r1
 8017c00:	b913      	cbnz	r3, 8017c08 <_fflush_r+0x10>
 8017c02:	2500      	movs	r5, #0
 8017c04:	4628      	mov	r0, r5
 8017c06:	bd38      	pop	{r3, r4, r5, pc}
 8017c08:	b118      	cbz	r0, 8017c12 <_fflush_r+0x1a>
 8017c0a:	6a03      	ldr	r3, [r0, #32]
 8017c0c:	b90b      	cbnz	r3, 8017c12 <_fflush_r+0x1a>
 8017c0e:	f7fe fa9b 	bl	8016148 <__sinit>
 8017c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d0f3      	beq.n	8017c02 <_fflush_r+0xa>
 8017c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c1c:	07d0      	lsls	r0, r2, #31
 8017c1e:	d404      	bmi.n	8017c2a <_fflush_r+0x32>
 8017c20:	0599      	lsls	r1, r3, #22
 8017c22:	d402      	bmi.n	8017c2a <_fflush_r+0x32>
 8017c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c26:	f7fe fbb6 	bl	8016396 <__retarget_lock_acquire_recursive>
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	4621      	mov	r1, r4
 8017c2e:	f7ff ff5d 	bl	8017aec <__sflush_r>
 8017c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c34:	07da      	lsls	r2, r3, #31
 8017c36:	4605      	mov	r5, r0
 8017c38:	d4e4      	bmi.n	8017c04 <_fflush_r+0xc>
 8017c3a:	89a3      	ldrh	r3, [r4, #12]
 8017c3c:	059b      	lsls	r3, r3, #22
 8017c3e:	d4e1      	bmi.n	8017c04 <_fflush_r+0xc>
 8017c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c42:	f7fe fba9 	bl	8016398 <__retarget_lock_release_recursive>
 8017c46:	e7dd      	b.n	8017c04 <_fflush_r+0xc>

08017c48 <memmove>:
 8017c48:	4288      	cmp	r0, r1
 8017c4a:	b510      	push	{r4, lr}
 8017c4c:	eb01 0402 	add.w	r4, r1, r2
 8017c50:	d902      	bls.n	8017c58 <memmove+0x10>
 8017c52:	4284      	cmp	r4, r0
 8017c54:	4623      	mov	r3, r4
 8017c56:	d807      	bhi.n	8017c68 <memmove+0x20>
 8017c58:	1e43      	subs	r3, r0, #1
 8017c5a:	42a1      	cmp	r1, r4
 8017c5c:	d008      	beq.n	8017c70 <memmove+0x28>
 8017c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017c66:	e7f8      	b.n	8017c5a <memmove+0x12>
 8017c68:	4402      	add	r2, r0
 8017c6a:	4601      	mov	r1, r0
 8017c6c:	428a      	cmp	r2, r1
 8017c6e:	d100      	bne.n	8017c72 <memmove+0x2a>
 8017c70:	bd10      	pop	{r4, pc}
 8017c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c7a:	e7f7      	b.n	8017c6c <memmove+0x24>

08017c7c <__assert_func>:
 8017c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c7e:	4614      	mov	r4, r2
 8017c80:	461a      	mov	r2, r3
 8017c82:	4b09      	ldr	r3, [pc, #36]	; (8017ca8 <__assert_func+0x2c>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	4605      	mov	r5, r0
 8017c88:	68d8      	ldr	r0, [r3, #12]
 8017c8a:	b14c      	cbz	r4, 8017ca0 <__assert_func+0x24>
 8017c8c:	4b07      	ldr	r3, [pc, #28]	; (8017cac <__assert_func+0x30>)
 8017c8e:	9100      	str	r1, [sp, #0]
 8017c90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c94:	4906      	ldr	r1, [pc, #24]	; (8017cb0 <__assert_func+0x34>)
 8017c96:	462b      	mov	r3, r5
 8017c98:	f000 f872 	bl	8017d80 <fiprintf>
 8017c9c:	f000 f882 	bl	8017da4 <abort>
 8017ca0:	4b04      	ldr	r3, [pc, #16]	; (8017cb4 <__assert_func+0x38>)
 8017ca2:	461c      	mov	r4, r3
 8017ca4:	e7f3      	b.n	8017c8e <__assert_func+0x12>
 8017ca6:	bf00      	nop
 8017ca8:	200000f4 	.word	0x200000f4
 8017cac:	0801a387 	.word	0x0801a387
 8017cb0:	0801a394 	.word	0x0801a394
 8017cb4:	0801a3c2 	.word	0x0801a3c2

08017cb8 <_calloc_r>:
 8017cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017cba:	fba1 2402 	umull	r2, r4, r1, r2
 8017cbe:	b94c      	cbnz	r4, 8017cd4 <_calloc_r+0x1c>
 8017cc0:	4611      	mov	r1, r2
 8017cc2:	9201      	str	r2, [sp, #4]
 8017cc4:	f7fd fcc2 	bl	801564c <_malloc_r>
 8017cc8:	9a01      	ldr	r2, [sp, #4]
 8017cca:	4605      	mov	r5, r0
 8017ccc:	b930      	cbnz	r0, 8017cdc <_calloc_r+0x24>
 8017cce:	4628      	mov	r0, r5
 8017cd0:	b003      	add	sp, #12
 8017cd2:	bd30      	pop	{r4, r5, pc}
 8017cd4:	220c      	movs	r2, #12
 8017cd6:	6002      	str	r2, [r0, #0]
 8017cd8:	2500      	movs	r5, #0
 8017cda:	e7f8      	b.n	8017cce <_calloc_r+0x16>
 8017cdc:	4621      	mov	r1, r4
 8017cde:	f7fe facc 	bl	801627a <memset>
 8017ce2:	e7f4      	b.n	8017cce <_calloc_r+0x16>

08017ce4 <__ascii_mbtowc>:
 8017ce4:	b082      	sub	sp, #8
 8017ce6:	b901      	cbnz	r1, 8017cea <__ascii_mbtowc+0x6>
 8017ce8:	a901      	add	r1, sp, #4
 8017cea:	b142      	cbz	r2, 8017cfe <__ascii_mbtowc+0x1a>
 8017cec:	b14b      	cbz	r3, 8017d02 <__ascii_mbtowc+0x1e>
 8017cee:	7813      	ldrb	r3, [r2, #0]
 8017cf0:	600b      	str	r3, [r1, #0]
 8017cf2:	7812      	ldrb	r2, [r2, #0]
 8017cf4:	1e10      	subs	r0, r2, #0
 8017cf6:	bf18      	it	ne
 8017cf8:	2001      	movne	r0, #1
 8017cfa:	b002      	add	sp, #8
 8017cfc:	4770      	bx	lr
 8017cfe:	4610      	mov	r0, r2
 8017d00:	e7fb      	b.n	8017cfa <__ascii_mbtowc+0x16>
 8017d02:	f06f 0001 	mvn.w	r0, #1
 8017d06:	e7f8      	b.n	8017cfa <__ascii_mbtowc+0x16>

08017d08 <_realloc_r>:
 8017d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d0c:	4680      	mov	r8, r0
 8017d0e:	4614      	mov	r4, r2
 8017d10:	460e      	mov	r6, r1
 8017d12:	b921      	cbnz	r1, 8017d1e <_realloc_r+0x16>
 8017d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d18:	4611      	mov	r1, r2
 8017d1a:	f7fd bc97 	b.w	801564c <_malloc_r>
 8017d1e:	b92a      	cbnz	r2, 8017d2c <_realloc_r+0x24>
 8017d20:	f7ff f9c4 	bl	80170ac <_free_r>
 8017d24:	4625      	mov	r5, r4
 8017d26:	4628      	mov	r0, r5
 8017d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d2c:	f000 f841 	bl	8017db2 <_malloc_usable_size_r>
 8017d30:	4284      	cmp	r4, r0
 8017d32:	4607      	mov	r7, r0
 8017d34:	d802      	bhi.n	8017d3c <_realloc_r+0x34>
 8017d36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d3a:	d812      	bhi.n	8017d62 <_realloc_r+0x5a>
 8017d3c:	4621      	mov	r1, r4
 8017d3e:	4640      	mov	r0, r8
 8017d40:	f7fd fc84 	bl	801564c <_malloc_r>
 8017d44:	4605      	mov	r5, r0
 8017d46:	2800      	cmp	r0, #0
 8017d48:	d0ed      	beq.n	8017d26 <_realloc_r+0x1e>
 8017d4a:	42bc      	cmp	r4, r7
 8017d4c:	4622      	mov	r2, r4
 8017d4e:	4631      	mov	r1, r6
 8017d50:	bf28      	it	cs
 8017d52:	463a      	movcs	r2, r7
 8017d54:	f7fe fb21 	bl	801639a <memcpy>
 8017d58:	4631      	mov	r1, r6
 8017d5a:	4640      	mov	r0, r8
 8017d5c:	f7ff f9a6 	bl	80170ac <_free_r>
 8017d60:	e7e1      	b.n	8017d26 <_realloc_r+0x1e>
 8017d62:	4635      	mov	r5, r6
 8017d64:	e7df      	b.n	8017d26 <_realloc_r+0x1e>

08017d66 <__ascii_wctomb>:
 8017d66:	b149      	cbz	r1, 8017d7c <__ascii_wctomb+0x16>
 8017d68:	2aff      	cmp	r2, #255	; 0xff
 8017d6a:	bf85      	ittet	hi
 8017d6c:	238a      	movhi	r3, #138	; 0x8a
 8017d6e:	6003      	strhi	r3, [r0, #0]
 8017d70:	700a      	strbls	r2, [r1, #0]
 8017d72:	f04f 30ff 	movhi.w	r0, #4294967295
 8017d76:	bf98      	it	ls
 8017d78:	2001      	movls	r0, #1
 8017d7a:	4770      	bx	lr
 8017d7c:	4608      	mov	r0, r1
 8017d7e:	4770      	bx	lr

08017d80 <fiprintf>:
 8017d80:	b40e      	push	{r1, r2, r3}
 8017d82:	b503      	push	{r0, r1, lr}
 8017d84:	4601      	mov	r1, r0
 8017d86:	ab03      	add	r3, sp, #12
 8017d88:	4805      	ldr	r0, [pc, #20]	; (8017da0 <fiprintf+0x20>)
 8017d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d8e:	6800      	ldr	r0, [r0, #0]
 8017d90:	9301      	str	r3, [sp, #4]
 8017d92:	f000 f83f 	bl	8017e14 <_vfiprintf_r>
 8017d96:	b002      	add	sp, #8
 8017d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d9c:	b003      	add	sp, #12
 8017d9e:	4770      	bx	lr
 8017da0:	200000f4 	.word	0x200000f4

08017da4 <abort>:
 8017da4:	b508      	push	{r3, lr}
 8017da6:	2006      	movs	r0, #6
 8017da8:	f000 fa0c 	bl	80181c4 <raise>
 8017dac:	2001      	movs	r0, #1
 8017dae:	f7f3 f809 	bl	800adc4 <_exit>

08017db2 <_malloc_usable_size_r>:
 8017db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017db6:	1f18      	subs	r0, r3, #4
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	bfbc      	itt	lt
 8017dbc:	580b      	ldrlt	r3, [r1, r0]
 8017dbe:	18c0      	addlt	r0, r0, r3
 8017dc0:	4770      	bx	lr

08017dc2 <__sfputc_r>:
 8017dc2:	6893      	ldr	r3, [r2, #8]
 8017dc4:	3b01      	subs	r3, #1
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	b410      	push	{r4}
 8017dca:	6093      	str	r3, [r2, #8]
 8017dcc:	da08      	bge.n	8017de0 <__sfputc_r+0x1e>
 8017dce:	6994      	ldr	r4, [r2, #24]
 8017dd0:	42a3      	cmp	r3, r4
 8017dd2:	db01      	blt.n	8017dd8 <__sfputc_r+0x16>
 8017dd4:	290a      	cmp	r1, #10
 8017dd6:	d103      	bne.n	8017de0 <__sfputc_r+0x1e>
 8017dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ddc:	f000 b934 	b.w	8018048 <__swbuf_r>
 8017de0:	6813      	ldr	r3, [r2, #0]
 8017de2:	1c58      	adds	r0, r3, #1
 8017de4:	6010      	str	r0, [r2, #0]
 8017de6:	7019      	strb	r1, [r3, #0]
 8017de8:	4608      	mov	r0, r1
 8017dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017dee:	4770      	bx	lr

08017df0 <__sfputs_r>:
 8017df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017df2:	4606      	mov	r6, r0
 8017df4:	460f      	mov	r7, r1
 8017df6:	4614      	mov	r4, r2
 8017df8:	18d5      	adds	r5, r2, r3
 8017dfa:	42ac      	cmp	r4, r5
 8017dfc:	d101      	bne.n	8017e02 <__sfputs_r+0x12>
 8017dfe:	2000      	movs	r0, #0
 8017e00:	e007      	b.n	8017e12 <__sfputs_r+0x22>
 8017e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e06:	463a      	mov	r2, r7
 8017e08:	4630      	mov	r0, r6
 8017e0a:	f7ff ffda 	bl	8017dc2 <__sfputc_r>
 8017e0e:	1c43      	adds	r3, r0, #1
 8017e10:	d1f3      	bne.n	8017dfa <__sfputs_r+0xa>
 8017e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e14 <_vfiprintf_r>:
 8017e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e18:	460d      	mov	r5, r1
 8017e1a:	b09d      	sub	sp, #116	; 0x74
 8017e1c:	4614      	mov	r4, r2
 8017e1e:	4698      	mov	r8, r3
 8017e20:	4606      	mov	r6, r0
 8017e22:	b118      	cbz	r0, 8017e2c <_vfiprintf_r+0x18>
 8017e24:	6a03      	ldr	r3, [r0, #32]
 8017e26:	b90b      	cbnz	r3, 8017e2c <_vfiprintf_r+0x18>
 8017e28:	f7fe f98e 	bl	8016148 <__sinit>
 8017e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e2e:	07d9      	lsls	r1, r3, #31
 8017e30:	d405      	bmi.n	8017e3e <_vfiprintf_r+0x2a>
 8017e32:	89ab      	ldrh	r3, [r5, #12]
 8017e34:	059a      	lsls	r2, r3, #22
 8017e36:	d402      	bmi.n	8017e3e <_vfiprintf_r+0x2a>
 8017e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e3a:	f7fe faac 	bl	8016396 <__retarget_lock_acquire_recursive>
 8017e3e:	89ab      	ldrh	r3, [r5, #12]
 8017e40:	071b      	lsls	r3, r3, #28
 8017e42:	d501      	bpl.n	8017e48 <_vfiprintf_r+0x34>
 8017e44:	692b      	ldr	r3, [r5, #16]
 8017e46:	b99b      	cbnz	r3, 8017e70 <_vfiprintf_r+0x5c>
 8017e48:	4629      	mov	r1, r5
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	f000 f93a 	bl	80180c4 <__swsetup_r>
 8017e50:	b170      	cbz	r0, 8017e70 <_vfiprintf_r+0x5c>
 8017e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e54:	07dc      	lsls	r4, r3, #31
 8017e56:	d504      	bpl.n	8017e62 <_vfiprintf_r+0x4e>
 8017e58:	f04f 30ff 	mov.w	r0, #4294967295
 8017e5c:	b01d      	add	sp, #116	; 0x74
 8017e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e62:	89ab      	ldrh	r3, [r5, #12]
 8017e64:	0598      	lsls	r0, r3, #22
 8017e66:	d4f7      	bmi.n	8017e58 <_vfiprintf_r+0x44>
 8017e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e6a:	f7fe fa95 	bl	8016398 <__retarget_lock_release_recursive>
 8017e6e:	e7f3      	b.n	8017e58 <_vfiprintf_r+0x44>
 8017e70:	2300      	movs	r3, #0
 8017e72:	9309      	str	r3, [sp, #36]	; 0x24
 8017e74:	2320      	movs	r3, #32
 8017e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e7e:	2330      	movs	r3, #48	; 0x30
 8017e80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018034 <_vfiprintf_r+0x220>
 8017e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e88:	f04f 0901 	mov.w	r9, #1
 8017e8c:	4623      	mov	r3, r4
 8017e8e:	469a      	mov	sl, r3
 8017e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e94:	b10a      	cbz	r2, 8017e9a <_vfiprintf_r+0x86>
 8017e96:	2a25      	cmp	r2, #37	; 0x25
 8017e98:	d1f9      	bne.n	8017e8e <_vfiprintf_r+0x7a>
 8017e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8017e9e:	d00b      	beq.n	8017eb8 <_vfiprintf_r+0xa4>
 8017ea0:	465b      	mov	r3, fp
 8017ea2:	4622      	mov	r2, r4
 8017ea4:	4629      	mov	r1, r5
 8017ea6:	4630      	mov	r0, r6
 8017ea8:	f7ff ffa2 	bl	8017df0 <__sfputs_r>
 8017eac:	3001      	adds	r0, #1
 8017eae:	f000 80a9 	beq.w	8018004 <_vfiprintf_r+0x1f0>
 8017eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017eb4:	445a      	add	r2, fp
 8017eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8017eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	f000 80a1 	beq.w	8018004 <_vfiprintf_r+0x1f0>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ecc:	f10a 0a01 	add.w	sl, sl, #1
 8017ed0:	9304      	str	r3, [sp, #16]
 8017ed2:	9307      	str	r3, [sp, #28]
 8017ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8017eda:	4654      	mov	r4, sl
 8017edc:	2205      	movs	r2, #5
 8017ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ee2:	4854      	ldr	r0, [pc, #336]	; (8018034 <_vfiprintf_r+0x220>)
 8017ee4:	f7e8 f98c 	bl	8000200 <memchr>
 8017ee8:	9a04      	ldr	r2, [sp, #16]
 8017eea:	b9d8      	cbnz	r0, 8017f24 <_vfiprintf_r+0x110>
 8017eec:	06d1      	lsls	r1, r2, #27
 8017eee:	bf44      	itt	mi
 8017ef0:	2320      	movmi	r3, #32
 8017ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ef6:	0713      	lsls	r3, r2, #28
 8017ef8:	bf44      	itt	mi
 8017efa:	232b      	movmi	r3, #43	; 0x2b
 8017efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f00:	f89a 3000 	ldrb.w	r3, [sl]
 8017f04:	2b2a      	cmp	r3, #42	; 0x2a
 8017f06:	d015      	beq.n	8017f34 <_vfiprintf_r+0x120>
 8017f08:	9a07      	ldr	r2, [sp, #28]
 8017f0a:	4654      	mov	r4, sl
 8017f0c:	2000      	movs	r0, #0
 8017f0e:	f04f 0c0a 	mov.w	ip, #10
 8017f12:	4621      	mov	r1, r4
 8017f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f18:	3b30      	subs	r3, #48	; 0x30
 8017f1a:	2b09      	cmp	r3, #9
 8017f1c:	d94d      	bls.n	8017fba <_vfiprintf_r+0x1a6>
 8017f1e:	b1b0      	cbz	r0, 8017f4e <_vfiprintf_r+0x13a>
 8017f20:	9207      	str	r2, [sp, #28]
 8017f22:	e014      	b.n	8017f4e <_vfiprintf_r+0x13a>
 8017f24:	eba0 0308 	sub.w	r3, r0, r8
 8017f28:	fa09 f303 	lsl.w	r3, r9, r3
 8017f2c:	4313      	orrs	r3, r2
 8017f2e:	9304      	str	r3, [sp, #16]
 8017f30:	46a2      	mov	sl, r4
 8017f32:	e7d2      	b.n	8017eda <_vfiprintf_r+0xc6>
 8017f34:	9b03      	ldr	r3, [sp, #12]
 8017f36:	1d19      	adds	r1, r3, #4
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	9103      	str	r1, [sp, #12]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	bfbb      	ittet	lt
 8017f40:	425b      	neglt	r3, r3
 8017f42:	f042 0202 	orrlt.w	r2, r2, #2
 8017f46:	9307      	strge	r3, [sp, #28]
 8017f48:	9307      	strlt	r3, [sp, #28]
 8017f4a:	bfb8      	it	lt
 8017f4c:	9204      	strlt	r2, [sp, #16]
 8017f4e:	7823      	ldrb	r3, [r4, #0]
 8017f50:	2b2e      	cmp	r3, #46	; 0x2e
 8017f52:	d10c      	bne.n	8017f6e <_vfiprintf_r+0x15a>
 8017f54:	7863      	ldrb	r3, [r4, #1]
 8017f56:	2b2a      	cmp	r3, #42	; 0x2a
 8017f58:	d134      	bne.n	8017fc4 <_vfiprintf_r+0x1b0>
 8017f5a:	9b03      	ldr	r3, [sp, #12]
 8017f5c:	1d1a      	adds	r2, r3, #4
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	9203      	str	r2, [sp, #12]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	bfb8      	it	lt
 8017f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8017f6a:	3402      	adds	r4, #2
 8017f6c:	9305      	str	r3, [sp, #20]
 8017f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018044 <_vfiprintf_r+0x230>
 8017f72:	7821      	ldrb	r1, [r4, #0]
 8017f74:	2203      	movs	r2, #3
 8017f76:	4650      	mov	r0, sl
 8017f78:	f7e8 f942 	bl	8000200 <memchr>
 8017f7c:	b138      	cbz	r0, 8017f8e <_vfiprintf_r+0x17a>
 8017f7e:	9b04      	ldr	r3, [sp, #16]
 8017f80:	eba0 000a 	sub.w	r0, r0, sl
 8017f84:	2240      	movs	r2, #64	; 0x40
 8017f86:	4082      	lsls	r2, r0
 8017f88:	4313      	orrs	r3, r2
 8017f8a:	3401      	adds	r4, #1
 8017f8c:	9304      	str	r3, [sp, #16]
 8017f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f92:	4829      	ldr	r0, [pc, #164]	; (8018038 <_vfiprintf_r+0x224>)
 8017f94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f98:	2206      	movs	r2, #6
 8017f9a:	f7e8 f931 	bl	8000200 <memchr>
 8017f9e:	2800      	cmp	r0, #0
 8017fa0:	d03f      	beq.n	8018022 <_vfiprintf_r+0x20e>
 8017fa2:	4b26      	ldr	r3, [pc, #152]	; (801803c <_vfiprintf_r+0x228>)
 8017fa4:	bb1b      	cbnz	r3, 8017fee <_vfiprintf_r+0x1da>
 8017fa6:	9b03      	ldr	r3, [sp, #12]
 8017fa8:	3307      	adds	r3, #7
 8017faa:	f023 0307 	bic.w	r3, r3, #7
 8017fae:	3308      	adds	r3, #8
 8017fb0:	9303      	str	r3, [sp, #12]
 8017fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fb4:	443b      	add	r3, r7
 8017fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb8:	e768      	b.n	8017e8c <_vfiprintf_r+0x78>
 8017fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fbe:	460c      	mov	r4, r1
 8017fc0:	2001      	movs	r0, #1
 8017fc2:	e7a6      	b.n	8017f12 <_vfiprintf_r+0xfe>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	3401      	adds	r4, #1
 8017fc8:	9305      	str	r3, [sp, #20]
 8017fca:	4619      	mov	r1, r3
 8017fcc:	f04f 0c0a 	mov.w	ip, #10
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fd6:	3a30      	subs	r2, #48	; 0x30
 8017fd8:	2a09      	cmp	r2, #9
 8017fda:	d903      	bls.n	8017fe4 <_vfiprintf_r+0x1d0>
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d0c6      	beq.n	8017f6e <_vfiprintf_r+0x15a>
 8017fe0:	9105      	str	r1, [sp, #20]
 8017fe2:	e7c4      	b.n	8017f6e <_vfiprintf_r+0x15a>
 8017fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017fe8:	4604      	mov	r4, r0
 8017fea:	2301      	movs	r3, #1
 8017fec:	e7f0      	b.n	8017fd0 <_vfiprintf_r+0x1bc>
 8017fee:	ab03      	add	r3, sp, #12
 8017ff0:	9300      	str	r3, [sp, #0]
 8017ff2:	462a      	mov	r2, r5
 8017ff4:	4b12      	ldr	r3, [pc, #72]	; (8018040 <_vfiprintf_r+0x22c>)
 8017ff6:	a904      	add	r1, sp, #16
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	f7fd fc53 	bl	80158a4 <_printf_float>
 8017ffe:	4607      	mov	r7, r0
 8018000:	1c78      	adds	r0, r7, #1
 8018002:	d1d6      	bne.n	8017fb2 <_vfiprintf_r+0x19e>
 8018004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018006:	07d9      	lsls	r1, r3, #31
 8018008:	d405      	bmi.n	8018016 <_vfiprintf_r+0x202>
 801800a:	89ab      	ldrh	r3, [r5, #12]
 801800c:	059a      	lsls	r2, r3, #22
 801800e:	d402      	bmi.n	8018016 <_vfiprintf_r+0x202>
 8018010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018012:	f7fe f9c1 	bl	8016398 <__retarget_lock_release_recursive>
 8018016:	89ab      	ldrh	r3, [r5, #12]
 8018018:	065b      	lsls	r3, r3, #25
 801801a:	f53f af1d 	bmi.w	8017e58 <_vfiprintf_r+0x44>
 801801e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018020:	e71c      	b.n	8017e5c <_vfiprintf_r+0x48>
 8018022:	ab03      	add	r3, sp, #12
 8018024:	9300      	str	r3, [sp, #0]
 8018026:	462a      	mov	r2, r5
 8018028:	4b05      	ldr	r3, [pc, #20]	; (8018040 <_vfiprintf_r+0x22c>)
 801802a:	a904      	add	r1, sp, #16
 801802c:	4630      	mov	r0, r6
 801802e:	f7fd fedd 	bl	8015dec <_printf_i>
 8018032:	e7e4      	b.n	8017ffe <_vfiprintf_r+0x1ea>
 8018034:	0801a36c 	.word	0x0801a36c
 8018038:	0801a376 	.word	0x0801a376
 801803c:	080158a5 	.word	0x080158a5
 8018040:	08017df1 	.word	0x08017df1
 8018044:	0801a372 	.word	0x0801a372

08018048 <__swbuf_r>:
 8018048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801804a:	460e      	mov	r6, r1
 801804c:	4614      	mov	r4, r2
 801804e:	4605      	mov	r5, r0
 8018050:	b118      	cbz	r0, 801805a <__swbuf_r+0x12>
 8018052:	6a03      	ldr	r3, [r0, #32]
 8018054:	b90b      	cbnz	r3, 801805a <__swbuf_r+0x12>
 8018056:	f7fe f877 	bl	8016148 <__sinit>
 801805a:	69a3      	ldr	r3, [r4, #24]
 801805c:	60a3      	str	r3, [r4, #8]
 801805e:	89a3      	ldrh	r3, [r4, #12]
 8018060:	071a      	lsls	r2, r3, #28
 8018062:	d525      	bpl.n	80180b0 <__swbuf_r+0x68>
 8018064:	6923      	ldr	r3, [r4, #16]
 8018066:	b31b      	cbz	r3, 80180b0 <__swbuf_r+0x68>
 8018068:	6823      	ldr	r3, [r4, #0]
 801806a:	6922      	ldr	r2, [r4, #16]
 801806c:	1a98      	subs	r0, r3, r2
 801806e:	6963      	ldr	r3, [r4, #20]
 8018070:	b2f6      	uxtb	r6, r6
 8018072:	4283      	cmp	r3, r0
 8018074:	4637      	mov	r7, r6
 8018076:	dc04      	bgt.n	8018082 <__swbuf_r+0x3a>
 8018078:	4621      	mov	r1, r4
 801807a:	4628      	mov	r0, r5
 801807c:	f7ff fdbc 	bl	8017bf8 <_fflush_r>
 8018080:	b9e0      	cbnz	r0, 80180bc <__swbuf_r+0x74>
 8018082:	68a3      	ldr	r3, [r4, #8]
 8018084:	3b01      	subs	r3, #1
 8018086:	60a3      	str	r3, [r4, #8]
 8018088:	6823      	ldr	r3, [r4, #0]
 801808a:	1c5a      	adds	r2, r3, #1
 801808c:	6022      	str	r2, [r4, #0]
 801808e:	701e      	strb	r6, [r3, #0]
 8018090:	6962      	ldr	r2, [r4, #20]
 8018092:	1c43      	adds	r3, r0, #1
 8018094:	429a      	cmp	r2, r3
 8018096:	d004      	beq.n	80180a2 <__swbuf_r+0x5a>
 8018098:	89a3      	ldrh	r3, [r4, #12]
 801809a:	07db      	lsls	r3, r3, #31
 801809c:	d506      	bpl.n	80180ac <__swbuf_r+0x64>
 801809e:	2e0a      	cmp	r6, #10
 80180a0:	d104      	bne.n	80180ac <__swbuf_r+0x64>
 80180a2:	4621      	mov	r1, r4
 80180a4:	4628      	mov	r0, r5
 80180a6:	f7ff fda7 	bl	8017bf8 <_fflush_r>
 80180aa:	b938      	cbnz	r0, 80180bc <__swbuf_r+0x74>
 80180ac:	4638      	mov	r0, r7
 80180ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180b0:	4621      	mov	r1, r4
 80180b2:	4628      	mov	r0, r5
 80180b4:	f000 f806 	bl	80180c4 <__swsetup_r>
 80180b8:	2800      	cmp	r0, #0
 80180ba:	d0d5      	beq.n	8018068 <__swbuf_r+0x20>
 80180bc:	f04f 37ff 	mov.w	r7, #4294967295
 80180c0:	e7f4      	b.n	80180ac <__swbuf_r+0x64>
	...

080180c4 <__swsetup_r>:
 80180c4:	b538      	push	{r3, r4, r5, lr}
 80180c6:	4b2a      	ldr	r3, [pc, #168]	; (8018170 <__swsetup_r+0xac>)
 80180c8:	4605      	mov	r5, r0
 80180ca:	6818      	ldr	r0, [r3, #0]
 80180cc:	460c      	mov	r4, r1
 80180ce:	b118      	cbz	r0, 80180d8 <__swsetup_r+0x14>
 80180d0:	6a03      	ldr	r3, [r0, #32]
 80180d2:	b90b      	cbnz	r3, 80180d8 <__swsetup_r+0x14>
 80180d4:	f7fe f838 	bl	8016148 <__sinit>
 80180d8:	89a3      	ldrh	r3, [r4, #12]
 80180da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80180de:	0718      	lsls	r0, r3, #28
 80180e0:	d422      	bmi.n	8018128 <__swsetup_r+0x64>
 80180e2:	06d9      	lsls	r1, r3, #27
 80180e4:	d407      	bmi.n	80180f6 <__swsetup_r+0x32>
 80180e6:	2309      	movs	r3, #9
 80180e8:	602b      	str	r3, [r5, #0]
 80180ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80180ee:	81a3      	strh	r3, [r4, #12]
 80180f0:	f04f 30ff 	mov.w	r0, #4294967295
 80180f4:	e034      	b.n	8018160 <__swsetup_r+0x9c>
 80180f6:	0758      	lsls	r0, r3, #29
 80180f8:	d512      	bpl.n	8018120 <__swsetup_r+0x5c>
 80180fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180fc:	b141      	cbz	r1, 8018110 <__swsetup_r+0x4c>
 80180fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018102:	4299      	cmp	r1, r3
 8018104:	d002      	beq.n	801810c <__swsetup_r+0x48>
 8018106:	4628      	mov	r0, r5
 8018108:	f7fe ffd0 	bl	80170ac <_free_r>
 801810c:	2300      	movs	r3, #0
 801810e:	6363      	str	r3, [r4, #52]	; 0x34
 8018110:	89a3      	ldrh	r3, [r4, #12]
 8018112:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018116:	81a3      	strh	r3, [r4, #12]
 8018118:	2300      	movs	r3, #0
 801811a:	6063      	str	r3, [r4, #4]
 801811c:	6923      	ldr	r3, [r4, #16]
 801811e:	6023      	str	r3, [r4, #0]
 8018120:	89a3      	ldrh	r3, [r4, #12]
 8018122:	f043 0308 	orr.w	r3, r3, #8
 8018126:	81a3      	strh	r3, [r4, #12]
 8018128:	6923      	ldr	r3, [r4, #16]
 801812a:	b94b      	cbnz	r3, 8018140 <__swsetup_r+0x7c>
 801812c:	89a3      	ldrh	r3, [r4, #12]
 801812e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018136:	d003      	beq.n	8018140 <__swsetup_r+0x7c>
 8018138:	4621      	mov	r1, r4
 801813a:	4628      	mov	r0, r5
 801813c:	f000 f884 	bl	8018248 <__smakebuf_r>
 8018140:	89a0      	ldrh	r0, [r4, #12]
 8018142:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018146:	f010 0301 	ands.w	r3, r0, #1
 801814a:	d00a      	beq.n	8018162 <__swsetup_r+0x9e>
 801814c:	2300      	movs	r3, #0
 801814e:	60a3      	str	r3, [r4, #8]
 8018150:	6963      	ldr	r3, [r4, #20]
 8018152:	425b      	negs	r3, r3
 8018154:	61a3      	str	r3, [r4, #24]
 8018156:	6923      	ldr	r3, [r4, #16]
 8018158:	b943      	cbnz	r3, 801816c <__swsetup_r+0xa8>
 801815a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801815e:	d1c4      	bne.n	80180ea <__swsetup_r+0x26>
 8018160:	bd38      	pop	{r3, r4, r5, pc}
 8018162:	0781      	lsls	r1, r0, #30
 8018164:	bf58      	it	pl
 8018166:	6963      	ldrpl	r3, [r4, #20]
 8018168:	60a3      	str	r3, [r4, #8]
 801816a:	e7f4      	b.n	8018156 <__swsetup_r+0x92>
 801816c:	2000      	movs	r0, #0
 801816e:	e7f7      	b.n	8018160 <__swsetup_r+0x9c>
 8018170:	200000f4 	.word	0x200000f4

08018174 <_raise_r>:
 8018174:	291f      	cmp	r1, #31
 8018176:	b538      	push	{r3, r4, r5, lr}
 8018178:	4604      	mov	r4, r0
 801817a:	460d      	mov	r5, r1
 801817c:	d904      	bls.n	8018188 <_raise_r+0x14>
 801817e:	2316      	movs	r3, #22
 8018180:	6003      	str	r3, [r0, #0]
 8018182:	f04f 30ff 	mov.w	r0, #4294967295
 8018186:	bd38      	pop	{r3, r4, r5, pc}
 8018188:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801818a:	b112      	cbz	r2, 8018192 <_raise_r+0x1e>
 801818c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018190:	b94b      	cbnz	r3, 80181a6 <_raise_r+0x32>
 8018192:	4620      	mov	r0, r4
 8018194:	f000 f830 	bl	80181f8 <_getpid_r>
 8018198:	462a      	mov	r2, r5
 801819a:	4601      	mov	r1, r0
 801819c:	4620      	mov	r0, r4
 801819e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181a2:	f000 b817 	b.w	80181d4 <_kill_r>
 80181a6:	2b01      	cmp	r3, #1
 80181a8:	d00a      	beq.n	80181c0 <_raise_r+0x4c>
 80181aa:	1c59      	adds	r1, r3, #1
 80181ac:	d103      	bne.n	80181b6 <_raise_r+0x42>
 80181ae:	2316      	movs	r3, #22
 80181b0:	6003      	str	r3, [r0, #0]
 80181b2:	2001      	movs	r0, #1
 80181b4:	e7e7      	b.n	8018186 <_raise_r+0x12>
 80181b6:	2400      	movs	r4, #0
 80181b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80181bc:	4628      	mov	r0, r5
 80181be:	4798      	blx	r3
 80181c0:	2000      	movs	r0, #0
 80181c2:	e7e0      	b.n	8018186 <_raise_r+0x12>

080181c4 <raise>:
 80181c4:	4b02      	ldr	r3, [pc, #8]	; (80181d0 <raise+0xc>)
 80181c6:	4601      	mov	r1, r0
 80181c8:	6818      	ldr	r0, [r3, #0]
 80181ca:	f7ff bfd3 	b.w	8018174 <_raise_r>
 80181ce:	bf00      	nop
 80181d0:	200000f4 	.word	0x200000f4

080181d4 <_kill_r>:
 80181d4:	b538      	push	{r3, r4, r5, lr}
 80181d6:	4d07      	ldr	r5, [pc, #28]	; (80181f4 <_kill_r+0x20>)
 80181d8:	2300      	movs	r3, #0
 80181da:	4604      	mov	r4, r0
 80181dc:	4608      	mov	r0, r1
 80181de:	4611      	mov	r1, r2
 80181e0:	602b      	str	r3, [r5, #0]
 80181e2:	f7f2 fddf 	bl	800ada4 <_kill>
 80181e6:	1c43      	adds	r3, r0, #1
 80181e8:	d102      	bne.n	80181f0 <_kill_r+0x1c>
 80181ea:	682b      	ldr	r3, [r5, #0]
 80181ec:	b103      	cbz	r3, 80181f0 <_kill_r+0x1c>
 80181ee:	6023      	str	r3, [r4, #0]
 80181f0:	bd38      	pop	{r3, r4, r5, pc}
 80181f2:	bf00      	nop
 80181f4:	20006544 	.word	0x20006544

080181f8 <_getpid_r>:
 80181f8:	f7f2 bdcc 	b.w	800ad94 <_getpid>

080181fc <__swhatbuf_r>:
 80181fc:	b570      	push	{r4, r5, r6, lr}
 80181fe:	460c      	mov	r4, r1
 8018200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018204:	2900      	cmp	r1, #0
 8018206:	b096      	sub	sp, #88	; 0x58
 8018208:	4615      	mov	r5, r2
 801820a:	461e      	mov	r6, r3
 801820c:	da0d      	bge.n	801822a <__swhatbuf_r+0x2e>
 801820e:	89a3      	ldrh	r3, [r4, #12]
 8018210:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018214:	f04f 0100 	mov.w	r1, #0
 8018218:	bf0c      	ite	eq
 801821a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801821e:	2340      	movne	r3, #64	; 0x40
 8018220:	2000      	movs	r0, #0
 8018222:	6031      	str	r1, [r6, #0]
 8018224:	602b      	str	r3, [r5, #0]
 8018226:	b016      	add	sp, #88	; 0x58
 8018228:	bd70      	pop	{r4, r5, r6, pc}
 801822a:	466a      	mov	r2, sp
 801822c:	f000 f848 	bl	80182c0 <_fstat_r>
 8018230:	2800      	cmp	r0, #0
 8018232:	dbec      	blt.n	801820e <__swhatbuf_r+0x12>
 8018234:	9901      	ldr	r1, [sp, #4]
 8018236:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801823a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801823e:	4259      	negs	r1, r3
 8018240:	4159      	adcs	r1, r3
 8018242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018246:	e7eb      	b.n	8018220 <__swhatbuf_r+0x24>

08018248 <__smakebuf_r>:
 8018248:	898b      	ldrh	r3, [r1, #12]
 801824a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801824c:	079d      	lsls	r5, r3, #30
 801824e:	4606      	mov	r6, r0
 8018250:	460c      	mov	r4, r1
 8018252:	d507      	bpl.n	8018264 <__smakebuf_r+0x1c>
 8018254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018258:	6023      	str	r3, [r4, #0]
 801825a:	6123      	str	r3, [r4, #16]
 801825c:	2301      	movs	r3, #1
 801825e:	6163      	str	r3, [r4, #20]
 8018260:	b002      	add	sp, #8
 8018262:	bd70      	pop	{r4, r5, r6, pc}
 8018264:	ab01      	add	r3, sp, #4
 8018266:	466a      	mov	r2, sp
 8018268:	f7ff ffc8 	bl	80181fc <__swhatbuf_r>
 801826c:	9900      	ldr	r1, [sp, #0]
 801826e:	4605      	mov	r5, r0
 8018270:	4630      	mov	r0, r6
 8018272:	f7fd f9eb 	bl	801564c <_malloc_r>
 8018276:	b948      	cbnz	r0, 801828c <__smakebuf_r+0x44>
 8018278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801827c:	059a      	lsls	r2, r3, #22
 801827e:	d4ef      	bmi.n	8018260 <__smakebuf_r+0x18>
 8018280:	f023 0303 	bic.w	r3, r3, #3
 8018284:	f043 0302 	orr.w	r3, r3, #2
 8018288:	81a3      	strh	r3, [r4, #12]
 801828a:	e7e3      	b.n	8018254 <__smakebuf_r+0xc>
 801828c:	89a3      	ldrh	r3, [r4, #12]
 801828e:	6020      	str	r0, [r4, #0]
 8018290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018294:	81a3      	strh	r3, [r4, #12]
 8018296:	9b00      	ldr	r3, [sp, #0]
 8018298:	6163      	str	r3, [r4, #20]
 801829a:	9b01      	ldr	r3, [sp, #4]
 801829c:	6120      	str	r0, [r4, #16]
 801829e:	b15b      	cbz	r3, 80182b8 <__smakebuf_r+0x70>
 80182a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182a4:	4630      	mov	r0, r6
 80182a6:	f000 f81d 	bl	80182e4 <_isatty_r>
 80182aa:	b128      	cbz	r0, 80182b8 <__smakebuf_r+0x70>
 80182ac:	89a3      	ldrh	r3, [r4, #12]
 80182ae:	f023 0303 	bic.w	r3, r3, #3
 80182b2:	f043 0301 	orr.w	r3, r3, #1
 80182b6:	81a3      	strh	r3, [r4, #12]
 80182b8:	89a3      	ldrh	r3, [r4, #12]
 80182ba:	431d      	orrs	r5, r3
 80182bc:	81a5      	strh	r5, [r4, #12]
 80182be:	e7cf      	b.n	8018260 <__smakebuf_r+0x18>

080182c0 <_fstat_r>:
 80182c0:	b538      	push	{r3, r4, r5, lr}
 80182c2:	4d07      	ldr	r5, [pc, #28]	; (80182e0 <_fstat_r+0x20>)
 80182c4:	2300      	movs	r3, #0
 80182c6:	4604      	mov	r4, r0
 80182c8:	4608      	mov	r0, r1
 80182ca:	4611      	mov	r1, r2
 80182cc:	602b      	str	r3, [r5, #0]
 80182ce:	f7f2 fdc8 	bl	800ae62 <_fstat>
 80182d2:	1c43      	adds	r3, r0, #1
 80182d4:	d102      	bne.n	80182dc <_fstat_r+0x1c>
 80182d6:	682b      	ldr	r3, [r5, #0]
 80182d8:	b103      	cbz	r3, 80182dc <_fstat_r+0x1c>
 80182da:	6023      	str	r3, [r4, #0]
 80182dc:	bd38      	pop	{r3, r4, r5, pc}
 80182de:	bf00      	nop
 80182e0:	20006544 	.word	0x20006544

080182e4 <_isatty_r>:
 80182e4:	b538      	push	{r3, r4, r5, lr}
 80182e6:	4d06      	ldr	r5, [pc, #24]	; (8018300 <_isatty_r+0x1c>)
 80182e8:	2300      	movs	r3, #0
 80182ea:	4604      	mov	r4, r0
 80182ec:	4608      	mov	r0, r1
 80182ee:	602b      	str	r3, [r5, #0]
 80182f0:	f7f2 fdc7 	bl	800ae82 <_isatty>
 80182f4:	1c43      	adds	r3, r0, #1
 80182f6:	d102      	bne.n	80182fe <_isatty_r+0x1a>
 80182f8:	682b      	ldr	r3, [r5, #0]
 80182fa:	b103      	cbz	r3, 80182fe <_isatty_r+0x1a>
 80182fc:	6023      	str	r3, [r4, #0]
 80182fe:	bd38      	pop	{r3, r4, r5, pc}
 8018300:	20006544 	.word	0x20006544

08018304 <sqrt>:
 8018304:	b538      	push	{r3, r4, r5, lr}
 8018306:	ed2d 8b02 	vpush	{d8}
 801830a:	ec55 4b10 	vmov	r4, r5, d0
 801830e:	f000 f951 	bl	80185b4 <__ieee754_sqrt>
 8018312:	4622      	mov	r2, r4
 8018314:	462b      	mov	r3, r5
 8018316:	4620      	mov	r0, r4
 8018318:	4629      	mov	r1, r5
 801831a:	eeb0 8a40 	vmov.f32	s16, s0
 801831e:	eef0 8a60 	vmov.f32	s17, s1
 8018322:	f7e8 fc1b 	bl	8000b5c <__aeabi_dcmpun>
 8018326:	b990      	cbnz	r0, 801834e <sqrt+0x4a>
 8018328:	2200      	movs	r2, #0
 801832a:	2300      	movs	r3, #0
 801832c:	4620      	mov	r0, r4
 801832e:	4629      	mov	r1, r5
 8018330:	f7e8 fbec 	bl	8000b0c <__aeabi_dcmplt>
 8018334:	b158      	cbz	r0, 801834e <sqrt+0x4a>
 8018336:	f7fe f803 	bl	8016340 <__errno>
 801833a:	2321      	movs	r3, #33	; 0x21
 801833c:	6003      	str	r3, [r0, #0]
 801833e:	2200      	movs	r2, #0
 8018340:	2300      	movs	r3, #0
 8018342:	4610      	mov	r0, r2
 8018344:	4619      	mov	r1, r3
 8018346:	f7e8 fa99 	bl	800087c <__aeabi_ddiv>
 801834a:	ec41 0b18 	vmov	d8, r0, r1
 801834e:	eeb0 0a48 	vmov.f32	s0, s16
 8018352:	eef0 0a68 	vmov.f32	s1, s17
 8018356:	ecbd 8b02 	vpop	{d8}
 801835a:	bd38      	pop	{r3, r4, r5, pc}

0801835c <asinf>:
 801835c:	b508      	push	{r3, lr}
 801835e:	ed2d 8b02 	vpush	{d8}
 8018362:	eeb0 8a40 	vmov.f32	s16, s0
 8018366:	f000 faa9 	bl	80188bc <__ieee754_asinf>
 801836a:	eeb4 8a48 	vcmp.f32	s16, s16
 801836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018372:	eef0 8a40 	vmov.f32	s17, s0
 8018376:	d615      	bvs.n	80183a4 <asinf+0x48>
 8018378:	eeb0 0a48 	vmov.f32	s0, s16
 801837c:	f000 f8b8 	bl	80184f0 <fabsf>
 8018380:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018384:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801838c:	dd0a      	ble.n	80183a4 <asinf+0x48>
 801838e:	f7fd ffd7 	bl	8016340 <__errno>
 8018392:	ecbd 8b02 	vpop	{d8}
 8018396:	2321      	movs	r3, #33	; 0x21
 8018398:	6003      	str	r3, [r0, #0]
 801839a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801839e:	4804      	ldr	r0, [pc, #16]	; (80183b0 <asinf+0x54>)
 80183a0:	f000 b902 	b.w	80185a8 <nanf>
 80183a4:	eeb0 0a68 	vmov.f32	s0, s17
 80183a8:	ecbd 8b02 	vpop	{d8}
 80183ac:	bd08      	pop	{r3, pc}
 80183ae:	bf00      	nop
 80183b0:	0801a3c2 	.word	0x0801a3c2

080183b4 <atan2f>:
 80183b4:	f000 bb68 	b.w	8018a88 <__ieee754_atan2f>

080183b8 <powf>:
 80183b8:	b508      	push	{r3, lr}
 80183ba:	ed2d 8b04 	vpush	{d8-d9}
 80183be:	eeb0 8a60 	vmov.f32	s16, s1
 80183c2:	eeb0 9a40 	vmov.f32	s18, s0
 80183c6:	f000 fbff 	bl	8018bc8 <__ieee754_powf>
 80183ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80183ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183d2:	eef0 8a40 	vmov.f32	s17, s0
 80183d6:	d63e      	bvs.n	8018456 <powf+0x9e>
 80183d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80183dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183e0:	d112      	bne.n	8018408 <powf+0x50>
 80183e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80183e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ea:	d039      	beq.n	8018460 <powf+0xa8>
 80183ec:	eeb0 0a48 	vmov.f32	s0, s16
 80183f0:	f000 f8cc 	bl	801858c <finitef>
 80183f4:	b378      	cbz	r0, 8018456 <powf+0x9e>
 80183f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80183fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183fe:	d52a      	bpl.n	8018456 <powf+0x9e>
 8018400:	f7fd ff9e 	bl	8016340 <__errno>
 8018404:	2322      	movs	r3, #34	; 0x22
 8018406:	e014      	b.n	8018432 <powf+0x7a>
 8018408:	f000 f8c0 	bl	801858c <finitef>
 801840c:	b998      	cbnz	r0, 8018436 <powf+0x7e>
 801840e:	eeb0 0a49 	vmov.f32	s0, s18
 8018412:	f000 f8bb 	bl	801858c <finitef>
 8018416:	b170      	cbz	r0, 8018436 <powf+0x7e>
 8018418:	eeb0 0a48 	vmov.f32	s0, s16
 801841c:	f000 f8b6 	bl	801858c <finitef>
 8018420:	b148      	cbz	r0, 8018436 <powf+0x7e>
 8018422:	eef4 8a68 	vcmp.f32	s17, s17
 8018426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801842a:	d7e9      	bvc.n	8018400 <powf+0x48>
 801842c:	f7fd ff88 	bl	8016340 <__errno>
 8018430:	2321      	movs	r3, #33	; 0x21
 8018432:	6003      	str	r3, [r0, #0]
 8018434:	e00f      	b.n	8018456 <powf+0x9e>
 8018436:	eef5 8a40 	vcmp.f32	s17, #0.0
 801843a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801843e:	d10a      	bne.n	8018456 <powf+0x9e>
 8018440:	eeb0 0a49 	vmov.f32	s0, s18
 8018444:	f000 f8a2 	bl	801858c <finitef>
 8018448:	b128      	cbz	r0, 8018456 <powf+0x9e>
 801844a:	eeb0 0a48 	vmov.f32	s0, s16
 801844e:	f000 f89d 	bl	801858c <finitef>
 8018452:	2800      	cmp	r0, #0
 8018454:	d1d4      	bne.n	8018400 <powf+0x48>
 8018456:	eeb0 0a68 	vmov.f32	s0, s17
 801845a:	ecbd 8b04 	vpop	{d8-d9}
 801845e:	bd08      	pop	{r3, pc}
 8018460:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018464:	e7f7      	b.n	8018456 <powf+0x9e>
	...

08018468 <cosf>:
 8018468:	ee10 3a10 	vmov	r3, s0
 801846c:	b507      	push	{r0, r1, r2, lr}
 801846e:	4a1e      	ldr	r2, [pc, #120]	; (80184e8 <cosf+0x80>)
 8018470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018474:	4293      	cmp	r3, r2
 8018476:	dc06      	bgt.n	8018486 <cosf+0x1e>
 8018478:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80184ec <cosf+0x84>
 801847c:	b003      	add	sp, #12
 801847e:	f85d eb04 	ldr.w	lr, [sp], #4
 8018482:	f000 b975 	b.w	8018770 <__kernel_cosf>
 8018486:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801848a:	db04      	blt.n	8018496 <cosf+0x2e>
 801848c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018490:	b003      	add	sp, #12
 8018492:	f85d fb04 	ldr.w	pc, [sp], #4
 8018496:	4668      	mov	r0, sp
 8018498:	f000 fe60 	bl	801915c <__ieee754_rem_pio2f>
 801849c:	f000 0003 	and.w	r0, r0, #3
 80184a0:	2801      	cmp	r0, #1
 80184a2:	d009      	beq.n	80184b8 <cosf+0x50>
 80184a4:	2802      	cmp	r0, #2
 80184a6:	d010      	beq.n	80184ca <cosf+0x62>
 80184a8:	b9b0      	cbnz	r0, 80184d8 <cosf+0x70>
 80184aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80184ae:	ed9d 0a00 	vldr	s0, [sp]
 80184b2:	f000 f95d 	bl	8018770 <__kernel_cosf>
 80184b6:	e7eb      	b.n	8018490 <cosf+0x28>
 80184b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80184bc:	ed9d 0a00 	vldr	s0, [sp]
 80184c0:	f000 f9b4 	bl	801882c <__kernel_sinf>
 80184c4:	eeb1 0a40 	vneg.f32	s0, s0
 80184c8:	e7e2      	b.n	8018490 <cosf+0x28>
 80184ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80184ce:	ed9d 0a00 	vldr	s0, [sp]
 80184d2:	f000 f94d 	bl	8018770 <__kernel_cosf>
 80184d6:	e7f5      	b.n	80184c4 <cosf+0x5c>
 80184d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80184dc:	ed9d 0a00 	vldr	s0, [sp]
 80184e0:	2001      	movs	r0, #1
 80184e2:	f000 f9a3 	bl	801882c <__kernel_sinf>
 80184e6:	e7d3      	b.n	8018490 <cosf+0x28>
 80184e8:	3f490fd8 	.word	0x3f490fd8
 80184ec:	00000000 	.word	0x00000000

080184f0 <fabsf>:
 80184f0:	ee10 3a10 	vmov	r3, s0
 80184f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80184f8:	ee00 3a10 	vmov	s0, r3
 80184fc:	4770      	bx	lr
	...

08018500 <sinf>:
 8018500:	ee10 3a10 	vmov	r3, s0
 8018504:	b507      	push	{r0, r1, r2, lr}
 8018506:	4a1f      	ldr	r2, [pc, #124]	; (8018584 <sinf+0x84>)
 8018508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801850c:	4293      	cmp	r3, r2
 801850e:	dc07      	bgt.n	8018520 <sinf+0x20>
 8018510:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8018588 <sinf+0x88>
 8018514:	2000      	movs	r0, #0
 8018516:	b003      	add	sp, #12
 8018518:	f85d eb04 	ldr.w	lr, [sp], #4
 801851c:	f000 b986 	b.w	801882c <__kernel_sinf>
 8018520:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018524:	db04      	blt.n	8018530 <sinf+0x30>
 8018526:	ee30 0a40 	vsub.f32	s0, s0, s0
 801852a:	b003      	add	sp, #12
 801852c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018530:	4668      	mov	r0, sp
 8018532:	f000 fe13 	bl	801915c <__ieee754_rem_pio2f>
 8018536:	f000 0003 	and.w	r0, r0, #3
 801853a:	2801      	cmp	r0, #1
 801853c:	d00a      	beq.n	8018554 <sinf+0x54>
 801853e:	2802      	cmp	r0, #2
 8018540:	d00f      	beq.n	8018562 <sinf+0x62>
 8018542:	b9c0      	cbnz	r0, 8018576 <sinf+0x76>
 8018544:	eddd 0a01 	vldr	s1, [sp, #4]
 8018548:	ed9d 0a00 	vldr	s0, [sp]
 801854c:	2001      	movs	r0, #1
 801854e:	f000 f96d 	bl	801882c <__kernel_sinf>
 8018552:	e7ea      	b.n	801852a <sinf+0x2a>
 8018554:	eddd 0a01 	vldr	s1, [sp, #4]
 8018558:	ed9d 0a00 	vldr	s0, [sp]
 801855c:	f000 f908 	bl	8018770 <__kernel_cosf>
 8018560:	e7e3      	b.n	801852a <sinf+0x2a>
 8018562:	eddd 0a01 	vldr	s1, [sp, #4]
 8018566:	ed9d 0a00 	vldr	s0, [sp]
 801856a:	2001      	movs	r0, #1
 801856c:	f000 f95e 	bl	801882c <__kernel_sinf>
 8018570:	eeb1 0a40 	vneg.f32	s0, s0
 8018574:	e7d9      	b.n	801852a <sinf+0x2a>
 8018576:	eddd 0a01 	vldr	s1, [sp, #4]
 801857a:	ed9d 0a00 	vldr	s0, [sp]
 801857e:	f000 f8f7 	bl	8018770 <__kernel_cosf>
 8018582:	e7f5      	b.n	8018570 <sinf+0x70>
 8018584:	3f490fd8 	.word	0x3f490fd8
 8018588:	00000000 	.word	0x00000000

0801858c <finitef>:
 801858c:	b082      	sub	sp, #8
 801858e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018592:	9801      	ldr	r0, [sp, #4]
 8018594:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018598:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801859c:	bfac      	ite	ge
 801859e:	2000      	movge	r0, #0
 80185a0:	2001      	movlt	r0, #1
 80185a2:	b002      	add	sp, #8
 80185a4:	4770      	bx	lr
	...

080185a8 <nanf>:
 80185a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80185b0 <nanf+0x8>
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop
 80185b0:	7fc00000 	.word	0x7fc00000

080185b4 <__ieee754_sqrt>:
 80185b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b8:	ec55 4b10 	vmov	r4, r5, d0
 80185bc:	4e67      	ldr	r6, [pc, #412]	; (801875c <__ieee754_sqrt+0x1a8>)
 80185be:	43ae      	bics	r6, r5
 80185c0:	ee10 0a10 	vmov	r0, s0
 80185c4:	ee10 2a10 	vmov	r2, s0
 80185c8:	4629      	mov	r1, r5
 80185ca:	462b      	mov	r3, r5
 80185cc:	d10d      	bne.n	80185ea <__ieee754_sqrt+0x36>
 80185ce:	f7e8 f82b 	bl	8000628 <__aeabi_dmul>
 80185d2:	4602      	mov	r2, r0
 80185d4:	460b      	mov	r3, r1
 80185d6:	4620      	mov	r0, r4
 80185d8:	4629      	mov	r1, r5
 80185da:	f7e7 fe6f 	bl	80002bc <__adddf3>
 80185de:	4604      	mov	r4, r0
 80185e0:	460d      	mov	r5, r1
 80185e2:	ec45 4b10 	vmov	d0, r4, r5
 80185e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ea:	2d00      	cmp	r5, #0
 80185ec:	dc0b      	bgt.n	8018606 <__ieee754_sqrt+0x52>
 80185ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80185f2:	4326      	orrs	r6, r4
 80185f4:	d0f5      	beq.n	80185e2 <__ieee754_sqrt+0x2e>
 80185f6:	b135      	cbz	r5, 8018606 <__ieee754_sqrt+0x52>
 80185f8:	f7e7 fe5e 	bl	80002b8 <__aeabi_dsub>
 80185fc:	4602      	mov	r2, r0
 80185fe:	460b      	mov	r3, r1
 8018600:	f7e8 f93c 	bl	800087c <__aeabi_ddiv>
 8018604:	e7eb      	b.n	80185de <__ieee754_sqrt+0x2a>
 8018606:	1509      	asrs	r1, r1, #20
 8018608:	f000 808d 	beq.w	8018726 <__ieee754_sqrt+0x172>
 801860c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018610:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8018614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018618:	07c9      	lsls	r1, r1, #31
 801861a:	bf5c      	itt	pl
 801861c:	005b      	lslpl	r3, r3, #1
 801861e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8018622:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018626:	bf58      	it	pl
 8018628:	0052      	lslpl	r2, r2, #1
 801862a:	2500      	movs	r5, #0
 801862c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8018630:	1076      	asrs	r6, r6, #1
 8018632:	0052      	lsls	r2, r2, #1
 8018634:	f04f 0e16 	mov.w	lr, #22
 8018638:	46ac      	mov	ip, r5
 801863a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801863e:	eb0c 0001 	add.w	r0, ip, r1
 8018642:	4298      	cmp	r0, r3
 8018644:	bfde      	ittt	le
 8018646:	1a1b      	suble	r3, r3, r0
 8018648:	eb00 0c01 	addle.w	ip, r0, r1
 801864c:	186d      	addle	r5, r5, r1
 801864e:	005b      	lsls	r3, r3, #1
 8018650:	f1be 0e01 	subs.w	lr, lr, #1
 8018654:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8018658:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801865c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018660:	d1ed      	bne.n	801863e <__ieee754_sqrt+0x8a>
 8018662:	4674      	mov	r4, lr
 8018664:	2720      	movs	r7, #32
 8018666:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801866a:	4563      	cmp	r3, ip
 801866c:	eb01 000e 	add.w	r0, r1, lr
 8018670:	dc02      	bgt.n	8018678 <__ieee754_sqrt+0xc4>
 8018672:	d113      	bne.n	801869c <__ieee754_sqrt+0xe8>
 8018674:	4290      	cmp	r0, r2
 8018676:	d811      	bhi.n	801869c <__ieee754_sqrt+0xe8>
 8018678:	2800      	cmp	r0, #0
 801867a:	eb00 0e01 	add.w	lr, r0, r1
 801867e:	da57      	bge.n	8018730 <__ieee754_sqrt+0x17c>
 8018680:	f1be 0f00 	cmp.w	lr, #0
 8018684:	db54      	blt.n	8018730 <__ieee754_sqrt+0x17c>
 8018686:	f10c 0801 	add.w	r8, ip, #1
 801868a:	eba3 030c 	sub.w	r3, r3, ip
 801868e:	4290      	cmp	r0, r2
 8018690:	bf88      	it	hi
 8018692:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8018696:	1a12      	subs	r2, r2, r0
 8018698:	440c      	add	r4, r1
 801869a:	46c4      	mov	ip, r8
 801869c:	005b      	lsls	r3, r3, #1
 801869e:	3f01      	subs	r7, #1
 80186a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80186a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80186a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80186ac:	d1dd      	bne.n	801866a <__ieee754_sqrt+0xb6>
 80186ae:	4313      	orrs	r3, r2
 80186b0:	d01b      	beq.n	80186ea <__ieee754_sqrt+0x136>
 80186b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8018760 <__ieee754_sqrt+0x1ac>
 80186b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8018764 <__ieee754_sqrt+0x1b0>
 80186ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80186be:	e9db 2300 	ldrd	r2, r3, [fp]
 80186c2:	f7e7 fdf9 	bl	80002b8 <__aeabi_dsub>
 80186c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80186ca:	4602      	mov	r2, r0
 80186cc:	460b      	mov	r3, r1
 80186ce:	4640      	mov	r0, r8
 80186d0:	4649      	mov	r1, r9
 80186d2:	f7e8 fa25 	bl	8000b20 <__aeabi_dcmple>
 80186d6:	b140      	cbz	r0, 80186ea <__ieee754_sqrt+0x136>
 80186d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80186dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80186e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80186e4:	d126      	bne.n	8018734 <__ieee754_sqrt+0x180>
 80186e6:	3501      	adds	r5, #1
 80186e8:	463c      	mov	r4, r7
 80186ea:	106a      	asrs	r2, r5, #1
 80186ec:	0863      	lsrs	r3, r4, #1
 80186ee:	07e9      	lsls	r1, r5, #31
 80186f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80186f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80186f8:	bf48      	it	mi
 80186fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80186fe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8018702:	461c      	mov	r4, r3
 8018704:	e76d      	b.n	80185e2 <__ieee754_sqrt+0x2e>
 8018706:	0ad3      	lsrs	r3, r2, #11
 8018708:	3815      	subs	r0, #21
 801870a:	0552      	lsls	r2, r2, #21
 801870c:	2b00      	cmp	r3, #0
 801870e:	d0fa      	beq.n	8018706 <__ieee754_sqrt+0x152>
 8018710:	02dc      	lsls	r4, r3, #11
 8018712:	d50a      	bpl.n	801872a <__ieee754_sqrt+0x176>
 8018714:	f1c1 0420 	rsb	r4, r1, #32
 8018718:	fa22 f404 	lsr.w	r4, r2, r4
 801871c:	1e4d      	subs	r5, r1, #1
 801871e:	408a      	lsls	r2, r1
 8018720:	4323      	orrs	r3, r4
 8018722:	1b41      	subs	r1, r0, r5
 8018724:	e772      	b.n	801860c <__ieee754_sqrt+0x58>
 8018726:	4608      	mov	r0, r1
 8018728:	e7f0      	b.n	801870c <__ieee754_sqrt+0x158>
 801872a:	005b      	lsls	r3, r3, #1
 801872c:	3101      	adds	r1, #1
 801872e:	e7ef      	b.n	8018710 <__ieee754_sqrt+0x15c>
 8018730:	46e0      	mov	r8, ip
 8018732:	e7aa      	b.n	801868a <__ieee754_sqrt+0xd6>
 8018734:	f7e7 fdc2 	bl	80002bc <__adddf3>
 8018738:	e9da 8900 	ldrd	r8, r9, [sl]
 801873c:	4602      	mov	r2, r0
 801873e:	460b      	mov	r3, r1
 8018740:	4640      	mov	r0, r8
 8018742:	4649      	mov	r1, r9
 8018744:	f7e8 f9e2 	bl	8000b0c <__aeabi_dcmplt>
 8018748:	b120      	cbz	r0, 8018754 <__ieee754_sqrt+0x1a0>
 801874a:	1ca0      	adds	r0, r4, #2
 801874c:	bf08      	it	eq
 801874e:	3501      	addeq	r5, #1
 8018750:	3402      	adds	r4, #2
 8018752:	e7ca      	b.n	80186ea <__ieee754_sqrt+0x136>
 8018754:	3401      	adds	r4, #1
 8018756:	f024 0401 	bic.w	r4, r4, #1
 801875a:	e7c6      	b.n	80186ea <__ieee754_sqrt+0x136>
 801875c:	7ff00000 	.word	0x7ff00000
 8018760:	20000268 	.word	0x20000268
 8018764:	20000270 	.word	0x20000270

08018768 <__ieee754_sqrtf>:
 8018768:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801876c:	4770      	bx	lr
	...

08018770 <__kernel_cosf>:
 8018770:	ee10 3a10 	vmov	r3, s0
 8018774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018778:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801877c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018780:	da05      	bge.n	801878e <__kernel_cosf+0x1e>
 8018782:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018786:	ee17 2a90 	vmov	r2, s15
 801878a:	2a00      	cmp	r2, #0
 801878c:	d03b      	beq.n	8018806 <__kernel_cosf+0x96>
 801878e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018792:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801880c <__kernel_cosf+0x9c>
 8018796:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8018810 <__kernel_cosf+0xa0>
 801879a:	4a1e      	ldr	r2, [pc, #120]	; (8018814 <__kernel_cosf+0xa4>)
 801879c:	eea7 6a27 	vfma.f32	s12, s14, s15
 80187a0:	4293      	cmp	r3, r2
 80187a2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8018818 <__kernel_cosf+0xa8>
 80187a6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80187aa:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801881c <__kernel_cosf+0xac>
 80187ae:	eea7 6a87 	vfma.f32	s12, s15, s14
 80187b2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8018820 <__kernel_cosf+0xb0>
 80187b6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80187ba:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8018824 <__kernel_cosf+0xb4>
 80187be:	eea7 6a87 	vfma.f32	s12, s15, s14
 80187c2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80187c6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80187ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80187ce:	eee7 0a06 	vfma.f32	s1, s14, s12
 80187d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80187d6:	dc04      	bgt.n	80187e2 <__kernel_cosf+0x72>
 80187d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80187dc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80187e0:	4770      	bx	lr
 80187e2:	4a11      	ldr	r2, [pc, #68]	; (8018828 <__kernel_cosf+0xb8>)
 80187e4:	4293      	cmp	r3, r2
 80187e6:	bfda      	itte	le
 80187e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80187ec:	ee07 3a10 	vmovle	s14, r3
 80187f0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80187f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80187f8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80187fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018800:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018804:	4770      	bx	lr
 8018806:	eeb0 0a66 	vmov.f32	s0, s13
 801880a:	4770      	bx	lr
 801880c:	ad47d74e 	.word	0xad47d74e
 8018810:	310f74f6 	.word	0x310f74f6
 8018814:	3e999999 	.word	0x3e999999
 8018818:	b493f27c 	.word	0xb493f27c
 801881c:	37d00d01 	.word	0x37d00d01
 8018820:	bab60b61 	.word	0xbab60b61
 8018824:	3d2aaaab 	.word	0x3d2aaaab
 8018828:	3f480000 	.word	0x3f480000

0801882c <__kernel_sinf>:
 801882c:	ee10 3a10 	vmov	r3, s0
 8018830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018834:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8018838:	da04      	bge.n	8018844 <__kernel_sinf+0x18>
 801883a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801883e:	ee17 3a90 	vmov	r3, s15
 8018842:	b35b      	cbz	r3, 801889c <__kernel_sinf+0x70>
 8018844:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018848:	eddf 7a15 	vldr	s15, [pc, #84]	; 80188a0 <__kernel_sinf+0x74>
 801884c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80188a4 <__kernel_sinf+0x78>
 8018850:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018854:	eddf 7a14 	vldr	s15, [pc, #80]	; 80188a8 <__kernel_sinf+0x7c>
 8018858:	eee6 7a07 	vfma.f32	s15, s12, s14
 801885c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80188ac <__kernel_sinf+0x80>
 8018860:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018864:	eddf 7a12 	vldr	s15, [pc, #72]	; 80188b0 <__kernel_sinf+0x84>
 8018868:	ee60 6a07 	vmul.f32	s13, s0, s14
 801886c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018870:	b930      	cbnz	r0, 8018880 <__kernel_sinf+0x54>
 8018872:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80188b4 <__kernel_sinf+0x88>
 8018876:	eea7 6a27 	vfma.f32	s12, s14, s15
 801887a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801887e:	4770      	bx	lr
 8018880:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018884:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018888:	eee0 7a86 	vfma.f32	s15, s1, s12
 801888c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018890:	eddf 7a09 	vldr	s15, [pc, #36]	; 80188b8 <__kernel_sinf+0x8c>
 8018894:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018898:	ee30 0a60 	vsub.f32	s0, s0, s1
 801889c:	4770      	bx	lr
 801889e:	bf00      	nop
 80188a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80188a4:	b2d72f34 	.word	0xb2d72f34
 80188a8:	3638ef1b 	.word	0x3638ef1b
 80188ac:	b9500d01 	.word	0xb9500d01
 80188b0:	3c088889 	.word	0x3c088889
 80188b4:	be2aaaab 	.word	0xbe2aaaab
 80188b8:	3e2aaaab 	.word	0x3e2aaaab

080188bc <__ieee754_asinf>:
 80188bc:	b538      	push	{r3, r4, r5, lr}
 80188be:	ee10 5a10 	vmov	r5, s0
 80188c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80188c6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80188ca:	ed2d 8b04 	vpush	{d8-d9}
 80188ce:	d10c      	bne.n	80188ea <__ieee754_asinf+0x2e>
 80188d0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8018a48 <__ieee754_asinf+0x18c>
 80188d4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8018a4c <__ieee754_asinf+0x190>
 80188d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80188dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80188e0:	eeb0 0a67 	vmov.f32	s0, s15
 80188e4:	ecbd 8b04 	vpop	{d8-d9}
 80188e8:	bd38      	pop	{r3, r4, r5, pc}
 80188ea:	dd04      	ble.n	80188f6 <__ieee754_asinf+0x3a>
 80188ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80188f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80188f4:	e7f6      	b.n	80188e4 <__ieee754_asinf+0x28>
 80188f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80188fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80188fe:	da0b      	bge.n	8018918 <__ieee754_asinf+0x5c>
 8018900:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8018904:	da52      	bge.n	80189ac <__ieee754_asinf+0xf0>
 8018906:	eddf 7a52 	vldr	s15, [pc, #328]	; 8018a50 <__ieee754_asinf+0x194>
 801890a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801890e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018916:	dce5      	bgt.n	80188e4 <__ieee754_asinf+0x28>
 8018918:	f7ff fdea 	bl	80184f0 <fabsf>
 801891c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8018920:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018924:	ee20 8a27 	vmul.f32	s16, s0, s15
 8018928:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8018a54 <__ieee754_asinf+0x198>
 801892c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8018a58 <__ieee754_asinf+0x19c>
 8018930:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8018a5c <__ieee754_asinf+0x1a0>
 8018934:	eea8 7a27 	vfma.f32	s14, s16, s15
 8018938:	eddf 7a49 	vldr	s15, [pc, #292]	; 8018a60 <__ieee754_asinf+0x1a4>
 801893c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018940:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8018a64 <__ieee754_asinf+0x1a8>
 8018944:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018948:	eddf 7a47 	vldr	s15, [pc, #284]	; 8018a68 <__ieee754_asinf+0x1ac>
 801894c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018950:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8018a6c <__ieee754_asinf+0x1b0>
 8018954:	eea7 9a88 	vfma.f32	s18, s15, s16
 8018958:	eddf 7a45 	vldr	s15, [pc, #276]	; 8018a70 <__ieee754_asinf+0x1b4>
 801895c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8018960:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8018a74 <__ieee754_asinf+0x1b8>
 8018964:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018968:	eddf 7a43 	vldr	s15, [pc, #268]	; 8018a78 <__ieee754_asinf+0x1bc>
 801896c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018970:	eeb0 0a48 	vmov.f32	s0, s16
 8018974:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018978:	f7ff fef6 	bl	8018768 <__ieee754_sqrtf>
 801897c:	4b3f      	ldr	r3, [pc, #252]	; (8018a7c <__ieee754_asinf+0x1c0>)
 801897e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8018982:	429c      	cmp	r4, r3
 8018984:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018988:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801898c:	dd3d      	ble.n	8018a0a <__ieee754_asinf+0x14e>
 801898e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8018992:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8018a80 <__ieee754_asinf+0x1c4>
 8018996:	eee0 7a26 	vfma.f32	s15, s0, s13
 801899a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8018a4c <__ieee754_asinf+0x190>
 801899e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80189a2:	2d00      	cmp	r5, #0
 80189a4:	bfd8      	it	le
 80189a6:	eeb1 0a40 	vnegle.f32	s0, s0
 80189aa:	e79b      	b.n	80188e4 <__ieee754_asinf+0x28>
 80189ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 80189b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8018a58 <__ieee754_asinf+0x19c>
 80189b4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8018a54 <__ieee754_asinf+0x198>
 80189b8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8018a6c <__ieee754_asinf+0x1b0>
 80189bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80189c0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8018a60 <__ieee754_asinf+0x1a4>
 80189c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80189c8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8018a64 <__ieee754_asinf+0x1a8>
 80189cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80189d0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8018a68 <__ieee754_asinf+0x1ac>
 80189d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80189d8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8018a5c <__ieee754_asinf+0x1a0>
 80189dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80189e0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8018a70 <__ieee754_asinf+0x1b4>
 80189e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80189e8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8018a74 <__ieee754_asinf+0x1b8>
 80189ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80189f0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8018a78 <__ieee754_asinf+0x1bc>
 80189f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80189f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8018a00:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8018a04:	eea0 0a27 	vfma.f32	s0, s0, s15
 8018a08:	e76c      	b.n	80188e4 <__ieee754_asinf+0x28>
 8018a0a:	ee10 3a10 	vmov	r3, s0
 8018a0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018a12:	f023 030f 	bic.w	r3, r3, #15
 8018a16:	ee07 3a10 	vmov	s14, r3
 8018a1a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8018a1e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018a22:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018a26:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8018a2a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018a48 <__ieee754_asinf+0x18c>
 8018a2e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8018a32:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8018a36:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8018a84 <__ieee754_asinf+0x1c8>
 8018a3a:	eeb0 6a40 	vmov.f32	s12, s0
 8018a3e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018a42:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018a46:	e7aa      	b.n	801899e <__ieee754_asinf+0xe2>
 8018a48:	b33bbd2e 	.word	0xb33bbd2e
 8018a4c:	3fc90fdb 	.word	0x3fc90fdb
 8018a50:	7149f2ca 	.word	0x7149f2ca
 8018a54:	3a4f7f04 	.word	0x3a4f7f04
 8018a58:	3811ef08 	.word	0x3811ef08
 8018a5c:	3e2aaaab 	.word	0x3e2aaaab
 8018a60:	bd241146 	.word	0xbd241146
 8018a64:	3e4e0aa8 	.word	0x3e4e0aa8
 8018a68:	bea6b090 	.word	0xbea6b090
 8018a6c:	3d9dc62e 	.word	0x3d9dc62e
 8018a70:	bf303361 	.word	0xbf303361
 8018a74:	4001572d 	.word	0x4001572d
 8018a78:	c019d139 	.word	0xc019d139
 8018a7c:	3f799999 	.word	0x3f799999
 8018a80:	333bbd2e 	.word	0x333bbd2e
 8018a84:	3f490fdb 	.word	0x3f490fdb

08018a88 <__ieee754_atan2f>:
 8018a88:	ee10 2a90 	vmov	r2, s1
 8018a8c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8018a90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018a94:	b510      	push	{r4, lr}
 8018a96:	eef0 7a40 	vmov.f32	s15, s0
 8018a9a:	dc06      	bgt.n	8018aaa <__ieee754_atan2f+0x22>
 8018a9c:	ee10 0a10 	vmov	r0, s0
 8018aa0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018aa4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018aa8:	dd04      	ble.n	8018ab4 <__ieee754_atan2f+0x2c>
 8018aaa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018aae:	eeb0 0a67 	vmov.f32	s0, s15
 8018ab2:	bd10      	pop	{r4, pc}
 8018ab4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018ab8:	d103      	bne.n	8018ac2 <__ieee754_atan2f+0x3a>
 8018aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018abe:	f000 bc79 	b.w	80193b4 <atanf>
 8018ac2:	1794      	asrs	r4, r2, #30
 8018ac4:	f004 0402 	and.w	r4, r4, #2
 8018ac8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018acc:	b943      	cbnz	r3, 8018ae0 <__ieee754_atan2f+0x58>
 8018ace:	2c02      	cmp	r4, #2
 8018ad0:	d05e      	beq.n	8018b90 <__ieee754_atan2f+0x108>
 8018ad2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8018ba4 <__ieee754_atan2f+0x11c>
 8018ad6:	2c03      	cmp	r4, #3
 8018ad8:	bf08      	it	eq
 8018ada:	eef0 7a47 	vmoveq.f32	s15, s14
 8018ade:	e7e6      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018ae0:	b941      	cbnz	r1, 8018af4 <__ieee754_atan2f+0x6c>
 8018ae2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8018ba8 <__ieee754_atan2f+0x120>
 8018ae6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8018bac <__ieee754_atan2f+0x124>
 8018aea:	2800      	cmp	r0, #0
 8018aec:	bfb8      	it	lt
 8018aee:	eef0 7a47 	vmovlt.f32	s15, s14
 8018af2:	e7dc      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018af4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018af8:	d110      	bne.n	8018b1c <__ieee754_atan2f+0x94>
 8018afa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018afe:	f104 34ff 	add.w	r4, r4, #4294967295
 8018b02:	d107      	bne.n	8018b14 <__ieee754_atan2f+0x8c>
 8018b04:	2c02      	cmp	r4, #2
 8018b06:	d846      	bhi.n	8018b96 <__ieee754_atan2f+0x10e>
 8018b08:	4b29      	ldr	r3, [pc, #164]	; (8018bb0 <__ieee754_atan2f+0x128>)
 8018b0a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018b0e:	edd3 7a00 	vldr	s15, [r3]
 8018b12:	e7cc      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018b14:	2c02      	cmp	r4, #2
 8018b16:	d841      	bhi.n	8018b9c <__ieee754_atan2f+0x114>
 8018b18:	4b26      	ldr	r3, [pc, #152]	; (8018bb4 <__ieee754_atan2f+0x12c>)
 8018b1a:	e7f6      	b.n	8018b0a <__ieee754_atan2f+0x82>
 8018b1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018b20:	d0df      	beq.n	8018ae2 <__ieee754_atan2f+0x5a>
 8018b22:	1a5b      	subs	r3, r3, r1
 8018b24:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8018b28:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8018b2c:	da1a      	bge.n	8018b64 <__ieee754_atan2f+0xdc>
 8018b2e:	2a00      	cmp	r2, #0
 8018b30:	da01      	bge.n	8018b36 <__ieee754_atan2f+0xae>
 8018b32:	313c      	adds	r1, #60	; 0x3c
 8018b34:	db19      	blt.n	8018b6a <__ieee754_atan2f+0xe2>
 8018b36:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8018b3a:	f7ff fcd9 	bl	80184f0 <fabsf>
 8018b3e:	f000 fc39 	bl	80193b4 <atanf>
 8018b42:	eef0 7a40 	vmov.f32	s15, s0
 8018b46:	2c01      	cmp	r4, #1
 8018b48:	d012      	beq.n	8018b70 <__ieee754_atan2f+0xe8>
 8018b4a:	2c02      	cmp	r4, #2
 8018b4c:	d017      	beq.n	8018b7e <__ieee754_atan2f+0xf6>
 8018b4e:	2c00      	cmp	r4, #0
 8018b50:	d0ad      	beq.n	8018aae <__ieee754_atan2f+0x26>
 8018b52:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018bb8 <__ieee754_atan2f+0x130>
 8018b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b5a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8018bbc <__ieee754_atan2f+0x134>
 8018b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b62:	e7a4      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018b64:	eddf 7a10 	vldr	s15, [pc, #64]	; 8018ba8 <__ieee754_atan2f+0x120>
 8018b68:	e7ed      	b.n	8018b46 <__ieee754_atan2f+0xbe>
 8018b6a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018bc0 <__ieee754_atan2f+0x138>
 8018b6e:	e7ea      	b.n	8018b46 <__ieee754_atan2f+0xbe>
 8018b70:	ee17 3a90 	vmov	r3, s15
 8018b74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018b78:	ee07 3a90 	vmov	s15, r3
 8018b7c:	e797      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018b7e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8018bb8 <__ieee754_atan2f+0x130>
 8018b82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b86:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8018bbc <__ieee754_atan2f+0x134>
 8018b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b8e:	e78e      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018b90:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8018bbc <__ieee754_atan2f+0x134>
 8018b94:	e78b      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018b96:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018bc4 <__ieee754_atan2f+0x13c>
 8018b9a:	e788      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018b9c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018bc0 <__ieee754_atan2f+0x138>
 8018ba0:	e785      	b.n	8018aae <__ieee754_atan2f+0x26>
 8018ba2:	bf00      	nop
 8018ba4:	c0490fdb 	.word	0xc0490fdb
 8018ba8:	3fc90fdb 	.word	0x3fc90fdb
 8018bac:	bfc90fdb 	.word	0xbfc90fdb
 8018bb0:	0801a4c4 	.word	0x0801a4c4
 8018bb4:	0801a4d0 	.word	0x0801a4d0
 8018bb8:	33bbbd2e 	.word	0x33bbbd2e
 8018bbc:	40490fdb 	.word	0x40490fdb
 8018bc0:	00000000 	.word	0x00000000
 8018bc4:	3f490fdb 	.word	0x3f490fdb

08018bc8 <__ieee754_powf>:
 8018bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bcc:	ee10 4a90 	vmov	r4, s1
 8018bd0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8018bd4:	ed2d 8b02 	vpush	{d8}
 8018bd8:	ee10 7a10 	vmov	r7, s0
 8018bdc:	eeb0 8a40 	vmov.f32	s16, s0
 8018be0:	eef0 8a60 	vmov.f32	s17, s1
 8018be4:	d10c      	bne.n	8018c00 <__ieee754_powf+0x38>
 8018be6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8018bea:	007f      	lsls	r7, r7, #1
 8018bec:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8018bf0:	f240 8292 	bls.w	8019118 <__ieee754_powf+0x550>
 8018bf4:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018bf8:	ecbd 8b02 	vpop	{d8}
 8018bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c00:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8018c04:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8018c08:	dcf4      	bgt.n	8018bf4 <__ieee754_powf+0x2c>
 8018c0a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018c0e:	dd08      	ble.n	8018c22 <__ieee754_powf+0x5a>
 8018c10:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8018c14:	d1ee      	bne.n	8018bf4 <__ieee754_powf+0x2c>
 8018c16:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8018c1a:	0064      	lsls	r4, r4, #1
 8018c1c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8018c20:	e7e6      	b.n	8018bf0 <__ieee754_powf+0x28>
 8018c22:	2f00      	cmp	r7, #0
 8018c24:	da20      	bge.n	8018c68 <__ieee754_powf+0xa0>
 8018c26:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8018c2a:	da2d      	bge.n	8018c88 <__ieee754_powf+0xc0>
 8018c2c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018c30:	f2c0 827b 	blt.w	801912a <__ieee754_powf+0x562>
 8018c34:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8018c38:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018c3c:	fa48 f603 	asr.w	r6, r8, r3
 8018c40:	fa06 f303 	lsl.w	r3, r6, r3
 8018c44:	4543      	cmp	r3, r8
 8018c46:	f040 8270 	bne.w	801912a <__ieee754_powf+0x562>
 8018c4a:	f006 0601 	and.w	r6, r6, #1
 8018c4e:	f1c6 0602 	rsb	r6, r6, #2
 8018c52:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018c56:	d11f      	bne.n	8018c98 <__ieee754_powf+0xd0>
 8018c58:	2c00      	cmp	r4, #0
 8018c5a:	f280 8263 	bge.w	8019124 <__ieee754_powf+0x55c>
 8018c5e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018c62:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018c66:	e7c7      	b.n	8018bf8 <__ieee754_powf+0x30>
 8018c68:	2600      	movs	r6, #0
 8018c6a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018c6e:	d1f0      	bne.n	8018c52 <__ieee754_powf+0x8a>
 8018c70:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8018c74:	f000 8250 	beq.w	8019118 <__ieee754_powf+0x550>
 8018c78:	dd08      	ble.n	8018c8c <__ieee754_powf+0xc4>
 8018c7a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8018f80 <__ieee754_powf+0x3b8>
 8018c7e:	2c00      	cmp	r4, #0
 8018c80:	bfa8      	it	ge
 8018c82:	eeb0 0a68 	vmovge.f32	s0, s17
 8018c86:	e7b7      	b.n	8018bf8 <__ieee754_powf+0x30>
 8018c88:	2602      	movs	r6, #2
 8018c8a:	e7ee      	b.n	8018c6a <__ieee754_powf+0xa2>
 8018c8c:	2c00      	cmp	r4, #0
 8018c8e:	f280 8246 	bge.w	801911e <__ieee754_powf+0x556>
 8018c92:	eeb1 0a68 	vneg.f32	s0, s17
 8018c96:	e7af      	b.n	8018bf8 <__ieee754_powf+0x30>
 8018c98:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8018c9c:	d102      	bne.n	8018ca4 <__ieee754_powf+0xdc>
 8018c9e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018ca2:	e7a9      	b.n	8018bf8 <__ieee754_powf+0x30>
 8018ca4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8018ca8:	eeb0 0a48 	vmov.f32	s0, s16
 8018cac:	d107      	bne.n	8018cbe <__ieee754_powf+0xf6>
 8018cae:	2f00      	cmp	r7, #0
 8018cb0:	db05      	blt.n	8018cbe <__ieee754_powf+0xf6>
 8018cb2:	ecbd 8b02 	vpop	{d8}
 8018cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cba:	f7ff bd55 	b.w	8018768 <__ieee754_sqrtf>
 8018cbe:	f7ff fc17 	bl	80184f0 <fabsf>
 8018cc2:	b125      	cbz	r5, 8018cce <__ieee754_powf+0x106>
 8018cc4:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8018cc8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018ccc:	d115      	bne.n	8018cfa <__ieee754_powf+0x132>
 8018cce:	2c00      	cmp	r4, #0
 8018cd0:	bfbc      	itt	lt
 8018cd2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8018cd6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018cda:	2f00      	cmp	r7, #0
 8018cdc:	da8c      	bge.n	8018bf8 <__ieee754_powf+0x30>
 8018cde:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8018ce2:	4335      	orrs	r5, r6
 8018ce4:	d104      	bne.n	8018cf0 <__ieee754_powf+0x128>
 8018ce6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018cea:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018cee:	e783      	b.n	8018bf8 <__ieee754_powf+0x30>
 8018cf0:	2e01      	cmp	r6, #1
 8018cf2:	d181      	bne.n	8018bf8 <__ieee754_powf+0x30>
 8018cf4:	eeb1 0a40 	vneg.f32	s0, s0
 8018cf8:	e77e      	b.n	8018bf8 <__ieee754_powf+0x30>
 8018cfa:	0ff8      	lsrs	r0, r7, #31
 8018cfc:	3801      	subs	r0, #1
 8018cfe:	ea56 0300 	orrs.w	r3, r6, r0
 8018d02:	d104      	bne.n	8018d0e <__ieee754_powf+0x146>
 8018d04:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018d08:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018d0c:	e774      	b.n	8018bf8 <__ieee754_powf+0x30>
 8018d0e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8018d12:	dd73      	ble.n	8018dfc <__ieee754_powf+0x234>
 8018d14:	4b9b      	ldr	r3, [pc, #620]	; (8018f84 <__ieee754_powf+0x3bc>)
 8018d16:	429d      	cmp	r5, r3
 8018d18:	dc08      	bgt.n	8018d2c <__ieee754_powf+0x164>
 8018d1a:	2c00      	cmp	r4, #0
 8018d1c:	da0b      	bge.n	8018d36 <__ieee754_powf+0x16e>
 8018d1e:	2000      	movs	r0, #0
 8018d20:	ecbd 8b02 	vpop	{d8}
 8018d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d28:	f000 bc9a 	b.w	8019660 <__math_oflowf>
 8018d2c:	4b96      	ldr	r3, [pc, #600]	; (8018f88 <__ieee754_powf+0x3c0>)
 8018d2e:	429d      	cmp	r5, r3
 8018d30:	dd08      	ble.n	8018d44 <__ieee754_powf+0x17c>
 8018d32:	2c00      	cmp	r4, #0
 8018d34:	dcf3      	bgt.n	8018d1e <__ieee754_powf+0x156>
 8018d36:	2000      	movs	r0, #0
 8018d38:	ecbd 8b02 	vpop	{d8}
 8018d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d40:	f000 bc88 	b.w	8019654 <__math_uflowf>
 8018d44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018d48:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d4c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8018f8c <__ieee754_powf+0x3c4>
 8018d50:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018d54:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018d58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018d5c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018d60:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d68:	eddf 7a89 	vldr	s15, [pc, #548]	; 8018f90 <__ieee754_powf+0x3c8>
 8018d6c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8018d70:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8018f94 <__ieee754_powf+0x3cc>
 8018d74:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018d78:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8018f98 <__ieee754_powf+0x3d0>
 8018d7c:	eef0 6a67 	vmov.f32	s13, s15
 8018d80:	eee0 6a07 	vfma.f32	s13, s0, s14
 8018d84:	ee16 3a90 	vmov	r3, s13
 8018d88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018d8c:	f023 030f 	bic.w	r3, r3, #15
 8018d90:	ee06 3a90 	vmov	s13, r3
 8018d94:	eee0 6a47 	vfms.f32	s13, s0, s14
 8018d98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018d9c:	3e01      	subs	r6, #1
 8018d9e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8018da2:	4306      	orrs	r6, r0
 8018da4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018da8:	f024 040f 	bic.w	r4, r4, #15
 8018dac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018db0:	bf08      	it	eq
 8018db2:	eeb0 8a47 	vmoveq.f32	s16, s14
 8018db6:	ee07 4a10 	vmov	s14, r4
 8018dba:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018dbe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018dc2:	ee07 3a90 	vmov	s15, r3
 8018dc6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8018dca:	ee07 4a10 	vmov	s14, r4
 8018dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018dd2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018dd6:	ee17 1a10 	vmov	r1, s14
 8018dda:	2900      	cmp	r1, #0
 8018ddc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018de0:	f340 817c 	ble.w	80190dc <__ieee754_powf+0x514>
 8018de4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8018de8:	f340 80f8 	ble.w	8018fdc <__ieee754_powf+0x414>
 8018dec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018df4:	bf4c      	ite	mi
 8018df6:	2001      	movmi	r0, #1
 8018df8:	2000      	movpl	r0, #0
 8018dfa:	e791      	b.n	8018d20 <__ieee754_powf+0x158>
 8018dfc:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8018e00:	bf01      	itttt	eq
 8018e02:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8018f9c <__ieee754_powf+0x3d4>
 8018e06:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018e0a:	f06f 0317 	mvneq.w	r3, #23
 8018e0e:	ee17 5a90 	vmoveq	r5, s15
 8018e12:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8018e16:	bf18      	it	ne
 8018e18:	2300      	movne	r3, #0
 8018e1a:	3a7f      	subs	r2, #127	; 0x7f
 8018e1c:	441a      	add	r2, r3
 8018e1e:	4b60      	ldr	r3, [pc, #384]	; (8018fa0 <__ieee754_powf+0x3d8>)
 8018e20:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8018e24:	429d      	cmp	r5, r3
 8018e26:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8018e2a:	dd06      	ble.n	8018e3a <__ieee754_powf+0x272>
 8018e2c:	4b5d      	ldr	r3, [pc, #372]	; (8018fa4 <__ieee754_powf+0x3dc>)
 8018e2e:	429d      	cmp	r5, r3
 8018e30:	f340 80a4 	ble.w	8018f7c <__ieee754_powf+0x3b4>
 8018e34:	3201      	adds	r2, #1
 8018e36:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018e3a:	2500      	movs	r5, #0
 8018e3c:	4b5a      	ldr	r3, [pc, #360]	; (8018fa8 <__ieee754_powf+0x3e0>)
 8018e3e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8018e42:	ee07 1a10 	vmov	s14, r1
 8018e46:	edd3 5a00 	vldr	s11, [r3]
 8018e4a:	4b58      	ldr	r3, [pc, #352]	; (8018fac <__ieee754_powf+0x3e4>)
 8018e4c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8018e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018e54:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8018e58:	1049      	asrs	r1, r1, #1
 8018e5a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8018e5e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8018e62:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8018e66:	ee37 6a65 	vsub.f32	s12, s14, s11
 8018e6a:	ee07 1a90 	vmov	s15, r1
 8018e6e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8018e72:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8018e76:	ee15 7a10 	vmov	r7, s10
 8018e7a:	401f      	ands	r7, r3
 8018e7c:	ee06 7a90 	vmov	s13, r7
 8018e80:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8018e84:	ee37 7a65 	vsub.f32	s14, s14, s11
 8018e88:	ee65 7a05 	vmul.f32	s15, s10, s10
 8018e8c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018e90:	eddf 5a47 	vldr	s11, [pc, #284]	; 8018fb0 <__ieee754_powf+0x3e8>
 8018e94:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8018fb4 <__ieee754_powf+0x3ec>
 8018e98:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018e9c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8018fb8 <__ieee754_powf+0x3f0>
 8018ea0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018ea4:	eddf 5a39 	vldr	s11, [pc, #228]	; 8018f8c <__ieee754_powf+0x3c4>
 8018ea8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018eac:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8018fbc <__ieee754_powf+0x3f4>
 8018eb0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018eb4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8018fc0 <__ieee754_powf+0x3f8>
 8018eb8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018ebc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018ec0:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018ec4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018ec8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018ecc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8018ed0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018ed4:	eef0 5a67 	vmov.f32	s11, s15
 8018ed8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018edc:	ee75 5a87 	vadd.f32	s11, s11, s14
 8018ee0:	ee15 1a90 	vmov	r1, s11
 8018ee4:	4019      	ands	r1, r3
 8018ee6:	ee05 1a90 	vmov	s11, r1
 8018eea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018eee:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8018ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ef6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018efa:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018efe:	eeb0 6a67 	vmov.f32	s12, s15
 8018f02:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018f06:	ee16 1a10 	vmov	r1, s12
 8018f0a:	4019      	ands	r1, r3
 8018f0c:	ee07 1a10 	vmov	s14, r1
 8018f10:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018f14:	ee06 1a10 	vmov	s12, r1
 8018f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f1c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8018fc4 <__ieee754_powf+0x3fc>
 8018f20:	4929      	ldr	r1, [pc, #164]	; (8018fc8 <__ieee754_powf+0x400>)
 8018f22:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8018fcc <__ieee754_powf+0x404>
 8018f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f2a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8018fd0 <__ieee754_powf+0x408>
 8018f2e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018f32:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8018f36:	ed91 7a00 	vldr	s14, [r1]
 8018f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018f3e:	ee07 2a10 	vmov	s14, r2
 8018f42:	eef0 6a67 	vmov.f32	s13, s15
 8018f46:	4a23      	ldr	r2, [pc, #140]	; (8018fd4 <__ieee754_powf+0x40c>)
 8018f48:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018f4c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8018f50:	ed92 5a00 	vldr	s10, [r2]
 8018f54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f58:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018f5c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8018f60:	ee16 2a90 	vmov	r2, s13
 8018f64:	4013      	ands	r3, r2
 8018f66:	ee06 3a90 	vmov	s13, r3
 8018f6a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018f6e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8018f72:	eea6 7a65 	vfms.f32	s14, s12, s11
 8018f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f7a:	e70f      	b.n	8018d9c <__ieee754_powf+0x1d4>
 8018f7c:	2501      	movs	r5, #1
 8018f7e:	e75d      	b.n	8018e3c <__ieee754_powf+0x274>
 8018f80:	00000000 	.word	0x00000000
 8018f84:	3f7ffff3 	.word	0x3f7ffff3
 8018f88:	3f800007 	.word	0x3f800007
 8018f8c:	3eaaaaab 	.word	0x3eaaaaab
 8018f90:	3fb8aa3b 	.word	0x3fb8aa3b
 8018f94:	36eca570 	.word	0x36eca570
 8018f98:	3fb8aa00 	.word	0x3fb8aa00
 8018f9c:	4b800000 	.word	0x4b800000
 8018fa0:	001cc471 	.word	0x001cc471
 8018fa4:	005db3d6 	.word	0x005db3d6
 8018fa8:	0801a4dc 	.word	0x0801a4dc
 8018fac:	fffff000 	.word	0xfffff000
 8018fb0:	3e6c3255 	.word	0x3e6c3255
 8018fb4:	3e53f142 	.word	0x3e53f142
 8018fb8:	3e8ba305 	.word	0x3e8ba305
 8018fbc:	3edb6db7 	.word	0x3edb6db7
 8018fc0:	3f19999a 	.word	0x3f19999a
 8018fc4:	3f76384f 	.word	0x3f76384f
 8018fc8:	0801a4ec 	.word	0x0801a4ec
 8018fcc:	3f763800 	.word	0x3f763800
 8018fd0:	369dc3a0 	.word	0x369dc3a0
 8018fd4:	0801a4e4 	.word	0x0801a4e4
 8018fd8:	3338aa3c 	.word	0x3338aa3c
 8018fdc:	f040 8093 	bne.w	8019106 <__ieee754_powf+0x53e>
 8018fe0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8018fd8 <__ieee754_powf+0x410>
 8018fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018fe8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018fec:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff4:	f73f aefa 	bgt.w	8018dec <__ieee754_powf+0x224>
 8018ff8:	15db      	asrs	r3, r3, #23
 8018ffa:	3b7e      	subs	r3, #126	; 0x7e
 8018ffc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8019000:	4118      	asrs	r0, r3
 8019002:	4408      	add	r0, r1
 8019004:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019008:	4a49      	ldr	r2, [pc, #292]	; (8019130 <__ieee754_powf+0x568>)
 801900a:	3b7f      	subs	r3, #127	; 0x7f
 801900c:	411a      	asrs	r2, r3
 801900e:	4002      	ands	r2, r0
 8019010:	ee07 2a10 	vmov	s14, r2
 8019014:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8019018:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801901c:	f1c3 0317 	rsb	r3, r3, #23
 8019020:	4118      	asrs	r0, r3
 8019022:	2900      	cmp	r1, #0
 8019024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019028:	bfb8      	it	lt
 801902a:	4240      	neglt	r0, r0
 801902c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019030:	eddf 6a40 	vldr	s13, [pc, #256]	; 8019134 <__ieee754_powf+0x56c>
 8019034:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8019138 <__ieee754_powf+0x570>
 8019038:	ee17 3a10 	vmov	r3, s14
 801903c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019040:	f023 030f 	bic.w	r3, r3, #15
 8019044:	ee07 3a10 	vmov	s14, r3
 8019048:	ee77 7a67 	vsub.f32	s15, s14, s15
 801904c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019050:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019054:	eddf 7a39 	vldr	s15, [pc, #228]	; 801913c <__ieee754_powf+0x574>
 8019058:	ee67 7a27 	vmul.f32	s15, s14, s15
 801905c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019060:	eef0 6a67 	vmov.f32	s13, s15
 8019064:	eee7 6a06 	vfma.f32	s13, s14, s12
 8019068:	eef0 5a66 	vmov.f32	s11, s13
 801906c:	eee7 5a46 	vfms.f32	s11, s14, s12
 8019070:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019074:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019078:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8019140 <__ieee754_powf+0x578>
 801907c:	eddf 5a31 	vldr	s11, [pc, #196]	; 8019144 <__ieee754_powf+0x57c>
 8019080:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019084:	eddf 5a30 	vldr	s11, [pc, #192]	; 8019148 <__ieee754_powf+0x580>
 8019088:	eee6 5a07 	vfma.f32	s11, s12, s14
 801908c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801914c <__ieee754_powf+0x584>
 8019090:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019094:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8019150 <__ieee754_powf+0x588>
 8019098:	eee6 5a07 	vfma.f32	s11, s12, s14
 801909c:	eeb0 6a66 	vmov.f32	s12, s13
 80190a0:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80190a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80190a8:	ee66 5a86 	vmul.f32	s11, s13, s12
 80190ac:	ee36 6a47 	vsub.f32	s12, s12, s14
 80190b0:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80190b4:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80190b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80190c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80190c4:	ee10 3a10 	vmov	r3, s0
 80190c8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80190cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80190d0:	da1f      	bge.n	8019112 <__ieee754_powf+0x54a>
 80190d2:	f000 fa43 	bl	801955c <scalbnf>
 80190d6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80190da:	e58d      	b.n	8018bf8 <__ieee754_powf+0x30>
 80190dc:	4a1d      	ldr	r2, [pc, #116]	; (8019154 <__ieee754_powf+0x58c>)
 80190de:	4293      	cmp	r3, r2
 80190e0:	dd07      	ble.n	80190f2 <__ieee754_powf+0x52a>
 80190e2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80190e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ea:	bf4c      	ite	mi
 80190ec:	2001      	movmi	r0, #1
 80190ee:	2000      	movpl	r0, #0
 80190f0:	e622      	b.n	8018d38 <__ieee754_powf+0x170>
 80190f2:	d108      	bne.n	8019106 <__ieee754_powf+0x53e>
 80190f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80190f8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80190fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019100:	f6ff af7a 	blt.w	8018ff8 <__ieee754_powf+0x430>
 8019104:	e7ed      	b.n	80190e2 <__ieee754_powf+0x51a>
 8019106:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801910a:	f73f af75 	bgt.w	8018ff8 <__ieee754_powf+0x430>
 801910e:	2000      	movs	r0, #0
 8019110:	e78c      	b.n	801902c <__ieee754_powf+0x464>
 8019112:	ee00 3a10 	vmov	s0, r3
 8019116:	e7de      	b.n	80190d6 <__ieee754_powf+0x50e>
 8019118:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801911c:	e56c      	b.n	8018bf8 <__ieee754_powf+0x30>
 801911e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019158 <__ieee754_powf+0x590>
 8019122:	e569      	b.n	8018bf8 <__ieee754_powf+0x30>
 8019124:	eeb0 0a48 	vmov.f32	s0, s16
 8019128:	e566      	b.n	8018bf8 <__ieee754_powf+0x30>
 801912a:	2600      	movs	r6, #0
 801912c:	e591      	b.n	8018c52 <__ieee754_powf+0x8a>
 801912e:	bf00      	nop
 8019130:	ff800000 	.word	0xff800000
 8019134:	3f317218 	.word	0x3f317218
 8019138:	3f317200 	.word	0x3f317200
 801913c:	35bfbe8c 	.word	0x35bfbe8c
 8019140:	b5ddea0e 	.word	0xb5ddea0e
 8019144:	3331bb4c 	.word	0x3331bb4c
 8019148:	388ab355 	.word	0x388ab355
 801914c:	bb360b61 	.word	0xbb360b61
 8019150:	3e2aaaab 	.word	0x3e2aaaab
 8019154:	43160000 	.word	0x43160000
 8019158:	00000000 	.word	0x00000000

0801915c <__ieee754_rem_pio2f>:
 801915c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801915e:	ee10 6a10 	vmov	r6, s0
 8019162:	4b86      	ldr	r3, [pc, #536]	; (801937c <__ieee754_rem_pio2f+0x220>)
 8019164:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019168:	429d      	cmp	r5, r3
 801916a:	b087      	sub	sp, #28
 801916c:	4604      	mov	r4, r0
 801916e:	dc05      	bgt.n	801917c <__ieee754_rem_pio2f+0x20>
 8019170:	2300      	movs	r3, #0
 8019172:	ed80 0a00 	vstr	s0, [r0]
 8019176:	6043      	str	r3, [r0, #4]
 8019178:	2000      	movs	r0, #0
 801917a:	e020      	b.n	80191be <__ieee754_rem_pio2f+0x62>
 801917c:	4b80      	ldr	r3, [pc, #512]	; (8019380 <__ieee754_rem_pio2f+0x224>)
 801917e:	429d      	cmp	r5, r3
 8019180:	dc38      	bgt.n	80191f4 <__ieee754_rem_pio2f+0x98>
 8019182:	2e00      	cmp	r6, #0
 8019184:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8019384 <__ieee754_rem_pio2f+0x228>
 8019188:	4b7f      	ldr	r3, [pc, #508]	; (8019388 <__ieee754_rem_pio2f+0x22c>)
 801918a:	f025 050f 	bic.w	r5, r5, #15
 801918e:	dd18      	ble.n	80191c2 <__ieee754_rem_pio2f+0x66>
 8019190:	429d      	cmp	r5, r3
 8019192:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019196:	bf09      	itett	eq
 8019198:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801938c <__ieee754_rem_pio2f+0x230>
 801919c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8019390 <__ieee754_rem_pio2f+0x234>
 80191a0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80191a4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8019394 <__ieee754_rem_pio2f+0x238>
 80191a8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80191ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80191b0:	edc0 6a00 	vstr	s13, [r0]
 80191b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80191b8:	edc0 7a01 	vstr	s15, [r0, #4]
 80191bc:	2001      	movs	r0, #1
 80191be:	b007      	add	sp, #28
 80191c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191c2:	429d      	cmp	r5, r3
 80191c4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80191c8:	bf09      	itett	eq
 80191ca:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801938c <__ieee754_rem_pio2f+0x230>
 80191ce:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8019390 <__ieee754_rem_pio2f+0x234>
 80191d2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80191d6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8019394 <__ieee754_rem_pio2f+0x238>
 80191da:	ee77 6a87 	vadd.f32	s13, s15, s14
 80191de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80191e2:	edc0 6a00 	vstr	s13, [r0]
 80191e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80191ea:	edc0 7a01 	vstr	s15, [r0, #4]
 80191ee:	f04f 30ff 	mov.w	r0, #4294967295
 80191f2:	e7e4      	b.n	80191be <__ieee754_rem_pio2f+0x62>
 80191f4:	4b68      	ldr	r3, [pc, #416]	; (8019398 <__ieee754_rem_pio2f+0x23c>)
 80191f6:	429d      	cmp	r5, r3
 80191f8:	dc71      	bgt.n	80192de <__ieee754_rem_pio2f+0x182>
 80191fa:	f7ff f979 	bl	80184f0 <fabsf>
 80191fe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801939c <__ieee754_rem_pio2f+0x240>
 8019202:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019206:	eee0 7a07 	vfma.f32	s15, s0, s14
 801920a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801920e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019212:	ee17 0a90 	vmov	r0, s15
 8019216:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019384 <__ieee754_rem_pio2f+0x228>
 801921a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801921e:	281f      	cmp	r0, #31
 8019220:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019390 <__ieee754_rem_pio2f+0x234>
 8019224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019228:	eeb1 6a47 	vneg.f32	s12, s14
 801922c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019230:	ee16 2a90 	vmov	r2, s13
 8019234:	dc1c      	bgt.n	8019270 <__ieee754_rem_pio2f+0x114>
 8019236:	495a      	ldr	r1, [pc, #360]	; (80193a0 <__ieee754_rem_pio2f+0x244>)
 8019238:	1e47      	subs	r7, r0, #1
 801923a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801923e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019242:	428b      	cmp	r3, r1
 8019244:	d014      	beq.n	8019270 <__ieee754_rem_pio2f+0x114>
 8019246:	6022      	str	r2, [r4, #0]
 8019248:	ed94 7a00 	vldr	s14, [r4]
 801924c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019250:	2e00      	cmp	r6, #0
 8019252:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019256:	ed84 0a01 	vstr	s0, [r4, #4]
 801925a:	dab0      	bge.n	80191be <__ieee754_rem_pio2f+0x62>
 801925c:	eeb1 7a47 	vneg.f32	s14, s14
 8019260:	eeb1 0a40 	vneg.f32	s0, s0
 8019264:	ed84 7a00 	vstr	s14, [r4]
 8019268:	ed84 0a01 	vstr	s0, [r4, #4]
 801926c:	4240      	negs	r0, r0
 801926e:	e7a6      	b.n	80191be <__ieee754_rem_pio2f+0x62>
 8019270:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019274:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8019278:	2908      	cmp	r1, #8
 801927a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801927e:	dde2      	ble.n	8019246 <__ieee754_rem_pio2f+0xea>
 8019280:	eddf 5a42 	vldr	s11, [pc, #264]	; 801938c <__ieee754_rem_pio2f+0x230>
 8019284:	eef0 6a40 	vmov.f32	s13, s0
 8019288:	eee6 6a25 	vfma.f32	s13, s12, s11
 801928c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019290:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019294:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019394 <__ieee754_rem_pio2f+0x238>
 8019298:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801929c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80192a0:	ee15 2a90 	vmov	r2, s11
 80192a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80192a8:	1a5b      	subs	r3, r3, r1
 80192aa:	2b19      	cmp	r3, #25
 80192ac:	dc04      	bgt.n	80192b8 <__ieee754_rem_pio2f+0x15c>
 80192ae:	edc4 5a00 	vstr	s11, [r4]
 80192b2:	eeb0 0a66 	vmov.f32	s0, s13
 80192b6:	e7c7      	b.n	8019248 <__ieee754_rem_pio2f+0xec>
 80192b8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80193a4 <__ieee754_rem_pio2f+0x248>
 80192bc:	eeb0 0a66 	vmov.f32	s0, s13
 80192c0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80192c4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80192c8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80193a8 <__ieee754_rem_pio2f+0x24c>
 80192cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80192d0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80192d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80192d8:	ed84 7a00 	vstr	s14, [r4]
 80192dc:	e7b4      	b.n	8019248 <__ieee754_rem_pio2f+0xec>
 80192de:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80192e2:	db06      	blt.n	80192f2 <__ieee754_rem_pio2f+0x196>
 80192e4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80192e8:	edc0 7a01 	vstr	s15, [r0, #4]
 80192ec:	edc0 7a00 	vstr	s15, [r0]
 80192f0:	e742      	b.n	8019178 <__ieee754_rem_pio2f+0x1c>
 80192f2:	15ea      	asrs	r2, r5, #23
 80192f4:	3a86      	subs	r2, #134	; 0x86
 80192f6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80192fa:	ee07 3a90 	vmov	s15, r3
 80192fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019302:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80193ac <__ieee754_rem_pio2f+0x250>
 8019306:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801930a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801930e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019312:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019316:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801931a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801931e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019322:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019326:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801932a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801932e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019332:	edcd 7a05 	vstr	s15, [sp, #20]
 8019336:	d11e      	bne.n	8019376 <__ieee754_rem_pio2f+0x21a>
 8019338:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019340:	bf14      	ite	ne
 8019342:	2302      	movne	r3, #2
 8019344:	2301      	moveq	r3, #1
 8019346:	491a      	ldr	r1, [pc, #104]	; (80193b0 <__ieee754_rem_pio2f+0x254>)
 8019348:	9101      	str	r1, [sp, #4]
 801934a:	2102      	movs	r1, #2
 801934c:	9100      	str	r1, [sp, #0]
 801934e:	a803      	add	r0, sp, #12
 8019350:	4621      	mov	r1, r4
 8019352:	f000 f98b 	bl	801966c <__kernel_rem_pio2f>
 8019356:	2e00      	cmp	r6, #0
 8019358:	f6bf af31 	bge.w	80191be <__ieee754_rem_pio2f+0x62>
 801935c:	edd4 7a00 	vldr	s15, [r4]
 8019360:	eef1 7a67 	vneg.f32	s15, s15
 8019364:	edc4 7a00 	vstr	s15, [r4]
 8019368:	edd4 7a01 	vldr	s15, [r4, #4]
 801936c:	eef1 7a67 	vneg.f32	s15, s15
 8019370:	edc4 7a01 	vstr	s15, [r4, #4]
 8019374:	e77a      	b.n	801926c <__ieee754_rem_pio2f+0x110>
 8019376:	2303      	movs	r3, #3
 8019378:	e7e5      	b.n	8019346 <__ieee754_rem_pio2f+0x1ea>
 801937a:	bf00      	nop
 801937c:	3f490fd8 	.word	0x3f490fd8
 8019380:	4016cbe3 	.word	0x4016cbe3
 8019384:	3fc90f80 	.word	0x3fc90f80
 8019388:	3fc90fd0 	.word	0x3fc90fd0
 801938c:	37354400 	.word	0x37354400
 8019390:	37354443 	.word	0x37354443
 8019394:	2e85a308 	.word	0x2e85a308
 8019398:	43490f80 	.word	0x43490f80
 801939c:	3f22f984 	.word	0x3f22f984
 80193a0:	0801a4f4 	.word	0x0801a4f4
 80193a4:	2e85a300 	.word	0x2e85a300
 80193a8:	248d3132 	.word	0x248d3132
 80193ac:	43800000 	.word	0x43800000
 80193b0:	0801a574 	.word	0x0801a574

080193b4 <atanf>:
 80193b4:	b538      	push	{r3, r4, r5, lr}
 80193b6:	ee10 5a10 	vmov	r5, s0
 80193ba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80193be:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80193c2:	eef0 7a40 	vmov.f32	s15, s0
 80193c6:	db10      	blt.n	80193ea <atanf+0x36>
 80193c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80193cc:	dd04      	ble.n	80193d8 <atanf+0x24>
 80193ce:	ee70 7a00 	vadd.f32	s15, s0, s0
 80193d2:	eeb0 0a67 	vmov.f32	s0, s15
 80193d6:	bd38      	pop	{r3, r4, r5, pc}
 80193d8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8019510 <atanf+0x15c>
 80193dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8019514 <atanf+0x160>
 80193e0:	2d00      	cmp	r5, #0
 80193e2:	bfd8      	it	le
 80193e4:	eef0 7a47 	vmovle.f32	s15, s14
 80193e8:	e7f3      	b.n	80193d2 <atanf+0x1e>
 80193ea:	4b4b      	ldr	r3, [pc, #300]	; (8019518 <atanf+0x164>)
 80193ec:	429c      	cmp	r4, r3
 80193ee:	dc10      	bgt.n	8019412 <atanf+0x5e>
 80193f0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80193f4:	da0a      	bge.n	801940c <atanf+0x58>
 80193f6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801951c <atanf+0x168>
 80193fa:	ee30 7a07 	vadd.f32	s14, s0, s14
 80193fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019402:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801940a:	dce2      	bgt.n	80193d2 <atanf+0x1e>
 801940c:	f04f 33ff 	mov.w	r3, #4294967295
 8019410:	e013      	b.n	801943a <atanf+0x86>
 8019412:	f7ff f86d 	bl	80184f0 <fabsf>
 8019416:	4b42      	ldr	r3, [pc, #264]	; (8019520 <atanf+0x16c>)
 8019418:	429c      	cmp	r4, r3
 801941a:	dc4f      	bgt.n	80194bc <atanf+0x108>
 801941c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019420:	429c      	cmp	r4, r3
 8019422:	dc41      	bgt.n	80194a8 <atanf+0xf4>
 8019424:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019428:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801942c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019430:	2300      	movs	r3, #0
 8019432:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019436:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801943a:	1c5a      	adds	r2, r3, #1
 801943c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019440:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019524 <atanf+0x170>
 8019444:	eddf 5a38 	vldr	s11, [pc, #224]	; 8019528 <atanf+0x174>
 8019448:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801952c <atanf+0x178>
 801944c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019450:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019454:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019530 <atanf+0x17c>
 8019458:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801945c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8019534 <atanf+0x180>
 8019460:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019464:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019538 <atanf+0x184>
 8019468:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801946c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801953c <atanf+0x188>
 8019470:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019474:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8019540 <atanf+0x18c>
 8019478:	eea6 5a87 	vfma.f32	s10, s13, s14
 801947c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8019544 <atanf+0x190>
 8019480:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019484:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8019548 <atanf+0x194>
 8019488:	eea7 5a26 	vfma.f32	s10, s14, s13
 801948c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801954c <atanf+0x198>
 8019490:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019494:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019498:	eea5 7a86 	vfma.f32	s14, s11, s12
 801949c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80194a0:	d121      	bne.n	80194e6 <atanf+0x132>
 80194a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194a6:	e794      	b.n	80193d2 <atanf+0x1e>
 80194a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80194ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80194b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80194b4:	2301      	movs	r3, #1
 80194b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80194ba:	e7be      	b.n	801943a <atanf+0x86>
 80194bc:	4b24      	ldr	r3, [pc, #144]	; (8019550 <atanf+0x19c>)
 80194be:	429c      	cmp	r4, r3
 80194c0:	dc0b      	bgt.n	80194da <atanf+0x126>
 80194c2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80194c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80194ca:	eea0 7a27 	vfma.f32	s14, s0, s15
 80194ce:	2302      	movs	r3, #2
 80194d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80194d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80194d8:	e7af      	b.n	801943a <atanf+0x86>
 80194da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80194de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80194e2:	2303      	movs	r3, #3
 80194e4:	e7a9      	b.n	801943a <atanf+0x86>
 80194e6:	4a1b      	ldr	r2, [pc, #108]	; (8019554 <atanf+0x1a0>)
 80194e8:	491b      	ldr	r1, [pc, #108]	; (8019558 <atanf+0x1a4>)
 80194ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80194ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80194f2:	edd3 6a00 	vldr	s13, [r3]
 80194f6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80194fa:	2d00      	cmp	r5, #0
 80194fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019500:	edd2 7a00 	vldr	s15, [r2]
 8019504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019508:	bfb8      	it	lt
 801950a:	eef1 7a67 	vneglt.f32	s15, s15
 801950e:	e760      	b.n	80193d2 <atanf+0x1e>
 8019510:	3fc90fdb 	.word	0x3fc90fdb
 8019514:	bfc90fdb 	.word	0xbfc90fdb
 8019518:	3edfffff 	.word	0x3edfffff
 801951c:	7149f2ca 	.word	0x7149f2ca
 8019520:	3f97ffff 	.word	0x3f97ffff
 8019524:	3c8569d7 	.word	0x3c8569d7
 8019528:	3d4bda59 	.word	0x3d4bda59
 801952c:	bd6ef16b 	.word	0xbd6ef16b
 8019530:	3d886b35 	.word	0x3d886b35
 8019534:	3dba2e6e 	.word	0x3dba2e6e
 8019538:	3e124925 	.word	0x3e124925
 801953c:	3eaaaaab 	.word	0x3eaaaaab
 8019540:	bd15a221 	.word	0xbd15a221
 8019544:	bd9d8795 	.word	0xbd9d8795
 8019548:	bde38e38 	.word	0xbde38e38
 801954c:	be4ccccd 	.word	0xbe4ccccd
 8019550:	401bffff 	.word	0x401bffff
 8019554:	0801a88c 	.word	0x0801a88c
 8019558:	0801a89c 	.word	0x0801a89c

0801955c <scalbnf>:
 801955c:	ee10 3a10 	vmov	r3, s0
 8019560:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019564:	d02b      	beq.n	80195be <scalbnf+0x62>
 8019566:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801956a:	d302      	bcc.n	8019572 <scalbnf+0x16>
 801956c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019570:	4770      	bx	lr
 8019572:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019576:	d123      	bne.n	80195c0 <scalbnf+0x64>
 8019578:	4b24      	ldr	r3, [pc, #144]	; (801960c <scalbnf+0xb0>)
 801957a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8019610 <scalbnf+0xb4>
 801957e:	4298      	cmp	r0, r3
 8019580:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019584:	db17      	blt.n	80195b6 <scalbnf+0x5a>
 8019586:	ee10 3a10 	vmov	r3, s0
 801958a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801958e:	3a19      	subs	r2, #25
 8019590:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019594:	4288      	cmp	r0, r1
 8019596:	dd15      	ble.n	80195c4 <scalbnf+0x68>
 8019598:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019614 <scalbnf+0xb8>
 801959c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8019618 <scalbnf+0xbc>
 80195a0:	ee10 3a10 	vmov	r3, s0
 80195a4:	eeb0 7a67 	vmov.f32	s14, s15
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	bfb8      	it	lt
 80195ac:	eef0 7a66 	vmovlt.f32	s15, s13
 80195b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80195b4:	4770      	bx	lr
 80195b6:	eddf 7a19 	vldr	s15, [pc, #100]	; 801961c <scalbnf+0xc0>
 80195ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80195be:	4770      	bx	lr
 80195c0:	0dd2      	lsrs	r2, r2, #23
 80195c2:	e7e5      	b.n	8019590 <scalbnf+0x34>
 80195c4:	4410      	add	r0, r2
 80195c6:	28fe      	cmp	r0, #254	; 0xfe
 80195c8:	dce6      	bgt.n	8019598 <scalbnf+0x3c>
 80195ca:	2800      	cmp	r0, #0
 80195cc:	dd06      	ble.n	80195dc <scalbnf+0x80>
 80195ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80195d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80195d6:	ee00 3a10 	vmov	s0, r3
 80195da:	4770      	bx	lr
 80195dc:	f110 0f16 	cmn.w	r0, #22
 80195e0:	da09      	bge.n	80195f6 <scalbnf+0x9a>
 80195e2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801961c <scalbnf+0xc0>
 80195e6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8019620 <scalbnf+0xc4>
 80195ea:	ee10 3a10 	vmov	r3, s0
 80195ee:	eeb0 7a67 	vmov.f32	s14, s15
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	e7d9      	b.n	80195aa <scalbnf+0x4e>
 80195f6:	3019      	adds	r0, #25
 80195f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80195fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019600:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019624 <scalbnf+0xc8>
 8019604:	ee07 3a90 	vmov	s15, r3
 8019608:	e7d7      	b.n	80195ba <scalbnf+0x5e>
 801960a:	bf00      	nop
 801960c:	ffff3cb0 	.word	0xffff3cb0
 8019610:	4c000000 	.word	0x4c000000
 8019614:	7149f2ca 	.word	0x7149f2ca
 8019618:	f149f2ca 	.word	0xf149f2ca
 801961c:	0da24260 	.word	0x0da24260
 8019620:	8da24260 	.word	0x8da24260
 8019624:	33000000 	.word	0x33000000

08019628 <with_errnof>:
 8019628:	b513      	push	{r0, r1, r4, lr}
 801962a:	4604      	mov	r4, r0
 801962c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019630:	f7fc fe86 	bl	8016340 <__errno>
 8019634:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019638:	6004      	str	r4, [r0, #0]
 801963a:	b002      	add	sp, #8
 801963c:	bd10      	pop	{r4, pc}

0801963e <xflowf>:
 801963e:	b130      	cbz	r0, 801964e <xflowf+0x10>
 8019640:	eef1 7a40 	vneg.f32	s15, s0
 8019644:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019648:	2022      	movs	r0, #34	; 0x22
 801964a:	f7ff bfed 	b.w	8019628 <with_errnof>
 801964e:	eef0 7a40 	vmov.f32	s15, s0
 8019652:	e7f7      	b.n	8019644 <xflowf+0x6>

08019654 <__math_uflowf>:
 8019654:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801965c <__math_uflowf+0x8>
 8019658:	f7ff bff1 	b.w	801963e <xflowf>
 801965c:	10000000 	.word	0x10000000

08019660 <__math_oflowf>:
 8019660:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019668 <__math_oflowf+0x8>
 8019664:	f7ff bfeb 	b.w	801963e <xflowf>
 8019668:	70000000 	.word	0x70000000

0801966c <__kernel_rem_pio2f>:
 801966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019670:	ed2d 8b04 	vpush	{d8-d9}
 8019674:	b0d9      	sub	sp, #356	; 0x164
 8019676:	4688      	mov	r8, r1
 8019678:	9002      	str	r0, [sp, #8]
 801967a:	49b8      	ldr	r1, [pc, #736]	; (801995c <__kernel_rem_pio2f+0x2f0>)
 801967c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801967e:	9301      	str	r3, [sp, #4]
 8019680:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8019684:	9901      	ldr	r1, [sp, #4]
 8019686:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8019688:	f101 3bff 	add.w	fp, r1, #4294967295
 801968c:	1d11      	adds	r1, r2, #4
 801968e:	db25      	blt.n	80196dc <__kernel_rem_pio2f+0x70>
 8019690:	1ed0      	subs	r0, r2, #3
 8019692:	bf48      	it	mi
 8019694:	1d10      	addmi	r0, r2, #4
 8019696:	10c0      	asrs	r0, r0, #3
 8019698:	1c45      	adds	r5, r0, #1
 801969a:	00e9      	lsls	r1, r5, #3
 801969c:	eba0 070b 	sub.w	r7, r0, fp
 80196a0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801996c <__kernel_rem_pio2f+0x300>
 80196a4:	9103      	str	r1, [sp, #12]
 80196a6:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80196aa:	eb0a 0c0b 	add.w	ip, sl, fp
 80196ae:	ae1c      	add	r6, sp, #112	; 0x70
 80196b0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80196b4:	2400      	movs	r4, #0
 80196b6:	4564      	cmp	r4, ip
 80196b8:	dd12      	ble.n	80196e0 <__kernel_rem_pio2f+0x74>
 80196ba:	9901      	ldr	r1, [sp, #4]
 80196bc:	ac1c      	add	r4, sp, #112	; 0x70
 80196be:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80196c2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80196c6:	f04f 0c00 	mov.w	ip, #0
 80196ca:	45d4      	cmp	ip, sl
 80196cc:	dc27      	bgt.n	801971e <__kernel_rem_pio2f+0xb2>
 80196ce:	f8dd e008 	ldr.w	lr, [sp, #8]
 80196d2:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801996c <__kernel_rem_pio2f+0x300>
 80196d6:	4627      	mov	r7, r4
 80196d8:	2600      	movs	r6, #0
 80196da:	e016      	b.n	801970a <__kernel_rem_pio2f+0x9e>
 80196dc:	2000      	movs	r0, #0
 80196de:	e7db      	b.n	8019698 <__kernel_rem_pio2f+0x2c>
 80196e0:	42e7      	cmn	r7, r4
 80196e2:	bf5d      	ittte	pl
 80196e4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80196e8:	ee07 1a90 	vmovpl	s15, r1
 80196ec:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80196f0:	eef0 7a47 	vmovmi.f32	s15, s14
 80196f4:	ece6 7a01 	vstmia	r6!, {s15}
 80196f8:	3401      	adds	r4, #1
 80196fa:	e7dc      	b.n	80196b6 <__kernel_rem_pio2f+0x4a>
 80196fc:	ecfe 6a01 	vldmia	lr!, {s13}
 8019700:	ed97 7a00 	vldr	s14, [r7]
 8019704:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019708:	3601      	adds	r6, #1
 801970a:	455e      	cmp	r6, fp
 801970c:	f1a7 0704 	sub.w	r7, r7, #4
 8019710:	ddf4      	ble.n	80196fc <__kernel_rem_pio2f+0x90>
 8019712:	ece9 7a01 	vstmia	r9!, {s15}
 8019716:	f10c 0c01 	add.w	ip, ip, #1
 801971a:	3404      	adds	r4, #4
 801971c:	e7d5      	b.n	80196ca <__kernel_rem_pio2f+0x5e>
 801971e:	a908      	add	r1, sp, #32
 8019720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019724:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019728:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8019968 <__kernel_rem_pio2f+0x2fc>
 801972c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8019964 <__kernel_rem_pio2f+0x2f8>
 8019730:	9105      	str	r1, [sp, #20]
 8019732:	9304      	str	r3, [sp, #16]
 8019734:	4656      	mov	r6, sl
 8019736:	00b3      	lsls	r3, r6, #2
 8019738:	9306      	str	r3, [sp, #24]
 801973a:	ab58      	add	r3, sp, #352	; 0x160
 801973c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8019740:	ac08      	add	r4, sp, #32
 8019742:	ab44      	add	r3, sp, #272	; 0x110
 8019744:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8019748:	46a4      	mov	ip, r4
 801974a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801974e:	4637      	mov	r7, r6
 8019750:	2f00      	cmp	r7, #0
 8019752:	f1a0 0004 	sub.w	r0, r0, #4
 8019756:	dc4a      	bgt.n	80197ee <__kernel_rem_pio2f+0x182>
 8019758:	4628      	mov	r0, r5
 801975a:	9207      	str	r2, [sp, #28]
 801975c:	f7ff fefe 	bl	801955c <scalbnf>
 8019760:	eeb0 8a40 	vmov.f32	s16, s0
 8019764:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8019768:	ee28 0a00 	vmul.f32	s0, s16, s0
 801976c:	f000 f9f0 	bl	8019b50 <floorf>
 8019770:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8019774:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019778:	2d00      	cmp	r5, #0
 801977a:	9a07      	ldr	r2, [sp, #28]
 801977c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019780:	ee17 9a90 	vmov	r9, s15
 8019784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019788:	ee38 8a67 	vsub.f32	s16, s16, s15
 801978c:	dd41      	ble.n	8019812 <__kernel_rem_pio2f+0x1a6>
 801978e:	f106 3cff 	add.w	ip, r6, #4294967295
 8019792:	ab08      	add	r3, sp, #32
 8019794:	f1c5 0e08 	rsb	lr, r5, #8
 8019798:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801979c:	fa47 f00e 	asr.w	r0, r7, lr
 80197a0:	4481      	add	r9, r0
 80197a2:	fa00 f00e 	lsl.w	r0, r0, lr
 80197a6:	1a3f      	subs	r7, r7, r0
 80197a8:	f1c5 0007 	rsb	r0, r5, #7
 80197ac:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80197b0:	4107      	asrs	r7, r0
 80197b2:	2f00      	cmp	r7, #0
 80197b4:	dd3c      	ble.n	8019830 <__kernel_rem_pio2f+0x1c4>
 80197b6:	f04f 0e00 	mov.w	lr, #0
 80197ba:	f109 0901 	add.w	r9, r9, #1
 80197be:	4671      	mov	r1, lr
 80197c0:	4576      	cmp	r6, lr
 80197c2:	dc67      	bgt.n	8019894 <__kernel_rem_pio2f+0x228>
 80197c4:	2d00      	cmp	r5, #0
 80197c6:	dd03      	ble.n	80197d0 <__kernel_rem_pio2f+0x164>
 80197c8:	2d01      	cmp	r5, #1
 80197ca:	d074      	beq.n	80198b6 <__kernel_rem_pio2f+0x24a>
 80197cc:	2d02      	cmp	r5, #2
 80197ce:	d07b      	beq.n	80198c8 <__kernel_rem_pio2f+0x25c>
 80197d0:	2f02      	cmp	r7, #2
 80197d2:	d12d      	bne.n	8019830 <__kernel_rem_pio2f+0x1c4>
 80197d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80197d8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80197dc:	b341      	cbz	r1, 8019830 <__kernel_rem_pio2f+0x1c4>
 80197de:	4628      	mov	r0, r5
 80197e0:	9207      	str	r2, [sp, #28]
 80197e2:	f7ff febb 	bl	801955c <scalbnf>
 80197e6:	9a07      	ldr	r2, [sp, #28]
 80197e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80197ec:	e020      	b.n	8019830 <__kernel_rem_pio2f+0x1c4>
 80197ee:	ee60 7a28 	vmul.f32	s15, s0, s17
 80197f2:	3f01      	subs	r7, #1
 80197f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197fc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019800:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019804:	ecac 0a01 	vstmia	ip!, {s0}
 8019808:	ed90 0a00 	vldr	s0, [r0]
 801980c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019810:	e79e      	b.n	8019750 <__kernel_rem_pio2f+0xe4>
 8019812:	d105      	bne.n	8019820 <__kernel_rem_pio2f+0x1b4>
 8019814:	1e70      	subs	r0, r6, #1
 8019816:	ab08      	add	r3, sp, #32
 8019818:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801981c:	11ff      	asrs	r7, r7, #7
 801981e:	e7c8      	b.n	80197b2 <__kernel_rem_pio2f+0x146>
 8019820:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019824:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801982c:	da30      	bge.n	8019890 <__kernel_rem_pio2f+0x224>
 801982e:	2700      	movs	r7, #0
 8019830:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019838:	f040 809a 	bne.w	8019970 <__kernel_rem_pio2f+0x304>
 801983c:	1e74      	subs	r4, r6, #1
 801983e:	46a4      	mov	ip, r4
 8019840:	2100      	movs	r1, #0
 8019842:	45d4      	cmp	ip, sl
 8019844:	da47      	bge.n	80198d6 <__kernel_rem_pio2f+0x26a>
 8019846:	2900      	cmp	r1, #0
 8019848:	d063      	beq.n	8019912 <__kernel_rem_pio2f+0x2a6>
 801984a:	ab08      	add	r3, sp, #32
 801984c:	3d08      	subs	r5, #8
 801984e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d07f      	beq.n	8019956 <__kernel_rem_pio2f+0x2ea>
 8019856:	4628      	mov	r0, r5
 8019858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801985c:	f7ff fe7e 	bl	801955c <scalbnf>
 8019860:	1c63      	adds	r3, r4, #1
 8019862:	aa44      	add	r2, sp, #272	; 0x110
 8019864:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8019968 <__kernel_rem_pio2f+0x2fc>
 8019868:	0099      	lsls	r1, r3, #2
 801986a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801986e:	4623      	mov	r3, r4
 8019870:	2b00      	cmp	r3, #0
 8019872:	f280 80ad 	bge.w	80199d0 <__kernel_rem_pio2f+0x364>
 8019876:	4623      	mov	r3, r4
 8019878:	2b00      	cmp	r3, #0
 801987a:	f2c0 80cb 	blt.w	8019a14 <__kernel_rem_pio2f+0x3a8>
 801987e:	aa44      	add	r2, sp, #272	; 0x110
 8019880:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019884:	4e36      	ldr	r6, [pc, #216]	; (8019960 <__kernel_rem_pio2f+0x2f4>)
 8019886:	eddf 7a39 	vldr	s15, [pc, #228]	; 801996c <__kernel_rem_pio2f+0x300>
 801988a:	2000      	movs	r0, #0
 801988c:	1ae2      	subs	r2, r4, r3
 801988e:	e0b6      	b.n	80199fe <__kernel_rem_pio2f+0x392>
 8019890:	2702      	movs	r7, #2
 8019892:	e790      	b.n	80197b6 <__kernel_rem_pio2f+0x14a>
 8019894:	6820      	ldr	r0, [r4, #0]
 8019896:	b949      	cbnz	r1, 80198ac <__kernel_rem_pio2f+0x240>
 8019898:	b118      	cbz	r0, 80198a2 <__kernel_rem_pio2f+0x236>
 801989a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801989e:	6020      	str	r0, [r4, #0]
 80198a0:	2001      	movs	r0, #1
 80198a2:	f10e 0e01 	add.w	lr, lr, #1
 80198a6:	3404      	adds	r4, #4
 80198a8:	4601      	mov	r1, r0
 80198aa:	e789      	b.n	80197c0 <__kernel_rem_pio2f+0x154>
 80198ac:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80198b0:	6020      	str	r0, [r4, #0]
 80198b2:	4608      	mov	r0, r1
 80198b4:	e7f5      	b.n	80198a2 <__kernel_rem_pio2f+0x236>
 80198b6:	1e74      	subs	r4, r6, #1
 80198b8:	ab08      	add	r3, sp, #32
 80198ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80198be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80198c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80198c6:	e783      	b.n	80197d0 <__kernel_rem_pio2f+0x164>
 80198c8:	1e74      	subs	r4, r6, #1
 80198ca:	ab08      	add	r3, sp, #32
 80198cc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80198d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80198d4:	e7f5      	b.n	80198c2 <__kernel_rem_pio2f+0x256>
 80198d6:	ab08      	add	r3, sp, #32
 80198d8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80198dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80198e0:	4301      	orrs	r1, r0
 80198e2:	e7ae      	b.n	8019842 <__kernel_rem_pio2f+0x1d6>
 80198e4:	3001      	adds	r0, #1
 80198e6:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80198ea:	2f00      	cmp	r7, #0
 80198ec:	d0fa      	beq.n	80198e4 <__kernel_rem_pio2f+0x278>
 80198ee:	9b06      	ldr	r3, [sp, #24]
 80198f0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80198f4:	eb0d 0403 	add.w	r4, sp, r3
 80198f8:	9b01      	ldr	r3, [sp, #4]
 80198fa:	18f7      	adds	r7, r6, r3
 80198fc:	ab1c      	add	r3, sp, #112	; 0x70
 80198fe:	f106 0c01 	add.w	ip, r6, #1
 8019902:	3c4c      	subs	r4, #76	; 0x4c
 8019904:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019908:	4430      	add	r0, r6
 801990a:	4560      	cmp	r0, ip
 801990c:	da04      	bge.n	8019918 <__kernel_rem_pio2f+0x2ac>
 801990e:	4606      	mov	r6, r0
 8019910:	e711      	b.n	8019736 <__kernel_rem_pio2f+0xca>
 8019912:	9c05      	ldr	r4, [sp, #20]
 8019914:	2001      	movs	r0, #1
 8019916:	e7e6      	b.n	80198e6 <__kernel_rem_pio2f+0x27a>
 8019918:	9b04      	ldr	r3, [sp, #16]
 801991a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801991e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019922:	9306      	str	r3, [sp, #24]
 8019924:	ee07 3a90 	vmov	s15, r3
 8019928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801992c:	2600      	movs	r6, #0
 801992e:	ece7 7a01 	vstmia	r7!, {s15}
 8019932:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801996c <__kernel_rem_pio2f+0x300>
 8019936:	46b9      	mov	r9, r7
 8019938:	455e      	cmp	r6, fp
 801993a:	dd04      	ble.n	8019946 <__kernel_rem_pio2f+0x2da>
 801993c:	ece4 7a01 	vstmia	r4!, {s15}
 8019940:	f10c 0c01 	add.w	ip, ip, #1
 8019944:	e7e1      	b.n	801990a <__kernel_rem_pio2f+0x29e>
 8019946:	ecfe 6a01 	vldmia	lr!, {s13}
 801994a:	ed39 7a01 	vldmdb	r9!, {s14}
 801994e:	3601      	adds	r6, #1
 8019950:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019954:	e7f0      	b.n	8019938 <__kernel_rem_pio2f+0x2cc>
 8019956:	3c01      	subs	r4, #1
 8019958:	e777      	b.n	801984a <__kernel_rem_pio2f+0x1de>
 801995a:	bf00      	nop
 801995c:	0801a8d8 	.word	0x0801a8d8
 8019960:	0801a8ac 	.word	0x0801a8ac
 8019964:	43800000 	.word	0x43800000
 8019968:	3b800000 	.word	0x3b800000
 801996c:	00000000 	.word	0x00000000
 8019970:	9b03      	ldr	r3, [sp, #12]
 8019972:	eeb0 0a48 	vmov.f32	s0, s16
 8019976:	1a98      	subs	r0, r3, r2
 8019978:	f7ff fdf0 	bl	801955c <scalbnf>
 801997c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8019964 <__kernel_rem_pio2f+0x2f8>
 8019980:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019988:	db19      	blt.n	80199be <__kernel_rem_pio2f+0x352>
 801998a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019968 <__kernel_rem_pio2f+0x2fc>
 801998e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019992:	aa08      	add	r2, sp, #32
 8019994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019998:	1c74      	adds	r4, r6, #1
 801999a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801999e:	3508      	adds	r5, #8
 80199a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80199a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199ac:	ee10 3a10 	vmov	r3, s0
 80199b0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80199b4:	ee17 3a90 	vmov	r3, s15
 80199b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80199bc:	e74b      	b.n	8019856 <__kernel_rem_pio2f+0x1ea>
 80199be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199c2:	aa08      	add	r2, sp, #32
 80199c4:	ee10 3a10 	vmov	r3, s0
 80199c8:	4634      	mov	r4, r6
 80199ca:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80199ce:	e742      	b.n	8019856 <__kernel_rem_pio2f+0x1ea>
 80199d0:	a808      	add	r0, sp, #32
 80199d2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80199d6:	9001      	str	r0, [sp, #4]
 80199d8:	ee07 0a90 	vmov	s15, r0
 80199dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199e0:	3b01      	subs	r3, #1
 80199e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80199e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80199ea:	ed62 7a01 	vstmdb	r2!, {s15}
 80199ee:	e73f      	b.n	8019870 <__kernel_rem_pio2f+0x204>
 80199f0:	ecf6 6a01 	vldmia	r6!, {s13}
 80199f4:	ecb5 7a01 	vldmia	r5!, {s14}
 80199f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80199fc:	3001      	adds	r0, #1
 80199fe:	4550      	cmp	r0, sl
 8019a00:	dc01      	bgt.n	8019a06 <__kernel_rem_pio2f+0x39a>
 8019a02:	4290      	cmp	r0, r2
 8019a04:	ddf4      	ble.n	80199f0 <__kernel_rem_pio2f+0x384>
 8019a06:	a858      	add	r0, sp, #352	; 0x160
 8019a08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019a0c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8019a10:	3b01      	subs	r3, #1
 8019a12:	e731      	b.n	8019878 <__kernel_rem_pio2f+0x20c>
 8019a14:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019a16:	2b02      	cmp	r3, #2
 8019a18:	dc09      	bgt.n	8019a2e <__kernel_rem_pio2f+0x3c2>
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	dc2b      	bgt.n	8019a76 <__kernel_rem_pio2f+0x40a>
 8019a1e:	d044      	beq.n	8019aaa <__kernel_rem_pio2f+0x43e>
 8019a20:	f009 0007 	and.w	r0, r9, #7
 8019a24:	b059      	add	sp, #356	; 0x164
 8019a26:	ecbd 8b04 	vpop	{d8-d9}
 8019a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019a30:	2b03      	cmp	r3, #3
 8019a32:	d1f5      	bne.n	8019a20 <__kernel_rem_pio2f+0x3b4>
 8019a34:	aa30      	add	r2, sp, #192	; 0xc0
 8019a36:	1f0b      	subs	r3, r1, #4
 8019a38:	4413      	add	r3, r2
 8019a3a:	461a      	mov	r2, r3
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	f1a2 0204 	sub.w	r2, r2, #4
 8019a44:	dc52      	bgt.n	8019aec <__kernel_rem_pio2f+0x480>
 8019a46:	4622      	mov	r2, r4
 8019a48:	2a01      	cmp	r2, #1
 8019a4a:	f1a3 0304 	sub.w	r3, r3, #4
 8019a4e:	dc5d      	bgt.n	8019b0c <__kernel_rem_pio2f+0x4a0>
 8019a50:	ab30      	add	r3, sp, #192	; 0xc0
 8019a52:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801996c <__kernel_rem_pio2f+0x300>
 8019a56:	440b      	add	r3, r1
 8019a58:	2c01      	cmp	r4, #1
 8019a5a:	dc67      	bgt.n	8019b2c <__kernel_rem_pio2f+0x4c0>
 8019a5c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019a60:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8019a64:	2f00      	cmp	r7, #0
 8019a66:	d167      	bne.n	8019b38 <__kernel_rem_pio2f+0x4cc>
 8019a68:	edc8 6a00 	vstr	s13, [r8]
 8019a6c:	ed88 7a01 	vstr	s14, [r8, #4]
 8019a70:	edc8 7a02 	vstr	s15, [r8, #8]
 8019a74:	e7d4      	b.n	8019a20 <__kernel_rem_pio2f+0x3b4>
 8019a76:	ab30      	add	r3, sp, #192	; 0xc0
 8019a78:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801996c <__kernel_rem_pio2f+0x300>
 8019a7c:	440b      	add	r3, r1
 8019a7e:	4622      	mov	r2, r4
 8019a80:	2a00      	cmp	r2, #0
 8019a82:	da24      	bge.n	8019ace <__kernel_rem_pio2f+0x462>
 8019a84:	b34f      	cbz	r7, 8019ada <__kernel_rem_pio2f+0x46e>
 8019a86:	eef1 7a47 	vneg.f32	s15, s14
 8019a8a:	edc8 7a00 	vstr	s15, [r8]
 8019a8e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8019a92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a96:	aa31      	add	r2, sp, #196	; 0xc4
 8019a98:	2301      	movs	r3, #1
 8019a9a:	429c      	cmp	r4, r3
 8019a9c:	da20      	bge.n	8019ae0 <__kernel_rem_pio2f+0x474>
 8019a9e:	b10f      	cbz	r7, 8019aa4 <__kernel_rem_pio2f+0x438>
 8019aa0:	eef1 7a67 	vneg.f32	s15, s15
 8019aa4:	edc8 7a01 	vstr	s15, [r8, #4]
 8019aa8:	e7ba      	b.n	8019a20 <__kernel_rem_pio2f+0x3b4>
 8019aaa:	ab30      	add	r3, sp, #192	; 0xc0
 8019aac:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801996c <__kernel_rem_pio2f+0x300>
 8019ab0:	440b      	add	r3, r1
 8019ab2:	2c00      	cmp	r4, #0
 8019ab4:	da05      	bge.n	8019ac2 <__kernel_rem_pio2f+0x456>
 8019ab6:	b10f      	cbz	r7, 8019abc <__kernel_rem_pio2f+0x450>
 8019ab8:	eef1 7a67 	vneg.f32	s15, s15
 8019abc:	edc8 7a00 	vstr	s15, [r8]
 8019ac0:	e7ae      	b.n	8019a20 <__kernel_rem_pio2f+0x3b4>
 8019ac2:	ed33 7a01 	vldmdb	r3!, {s14}
 8019ac6:	3c01      	subs	r4, #1
 8019ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019acc:	e7f1      	b.n	8019ab2 <__kernel_rem_pio2f+0x446>
 8019ace:	ed73 7a01 	vldmdb	r3!, {s15}
 8019ad2:	3a01      	subs	r2, #1
 8019ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019ad8:	e7d2      	b.n	8019a80 <__kernel_rem_pio2f+0x414>
 8019ada:	eef0 7a47 	vmov.f32	s15, s14
 8019ade:	e7d4      	b.n	8019a8a <__kernel_rem_pio2f+0x41e>
 8019ae0:	ecb2 7a01 	vldmia	r2!, {s14}
 8019ae4:	3301      	adds	r3, #1
 8019ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019aea:	e7d6      	b.n	8019a9a <__kernel_rem_pio2f+0x42e>
 8019aec:	edd2 7a00 	vldr	s15, [r2]
 8019af0:	edd2 6a01 	vldr	s13, [r2, #4]
 8019af4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019af8:	3801      	subs	r0, #1
 8019afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019afe:	ed82 7a00 	vstr	s14, [r2]
 8019b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b06:	edc2 7a01 	vstr	s15, [r2, #4]
 8019b0a:	e798      	b.n	8019a3e <__kernel_rem_pio2f+0x3d2>
 8019b0c:	edd3 7a00 	vldr	s15, [r3]
 8019b10:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b14:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019b18:	3a01      	subs	r2, #1
 8019b1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b1e:	ed83 7a00 	vstr	s14, [r3]
 8019b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b26:	edc3 7a01 	vstr	s15, [r3, #4]
 8019b2a:	e78d      	b.n	8019a48 <__kernel_rem_pio2f+0x3dc>
 8019b2c:	ed33 7a01 	vldmdb	r3!, {s14}
 8019b30:	3c01      	subs	r4, #1
 8019b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b36:	e78f      	b.n	8019a58 <__kernel_rem_pio2f+0x3ec>
 8019b38:	eef1 6a66 	vneg.f32	s13, s13
 8019b3c:	eeb1 7a47 	vneg.f32	s14, s14
 8019b40:	edc8 6a00 	vstr	s13, [r8]
 8019b44:	ed88 7a01 	vstr	s14, [r8, #4]
 8019b48:	eef1 7a67 	vneg.f32	s15, s15
 8019b4c:	e790      	b.n	8019a70 <__kernel_rem_pio2f+0x404>
 8019b4e:	bf00      	nop

08019b50 <floorf>:
 8019b50:	ee10 3a10 	vmov	r3, s0
 8019b54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019b58:	3a7f      	subs	r2, #127	; 0x7f
 8019b5a:	2a16      	cmp	r2, #22
 8019b5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019b60:	dc2a      	bgt.n	8019bb8 <floorf+0x68>
 8019b62:	2a00      	cmp	r2, #0
 8019b64:	da11      	bge.n	8019b8a <floorf+0x3a>
 8019b66:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019bc8 <floorf+0x78>
 8019b6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019b6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b76:	dd05      	ble.n	8019b84 <floorf+0x34>
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	da23      	bge.n	8019bc4 <floorf+0x74>
 8019b7c:	4a13      	ldr	r2, [pc, #76]	; (8019bcc <floorf+0x7c>)
 8019b7e:	2900      	cmp	r1, #0
 8019b80:	bf18      	it	ne
 8019b82:	4613      	movne	r3, r2
 8019b84:	ee00 3a10 	vmov	s0, r3
 8019b88:	4770      	bx	lr
 8019b8a:	4911      	ldr	r1, [pc, #68]	; (8019bd0 <floorf+0x80>)
 8019b8c:	4111      	asrs	r1, r2
 8019b8e:	420b      	tst	r3, r1
 8019b90:	d0fa      	beq.n	8019b88 <floorf+0x38>
 8019b92:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019bc8 <floorf+0x78>
 8019b96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019b9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ba2:	ddef      	ble.n	8019b84 <floorf+0x34>
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	bfbe      	ittt	lt
 8019ba8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8019bac:	fa40 f202 	asrlt.w	r2, r0, r2
 8019bb0:	189b      	addlt	r3, r3, r2
 8019bb2:	ea23 0301 	bic.w	r3, r3, r1
 8019bb6:	e7e5      	b.n	8019b84 <floorf+0x34>
 8019bb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019bbc:	d3e4      	bcc.n	8019b88 <floorf+0x38>
 8019bbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019bc2:	4770      	bx	lr
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	e7dd      	b.n	8019b84 <floorf+0x34>
 8019bc8:	7149f2ca 	.word	0x7149f2ca
 8019bcc:	bf800000 	.word	0xbf800000
 8019bd0:	007fffff 	.word	0x007fffff

08019bd4 <_init>:
 8019bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bd6:	bf00      	nop
 8019bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bda:	bc08      	pop	{r3}
 8019bdc:	469e      	mov	lr, r3
 8019bde:	4770      	bx	lr

08019be0 <_fini>:
 8019be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019be2:	bf00      	nop
 8019be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019be6:	bc08      	pop	{r3}
 8019be8:	469e      	mov	lr, r3
 8019bea:	4770      	bx	lr
