
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  080132b0  080132b0  000232b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f24  08013f24  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08013f24  08013f24  00023f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f2c  08013f2c  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f2c  08013f2c  00023f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f30  08013f30  00023f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08013f34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006138  200001f0  08014124  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006328  08014124  00036328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000276b6  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005176  00000000  00000000  000578d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  0005ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e80  00000000  00000000  0005eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000300a1  00000000  00000000  00060968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026e3f  00000000  00000000  00090a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d1bf  00000000  00000000  000b7848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d4a07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fc4  00000000  00000000  001d4a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013298 	.word	0x08013298

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	08013298 	.word	0x08013298

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f00 <FusionRadiansToDegrees+0x24>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	42652ee0 	.word	0x42652ee0

08000f04 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d802      	bhi.n	8000f26 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000f20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f54 <FusionAsin+0x50>
 8000f24:	e011      	b.n	8000f4a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	db02      	blt.n	8000f3e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000f38:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f58 <FusionAsin+0x54>
 8000f3c:	e005      	b.n	8000f4a <FusionAsin+0x46>
    }
    return asinf(value);
 8000f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f42:	f010 fead 	bl	8011ca0 <asinf>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	bfc90fdb 	.word	0xbfc90fdb
 8000f58:	3fc90fdb 	.word	0x3fc90fdb

08000f5c <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b091      	sub	sp, #68	; 0x44
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	eeb0 5a40 	vmov.f32	s10, s0
 8000f66:	eef0 5a60 	vmov.f32	s11, s1
 8000f6a:	eeb0 6a41 	vmov.f32	s12, s2
 8000f6e:	eef0 6a61 	vmov.f32	s13, s3
 8000f72:	eeb0 7a42 	vmov.f32	s14, s4
 8000f76:	eef0 7a62 	vmov.f32	s15, s5
 8000f7a:	ed87 5a07 	vstr	s10, [r7, #28]
 8000f7e:	edc7 5a08 	vstr	s11, [r7, #32]
 8000f82:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8000f86:	edc7 6a04 	vstr	s13, [r7, #16]
 8000f8a:	ed87 7a05 	vstr	s14, [r7, #20]
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8000f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8000fa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8000fb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd6:	ee06 1a90 	vmov	s13, r1
 8000fda:	ee07 2a10 	vmov	s14, r2
 8000fde:	ee07 3a90 	vmov	s15, r3
}
 8000fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fe6:	eef0 0a47 	vmov.f32	s1, s14
 8000fea:	eeb0 1a67 	vmov.f32	s2, s15
 8000fee:	3744      	adds	r7, #68	; 0x44
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b091      	sub	sp, #68	; 0x44
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	eeb0 5a40 	vmov.f32	s10, s0
 8001002:	eef0 5a60 	vmov.f32	s11, s1
 8001006:	eeb0 6a41 	vmov.f32	s12, s2
 800100a:	eef0 6a61 	vmov.f32	s13, s3
 800100e:	eeb0 7a42 	vmov.f32	s14, s4
 8001012:	eef0 7a62 	vmov.f32	s15, s5
 8001016:	ed87 5a07 	vstr	s10, [r7, #28]
 800101a:	edc7 5a08 	vstr	s11, [r7, #32]
 800101e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001022:	edc7 6a04 	vstr	s13, [r7, #16]
 8001026:	ed87 7a05 	vstr	s14, [r7, #20]
 800102a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800102e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800103a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800103e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800104a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800104e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001052:	edd7 7a06 	vldr	s15, [r7, #24]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800105a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800106c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	ee06 1a90 	vmov	s13, r1
 8001076:	ee07 2a10 	vmov	s14, r2
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a66 	vmov.f32	s0, s13
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 1a67 	vmov.f32	s2, s15
 800108a:	3744      	adds	r7, #68	; 0x44
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001094:	b084      	sub	sp, #16
 8001096:	b480      	push	{r7}
 8001098:	b08f      	sub	sp, #60	; 0x3c
 800109a:	af00      	add	r7, sp, #0
 800109c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 80010a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a4:	eef0 6a40 	vmov.f32	s13, s0
 80010a8:	eeb0 7a60 	vmov.f32	s14, s1
 80010ac:	eef0 7a41 	vmov.f32	s15, s2
 80010b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80010b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80010bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80010dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010e8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80010ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80010fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001108:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800110c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 800111c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001138:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001148:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800115a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	ee06 1a90 	vmov	s13, r1
 8001164:	ee07 2a10 	vmov	s14, r2
 8001168:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800116c:	eeb0 0a66 	vmov.f32	s0, s13
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	373c      	adds	r7, #60	; 0x3c
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
 800118a:	eeb0 6a40 	vmov.f32	s12, s0
 800118e:	eef0 6a60 	vmov.f32	s13, s1
 8001192:	eeb0 7a41 	vmov.f32	s14, s2
 8001196:	eef0 7a61 	vmov.f32	s15, s3
 800119a:	ed87 6a04 	vstr	s12, [r7, #16]
 800119e:	edc7 6a05 	vstr	s13, [r7, #20]
 80011a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80011a6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80011aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80011ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80011c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011de:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	eeb0 0a66 	vmov.f32	s0, s13
 80011fa:	f010 fd7d 	bl	8011cf8 <atan2f>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f7ff fe69 	bl	8000edc <FusionRadiansToDegrees>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800120e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8001212:	ed97 7a04 	vldr	s14, [r7, #16]
 8001216:	edd7 7a06 	vldr	s15, [r7, #24]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f7ff fe65 	bl	8000f04 <FusionAsin>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff fe4b 	bl	8000edc <FusionRadiansToDegrees>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800124a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800124e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001252:	edd7 7a07 	vldr	s15, [r7, #28]
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	edd7 6a05 	vldr	s13, [r7, #20]
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 6a27 	vadd.f32	s13, s14, s15
 800126a:	ed97 7a07 	vldr	s14, [r7, #28]
 800126e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	eeb0 0a66 	vmov.f32	s0, s13
 8001286:	f010 fd37 	bl	8011cf8 <atan2f>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f7ff fe23 	bl	8000edc <FusionRadiansToDegrees>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800129a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	ee06 1a90 	vmov	s13, r1
 80012b6:	ee07 2a10 	vmov	s14, r2
 80012ba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80012be:	eeb0 0a66 	vmov.f32	s0, s13
 80012c2:	eef0 0a47 	vmov.f32	s1, s14
 80012c6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ca:	3740      	adds	r7, #64	; 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 80012d0:	b084      	sub	sp, #16
 80012d2:	b5b0      	push	{r4, r5, r7, lr}
 80012d4:	b09e      	sub	sp, #120	; 0x78
 80012d6:	af06      	add	r7, sp, #24
 80012d8:	eef0 4a41 	vmov.f32	s9, s2
 80012dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012e4:	eeb0 5a61 	vmov.f32	s10, s3
 80012e8:	eef0 5a42 	vmov.f32	s11, s4
 80012ec:	eeb0 6a62 	vmov.f32	s12, s5
 80012f0:	eef0 6a43 	vmov.f32	s13, s6
 80012f4:	eeb0 7a63 	vmov.f32	s14, s7
 80012f8:	eef0 7a44 	vmov.f32	s15, s8
 80012fc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001300:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001304:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8001308:	ed87 5a08 	vstr	s10, [r7, #32]
 800130c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8001310:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8001314:	edc7 6a05 	vstr	s13, [r7, #20]
 8001318:	ed87 7a06 	vstr	s14, [r7, #24]
 800131c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8001320:	ed97 5a05 	vldr	s10, [r7, #20]
 8001324:	edd7 5a06 	vldr	s11, [r7, #24]
 8001328:	ed97 6a07 	vldr	s12, [r7, #28]
 800132c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001330:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001338:	eef0 1a45 	vmov.f32	s3, s10
 800133c:	eeb0 2a65 	vmov.f32	s4, s11
 8001340:	eef0 2a46 	vmov.f32	s5, s12
 8001344:	eeb0 0a66 	vmov.f32	s0, s13
 8001348:	eef0 0a47 	vmov.f32	s1, s14
 800134c:	eeb0 1a67 	vmov.f32	s2, s15
 8001350:	f7ff fe04 	bl	8000f5c <FusionVectorSubtract>
 8001354:	eef0 6a40 	vmov.f32	s13, s0
 8001358:	eeb0 7a60 	vmov.f32	s14, s1
 800135c:	eef0 7a41 	vmov.f32	s15, s2
 8001360:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8001364:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8001368:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800136c:	ed97 5a08 	vldr	s10, [r7, #32]
 8001370:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001378:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800137c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001380:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001384:	eef0 1a45 	vmov.f32	s3, s10
 8001388:	eeb0 2a65 	vmov.f32	s4, s11
 800138c:	eef0 2a46 	vmov.f32	s5, s12
 8001390:	eeb0 0a66 	vmov.f32	s0, s13
 8001394:	eef0 0a47 	vmov.f32	s1, s14
 8001398:	eeb0 1a67 	vmov.f32	s2, s15
 800139c:	f7ff fe2c 	bl	8000ff8 <FusionVectorHadamardProduct>
 80013a0:	eef0 6a40 	vmov.f32	s13, s0
 80013a4:	eeb0 7a60 	vmov.f32	s14, s1
 80013a8:	eef0 7a41 	vmov.f32	s15, s2
 80013ac:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 80013b0:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 80013b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80013b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80013bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013c4:	466d      	mov	r5, sp
 80013c6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	eeb0 0a66 	vmov.f32	s0, s13
 80013dc:	eef0 0a47 	vmov.f32	s1, s14
 80013e0:	eeb0 1a67 	vmov.f32	s2, s15
 80013e4:	f7ff fe56 	bl	8001094 <FusionMatrixMultiplyVector>
 80013e8:	eef0 6a40 	vmov.f32	s13, s0
 80013ec:	eeb0 7a60 	vmov.f32	s14, s1
 80013f0:	eef0 7a41 	vmov.f32	s15, s2
 80013f4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 80013f8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80013fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001406:	ee06 1a90 	vmov	s13, r1
 800140a:	ee07 2a10 	vmov	s14, r2
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a66 	vmov.f32	s0, s13
 8001416:	eef0 0a47 	vmov.f32	s1, s14
 800141a:	eeb0 1a67 	vmov.f32	s2, s15
 800141e:	3760      	adds	r7, #96	; 0x60
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr

0800142a <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 800142a:	b084      	sub	sp, #16
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	af06      	add	r7, sp, #24
 8001432:	eeb0 5a40 	vmov.f32	s10, s0
 8001436:	eef0 5a60 	vmov.f32	s11, s1
 800143a:	eeb0 6a41 	vmov.f32	s12, s2
 800143e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001446:	eef0 6a61 	vmov.f32	s13, s3
 800144a:	eeb0 7a42 	vmov.f32	s14, s4
 800144e:	eef0 7a62 	vmov.f32	s15, s5
 8001452:	ed87 5a07 	vstr	s10, [r7, #28]
 8001456:	edc7 5a08 	vstr	s11, [r7, #32]
 800145a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800145e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001462:	ed87 7a05 	vstr	s14, [r7, #20]
 8001466:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronOffset);
 800146a:	edd7 6a07 	vldr	s13, [r7, #28]
 800146e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001472:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001476:	466d      	mov	r5, sp
 8001478:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	602b      	str	r3, [r5, #0]
 8001484:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	eeb0 0a66 	vmov.f32	s0, s13
 800148e:	eef0 0a47 	vmov.f32	s1, s14
 8001492:	eeb0 1a67 	vmov.f32	s2, s15
 8001496:	f7ff fdfd 	bl	8001094 <FusionMatrixMultiplyVector>
 800149a:	eef0 6a40 	vmov.f32	s13, s0
 800149e:	eeb0 7a60 	vmov.f32	s14, s1
 80014a2:	eef0 7a41 	vmov.f32	s15, s2
 80014a6:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80014aa:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80014ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80014b2:	ed97 5a04 	vldr	s10, [r7, #16]
 80014b6:	edd7 5a05 	vldr	s11, [r7, #20]
 80014ba:	ed97 6a06 	vldr	s12, [r7, #24]
 80014be:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80014c2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80014c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014ca:	eef0 1a45 	vmov.f32	s3, s10
 80014ce:	eeb0 2a65 	vmov.f32	s4, s11
 80014d2:	eef0 2a46 	vmov.f32	s5, s12
 80014d6:	eeb0 0a66 	vmov.f32	s0, s13
 80014da:	eef0 0a47 	vmov.f32	s1, s14
 80014de:	eeb0 1a67 	vmov.f32	s2, s15
 80014e2:	f7ff fd3b 	bl	8000f5c <FusionVectorSubtract>
 80014e6:	eef0 6a40 	vmov.f32	s13, s0
 80014ea:	eeb0 7a60 	vmov.f32	s14, s1
 80014ee:	eef0 7a41 	vmov.f32	s15, s2
 80014f2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80014f6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80014fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80014fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001504:	ee06 1a90 	vmov	s13, r1
 8001508:	ee07 2a10 	vmov	s14, r2
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a66 	vmov.f32	s0, s13
 8001514:	eef0 0a47 	vmov.f32	s1, s14
 8001518:	eeb0 1a67 	vmov.f32	s2, s15
 800151c:	3740      	adds	r7, #64	; 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001524:	b004      	add	sp, #16
 8001526:	4770      	bx	lr

08001528 <FusionInit>:

FusionAhrs ahrs;
FusionOffset offset;

/* Initialize Fusion algorithm. */
void FusionInit(void){
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 800152e:	2146      	movs	r1, #70	; 0x46
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <FusionInit+0x34>)
 8001532:	f002 fa57 	bl	80039e4 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <FusionInit+0x38>)
 8001538:	f000 fe6c 	bl	8002214 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <FusionInit+0x3c>)
 800153e:	1d3c      	adds	r4, r7, #4
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 10.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <FusionInit+0x38>)
 8001550:	f000 feda 	bl	8002308 <FusionAhrsSetSettings>

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	20000274 	.word	0x20000274
 8001560:	2000020c 	.word	0x2000020c
 8001564:	080132b0 	.word	0x080132b0

08001568 <FusionCalcHeading>:
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}

/* Calculate heading based on all three sensors.*/
void FusionCalcHeading(mems_data_t *memsData, FusionEuler *output_angles){
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b099      	sub	sp, #100	; 0x64
 800156c:	af06      	add	r7, sp, #24
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	const clock_t timestamp = memsData->timestamp; // timestamp taken from LSM6DRX gyroscope.
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
	FusionVector gyroscope = {memsData->gyro_x, memsData->gyro_y, memsData->gyro_z};
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
	FusionVector accelerometer = {memsData->acc_x, memsData->acc_y, memsData->acc_z};
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	623b      	str	r3, [r7, #32]
	FusionVector magnetometer = {memsData->magn_x, memsData->magn_y, memsData->magn_z}; // replace this with actual magnetometer data in arbitrary units
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	617b      	str	r3, [r7, #20]

	// Apply calibration
	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80015ae:	4bb4      	ldr	r3, [pc, #720]	; (8001880 <FusionCalcHeading+0x318>)
 80015b0:	edd3 3a00 	vldr	s7, [r3]
 80015b4:	ed93 4a01 	vldr	s8, [r3, #4]
 80015b8:	edd3 4a02 	vldr	s9, [r3, #8]
 80015bc:	4bb1      	ldr	r3, [pc, #708]	; (8001884 <FusionCalcHeading+0x31c>)
 80015be:	ed93 5a00 	vldr	s10, [r3]
 80015c2:	edd3 5a01 	vldr	s11, [r3, #4]
 80015c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80015ca:	4eaf      	ldr	r6, [pc, #700]	; (8001888 <FusionCalcHeading+0x320>)
 80015cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015d8:	466d      	mov	r5, sp
 80015da:	f106 0410 	add.w	r4, r6, #16
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	602b      	str	r3, [r5, #0]
 80015e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015ea:	eeb0 3a63 	vmov.f32	s6, s7
 80015ee:	eef0 3a44 	vmov.f32	s7, s8
 80015f2:	eeb0 4a64 	vmov.f32	s8, s9
 80015f6:	eef0 1a45 	vmov.f32	s3, s10
 80015fa:	eeb0 2a65 	vmov.f32	s4, s11
 80015fe:	eef0 2a46 	vmov.f32	s5, s12
 8001602:	eeb0 0a66 	vmov.f32	s0, s13
 8001606:	eef0 0a47 	vmov.f32	s1, s14
 800160a:	eeb0 1a67 	vmov.f32	s2, s15
 800160e:	f7ff fe5f 	bl	80012d0 <FusionCalibrationInertial>
 8001612:	eef0 6a40 	vmov.f32	s13, s0
 8001616:	eeb0 7a60 	vmov.f32	s14, s1
 800161a:	eef0 7a41 	vmov.f32	s15, s2
 800161e:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001622:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001626:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 800162a:	4b98      	ldr	r3, [pc, #608]	; (800188c <FusionCalcHeading+0x324>)
 800162c:	edd3 3a00 	vldr	s7, [r3]
 8001630:	ed93 4a01 	vldr	s8, [r3, #4]
 8001634:	edd3 4a02 	vldr	s9, [r3, #8]
 8001638:	4b95      	ldr	r3, [pc, #596]	; (8001890 <FusionCalcHeading+0x328>)
 800163a:	ed93 5a00 	vldr	s10, [r3]
 800163e:	edd3 5a01 	vldr	s11, [r3, #4]
 8001642:	ed93 6a02 	vldr	s12, [r3, #8]
 8001646:	4e93      	ldr	r6, [pc, #588]	; (8001894 <FusionCalcHeading+0x32c>)
 8001648:	edd7 6a06 	vldr	s13, [r7, #24]
 800164c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001650:	edd7 7a08 	vldr	s15, [r7, #32]
 8001654:	466d      	mov	r5, sp
 8001656:	f106 0410 	add.w	r4, r6, #16
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	602b      	str	r3, [r5, #0]
 8001662:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001666:	eeb0 3a63 	vmov.f32	s6, s7
 800166a:	eef0 3a44 	vmov.f32	s7, s8
 800166e:	eeb0 4a64 	vmov.f32	s8, s9
 8001672:	eef0 1a45 	vmov.f32	s3, s10
 8001676:	eeb0 2a65 	vmov.f32	s4, s11
 800167a:	eef0 2a46 	vmov.f32	s5, s12
 800167e:	eeb0 0a66 	vmov.f32	s0, s13
 8001682:	eef0 0a47 	vmov.f32	s1, s14
 8001686:	eeb0 1a67 	vmov.f32	s2, s15
 800168a:	f7ff fe21 	bl	80012d0 <FusionCalibrationInertial>
 800168e:	eef0 6a40 	vmov.f32	s13, s0
 8001692:	eeb0 7a60 	vmov.f32	s14, s1
 8001696:	eef0 7a41 	vmov.f32	s15, s2
 800169a:	edc7 6a06 	vstr	s13, [r7, #24]
 800169e:	ed87 7a07 	vstr	s14, [r7, #28]
 80016a2:	edc7 7a08 	vstr	s15, [r7, #32]
	magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 80016a6:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <FusionCalcHeading+0x330>)
 80016a8:	ed93 5a00 	vldr	s10, [r3]
 80016ac:	edd3 5a01 	vldr	s11, [r3, #4]
 80016b0:	ed93 6a02 	vldr	s12, [r3, #8]
 80016b4:	4e79      	ldr	r6, [pc, #484]	; (800189c <FusionCalcHeading+0x334>)
 80016b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80016be:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c2:	466d      	mov	r5, sp
 80016c4:	f106 0410 	add.w	r4, r6, #16
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016d4:	eef0 1a45 	vmov.f32	s3, s10
 80016d8:	eeb0 2a65 	vmov.f32	s4, s11
 80016dc:	eef0 2a46 	vmov.f32	s5, s12
 80016e0:	eeb0 0a66 	vmov.f32	s0, s13
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 1a67 	vmov.f32	s2, s15
 80016ec:	f7ff fe9d 	bl	800142a <FusionCalibrationMagnetic>
 80016f0:	eef0 6a40 	vmov.f32	s13, s0
 80016f4:	eeb0 7a60 	vmov.f32	s14, s1
 80016f8:	eef0 7a41 	vmov.f32	s15, s2
 80016fc:	edc7 6a03 	vstr	s13, [r7, #12]
 8001700:	ed87 7a04 	vstr	s14, [r7, #16]
 8001704:	edc7 7a05 	vstr	s15, [r7, #20]

	// Update gyroscope offset correction algorithm
	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 8001708:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800170c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001714:	eeb0 0a66 	vmov.f32	s0, s13
 8001718:	eef0 0a47 	vmov.f32	s1, s14
 800171c:	eeb0 1a67 	vmov.f32	s2, s15
 8001720:	485f      	ldr	r0, [pc, #380]	; (80018a0 <FusionCalcHeading+0x338>)
 8001722:	f002 f991 	bl	8003a48 <FusionOffsetUpdate>
 8001726:	eef0 6a40 	vmov.f32	s13, s0
 800172a:	eeb0 7a60 	vmov.f32	s14, s1
 800172e:	eef0 7a41 	vmov.f32	s15, s2
 8001732:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001736:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800173a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Calculate delta time (in seconds) to account for gyroscope sample clock error
	static clock_t previousTimestamp;
	const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <FusionCalcHeading+0x33c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174e:	eddf 6a56 	vldr	s13, [pc, #344]	; 80018a8 <FusionCalcHeading+0x340>
 8001752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001756:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	previousTimestamp = timestamp;
 800175a:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <FusionCalcHeading+0x33c>)
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	6013      	str	r3, [r2, #0]


	// Update gyroscope AHRS algorithm
	FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 8001760:	ed97 3a03 	vldr	s6, [r7, #12]
 8001764:	edd7 3a04 	vldr	s7, [r7, #16]
 8001768:	ed97 4a05 	vldr	s8, [r7, #20]
 800176c:	ed97 5a06 	vldr	s10, [r7, #24]
 8001770:	edd7 5a07 	vldr	s11, [r7, #28]
 8001774:	ed97 6a08 	vldr	s12, [r7, #32]
 8001778:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800177c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001784:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8001788:	eef0 1a45 	vmov.f32	s3, s10
 800178c:	eeb0 2a65 	vmov.f32	s4, s11
 8001790:	eef0 2a46 	vmov.f32	s5, s12
 8001794:	eeb0 0a66 	vmov.f32	s0, s13
 8001798:	eef0 0a47 	vmov.f32	s1, s14
 800179c:	eeb0 1a67 	vmov.f32	s2, s15
 80017a0:	4842      	ldr	r0, [pc, #264]	; (80018ac <FusionCalcHeading+0x344>)
 80017a2:	f000 fe3f 	bl	8002424 <FusionAhrsUpdate>

	// Print algorithm outputs
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 80017a6:	4841      	ldr	r0, [pc, #260]	; (80018ac <FusionCalcHeading+0x344>)
 80017a8:	f001 fb64 	bl	8002e74 <FusionAhrsGetQuaternion>
 80017ac:	eeb0 6a40 	vmov.f32	s12, s0
 80017b0:	eef0 6a60 	vmov.f32	s13, s1
 80017b4:	eeb0 7a41 	vmov.f32	s14, s2
 80017b8:	eef0 7a61 	vmov.f32	s15, s3
 80017bc:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 80017c0:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80017c4:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80017c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80017cc:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80017d0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80017d4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80017d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017dc:	eeb0 0a46 	vmov.f32	s0, s12
 80017e0:	eef0 0a66 	vmov.f32	s1, s13
 80017e4:	eeb0 1a47 	vmov.f32	s2, s14
 80017e8:	eef0 1a67 	vmov.f32	s3, s15
 80017ec:	f7ff fcca 	bl	8001184 <FusionQuaternionToEuler>
 80017f0:	eef0 6a40 	vmov.f32	s13, s0
 80017f4:	eeb0 7a60 	vmov.f32	s14, s1
 80017f8:	eef0 7a41 	vmov.f32	s15, s2
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 6a00 	vstr	s13, [r3]
 8001802:	ed83 7a01 	vstr	s14, [r3, #4]
 8001806:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d509      	bpl.n	800182e <FusionCalcHeading+0x2c6>
		output_angles->angle.yaw += 360;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001820:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80018b0 <FusionCalcHeading+0x348>
 8001824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d509      	bpl.n	8001852 <FusionCalcHeading+0x2ea>
		output_angles->angle.roll += 360;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018b0 <FusionCalcHeading+0x348>
 8001848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	edd3 7a01 	vldr	s15, [r3, #4]
 8001858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	d400      	bmi.n	8001864 <FusionCalcHeading+0x2fc>
		output_angles->angle.pitch += 360;
	}
//	const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
}
 8001862:	e009      	b.n	8001878 <FusionCalcHeading+0x310>
		output_angles->angle.pitch += 360;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	edd3 7a01 	vldr	s15, [r3, #4]
 800186a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80018b0 <FusionCalcHeading+0x348>
 800186e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	374c      	adds	r7, #76	; 0x4c
 800187c:	46bd      	mov	sp, r7
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	080134dc 	.word	0x080134dc
 8001884:	080134d0 	.word	0x080134d0
 8001888:	080134ac 	.word	0x080134ac
 800188c:	08013518 	.word	0x08013518
 8001890:	0801350c 	.word	0x0801350c
 8001894:	080134e8 	.word	0x080134e8
 8001898:	08013548 	.word	0x08013548
 800189c:	08013524 	.word	0x08013524
 80018a0:	20000274 	.word	0x20000274
 80018a4:	2000028c 	.word	0x2000028c
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	2000020c 	.word	0x2000020c
 80018b0:	43b40000 	.word	0x43b40000

080018b4 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80018be:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018d8 <FusionDegreesToRadians+0x24>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	3c8efa35 	.word	0x3c8efa35

080018dc <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	105a      	asrs	r2, r3, #1
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <FusionFastInverseSqrt+0x54>)
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80018f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001934 <FusionFastInverseSqrt+0x58>
 8001900:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001904:	edd7 7a03 	vldr	s15, [r7, #12]
 8001908:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001938 <FusionFastInverseSqrt+0x5c>
 8001918:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	5f1f1412 	.word	0x5f1f1412
 8001934:	3f36d312 	.word	0x3f36d312
 8001938:	3fd851ff 	.word	0x3fd851ff

0800193c <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	eef0 6a40 	vmov.f32	s13, s0
 8001946:	eeb0 7a60 	vmov.f32	s14, s1
 800194a:	eef0 7a41 	vmov.f32	s15, s2
 800194e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001952:	ed87 7a02 	vstr	s14, [r7, #8]
 8001956:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800195a:	edd7 7a01 	vldr	s15, [r7, #4]
 800195e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d10f      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001968:	edd7 7a02 	vldr	s15, [r7, #8]
 800196c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d108      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001976:	edd7 7a03 	vldr	s15, [r7, #12]
 800197a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d101      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <FusionVectorIsZero+0x4e>
 8001988:	2300      	movs	r3, #0
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800199c:	b480      	push	{r7}
 800199e:	b091      	sub	sp, #68	; 0x44
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	eeb0 5a40 	vmov.f32	s10, s0
 80019a6:	eef0 5a60 	vmov.f32	s11, s1
 80019aa:	eeb0 6a41 	vmov.f32	s12, s2
 80019ae:	eef0 6a61 	vmov.f32	s13, s3
 80019b2:	eeb0 7a42 	vmov.f32	s14, s4
 80019b6:	eef0 7a62 	vmov.f32	s15, s5
 80019ba:	ed87 5a07 	vstr	s10, [r7, #28]
 80019be:	edc7 5a08 	vstr	s11, [r7, #32]
 80019c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80019c6:	edc7 6a04 	vstr	s13, [r7, #16]
 80019ca:	ed87 7a05 	vstr	s14, [r7, #20]
 80019ce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80019d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80019e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80019f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	ee06 1a90 	vmov	s13, r1
 8001a1a:	ee07 2a10 	vmov	s14, r2
 8001a1e:	ee07 3a90 	vmov	s15, r3
}
 8001a22:	eeb0 0a66 	vmov.f32	s0, s13
 8001a26:	eef0 0a47 	vmov.f32	s1, s14
 8001a2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a2e:	3744      	adds	r7, #68	; 0x44
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	eef0 6a40 	vmov.f32	s13, s0
 8001a42:	eeb0 7a60 	vmov.f32	s14, s1
 8001a46:	eef0 7a41 	vmov.f32	s15, s2
 8001a4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001a56:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	eef0 6a40 	vmov.f32	s13, s0
 8001a82:	eeb0 7a60 	vmov.f32	s14, s1
 8001a86:	eef0 7a41 	vmov.f32	s15, s2
 8001a8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8001a8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a92:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a96:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8001a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001aa6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8001aaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ab6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8001aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8001abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ac6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8001aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ace:	f107 0220 	add.w	r2, r7, #32
 8001ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	ee06 1a90 	vmov	s13, r1
 8001ae2:	ee07 2a10 	vmov	s14, r2
 8001ae6:	ee07 3a90 	vmov	s15, r3
}
 8001aea:	eeb0 0a66 	vmov.f32	s0, s13
 8001aee:	eef0 0a47 	vmov.f32	s1, s14
 8001af2:	eeb0 1a67 	vmov.f32	s2, s15
 8001af6:	373c      	adds	r7, #60	; 0x3c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b00:	b480      	push	{r7}
 8001b02:	b091      	sub	sp, #68	; 0x44
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	eeb0 5a40 	vmov.f32	s10, s0
 8001b0a:	eef0 5a60 	vmov.f32	s11, s1
 8001b0e:	eeb0 6a41 	vmov.f32	s12, s2
 8001b12:	eef0 6a61 	vmov.f32	s13, s3
 8001b16:	eeb0 7a42 	vmov.f32	s14, s4
 8001b1a:	eef0 7a62 	vmov.f32	s15, s5
 8001b1e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001b22:	edc7 5a08 	vstr	s11, [r7, #32]
 8001b26:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001b2a:	edc7 6a04 	vstr	s13, [r7, #16]
 8001b2e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001b32:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001b36:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001b46:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001b56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7a:	ee06 1a90 	vmov	s13, r1
 8001b7e:	ee07 2a10 	vmov	s14, r2
 8001b82:	ee07 3a90 	vmov	s15, r3
}
 8001b86:	eeb0 0a66 	vmov.f32	s0, s13
 8001b8a:	eef0 0a47 	vmov.f32	s1, s14
 8001b8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001b92:	3744      	adds	r7, #68	; 0x44
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b091      	sub	sp, #68	; 0x44
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	eeb0 5a40 	vmov.f32	s10, s0
 8001ba6:	eef0 5a60 	vmov.f32	s11, s1
 8001baa:	eeb0 6a41 	vmov.f32	s12, s2
 8001bae:	eef0 6a61 	vmov.f32	s13, s3
 8001bb2:	eeb0 7a42 	vmov.f32	s14, s4
 8001bb6:	eef0 7a62 	vmov.f32	s15, s5
 8001bba:	ed87 5a07 	vstr	s10, [r7, #28]
 8001bbe:	edc7 5a08 	vstr	s11, [r7, #32]
 8001bc2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001bc6:	edc7 6a04 	vstr	s13, [r7, #16]
 8001bca:	ed87 7a05 	vstr	s14, [r7, #20]
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8001bd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bde:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001bee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8001bf2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001c12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c2e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	ee06 1a90 	vmov	s13, r1
 8001c4a:	ee07 2a10 	vmov	s14, r2
 8001c4e:	ee07 3a90 	vmov	s15, r3
}
 8001c52:	eeb0 0a66 	vmov.f32	s0, s13
 8001c56:	eef0 0a47 	vmov.f32	s1, s14
 8001c5a:	eeb0 1a67 	vmov.f32	s2, s15
 8001c5e:	3744      	adds	r7, #68	; 0x44
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	eef0 6a40 	vmov.f32	s13, s0
 8001c72:	eeb0 7a60 	vmov.f32	s14, s1
 8001c76:	eef0 7a41 	vmov.f32	s15, s2
 8001c7a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c7e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c82:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001c86:	ed97 5a01 	vldr	s10, [r7, #4]
 8001c8a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001c92:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9e:	eef0 1a45 	vmov.f32	s3, s10
 8001ca2:	eeb0 2a65 	vmov.f32	s4, s11
 8001ca6:	eef0 2a46 	vmov.f32	s5, s12
 8001caa:	eeb0 0a66 	vmov.f32	s0, s13
 8001cae:	eef0 0a47 	vmov.f32	s1, s14
 8001cb2:	eeb0 1a67 	vmov.f32	s2, s15
 8001cb6:	f7ff ff23 	bl	8001b00 <FusionVectorHadamardProduct>
 8001cba:	eef0 6a40 	vmov.f32	s13, s0
 8001cbe:	eeb0 7a60 	vmov.f32	s14, s1
 8001cc2:	eef0 7a41 	vmov.f32	s15, s2
 8001cc6:	edc7 6a05 	vstr	s13, [r7, #20]
 8001cca:	ed87 7a06 	vstr	s14, [r7, #24]
 8001cce:	edc7 7a07 	vstr	s15, [r7, #28]
 8001cd2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cde:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce2:	eef0 0a47 	vmov.f32	s1, s14
 8001ce6:	eeb0 1a67 	vmov.f32	s2, s15
 8001cea:	f7ff fea5 	bl	8001a38 <FusionVectorSum>
 8001cee:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	eef0 6a40 	vmov.f32	s13, s0
 8001d06:	eeb0 7a60 	vmov.f32	s14, s1
 8001d0a:	eef0 7a41 	vmov.f32	s15, s2
 8001d0e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d12:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d16:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001d1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d26:	eeb0 0a66 	vmov.f32	s0, s13
 8001d2a:	eef0 0a47 	vmov.f32	s1, s14
 8001d2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d32:	f7ff ff99 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	f7ff fdcd 	bl	80018dc <FusionFastInverseSqrt>
 8001d42:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001d46:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d52:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001d56:	eeb0 0a66 	vmov.f32	s0, s13
 8001d5a:	eef0 0a47 	vmov.f32	s1, s14
 8001d5e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d62:	f7ff fe89 	bl	8001a78 <FusionVectorMultiplyScalar>
 8001d66:	eef0 6a40 	vmov.f32	s13, s0
 8001d6a:	eeb0 7a60 	vmov.f32	s14, s1
 8001d6e:	eef0 7a41 	vmov.f32	s15, s2
 8001d72:	edc7 6a08 	vstr	s13, [r7, #32]
 8001d76:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001d7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	ee06 1a90 	vmov	s13, r1
 8001d88:	ee07 2a10 	vmov	s14, r2
 8001d8c:	ee07 3a90 	vmov	s15, r3
}
 8001d90:	eeb0 0a66 	vmov.f32	s0, s13
 8001d94:	eef0 0a47 	vmov.f32	s1, s14
 8001d98:	eeb0 1a67 	vmov.f32	s2, s15
 8001d9c:	3730      	adds	r7, #48	; 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001da2:	b490      	push	{r4, r7}
 8001da4:	b094      	sub	sp, #80	; 0x50
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	eeb0 4a40 	vmov.f32	s8, s0
 8001dac:	eef0 4a60 	vmov.f32	s9, s1
 8001db0:	eeb0 5a41 	vmov.f32	s10, s2
 8001db4:	eef0 5a61 	vmov.f32	s11, s3
 8001db8:	eeb0 6a42 	vmov.f32	s12, s4
 8001dbc:	eef0 6a62 	vmov.f32	s13, s5
 8001dc0:	eeb0 7a43 	vmov.f32	s14, s6
 8001dc4:	eef0 7a63 	vmov.f32	s15, s7
 8001dc8:	ed87 4a08 	vstr	s8, [r7, #32]
 8001dcc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001dd0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001dd4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001dd8:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ddc:	edc7 6a05 	vstr	s13, [r7, #20]
 8001de0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001de4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001de8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001df4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001df8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001e08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001e18:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001e28:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	ee06 0a10 	vmov	s12, r0
 8001e42:	ee06 1a90 	vmov	s13, r1
 8001e46:	ee07 2a10 	vmov	s14, r2
 8001e4a:	ee07 3a90 	vmov	s15, r3
}
 8001e4e:	eeb0 0a46 	vmov.f32	s0, s12
 8001e52:	eef0 0a66 	vmov.f32	s1, s13
 8001e56:	eeb0 1a47 	vmov.f32	s2, s14
 8001e5a:	eef0 1a67 	vmov.f32	s3, s15
 8001e5e:	3750      	adds	r7, #80	; 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc90      	pop	{r4, r7}
 8001e64:	4770      	bx	lr

08001e66 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001e66:	b490      	push	{r4, r7}
 8001e68:	b094      	sub	sp, #80	; 0x50
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	eeb0 4a40 	vmov.f32	s8, s0
 8001e70:	eef0 4a60 	vmov.f32	s9, s1
 8001e74:	eeb0 5a41 	vmov.f32	s10, s2
 8001e78:	eef0 5a61 	vmov.f32	s11, s3
 8001e7c:	eeb0 6a42 	vmov.f32	s12, s4
 8001e80:	eef0 6a62 	vmov.f32	s13, s5
 8001e84:	eeb0 7a43 	vmov.f32	s14, s6
 8001e88:	eef0 7a63 	vmov.f32	s15, s7
 8001e8c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001e90:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001e94:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001e98:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001e9c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ea0:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ea4:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ea8:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001eac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ebc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ee8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001eec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f28:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001f2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001fac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc2:	ee06 0a10 	vmov	s12, r0
 8001fc6:	ee06 1a90 	vmov	s13, r1
 8001fca:	ee07 2a10 	vmov	s14, r2
 8001fce:	ee07 3a90 	vmov	s15, r3
}
 8001fd2:	eeb0 0a46 	vmov.f32	s0, s12
 8001fd6:	eef0 0a66 	vmov.f32	s1, s13
 8001fda:	eeb0 1a47 	vmov.f32	s2, s14
 8001fde:	eef0 1a67 	vmov.f32	s3, s15
 8001fe2:	3750      	adds	r7, #80	; 0x50
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc90      	pop	{r4, r7}
 8001fe8:	4770      	bx	lr

08001fea <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001fea:	b490      	push	{r4, r7}
 8001fec:	b094      	sub	sp, #80	; 0x50
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	eef0 4a40 	vmov.f32	s9, s0
 8001ff4:	eeb0 5a60 	vmov.f32	s10, s1
 8001ff8:	eef0 5a41 	vmov.f32	s11, s2
 8001ffc:	eeb0 6a61 	vmov.f32	s12, s3
 8002000:	eef0 6a42 	vmov.f32	s13, s4
 8002004:	eeb0 7a62 	vmov.f32	s14, s5
 8002008:	eef0 7a43 	vmov.f32	s15, s6
 800200c:	edc7 4a08 	vstr	s9, [r7, #32]
 8002010:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8002014:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8002018:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800201c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002020:	ed87 7a06 	vstr	s14, [r7, #24]
 8002024:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8002028:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800202c:	eeb1 7a67 	vneg.f32	s14, s15
 8002030:	edd7 7a05 	vldr	s15, [r7, #20]
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800203c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002048:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800204c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002058:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800205c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002060:	edd7 7a05 	vldr	s15, [r7, #20]
 8002064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002068:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800206c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002078:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800207c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002088:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800208c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002090:	edd7 7a06 	vldr	s15, [r7, #24]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800209c:	edd7 7a07 	vldr	s15, [r7, #28]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80020ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 80020bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80020cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80020dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 80020ec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80020f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002102:	ee06 0a10 	vmov	s12, r0
 8002106:	ee06 1a90 	vmov	s13, r1
 800210a:	ee07 2a10 	vmov	s14, r2
 800210e:	ee07 3a90 	vmov	s15, r3
}
 8002112:	eeb0 0a46 	vmov.f32	s0, s12
 8002116:	eef0 0a66 	vmov.f32	s1, s13
 800211a:	eeb0 1a47 	vmov.f32	s2, s14
 800211e:	eef0 1a67 	vmov.f32	s3, s15
 8002122:	3750      	adds	r7, #80	; 0x50
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr

0800212a <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b093      	sub	sp, #76	; 0x4c
 800212e:	af00      	add	r7, sp, #0
 8002130:	eeb0 6a40 	vmov.f32	s12, s0
 8002134:	eef0 6a60 	vmov.f32	s13, s1
 8002138:	eeb0 7a41 	vmov.f32	s14, s2
 800213c:	eef0 7a61 	vmov.f32	s15, s3
 8002140:	ed87 6a04 	vstr	s12, [r7, #16]
 8002144:	edc7 6a05 	vstr	s13, [r7, #20]
 8002148:	ed87 7a06 	vstr	s14, [r7, #24]
 800214c:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002150:	ed97 7a04 	vldr	s14, [r7, #16]
 8002154:	edd7 7a04 	vldr	s15, [r7, #16]
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002170:	edd7 7a06 	vldr	s15, [r7, #24]
 8002174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002180:	edd7 7a07 	vldr	s15, [r7, #28]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	f7ff fba4 	bl	80018dc <FusionFastInverseSqrt>
 8002194:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8002198:	ed97 7a04 	vldr	s14, [r7, #16]
 800219c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 80021a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 80021b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80021bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 80021c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80021cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80021d8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ee:	ee06 0a10 	vmov	s12, r0
 80021f2:	ee06 1a90 	vmov	s13, r1
 80021f6:	ee07 2a10 	vmov	s14, r2
 80021fa:	ee07 3a90 	vmov	s15, r3
}
 80021fe:	eeb0 0a46 	vmov.f32	s0, s12
 8002202:	eef0 0a66 	vmov.f32	s1, s13
 8002206:	eeb0 1a47 	vmov.f32	s2, s14
 800220a:	eef0 1a67 	vmov.f32	s3, s15
 800220e:	374c      	adds	r7, #76	; 0x4c
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <FusionAhrsInitialise+0x34>)
 800221e:	f107 040c 	add.w	r4, r7, #12
 8002222:	461d      	mov	r5, r3
 8002224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f868 	bl	8002308 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f807 	bl	800224c <FusionAhrsReset>
}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bdb0      	pop	{r4, r5, r7, pc}
 8002246:	bf00      	nop
 8002248:	080132c4 	.word	0x080132c4

0800224c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800224c:	b480      	push	{r7}
 800224e:	b091      	sub	sp, #68	; 0x44
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <FusionAhrsReset+0xb8>)
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	649a      	str	r2, [r3, #72]	; 0x48
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80022f6:	bf00      	nop
 80022f8:	3744      	adds	r7, #68	; 0x44
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	41200000 	.word	0x41200000

08002308 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	edd3 7a02 	vldr	s15, [r3, #8]
 8002328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d003      	beq.n	800233a <FusionAhrsSetSettings+0x32>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e01d      	b.n	800237e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	edd3 7a02 	vldr	s15, [r3, #8]
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	f7ff fab2 	bl	80018b4 <FusionDegreesToRadians>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	f00f fc5c 	bl	8011c14 <sinf>
 800235c:	eef0 7a40 	vmov.f32	s15, s0
 8002360:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	f00f fcc4 	bl	8011cfc <powf>
 8002374:	eef0 7a40 	vmov.f32	s15, s0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	edd3 7a03 	vldr	s15, [r3, #12]
 8002384:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d003      	beq.n	8002396 <FusionAhrsSetSettings+0x8e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e01d      	b.n	80023da <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80023a4:	eeb0 0a67 	vmov.f32	s0, s15
 80023a8:	f7ff fa84 	bl	80018b4 <FusionDegreesToRadians>
 80023ac:	eef0 7a40 	vmov.f32	s15, s0
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f00f fc2e 	bl	8011c14 <sinf>
 80023b8:	eef0 7a40 	vmov.f32	s15, s0
 80023bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f00f fc96 	bl	8011cfc <powf>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002400:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002408:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	7f7fffff 	.word	0x7f7fffff

08002424 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0bf      	sub	sp, #252	; 0xfc
 8002428:	af00      	add	r7, sp, #0
 800242a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800242c:	eeb0 5a61 	vmov.f32	s10, s3
 8002430:	eef0 5a42 	vmov.f32	s11, s4
 8002434:	eeb0 6a62 	vmov.f32	s12, s5
 8002438:	eef0 6a43 	vmov.f32	s13, s6
 800243c:	eeb0 7a63 	vmov.f32	s14, s7
 8002440:	eef0 7a44 	vmov.f32	s15, s8
 8002444:	edc7 4a01 	vstr	s9, [r7, #4]
 8002448:	ed87 0a08 	vstr	s0, [r7, #32]
 800244c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002450:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002454:	ed87 5a05 	vstr	s10, [r7, #20]
 8002458:	edc7 5a06 	vstr	s11, [r7, #24]
 800245c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002460:	edc7 6a02 	vstr	s13, [r7, #8]
 8002464:	ed87 7a03 	vstr	s14, [r7, #12]
 8002468:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	f107 0214 	add.w	r2, r7, #20
 8002474:	ca07      	ldmia	r2, {r0, r1, r2}
 8002476:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d025      	beq.n	80024d0 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002490:	edd7 7a01 	vldr	s15, [r7, #4]
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d50b      	bpl.n	80024d0 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80024d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024d2:	f000 fb08 	bl	8002ae6 <HalfGravity>
 80024d6:	eef0 6a40 	vmov.f32	s13, s0
 80024da:	eeb0 7a60 	vmov.f32	s14, s1
 80024de:	eef0 7a41 	vmov.f32	s15, s2
 80024e2:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 80024e6:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 80024ea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 800250e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002512:	ed97 7a06 	vldr	s14, [r7, #24]
 8002516:	edd7 7a07 	vldr	s15, [r7, #28]
 800251a:	eeb0 0a66 	vmov.f32	s0, s13
 800251e:	eef0 0a47 	vmov.f32	s1, s14
 8002522:	eeb0 1a67 	vmov.f32	s2, s15
 8002526:	f7ff fa09 	bl	800193c <FusionVectorIsZero>
 800252a:	4603      	mov	r3, r0
 800252c:	f083 0301 	eor.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809b 	beq.w	800266e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d918      	bls.n	8002576 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800254a:	3314      	adds	r3, #20
 800254c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8002552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002554:	f7ff fe7a 	bl	800224c <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	f103 0414 	add.w	r4, r3, #20
 800255e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2200      	movs	r2, #0
 800256c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2201      	movs	r2, #1
 8002572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002576:	edd7 6a05 	vldr	s13, [r7, #20]
 800257a:	ed97 7a06 	vldr	s14, [r7, #24]
 800257e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002582:	eeb0 0a66 	vmov.f32	s0, s13
 8002586:	eef0 0a47 	vmov.f32	s1, s14
 800258a:	eeb0 1a67 	vmov.f32	s2, s15
 800258e:	f7ff fbb5 	bl	8001cfc <FusionVectorNormalise>
 8002592:	eef0 6a40 	vmov.f32	s13, s0
 8002596:	eeb0 7a60 	vmov.f32	s14, s1
 800259a:	eef0 7a41 	vmov.f32	s15, s2
 800259e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 80025a2:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80025a6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80025aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80025ac:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80025b0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80025b4:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80025b8:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80025bc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80025c0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025c4:	eef0 1a45 	vmov.f32	s3, s10
 80025c8:	eeb0 2a65 	vmov.f32	s4, s11
 80025cc:	eef0 2a46 	vmov.f32	s5, s12
 80025d0:	eeb0 0a66 	vmov.f32	s0, s13
 80025d4:	eef0 0a47 	vmov.f32	s1, s14
 80025d8:	eeb0 1a67 	vmov.f32	s2, s15
 80025dc:	f7ff fade 	bl	8001b9c <FusionVectorCrossProduct>
 80025e0:	eef0 6a40 	vmov.f32	s13, s0
 80025e4:	eeb0 7a60 	vmov.f32	s14, s1
 80025e8:	eef0 7a41 	vmov.f32	s15, s2
 80025ec:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 80025f0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 80025f4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <FusionAhrsUpdate+0x210>
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002608:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800260c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002610:	eeb0 0a66 	vmov.f32	s0, s13
 8002614:	eef0 0a47 	vmov.f32	s1, s14
 8002618:	eeb0 1a67 	vmov.f32	s2, s15
 800261c:	f7ff fb24 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	edd3 7a02 	vldr	s15, [r3, #8]
 800262a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	d817      	bhi.n	8002664 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002636:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800263a:	323c      	adds	r2, #60	; 0x3c
 800263c:	ca07      	ldmia	r2, {r0, r1, r2}
 800263e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	2b09      	cmp	r3, #9
 8002654:	d901      	bls.n	800265a <FusionAhrsUpdate+0x236>
 8002656:	230a      	movs	r3, #10
 8002658:	e000      	b.n	800265c <FusionAhrsUpdate+0x238>
 800265a:	2300      	movs	r3, #0
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	659a      	str	r2, [r3, #88]	; 0x58
 8002662:	e004      	b.n	800266e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2201      	movs	r2, #1
 8002684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002688:	edd7 6a02 	vldr	s13, [r7, #8]
 800268c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002690:	edd7 7a04 	vldr	s15, [r7, #16]
 8002694:	eeb0 0a66 	vmov.f32	s0, s13
 8002698:	eef0 0a47 	vmov.f32	s1, s14
 800269c:	eeb0 1a67 	vmov.f32	s2, s15
 80026a0:	f7ff f94c 	bl	800193c <FusionVectorIsZero>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80e6 	beq.w	800287e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d92a      	bls.n	800271c <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	ed97 5a02 	vldr	s10, [r7, #8]
 80026ce:	edd7 5a03 	vldr	s11, [r7, #12]
 80026d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80026d6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80026da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80026de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80026e2:	eef0 1a45 	vmov.f32	s3, s10
 80026e6:	eeb0 2a65 	vmov.f32	s4, s11
 80026ea:	eef0 2a46 	vmov.f32	s5, s12
 80026ee:	eeb0 0a66 	vmov.f32	s0, s13
 80026f2:	eef0 0a47 	vmov.f32	s1, s14
 80026f6:	eeb0 1a67 	vmov.f32	s2, s15
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fe6e 	bl	80033dc <FusionCompassCalculateHeading>
 8002700:	eef0 7a40 	vmov.f32	s15, s0
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800270a:	f000 fbd6 	bl	8002eba <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2200      	movs	r2, #0
 8002712:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800271c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800271e:	f000 fa9f 	bl	8002c60 <HalfMagnetic>
 8002722:	eef0 6a40 	vmov.f32	s13, s0
 8002726:	eeb0 7a60 	vmov.f32	s14, s1
 800272a:	eef0 7a41 	vmov.f32	s15, s2
 800272e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8002732:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002736:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800273a:	ed97 5a02 	vldr	s10, [r7, #8]
 800273e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002742:	ed97 6a04 	vldr	s12, [r7, #16]
 8002746:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800274a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800274e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002752:	eef0 1a45 	vmov.f32	s3, s10
 8002756:	eeb0 2a65 	vmov.f32	s4, s11
 800275a:	eef0 2a46 	vmov.f32	s5, s12
 800275e:	eeb0 0a66 	vmov.f32	s0, s13
 8002762:	eef0 0a47 	vmov.f32	s1, s14
 8002766:	eeb0 1a67 	vmov.f32	s2, s15
 800276a:	f7ff fa17 	bl	8001b9c <FusionVectorCrossProduct>
 800276e:	eef0 6a40 	vmov.f32	s13, s0
 8002772:	eeb0 7a60 	vmov.f32	s14, s1
 8002776:	eef0 7a41 	vmov.f32	s15, s2
 800277a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800277e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002782:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002786:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800278a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800278e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002792:	eeb0 0a66 	vmov.f32	s0, s13
 8002796:	eef0 0a47 	vmov.f32	s1, s14
 800279a:	eeb0 1a67 	vmov.f32	s2, s15
 800279e:	f7ff faad 	bl	8001cfc <FusionVectorNormalise>
 80027a2:	eef0 6a40 	vmov.f32	s13, s0
 80027a6:	eeb0 7a60 	vmov.f32	s14, s1
 80027aa:	eef0 7a41 	vmov.f32	s15, s2
 80027ae:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 80027b2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80027b6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80027ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80027bc:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80027c0:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80027c4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80027c8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80027cc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80027d0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80027d4:	eef0 1a45 	vmov.f32	s3, s10
 80027d8:	eeb0 2a65 	vmov.f32	s4, s11
 80027dc:	eef0 2a46 	vmov.f32	s5, s12
 80027e0:	eeb0 0a66 	vmov.f32	s0, s13
 80027e4:	eef0 0a47 	vmov.f32	s1, s14
 80027e8:	eeb0 1a67 	vmov.f32	s2, s15
 80027ec:	f7ff f9d6 	bl	8001b9c <FusionVectorCrossProduct>
 80027f0:	eef0 6a40 	vmov.f32	s13, s0
 80027f4:	eeb0 7a60 	vmov.f32	s14, s1
 80027f8:	eef0 7a41 	vmov.f32	s15, s2
 80027fc:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8002800:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8002804:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <FusionAhrsUpdate+0x420>
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002818:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800281c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002820:	eeb0 0a66 	vmov.f32	s0, s13
 8002824:	eef0 0a47 	vmov.f32	s1, s14
 8002828:	eeb0 1a67 	vmov.f32	s2, s15
 800282c:	f7ff fa1c 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002830:	eeb0 7a40 	vmov.f32	s14, s0
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	edd3 7a03 	vldr	s15, [r3, #12]
 800283a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d817      	bhi.n	8002874 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800284a:	3248      	adds	r2, #72	; 0x48
 800284c:	ca07      	ldmia	r2, {r0, r1, r2}
 800284e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	2b09      	cmp	r3, #9
 8002864:	d901      	bls.n	800286a <FusionAhrsUpdate+0x446>
 8002866:	230a      	movs	r3, #10
 8002868:	e000      	b.n	800286c <FusionAhrsUpdate+0x448>
 800286a:	2300      	movs	r3, #0
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	661a      	str	r2, [r3, #96]	; 0x60
 8002872:	e004      	b.n	800287e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800287e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002882:	f7ff f817 	bl	80018b4 <FusionDegreesToRadians>
 8002886:	eeb0 6a40 	vmov.f32	s12, s0
 800288a:	edd7 6a08 	vldr	s13, [r7, #32]
 800288e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002896:	eef0 1a46 	vmov.f32	s3, s12
 800289a:	eeb0 0a66 	vmov.f32	s0, s13
 800289e:	eef0 0a47 	vmov.f32	s1, s14
 80028a2:	eeb0 1a67 	vmov.f32	s2, s15
 80028a6:	f7ff f8e7 	bl	8001a78 <FusionVectorMultiplyScalar>
 80028aa:	eef0 6a40 	vmov.f32	s13, s0
 80028ae:	eeb0 7a60 	vmov.f32	s14, s1
 80028b2:	eef0 7a41 	vmov.f32	s15, s2
 80028b6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80028ba:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80028be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80028c2:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80028c6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80028ca:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80028ce:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80028d2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80028d6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028da:	eef0 1a45 	vmov.f32	s3, s10
 80028de:	eeb0 2a65 	vmov.f32	s4, s11
 80028e2:	eef0 2a46 	vmov.f32	s5, s12
 80028e6:	eeb0 0a66 	vmov.f32	s0, s13
 80028ea:	eef0 0a47 	vmov.f32	s1, s14
 80028ee:	eeb0 1a67 	vmov.f32	s2, s15
 80028f2:	f7ff f853 	bl	800199c <FusionVectorAdd>
 80028f6:	eef0 6a40 	vmov.f32	s13, s0
 80028fa:	eeb0 7a60 	vmov.f32	s14, s1
 80028fe:	eef0 7a41 	vmov.f32	s15, s2
 8002902:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002906:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800290a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002914:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002918:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800291c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002920:	eef0 1a46 	vmov.f32	s3, s12
 8002924:	eeb0 0a66 	vmov.f32	s0, s13
 8002928:	eef0 0a47 	vmov.f32	s1, s14
 800292c:	eeb0 1a67 	vmov.f32	s2, s15
 8002930:	f7ff f8a2 	bl	8001a78 <FusionVectorMultiplyScalar>
 8002934:	eef0 6a40 	vmov.f32	s13, s0
 8002938:	eeb0 7a60 	vmov.f32	s14, s1
 800293c:	eef0 7a41 	vmov.f32	s15, s2
 8002940:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002944:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002948:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800294c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002950:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002954:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002958:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800295c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002960:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002964:	eef0 1a45 	vmov.f32	s3, s10
 8002968:	eeb0 2a65 	vmov.f32	s4, s11
 800296c:	eef0 2a46 	vmov.f32	s5, s12
 8002970:	eeb0 0a66 	vmov.f32	s0, s13
 8002974:	eef0 0a47 	vmov.f32	s1, s14
 8002978:	eeb0 1a67 	vmov.f32	s2, s15
 800297c:	f7ff f80e 	bl	800199c <FusionVectorAdd>
 8002980:	eef0 6a40 	vmov.f32	s13, s0
 8002984:	eeb0 7a60 	vmov.f32	s14, s1
 8002988:	eef0 7a41 	vmov.f32	s15, s2
 800298c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8002990:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002994:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002998:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800299c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029a4:	edd7 1a01 	vldr	s3, [r7, #4]
 80029a8:	eeb0 0a66 	vmov.f32	s0, s13
 80029ac:	eef0 0a47 	vmov.f32	s1, s14
 80029b0:	eeb0 1a67 	vmov.f32	s2, s15
 80029b4:	f7ff f860 	bl	8001a78 <FusionVectorMultiplyScalar>
 80029b8:	eef0 6a40 	vmov.f32	s13, s0
 80029bc:	eeb0 7a60 	vmov.f32	s14, s1
 80029c0:	eef0 7a41 	vmov.f32	s15, s2
 80029c4:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80029c8:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80029cc:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80029d0:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80029d4:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80029d8:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	ed93 6a05 	vldr	s12, [r3, #20]
 80029e2:	edd3 6a06 	vldr	s13, [r3, #24]
 80029e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80029ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ee:	eeb0 2a64 	vmov.f32	s4, s9
 80029f2:	eef0 2a45 	vmov.f32	s5, s10
 80029f6:	eeb0 3a65 	vmov.f32	s6, s11
 80029fa:	eeb0 0a46 	vmov.f32	s0, s12
 80029fe:	eef0 0a66 	vmov.f32	s1, s13
 8002a02:	eeb0 1a47 	vmov.f32	s2, s14
 8002a06:	eef0 1a67 	vmov.f32	s3, s15
 8002a0a:	f7ff faee 	bl	8001fea <FusionQuaternionMultiplyVector>
 8002a0e:	eeb0 6a40 	vmov.f32	s12, s0
 8002a12:	eef0 6a60 	vmov.f32	s13, s1
 8002a16:	eeb0 7a41 	vmov.f32	s14, s2
 8002a1a:	eef0 7a61 	vmov.f32	s15, s3
 8002a1e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8002a22:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002a26:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002a2a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8002a2e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a30:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002a34:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002a38:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002a3c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a46:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a52:	eeb0 2a44 	vmov.f32	s4, s8
 8002a56:	eef0 2a64 	vmov.f32	s5, s9
 8002a5a:	eeb0 3a45 	vmov.f32	s6, s10
 8002a5e:	eef0 3a65 	vmov.f32	s7, s11
 8002a62:	eeb0 0a46 	vmov.f32	s0, s12
 8002a66:	eef0 0a66 	vmov.f32	s1, s13
 8002a6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002a6e:	eef0 1a67 	vmov.f32	s3, s15
 8002a72:	f7ff f996 	bl	8001da2 <FusionQuaternionAdd>
 8002a76:	eeb0 6a40 	vmov.f32	s12, s0
 8002a7a:	eef0 6a60 	vmov.f32	s13, s1
 8002a7e:	eeb0 7a41 	vmov.f32	s14, s2
 8002a82:	eef0 7a61 	vmov.f32	s15, s3
 8002a86:	ed84 6a05 	vstr	s12, [r4, #20]
 8002a8a:	edc4 6a06 	vstr	s13, [r4, #24]
 8002a8e:	ed84 7a07 	vstr	s14, [r4, #28]
 8002a92:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002a96:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002aa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aa6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002aaa:	eeb0 0a46 	vmov.f32	s0, s12
 8002aae:	eef0 0a66 	vmov.f32	s1, s13
 8002ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ab6:	eef0 1a67 	vmov.f32	s3, s15
 8002aba:	f7ff fb36 	bl	800212a <FusionQuaternionNormalise>
 8002abe:	eeb0 6a40 	vmov.f32	s12, s0
 8002ac2:	eef0 6a60 	vmov.f32	s13, s1
 8002ac6:	eeb0 7a41 	vmov.f32	s14, s2
 8002aca:	eef0 7a61 	vmov.f32	s15, s3
 8002ace:	ed84 6a05 	vstr	s12, [r4, #20]
 8002ad2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002ad6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002ada:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002ade:	bf00      	nop
 8002ae0:	37fc      	adds	r7, #252	; 0xfc
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}

08002ae6 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b093      	sub	sp, #76	; 0x4c
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	dc02      	bgt.n	8002afc <HalfGravity+0x16>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da03      	bge.n	8002b02 <HalfGravity+0x1c>
 8002afa:	e094      	b.n	8002c26 <HalfGravity+0x140>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d048      	beq.n	8002b92 <HalfGravity+0xac>
 8002b00:	e091      	b.n	8002c26 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b7e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002b82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b90:	e052      	b.n	8002c38 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002bb6:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002be2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002c12:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002c16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1a:	f107 0218 	add.w	r2, r7, #24
 8002c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c24:	e008      	b.n	8002c38 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	643b      	str	r3, [r7, #64]	; 0x40
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3e:	ee06 1a90 	vmov	s13, r1
 8002c42:	ee07 2a10 	vmov	s14, r2
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c4e:	eef0 0a47 	vmov.f32	s1, s14
 8002c52:	eeb0 1a67 	vmov.f32	s2, s15
 8002c56:	374c      	adds	r7, #76	; 0x4c
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002c60:	b480      	push	{r7}
 8002c62:	b097      	sub	sp, #92	; 0x5c
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	f000 809a 	beq.w	8002da6 <HalfMagnetic+0x146>
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	f300 80e1 	bgt.w	8002e3a <HalfMagnetic+0x1da>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HalfMagnetic+0x22>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d048      	beq.n	8002d12 <HalfMagnetic+0xb2>
 8002c80:	e0db      	b.n	8002e3a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ca6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	ed93 7a05 	vldr	s14, [r3, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cbe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cd6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cfe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002d02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d10:	e09c      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d66:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002da4:	e052      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	edd3 6a05 	vldr	s13, [r3, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dce:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	edd3 6a07 	vldr	s13, [r3, #28]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dfe:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e2e:	f107 021c 	add.w	r2, r7, #28
 8002e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e38:	e008      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	653b      	str	r3, [r7, #80]	; 0x50
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002e4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	ee06 1a90 	vmov	s13, r1
 8002e56:	ee07 2a10 	vmov	s14, r2
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e62:	eef0 0a47 	vmov.f32	s1, s14
 8002e66:	eeb0 1a67 	vmov.f32	s2, s15
 8002e6a:	375c      	adds	r7, #92	; 0x5c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002e74:	b490      	push	{r4, r7}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f107 0418 	add.w	r4, r7, #24
 8002e82:	3314      	adds	r3, #20
 8002e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e8a:	69b8      	ldr	r0, [r7, #24]
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	ee06 0a10 	vmov	s12, r0
 8002e96:	ee06 1a90 	vmov	s13, r1
 8002e9a:	ee07 2a10 	vmov	s14, r2
 8002e9e:	ee07 3a90 	vmov	s15, r3
}
 8002ea2:	eeb0 0a46 	vmov.f32	s0, s12
 8002ea6:	eef0 0a66 	vmov.f32	s1, s13
 8002eaa:	eeb0 1a47 	vmov.f32	s2, s14
 8002eae:	eef0 1a67 	vmov.f32	s3, s15
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc90      	pop	{r4, r7}
 8002eb8:	4770      	bx	lr

08002eba <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002eba:	b590      	push	{r4, r7, lr}
 8002ebc:	b089      	sub	sp, #36	; 0x24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	eef0 0a67 	vmov.f32	s1, s15
 8002f1a:	eeb0 0a46 	vmov.f32	s0, s12
 8002f1e:	f00e feeb 	bl	8011cf8 <atan2f>
 8002f22:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002f26:	ed97 0a00 	vldr	s0, [r7]
 8002f2a:	f7fe fcc3 	bl	80018b4 <FusionDegreesToRadians>
 8002f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f42:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002f46:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f4a:	f00e fe1f 	bl	8011b8c <cosf>
 8002f4e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002f52:	edc7 7a02 	vstr	s15, [r7, #8]
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002f62:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f66:	f00e fe55 	bl	8011c14 <sinf>
 8002f6a:	eef0 7a40 	vmov.f32	s15, s0
 8002f6e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002f72:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002f76:	687c      	ldr	r4, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	ed93 4a05 	vldr	s8, [r3, #20]
 8002f7e:	edd3 4a06 	vldr	s9, [r3, #24]
 8002f82:	ed93 5a07 	vldr	s10, [r3, #28]
 8002f86:	edd3 5a08 	vldr	s11, [r3, #32]
 8002f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002f92:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9a:	eeb0 2a44 	vmov.f32	s4, s8
 8002f9e:	eef0 2a64 	vmov.f32	s5, s9
 8002fa2:	eeb0 3a45 	vmov.f32	s6, s10
 8002fa6:	eef0 3a65 	vmov.f32	s7, s11
 8002faa:	eeb0 0a46 	vmov.f32	s0, s12
 8002fae:	eef0 0a66 	vmov.f32	s1, s13
 8002fb2:	eeb0 1a47 	vmov.f32	s2, s14
 8002fb6:	eef0 1a67 	vmov.f32	s3, s15
 8002fba:	f7fe ff54 	bl	8001e66 <FusionQuaternionMultiply>
 8002fbe:	eeb0 6a40 	vmov.f32	s12, s0
 8002fc2:	eef0 6a60 	vmov.f32	s13, s1
 8002fc6:	eeb0 7a41 	vmov.f32	s14, s2
 8002fca:	eef0 7a61 	vmov.f32	s15, s3
 8002fce:	ed84 6a05 	vstr	s12, [r4, #20]
 8002fd2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002fd6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002fda:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
	...

08002fe8 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800300c <FusionRadiansToDegrees+0x24>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	42652ee0 	.word	0x42652ee0

08003010 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	105a      	asrs	r2, r3, #1
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <FusionFastInverseSqrt+0x54>)
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8003028:	ed97 7a03 	vldr	s14, [r7, #12]
 800302c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003030:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003068 <FusionFastInverseSqrt+0x58>
 8003034:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003038:	edd7 7a03 	vldr	s15, [r7, #12]
 800303c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003048:	eddf 6a08 	vldr	s13, [pc, #32]	; 800306c <FusionFastInverseSqrt+0x5c>
 800304c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003054:	eeb0 0a67 	vmov.f32	s0, s15
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	5f1f1412 	.word	0x5f1f1412
 8003068:	3f36d312 	.word	0x3f36d312
 800306c:	3fd851ff 	.word	0x3fd851ff

08003070 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	eef0 6a40 	vmov.f32	s13, s0
 800307a:	eeb0 7a60 	vmov.f32	s14, s1
 800307e:	eef0 7a41 	vmov.f32	s15, s2
 8003082:	edc7 6a01 	vstr	s13, [r7, #4]
 8003086:	ed87 7a02 	vstr	s14, [r7, #8]
 800308a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800308e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003092:	edd7 7a02 	vldr	s15, [r7, #8]
 8003096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800309a:	edd7 7a03 	vldr	s15, [r7, #12]
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80030b0:	b480      	push	{r7}
 80030b2:	b08f      	sub	sp, #60	; 0x3c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	eef0 6a40 	vmov.f32	s13, s0
 80030ba:	eeb0 7a60 	vmov.f32	s14, s1
 80030be:	eef0 7a41 	vmov.f32	s15, s2
 80030c2:	edc7 1a04 	vstr	s3, [r7, #16]
 80030c6:	edc7 6a05 	vstr	s13, [r7, #20]
 80030ca:	ed87 7a06 	vstr	s14, [r7, #24]
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80030d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80030d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030de:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80030e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80030e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80030f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80030f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8003102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003106:	f107 0220 	add.w	r2, r7, #32
 800310a:	ca07      	ldmia	r2, {r0, r1, r2}
 800310c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	ee06 1a90 	vmov	s13, r1
 800311a:	ee07 2a10 	vmov	s14, r2
 800311e:	ee07 3a90 	vmov	s15, r3
}
 8003122:	eeb0 0a66 	vmov.f32	s0, s13
 8003126:	eef0 0a47 	vmov.f32	s1, s14
 800312a:	eeb0 1a67 	vmov.f32	s2, s15
 800312e:	373c      	adds	r7, #60	; 0x3c
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003138:	b480      	push	{r7}
 800313a:	b091      	sub	sp, #68	; 0x44
 800313c:	af00      	add	r7, sp, #0
 800313e:	eeb0 5a40 	vmov.f32	s10, s0
 8003142:	eef0 5a60 	vmov.f32	s11, s1
 8003146:	eeb0 6a41 	vmov.f32	s12, s2
 800314a:	eef0 6a61 	vmov.f32	s13, s3
 800314e:	eeb0 7a42 	vmov.f32	s14, s4
 8003152:	eef0 7a62 	vmov.f32	s15, s5
 8003156:	ed87 5a07 	vstr	s10, [r7, #28]
 800315a:	edc7 5a08 	vstr	s11, [r7, #32]
 800315e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003162:	edc7 6a04 	vstr	s13, [r7, #16]
 8003166:	ed87 7a05 	vstr	s14, [r7, #20]
 800316a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800316e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003172:	edd7 7a04 	vldr	s15, [r7, #16]
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800317a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800317e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003182:	edd7 7a05 	vldr	s15, [r7, #20]
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800318a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800318e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003192:	edd7 7a06 	vldr	s15, [r7, #24]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800319a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800319e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	ee06 1a90 	vmov	s13, r1
 80031b6:	ee07 2a10 	vmov	s14, r2
 80031ba:	ee07 3a90 	vmov	s15, r3
}
 80031be:	eeb0 0a66 	vmov.f32	s0, s13
 80031c2:	eef0 0a47 	vmov.f32	s1, s14
 80031c6:	eeb0 1a67 	vmov.f32	s2, s15
 80031ca:	3744      	adds	r7, #68	; 0x44
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80031d4:	b480      	push	{r7}
 80031d6:	b091      	sub	sp, #68	; 0x44
 80031d8:	af00      	add	r7, sp, #0
 80031da:	eeb0 5a40 	vmov.f32	s10, s0
 80031de:	eef0 5a60 	vmov.f32	s11, s1
 80031e2:	eeb0 6a41 	vmov.f32	s12, s2
 80031e6:	eef0 6a61 	vmov.f32	s13, s3
 80031ea:	eeb0 7a42 	vmov.f32	s14, s4
 80031ee:	eef0 7a62 	vmov.f32	s15, s5
 80031f2:	ed87 5a07 	vstr	s10, [r7, #28]
 80031f6:	edc7 5a08 	vstr	s11, [r7, #32]
 80031fa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80031fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8003202:	ed87 7a05 	vstr	s14, [r7, #20]
 8003206:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800320a:	ed97 7a08 	vldr	s14, [r7, #32]
 800320e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003216:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800321a:	edd7 7a05 	vldr	s15, [r7, #20]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003226:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800322a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800322e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003236:	edd7 6a07 	vldr	s13, [r7, #28]
 800323a:	edd7 7a06 	vldr	s15, [r7, #24]
 800323e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003242:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003246:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800324a:	ed97 7a07 	vldr	s14, [r7, #28]
 800324e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003256:	edd7 6a08 	vldr	s13, [r7, #32]
 800325a:	edd7 7a04 	vldr	s15, [r7, #16]
 800325e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003266:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800326a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800326e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003272:	ca07      	ldmia	r2, {r0, r1, r2}
 8003274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800327a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	ee06 1a90 	vmov	s13, r1
 8003282:	ee07 2a10 	vmov	s14, r2
 8003286:	ee07 3a90 	vmov	s15, r3
}
 800328a:	eeb0 0a66 	vmov.f32	s0, s13
 800328e:	eef0 0a47 	vmov.f32	s1, s14
 8003292:	eeb0 1a67 	vmov.f32	s2, s15
 8003296:	3744      	adds	r7, #68	; 0x44
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	eef0 6a40 	vmov.f32	s13, s0
 80032aa:	eeb0 7a60 	vmov.f32	s14, s1
 80032ae:	eef0 7a41 	vmov.f32	s15, s2
 80032b2:	edc7 6a01 	vstr	s13, [r7, #4]
 80032b6:	ed87 7a02 	vstr	s14, [r7, #8]
 80032ba:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80032be:	ed97 5a01 	vldr	s10, [r7, #4]
 80032c2:	edd7 5a02 	vldr	s11, [r7, #8]
 80032c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80032ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80032d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d6:	eef0 1a45 	vmov.f32	s3, s10
 80032da:	eeb0 2a65 	vmov.f32	s4, s11
 80032de:	eef0 2a46 	vmov.f32	s5, s12
 80032e2:	eeb0 0a66 	vmov.f32	s0, s13
 80032e6:	eef0 0a47 	vmov.f32	s1, s14
 80032ea:	eeb0 1a67 	vmov.f32	s2, s15
 80032ee:	f7ff ff23 	bl	8003138 <FusionVectorHadamardProduct>
 80032f2:	eef0 6a40 	vmov.f32	s13, s0
 80032f6:	eeb0 7a60 	vmov.f32	s14, s1
 80032fa:	eef0 7a41 	vmov.f32	s15, s2
 80032fe:	edc7 6a05 	vstr	s13, [r7, #20]
 8003302:	ed87 7a06 	vstr	s14, [r7, #24]
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
 800330a:	edd7 6a05 	vldr	s13, [r7, #20]
 800330e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003312:	edd7 7a07 	vldr	s15, [r7, #28]
 8003316:	eeb0 0a66 	vmov.f32	s0, s13
 800331a:	eef0 0a47 	vmov.f32	s1, s14
 800331e:	eeb0 1a67 	vmov.f32	s2, s15
 8003322:	f7ff fea5 	bl	8003070 <FusionVectorSum>
 8003326:	eef0 7a40 	vmov.f32	s15, s0
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	eef0 6a40 	vmov.f32	s13, s0
 800333e:	eeb0 7a60 	vmov.f32	s14, s1
 8003342:	eef0 7a41 	vmov.f32	s15, s2
 8003346:	edc7 6a05 	vstr	s13, [r7, #20]
 800334a:	ed87 7a06 	vstr	s14, [r7, #24]
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8003352:	edd7 6a05 	vldr	s13, [r7, #20]
 8003356:	ed97 7a06 	vldr	s14, [r7, #24]
 800335a:	edd7 7a07 	vldr	s15, [r7, #28]
 800335e:	eeb0 0a66 	vmov.f32	s0, s13
 8003362:	eef0 0a47 	vmov.f32	s1, s14
 8003366:	eeb0 1a67 	vmov.f32	s2, s15
 800336a:	f7ff ff99 	bl	80032a0 <FusionVectorMagnitudeSquared>
 800336e:	eef0 7a40 	vmov.f32	s15, s0
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	f7ff fe4b 	bl	8003010 <FusionFastInverseSqrt>
 800337a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800337e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003382:	ed97 7a06 	vldr	s14, [r7, #24]
 8003386:	edd7 7a07 	vldr	s15, [r7, #28]
 800338a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800338e:	eeb0 0a66 	vmov.f32	s0, s13
 8003392:	eef0 0a47 	vmov.f32	s1, s14
 8003396:	eeb0 1a67 	vmov.f32	s2, s15
 800339a:	f7ff fe89 	bl	80030b0 <FusionVectorMultiplyScalar>
 800339e:	eef0 6a40 	vmov.f32	s13, s0
 80033a2:	eeb0 7a60 	vmov.f32	s14, s1
 80033a6:	eef0 7a41 	vmov.f32	s15, s2
 80033aa:	edc7 6a08 	vstr	s13, [r7, #32]
 80033ae:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80033b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	ee06 1a90 	vmov	s13, r1
 80033c0:	ee07 2a10 	vmov	s14, r2
 80033c4:	ee07 3a90 	vmov	s15, r3
}
 80033c8:	eeb0 0a66 	vmov.f32	s0, s13
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 1a67 	vmov.f32	s2, s15
 80033d4:	3730      	adds	r7, #48	; 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0b2      	sub	sp, #200	; 0xc8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	eeb0 5a40 	vmov.f32	s10, s0
 80033e8:	eef0 5a60 	vmov.f32	s11, s1
 80033ec:	eeb0 6a41 	vmov.f32	s12, s2
 80033f0:	eef0 6a61 	vmov.f32	s13, s3
 80033f4:	eeb0 7a42 	vmov.f32	s14, s4
 80033f8:	eef0 7a62 	vmov.f32	s15, s5
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	ed87 5a04 	vstr	s10, [r7, #16]
 8003402:	edc7 5a05 	vstr	s11, [r7, #20]
 8003406:	ed87 6a06 	vstr	s12, [r7, #24]
 800340a:	edc7 6a01 	vstr	s13, [r7, #4]
 800340e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003412:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 8003416:	7ffb      	ldrb	r3, [r7, #31]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f000 814b 	beq.w	80036b4 <FusionCompassCalculateHeading+0x2d8>
 800341e:	2b02      	cmp	r3, #2
 8003420:	f300 81f7 	bgt.w	8003812 <FusionCompassCalculateHeading+0x436>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <FusionCompassCalculateHeading+0x54>
 8003428:	2b01      	cmp	r3, #1
 800342a:	f000 8094 	beq.w	8003556 <FusionCompassCalculateHeading+0x17a>
 800342e:	e1f0      	b.n	8003812 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003430:	ed97 5a01 	vldr	s10, [r7, #4]
 8003434:	edd7 5a02 	vldr	s11, [r7, #8]
 8003438:	ed97 6a03 	vldr	s12, [r7, #12]
 800343c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003440:	ed97 7a05 	vldr	s14, [r7, #20]
 8003444:	edd7 7a06 	vldr	s15, [r7, #24]
 8003448:	eef0 1a45 	vmov.f32	s3, s10
 800344c:	eeb0 2a65 	vmov.f32	s4, s11
 8003450:	eef0 2a46 	vmov.f32	s5, s12
 8003454:	eeb0 0a66 	vmov.f32	s0, s13
 8003458:	eef0 0a47 	vmov.f32	s1, s14
 800345c:	eeb0 1a67 	vmov.f32	s2, s15
 8003460:	f7ff feb8 	bl	80031d4 <FusionVectorCrossProduct>
 8003464:	eef0 6a40 	vmov.f32	s13, s0
 8003468:	eeb0 7a60 	vmov.f32	s14, s1
 800346c:	eef0 7a41 	vmov.f32	s15, s2
 8003470:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003474:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8003478:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800347c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003480:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003484:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003488:	eeb0 0a66 	vmov.f32	s0, s13
 800348c:	eef0 0a47 	vmov.f32	s1, s14
 8003490:	eeb0 1a67 	vmov.f32	s2, s15
 8003494:	f7ff ff4e 	bl	8003334 <FusionVectorNormalise>
 8003498:	eef0 6a40 	vmov.f32	s13, s0
 800349c:	eeb0 7a60 	vmov.f32	s14, s1
 80034a0:	eef0 7a41 	vmov.f32	s15, s2
 80034a4:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 80034a8:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 80034ac:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80034b0:	ed97 5a04 	vldr	s10, [r7, #16]
 80034b4:	edd7 5a05 	vldr	s11, [r7, #20]
 80034b8:	ed97 6a06 	vldr	s12, [r7, #24]
 80034bc:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80034c0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80034c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80034c8:	eef0 1a45 	vmov.f32	s3, s10
 80034cc:	eeb0 2a65 	vmov.f32	s4, s11
 80034d0:	eef0 2a46 	vmov.f32	s5, s12
 80034d4:	eeb0 0a66 	vmov.f32	s0, s13
 80034d8:	eef0 0a47 	vmov.f32	s1, s14
 80034dc:	eeb0 1a67 	vmov.f32	s2, s15
 80034e0:	f7ff fe78 	bl	80031d4 <FusionVectorCrossProduct>
 80034e4:	eef0 6a40 	vmov.f32	s13, s0
 80034e8:	eeb0 7a60 	vmov.f32	s14, s1
 80034ec:	eef0 7a41 	vmov.f32	s15, s2
 80034f0:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80034f4:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80034f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80034fc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003500:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003504:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003508:	eeb0 0a66 	vmov.f32	s0, s13
 800350c:	eef0 0a47 	vmov.f32	s1, s14
 8003510:	eeb0 1a67 	vmov.f32	s2, s15
 8003514:	f7ff ff0e 	bl	8003334 <FusionVectorNormalise>
 8003518:	eef0 6a40 	vmov.f32	s13, s0
 800351c:	eeb0 7a60 	vmov.f32	s14, s1
 8003520:	eef0 7a41 	vmov.f32	s15, s2
 8003524:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8003528:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 800352c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8003530:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003534:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003538:	eef0 0a47 	vmov.f32	s1, s14
 800353c:	eeb0 0a67 	vmov.f32	s0, s15
 8003540:	f00e fbda 	bl	8011cf8 <atan2f>
 8003544:	eef0 7a40 	vmov.f32	s15, s0
 8003548:	eeb0 0a67 	vmov.f32	s0, s15
 800354c:	f7ff fd4c 	bl	8002fe8 <FusionRadiansToDegrees>
 8003550:	eef0 7a40 	vmov.f32	s15, s0
 8003554:	e15f      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003556:	ed97 5a01 	vldr	s10, [r7, #4]
 800355a:	edd7 5a02 	vldr	s11, [r7, #8]
 800355e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003562:	edd7 6a04 	vldr	s13, [r7, #16]
 8003566:	ed97 7a05 	vldr	s14, [r7, #20]
 800356a:	edd7 7a06 	vldr	s15, [r7, #24]
 800356e:	eef0 1a45 	vmov.f32	s3, s10
 8003572:	eeb0 2a65 	vmov.f32	s4, s11
 8003576:	eef0 2a46 	vmov.f32	s5, s12
 800357a:	eeb0 0a66 	vmov.f32	s0, s13
 800357e:	eef0 0a47 	vmov.f32	s1, s14
 8003582:	eeb0 1a67 	vmov.f32	s2, s15
 8003586:	f7ff fe25 	bl	80031d4 <FusionVectorCrossProduct>
 800358a:	eef0 6a40 	vmov.f32	s13, s0
 800358e:	eeb0 7a60 	vmov.f32	s14, s1
 8003592:	eef0 7a41 	vmov.f32	s15, s2
 8003596:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800359a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800359e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80035a2:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80035a6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80035aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80035ae:	eeb0 0a66 	vmov.f32	s0, s13
 80035b2:	eef0 0a47 	vmov.f32	s1, s14
 80035b6:	eeb0 1a67 	vmov.f32	s2, s15
 80035ba:	f7ff febb 	bl	8003334 <FusionVectorNormalise>
 80035be:	eef0 6a40 	vmov.f32	s13, s0
 80035c2:	eeb0 7a60 	vmov.f32	s14, s1
 80035c6:	eef0 7a41 	vmov.f32	s15, s2
 80035ca:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 80035ce:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80035d2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80035d6:	ed97 5a04 	vldr	s10, [r7, #16]
 80035da:	edd7 5a05 	vldr	s11, [r7, #20]
 80035de:	ed97 6a06 	vldr	s12, [r7, #24]
 80035e2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80035e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80035ea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80035ee:	eef0 1a45 	vmov.f32	s3, s10
 80035f2:	eeb0 2a65 	vmov.f32	s4, s11
 80035f6:	eef0 2a46 	vmov.f32	s5, s12
 80035fa:	eeb0 0a66 	vmov.f32	s0, s13
 80035fe:	eef0 0a47 	vmov.f32	s1, s14
 8003602:	eeb0 1a67 	vmov.f32	s2, s15
 8003606:	f7ff fde5 	bl	80031d4 <FusionVectorCrossProduct>
 800360a:	eef0 6a40 	vmov.f32	s13, s0
 800360e:	eeb0 7a60 	vmov.f32	s14, s1
 8003612:	eef0 7a41 	vmov.f32	s15, s2
 8003616:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 800361a:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 800361e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 8003622:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8003626:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800362a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800362e:	eeb0 0a66 	vmov.f32	s0, s13
 8003632:	eef0 0a47 	vmov.f32	s1, s14
 8003636:	eeb0 1a67 	vmov.f32	s2, s15
 800363a:	f7ff fe7b 	bl	8003334 <FusionVectorNormalise>
 800363e:	eef0 6a40 	vmov.f32	s13, s0
 8003642:	eeb0 7a60 	vmov.f32	s14, s1
 8003646:	eef0 7a41 	vmov.f32	s15, s2
 800364a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800364e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8003652:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 8003656:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800365a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800365e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003662:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003666:	eeb0 0a66 	vmov.f32	s0, s13
 800366a:	eef0 0a47 	vmov.f32	s1, s14
 800366e:	eeb0 1a67 	vmov.f32	s2, s15
 8003672:	f7ff fd1d 	bl	80030b0 <FusionVectorMultiplyScalar>
 8003676:	eef0 6a40 	vmov.f32	s13, s0
 800367a:	eeb0 7a60 	vmov.f32	s14, s1
 800367e:	eef0 7a41 	vmov.f32	s15, s2
 8003682:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8003686:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800368a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800368e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003692:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003696:	eef0 0a47 	vmov.f32	s1, s14
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	f00e fb2b 	bl	8011cf8 <atan2f>
 80036a2:	eef0 7a40 	vmov.f32	s15, s0
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	f7ff fc9d 	bl	8002fe8 <FusionRadiansToDegrees>
 80036ae:	eef0 7a40 	vmov.f32	s15, s0
 80036b2:	e0b0      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 80036b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80036b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80036bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80036c0:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80036c4:	eeb0 0a66 	vmov.f32	s0, s13
 80036c8:	eef0 0a47 	vmov.f32	s1, s14
 80036cc:	eeb0 1a67 	vmov.f32	s2, s15
 80036d0:	f7ff fcee 	bl	80030b0 <FusionVectorMultiplyScalar>
 80036d4:	eef0 6a40 	vmov.f32	s13, s0
 80036d8:	eeb0 7a60 	vmov.f32	s14, s1
 80036dc:	eef0 7a41 	vmov.f32	s15, s2
 80036e0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80036e4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80036e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 80036ec:	ed97 5a01 	vldr	s10, [r7, #4]
 80036f0:	edd7 5a02 	vldr	s11, [r7, #8]
 80036f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80036fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003700:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003704:	eef0 1a45 	vmov.f32	s3, s10
 8003708:	eeb0 2a65 	vmov.f32	s4, s11
 800370c:	eef0 2a46 	vmov.f32	s5, s12
 8003710:	eeb0 0a66 	vmov.f32	s0, s13
 8003714:	eef0 0a47 	vmov.f32	s1, s14
 8003718:	eeb0 1a67 	vmov.f32	s2, s15
 800371c:	f7ff fd5a 	bl	80031d4 <FusionVectorCrossProduct>
 8003720:	eef0 6a40 	vmov.f32	s13, s0
 8003724:	eeb0 7a60 	vmov.f32	s14, s1
 8003728:	eef0 7a41 	vmov.f32	s15, s2
 800372c:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 8003730:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 8003734:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8003738:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800373c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003740:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003744:	eeb0 0a66 	vmov.f32	s0, s13
 8003748:	eef0 0a47 	vmov.f32	s1, s14
 800374c:	eeb0 1a67 	vmov.f32	s2, s15
 8003750:	f7ff fdf0 	bl	8003334 <FusionVectorNormalise>
 8003754:	eef0 6a40 	vmov.f32	s13, s0
 8003758:	eeb0 7a60 	vmov.f32	s14, s1
 800375c:	eef0 7a41 	vmov.f32	s15, s2
 8003760:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003764:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003768:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 800376c:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003770:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003774:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8003778:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800377c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003780:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003784:	eef0 1a45 	vmov.f32	s3, s10
 8003788:	eeb0 2a65 	vmov.f32	s4, s11
 800378c:	eef0 2a46 	vmov.f32	s5, s12
 8003790:	eeb0 0a66 	vmov.f32	s0, s13
 8003794:	eef0 0a47 	vmov.f32	s1, s14
 8003798:	eeb0 1a67 	vmov.f32	s2, s15
 800379c:	f7ff fd1a 	bl	80031d4 <FusionVectorCrossProduct>
 80037a0:	eef0 6a40 	vmov.f32	s13, s0
 80037a4:	eeb0 7a60 	vmov.f32	s14, s1
 80037a8:	eef0 7a41 	vmov.f32	s15, s2
 80037ac:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 80037b0:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 80037b4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 80037b8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80037bc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80037c0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80037c4:	eeb0 0a66 	vmov.f32	s0, s13
 80037c8:	eef0 0a47 	vmov.f32	s1, s14
 80037cc:	eeb0 1a67 	vmov.f32	s2, s15
 80037d0:	f7ff fdb0 	bl	8003334 <FusionVectorNormalise>
 80037d4:	eef0 6a40 	vmov.f32	s13, s0
 80037d8:	eeb0 7a60 	vmov.f32	s14, s1
 80037dc:	eef0 7a41 	vmov.f32	s15, s2
 80037e0:	edc7 6a08 	vstr	s13, [r7, #32]
 80037e4:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80037e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80037ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80037f4:	eef0 0a47 	vmov.f32	s1, s14
 80037f8:	eeb0 0a67 	vmov.f32	s0, s15
 80037fc:	f00e fa7c 	bl	8011cf8 <atan2f>
 8003800:	eef0 7a40 	vmov.f32	s15, s0
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	f7ff fbee 	bl	8002fe8 <FusionRadiansToDegrees>
 800380c:	eef0 7a40 	vmov.f32	s15, s0
 8003810:	e001      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 8003812:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003820 <FusionCompassCalculateHeading+0x444>
}
 8003816:	eeb0 0a67 	vmov.f32	s0, s15
 800381a:	37c8      	adds	r7, #200	; 0xc8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00000000 	.word	0x00000000

08003824 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8003824:	b480      	push	{r7}
 8003826:	b091      	sub	sp, #68	; 0x44
 8003828:	af00      	add	r7, sp, #0
 800382a:	eeb0 5a40 	vmov.f32	s10, s0
 800382e:	eef0 5a60 	vmov.f32	s11, s1
 8003832:	eeb0 6a41 	vmov.f32	s12, s2
 8003836:	eef0 6a61 	vmov.f32	s13, s3
 800383a:	eeb0 7a42 	vmov.f32	s14, s4
 800383e:	eef0 7a62 	vmov.f32	s15, s5
 8003842:	ed87 5a07 	vstr	s10, [r7, #28]
 8003846:	edc7 5a08 	vstr	s11, [r7, #32]
 800384a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800384e:	edc7 6a04 	vstr	s13, [r7, #16]
 8003852:	ed87 7a05 	vstr	s14, [r7, #20]
 8003856:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 800385a:	ed97 7a07 	vldr	s14, [r7, #28]
 800385e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003866:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800386a:	ed97 7a08 	vldr	s14, [r7, #32]
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003876:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800387a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800387e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003882:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003886:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800388a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800388e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003892:	ca07      	ldmia	r2, {r0, r1, r2}
 8003894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800389a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	ee06 1a90 	vmov	s13, r1
 80038a2:	ee07 2a10 	vmov	s14, r2
 80038a6:	ee07 3a90 	vmov	s15, r3
}
 80038aa:	eeb0 0a66 	vmov.f32	s0, s13
 80038ae:	eef0 0a47 	vmov.f32	s1, s14
 80038b2:	eeb0 1a67 	vmov.f32	s2, s15
 80038b6:	3744      	adds	r7, #68	; 0x44
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80038c0:	b480      	push	{r7}
 80038c2:	b091      	sub	sp, #68	; 0x44
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	eeb0 5a40 	vmov.f32	s10, s0
 80038ca:	eef0 5a60 	vmov.f32	s11, s1
 80038ce:	eeb0 6a41 	vmov.f32	s12, s2
 80038d2:	eef0 6a61 	vmov.f32	s13, s3
 80038d6:	eeb0 7a42 	vmov.f32	s14, s4
 80038da:	eef0 7a62 	vmov.f32	s15, s5
 80038de:	ed87 5a07 	vstr	s10, [r7, #28]
 80038e2:	edc7 5a08 	vstr	s11, [r7, #32]
 80038e6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80038ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80038ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80038f2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 80038f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80038fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80038fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003902:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8003906:	ed97 7a08 	vldr	s14, [r7, #32]
 800390a:	edd7 7a05 	vldr	s15, [r7, #20]
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003912:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8003916:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800391a:	edd7 7a06 	vldr	s15, [r7, #24]
 800391e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003922:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800392a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800392e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	ee06 1a90 	vmov	s13, r1
 800393e:	ee07 2a10 	vmov	s14, r2
 8003942:	ee07 3a90 	vmov	s15, r3
}
 8003946:	eeb0 0a66 	vmov.f32	s0, s13
 800394a:	eef0 0a47 	vmov.f32	s1, s14
 800394e:	eeb0 1a67 	vmov.f32	s2, s15
 8003952:	3744      	adds	r7, #68	; 0x44
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800395c:	b480      	push	{r7}
 800395e:	b08f      	sub	sp, #60	; 0x3c
 8003960:	af00      	add	r7, sp, #0
 8003962:	eef0 6a40 	vmov.f32	s13, s0
 8003966:	eeb0 7a60 	vmov.f32	s14, s1
 800396a:	eef0 7a41 	vmov.f32	s15, s2
 800396e:	edc7 1a04 	vstr	s3, [r7, #16]
 8003972:	edc7 6a05 	vstr	s13, [r7, #20]
 8003976:	ed87 7a06 	vstr	s14, [r7, #24]
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800397e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003982:	edd7 7a04 	vldr	s15, [r7, #16]
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800398a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800398e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003992:	edd7 7a04 	vldr	s15, [r7, #16]
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800399a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800399e:	ed97 7a07 	vldr	s14, [r7, #28]
 80039a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80039aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80039ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b2:	f107 0220 	add.w	r2, r7, #32
 80039b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	ee06 1a90 	vmov	s13, r1
 80039c6:	ee07 2a10 	vmov	s14, r2
 80039ca:	ee07 3a90 	vmov	s15, r3
}
 80039ce:	eeb0 0a66 	vmov.f32	s0, s13
 80039d2:	eef0 0a47 	vmov.f32	s1, s14
 80039d6:	eeb0 1a67 	vmov.f32	s2, s15
 80039da:	373c      	adds	r7, #60	; 0x3c
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a44 <FusionOffsetInitialise+0x60>
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	3e00adfd 	.word	0x3e00adfd

08003a48 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08f      	sub	sp, #60	; 0x3c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	61f8      	str	r0, [r7, #28]
 8003a50:	eef0 6a40 	vmov.f32	s13, s0
 8003a54:	eeb0 7a60 	vmov.f32	s14, s1
 8003a58:	eef0 7a41 	vmov.f32	s15, s2
 8003a5c:	edc7 6a04 	vstr	s13, [r7, #16]
 8003a60:	ed87 7a05 	vstr	s14, [r7, #20]
 8003a64:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	ed93 5a03 	vldr	s10, [r3, #12]
 8003a6e:	edd3 5a04 	vldr	s11, [r3, #16]
 8003a72:	ed93 6a05 	vldr	s12, [r3, #20]
 8003a76:	edd7 6a04 	vldr	s13, [r7, #16]
 8003a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a82:	eef0 1a45 	vmov.f32	s3, s10
 8003a86:	eeb0 2a65 	vmov.f32	s4, s11
 8003a8a:	eef0 2a46 	vmov.f32	s5, s12
 8003a8e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a92:	eef0 0a47 	vmov.f32	s1, s14
 8003a96:	eeb0 1a67 	vmov.f32	s2, s15
 8003a9a:	f7ff ff11 	bl	80038c0 <FusionVectorSubtract>
 8003a9e:	eef0 6a40 	vmov.f32	s13, s0
 8003aa2:	eeb0 7a60 	vmov.f32	s14, s1
 8003aa6:	eef0 7a41 	vmov.f32	s15, s2
 8003aaa:	edc7 6a04 	vstr	s13, [r7, #16]
 8003aae:	ed87 7a05 	vstr	s14, [r7, #20]
 8003ab2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	eef0 7ae7 	vabs.f32	s15, s15
 8003abe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dc15      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ad4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	dc0a      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ae6:	eef0 7ae7 	vabs.f32	s15, s15
 8003aea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	dd0a      	ble.n	8003b0e <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003afe:	f107 0320 	add.w	r3, r7, #32
 8003b02:	f107 0210 	add.w	r2, r7, #16
 8003b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b0c:	e060      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <FusionOffsetUpdate+0xec>
        offset->timer++;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003b24:	f107 0320 	add.w	r3, r7, #32
 8003b28:	f107 0210 	add.w	r2, r7, #16
 8003b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b32:	e04d      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	ed93 6a00 	vldr	s12, [r3]
 8003b3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b46:	eef0 1a46 	vmov.f32	s3, s12
 8003b4a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b4e:	eef0 0a47 	vmov.f32	s1, s14
 8003b52:	eeb0 1a67 	vmov.f32	s2, s15
 8003b56:	f7ff ff01 	bl	800395c <FusionVectorMultiplyScalar>
 8003b5a:	eef0 6a40 	vmov.f32	s13, s0
 8003b5e:	eeb0 7a60 	vmov.f32	s14, s1
 8003b62:	eef0 7a41 	vmov.f32	s15, s2
 8003b66:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003b6a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003b6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003b72:	69fc      	ldr	r4, [r7, #28]
 8003b74:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8003b78:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8003b7c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b8e:	eef0 1a45 	vmov.f32	s3, s10
 8003b92:	eeb0 2a65 	vmov.f32	s4, s11
 8003b96:	eef0 2a46 	vmov.f32	s5, s12
 8003b9a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b9e:	eef0 0a47 	vmov.f32	s1, s14
 8003ba2:	eeb0 1a67 	vmov.f32	s2, s15
 8003ba6:	f7ff fe3d 	bl	8003824 <FusionVectorAdd>
 8003baa:	eef0 6a40 	vmov.f32	s13, s0
 8003bae:	eeb0 7a60 	vmov.f32	s14, s1
 8003bb2:	eef0 7a41 	vmov.f32	s15, s2
 8003bb6:	edc4 6a03 	vstr	s13, [r4, #12]
 8003bba:	ed84 7a04 	vstr	s14, [r4, #16]
 8003bbe:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	f107 0210 	add.w	r2, r7, #16
 8003bca:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	ee06 1a90 	vmov	s13, r1
 8003bda:	ee07 2a10 	vmov	s14, r2
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eeb0 0a66 	vmov.f32	s0, s13
 8003be6:	eef0 0a47 	vmov.f32	s1, s14
 8003bea:	eeb0 1a67 	vmov.f32	s2, s15
 8003bee:	373c      	adds	r7, #60	; 0x3c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <ublox_i2c_bus_init+0x78>)
 8003bfc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B03FDB;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <ublox_i2c_bus_init+0x7c>)
 8003c02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c2e:	480e      	ldr	r0, [pc, #56]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c30:	f002 fdbb 	bl	80067aa <HAL_I2C_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e012      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4809      	ldr	r0, [pc, #36]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c42:	f003 fc23 	bl	800748c <HAL_I2CEx_ConfigAnalogFilter>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e009      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	4805      	ldr	r0, [pc, #20]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c54:	f003 fc65 	bl	8007522 <HAL_I2CEx_ConfigDigitalFilter>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e000      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000290 	.word	0x20000290
 8003c6c:	40005400 	.word	0x40005400
 8003c70:	00b03fdb 	.word	0x00b03fdb

08003c74 <ublox_tick>:


void ublox_tick(void){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	71fb      	strb	r3, [r7, #7]
    res = ubloxRead();
 8003c7e:	f000 f871 	bl	8003d64 <ubloxRead>
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
    if ((res == 8) || (res==10)){
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d005      	beq.n	8003c98 <ublox_tick+0x24>
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d002      	beq.n	8003c98 <ublox_tick+0x24>
        uart_write_debug("Failed to read\r\n",UART_NYX);
#endif
        return;
    }
    else{
        parseNMEA();
 8003c92:	f000 f8c5 	bl	8003e20 <parseNMEA>
 8003c96:	e000      	b.n	8003c9a <ublox_tick+0x26>
        return;
 8003c98:	bf00      	nop
    }
}
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <ubloxInit>:
//    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
//    message[11] = (gps_data.altitude & 0x000000FF);
//    transmitMessage(message, 12, cmd, device);
//}

HAL_StatusTypeDef ubloxInit(void){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret=0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	71fb      	strb	r3, [r7, #7]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 8003caa:	2102      	movs	r1, #2
 8003cac:	2000      	movs	r0, #0
 8003cae:	f000 fa95 	bl	80041dc <setPortOutput>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <ubloxInit+0x20>
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	e04d      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	20f0      	movs	r0, #240	; 0xf0
 8003cc8:	f000 fab8 	bl	800423c <configureNMEA>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <ubloxInit+0x3a>
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	e040      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2102      	movs	r1, #2
 8003ce0:	20f0      	movs	r0, #240	; 0xf0
 8003ce2:	f000 faab 	bl	800423c <configureNMEA>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <ubloxInit+0x54>
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	e033      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2103      	movs	r1, #3
 8003cfa:	20f0      	movs	r0, #240	; 0xf0
 8003cfc:	f000 fa9e 	bl	800423c <configureNMEA>
 8003d00:	4603      	mov	r3, r0
 8003d02:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <ubloxInit+0x6e>
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	e026      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2200      	movs	r2, #0
 8003d12:	2104      	movs	r1, #4
 8003d14:	20f0      	movs	r0, #240	; 0xf0
 8003d16:	f000 fa91 	bl	800423c <configureNMEA>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <ubloxInit+0x88>
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	e019      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2105      	movs	r1, #5
 8003d2e:	20f0      	movs	r0, #240	; 0xf0
 8003d30:	f000 fa84 	bl	800423c <configureNMEA>
 8003d34:	4603      	mov	r3, r0
 8003d36:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <ubloxInit+0xa2>
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	e00c      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8003d42:	2300      	movs	r3, #0
 8003d44:	2202      	movs	r2, #2
 8003d46:	2100      	movs	r1, #0
 8003d48:	20f0      	movs	r0, #240	; 0xf0
 8003d4a:	f000 fa77 	bl	800423c <configureNMEA>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <ubloxInit+0xbc>
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	e7ff      	b.n	8003d5c <ubloxInit+0xbc>
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <ubloxRead>:

HAL_StatusTypeDef ubloxNmeaGGA_set_refresh_rate(uint8_t seconds){
    return configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, seconds, COM_PORT_I2C);
}

uint8_t ubloxRead(void){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af04      	add	r7, sp, #16
    uint8_t res = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	717b      	strb	r3, [r7, #5]

    uint16_t num = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	80fb      	strh	r3, [r7, #6]
    uint8_t bytes[2] = {0};
 8003d72:	2300      	movs	r3, #0
 8003d74:	803b      	strh	r3, [r7, #0]

    res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFD, I2C_MEMADD_SIZE_8BIT, bytes, 2, 20);
 8003d76:	2314      	movs	r3, #20
 8003d78:	9302      	str	r3, [sp, #8]
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	463b      	mov	r3, r7
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2301      	movs	r3, #1
 8003d84:	22fd      	movs	r2, #253	; 0xfd
 8003d86:	2184      	movs	r1, #132	; 0x84
 8003d88:	4822      	ldr	r0, [pc, #136]	; (8003e14 <ubloxRead+0xb0>)
 8003d8a:	f002 ffa5 	bl	8006cd8 <HAL_I2C_Mem_Read>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	717b      	strb	r3, [r7, #5]
    if (res!=HAL_OK)return res;
 8003d92:	797b      	ldrb	r3, [r7, #5]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <ubloxRead+0x38>
 8003d98:	797b      	ldrb	r3, [r7, #5]
 8003d9a:	e037      	b.n	8003e0c <ubloxRead+0xa8>
    num  = ((bytes[0] << 8) | bytes[1]);
 8003d9c:	783b      	ldrb	r3, [r7, #0]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	787b      	ldrb	r3, [r7, #1]
 8003da4:	b21b      	sxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b21b      	sxth	r3, r3
 8003daa:	80fb      	strh	r3, [r7, #6]
    memset(bytes, 0, 2);
 8003dac:	463b      	mov	r3, r7
 8003dae:	2202      	movs	r2, #2
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f00a ffea 	bl	800ed8c <memset>
    if (num > 0){
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d025      	beq.n	8003e0a <ubloxRead+0xa6>
    	if (num>140)num=140;
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b8c      	cmp	r3, #140	; 0x8c
 8003dc2:	d901      	bls.n	8003dc8 <ubloxRead+0x64>
 8003dc4:	238c      	movs	r3, #140	; 0x8c
 8003dc6:	80fb      	strh	r3, [r7, #6]
        res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFF, I2C_MEMADD_SIZE_8BIT, gps_data.sentence, num, 100);
 8003dc8:	2364      	movs	r3, #100	; 0x64
 8003dca:	9302      	str	r3, [sp, #8]
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <ubloxRead+0xb4>)
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	22ff      	movs	r2, #255	; 0xff
 8003dd8:	2184      	movs	r1, #132	; 0x84
 8003dda:	480e      	ldr	r0, [pc, #56]	; (8003e14 <ubloxRead+0xb0>)
 8003ddc:	f002 ff7c 	bl	8006cd8 <HAL_I2C_Mem_Read>
 8003de0:	4603      	mov	r3, r0
 8003de2:	717b      	strb	r3, [r7, #5]
        if ((res != HAL_OK) || (gps_data.sentence[0] != '$')){
 8003de4:	797b      	ldrb	r3, [r7, #5]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <ubloxRead+0x8e>
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <ubloxRead+0xb4>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b24      	cmp	r3, #36	; 0x24
 8003df0:	d001      	beq.n	8003df6 <ubloxRead+0x92>
                return 10;
 8003df2:	230a      	movs	r3, #10
 8003df4:	e00a      	b.n	8003e0c <ubloxRead+0xa8>
        }
//#ifdef __DEBUG__
        uart_write_debug(gps_data.sentence, 50);
 8003df6:	2132      	movs	r1, #50	; 0x32
 8003df8:	4807      	ldr	r0, [pc, #28]	; (8003e18 <ubloxRead+0xb4>)
 8003dfa:	f001 ffc5 	bl	8005d88 <uart_write_debug>
        uart_write_debug("\r\n", 10);
 8003dfe:	210a      	movs	r1, #10
 8003e00:	4806      	ldr	r0, [pc, #24]	; (8003e1c <ubloxRead+0xb8>)
 8003e02:	f001 ffc1 	bl	8005d88 <uart_write_debug>
//#endif
        return res;
 8003e06:	797b      	ldrb	r3, [r7, #5]
 8003e08:	e000      	b.n	8003e0c <ubloxRead+0xa8>
    }
    return 10;
 8003e0a:	230a      	movs	r3, #10
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000290 	.word	0x20000290
 8003e18:	200002e4 	.word	0x200002e4
 8003e1c:	080132d8 	.word	0x080132d8

08003e20 <parseNMEA>:

uint8_t parseNMEA(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
    char lat[12] = {0};
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	f107 0320 	add.w	r3, r7, #32
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
    char lng[12] = {0};
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
    char alt[7] = {0};
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	801a      	strh	r2, [r3, #0]
 8003e50:	460a      	mov	r2, r1
 8003e52:	709a      	strb	r2, [r3, #2]
    const char NMEA_delimiter[2] = ",";
 8003e54:	232c      	movs	r3, #44	; 0x2c
 8003e56:	80bb      	strh	r3, [r7, #4]
    char * token = strtoke(gps_data.sentence, NMEA_delimiter);
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4868      	ldr	r0, [pc, #416]	; (8004000 <parseNMEA+0x1e0>)
 8003e5e:	f000 fa5b 	bl	8004318 <strtoke>
 8003e62:	4603      	mov	r3, r0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t i = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (i = 0; token != NULL; i++) {
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e72:	e063      	b.n	8003f3c <parseNMEA+0x11c>
        switch (i) {
 8003e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e78:	2b0b      	cmp	r3, #11
 8003e7a:	d853      	bhi.n	8003f24 <parseNMEA+0x104>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <parseNMEA+0x64>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003f25 	.word	0x08003f25
 8003e88:	08003eb5 	.word	0x08003eb5
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ecd 	.word	0x08003ecd
 8003e94:	08003ed7 	.word	0x08003ed7
 8003e98:	08003ee5 	.word	0x08003ee5
 8003e9c:	08003eef 	.word	0x08003eef
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003f03 	.word	0x08003f03
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003f25 	.word	0x08003f25
 8003eb0:	08003f1b 	.word	0x08003f1b
        case 0:
            break;
        case 1:
            strcpy(gps_data.timestamp, token);
 8003eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb6:	4853      	ldr	r0, [pc, #332]	; (8004004 <parseNMEA+0x1e4>)
 8003eb8:	f00b fbfa 	bl	800f6b0 <strcpy>
            break;
 8003ebc:	e032      	b.n	8003f24 <parseNMEA+0x104>
        case 2:
            strcpy(lat, token);
 8003ebe:	f107 031c 	add.w	r3, r7, #28
 8003ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f00b fbf3 	bl	800f6b0 <strcpy>
            break;
 8003eca:	e02b      	b.n	8003f24 <parseNMEA+0x104>
        case 3:
            strcpy(gps_data.NS, token);
 8003ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ece:	484e      	ldr	r0, [pc, #312]	; (8004008 <parseNMEA+0x1e8>)
 8003ed0:	f00b fbee 	bl	800f6b0 <strcpy>
            break;
 8003ed4:	e026      	b.n	8003f24 <parseNMEA+0x104>
        case 4:
            strcpy(lng, token);
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003edc:	4618      	mov	r0, r3
 8003ede:	f00b fbe7 	bl	800f6b0 <strcpy>
            break;
 8003ee2:	e01f      	b.n	8003f24 <parseNMEA+0x104>
        case 5:
            strcpy(gps_data.EW, token);
 8003ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee6:	4849      	ldr	r0, [pc, #292]	; (800400c <parseNMEA+0x1ec>)
 8003ee8:	f00b fbe2 	bl	800f6b0 <strcpy>
            break;
 8003eec:	e01a      	b.n	8003f24 <parseNMEA+0x104>
        case 6:
            strcpy(gps_data.quality, token);
 8003eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef0:	4847      	ldr	r0, [pc, #284]	; (8004010 <parseNMEA+0x1f0>)
 8003ef2:	f00b fbdd 	bl	800f6b0 <strcpy>
            break;
 8003ef6:	e015      	b.n	8003f24 <parseNMEA+0x104>
        case 7:
            strcpy(gps_data.satellites, token);
 8003ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003efa:	4846      	ldr	r0, [pc, #280]	; (8004014 <parseNMEA+0x1f4>)
 8003efc:	f00b fbd8 	bl	800f6b0 <strcpy>
            break;
 8003f00:	e010      	b.n	8003f24 <parseNMEA+0x104>
        case 8:
            strcpy(gps_data.HDOP, token);
 8003f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f04:	4844      	ldr	r0, [pc, #272]	; (8004018 <parseNMEA+0x1f8>)
 8003f06:	f00b fbd3 	bl	800f6b0 <strcpy>
            break;
 8003f0a:	e00b      	b.n	8003f24 <parseNMEA+0x104>
        case 9:
            strcpy(alt, token);
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f00b fbcc 	bl	800f6b0 <strcpy>
            break;
 8003f18:	e004      	b.n	8003f24 <parseNMEA+0x104>
        case 11:
            strcpy(gps_data.sep, token);
 8003f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f1c:	483f      	ldr	r0, [pc, #252]	; (800401c <parseNMEA+0x1fc>)
 8003f1e:	f00b fbc7 	bl	800f6b0 <strcpy>
            break;
 8003f22:	bf00      	nop
        }
        token = strtoke(NULL, NMEA_delimiter);
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f000 f9f5 	bl	8004318 <strtoke>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = 0; token != NULL; i++) {
 8003f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f36:	3301      	adds	r3, #1
 8003f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d198      	bne.n	8003e74 <parseNMEA+0x54>
    }
    if (i<11){ //If the number of fields parsed is less than 11. Return error.
 8003f42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f46:	2b0a      	cmp	r3, #10
 8003f48:	d80d      	bhi.n	8003f66 <parseNMEA+0x146>
        gps_loss_count++;
 8003f4a:	4b35      	ldr	r3, [pc, #212]	; (8004020 <parseNMEA+0x200>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4b33      	ldr	r3, [pc, #204]	; (8004020 <parseNMEA+0x200>)
 8003f54:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 8003f56:	4b32      	ldr	r3, [pc, #200]	; (8004020 <parseNMEA+0x200>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b14      	cmp	r3, #20
 8003f5c:	d901      	bls.n	8003f62 <parseNMEA+0x142>
            init_gps_data();
 8003f5e:	f000 f99f 	bl	80042a0 <init_gps_data>
        }
        return 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e048      	b.n	8003ff8 <parseNMEA+0x1d8>
    }
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <parseNMEA+0x1e0>)
 8003f68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f6c:	2b31      	cmp	r3, #49	; 0x31
 8003f6e:	d00e      	beq.n	8003f8e <parseNMEA+0x16e>
 8003f70:	4b23      	ldr	r3, [pc, #140]	; (8004000 <parseNMEA+0x1e0>)
 8003f72:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f76:	2b32      	cmp	r3, #50	; 0x32
 8003f78:	d009      	beq.n	8003f8e <parseNMEA+0x16e>
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <parseNMEA+0x1e0>)
 8003f7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f80:	2b34      	cmp	r3, #52	; 0x34
 8003f82:	d004      	beq.n	8003f8e <parseNMEA+0x16e>
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <parseNMEA+0x1e0>)
 8003f86:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f8a:	2b35      	cmp	r3, #53	; 0x35
 8003f8c:	d11d      	bne.n	8003fca <parseNMEA+0x1aa>
        gps_data.latitude = coorsAtol(lat, gps_data.NS);
 8003f8e:	f107 031c 	add.w	r3, r7, #28
 8003f92:	491d      	ldr	r1, [pc, #116]	; (8004008 <parseNMEA+0x1e8>)
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fa79 	bl	800448c <coorsAtol>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <parseNMEA+0x1e0>)
 8003f9e:	6553      	str	r3, [r2, #84]	; 0x54
        gps_data.longtitude = coorsAtol(lng, gps_data.EW);
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4919      	ldr	r1, [pc, #100]	; (800400c <parseNMEA+0x1ec>)
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fa70 	bl	800448c <coorsAtol>
 8003fac:	4603      	mov	r3, r0
 8003fae:	4a14      	ldr	r2, [pc, #80]	; (8004000 <parseNMEA+0x1e0>)
 8003fb0:	65d3      	str	r3, [r2, #92]	; 0x5c
        gps_data.altitude = altAtol(alt);
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f9e0 	bl	800437c <altAtol>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <parseNMEA+0x1e0>)
 8003fc0:	6653      	str	r3, [r2, #100]	; 0x64
        gps_loss_count = 0;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <parseNMEA+0x200>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 8003fc8:	e010      	b.n	8003fec <parseNMEA+0x1cc>
    }
    else if (gps_data.quality[0] == '0'){
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <parseNMEA+0x1e0>)
 8003fcc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	d10b      	bne.n	8003fec <parseNMEA+0x1cc>
        gps_loss_count++;
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <parseNMEA+0x200>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <parseNMEA+0x200>)
 8003fde:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <parseNMEA+0x200>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b14      	cmp	r3, #20
 8003fe6:	d901      	bls.n	8003fec <parseNMEA+0x1cc>
            init_gps_data();
 8003fe8:	f000 f95a 	bl	80042a0 <init_gps_data>
        }
    }
    memset(gps_data.sentence, 0, 75);
 8003fec:	224b      	movs	r2, #75	; 0x4b
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4803      	ldr	r0, [pc, #12]	; (8004000 <parseNMEA+0x1e0>)
 8003ff2:	f00a fecb 	bl	800ed8c <memset>
    return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3730      	adds	r7, #48	; 0x30
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200002e4 	.word	0x200002e4
 8004004:	2000032f 	.word	0x2000032f
 8004008:	2000033c 	.word	0x2000033c
 800400c:	20000344 	.word	0x20000344
 8004010:	20000345 	.word	0x20000345
 8004014:	2000034c 	.word	0x2000034c
 8004018:	2000034e 	.word	0x2000034e
 800401c:	20000353 	.word	0x20000353
 8004020:	2000035c 	.word	0x2000035c

08004024 <calcChecksum>:


static void calcChecksum(messageCFG_t *msg){
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7b1a      	ldrb	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4413      	add	r3, r2
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7b5a      	ldrb	r2, [r3, #13]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7b1b      	ldrb	r3, [r3, #12]
 8004050:	4413      	add	r3, r2
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7b1a      	ldrb	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	4413      	add	r3, r2
 8004062:	b2da      	uxtb	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7b5a      	ldrb	r2, [r3, #13]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7b1b      	ldrb	r3, [r3, #12]
 8004070:	4413      	add	r3, r2
 8004072:	b2da      	uxtb	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	7b1a      	ldrb	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	885b      	ldrh	r3, [r3, #2]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4413      	add	r3, r2
 8004084:	b2da      	uxtb	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7b5a      	ldrb	r2, [r3, #13]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7b1b      	ldrb	r3, [r3, #12]
 8004092:	4413      	add	r3, r2
 8004094:	b2da      	uxtb	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7b1a      	ldrb	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	885b      	ldrh	r3, [r3, #2]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7b5a      	ldrb	r2, [r3, #13]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7b1b      	ldrb	r3, [r3, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e015      	b.n	80040f2 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7b1a      	ldrb	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	440b      	add	r3, r1
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	4413      	add	r3, r2
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7b5a      	ldrb	r2, [r3, #13]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7b1b      	ldrb	r3, [r3, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	3301      	adds	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	885b      	ldrh	r3, [r3, #2]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3e3      	bcc.n	80040c6 <calcChecksum+0xa2>
    }
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <sendI2Cmessage>:

HAL_StatusTypeDef sendI2Cmessage(void){
 800410c:	b580      	push	{r7, lr}
 800410e:	b08e      	sub	sp, #56	; 0x38
 8004110:	af02      	add	r7, sp, #8
    uint8_t message[40] = {0};
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f00a fe34 	bl	800ed8c <memset>
    uint8_t len = config_message.len + 8;
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004126:	885b      	ldrh	r3, [r3, #2]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	3308      	adds	r3, #8
 800412c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[0] = UBX_SYNCH_1;
 8004130:	23b5      	movs	r3, #181	; 0xb5
 8004132:	713b      	strb	r3, [r7, #4]
    message[1] = UBX_SYNCH_2;
 8004134:	2362      	movs	r3, #98	; 0x62
 8004136:	717b      	strb	r3, [r7, #5]
    message[2] = config_message.cls;
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <sendI2Cmessage+0xc8>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	71bb      	strb	r3, [r7, #6]
    message[3] = config_message.id;
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	71fb      	strb	r3, [r7, #7]
    message[4] = (config_message.len & 0xFF);
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004146:	885b      	ldrh	r3, [r3, #2]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	723b      	strb	r3, [r7, #8]
    message[5] = (config_message.len >> 8);
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <sendI2Cmessage+0xc8>)
 800414e:	885b      	ldrh	r3, [r3, #2]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	b29b      	uxth	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8004158:	2300      	movs	r3, #0
 800415a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800415e:	e011      	b.n	8004184 <sendI2Cmessage+0x78>
        message[6+i] = config_message.payload[i];
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004168:	441a      	add	r2, r3
 800416a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800416e:	3306      	adds	r3, #6
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	3330      	adds	r3, #48	; 0x30
 8004174:	443b      	add	r3, r7
 8004176:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for ( i=0 ; i < config_message.len ; i++){
 800417a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800417e:	3301      	adds	r3, #1
 8004180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004188:	b29a      	uxth	r2, r3
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <sendI2Cmessage+0xc8>)
 800418c:	885b      	ldrh	r3, [r3, #2]
 800418e:	429a      	cmp	r2, r3
 8004190:	d3e6      	bcc.n	8004160 <sendI2Cmessage+0x54>
    }
    message[6+i] = config_message.checksumA;
 8004192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004196:	3306      	adds	r3, #6
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <sendI2Cmessage+0xc8>)
 800419a:	7b12      	ldrb	r2, [r2, #12]
 800419c:	3330      	adds	r3, #48	; 0x30
 800419e:	443b      	add	r3, r7
 80041a0:	f803 2c2c 	strb.w	r2, [r3, #-44]
    message[7+i] = config_message.checksumB;
 80041a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041a8:	3307      	adds	r3, #7
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <sendI2Cmessage+0xc8>)
 80041ac:	7b52      	ldrb	r2, [r2, #13]
 80041ae:	3330      	adds	r3, #48	; 0x30
 80041b0:	443b      	add	r3, r7
 80041b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
    return HAL_I2C_Master_Transmit(&hi2c1, UBLOX_M9N, message, len, 50);
 80041b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	1d3a      	adds	r2, r7, #4
 80041be:	2132      	movs	r1, #50	; 0x32
 80041c0:	9100      	str	r1, [sp, #0]
 80041c2:	2184      	movs	r1, #132	; 0x84
 80041c4:	4804      	ldr	r0, [pc, #16]	; (80041d8 <sendI2Cmessage+0xcc>)
 80041c6:	f002 fb7f 	bl	80068c8 <HAL_I2C_Master_Transmit>
 80041ca:	4603      	mov	r3, r0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3730      	adds	r7, #48	; 0x30
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000000 	.word	0x20000000
 80041d8:	20000290 	.word	0x20000290

080041dc <setPortOutput>:

HAL_StatusTypeDef setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	460a      	mov	r2, r1
 80041e6:	71fb      	strb	r3, [r7, #7]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <setPortOutput+0x5c>)
 80041ee:	2206      	movs	r2, #6
 80041f0:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <setPortOutput+0x5c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <setPortOutput+0x5c>)
 80041fa:	2214      	movs	r2, #20
 80041fc:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	f107 0310 	add.w	r3, r7, #16
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8004210:	2384      	movs	r3, #132	; 0x84
 8004212:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 8004214:	2323      	movs	r3, #35	; 0x23
 8004216:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8004218:	79bb      	ldrb	r3, [r7, #6]
 800421a:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 800421c:	4a06      	ldr	r2, [pc, #24]	; (8004238 <setPortOutput+0x5c>)
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8004224:	4804      	ldr	r0, [pc, #16]	; (8004238 <setPortOutput+0x5c>)
 8004226:	f7ff fefd 	bl	8004024 <calcChecksum>
    return sendI2Cmessage();
 800422a:	f7ff ff6f 	bl	800410c <sendI2Cmessage>
 800422e:	4603      	mov	r3, r0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000000 	.word	0x20000000

0800423c <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

HAL_StatusTypeDef configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4623      	mov	r3, r4
 800424c:	71fb      	strb	r3, [r7, #7]
 800424e:	4603      	mov	r3, r0
 8004250:	71bb      	strb	r3, [r7, #6]
 8004252:	460b      	mov	r3, r1
 8004254:	717b      	strb	r3, [r7, #5]
 8004256:	4613      	mov	r3, r2
 8004258:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <configureNMEA+0x60>)
 800425c:	2206      	movs	r2, #6
 800425e:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <configureNMEA+0x60>)
 8004262:	2201      	movs	r2, #1
 8004264:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <configureNMEA+0x60>)
 8004268:	2208      	movs	r2, #8
 800426a:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 800426c:	2300      	movs	r3, #0
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8004278:	79bb      	ldrb	r3, [r7, #6]
 800427a:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 800427c:	797b      	ldrb	r3, [r7, #5]
 800427e:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8004280:	4a06      	ldr	r2, [pc, #24]	; (800429c <configureNMEA+0x60>)
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8004288:	4804      	ldr	r0, [pc, #16]	; (800429c <configureNMEA+0x60>)
 800428a:	f7ff fecb 	bl	8004024 <calcChecksum>
    return sendI2Cmessage();
 800428e:	f7ff ff3d 	bl	800410c <sendI2Cmessage>
 8004292:	4603      	mov	r3, r0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	20000000 	.word	0x20000000

080042a0 <init_gps_data>:
    config_message.payload = payloadCfg;
    calcChecksum(&config_message);
    return sendI2Cmessage();
}

void init_gps_data(void){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <init_gps_data+0x64>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    memset(gps_data.EW, 0, 1);
    memset(gps_data.HDOP, 0, 5);
 80042ac:	2205      	movs	r2, #5
 80042ae:	2100      	movs	r1, #0
 80042b0:	4815      	ldr	r0, [pc, #84]	; (8004308 <init_gps_data+0x68>)
 80042b2:	f00a fd6b 	bl	800ed8c <memset>
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <init_gps_data+0x64>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    memset(gps_data.NS, 0, 1);
    gps_data.altitude = 0;
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <init_gps_data+0x64>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	665a      	str	r2, [r3, #100]	; 0x64
    gps_data.latitude = 0;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <init_gps_data+0x64>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
    gps_data.longtitude = 0;
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <init_gps_data+0x64>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <init_gps_data+0x64>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    memset(gps_data.quality, 0, 1);
    memset(gps_data.satellites, 0, 2);
 80042d8:	2202      	movs	r2, #2
 80042da:	2100      	movs	r1, #0
 80042dc:	480b      	ldr	r0, [pc, #44]	; (800430c <init_gps_data+0x6c>)
 80042de:	f00a fd55 	bl	800ed8c <memset>
    memset(gps_data.sentence, 0, 75);
 80042e2:	224b      	movs	r2, #75	; 0x4b
 80042e4:	2100      	movs	r1, #0
 80042e6:	4807      	ldr	r0, [pc, #28]	; (8004304 <init_gps_data+0x64>)
 80042e8:	f00a fd50 	bl	800ed8c <memset>
    memset(gps_data.sep, 0, 6);
 80042ec:	2206      	movs	r2, #6
 80042ee:	2100      	movs	r1, #0
 80042f0:	4807      	ldr	r0, [pc, #28]	; (8004310 <init_gps_data+0x70>)
 80042f2:	f00a fd4b 	bl	800ed8c <memset>
    memset(gps_data.timestamp, 0, 9);
 80042f6:	2209      	movs	r2, #9
 80042f8:	2100      	movs	r1, #0
 80042fa:	4806      	ldr	r0, [pc, #24]	; (8004314 <init_gps_data+0x74>)
 80042fc:	f00a fd46 	bl	800ed8c <memset>
}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	200002e4 	.word	0x200002e4
 8004308:	2000034e 	.word	0x2000034e
 800430c:	2000034c 	.word	0x2000034c
 8004310:	20000353 	.word	0x20000353
 8004314:	2000032f 	.word	0x2000032f

08004318 <strtoke>:

    return len;
}

char* strtoke(char *str, const char *delim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <strtoke+0x1a>
 800432c:	4a12      	ldr	r2, [pc, #72]	; (8004378 <strtoke+0x60>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <strtoke+0x60>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <strtoke+0x26>
 800433a:	2300      	movs	r3, #0
 800433c:	e017      	b.n	800436e <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <strtoke+0x60>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <strtoke+0x60>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f00b f9b8 	bl	800f6c0 <strpbrk>
 8004350:	4603      	mov	r3, r0
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <strtoke+0x60>)
 8004354:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <strtoke+0x60>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d006      	beq.n	800436c <strtoke+0x54>
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <strtoke+0x60>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	4904      	ldr	r1, [pc, #16]	; (8004378 <strtoke+0x60>)
 8004366:	600a      	str	r2, [r1, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000360 	.word	0x20000360

0800437c <altAtol>:
  }

  return sign * result;
}

long altAtol(char *str) {
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  float result = 0;
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  long ret = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  float divisor = 10;
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <altAtol+0x108>)
 8004390:	613b      	str	r3, [r7, #16]
  int sign = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	60bb      	str	r3, [r7, #8]

  // Skip whitespace
  while (*str == ' ') {
 8004396:	e002      	b.n	800439e <altAtol+0x22>
    str++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3301      	adds	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
  while (*str == ' ') {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d0f8      	beq.n	8004398 <altAtol+0x1c>
  }

  // Handle optional sign
  if (*str == '-') {
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b2d      	cmp	r3, #45	; 0x2d
 80043ac:	d106      	bne.n	80043bc <altAtol+0x40>
    sign = -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	60bb      	str	r3, [r7, #8]
    str++;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e01d      	b.n	80043f8 <altAtol+0x7c>
  } else if (*str == '+') {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b2b      	cmp	r3, #43	; 0x2b
 80043c2:	d119      	bne.n	80043f8 <altAtol+0x7c>
    sign = 1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
    str++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3301      	adds	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
  }

  // Parse integer part
  while (*str >= '0' && *str <= '9') {
 80043ce:	e013      	b.n	80043f8 <altAtol+0x7c>
    result = (result * 10) + (*str - '0');
 80043d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80043d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	3b30      	subs	r3, #48	; 0x30
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ee:	edc7 7a05 	vstr	s15, [r7, #20]
    str++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3301      	adds	r3, #1
 80043f6:	607b      	str	r3, [r7, #4]
  while (*str >= '0' && *str <= '9') {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b2f      	cmp	r3, #47	; 0x2f
 80043fe:	d903      	bls.n	8004408 <altAtol+0x8c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b39      	cmp	r3, #57	; 0x39
 8004406:	d9e3      	bls.n	80043d0 <altAtol+0x54>
  }

  // Parse decimal part
  if (*str == '.') {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b2e      	cmp	r3, #46	; 0x2e
 800440e:	d127      	bne.n	8004460 <altAtol+0xe4>
    str++;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]

    while (*str >= '0' && *str <= '9') {
 8004416:	e01b      	b.n	8004450 <altAtol+0xd4>
      result += (*str - '0') / divisor;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	3b30      	subs	r3, #48	; 0x30
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004426:	ed97 7a04 	vldr	s14, [r7, #16]
 800442a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004436:	edc7 7a05 	vstr	s15, [r7, #20]
      divisor *= 10;
 800443a:	edd7 7a04 	vldr	s15, [r7, #16]
 800443e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004446:	edc7 7a04 	vstr	s15, [r7, #16]
      str++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3301      	adds	r3, #1
 800444e:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b2f      	cmp	r3, #47	; 0x2f
 8004456:	d903      	bls.n	8004460 <altAtol+0xe4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b39      	cmp	r3, #57	; 0x39
 800445e:	d9db      	bls.n	8004418 <altAtol+0x9c>
    }
  }
  ret = (long)(result * 200000);
 8004460:	edd7 7a05 	vldr	s15, [r7, #20]
 8004464:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004488 <altAtol+0x10c>
 8004468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004470:	ee17 3a90 	vmov	r3, s15
 8004474:	60fb      	str	r3, [r7, #12]

  return ret;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	41200000 	.word	0x41200000
 8004488:	48435000 	.word	0x48435000

0800448c <coorsAtol>:

long coorsAtol(char *coors, char sign){
 800448c:	b480      	push	{r7}
 800448e:	b08d      	sub	sp, #52	; 0x34
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t dotIndex=0;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char tempBuffer[12]={0};
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
    int deg = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
    float min = 0;
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    float divisor = 10;
 80044bc:	4b68      	ldr	r3, [pc, #416]	; (8004660 <coorsAtol+0x1d4>)
 80044be:	623b      	str	r3, [r7, #32]
    int s = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
    long result =0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]


    // Skip whitespace
    while (*coors == ' ') {
 80044c8:	e002      	b.n	80044d0 <coorsAtol+0x44>
      coors++;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3301      	adds	r3, #1
 80044ce:	607b      	str	r3, [r7, #4]
    while (*coors == ' ') {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d0f8      	beq.n	80044ca <coorsAtol+0x3e>
    }
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 80044d8:	e017      	b.n	800450a <coorsAtol+0x7e>
        tempBuffer[i] = *coors;
 80044da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	3330      	adds	r3, #48	; 0x30
 80044e4:	443b      	add	r3, r7
 80044e6:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (*coors == '.'){
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b2e      	cmp	r3, #46	; 0x2e
 80044f0:	d103      	bne.n	80044fa <coorsAtol+0x6e>
            dotIndex = i;
 80044f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        i++;
 80044fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044fe:	3301      	adds	r3, #1
 8004500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        coors++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3301      	adds	r3, #1
 8004508:	607b      	str	r3, [r7, #4]
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b2f      	cmp	r3, #47	; 0x2f
 8004510:	d903      	bls.n	800451a <coorsAtol+0x8e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b39      	cmp	r3, #57	; 0x39
 8004518:	d9df      	bls.n	80044da <coorsAtol+0x4e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b2e      	cmp	r3, #46	; 0x2e
 8004520:	d0db      	beq.n	80044da <coorsAtol+0x4e>
    }

    for (i=0; i<(dotIndex-2); i++){
 8004522:	2300      	movs	r3, #0
 8004524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004528:	e013      	b.n	8004552 <coorsAtol+0xc6>
        deg = (deg * 10) + (tempBuffer[i] - '0');
 800452a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	461a      	mov	r2, r3
 8004536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800453a:	3330      	adds	r3, #48	; 0x30
 800453c:	443b      	add	r3, r7
 800453e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004542:	3b30      	subs	r3, #48	; 0x30
 8004544:	4413      	add	r3, r2
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
    for (i=0; i<(dotIndex-2); i++){
 8004548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800454c:	3301      	adds	r3, #1
 800454e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004552:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004556:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800455a:	3b02      	subs	r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	dbe4      	blt.n	800452a <coorsAtol+0x9e>
    }
//    deg = deg * 60;

    for (i=dotIndex-2; i<dotIndex;i++){
 8004560:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004564:	3b02      	subs	r3, #2
 8004566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800456a:	e019      	b.n	80045a0 <coorsAtol+0x114>
            min = (min * 10) + (tempBuffer[i] - '0');
 800456c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004570:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800457c:	3330      	adds	r3, #48	; 0x30
 800457e:	443b      	add	r3, r7
 8004580:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004584:	3b30      	subs	r3, #48	; 0x30
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004592:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (i=dotIndex-2; i<dotIndex;i++){
 8004596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800459a:	3301      	adds	r3, #1
 800459c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80045a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3df      	bcc.n	800456c <coorsAtol+0xe0>
    }
    for (i=dotIndex+1;i<12;i++){
 80045ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045b0:	3301      	adds	r3, #1
 80045b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045b6:	e021      	b.n	80045fc <coorsAtol+0x170>
      min += (tempBuffer[i] - '0') / divisor;
 80045b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045bc:	3330      	adds	r3, #48	; 0x30
 80045be:	443b      	add	r3, r7
 80045c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045c4:	3b30      	subs	r3, #48	; 0x30
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80045d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80045da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      divisor *= 10;
 80045e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80045e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045ee:	edc7 7a08 	vstr	s15, [r7, #32]
    for (i=dotIndex+1;i<12;i++){
 80045f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045f6:	3301      	adds	r3, #1
 80045f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004600:	2b0b      	cmp	r3, #11
 8004602:	d9d9      	bls.n	80045b8 <coorsAtol+0x12c>
    }
    min = min /60;
 8004604:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004608:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004664 <coorsAtol+0x1d8>
 800460c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004610:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    result = (long)((deg+min) * 200000);
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004626:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004668 <coorsAtol+0x1dc>
 800462a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800462e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004632:	ee17 3a90 	vmov	r3, s15
 8004636:	61bb      	str	r3, [r7, #24]

    if ((sign == 'W')  || (sign == 'S')){
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	2b57      	cmp	r3, #87	; 0x57
 800463c:	d002      	beq.n	8004644 <coorsAtol+0x1b8>
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	2b53      	cmp	r3, #83	; 0x53
 8004642:	d102      	bne.n	800464a <coorsAtol+0x1be>
        s = -1;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	61fb      	str	r3, [r7, #28]
    }
    return s * result;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004652:	4618      	mov	r0, r3
 8004654:	3734      	adds	r7, #52	; 0x34
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	41200000 	.word	0x41200000
 8004664:	42700000 	.word	0x42700000
 8004668:	48435000 	.word	0x48435000

0800466c <tick_gyro>:
I2C_HandleTypeDef hi2c2;

static void debugPrintMEMS(mems_data_t *mems_data);


void tick_gyro(mems_data_t * mems_data){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    gyro_read(mems_data);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f8f3 	bl	8004860 <gyro_read>
    lsm6_acc_read(mems_data);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f968 	bl	8004950 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9c1 	bl	8004a08 <lis3_magn_read>
//    osDelay(5);
//    debugPrintMEMS(mems_data);
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <lsm6_bus_init+0x74>)
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <lsm6_bus_init+0x78>)
 8004698:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800469a:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <lsm6_bus_init+0x74>)
 800469c:	4a1b      	ldr	r2, [pc, #108]	; (800470c <lsm6_bus_init+0x7c>)
 800469e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80046a0:	4b18      	ldr	r3, [pc, #96]	; (8004704 <lsm6_bus_init+0x74>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046a6:	4b17      	ldr	r3, [pc, #92]	; (8004704 <lsm6_bus_init+0x74>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <lsm6_bus_init+0x74>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <lsm6_bus_init+0x74>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80046b8:	4b12      	ldr	r3, [pc, #72]	; (8004704 <lsm6_bus_init+0x74>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <lsm6_bus_init+0x74>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <lsm6_bus_init+0x74>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046ca:	480e      	ldr	r0, [pc, #56]	; (8004704 <lsm6_bus_init+0x74>)
 80046cc:	f002 f86d 	bl	80067aa <HAL_I2C_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <lsm6_bus_init+0x4a>
  {
    return 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e012      	b.n	8004700 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046da:	2100      	movs	r1, #0
 80046dc:	4809      	ldr	r0, [pc, #36]	; (8004704 <lsm6_bus_init+0x74>)
 80046de:	f002 fed5 	bl	800748c <HAL_I2CEx_ConfigAnalogFilter>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <lsm6_bus_init+0x5c>
  {
    return 2;
 80046e8:	2302      	movs	r3, #2
 80046ea:	e009      	b.n	8004700 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80046ec:	2100      	movs	r1, #0
 80046ee:	4805      	ldr	r0, [pc, #20]	; (8004704 <lsm6_bus_init+0x74>)
 80046f0:	f002 ff17 	bl	8007522 <HAL_I2CEx_ConfigDigitalFilter>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <lsm6_bus_init+0x6e>
  {
    return 3;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e000      	b.n	8004700 <lsm6_bus_init+0x70>
  }
  return 0;
 80046fe:	2300      	movs	r3, #0

}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20000364 	.word	0x20000364
 8004708:	40005800 	.word	0x40005800
 800470c:	00b03fdb 	.word	0x00b03fdb

08004710 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 8004716:	2350      	movs	r3, #80	; 0x50
 8004718:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x44;   // block data update - reg addr auto incr
 800471a:	2344      	movs	r3, #68	; 0x44
 800471c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 800471e:	2314      	movs	r3, #20
 8004720:	9302      	str	r3, [sp, #8]
 8004722:	2301      	movs	r3, #1
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	1dfb      	adds	r3, r7, #7
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2301      	movs	r3, #1
 800472c:	2211      	movs	r2, #17
 800472e:	21d4      	movs	r1, #212	; 0xd4
 8004730:	4809      	ldr	r0, [pc, #36]	; (8004758 <gyro_init+0x48>)
 8004732:	f002 f9bd 	bl	8006ab0 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8004736:	2314      	movs	r3, #20
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	2301      	movs	r3, #1
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	1dbb      	adds	r3, r7, #6
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2301      	movs	r3, #1
 8004744:	2212      	movs	r2, #18
 8004746:	21d4      	movs	r1, #212	; 0xd4
 8004748:	4803      	ldr	r0, [pc, #12]	; (8004758 <gyro_init+0x48>)
 800474a:	f002 f9b1 	bl	8006ab0 <HAL_I2C_Mem_Write>
 800474e:	4603      	mov	r3, r0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000364 	.word	0x20000364

0800475c <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8004762:	2350      	movs	r3, #80	; 0x50
 8004764:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 8004766:	2320      	movs	r3, #32
 8004768:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 800476a:	2314      	movs	r3, #20
 800476c:	9302      	str	r3, [sp, #8]
 800476e:	2301      	movs	r3, #1
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	1dfb      	adds	r3, r7, #7
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2301      	movs	r3, #1
 8004778:	2210      	movs	r2, #16
 800477a:	21d4      	movs	r1, #212	; 0xd4
 800477c:	4809      	ldr	r0, [pc, #36]	; (80047a4 <lsm6_acc_init+0x48>)
 800477e:	f002 f997 	bl	8006ab0 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8004782:	2314      	movs	r3, #20
 8004784:	9302      	str	r3, [sp, #8]
 8004786:	2301      	movs	r3, #1
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	1dbb      	adds	r3, r7, #6
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	2301      	movs	r3, #1
 8004790:	2219      	movs	r2, #25
 8004792:	21d4      	movs	r1, #212	; 0xd4
 8004794:	4803      	ldr	r0, [pc, #12]	; (80047a4 <lsm6_acc_init+0x48>)
 8004796:	f002 f98b 	bl	8006ab0 <HAL_I2C_Mem_Write>
 800479a:	4603      	mov	r3, r0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000364 	.word	0x20000364

080047a8 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 80047b2:	2342      	movs	r3, #66	; 0x42
 80047b4:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 80047b6:	2300      	movs	r3, #0
 80047b8:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 80047ba:	2308      	movs	r3, #8
 80047bc:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 80047be:	2340      	movs	r3, #64	; 0x40
 80047c0:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 80047c2:	2314      	movs	r3, #20
 80047c4:	9302      	str	r3, [sp, #8]
 80047c6:	2301      	movs	r3, #1
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	1dbb      	adds	r3, r7, #6
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2301      	movs	r3, #1
 80047d0:	2220      	movs	r2, #32
 80047d2:	213c      	movs	r1, #60	; 0x3c
 80047d4:	4821      	ldr	r0, [pc, #132]	; (800485c <magn_init+0xb4>)
 80047d6:	f002 f96b 	bl	8006ab0 <HAL_I2C_Mem_Write>
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <magn_init+0x40>
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	e034      	b.n	8004852 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 80047e8:	2314      	movs	r3, #20
 80047ea:	9302      	str	r3, [sp, #8]
 80047ec:	2301      	movs	r3, #1
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	1d7b      	adds	r3, r7, #5
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2301      	movs	r3, #1
 80047f6:	2222      	movs	r2, #34	; 0x22
 80047f8:	213c      	movs	r1, #60	; 0x3c
 80047fa:	4818      	ldr	r0, [pc, #96]	; (800485c <magn_init+0xb4>)
 80047fc:	f002 f958 	bl	8006ab0 <HAL_I2C_Mem_Write>
 8004800:	4603      	mov	r3, r0
 8004802:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <magn_init+0x66>
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	e021      	b.n	8004852 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 20);
 800480e:	2314      	movs	r3, #20
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	2301      	movs	r3, #1
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2301      	movs	r3, #1
 800481c:	2223      	movs	r2, #35	; 0x23
 800481e:	213c      	movs	r1, #60	; 0x3c
 8004820:	480e      	ldr	r0, [pc, #56]	; (800485c <magn_init+0xb4>)
 8004822:	f002 f945 	bl	8006ab0 <HAL_I2C_Mem_Write>
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <magn_init+0x8c>
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	e00e      	b.n	8004852 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 20);
 8004834:	2314      	movs	r3, #20
 8004836:	9302      	str	r3, [sp, #8]
 8004838:	2301      	movs	r3, #1
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	1cfb      	adds	r3, r7, #3
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2301      	movs	r3, #1
 8004842:	2224      	movs	r2, #36	; 0x24
 8004844:	213c      	movs	r1, #60	; 0x3c
 8004846:	4805      	ldr	r0, [pc, #20]	; (800485c <magn_init+0xb4>)
 8004848:	f002 f932 	bl	8006ab0 <HAL_I2C_Mem_Write>
 800484c:	4603      	mov	r3, r0
 800484e:	71fb      	strb	r3, [r7, #7]
    return res;
 8004850:	79fb      	ldrb	r3, [r7, #7]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000364 	.word	0x20000364

08004860 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af04      	add	r7, sp, #16
 8004866:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	2300      	movs	r3, #0
 800486e:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004878:	2332      	movs	r3, #50	; 0x32
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	2306      	movs	r3, #6
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	2301      	movs	r3, #1
 8004888:	2222      	movs	r2, #34	; 0x22
 800488a:	21d4      	movs	r1, #212	; 0xd4
 800488c:	482e      	ldr	r0, [pc, #184]	; (8004948 <gyro_read+0xe8>)
 800488e:	f002 fa23 	bl	8006cd8 <HAL_I2C_Mem_Read>
    /*Timestamp Read*/
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 4, 50);
 8004892:	2332      	movs	r3, #50	; 0x32
 8004894:	9302      	str	r3, [sp, #8]
 8004896:	2304      	movs	r3, #4
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	f107 030c 	add.w	r3, r7, #12
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2301      	movs	r3, #1
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	21d4      	movs	r1, #212	; 0xd4
 80048a6:	4828      	ldr	r0, [pc, #160]	; (8004948 <gyro_read+0xe8>)
 80048a8:	f002 fa16 	bl	8006cd8 <HAL_I2C_Mem_Read>

    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 80048ac:	7c7b      	ldrb	r3, [r7, #17]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	7c3b      	ldrb	r3, [r7, #16]
 80048b4:	b21b      	sxth	r3, r3
 80048b6:	4313      	orrs	r3, r2
 80048b8:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	b21a      	sxth	r2, r3
 80048c0:	7cbb      	ldrb	r3, [r7, #18]
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	4313      	orrs	r3, r2
 80048c6:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 80048c8:	7d7b      	ldrb	r3, [r7, #21]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	7d3b      	ldrb	r3, [r7, #20]
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	833b      	strh	r3, [r7, #24]
    mems_data->gyro_x = (gyro_x / 131.1f);// * -1.0f;
 80048d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048e2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800494c <gyro_read+0xec>
 80048e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro_y = (gyro_y / 131.1f);// * -1.0f;
 80048f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048fc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800494c <gyro_read+0xec>
 8004900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro_z = (gyro_z / 131.1f);// * -1.0f;
 800490a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004916:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800494c <gyro_read+0xec>
 800491a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = ((int)((ts_data[3]<<24)|(ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0])));
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	061a      	lsls	r2, r3, #24
 8004928:	7bbb      	ldrb	r3, [r7, #14]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	431a      	orrs	r2, r3
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	4313      	orrs	r3, r2
 8004934:	7b3a      	ldrb	r2, [r7, #12]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 800493c:	7ffb      	ldrb	r3, [r7, #31]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000364 	.word	0x20000364
 800494c:	4303199a 	.word	0x4303199a

08004950 <lsm6_acc_read>:

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af04      	add	r7, sp, #16
 8004956:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	2300      	movs	r3, #0
 800495e:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004964:	2332      	movs	r3, #50	; 0x32
 8004966:	9302      	str	r3, [sp, #8]
 8004968:	2306      	movs	r3, #6
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	f107 0308 	add.w	r3, r7, #8
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2301      	movs	r3, #1
 8004974:	2228      	movs	r2, #40	; 0x28
 8004976:	21d4      	movs	r1, #212	; 0xd4
 8004978:	4821      	ldr	r0, [pc, #132]	; (8004a00 <lsm6_acc_read+0xb0>)
 800497a:	f002 f9ad 	bl	8006cd8 <HAL_I2C_Mem_Read>
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 800497e:	7a7b      	ldrb	r3, [r7, #9]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	b21a      	sxth	r2, r3
 8004984:	7a3b      	ldrb	r3, [r7, #8]
 8004986:	b21b      	sxth	r3, r3
 8004988:	4313      	orrs	r3, r2
 800498a:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	b21a      	sxth	r2, r3
 8004992:	7abb      	ldrb	r3, [r7, #10]
 8004994:	b21b      	sxth	r3, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 800499a:	7b7b      	ldrb	r3, [r7, #13]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	b21a      	sxth	r2, r3
 80049a0:	7b3b      	ldrb	r3, [r7, #12]
 80049a2:	b21b      	sxth	r3, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	823b      	strh	r3, [r7, #16]
    mems_data->acc_x = (acc_x / 16384.0f);//  * -1.0f;
 80049a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004a04 <lsm6_acc_read+0xb4>
 80049b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc_y = (acc_y / 16384.0f);// * -1.0f;
 80049c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ce:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004a04 <lsm6_acc_read+0xb4>
 80049d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc_z = (acc_z / 16384.0f);// * -1.0f;
 80049dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e8:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004a04 <lsm6_acc_read+0xb4>
 80049ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000364 	.word	0x20000364
 8004a04:	46800000 	.word	0x46800000

08004a08 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af04      	add	r7, sp, #16
 8004a0e:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	2300      	movs	r3, #0
 8004a16:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004a1c:	2332      	movs	r3, #50	; 0x32
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	2306      	movs	r3, #6
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	f107 0308 	add.w	r3, r7, #8
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	2228      	movs	r2, #40	; 0x28
 8004a2e:	213c      	movs	r1, #60	; 0x3c
 8004a30:	4821      	ldr	r0, [pc, #132]	; (8004ab8 <lis3_magn_read+0xb0>)
 8004a32:	f002 f951 	bl	8006cd8 <HAL_I2C_Mem_Read>
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004a36:	7a7b      	ldrb	r3, [r7, #9]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	b21a      	sxth	r2, r3
 8004a3c:	7a3b      	ldrb	r3, [r7, #8]
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	4313      	orrs	r3, r2
 8004a42:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	b21a      	sxth	r2, r3
 8004a4a:	7abb      	ldrb	r3, [r7, #10]
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 8004a52:	7b7b      	ldrb	r3, [r7, #13]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	b21a      	sxth	r2, r3
 8004a58:	7b3b      	ldrb	r3, [r7, #12]
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	823b      	strh	r3, [r7, #16]
    mems_data->magn_x = magn_x / 10.0f;
 8004a60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a6c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn_y = magn_y / 10.0f;
 8004a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a86:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn_z = magn_z / 10.0f;
 8004a94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aa0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000364 	.word	0x20000364

08004abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004abc:	b5b0      	push	{r4, r5, r7, lr}
 8004abe:	b09c      	sub	sp, #112	; 0x70
 8004ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ac2:	f001 fa90 	bl	8005fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ac6:	f000 fa0d 	bl	8004ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aca:	f000 fa5d 	bl	8004f88 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8004ace:	f001 f87f 	bl	8005bd0 <MX_USART1_UART_Init>

  MX_UART4_Init();
 8004ad2:	f001 f8cf 	bl	8005c74 <MX_UART4_Init>


  if (lsm6_bus_init() != 0){
 8004ad6:	f7ff fddb 	bl	8004690 <lsm6_bus_init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <main+0x46>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 8004ae0:	4b68      	ldr	r3, [pc, #416]	; (8004c84 <main+0x1c8>)
 8004ae2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004af0:	c403      	stmia	r4!, {r0, r1}
 8004af2:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8004af4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004af8:	210a      	movs	r1, #10
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 f944 	bl	8005d88 <uart_write_debug>
 8004b00:	e042      	b.n	8004b88 <main+0xcc>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 8004b02:	f7ff fe2b 	bl	800475c <lsm6_acc_init>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00f      	beq.n	8004b2c <main+0x70>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004b0c:	4b5e      	ldr	r3, [pc, #376]	; (8004c88 <main+0x1cc>)
 8004b0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004b12:	461d      	mov	r5, r3
 8004b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b1c:	c403      	stmia	r4!, {r0, r1}
 8004b1e:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b24:	210a      	movs	r1, #10
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 f92e 	bl	8005d88 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004b2c:	f7ff fdf0 	bl	8004710 <gyro_init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <main+0xa0>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 8004b36:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <main+0x1d0>)
 8004b38:	f107 041c 	add.w	r4, r7, #28
 8004b3c:	461d      	mov	r5, r3
 8004b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b46:	c403      	stmia	r4!, {r0, r1}
 8004b48:	8022      	strh	r2, [r4, #0]
 8004b4a:	3402      	adds	r4, #2
 8004b4c:	0c13      	lsrs	r3, r2, #16
 8004b4e:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004b50:	f107 031c 	add.w	r3, r7, #28
 8004b54:	210a      	movs	r1, #10
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 f916 	bl	8005d88 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004b5c:	f7ff fe24 	bl	80047a8 <magn_init>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <main+0xcc>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <main+0x1d4>)
 8004b68:	463c      	mov	r4, r7
 8004b6a:	461d      	mov	r5, r3
 8004b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b74:	c403      	stmia	r4!, {r0, r1}
 8004b76:	8022      	strh	r2, [r4, #0]
 8004b78:	3402      	adds	r4, #2
 8004b7a:	0c13      	lsrs	r3, r2, #16
 8004b7c:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004b7e:	463b      	mov	r3, r7
 8004b80:	210a      	movs	r1, #10
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 f900 	bl	8005d88 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 8004b88:	f7ff f834 	bl	8003bf4 <ublox_i2c_bus_init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <main+0xe0>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8004b92:	210a      	movs	r1, #10
 8004b94:	483f      	ldr	r0, [pc, #252]	; (8004c94 <main+0x1d8>)
 8004b96:	f001 f8f7 	bl	8005d88 <uart_write_debug>
 8004b9a:	e011      	b.n	8004bc0 <main+0x104>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8004b9c:	f7ff f880 	bl	8003ca0 <ubloxInit>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 8004ba6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <main+0xfc>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 8004bae:	210a      	movs	r1, #10
 8004bb0:	4839      	ldr	r0, [pc, #228]	; (8004c98 <main+0x1dc>)
 8004bb2:	f001 f8e9 	bl	8005d88 <uart_write_debug>
 8004bb6:	e003      	b.n	8004bc0 <main+0x104>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 8004bb8:	210a      	movs	r1, #10
 8004bba:	4838      	ldr	r0, [pc, #224]	; (8004c9c <main+0x1e0>)
 8004bbc:	f001 f8e4 	bl	8005d88 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 8004bc0:	f006 fd78 	bl	800b6b4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 8004bc4:	4836      	ldr	r0, [pc, #216]	; (8004ca0 <main+0x1e4>)
 8004bc6:	f006 fe6c 	bl	800b8a2 <osMutexNew>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <main+0x1e8>)
 8004bce:	6013      	str	r3, [r2, #0]

  i2cMutex = osMutexNew(&i2cMutex_attributes);
 8004bd0:	4835      	ldr	r0, [pc, #212]	; (8004ca8 <main+0x1ec>)
 8004bd2:	f006 fe66 	bl	800b8a2 <osMutexNew>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4a34      	ldr	r2, [pc, #208]	; (8004cac <main+0x1f0>)
 8004bda:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (4, sizeof(mems_data_t), &memsQueue_attributes);
 8004bdc:	4a34      	ldr	r2, [pc, #208]	; (8004cb0 <main+0x1f4>)
 8004bde:	2128      	movs	r1, #40	; 0x28
 8004be0:	2004      	movs	r0, #4
 8004be2:	f006 ff6c 	bl	800babe <osMessageQueueNew>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a32      	ldr	r2, [pc, #200]	; (8004cb4 <main+0x1f8>)
 8004bea:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 8004bec:	4a32      	ldr	r2, [pc, #200]	; (8004cb8 <main+0x1fc>)
 8004bee:	210c      	movs	r1, #12
 8004bf0:	2004      	movs	r0, #4
 8004bf2:	f006 ff64 	bl	800babe <osMessageQueueNew>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4a30      	ldr	r2, [pc, #192]	; (8004cbc <main+0x200>)
 8004bfa:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, sizeof(uart4RXrb.buffer), &messageQueue_attributes);
 8004bfc:	4a30      	ldr	r2, [pc, #192]	; (8004cc0 <main+0x204>)
 8004bfe:	2128      	movs	r1, #40	; 0x28
 8004c00:	2008      	movs	r0, #8
 8004c02:	f006 ff5c 	bl	800babe <osMessageQueueNew>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4a2e      	ldr	r2, [pc, #184]	; (8004cc4 <main+0x208>)
 8004c0a:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004c0c:	4a2e      	ldr	r2, [pc, #184]	; (8004cc8 <main+0x20c>)
 8004c0e:	2100      	movs	r1, #0
 8004c10:	482e      	ldr	r0, [pc, #184]	; (8004ccc <main+0x210>)
 8004c12:	f006 fd99 	bl	800b748 <osThreadNew>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <main+0x214>)
 8004c1a:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 8004c1c:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <main+0x218>)
 8004c1e:	2100      	movs	r1, #0
 8004c20:	482d      	ldr	r0, [pc, #180]	; (8004cd8 <main+0x21c>)
 8004c22:	f006 fd91 	bl	800b748 <osThreadNew>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <main+0x220>)
 8004c2a:	6013      	str	r3, [r2, #0]

  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);
 8004c2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <main+0x224>)
 8004c2e:	2100      	movs	r1, #0
 8004c30:	482c      	ldr	r0, [pc, #176]	; (8004ce4 <main+0x228>)
 8004c32:	f006 fd89 	bl	800b748 <osThreadNew>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4a2b      	ldr	r2, [pc, #172]	; (8004ce8 <main+0x22c>)
 8004c3a:	6013      	str	r3, [r2, #0]

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 8004c3c:	4a2b      	ldr	r2, [pc, #172]	; (8004cec <main+0x230>)
 8004c3e:	2100      	movs	r1, #0
 8004c40:	482b      	ldr	r0, [pc, #172]	; (8004cf0 <main+0x234>)
 8004c42:	f006 fd81 	bl	800b748 <osThreadNew>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <main+0x238>)
 8004c4a:	6013      	str	r3, [r2, #0]

  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	; (8004cf8 <main+0x23c>)
 8004c4e:	2100      	movs	r1, #0
 8004c50:	482a      	ldr	r0, [pc, #168]	; (8004cfc <main+0x240>)
 8004c52:	f006 fd79 	bl	800b748 <osThreadNew>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <main+0x244>)
 8004c5a:	6013      	str	r3, [r2, #0]

  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);
 8004c5c:	4a29      	ldr	r2, [pc, #164]	; (8004d04 <main+0x248>)
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4829      	ldr	r0, [pc, #164]	; (8004d08 <main+0x24c>)
 8004c62:	f006 fd71 	bl	800b748 <osThreadNew>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4a28      	ldr	r2, [pc, #160]	; (8004d0c <main+0x250>)
 8004c6a:	6013      	str	r3, [r2, #0]

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <main+0x254>)
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4828      	ldr	r0, [pc, #160]	; (8004d14 <main+0x258>)
 8004c72:	f006 fd69 	bl	800b748 <osThreadNew>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <main+0x25c>)
 8004c7a:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8004c7c:	f006 fd3e 	bl	800b6fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004c80:	e7fe      	b.n	8004c80 <main+0x1c4>
 8004c82:	bf00      	nop
 8004c84:	080133dc 	.word	0x080133dc
 8004c88:	080133f8 	.word	0x080133f8
 8004c8c:	08013414 	.word	0x08013414
 8004c90:	08013430 	.word	0x08013430
 8004c94:	08013380 	.word	0x08013380
 8004c98:	080133a4 	.word	0x080133a4
 8004c9c:	080133c4 	.word	0x080133c4
 8004ca0:	08013650 	.word	0x08013650
 8004ca4:	200003d4 	.word	0x200003d4
 8004ca8:	08013660 	.word	0x08013660
 8004cac:	200003d8 	.word	0x200003d8
 8004cb0:	08013670 	.word	0x08013670
 8004cb4:	200003dc 	.word	0x200003dc
 8004cb8:	08013688 	.word	0x08013688
 8004cbc:	200003e0 	.word	0x200003e0
 8004cc0:	080136a0 	.word	0x080136a0
 8004cc4:	200003e4 	.word	0x200003e4
 8004cc8:	08013554 	.word	0x08013554
 8004ccc:	08004d1d 	.word	0x08004d1d
 8004cd0:	200003b8 	.word	0x200003b8
 8004cd4:	080135c0 	.word	0x080135c0
 8004cd8:	08004d99 	.word	0x08004d99
 8004cdc:	200003c0 	.word	0x200003c0
 8004ce0:	0801359c 	.word	0x0801359c
 8004ce4:	08004d45 	.word	0x08004d45
 8004ce8:	200003bc 	.word	0x200003bc
 8004cec:	08013578 	.word	0x08013578
 8004cf0:	08004de5 	.word	0x08004de5
 8004cf4:	200003c4 	.word	0x200003c4
 8004cf8:	080135e4 	.word	0x080135e4
 8004cfc:	08004e71 	.word	0x08004e71
 8004d00:	200003c8 	.word	0x200003c8
 8004d04:	0801362c 	.word	0x0801362c
 8004d08:	08004ed3 	.word	0x08004ed3
 8004d0c:	200003d0 	.word	0x200003d0
 8004d10:	08013608 	.word	0x08013608
 8004d14:	08004ec1 	.word	0x08004ec1
 8004d18:	200003cc 	.word	0x200003cc

08004d1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d28:	4805      	ldr	r0, [pc, #20]	; (8004d40 <StartDefaultTask+0x24>)
 8004d2a:	f001 fd01 	bl	8006730 <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f001 f802 	bl	8005d38 <uart_receive_it>
    osDelay(500);
 8004d34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d38:	f006 fd98 	bl	800b86c <osDelay>
  {
 8004d3c:	e7f2      	b.n	8004d24 <StartDefaultTask+0x8>
 8004d3e:	bf00      	nop
 8004d40:	48000400 	.word	0x48000400

08004d44 <calcHeadingTask>:
  /* USER CODE END 5 */
}


void calcHeadingTask(void *argument)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b090      	sub	sp, #64	; 0x40
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	osStatus_t status;
	FusionInit();
 8004d4c:	f7fc fbec 	bl	8001528 <FusionInit>

	for(;;)
	{
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 2U);   // wait for message
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <calcHeadingTask+0x4c>)
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	f107 0114 	add.w	r1, r7, #20
 8004d58:	2302      	movs	r3, #2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f006 ff82 	bl	800bc64 <osMessageQueueGet>
 8004d60:	63f8      	str	r0, [r7, #60]	; 0x3c
	    if (status == osOK) {
 8004d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10f      	bne.n	8004d88 <calcHeadingTask+0x44>
	    	FusionCalcHeading(&mems_data, &euler);
 8004d68:	f107 0208 	add.w	r2, r7, #8
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fc fbf8 	bl	8001568 <FusionCalcHeading>
	    	osMessageQueuePut(outputQueueHandle, &euler, 0U, 2U);
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <calcHeadingTask+0x50>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	f107 0108 	add.w	r1, r7, #8
 8004d80:	2302      	movs	r3, #2
 8004d82:	2200      	movs	r2, #0
 8004d84:	f006 ff0e 	bl	800bba4 <osMessageQueuePut>
	    }
		osDelay(10);
 8004d88:	200a      	movs	r0, #10
 8004d8a:	f006 fd6f 	bl	800b86c <osDelay>
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 2U);   // wait for message
 8004d8e:	e7df      	b.n	8004d50 <calcHeadingTask+0xc>
 8004d90:	200003dc 	.word	0x200003dc
 8004d94:	200003e0 	.word	0x200003e0

08004d98 <readMemsTask>:
	}
}

void readMemsTask(void *argument)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	; 0x30
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	for(;;)
	{
		osMutexAcquire(i2cMutex, osWaitForever);
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <readMemsTask+0x44>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f04f 31ff 	mov.w	r1, #4294967295
 8004da8:	4618      	mov	r0, r3
 8004daa:	f006 fe00 	bl	800b9ae <osMutexAcquire>
		tick_gyro(&mems_data);
 8004dae:	f107 0308 	add.w	r3, r7, #8
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fc5a 	bl	800466c <tick_gyro>
		osMutexRelease(i2cMutex);
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <readMemsTask+0x44>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f006 fe41 	bl	800ba44 <osMutexRelease>
		osMessageQueuePut(memsQueueHandle, &mems_data, 0U, 2U);
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <readMemsTask+0x48>)
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f107 0108 	add.w	r1, r7, #8
 8004dca:	2302      	movs	r3, #2
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f006 fee9 	bl	800bba4 <osMessageQueuePut>
		osDelay(50);
 8004dd2:	2032      	movs	r0, #50	; 0x32
 8004dd4:	f006 fd4a 	bl	800b86c <osDelay>
		osMutexAcquire(i2cMutex, osWaitForever);
 8004dd8:	e7e2      	b.n	8004da0 <readMemsTask+0x8>
 8004dda:	bf00      	nop
 8004ddc:	200003d8 	.word	0x200003d8
 8004de0:	200003dc 	.word	0x200003dc

08004de4 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b094      	sub	sp, #80	; 0x50
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	f107 0310 	add.w	r3, r7, #16
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 2U);   // wait for message
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <printOutTask+0x80>)
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	f107 0118 	add.w	r1, r7, #24
 8004e02:	2302      	movs	r3, #2
 8004e04:	2200      	movs	r2, #0
 8004e06:	f006 ff2d 	bl	800bc64 <osMessageQueueGet>
 8004e0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d123      	bne.n	8004e5a <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fb fbaf 	bl	8000578 <__aeabi_f2d>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	f107 000c 	add.w	r0, r7, #12
 8004e22:	4911      	ldr	r1, [pc, #68]	; (8004e68 <printOutTask+0x84>)
 8004e24:	f00a fc24 	bl	800f670 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 8004e28:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <printOutTask+0x88>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e30:	4618      	mov	r0, r3
 8004e32:	f006 fdbc 	bl	800b9ae <osMutexAcquire>
			uart_write_debug(text,50);
 8004e36:	f107 030c 	add.w	r3, r7, #12
 8004e3a:	2132      	movs	r1, #50	; 0x32
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 ffa3 	bl	8005d88 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <printOutTask+0x88>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f006 fdfc 	bl	800ba44 <osMutexRelease>
			memset(text,0,sizeof(text));
 8004e4c:	f107 030c 	add.w	r3, r7, #12
 8004e50:	220a      	movs	r2, #10
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f009 ff99 	bl	800ed8c <memset>
		}
		osDelay(100);
 8004e5a:	2064      	movs	r0, #100	; 0x64
 8004e5c:	f006 fd06 	bl	800b86c <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 2U);   // wait for message
 8004e60:	e7cb      	b.n	8004dfa <printOutTask+0x16>
 8004e62:	bf00      	nop
 8004e64:	200003e0 	.word	0x200003e0
 8004e68:	0801344c 	.word	0x0801344c
 8004e6c:	200003d4 	.word	0x200003d4

08004e70 <getCoorsTask>:
	}
}


void getCoorsTask(void *argument){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		osMutexAcquire(i2cMutex, osWaitForever);
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <getCoorsTask+0x48>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e80:	4618      	mov	r0, r3
 8004e82:	f006 fd94 	bl	800b9ae <osMutexAcquire>
		osMutexAcquire(debugUartMutex, osWaitForever);
 8004e86:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <getCoorsTask+0x4c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f006 fd8d 	bl	800b9ae <osMutexAcquire>
		ublox_tick();
 8004e94:	f7fe feee 	bl	8003c74 <ublox_tick>
		osMutexRelease(i2cMutex);
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <getCoorsTask+0x48>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f006 fdd1 	bl	800ba44 <osMutexRelease>
		osMutexRelease(debugUartMutex);
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <getCoorsTask+0x4c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f006 fdcc 	bl	800ba44 <osMutexRelease>
		osDelay(1700);
 8004eac:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8004eb0:	f006 fcdc 	bl	800b86c <osDelay>
		osMutexAcquire(i2cMutex, osWaitForever);
 8004eb4:	e7e0      	b.n	8004e78 <getCoorsTask+0x8>
 8004eb6:	bf00      	nop
 8004eb8:	200003d8 	.word	0x200003d8
 8004ebc:	200003d4 	.word	0x200003d4

08004ec0 <readMessageTask>:
	}
}

void readMessageTask(void *argument){
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	for(;;){
		osDelay(500);
 8004ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ecc:	f006 fcce 	bl	800b86c <osDelay>
 8004ed0:	e7fa      	b.n	8004ec8 <readMessageTask+0x8>

08004ed2 <sendMessageTask>:
	}
}

void sendMessageTask(void *argument){
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
	for(;;){
		osDelay(500);
 8004eda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ede:	f006 fcc5 	bl	800b86c <osDelay>
 8004ee2:	e7fa      	b.n	8004eda <sendMessageTask+0x8>

08004ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b096      	sub	sp, #88	; 0x58
 8004ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eea:	f107 0314 	add.w	r3, r7, #20
 8004eee:	2244      	movs	r2, #68	; 0x44
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f009 ff4a 	bl	800ed8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ef8:	463b      	mov	r3, r7
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	609a      	str	r2, [r3, #8]
 8004f02:	60da      	str	r2, [r3, #12]
 8004f04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004f06:	2000      	movs	r0, #0
 8004f08:	f002 fb78 	bl	80075fc <HAL_PWREx_ControlVoltageScaling>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004f12:	f000 f9f5 	bl	8005300 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004f16:	2310      	movs	r3, #16
 8004f18:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004f22:	2360      	movs	r3, #96	; 0x60
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f26:	2302      	movs	r3, #2
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004f32:	233c      	movs	r3, #60	; 0x3c
 8004f34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f36:	2302      	movs	r3, #2
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f42:	f107 0314 	add.w	r3, r7, #20
 8004f46:	4618      	mov	r0, r3
 8004f48:	f002 fbfc 	bl	8007744 <HAL_RCC_OscConfig>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004f52:	f000 f9d5 	bl	8005300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f56:	230f      	movs	r3, #15
 8004f58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	2105      	movs	r1, #5
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f003 f802 	bl	8007f78 <HAL_RCC_ClockConfig>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004f7a:	f000 f9c1 	bl	8005300 <Error_Handler>
  }
}
 8004f7e:	bf00      	nop
 8004f80:	3758      	adds	r7, #88	; 0x58
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	605a      	str	r2, [r3, #4]
 8004f98:	609a      	str	r2, [r3, #8]
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f9e:	4bbb      	ldr	r3, [pc, #748]	; (800528c <MX_GPIO_Init+0x304>)
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	4aba      	ldr	r2, [pc, #744]	; (800528c <MX_GPIO_Init+0x304>)
 8004fa4:	f043 0310 	orr.w	r3, r3, #16
 8004fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004faa:	4bb8      	ldr	r3, [pc, #736]	; (800528c <MX_GPIO_Init+0x304>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fb6:	4bb5      	ldr	r3, [pc, #724]	; (800528c <MX_GPIO_Init+0x304>)
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	4ab4      	ldr	r2, [pc, #720]	; (800528c <MX_GPIO_Init+0x304>)
 8004fbc:	f043 0304 	orr.w	r3, r3, #4
 8004fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fc2:	4bb2      	ldr	r3, [pc, #712]	; (800528c <MX_GPIO_Init+0x304>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fce:	4baf      	ldr	r3, [pc, #700]	; (800528c <MX_GPIO_Init+0x304>)
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	4aae      	ldr	r2, [pc, #696]	; (800528c <MX_GPIO_Init+0x304>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fda:	4bac      	ldr	r3, [pc, #688]	; (800528c <MX_GPIO_Init+0x304>)
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe6:	4ba9      	ldr	r3, [pc, #676]	; (800528c <MX_GPIO_Init+0x304>)
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	4aa8      	ldr	r2, [pc, #672]	; (800528c <MX_GPIO_Init+0x304>)
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ff2:	4ba6      	ldr	r3, [pc, #664]	; (800528c <MX_GPIO_Init+0x304>)
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ffe:	4ba3      	ldr	r3, [pc, #652]	; (800528c <MX_GPIO_Init+0x304>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	4aa2      	ldr	r2, [pc, #648]	; (800528c <MX_GPIO_Init+0x304>)
 8005004:	f043 0308 	orr.w	r3, r3, #8
 8005008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800500a:	4ba0      	ldr	r3, [pc, #640]	; (800528c <MX_GPIO_Init+0x304>)
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8005016:	2200      	movs	r2, #0
 8005018:	f240 1105 	movw	r1, #261	; 0x105
 800501c:	489c      	ldr	r0, [pc, #624]	; (8005290 <MX_GPIO_Init+0x308>)
 800501e:	f001 fb6f 	bl	8006700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8005022:	2200      	movs	r2, #0
 8005024:	f248 111c 	movw	r1, #33052	; 0x811c
 8005028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800502c:	f001 fb68 	bl	8006700 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8005030:	2200      	movs	r2, #0
 8005032:	f24f 0134 	movw	r1, #61492	; 0xf034
 8005036:	4897      	ldr	r0, [pc, #604]	; (8005294 <MX_GPIO_Init+0x30c>)
 8005038:	f001 fb62 	bl	8006700 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 800503c:	2200      	movs	r2, #0
 800503e:	f242 0183 	movw	r1, #8323	; 0x2083
 8005042:	4895      	ldr	r0, [pc, #596]	; (8005298 <MX_GPIO_Init+0x310>)
 8005044:	f001 fb5c 	bl	8006700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800504e:	4893      	ldr	r0, [pc, #588]	; (800529c <MX_GPIO_Init+0x314>)
 8005050:	f001 fb56 	bl	8006700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8005054:	f240 1305 	movw	r3, #261	; 0x105
 8005058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800505a:	2301      	movs	r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005066:	f107 0314 	add.w	r3, r7, #20
 800506a:	4619      	mov	r1, r3
 800506c:	4888      	ldr	r0, [pc, #544]	; (8005290 <MX_GPIO_Init+0x308>)
 800506e:	f001 f9b5 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8005072:	237a      	movs	r3, #122	; 0x7a
 8005074:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005076:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800507a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	4619      	mov	r1, r3
 8005086:	4882      	ldr	r0, [pc, #520]	; (8005290 <MX_GPIO_Init+0x308>)
 8005088:	f001 f9a8 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800508c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8005090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005092:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4619      	mov	r1, r3
 80050a2:	487e      	ldr	r0, [pc, #504]	; (800529c <MX_GPIO_Init+0x314>)
 80050a4:	f001 f99a 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80050a8:	233f      	movs	r3, #63	; 0x3f
 80050aa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80050ac:	230b      	movs	r3, #11
 80050ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050b4:	f107 0314 	add.w	r3, r7, #20
 80050b8:	4619      	mov	r1, r3
 80050ba:	4878      	ldr	r0, [pc, #480]	; (800529c <MX_GPIO_Init+0x314>)
 80050bc:	f001 f98e 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80050c0:	2303      	movs	r3, #3
 80050c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c4:	2302      	movs	r3, #2
 80050c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050cc:	2303      	movs	r3, #3
 80050ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050d0:	2308      	movs	r3, #8
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d4:	f107 0314 	add.w	r3, r7, #20
 80050d8:	4619      	mov	r1, r3
 80050da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050de:	f001 f97d 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80050e2:	f248 131c 	movw	r3, #33052	; 0x811c
 80050e6:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050e8:	2301      	movs	r3, #1
 80050ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f0:	2300      	movs	r3, #0
 80050f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	4619      	mov	r1, r3
 80050fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050fe:	f001 f96d 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8005102:	23e0      	movs	r3, #224	; 0xe0
 8005104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005106:	2302      	movs	r3, #2
 8005108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800510e:	2303      	movs	r3, #3
 8005110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005112:	2305      	movs	r3, #5
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005116:	f107 0314 	add.w	r3, r7, #20
 800511a:	4619      	mov	r1, r3
 800511c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005120:	f001 f95c 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005128:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800512c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4619      	mov	r1, r3
 8005138:	4856      	ldr	r0, [pc, #344]	; (8005294 <MX_GPIO_Init+0x30c>)
 800513a:	f001 f94f 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800513e:	2302      	movs	r3, #2
 8005140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800514e:	2302      	movs	r3, #2
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	4619      	mov	r1, r3
 8005158:	484e      	ldr	r0, [pc, #312]	; (8005294 <MX_GPIO_Init+0x30c>)
 800515a:	f001 f93f 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800515e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8005162:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005164:	2301      	movs	r3, #1
 8005166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516c:	2300      	movs	r3, #0
 800516e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	4619      	mov	r1, r3
 8005176:	4847      	ldr	r0, [pc, #284]	; (8005294 <MX_GPIO_Init+0x30c>)
 8005178:	f001 f930 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800517c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005182:	2302      	movs	r3, #2
 8005184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518a:	2300      	movs	r3, #0
 800518c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800518e:	2306      	movs	r3, #6
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005192:	f107 0314 	add.w	r3, r7, #20
 8005196:	4619      	mov	r1, r3
 8005198:	483d      	ldr	r0, [pc, #244]	; (8005290 <MX_GPIO_Init+0x308>)
 800519a:	f001 f91f 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800519e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80051a2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a4:	2302      	movs	r3, #2
 80051a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ac:	2303      	movs	r3, #3
 80051ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80051b0:	230a      	movs	r3, #10
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	4619      	mov	r1, r3
 80051ba:	4835      	ldr	r0, [pc, #212]	; (8005290 <MX_GPIO_Init+0x308>)
 80051bc:	f001 f90e 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80051c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c6:	2302      	movs	r3, #2
 80051c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ce:	2303      	movs	r3, #3
 80051d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051d2:	2307      	movs	r3, #7
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051d6:	f107 0314 	add.w	r3, r7, #20
 80051da:	4619      	mov	r1, r3
 80051dc:	482e      	ldr	r0, [pc, #184]	; (8005298 <MX_GPIO_Init+0x310>)
 80051de:	f001 f8fd 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80051e2:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80051e6:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80051ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051f2:	f107 0314 	add.w	r3, r7, #20
 80051f6:	4619      	mov	r1, r3
 80051f8:	4827      	ldr	r0, [pc, #156]	; (8005298 <MX_GPIO_Init+0x310>)
 80051fa:	f001 f8ef 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80051fe:	f242 0383 	movw	r3, #8323	; 0x2083
 8005202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005204:	2301      	movs	r3, #1
 8005206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	4619      	mov	r1, r3
 8005216:	4820      	ldr	r0, [pc, #128]	; (8005298 <MX_GPIO_Init+0x310>)
 8005218:	f001 f8e0 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800521c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005222:	2301      	movs	r3, #1
 8005224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522a:	2300      	movs	r3, #0
 800522c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800522e:	f107 0314 	add.w	r3, r7, #20
 8005232:	4619      	mov	r1, r3
 8005234:	4819      	ldr	r0, [pc, #100]	; (800529c <MX_GPIO_Init+0x314>)
 8005236:	f001 f8d1 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800523a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800523e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005240:	2300      	movs	r3, #0
 8005242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	4619      	mov	r1, r3
 800524e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005252:	f001 f8c3 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8005256:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800525a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525c:	2302      	movs	r3, #2
 800525e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005264:	2303      	movs	r3, #3
 8005266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005268:	2306      	movs	r3, #6
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4619      	mov	r1, r3
 8005272:	480a      	ldr	r0, [pc, #40]	; (800529c <MX_GPIO_Init+0x314>)
 8005274:	f001 f8b2 	bl	80063dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8005278:	2378      	movs	r3, #120	; 0x78
 800527a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527c:	2302      	movs	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005284:	2303      	movs	r3, #3
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	e00a      	b.n	80052a0 <MX_GPIO_Init+0x318>
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	48001000 	.word	0x48001000
 8005294:	48000400 	.word	0x48000400
 8005298:	48000c00 	.word	0x48000c00
 800529c:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052a0:	2307      	movs	r3, #7
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	4619      	mov	r1, r3
 80052aa:	480b      	ldr	r0, [pc, #44]	; (80052d8 <MX_GPIO_Init+0x350>)
 80052ac:	f001 f896 	bl	80063dc <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80052b0:	2200      	movs	r2, #0
 80052b2:	2105      	movs	r1, #5
 80052b4:	2017      	movs	r0, #23
 80052b6:	f000 ffab 	bl	8006210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80052ba:	2017      	movs	r0, #23
 80052bc:	f000 ffc4 	bl	8006248 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80052c0:	2200      	movs	r2, #0
 80052c2:	2105      	movs	r1, #5
 80052c4:	2028      	movs	r0, #40	; 0x28
 80052c6:	f000 ffa3 	bl	8006210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80052ca:	2028      	movs	r0, #40	; 0x28
 80052cc:	f000 ffbc 	bl	8006248 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80052d0:	bf00      	nop
 80052d2:	3728      	adds	r7, #40	; 0x28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	48000c00 	.word	0x48000c00

080052dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a04      	ldr	r2, [pc, #16]	; (80052fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80052ee:	f000 fe93 	bl	8006018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00

08005300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005304:	b672      	cpsid	i
}
 8005306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800530c:	4803      	ldr	r0, [pc, #12]	; (800531c <Error_Handler+0x1c>)
 800530e:	f001 fa0f 	bl	8006730 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8005312:	2064      	movs	r0, #100	; 0x64
 8005314:	f000 fea0 	bl	8006058 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005318:	e7f6      	b.n	8005308 <Error_Handler+0x8>
 800531a:	bf00      	nop
 800531c:	48000400 	.word	0x48000400

08005320 <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	2100      	movs	r1, #0
 8005332:	4618      	mov	r0, r3
 8005334:	f009 fd2a 	bl	800ed8c <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <RB_init+0x22>
    return 0;
 800533e:	2300      	movs	r3, #0
 8005340:	e00a      	b.n	8005358 <RB_init+0x38>
  }
  rb->rdpos = 0;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 8005356:	2301      	movs	r3, #1
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	3301      	adds	r3, #1
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005378:	fb93 f1f2 	sdiv	r1, r3, r2
 800537c:	fb01 f202 	mul.w	r2, r1, r2
 8005380:	1a9a      	subs	r2, r3, r2
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	429a      	cmp	r2, r3
 8005388:	d012      	beq.n	80053b0 <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	78f9      	ldrb	r1, [r7, #3]
 8005392:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	3301      	adds	r3, #1
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80053a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80053a4:	fb01 f202 	mul.w	r2, r1, r2
 80053a8:	1a9a      	subs	r2, r3, r2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ae:	e000      	b.n	80053b2 <RB_push+0x52>
    return;
 80053b0:	bf00      	nop
}
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d101      	bne.n	80053d4 <RB_pop+0x18>
 80053d0:	23ff      	movs	r3, #255	; 0xff
 80053d2:	e012      	b.n	80053fa <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	5cd3      	ldrb	r3, [r2, r3]
 80053dc:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	3301      	adds	r3, #1
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80053ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80053ee:	fb01 f202 	mul.w	r2, r1, r2
 80053f2:	1a9a      	subs	r2, r3, r2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2228      	movs	r2, #40	; 0x28
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f009 fcb9 	bl	800ed8c <memset>
  rb->rdpos = 0;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <HAL_MspInit+0x4c>)
 8005438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543a:	4a10      	ldr	r2, [pc, #64]	; (800547c <HAL_MspInit+0x4c>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6613      	str	r3, [r2, #96]	; 0x60
 8005442:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_MspInit+0x4c>)
 8005444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	607b      	str	r3, [r7, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_MspInit+0x4c>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	4a0a      	ldr	r2, [pc, #40]	; (800547c <HAL_MspInit+0x4c>)
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005458:	6593      	str	r3, [r2, #88]	; 0x58
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_MspInit+0x4c>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005466:	2200      	movs	r2, #0
 8005468:	210f      	movs	r1, #15
 800546a:	f06f 0001 	mvn.w	r0, #1
 800546e:	f000 fecf 	bl	8006210 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40021000 	.word	0x40021000

08005480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0b0      	sub	sp, #192	; 0xc0
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005488:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005498:	f107 0318 	add.w	r3, r7, #24
 800549c:	2294      	movs	r2, #148	; 0x94
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f009 fc73 	bl	800ed8c <memset>
  if(hi2c->Instance==I2C2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a4a      	ldr	r2, [pc, #296]	; (80055d4 <HAL_I2C_MspInit+0x154>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d144      	bne.n	800553a <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80054b4:	2300      	movs	r3, #0
 80054b6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054b8:	f107 0318 	add.w	r3, r7, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f003 f84b 	bl	8008558 <HAL_RCCEx_PeriphCLKConfig>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80054c8:	f7ff ff1a 	bl	8005300 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054cc:	4b42      	ldr	r3, [pc, #264]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 80054ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d0:	4a41      	ldr	r2, [pc, #260]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 80054d2:	f043 0302 	orr.w	r3, r3, #2
 80054d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054d8:	4b3f      	ldr	r3, [pc, #252]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 80054da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80054e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054ec:	2312      	movs	r3, #18
 80054ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f8:	2303      	movs	r3, #3
 80054fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80054fe:	2304      	movs	r3, #4
 8005500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005504:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005508:	4619      	mov	r1, r3
 800550a:	4834      	ldr	r0, [pc, #208]	; (80055dc <HAL_I2C_MspInit+0x15c>)
 800550c:	f000 ff66 	bl	80063dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005510:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	4a30      	ldr	r2, [pc, #192]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 8005516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800551a:	6593      	str	r3, [r2, #88]	; 0x58
 800551c:	4b2e      	ldr	r3, [pc, #184]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005528:	2200      	movs	r2, #0
 800552a:	2105      	movs	r1, #5
 800552c:	2021      	movs	r0, #33	; 0x21
 800552e:	f000 fe6f 	bl	8006210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005532:	2021      	movs	r0, #33	; 0x21
 8005534:	f000 fe88 	bl	8006248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005538:	e048      	b.n	80055cc <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_I2C_MspInit+0x160>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d143      	bne.n	80055cc <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005548:	2300      	movs	r3, #0
 800554a:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800554c:	f107 0318 	add.w	r3, r7, #24
 8005550:	4618      	mov	r0, r3
 8005552:	f003 f801 	bl	8008558 <HAL_RCCEx_PeriphCLKConfig>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 800555c:	f7ff fed0 	bl	8005300 <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005560:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 8005562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005564:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 8005566:	f043 0302 	orr.w	r3, r3, #2
 800556a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800556c:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 800556e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8005578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800557c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005580:	2312      	movs	r3, #18
 8005582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005586:	2301      	movs	r3, #1
 8005588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800558c:	2303      	movs	r3, #3
 800558e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005592:	2304      	movs	r3, #4
 8005594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005598:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800559c:	4619      	mov	r1, r3
 800559e:	480f      	ldr	r0, [pc, #60]	; (80055dc <HAL_I2C_MspInit+0x15c>)
 80055a0:	f000 ff1c 	bl	80063dc <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	4a0b      	ldr	r2, [pc, #44]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 80055aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055ae:	6593      	str	r3, [r2, #88]	; 0x58
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_I2C_MspInit+0x158>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80055bc:	2200      	movs	r2, #0
 80055be:	2105      	movs	r1, #5
 80055c0:	201f      	movs	r0, #31
 80055c2:	f000 fe25 	bl	8006210 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80055c6:	201f      	movs	r0, #31
 80055c8:	f000 fe3e 	bl	8006248 <HAL_NVIC_EnableIRQ>
}
 80055cc:	bf00      	nop
 80055ce:	37c0      	adds	r7, #192	; 0xc0
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40005800 	.word	0x40005800
 80055d8:	40021000 	.word	0x40021000
 80055dc:	48000400 	.word	0x48000400
 80055e0:	40005400 	.word	0x40005400

080055e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b0b4      	sub	sp, #208	; 0xd0
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005600:	2294      	movs	r2, #148	; 0x94
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f009 fbc1 	bl	800ed8c <memset>
  if(huart->Instance==UART4)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a8b      	ldr	r2, [pc, #556]	; (800583c <HAL_UART_MspInit+0x258>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d144      	bne.n	800569e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005614:	2308      	movs	r3, #8
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005618:	2300      	movs	r3, #0
 800561a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800561c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005620:	4618      	mov	r0, r3
 8005622:	f002 ff99 	bl	8008558 <HAL_RCCEx_PeriphCLKConfig>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800562c:	f7ff fe68 	bl	8005300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005630:	4b83      	ldr	r3, [pc, #524]	; (8005840 <HAL_UART_MspInit+0x25c>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	4a82      	ldr	r2, [pc, #520]	; (8005840 <HAL_UART_MspInit+0x25c>)
 8005636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800563a:	6593      	str	r3, [r2, #88]	; 0x58
 800563c:	4b80      	ldr	r3, [pc, #512]	; (8005840 <HAL_UART_MspInit+0x25c>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005648:	4b7d      	ldr	r3, [pc, #500]	; (8005840 <HAL_UART_MspInit+0x25c>)
 800564a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564c:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <HAL_UART_MspInit+0x25c>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005654:	4b7a      	ldr	r3, [pc, #488]	; (8005840 <HAL_UART_MspInit+0x25c>)
 8005656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005660:	2303      	movs	r3, #3
 8005662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005666:	2302      	movs	r3, #2
 8005668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005672:	2303      	movs	r3, #3
 8005674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005678:	2308      	movs	r3, #8
 800567a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800567e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005682:	4619      	mov	r1, r3
 8005684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005688:	f000 fea8 	bl	80063dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800568c:	2200      	movs	r2, #0
 800568e:	2105      	movs	r1, #5
 8005690:	2034      	movs	r0, #52	; 0x34
 8005692:	f000 fdbd 	bl	8006210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005696:	2034      	movs	r0, #52	; 0x34
 8005698:	f000 fdd6 	bl	8006248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800569c:	e0ca      	b.n	8005834 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a68      	ldr	r2, [pc, #416]	; (8005844 <HAL_UART_MspInit+0x260>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d143      	bne.n	8005730 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80056a8:	2301      	movs	r3, #1
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80056ac:	2300      	movs	r3, #0
 80056ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 ff4f 	bl	8008558 <HAL_RCCEx_PeriphCLKConfig>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80056c0:	f7ff fe1e 	bl	8005300 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80056c4:	4b5e      	ldr	r3, [pc, #376]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	4a5d      	ldr	r2, [pc, #372]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80056ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ce:	6613      	str	r3, [r2, #96]	; 0x60
 80056d0:	4b5b      	ldr	r3, [pc, #364]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056dc:	4b58      	ldr	r3, [pc, #352]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	4a57      	ldr	r2, [pc, #348]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80056e2:	f043 0302 	orr.w	r3, r3, #2
 80056e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056e8:	4b55      	ldr	r3, [pc, #340]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80056ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80056f4:	23c0      	movs	r3, #192	; 0xc0
 80056f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fa:	2302      	movs	r3, #2
 80056fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	2300      	movs	r3, #0
 8005702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005706:	2303      	movs	r3, #3
 8005708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800570c:	2307      	movs	r3, #7
 800570e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005712:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005716:	4619      	mov	r1, r3
 8005718:	484b      	ldr	r0, [pc, #300]	; (8005848 <HAL_UART_MspInit+0x264>)
 800571a:	f000 fe5f 	bl	80063dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800571e:	2200      	movs	r2, #0
 8005720:	2105      	movs	r1, #5
 8005722:	2025      	movs	r0, #37	; 0x25
 8005724:	f000 fd74 	bl	8006210 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005728:	2025      	movs	r0, #37	; 0x25
 800572a:	f000 fd8d 	bl	8006248 <HAL_NVIC_EnableIRQ>
}
 800572e:	e081      	b.n	8005834 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a45      	ldr	r2, [pc, #276]	; (800584c <HAL_UART_MspInit+0x268>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d13b      	bne.n	80057b2 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800573a:	2302      	movs	r3, #2
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800573e:	2300      	movs	r3, #0
 8005740:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005746:	4618      	mov	r0, r3
 8005748:	f002 ff06 	bl	8008558 <HAL_RCCEx_PeriphCLKConfig>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8005752:	f7ff fdd5 	bl	8005300 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005756:	4b3a      	ldr	r3, [pc, #232]	; (8005840 <HAL_UART_MspInit+0x25c>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575a:	4a39      	ldr	r2, [pc, #228]	; (8005840 <HAL_UART_MspInit+0x25c>)
 800575c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005760:	6593      	str	r3, [r2, #88]	; 0x58
 8005762:	4b37      	ldr	r3, [pc, #220]	; (8005840 <HAL_UART_MspInit+0x25c>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800576e:	4b34      	ldr	r3, [pc, #208]	; (8005840 <HAL_UART_MspInit+0x25c>)
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	4a33      	ldr	r2, [pc, #204]	; (8005840 <HAL_UART_MspInit+0x25c>)
 8005774:	f043 0308 	orr.w	r3, r3, #8
 8005778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800577a:	4b31      	ldr	r3, [pc, #196]	; (8005840 <HAL_UART_MspInit+0x25c>)
 800577c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8005786:	2378      	movs	r3, #120	; 0x78
 8005788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2302      	movs	r3, #2
 800578e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005798:	2303      	movs	r3, #3
 800579a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800579e:	2307      	movs	r3, #7
 80057a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80057a8:	4619      	mov	r1, r3
 80057aa:	4829      	ldr	r0, [pc, #164]	; (8005850 <HAL_UART_MspInit+0x26c>)
 80057ac:	f000 fe16 	bl	80063dc <HAL_GPIO_Init>
}
 80057b0:	e040      	b.n	8005834 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a27      	ldr	r2, [pc, #156]	; (8005854 <HAL_UART_MspInit+0x270>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d13b      	bne.n	8005834 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80057bc:	2304      	movs	r3, #4
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80057c0:	2300      	movs	r3, #0
 80057c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c8:	4618      	mov	r0, r3
 80057ca:	f002 fec5 	bl	8008558 <HAL_RCCEx_PeriphCLKConfig>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80057d4:	f7ff fd94 	bl	8005300 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	4a18      	ldr	r2, [pc, #96]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80057de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e2:	6593      	str	r3, [r2, #88]	; 0x58
 80057e4:	4b16      	ldr	r3, [pc, #88]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	4a12      	ldr	r2, [pc, #72]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80057f6:	f043 0308 	orr.w	r3, r3, #8
 80057fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057fc:	4b10      	ldr	r3, [pc, #64]	; (8005840 <HAL_UART_MspInit+0x25c>)
 80057fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005808:	f44f 7340 	mov.w	r3, #768	; 0x300
 800580c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800581c:	2303      	movs	r3, #3
 800581e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005822:	2307      	movs	r3, #7
 8005824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005828:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800582c:	4619      	mov	r1, r3
 800582e:	4808      	ldr	r0, [pc, #32]	; (8005850 <HAL_UART_MspInit+0x26c>)
 8005830:	f000 fdd4 	bl	80063dc <HAL_GPIO_Init>
}
 8005834:	bf00      	nop
 8005836:	37d0      	adds	r7, #208	; 0xd0
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40004c00 	.word	0x40004c00
 8005840:	40021000 	.word	0x40021000
 8005844:	40013800 	.word	0x40013800
 8005848:	48000400 	.word	0x48000400
 800584c:	40004400 	.word	0x40004400
 8005850:	48000c00 	.word	0x48000c00
 8005854:	40004800 	.word	0x40004800

08005858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	; 0x30
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005866:	4b2e      	ldr	r3, [pc, #184]	; (8005920 <HAL_InitTick+0xc8>)
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	4a2d      	ldr	r2, [pc, #180]	; (8005920 <HAL_InitTick+0xc8>)
 800586c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005870:	6613      	str	r3, [r2, #96]	; 0x60
 8005872:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <HAL_InitTick+0xc8>)
 8005874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800587e:	f107 020c 	add.w	r2, r7, #12
 8005882:	f107 0310 	add.w	r3, r7, #16
 8005886:	4611      	mov	r1, r2
 8005888:	4618      	mov	r0, r3
 800588a:	f002 fd73 	bl	8008374 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800588e:	f002 fd5b 	bl	8008348 <HAL_RCC_GetPCLK2Freq>
 8005892:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	4a23      	ldr	r2, [pc, #140]	; (8005924 <HAL_InitTick+0xcc>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	0c9b      	lsrs	r3, r3, #18
 800589e:	3b01      	subs	r3, #1
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80058a2:	4b21      	ldr	r3, [pc, #132]	; (8005928 <HAL_InitTick+0xd0>)
 80058a4:	4a21      	ldr	r2, [pc, #132]	; (800592c <HAL_InitTick+0xd4>)
 80058a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80058a8:	4b1f      	ldr	r3, [pc, #124]	; (8005928 <HAL_InitTick+0xd0>)
 80058aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <HAL_InitTick+0xd0>)
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <HAL_InitTick+0xd0>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <HAL_InitTick+0xd0>)
 80058be:	2200      	movs	r2, #0
 80058c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058c2:	4b19      	ldr	r3, [pc, #100]	; (8005928 <HAL_InitTick+0xd0>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80058c8:	4817      	ldr	r0, [pc, #92]	; (8005928 <HAL_InitTick+0xd0>)
 80058ca:	f003 fb5d 	bl	8008f88 <HAL_TIM_Base_Init>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80058d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11b      	bne.n	8005914 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80058dc:	4812      	ldr	r0, [pc, #72]	; (8005928 <HAL_InitTick+0xd0>)
 80058de:	f003 fbb5 	bl	800904c <HAL_TIM_Base_Start_IT>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80058e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d111      	bne.n	8005914 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80058f0:	2019      	movs	r0, #25
 80058f2:	f000 fca9 	bl	8006248 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b0f      	cmp	r3, #15
 80058fa:	d808      	bhi.n	800590e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80058fc:	2200      	movs	r2, #0
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	2019      	movs	r0, #25
 8005902:	f000 fc85 	bl	8006210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_InitTick+0xd8>)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e002      	b.n	8005914 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005918:	4618      	mov	r0, r3
 800591a:	3730      	adds	r7, #48	; 0x30
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40021000 	.word	0x40021000
 8005924:	431bde83 	.word	0x431bde83
 8005928:	200003e8 	.word	0x200003e8
 800592c:	40012c00 	.word	0x40012c00
 8005930:	20000014 	.word	0x20000014

08005934 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005938:	e7fe      	b.n	8005938 <NMI_Handler+0x4>

0800593a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800593a:	b480      	push	{r7}
 800593c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800593e:	e7fe      	b.n	800593e <HardFault_Handler+0x4>

08005940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005944:	e7fe      	b.n	8005944 <MemManage_Handler+0x4>

08005946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005946:	b480      	push	{r7}
 8005948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800594a:	e7fe      	b.n	800594a <BusFault_Handler+0x4>

0800594c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005950:	e7fe      	b.n	8005950 <UsageFault_Handler+0x4>

08005952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005952:	b480      	push	{r7}
 8005954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005956:	bf00      	nop
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8005964:	2020      	movs	r0, #32
 8005966:	f000 fefd 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800596a:	2040      	movs	r0, #64	; 0x40
 800596c:	f000 fefa 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8005970:	2080      	movs	r0, #128	; 0x80
 8005972:	f000 fef7 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8005976:	f44f 7080 	mov.w	r0, #256	; 0x100
 800597a:	f000 fef3 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005988:	4802      	ldr	r0, [pc, #8]	; (8005994 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800598a:	f003 fbcf 	bl	800912c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200003e8 	.word	0x200003e8

08005998 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800599c:	4802      	ldr	r0, [pc, #8]	; (80059a8 <I2C1_EV_IRQHandler+0x10>)
 800599e:	f001 fab5 	bl	8006f0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80059a2:	bf00      	nop
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000290 	.word	0x20000290

080059ac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80059b0:	4802      	ldr	r0, [pc, #8]	; (80059bc <I2C2_EV_IRQHandler+0x10>)
 80059b2:	f001 faab 	bl	8006f0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000364 	.word	0x20000364

080059c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059c4:	4802      	ldr	r0, [pc, #8]	; (80059d0 <USART1_IRQHandler+0x10>)
 80059c6:	f003 feef 	bl	80097a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000438 	.word	0x20000438

080059d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80059d8:	4802      	ldr	r0, [pc, #8]	; (80059e4 <UART4_IRQHandler+0x10>)
 80059da:	f003 fee5 	bl	80097a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200004c8 	.word	0x200004c8

080059e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80059ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80059f0:	f000 feb8 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80059f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80059f8:	f000 feb4 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80059fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a00:	f000 feb0 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8005a04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a08:	f000 feac 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8005a0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a10:	f000 fea8 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8005a14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a18:	f000 fea4 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a1c:	bf00      	nop
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  return 1;
 8005a24:	2301      	movs	r3, #1
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <_kill>:

int _kill(int pid, int sig)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a3a:	f009 f96f 	bl	800ed1c <__errno>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2216      	movs	r2, #22
 8005a42:	601a      	str	r2, [r3, #0]
  return -1;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_exit>:

void _exit (int status)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a58:	f04f 31ff 	mov.w	r1, #4294967295
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff ffe7 	bl	8005a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a62:	e7fe      	b.n	8005a62 <_exit+0x12>

08005a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	e00a      	b.n	8005a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a76:	f3af 8000 	nop.w
 8005a7a:	4601      	mov	r1, r0
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	60ba      	str	r2, [r7, #8]
 8005a82:	b2ca      	uxtb	r2, r1
 8005a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	dbf0      	blt.n	8005a76 <_read+0x12>
  }

  return len;
 8005a94:	687b      	ldr	r3, [r7, #4]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e009      	b.n	8005ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	60ba      	str	r2, [r7, #8]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	dbf1      	blt.n	8005ab0 <_write+0x12>
  }
  return len;
 8005acc:	687b      	ldr	r3, [r7, #4]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <_close>:

int _close(int file)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005afe:	605a      	str	r2, [r3, #4]
  return 0;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <_isatty>:

int _isatty(int file)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b16:	2301      	movs	r3, #1
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b48:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <_sbrk+0x5c>)
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <_sbrk+0x60>)
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b54:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <_sbrk+0x64>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b5c:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <_sbrk+0x64>)
 8005b5e:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <_sbrk+0x68>)
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <_sbrk+0x64>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d207      	bcs.n	8005b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b70:	f009 f8d4 	bl	800ed1c <__errno>
 8005b74:	4603      	mov	r3, r0
 8005b76:	220c      	movs	r2, #12
 8005b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7e:	e009      	b.n	8005b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b80:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <_sbrk+0x64>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <_sbrk+0x64>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <_sbrk+0x64>)
 8005b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	200a0000 	.word	0x200a0000
 8005ba0:	00000400 	.word	0x00000400
 8005ba4:	20000434 	.word	0x20000434
 8005ba8:	20006328 	.word	0x20006328

08005bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <SystemInit+0x20>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	4a05      	ldr	r2, [pc, #20]	; (8005bcc <SystemInit+0x20>)
 8005bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005bd6:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <MX_USART1_UART_Init+0x9c>)
 8005bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8005bda:	4b23      	ldr	r3, [pc, #140]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005bdc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005be2:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005be8:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005bee:	4b1e      	ldr	r3, [pc, #120]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005bf4:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005bf6:	220c      	movs	r2, #12
 8005bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c06:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c18:	4813      	ldr	r0, [pc, #76]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c1a:	f003 fc87 	bl	800952c <HAL_UART_Init>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005c24:	f7ff fb6c 	bl	8005300 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c28:	2100      	movs	r1, #0
 8005c2a:	480f      	ldr	r0, [pc, #60]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c2c:	f005 fc33 	bl	800b496 <HAL_UARTEx_SetTxFifoThreshold>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005c36:	f7ff fb63 	bl	8005300 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	480a      	ldr	r0, [pc, #40]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c3e:	f005 fc68 	bl	800b512 <HAL_UARTEx_SetRxFifoThreshold>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005c48:	f7ff fb5a 	bl	8005300 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005c4c:	4806      	ldr	r0, [pc, #24]	; (8005c68 <MX_USART1_UART_Init+0x98>)
 8005c4e:	f005 fbe9 	bl	800b424 <HAL_UARTEx_DisableFifoMode>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005c58:	f7ff fb52 	bl	8005300 <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 8005c5c:	2128      	movs	r1, #40	; 0x28
 8005c5e:	4804      	ldr	r0, [pc, #16]	; (8005c70 <MX_USART1_UART_Init+0xa0>)
 8005c60:	f7ff fb5e 	bl	8005320 <RB_init>

}
 8005c64:	bf00      	nop
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000438 	.word	0x20000438
 8005c6c:	40013800 	.word	0x40013800
 8005c70:	2000058c 	.word	0x2000058c

08005c74 <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8005c78:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005c7a:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <MX_UART4_Init+0xa4>)
 8005c7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8005c7e:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005c80:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005c84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005c86:	4b23      	ldr	r3, [pc, #140]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005c8c:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005c9a:	220c      	movs	r2, #12
 8005c9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005caa:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005cb0:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005cb6:	4b17      	ldr	r3, [pc, #92]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005cbc:	4815      	ldr	r0, [pc, #84]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005cbe:	f003 fc35 	bl	800952c <HAL_UART_Init>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_UART4_Init+0x58>
  {
    error_Handler();
 8005cc8:	f000 f82c 	bl	8005d24 <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4811      	ldr	r0, [pc, #68]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005cd0:	f005 fbe1 	bl	800b496 <HAL_UARTEx_SetTxFifoThreshold>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <MX_UART4_Init+0x6a>
  {
    error_Handler();
 8005cda:	f000 f823 	bl	8005d24 <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cde:	2100      	movs	r1, #0
 8005ce0:	480c      	ldr	r0, [pc, #48]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005ce2:	f005 fc16 	bl	800b512 <HAL_UARTEx_SetRxFifoThreshold>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 8005cec:	f000 f81a 	bl	8005d24 <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005cf0:	4808      	ldr	r0, [pc, #32]	; (8005d14 <MX_UART4_Init+0xa0>)
 8005cf2:	f005 fb97 	bl	800b424 <HAL_UARTEx_DisableFifoMode>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 8005cfc:	f000 f812 	bl	8005d24 <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 8005d00:	2128      	movs	r1, #40	; 0x28
 8005d02:	4806      	ldr	r0, [pc, #24]	; (8005d1c <MX_UART4_Init+0xa8>)
 8005d04:	f7ff fb0c 	bl	8005320 <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 8005d08:	210a      	movs	r1, #10
 8005d0a:	4805      	ldr	r0, [pc, #20]	; (8005d20 <MX_UART4_Init+0xac>)
 8005d0c:	f000 f83c 	bl	8005d88 <uart_write_debug>

}
 8005d10:	bf00      	nop
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	200004c8 	.word	0x200004c8
 8005d18:	40004c00 	.word	0x40004c00
 8005d1c:	20000558 	.word	0x20000558
 8005d20:	08013454 	.word	0x08013454

08005d24 <error_Handler>:

void error_Handler(void){
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 8005d28:	210a      	movs	r1, #10
 8005d2a:	4802      	ldr	r0, [pc, #8]	; (8005d34 <error_Handler+0x10>)
 8005d2c:	f000 f82c 	bl	8005d88 <uart_write_debug>
}
 8005d30:	bf00      	nop
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08013468 	.word	0x08013468

08005d38 <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d00c      	beq.n	8005d62 <uart_receive_it+0x2a>
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	dc0d      	bgt.n	8005d68 <uart_receive_it+0x30>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <uart_receive_it+0x1e>
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d003      	beq.n	8005d5c <uart_receive_it+0x24>
 8005d54:	e008      	b.n	8005d68 <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <uart_receive_it+0x44>)
 8005d58:	60fb      	str	r3, [r7, #12]
		break;
 8005d5a:	e005      	b.n	8005d68 <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 8005d5c:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <uart_receive_it+0x48>)
 8005d5e:	60fb      	str	r3, [r7, #12]
		break;
 8005d60:	e002      	b.n	8005d68 <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <uart_receive_it+0x44>)
 8005d64:	60fb      	str	r3, [r7, #12]
		break;
 8005d66:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 8005d68:	2201      	movs	r2, #1
 8005d6a:	4906      	ldr	r1, [pc, #24]	; (8005d84 <uart_receive_it+0x4c>)
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f003 fcc5 	bl	80096fc <HAL_UART_Receive_IT>
 8005d72:	4603      	mov	r3, r0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000438 	.word	0x20000438
 8005d80:	200004c8 	.word	0x200004c8
 8005d84:	200005c0 	.word	0x200005c0

08005d88 <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fa fa34 	bl	8000200 <strlen>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4803      	ldr	r0, [pc, #12]	; (8005db0 <uart_write_debug+0x28>)
 8005da2:	f003 fc13 	bl	80095cc <HAL_UART_Transmit>
 8005da6:	4603      	mov	r3, r0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000438 	.word	0x20000438

08005db4 <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, UART_select device, uint32_t Timeout){
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	72fb      	strb	r3, [r7, #11]
	UART_HandleTypeDef *huart;
	switch (device){
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d00c      	beq.n	8005de2 <uart_write+0x2e>
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	dc0d      	bgt.n	8005de8 <uart_write+0x34>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <uart_write+0x22>
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d003      	beq.n	8005ddc <uart_write+0x28>
 8005dd4:	e008      	b.n	8005de8 <uart_write+0x34>
	case UART_DEBUG:
		huart = &huart1;
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <uart_write+0x54>)
 8005dd8:	617b      	str	r3, [r7, #20]
		break;
 8005dda:	e005      	b.n	8005de8 <uart_write+0x34>
	case UART_NYX:
		huart = &huart4;
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <uart_write+0x58>)
 8005dde:	617b      	str	r3, [r7, #20]
		break;
 8005de0:	e002      	b.n	8005de8 <uart_write+0x34>
	case UART_IRIS:
		huart = &huart1;
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <uart_write+0x54>)
 8005de4:	617b      	str	r3, [r7, #20]
		break;
 8005de6:	bf00      	nop
	}
	return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7fa fa09 	bl	8000200 <strlen>
 8005dee:	4603      	mov	r3, r0
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	6978      	ldr	r0, [r7, #20]
 8005df8:	f003 fbe8 	bl	80095cc <HAL_UART_Transmit>
 8005dfc:	4603      	mov	r3, r0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000438 	.word	0x20000438
 8005e0c:	200004c8 	.word	0x200004c8

08005e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a53      	ldr	r2, [pc, #332]	; (8005f6c <HAL_UART_RxCpltCallback+0x15c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d150      	bne.n	8005ec4 <HAL_UART_RxCpltCallback+0xb4>
	{
		if ((rxChar == STP) && (prvRxChar != ESC)){
 8005e22:	4b53      	ldr	r3, [pc, #332]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d11d      	bne.n	8005e66 <HAL_UART_RxCpltCallback+0x56>
 8005e2a:	4b52      	ldr	r3, [pc, #328]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b1b      	cmp	r3, #27
 8005e30:	d019      	beq.n	8005e66 <HAL_UART_RxCpltCallback+0x56>
			uint8_t start_ch = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73bb      	strb	r3, [r7, #14]
			start_ch = RB_pop(&uart4RXrb);
 8005e36:	4850      	ldr	r0, [pc, #320]	; (8005f78 <HAL_UART_RxCpltCallback+0x168>)
 8005e38:	f7ff fac0 	bl	80053bc <RB_pop>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73bb      	strb	r3, [r7, #14]
			if (start_ch == STR){
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d10b      	bne.n	8005e5e <HAL_UART_RxCpltCallback+0x4e>
				osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 8005e46:	4b4d      	ldr	r3, [pc, #308]	; (8005f7c <HAL_UART_RxCpltCallback+0x16c>)
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	494a      	ldr	r1, [pc, #296]	; (8005f78 <HAL_UART_RxCpltCallback+0x168>)
 8005e50:	f005 fea8 	bl	800bba4 <osMessageQueuePut>
				uart_write("Message received\r\n", UART_NYX, 10);
 8005e54:	220a      	movs	r2, #10
 8005e56:	2101      	movs	r1, #1
 8005e58:	4849      	ldr	r0, [pc, #292]	; (8005f80 <HAL_UART_RxCpltCallback+0x170>)
 8005e5a:	f7ff ffab 	bl	8005db4 <uart_write>
			}
			RB_clear(&uart4RXrb);
 8005e5e:	4846      	ldr	r0, [pc, #280]	; (8005f78 <HAL_UART_RxCpltCallback+0x168>)
 8005e60:	f7ff fad1 	bl	8005406 <RB_clear>
		if ((rxChar == STP) && (prvRxChar != ESC)){
 8005e64:	e028      	b.n	8005eb8 <HAL_UART_RxCpltCallback+0xa8>
		}
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8005e66:	4b42      	ldr	r3, [pc, #264]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b1b      	cmp	r3, #27
 8005e6c:	d108      	bne.n	8005e80 <HAL_UART_RxCpltCallback+0x70>
 8005e6e:	4b41      	ldr	r3, [pc, #260]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b1b      	cmp	r3, #27
 8005e74:	d004      	beq.n	8005e80 <HAL_UART_RxCpltCallback+0x70>
			 prvRxChar = rxChar;
 8005e76:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	4b3e      	ldr	r3, [pc, #248]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	e01b      	b.n	8005eb8 <HAL_UART_RxCpltCallback+0xa8>
		}
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8005e80:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b1b      	cmp	r3, #27
 8005e86:	d10d      	bne.n	8005ea4 <HAL_UART_RxCpltCallback+0x94>
 8005e88:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b1b      	cmp	r3, #27
 8005e8e:	d109      	bne.n	8005ea4 <HAL_UART_RxCpltCallback+0x94>
			RB_push(&uart4RXrb, rxChar);
 8005e90:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	4619      	mov	r1, r3
 8005e96:	4838      	ldr	r0, [pc, #224]	; (8005f78 <HAL_UART_RxCpltCallback+0x168>)
 8005e98:	f7ff fa62 	bl	8005360 <RB_push>
			prvRxChar = 0x00;
 8005e9c:	4b35      	ldr	r3, [pc, #212]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e009      	b.n	8005eb8 <HAL_UART_RxCpltCallback+0xa8>
		}
		else {
		  RB_push(&uart4RXrb, rxChar);
 8005ea4:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4833      	ldr	r0, [pc, #204]	; (8005f78 <HAL_UART_RxCpltCallback+0x168>)
 8005eac:	f7ff fa58 	bl	8005360 <RB_push>
		  prvRxChar = rxChar;
 8005eb0:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005eb6:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 8005eb8:	2201      	movs	r2, #1
 8005eba:	492d      	ldr	r1, [pc, #180]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005ebc:	4831      	ldr	r0, [pc, #196]	; (8005f84 <HAL_UART_RxCpltCallback+0x174>)
 8005ebe:	f003 fc1d 	bl	80096fc <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 8005ec2:	e04f      	b.n	8005f64 <HAL_UART_RxCpltCallback+0x154>
	else if (UartHandle->Instance == USART1){
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2f      	ldr	r2, [pc, #188]	; (8005f88 <HAL_UART_RxCpltCallback+0x178>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d14a      	bne.n	8005f64 <HAL_UART_RxCpltCallback+0x154>
		if ((rxChar == STP) && (prvRxChar != ESC)){
 8005ece:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d118      	bne.n	8005f08 <HAL_UART_RxCpltCallback+0xf8>
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b1b      	cmp	r3, #27
 8005edc:	d014      	beq.n	8005f08 <HAL_UART_RxCpltCallback+0xf8>
		uint8_t start_ch = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 8005ee2:	482a      	ldr	r0, [pc, #168]	; (8005f8c <HAL_UART_RxCpltCallback+0x17c>)
 8005ee4:	f7ff fa6a 	bl	80053bc <RB_pop>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STR){
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_RxCpltCallback+0xf0>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <HAL_UART_RxCpltCallback+0x16c>)
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4924      	ldr	r1, [pc, #144]	; (8005f8c <HAL_UART_RxCpltCallback+0x17c>)
 8005efc:	f005 fe52 	bl	800bba4 <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 8005f00:	4822      	ldr	r0, [pc, #136]	; (8005f8c <HAL_UART_RxCpltCallback+0x17c>)
 8005f02:	f7ff fa80 	bl	8005406 <RB_clear>
		if ((rxChar == STP) && (prvRxChar != ESC)){
 8005f06:	e028      	b.n	8005f5a <HAL_UART_RxCpltCallback+0x14a>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8005f08:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b1b      	cmp	r3, #27
 8005f0e:	d108      	bne.n	8005f22 <HAL_UART_RxCpltCallback+0x112>
 8005f10:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b1b      	cmp	r3, #27
 8005f16:	d004      	beq.n	8005f22 <HAL_UART_RxCpltCallback+0x112>
			 prvRxChar = rxChar;
 8005f18:	4b15      	ldr	r3, [pc, #84]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005f1a:	781a      	ldrb	r2, [r3, #0]
 8005f1c:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e01b      	b.n	8005f5a <HAL_UART_RxCpltCallback+0x14a>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b1b      	cmp	r3, #27
 8005f28:	d10d      	bne.n	8005f46 <HAL_UART_RxCpltCallback+0x136>
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b1b      	cmp	r3, #27
 8005f30:	d109      	bne.n	8005f46 <HAL_UART_RxCpltCallback+0x136>
			RB_push(&uart1RXrb, rxChar);
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	4619      	mov	r1, r3
 8005f38:	4814      	ldr	r0, [pc, #80]	; (8005f8c <HAL_UART_RxCpltCallback+0x17c>)
 8005f3a:	f7ff fa11 	bl	8005360 <RB_push>
			prvRxChar = 0x00;
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e009      	b.n	8005f5a <HAL_UART_RxCpltCallback+0x14a>
		  RB_push(&uart1RXrb, rxChar);
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	480f      	ldr	r0, [pc, #60]	; (8005f8c <HAL_UART_RxCpltCallback+0x17c>)
 8005f4e:	f7ff fa07 	bl	8005360 <RB_push>
		  prvRxChar = rxChar;
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005f54:	781a      	ldrb	r2, [r3, #0]
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <HAL_UART_RxCpltCallback+0x164>)
 8005f58:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	4904      	ldr	r1, [pc, #16]	; (8005f70 <HAL_UART_RxCpltCallback+0x160>)
 8005f5e:	480c      	ldr	r0, [pc, #48]	; (8005f90 <HAL_UART_RxCpltCallback+0x180>)
 8005f60:	f003 fbcc 	bl	80096fc <HAL_UART_Receive_IT>
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40004c00 	.word	0x40004c00
 8005f70:	200005c0 	.word	0x200005c0
 8005f74:	200005c1 	.word	0x200005c1
 8005f78:	20000558 	.word	0x20000558
 8005f7c:	200003e4 	.word	0x200003e4
 8005f80:	08013480 	.word	0x08013480
 8005f84:	200004c8 	.word	0x200004c8
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	2000058c 	.word	0x2000058c
 8005f90:	20000438 	.word	0x20000438

08005f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f98:	f7ff fe08 	bl	8005bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f9c:	480c      	ldr	r0, [pc, #48]	; (8005fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f9e:	490d      	ldr	r1, [pc, #52]	; (8005fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fa0:	4a0d      	ldr	r2, [pc, #52]	; (8005fd8 <LoopForever+0xe>)
  movs r3, #0
 8005fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fa4:	e002      	b.n	8005fac <LoopCopyDataInit>

08005fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005faa:	3304      	adds	r3, #4

08005fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fb0:	d3f9      	bcc.n	8005fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005fb4:	4c0a      	ldr	r4, [pc, #40]	; (8005fe0 <LoopForever+0x16>)
  movs r3, #0
 8005fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fb8:	e001      	b.n	8005fbe <LoopFillZerobss>

08005fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fbc:	3204      	adds	r2, #4

08005fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fc0:	d3fb      	bcc.n	8005fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fc2:	f008 feb1 	bl	800ed28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005fc6:	f7fe fd79 	bl	8004abc <main>

08005fca <LoopForever>:

LoopForever:
    b LoopForever
 8005fca:	e7fe      	b.n	8005fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005fcc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fd4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005fd8:	08013f34 	.word	0x08013f34
  ldr r2, =_sbss
 8005fdc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005fe0:	20006328 	.word	0x20006328

08005fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005fe4:	e7fe      	b.n	8005fe4 <ADC1_IRQHandler>

08005fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ff0:	2003      	movs	r0, #3
 8005ff2:	f000 f902 	bl	80061fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ff6:	200f      	movs	r0, #15
 8005ff8:	f7ff fc2e 	bl	8005858 <HAL_InitTick>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	71fb      	strb	r3, [r7, #7]
 8006006:	e001      	b.n	800600c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006008:	f7ff fa12 	bl	8005430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800600c:	79fb      	ldrb	r3, [r7, #7]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_IncTick+0x20>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <HAL_IncTick+0x24>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4413      	add	r3, r2
 8006028:	4a04      	ldr	r2, [pc, #16]	; (800603c <HAL_IncTick+0x24>)
 800602a:	6013      	str	r3, [r2, #0]
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000018 	.word	0x20000018
 800603c:	200005c4 	.word	0x200005c4

08006040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  return uwTick;
 8006044:	4b03      	ldr	r3, [pc, #12]	; (8006054 <HAL_GetTick+0x14>)
 8006046:	681b      	ldr	r3, [r3, #0]
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	200005c4 	.word	0x200005c4

08006058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006060:	f7ff ffee 	bl	8006040 <HAL_GetTick>
 8006064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d005      	beq.n	800607e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_Delay+0x44>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800607e:	bf00      	nop
 8006080:	f7ff ffde 	bl	8006040 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	429a      	cmp	r2, r3
 800608e:	d8f7      	bhi.n	8006080 <HAL_Delay+0x28>
  {
  }
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000018 	.word	0x20000018

080060a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <__NVIC_SetPriorityGrouping+0x44>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060bc:	4013      	ands	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060d2:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <__NVIC_SetPriorityGrouping+0x44>)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	60d3      	str	r3, [r2, #12]
}
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	e000ed00 	.word	0xe000ed00

080060e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <__NVIC_GetPriorityGrouping+0x18>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 0307 	and.w	r3, r3, #7
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	e000ed00 	.word	0xe000ed00

08006104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006112:	2b00      	cmp	r3, #0
 8006114:	db0b      	blt.n	800612e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	f003 021f 	and.w	r2, r3, #31
 800611c:	4907      	ldr	r1, [pc, #28]	; (800613c <__NVIC_EnableIRQ+0x38>)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2001      	movs	r0, #1
 8006126:	fa00 f202 	lsl.w	r2, r0, r2
 800612a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000e100 	.word	0xe000e100

08006140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	6039      	str	r1, [r7, #0]
 800614a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800614c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006150:	2b00      	cmp	r3, #0
 8006152:	db0a      	blt.n	800616a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	490c      	ldr	r1, [pc, #48]	; (800618c <__NVIC_SetPriority+0x4c>)
 800615a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	440b      	add	r3, r1
 8006164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006168:	e00a      	b.n	8006180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	4908      	ldr	r1, [pc, #32]	; (8006190 <__NVIC_SetPriority+0x50>)
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	3b04      	subs	r3, #4
 8006178:	0112      	lsls	r2, r2, #4
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	440b      	add	r3, r1
 800617e:	761a      	strb	r2, [r3, #24]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	e000e100 	.word	0xe000e100
 8006190:	e000ed00 	.word	0xe000ed00

08006194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	; 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f1c3 0307 	rsb	r3, r3, #7
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	bf28      	it	cs
 80061b2:	2304      	movcs	r3, #4
 80061b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3304      	adds	r3, #4
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	d902      	bls.n	80061c4 <NVIC_EncodePriority+0x30>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3b03      	subs	r3, #3
 80061c2:	e000      	b.n	80061c6 <NVIC_EncodePriority+0x32>
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43da      	mvns	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	401a      	ands	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061dc:	f04f 31ff 	mov.w	r1, #4294967295
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	43d9      	mvns	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ec:	4313      	orrs	r3, r2
         );
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3724      	adds	r7, #36	; 0x24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff ff4c 	bl	80060a0 <__NVIC_SetPriorityGrouping>
}
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006222:	f7ff ff61 	bl	80060e8 <__NVIC_GetPriorityGrouping>
 8006226:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	6978      	ldr	r0, [r7, #20]
 800622e:	f7ff ffb1 	bl	8006194 <NVIC_EncodePriority>
 8006232:	4602      	mov	r2, r0
 8006234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006238:	4611      	mov	r1, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ff80 	bl	8006140 <__NVIC_SetPriority>
}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff ff54 	bl	8006104 <__NVIC_EnableIRQ>
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d008      	beq.n	800628e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2204      	movs	r2, #4
 8006280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e040      	b.n	8006310 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 020e 	bic.w	r2, r2, #14
 800629c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	f003 021c 	and.w	r2, r3, #28
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2101      	movs	r1, #1
 80062cc:	fa01 f202 	lsl.w	r2, r1, r2
 80062d0:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80062da:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80062fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d005      	beq.n	8006340 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2204      	movs	r2, #4
 8006338:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
 800633e:	e047      	b.n	80063d0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 020e 	bic.w	r2, r2, #14
 800634e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006374:	f003 021c 	and.w	r2, r3, #28
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	2101      	movs	r1, #1
 800637e:	fa01 f202 	lsl.w	r2, r1, r2
 8006382:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800638c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80063ae:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
    }
  }
  return status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063ea:	e166      	b.n	80066ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	2101      	movs	r1, #1
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	fa01 f303 	lsl.w	r3, r1, r3
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8158 	beq.w	80066b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d005      	beq.n	800641c <HAL_GPIO_Init+0x40>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d130      	bne.n	800647e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	2203      	movs	r2, #3
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	43db      	mvns	r3, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4013      	ands	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006452:	2201      	movs	r2, #1
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4013      	ands	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	091b      	lsrs	r3, r3, #4
 8006468:	f003 0201 	and.w	r2, r3, #1
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	2b03      	cmp	r3, #3
 8006488:	d017      	beq.n	80064ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	2203      	movs	r2, #3
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4013      	ands	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d123      	bne.n	800650e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	08da      	lsrs	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3208      	adds	r2, #8
 80064ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	220f      	movs	r2, #15
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	43db      	mvns	r3, r3
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4013      	ands	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	08da      	lsrs	r2, r3, #3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3208      	adds	r2, #8
 8006508:	6939      	ldr	r1, [r7, #16]
 800650a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	2203      	movs	r2, #3
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43db      	mvns	r3, r3
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4013      	ands	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f003 0203 	and.w	r2, r3, #3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80b2 	beq.w	80066b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006550:	4b61      	ldr	r3, [pc, #388]	; (80066d8 <HAL_GPIO_Init+0x2fc>)
 8006552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006554:	4a60      	ldr	r2, [pc, #384]	; (80066d8 <HAL_GPIO_Init+0x2fc>)
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6613      	str	r3, [r2, #96]	; 0x60
 800655c:	4b5e      	ldr	r3, [pc, #376]	; (80066d8 <HAL_GPIO_Init+0x2fc>)
 800655e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006568:	4a5c      	ldr	r2, [pc, #368]	; (80066dc <HAL_GPIO_Init+0x300>)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	089b      	lsrs	r3, r3, #2
 800656e:	3302      	adds	r3, #2
 8006570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	220f      	movs	r2, #15
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4013      	ands	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006592:	d02b      	beq.n	80065ec <HAL_GPIO_Init+0x210>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a52      	ldr	r2, [pc, #328]	; (80066e0 <HAL_GPIO_Init+0x304>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d025      	beq.n	80065e8 <HAL_GPIO_Init+0x20c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a51      	ldr	r2, [pc, #324]	; (80066e4 <HAL_GPIO_Init+0x308>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d01f      	beq.n	80065e4 <HAL_GPIO_Init+0x208>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a50      	ldr	r2, [pc, #320]	; (80066e8 <HAL_GPIO_Init+0x30c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d019      	beq.n	80065e0 <HAL_GPIO_Init+0x204>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a4f      	ldr	r2, [pc, #316]	; (80066ec <HAL_GPIO_Init+0x310>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <HAL_GPIO_Init+0x200>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a4e      	ldr	r2, [pc, #312]	; (80066f0 <HAL_GPIO_Init+0x314>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00d      	beq.n	80065d8 <HAL_GPIO_Init+0x1fc>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a4d      	ldr	r2, [pc, #308]	; (80066f4 <HAL_GPIO_Init+0x318>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <HAL_GPIO_Init+0x1f8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a4c      	ldr	r2, [pc, #304]	; (80066f8 <HAL_GPIO_Init+0x31c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_GPIO_Init+0x1f4>
 80065cc:	2307      	movs	r3, #7
 80065ce:	e00e      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065d0:	2308      	movs	r3, #8
 80065d2:	e00c      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065d4:	2306      	movs	r3, #6
 80065d6:	e00a      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065d8:	2305      	movs	r3, #5
 80065da:	e008      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065dc:	2304      	movs	r3, #4
 80065de:	e006      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065e0:	2303      	movs	r3, #3
 80065e2:	e004      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e002      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <HAL_GPIO_Init+0x212>
 80065ec:	2300      	movs	r3, #0
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	f002 0203 	and.w	r2, r2, #3
 80065f4:	0092      	lsls	r2, r2, #2
 80065f6:	4093      	lsls	r3, r2
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80065fe:	4937      	ldr	r1, [pc, #220]	; (80066dc <HAL_GPIO_Init+0x300>)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	3302      	adds	r3, #2
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800660c:	4b3b      	ldr	r3, [pc, #236]	; (80066fc <HAL_GPIO_Init+0x320>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	43db      	mvns	r3, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4013      	ands	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006630:	4a32      	ldr	r2, [pc, #200]	; (80066fc <HAL_GPIO_Init+0x320>)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006636:	4b31      	ldr	r3, [pc, #196]	; (80066fc <HAL_GPIO_Init+0x320>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	43db      	mvns	r3, r3
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4013      	ands	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800665a:	4a28      	ldr	r2, [pc, #160]	; (80066fc <HAL_GPIO_Init+0x320>)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006660:	4b26      	ldr	r3, [pc, #152]	; (80066fc <HAL_GPIO_Init+0x320>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	43db      	mvns	r3, r3
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4013      	ands	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006684:	4a1d      	ldr	r2, [pc, #116]	; (80066fc <HAL_GPIO_Init+0x320>)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800668a:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HAL_GPIO_Init+0x320>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	43db      	mvns	r3, r3
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4013      	ands	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066ae:	4a13      	ldr	r2, [pc, #76]	; (80066fc <HAL_GPIO_Init+0x320>)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3301      	adds	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	fa22 f303 	lsr.w	r3, r2, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f47f ae91 	bne.w	80063ec <HAL_GPIO_Init+0x10>
  }
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40010000 	.word	0x40010000
 80066e0:	48000400 	.word	0x48000400
 80066e4:	48000800 	.word	0x48000800
 80066e8:	48000c00 	.word	0x48000c00
 80066ec:	48001000 	.word	0x48001000
 80066f0:	48001400 	.word	0x48001400
 80066f4:	48001800 	.word	0x48001800
 80066f8:	48001c00 	.word	0x48001c00
 80066fc:	40010400 	.word	0x40010400

08006700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	807b      	strh	r3, [r7, #2]
 800670c:	4613      	mov	r3, r2
 800670e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006710:	787b      	ldrb	r3, [r7, #1]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006716:	887a      	ldrh	r2, [r7, #2]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800671c:	e002      	b.n	8006724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800671e:	887a      	ldrh	r2, [r7, #2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006742:	887a      	ldrh	r2, [r7, #2]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4013      	ands	r3, r2
 8006748:	041a      	lsls	r2, r3, #16
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	43d9      	mvns	r1, r3
 800674e:	887b      	ldrh	r3, [r7, #2]
 8006750:	400b      	ands	r3, r1
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	619a      	str	r2, [r3, #24]
}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800677a:	4a05      	ldr	r2, [pc, #20]	; (8006790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f806 	bl	8006794 <HAL_GPIO_EXTI_Callback>
  }
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40010400 	.word	0x40010400

08006794 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e081      	b.n	80068c0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fe fe55 	bl	8005480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2224      	movs	r2, #36	; 0x24
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0201 	bic.w	r2, r2, #1
 80067ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800680a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d107      	bne.n	8006824 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006820:	609a      	str	r2, [r3, #8]
 8006822:	e006      	b.n	8006832 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006830:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d104      	bne.n	8006844 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006842:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006856:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006866:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69d9      	ldr	r1, [r3, #28]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1a      	ldr	r2, [r3, #32]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	461a      	mov	r2, r3
 80068d4:	460b      	mov	r3, r1
 80068d6:	817b      	strh	r3, [r7, #10]
 80068d8:	4613      	mov	r3, r2
 80068da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	f040 80da 	bne.w	8006a9e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_I2C_Master_Transmit+0x30>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e0d3      	b.n	8006aa0 <HAL_I2C_Master_Transmit+0x1d8>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006900:	f7ff fb9e 	bl	8006040 <HAL_GetTick>
 8006904:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	2319      	movs	r3, #25
 800690c:	2201      	movs	r2, #1
 800690e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fbe0 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e0be      	b.n	8006aa0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2221      	movs	r2, #33	; 0x21
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2210      	movs	r2, #16
 800692e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	893a      	ldrh	r2, [r7, #8]
 8006942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	2bff      	cmp	r3, #255	; 0xff
 8006952:	d90e      	bls.n	8006972 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	; 0xff
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695e:	b2da      	uxtb	r2, r3
 8006960:	8979      	ldrh	r1, [r7, #10]
 8006962:	4b51      	ldr	r3, [pc, #324]	; (8006aa8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fd5c 	bl	8007428 <I2C_TransferConfig>
 8006970:	e06c      	b.n	8006a4c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006980:	b2da      	uxtb	r2, r3
 8006982:	8979      	ldrh	r1, [r7, #10]
 8006984:	4b48      	ldr	r3, [pc, #288]	; (8006aa8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fd4b 	bl	8007428 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006992:	e05b      	b.n	8006a4c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	6a39      	ldr	r1, [r7, #32]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fbdd 	bl	8007158 <I2C_WaitOnTXISFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e07b      	b.n	8006aa0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	781a      	ldrb	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d034      	beq.n	8006a4c <HAL_I2C_Master_Transmit+0x184>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d130      	bne.n	8006a4c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fb6f 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e04d      	b.n	8006aa0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2bff      	cmp	r3, #255	; 0xff
 8006a0c:	d90e      	bls.n	8006a2c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	8979      	ldrh	r1, [r7, #10]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fcff 	bl	8007428 <I2C_TransferConfig>
 8006a2a:	e00f      	b.n	8006a4c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	8979      	ldrh	r1, [r7, #10]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fcee 	bl	8007428 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d19e      	bne.n	8006994 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	6a39      	ldr	r1, [r7, #32]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fbbc 	bl	80071d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e01a      	b.n	8006aa0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6859      	ldr	r1, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <HAL_I2C_Master_Transmit+0x1e4>)
 8006a7e:	400b      	ands	r3, r1
 8006a80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
  }
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	80002000 	.word	0x80002000
 8006aac:	fe00e800 	.word	0xfe00e800

08006ab0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	817b      	strh	r3, [r7, #10]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	813b      	strh	r3, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	f040 80f9 	bne.w	8006cca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_I2C_Mem_Write+0x34>
 8006ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0ed      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_I2C_Mem_Write+0x4e>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e0e6      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b06:	f7ff fa9b 	bl	8006040 <HAL_GetTick>
 8006b0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2319      	movs	r3, #25
 8006b12:	2201      	movs	r2, #1
 8006b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 fadd 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0d1      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2221      	movs	r2, #33	; 0x21
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2240      	movs	r2, #64	; 0x40
 8006b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a3a      	ldr	r2, [r7, #32]
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b50:	88f8      	ldrh	r0, [r7, #6]
 8006b52:	893a      	ldrh	r2, [r7, #8]
 8006b54:	8979      	ldrh	r1, [r7, #10]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	4603      	mov	r3, r0
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f9ed 	bl	8006f40 <I2C_RequestMemoryWrite>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0a9      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2bff      	cmp	r3, #255	; 0xff
 8006b80:	d90e      	bls.n	8006ba0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	8979      	ldrh	r1, [r7, #10]
 8006b90:	2300      	movs	r3, #0
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fc45 	bl	8007428 <I2C_TransferConfig>
 8006b9e:	e00f      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	8979      	ldrh	r1, [r7, #10]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fc34 	bl	8007428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fac7 	bl	8007158 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e07b      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d034      	beq.n	8006c78 <HAL_I2C_Mem_Write+0x1c8>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d130      	bne.n	8006c78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2180      	movs	r1, #128	; 0x80
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fa59 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e04d      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2bff      	cmp	r3, #255	; 0xff
 8006c38:	d90e      	bls.n	8006c58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	22ff      	movs	r2, #255	; 0xff
 8006c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	8979      	ldrh	r1, [r7, #10]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fbe9 	bl	8007428 <I2C_TransferConfig>
 8006c56:	e00f      	b.n	8006c78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	8979      	ldrh	r1, [r7, #10]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fbd8 	bl	8007428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d19e      	bne.n	8006bc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 faa6 	bl	80071d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e01a      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6859      	ldr	r1, [r3, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <HAL_I2C_Mem_Write+0x224>)
 8006caa:	400b      	ands	r3, r1
 8006cac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e000      	b.n	8006ccc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cca:	2302      	movs	r3, #2
  }
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	fe00e800 	.word	0xfe00e800

08006cd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	817b      	strh	r3, [r7, #10]
 8006cea:	460b      	mov	r3, r1
 8006cec:	813b      	strh	r3, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	f040 80fd 	bne.w	8006efa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_I2C_Mem_Read+0x34>
 8006d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0f1      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_I2C_Mem_Read+0x4e>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e0ea      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d2e:	f7ff f987 	bl	8006040 <HAL_GetTick>
 8006d32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2319      	movs	r3, #25
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f9c9 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0d5      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2222      	movs	r2, #34	; 0x22
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2240      	movs	r2, #64	; 0x40
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a3a      	ldr	r2, [r7, #32]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d78:	88f8      	ldrh	r0, [r7, #6]
 8006d7a:	893a      	ldrh	r2, [r7, #8]
 8006d7c:	8979      	ldrh	r1, [r7, #10]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4603      	mov	r3, r0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f92d 	bl	8006fe8 <I2C_RequestMemoryRead>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0ad      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2bff      	cmp	r3, #255	; 0xff
 8006da8:	d90e      	bls.n	8006dc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	22ff      	movs	r2, #255	; 0xff
 8006dae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	8979      	ldrh	r1, [r7, #10]
 8006db8:	4b52      	ldr	r3, [pc, #328]	; (8006f04 <HAL_I2C_Mem_Read+0x22c>)
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 fb31 	bl	8007428 <I2C_TransferConfig>
 8006dc6:	e00f      	b.n	8006de8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	8979      	ldrh	r1, [r7, #10]
 8006dda:	4b4a      	ldr	r3, [pc, #296]	; (8006f04 <HAL_I2C_Mem_Read+0x22c>)
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fb20 	bl	8007428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	2200      	movs	r2, #0
 8006df0:	2104      	movs	r1, #4
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 f970 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e07c      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d034      	beq.n	8006ea8 <HAL_I2C_Mem_Read+0x1d0>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d130      	bne.n	8006ea8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f941 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e04d      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2bff      	cmp	r3, #255	; 0xff
 8006e68:	d90e      	bls.n	8006e88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	22ff      	movs	r2, #255	; 0xff
 8006e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	8979      	ldrh	r1, [r7, #10]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fad1 	bl	8007428 <I2C_TransferConfig>
 8006e86:	e00f      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	8979      	ldrh	r1, [r7, #10]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fac0 	bl	8007428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d19a      	bne.n	8006de8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f98e 	bl	80071d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e01a      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_I2C_Mem_Read+0x230>)
 8006eda:	400b      	ands	r3, r1
 8006edc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e000      	b.n	8006efc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006efa:	2302      	movs	r3, #2
  }
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	80002400 	.word	0x80002400
 8006f08:	fe00e800 	.word	0xfe00e800

08006f0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	817b      	strh	r3, [r7, #10]
 8006f52:	460b      	mov	r3, r1
 8006f54:	813b      	strh	r3, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	8979      	ldrh	r1, [r7, #10]
 8006f60:	4b20      	ldr	r3, [pc, #128]	; (8006fe4 <I2C_RequestMemoryWrite+0xa4>)
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fa5d 	bl	8007428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	69b9      	ldr	r1, [r7, #24]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f8f0 	bl	8007158 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e02c      	b.n	8006fdc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d105      	bne.n	8006f94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f88:	893b      	ldrh	r3, [r7, #8]
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	629a      	str	r2, [r3, #40]	; 0x28
 8006f92:	e015      	b.n	8006fc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f94:	893b      	ldrh	r3, [r7, #8]
 8006f96:	0a1b      	lsrs	r3, r3, #8
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f8d6 	bl	8007158 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e012      	b.n	8006fdc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb6:	893b      	ldrh	r3, [r7, #8]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2180      	movs	r1, #128	; 0x80
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f884 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	80002000 	.word	0x80002000

08006fe8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	817b      	strh	r3, [r7, #10]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	813b      	strh	r3, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	8979      	ldrh	r1, [r7, #10]
 8007008:	4b20      	ldr	r3, [pc, #128]	; (800708c <I2C_RequestMemoryRead+0xa4>)
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fa0a 	bl	8007428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	69b9      	ldr	r1, [r7, #24]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f89d 	bl	8007158 <I2C_WaitOnTXISFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e02c      	b.n	8007082 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d105      	bne.n	800703a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800702e:	893b      	ldrh	r3, [r7, #8]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	629a      	str	r2, [r3, #40]	; 0x28
 8007038:	e015      	b.n	8007066 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800703a:	893b      	ldrh	r3, [r7, #8]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	b29b      	uxth	r3, r3
 8007040:	b2da      	uxtb	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	69b9      	ldr	r1, [r7, #24]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f883 	bl	8007158 <I2C_WaitOnTXISFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e012      	b.n	8007082 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800705c:	893b      	ldrh	r3, [r7, #8]
 800705e:	b2da      	uxtb	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2200      	movs	r2, #0
 800706e:	2140      	movs	r1, #64	; 0x40
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f831 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	80002000 	.word	0x80002000

08007090 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d103      	bne.n	80070ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2200      	movs	r2, #0
 80070ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d007      	beq.n	80070cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	619a      	str	r2, [r3, #24]
  }
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4613      	mov	r3, r2
 80070e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e8:	e022      	b.n	8007130 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d01e      	beq.n	8007130 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f2:	f7fe ffa5 	bl	8006040 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d113      	bne.n	8007130 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	f043 0220 	orr.w	r2, r3, #32
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e00f      	b.n	8007150 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	429a      	cmp	r2, r3
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	429a      	cmp	r2, r3
 800714c:	d0cd      	beq.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007164:	e02c      	b.n	80071c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f870 	bl	8007250 <I2C_IsErrorOccurred>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e02a      	b.n	80071d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d01e      	beq.n	80071c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fe ff5d 	bl	8006040 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d113      	bne.n	80071c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	f043 0220 	orr.w	r2, r3, #32
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e007      	b.n	80071d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d1cb      	bne.n	8007166 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071e4:	e028      	b.n	8007238 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f830 	bl	8007250 <I2C_IsErrorOccurred>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e026      	b.n	8007248 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7fe ff21 	bl	8006040 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d113      	bne.n	8007238 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	f043 0220 	orr.w	r2, r3, #32
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e007      	b.n	8007248 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b20      	cmp	r3, #32
 8007244:	d1cf      	bne.n	80071e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b00      	cmp	r3, #0
 800727a:	d075      	beq.n	8007368 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2210      	movs	r2, #16
 8007282:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007284:	e056      	b.n	8007334 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d052      	beq.n	8007334 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800728e:	f7fe fed7 	bl	8006040 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	d302      	bcc.n	80072a4 <I2C_IsErrorOccurred+0x54>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d147      	bne.n	8007334 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c6:	d12e      	bne.n	8007326 <I2C_IsErrorOccurred+0xd6>
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ce:	d02a      	beq.n	8007326 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80072d0:	7cfb      	ldrb	r3, [r7, #19]
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d027      	beq.n	8007326 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072e6:	f7fe feab 	bl	8006040 <HAL_GetTick>
 80072ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ec:	e01b      	b.n	8007326 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072ee:	f7fe fea7 	bl	8006040 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b19      	cmp	r3, #25
 80072fa:	d914      	bls.n	8007326 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b20      	cmp	r3, #32
 8007332:	d1dc      	bne.n	80072ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b20      	cmp	r3, #32
 8007340:	d003      	beq.n	800734a <I2C_IsErrorOccurred+0xfa>
 8007342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007346:	2b00      	cmp	r3, #0
 8007348:	d09d      	beq.n	8007286 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800734a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800734e:	2b00      	cmp	r3, #0
 8007350:	d103      	bne.n	800735a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2220      	movs	r2, #32
 8007358:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	f043 0304 	orr.w	r3, r3, #4
 8007360:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800738a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	f043 0308 	orr.w	r3, r3, #8
 80073a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	f043 0302 	orr.w	r3, r3, #2
 80073c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80073d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01c      	beq.n	8007418 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff fe56 	bl	8007090 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6859      	ldr	r1, [r3, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <I2C_IsErrorOccurred+0x1d4>)
 80073f0:	400b      	ands	r3, r1
 80073f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800741c:	4618      	mov	r0, r3
 800741e:	3728      	adds	r7, #40	; 0x28
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	fe00e800 	.word	0xfe00e800

08007428 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	607b      	str	r3, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	817b      	strh	r3, [r7, #10]
 8007436:	4613      	mov	r3, r2
 8007438:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800743a:	897b      	ldrh	r3, [r7, #10]
 800743c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007440:	7a7b      	ldrb	r3, [r7, #9]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007448:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	4313      	orrs	r3, r2
 8007452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007456:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	0d5b      	lsrs	r3, r3, #21
 8007462:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <I2C_TransferConfig+0x60>)
 8007468:	430b      	orrs	r3, r1
 800746a:	43db      	mvns	r3, r3
 800746c:	ea02 0103 	and.w	r1, r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	03ff63ff 	.word	0x03ff63ff

0800748c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d138      	bne.n	8007514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e032      	b.n	8007516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2224      	movs	r2, #36	; 0x24
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6819      	ldr	r1, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e000      	b.n	8007516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007514:	2302      	movs	r3, #2
  }
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b20      	cmp	r3, #32
 8007536:	d139      	bne.n	80075ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007542:	2302      	movs	r3, #2
 8007544:	e033      	b.n	80075ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2224      	movs	r2, #36	; 0x24
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0201 	orr.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	e000      	b.n	80075ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075ac:	2302      	movs	r3, #2
  }
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075cc:	d102      	bne.n	80075d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80075ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d2:	e00b      	b.n	80075ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80075d4:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80075d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e2:	d102      	bne.n	80075ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80075e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e8:	e000      	b.n	80075ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80075ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40007000 	.word	0x40007000

080075fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d141      	bne.n	800768e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800760a:	4b4b      	ldr	r3, [pc, #300]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007616:	d131      	bne.n	800767c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007618:	4b47      	ldr	r3, [pc, #284]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800761a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800761e:	4a46      	ldr	r2, [pc, #280]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007624:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007628:	4b43      	ldr	r3, [pc, #268]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007630:	4a41      	ldr	r2, [pc, #260]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007636:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007638:	4b40      	ldr	r3, [pc, #256]	; (800773c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2232      	movs	r2, #50	; 0x32
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	4a3f      	ldr	r2, [pc, #252]	; (8007740 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	0c9b      	lsrs	r3, r3, #18
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800764e:	e002      	b.n	8007656 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3b01      	subs	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007656:	4b38      	ldr	r3, [pc, #224]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007662:	d102      	bne.n	800766a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f2      	bne.n	8007650 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800766a:	4b33      	ldr	r3, [pc, #204]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007676:	d158      	bne.n	800772a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e057      	b.n	800772c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800767c:	4b2e      	ldr	r3, [pc, #184]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007682:	4a2d      	ldr	r2, [pc, #180]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007688:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800768c:	e04d      	b.n	800772a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d141      	bne.n	800771a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007696:	4b28      	ldr	r3, [pc, #160]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a2:	d131      	bne.n	8007708 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076a4:	4b24      	ldr	r3, [pc, #144]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076aa:	4a23      	ldr	r2, [pc, #140]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80076bc:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80076c4:	4b1d      	ldr	r3, [pc, #116]	; (800773c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2232      	movs	r2, #50	; 0x32
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	0c9b      	lsrs	r3, r3, #18
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076da:	e002      	b.n	80076e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3b01      	subs	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ee:	d102      	bne.n	80076f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f2      	bne.n	80076dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007702:	d112      	bne.n	800772a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e011      	b.n	800772c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007708:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800770a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800770e:	4a0a      	ldr	r2, [pc, #40]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007714:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007718:	e007      	b.n	800772a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007722:	4a05      	ldr	r2, [pc, #20]	; (8007738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007728:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40007000 	.word	0x40007000
 800773c:	20000010 	.word	0x20000010
 8007740:	431bde83 	.word	0x431bde83

08007744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f000 bc08 	b.w	8007f68 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007758:	4b96      	ldr	r3, [pc, #600]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 030c 	and.w	r3, r3, #12
 8007760:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007762:	4b94      	ldr	r3, [pc, #592]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80e4 	beq.w	8007942 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <HAL_RCC_OscConfig+0x4c>
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b0c      	cmp	r3, #12
 8007784:	f040 808b 	bne.w	800789e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2b01      	cmp	r3, #1
 800778c:	f040 8087 	bne.w	800789e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007790:	4b88      	ldr	r3, [pc, #544]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_RCC_OscConfig+0x64>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e3df      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	4b81      	ldr	r3, [pc, #516]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <HAL_RCC_OscConfig+0x7e>
 80077b8:	4b7e      	ldr	r3, [pc, #504]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077c0:	e005      	b.n	80077ce <HAL_RCC_OscConfig+0x8a>
 80077c2:	4b7c      	ldr	r3, [pc, #496]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80077c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d223      	bcs.n	800781a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fdfe 	bl	80083d8 <RCC_SetFlashLatencyFromMSIRange>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e3c0      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077e6:	4b73      	ldr	r3, [pc, #460]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a72      	ldr	r2, [pc, #456]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80077ec:	f043 0308 	orr.w	r3, r3, #8
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b70      	ldr	r3, [pc, #448]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	496d      	ldr	r1, [pc, #436]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007800:	4313      	orrs	r3, r2
 8007802:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007804:	4b6b      	ldr	r3, [pc, #428]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	4968      	ldr	r1, [pc, #416]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007814:	4313      	orrs	r3, r2
 8007816:	604b      	str	r3, [r1, #4]
 8007818:	e025      	b.n	8007866 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800781a:	4b66      	ldr	r3, [pc, #408]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a65      	ldr	r2, [pc, #404]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007820:	f043 0308 	orr.w	r3, r3, #8
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	4b63      	ldr	r3, [pc, #396]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	4960      	ldr	r1, [pc, #384]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007834:	4313      	orrs	r3, r2
 8007836:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007838:	4b5e      	ldr	r3, [pc, #376]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	495b      	ldr	r1, [pc, #364]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007848:	4313      	orrs	r3, r2
 800784a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fdbe 	bl	80083d8 <RCC_SetFlashLatencyFromMSIRange>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e380      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007866:	f000 fcc1 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 800786a:	4602      	mov	r2, r0
 800786c:	4b51      	ldr	r3, [pc, #324]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	4950      	ldr	r1, [pc, #320]	; (80079b8 <HAL_RCC_OscConfig+0x274>)
 8007878:	5ccb      	ldrb	r3, [r1, r3]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	fa22 f303 	lsr.w	r3, r2, r3
 8007882:	4a4e      	ldr	r2, [pc, #312]	; (80079bc <HAL_RCC_OscConfig+0x278>)
 8007884:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007886:	4b4e      	ldr	r3, [pc, #312]	; (80079c0 <HAL_RCC_OscConfig+0x27c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7fd ffe4 	bl	8005858 <HAL_InitTick>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d052      	beq.n	8007940 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	e364      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d032      	beq.n	800790c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80078a6:	4b43      	ldr	r3, [pc, #268]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a42      	ldr	r2, [pc, #264]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078b2:	f7fe fbc5 	bl	8006040 <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078b8:	e008      	b.n	80078cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078ba:	f7fe fbc1 	bl	8006040 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e34d      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0f0      	beq.n	80078ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078d8:	4b36      	ldr	r3, [pc, #216]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078de:	f043 0308 	orr.w	r3, r3, #8
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	4b33      	ldr	r3, [pc, #204]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	4930      	ldr	r1, [pc, #192]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078f6:	4b2f      	ldr	r3, [pc, #188]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	492b      	ldr	r1, [pc, #172]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007906:	4313      	orrs	r3, r2
 8007908:	604b      	str	r3, [r1, #4]
 800790a:	e01a      	b.n	8007942 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800790c:	4b29      	ldr	r3, [pc, #164]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a28      	ldr	r2, [pc, #160]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007912:	f023 0301 	bic.w	r3, r3, #1
 8007916:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007918:	f7fe fb92 	bl	8006040 <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007920:	f7fe fb8e 	bl	8006040 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e31a      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007932:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f0      	bne.n	8007920 <HAL_RCC_OscConfig+0x1dc>
 800793e:	e000      	b.n	8007942 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007940:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d073      	beq.n	8007a36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b08      	cmp	r3, #8
 8007952:	d005      	beq.n	8007960 <HAL_RCC_OscConfig+0x21c>
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b0c      	cmp	r3, #12
 8007958:	d10e      	bne.n	8007978 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b03      	cmp	r3, #3
 800795e:	d10b      	bne.n	8007978 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007960:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d063      	beq.n	8007a34 <HAL_RCC_OscConfig+0x2f0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d15f      	bne.n	8007a34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e2f7      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007980:	d106      	bne.n	8007990 <HAL_RCC_OscConfig+0x24c>
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a0b      	ldr	r2, [pc, #44]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 8007988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e025      	b.n	80079dc <HAL_RCC_OscConfig+0x298>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007998:	d114      	bne.n	80079c4 <HAL_RCC_OscConfig+0x280>
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a05      	ldr	r2, [pc, #20]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80079a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a02      	ldr	r2, [pc, #8]	; (80079b4 <HAL_RCC_OscConfig+0x270>)
 80079ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e013      	b.n	80079dc <HAL_RCC_OscConfig+0x298>
 80079b4:	40021000 	.word	0x40021000
 80079b8:	080136b8 	.word	0x080136b8
 80079bc:	20000010 	.word	0x20000010
 80079c0:	20000014 	.word	0x20000014
 80079c4:	4ba0      	ldr	r3, [pc, #640]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a9f      	ldr	r2, [pc, #636]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 80079ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	4b9d      	ldr	r3, [pc, #628]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a9c      	ldr	r2, [pc, #624]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 80079d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d013      	beq.n	8007a0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e4:	f7fe fb2c 	bl	8006040 <HAL_GetTick>
 80079e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079ec:	f7fe fb28 	bl	8006040 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b64      	cmp	r3, #100	; 0x64
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e2b4      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079fe:	4b92      	ldr	r3, [pc, #584]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f0      	beq.n	80079ec <HAL_RCC_OscConfig+0x2a8>
 8007a0a:	e014      	b.n	8007a36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fe fb18 	bl	8006040 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a14:	f7fe fb14 	bl	8006040 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b64      	cmp	r3, #100	; 0x64
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e2a0      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a26:	4b88      	ldr	r3, [pc, #544]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f0      	bne.n	8007a14 <HAL_RCC_OscConfig+0x2d0>
 8007a32:	e000      	b.n	8007a36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d060      	beq.n	8007b04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d005      	beq.n	8007a54 <HAL_RCC_OscConfig+0x310>
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	2b0c      	cmp	r3, #12
 8007a4c:	d119      	bne.n	8007a82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d116      	bne.n	8007a82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a54:	4b7c      	ldr	r3, [pc, #496]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_OscConfig+0x328>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e27d      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6c:	4b76      	ldr	r3, [pc, #472]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	061b      	lsls	r3, r3, #24
 8007a7a:	4973      	ldr	r1, [pc, #460]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a80:	e040      	b.n	8007b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d023      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a8a:	4b6f      	ldr	r3, [pc, #444]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a6e      	ldr	r2, [pc, #440]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a96:	f7fe fad3 	bl	8006040 <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a9e:	f7fe facf 	bl	8006040 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e25b      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ab0:	4b65      	ldr	r3, [pc, #404]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0f0      	beq.n	8007a9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abc:	4b62      	ldr	r3, [pc, #392]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	061b      	lsls	r3, r3, #24
 8007aca:	495f      	ldr	r1, [pc, #380]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	604b      	str	r3, [r1, #4]
 8007ad0:	e018      	b.n	8007b04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ad2:	4b5d      	ldr	r3, [pc, #372]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a5c      	ldr	r2, [pc, #368]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ade:	f7fe faaf 	bl	8006040 <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae6:	f7fe faab 	bl	8006040 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e237      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007af8:	4b53      	ldr	r3, [pc, #332]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1f0      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d03c      	beq.n	8007b8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01c      	beq.n	8007b52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b18:	4b4b      	ldr	r3, [pc, #300]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b1e:	4a4a      	ldr	r2, [pc, #296]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007b20:	f043 0301 	orr.w	r3, r3, #1
 8007b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b28:	f7fe fa8a 	bl	8006040 <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b30:	f7fe fa86 	bl	8006040 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e212      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b42:	4b41      	ldr	r3, [pc, #260]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0ef      	beq.n	8007b30 <HAL_RCC_OscConfig+0x3ec>
 8007b50:	e01b      	b.n	8007b8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b52:	4b3d      	ldr	r3, [pc, #244]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b58:	4a3b      	ldr	r2, [pc, #236]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007b5a:	f023 0301 	bic.w	r3, r3, #1
 8007b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b62:	f7fe fa6d 	bl	8006040 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b6a:	f7fe fa69 	bl	8006040 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e1f5      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b7c:	4b32      	ldr	r3, [pc, #200]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1ef      	bne.n	8007b6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 80a6 	beq.w	8007ce4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007b9c:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10d      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8007bb4:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bc4:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <HAL_RCC_OscConfig+0x508>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d118      	bne.n	8007c02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <HAL_RCC_OscConfig+0x508>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1d      	ldr	r2, [pc, #116]	; (8007c4c <HAL_RCC_OscConfig+0x508>)
 8007bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bdc:	f7fe fa30 	bl	8006040 <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007be4:	f7fe fa2c 	bl	8006040 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e1b8      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bf6:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <HAL_RCC_OscConfig+0x508>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0f0      	beq.n	8007be4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d108      	bne.n	8007c1c <HAL_RCC_OscConfig+0x4d8>
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c10:	4a0d      	ldr	r2, [pc, #52]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c1a:	e029      	b.n	8007c70 <HAL_RCC_OscConfig+0x52c>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b05      	cmp	r3, #5
 8007c22:	d115      	bne.n	8007c50 <HAL_RCC_OscConfig+0x50c>
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2a:	4a07      	ldr	r2, [pc, #28]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007c2c:	f043 0304 	orr.w	r3, r3, #4
 8007c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	4a03      	ldr	r2, [pc, #12]	; (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c44:	e014      	b.n	8007c70 <HAL_RCC_OscConfig+0x52c>
 8007c46:	bf00      	nop
 8007c48:	40021000 	.word	0x40021000
 8007c4c:	40007000 	.word	0x40007000
 8007c50:	4b9d      	ldr	r3, [pc, #628]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	4a9c      	ldr	r2, [pc, #624]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007c58:	f023 0301 	bic.w	r3, r3, #1
 8007c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c60:	4b99      	ldr	r3, [pc, #612]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c66:	4a98      	ldr	r2, [pc, #608]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007c68:	f023 0304 	bic.w	r3, r3, #4
 8007c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d016      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c78:	f7fe f9e2 	bl	8006040 <HAL_GetTick>
 8007c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c7e:	e00a      	b.n	8007c96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c80:	f7fe f9de 	bl	8006040 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e168      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c96:	4b8c      	ldr	r3, [pc, #560]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0ed      	beq.n	8007c80 <HAL_RCC_OscConfig+0x53c>
 8007ca4:	e015      	b.n	8007cd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca6:	f7fe f9cb 	bl	8006040 <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cac:	e00a      	b.n	8007cc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cae:	f7fe f9c7 	bl	8006040 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e151      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cc4:	4b80      	ldr	r3, [pc, #512]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1ed      	bne.n	8007cae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cd2:	7ffb      	ldrb	r3, [r7, #31]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d105      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cd8:	4b7b      	ldr	r3, [pc, #492]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cdc:	4a7a      	ldr	r2, [pc, #488]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ce2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d03c      	beq.n	8007d6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01c      	beq.n	8007d32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cf8:	4b73      	ldr	r3, [pc, #460]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cfe:	4a72      	ldr	r2, [pc, #456]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d08:	f7fe f99a 	bl	8006040 <HAL_GetTick>
 8007d0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d0e:	e008      	b.n	8007d22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d10:	f7fe f996 	bl	8006040 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e122      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d22:	4b69      	ldr	r3, [pc, #420]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0ef      	beq.n	8007d10 <HAL_RCC_OscConfig+0x5cc>
 8007d30:	e01b      	b.n	8007d6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d32:	4b65      	ldr	r3, [pc, #404]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d38:	4a63      	ldr	r2, [pc, #396]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d42:	f7fe f97d 	bl	8006040 <HAL_GetTick>
 8007d46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d48:	e008      	b.n	8007d5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d4a:	f7fe f979 	bl	8006040 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e105      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d5c:	4b5a      	ldr	r3, [pc, #360]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1ef      	bne.n	8007d4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 80f9 	beq.w	8007f66 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	f040 80cf 	bne.w	8007f1c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007d7e:	4b52      	ldr	r3, [pc, #328]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f003 0203 	and.w	r2, r3, #3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d12c      	bne.n	8007dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d123      	bne.n	8007dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d11b      	bne.n	8007dec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d113      	bne.n	8007dec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d109      	bne.n	8007dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	3b01      	subs	r3, #1
 8007de6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d071      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b0c      	cmp	r3, #12
 8007df0:	d068      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007df2:	4b35      	ldr	r3, [pc, #212]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007dfe:	4b32      	ldr	r3, [pc, #200]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e0ac      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007e0e:	4b2e      	ldr	r3, [pc, #184]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a2d      	ldr	r2, [pc, #180]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e1a:	f7fe f911 	bl	8006040 <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e20:	e008      	b.n	8007e34 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e22:	f7fe f90d 	bl	8006040 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e099      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e34:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1f0      	bne.n	8007e22 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e40:	4b21      	ldr	r3, [pc, #132]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <HAL_RCC_OscConfig+0x788>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e50:	3a01      	subs	r2, #1
 8007e52:	0112      	lsls	r2, r2, #4
 8007e54:	4311      	orrs	r1, r2
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e5a:	0212      	lsls	r2, r2, #8
 8007e5c:	4311      	orrs	r1, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e62:	0852      	lsrs	r2, r2, #1
 8007e64:	3a01      	subs	r2, #1
 8007e66:	0552      	lsls	r2, r2, #21
 8007e68:	4311      	orrs	r1, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e6e:	0852      	lsrs	r2, r2, #1
 8007e70:	3a01      	subs	r2, #1
 8007e72:	0652      	lsls	r2, r2, #25
 8007e74:	4311      	orrs	r1, r2
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e7a:	06d2      	lsls	r2, r2, #27
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	4912      	ldr	r1, [pc, #72]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007e84:	4b10      	ldr	r3, [pc, #64]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a0f      	ldr	r2, [pc, #60]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e90:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	4a0c      	ldr	r2, [pc, #48]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e9c:	f7fe f8d0 	bl	8006040 <HAL_GetTick>
 8007ea0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ea2:	e008      	b.n	8007eb6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ea4:	f7fe f8cc 	bl	8006040 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e058      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eb6:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <HAL_RCC_OscConfig+0x784>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ec2:	e050      	b.n	8007f66 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e04f      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
 8007ec8:	40021000 	.word	0x40021000
 8007ecc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ed0:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d144      	bne.n	8007f66 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007edc:	4b24      	ldr	r3, [pc, #144]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a23      	ldr	r2, [pc, #140]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ee6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ee8:	4b21      	ldr	r3, [pc, #132]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4a20      	ldr	r2, [pc, #128]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ef2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ef4:	f7fe f8a4 	bl	8006040 <HAL_GetTick>
 8007ef8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007efa:	e008      	b.n	8007f0e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007efc:	f7fe f8a0 	bl	8006040 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e02c      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f0e:	4b18      	ldr	r3, [pc, #96]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f0      	beq.n	8007efc <HAL_RCC_OscConfig+0x7b8>
 8007f1a:	e024      	b.n	8007f66 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b0c      	cmp	r3, #12
 8007f20:	d01f      	beq.n	8007f62 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a12      	ldr	r2, [pc, #72]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2e:	f7fe f887 	bl	8006040 <HAL_GetTick>
 8007f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f34:	e008      	b.n	8007f48 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f36:	f7fe f883 	bl	8006040 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d901      	bls.n	8007f48 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e00f      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f48:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1f0      	bne.n	8007f36 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f54:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	4905      	ldr	r1, [pc, #20]	; (8007f70 <HAL_RCC_OscConfig+0x82c>)
 8007f5a:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <HAL_RCC_OscConfig+0x830>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60cb      	str	r3, [r1, #12]
 8007f60:	e001      	b.n	8007f66 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	40021000 	.word	0x40021000
 8007f74:	feeefffc 	.word	0xfeeefffc

08007f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e11d      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f90:	4b90      	ldr	r3, [pc, #576]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d910      	bls.n	8007fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f9e:	4b8d      	ldr	r3, [pc, #564]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f023 020f 	bic.w	r2, r3, #15
 8007fa6:	498b      	ldr	r1, [pc, #556]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fae:	4b89      	ldr	r3, [pc, #548]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d001      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e105      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d010      	beq.n	8007fee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	4b81      	ldr	r3, [pc, #516]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d908      	bls.n	8007fee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fdc:	4b7e      	ldr	r3, [pc, #504]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	497b      	ldr	r1, [pc, #492]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d079      	beq.n	80080ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d11e      	bne.n	8008040 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008002:	4b75      	ldr	r3, [pc, #468]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e0dc      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008012:	f000 fa3b 	bl	800848c <RCC_GetSysClockFreqFromPLLSource>
 8008016:	4603      	mov	r3, r0
 8008018:	4a70      	ldr	r2, [pc, #448]	; (80081dc <HAL_RCC_ClockConfig+0x264>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d946      	bls.n	80080ac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800801e:	4b6e      	ldr	r3, [pc, #440]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d140      	bne.n	80080ac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800802a:	4b6b      	ldr	r3, [pc, #428]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008032:	4a69      	ldr	r2, [pc, #420]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008038:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800803a:	2380      	movs	r3, #128	; 0x80
 800803c:	617b      	str	r3, [r7, #20]
 800803e:	e035      	b.n	80080ac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d107      	bne.n	8008058 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008048:	4b63      	ldr	r3, [pc, #396]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d115      	bne.n	8008080 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e0b9      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d107      	bne.n	8008070 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008060:	4b5d      	ldr	r3, [pc, #372]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d109      	bne.n	8008080 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0ad      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008070:	4b59      	ldr	r3, [pc, #356]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e0a5      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008080:	f000 f8b4 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 8008084:	4603      	mov	r3, r0
 8008086:	4a55      	ldr	r2, [pc, #340]	; (80081dc <HAL_RCC_ClockConfig+0x264>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d90f      	bls.n	80080ac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800808c:	4b52      	ldr	r3, [pc, #328]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d109      	bne.n	80080ac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008098:	4b4f      	ldr	r3, [pc, #316]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080a0:	4a4d      	ldr	r2, [pc, #308]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 80080a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080ac:	4b4a      	ldr	r3, [pc, #296]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f023 0203 	bic.w	r2, r3, #3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4947      	ldr	r1, [pc, #284]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080be:	f7fd ffbf 	bl	8006040 <HAL_GetTick>
 80080c2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c4:	e00a      	b.n	80080dc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c6:	f7fd ffbb 	bl	8006040 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d901      	bls.n	80080dc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e077      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080dc:	4b3e      	ldr	r3, [pc, #248]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 020c 	and.w	r2, r3, #12
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d1eb      	bne.n	80080c6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b80      	cmp	r3, #128	; 0x80
 80080f2:	d105      	bne.n	8008100 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80080f4:	4b38      	ldr	r3, [pc, #224]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	4a37      	ldr	r2, [pc, #220]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 80080fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080fe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d010      	beq.n	800812e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	4b31      	ldr	r3, [pc, #196]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008118:	429a      	cmp	r2, r3
 800811a:	d208      	bcs.n	800812e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800811c:	4b2e      	ldr	r3, [pc, #184]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	492b      	ldr	r1, [pc, #172]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800812a:	4313      	orrs	r3, r2
 800812c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800812e:	4b29      	ldr	r3, [pc, #164]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d210      	bcs.n	800815e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f023 020f 	bic.w	r2, r3, #15
 8008144:	4923      	ldr	r1, [pc, #140]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	4313      	orrs	r3, r2
 800814a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800814c:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <HAL_RCC_ClockConfig+0x25c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d001      	beq.n	800815e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e036      	b.n	80081cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	4918      	ldr	r1, [pc, #96]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008178:	4313      	orrs	r3, r2
 800817a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0308 	and.w	r3, r3, #8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008188:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4910      	ldr	r1, [pc, #64]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 8008198:	4313      	orrs	r3, r2
 800819a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800819c:	f000 f826 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 80081a0:	4602      	mov	r2, r0
 80081a2:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <HAL_RCC_ClockConfig+0x260>)
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <HAL_RCC_ClockConfig+0x268>)
 80081ae:	5ccb      	ldrb	r3, [r1, r3]
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	fa22 f303 	lsr.w	r3, r2, r3
 80081b8:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <HAL_RCC_ClockConfig+0x26c>)
 80081ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_RCC_ClockConfig+0x270>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fd fb49 	bl	8005858 <HAL_InitTick>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	40022000 	.word	0x40022000
 80081d8:	40021000 	.word	0x40021000
 80081dc:	04c4b400 	.word	0x04c4b400
 80081e0:	080136b8 	.word	0x080136b8
 80081e4:	20000010 	.word	0x20000010
 80081e8:	20000014 	.word	0x20000014

080081ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b089      	sub	sp, #36	; 0x24
 80081f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	2300      	movs	r3, #0
 80081f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081fa:	4b3e      	ldr	r3, [pc, #248]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 030c 	and.w	r3, r3, #12
 8008202:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008204:	4b3b      	ldr	r3, [pc, #236]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <HAL_RCC_GetSysClockFreq+0x34>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2b0c      	cmp	r3, #12
 8008218:	d121      	bne.n	800825e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d11e      	bne.n	800825e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008220:	4b34      	ldr	r3, [pc, #208]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b00      	cmp	r3, #0
 800822a:	d107      	bne.n	800823c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800822c:	4b31      	ldr	r3, [pc, #196]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800822e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008232:	0a1b      	lsrs	r3, r3, #8
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	61fb      	str	r3, [r7, #28]
 800823a:	e005      	b.n	8008248 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800823c:	4b2d      	ldr	r3, [pc, #180]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	091b      	lsrs	r3, r3, #4
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008248:	4a2b      	ldr	r2, [pc, #172]	; (80082f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008250:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10d      	bne.n	8008274 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800825c:	e00a      	b.n	8008274 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b04      	cmp	r3, #4
 8008262:	d102      	bne.n	800826a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <HAL_RCC_GetSysClockFreq+0x110>)
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	e004      	b.n	8008274 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b08      	cmp	r3, #8
 800826e:	d101      	bne.n	8008274 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008270:	4b23      	ldr	r3, [pc, #140]	; (8008300 <HAL_RCC_GetSysClockFreq+0x114>)
 8008272:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b0c      	cmp	r3, #12
 8008278:	d134      	bne.n	80082e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800827a:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b02      	cmp	r3, #2
 8008288:	d003      	beq.n	8008292 <HAL_RCC_GetSysClockFreq+0xa6>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b03      	cmp	r3, #3
 800828e:	d003      	beq.n	8008298 <HAL_RCC_GetSysClockFreq+0xac>
 8008290:	e005      	b.n	800829e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008292:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <HAL_RCC_GetSysClockFreq+0x110>)
 8008294:	617b      	str	r3, [r7, #20]
      break;
 8008296:	e005      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008298:	4b19      	ldr	r3, [pc, #100]	; (8008300 <HAL_RCC_GetSysClockFreq+0x114>)
 800829a:	617b      	str	r3, [r7, #20]
      break;
 800829c:	e002      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	617b      	str	r3, [r7, #20]
      break;
 80082a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082a4:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	091b      	lsrs	r3, r3, #4
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	3301      	adds	r3, #1
 80082b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80082b2:	4b10      	ldr	r3, [pc, #64]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	0a1b      	lsrs	r3, r3, #8
 80082b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	fb03 f202 	mul.w	r2, r3, r2
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	0e5b      	lsrs	r3, r3, #25
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	3301      	adds	r3, #1
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80082e4:	69bb      	ldr	r3, [r7, #24]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3724      	adds	r7, #36	; 0x24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40021000 	.word	0x40021000
 80082f8:	080136d0 	.word	0x080136d0
 80082fc:	00f42400 	.word	0x00f42400
 8008300:	007a1200 	.word	0x007a1200

08008304 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008308:	4b03      	ldr	r3, [pc, #12]	; (8008318 <HAL_RCC_GetHCLKFreq+0x14>)
 800830a:	681b      	ldr	r3, [r3, #0]
}
 800830c:	4618      	mov	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20000010 	.word	0x20000010

0800831c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008320:	f7ff fff0 	bl	8008304 <HAL_RCC_GetHCLKFreq>
 8008324:	4602      	mov	r2, r0
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	4904      	ldr	r1, [pc, #16]	; (8008344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008332:	5ccb      	ldrb	r3, [r1, r3]
 8008334:	f003 031f 	and.w	r3, r3, #31
 8008338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800833c:	4618      	mov	r0, r3
 800833e:	bd80      	pop	{r7, pc}
 8008340:	40021000 	.word	0x40021000
 8008344:	080136c8 	.word	0x080136c8

08008348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800834c:	f7ff ffda 	bl	8008304 <HAL_RCC_GetHCLKFreq>
 8008350:	4602      	mov	r2, r0
 8008352:	4b06      	ldr	r3, [pc, #24]	; (800836c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	0adb      	lsrs	r3, r3, #11
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	4904      	ldr	r1, [pc, #16]	; (8008370 <HAL_RCC_GetPCLK2Freq+0x28>)
 800835e:	5ccb      	ldrb	r3, [r1, r3]
 8008360:	f003 031f 	and.w	r3, r3, #31
 8008364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008368:	4618      	mov	r0, r3
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40021000 	.word	0x40021000
 8008370:	080136c8 	.word	0x080136c8

08008374 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	220f      	movs	r2, #15
 8008382:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008384:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 0203 	and.w	r2, r3, #3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <HAL_RCC_GetClockConfig+0x5c>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80083a8:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <HAL_RCC_GetClockConfig+0x5c>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	08db      	lsrs	r3, r3, #3
 80083ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80083b6:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <HAL_RCC_GetClockConfig+0x60>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 020f 	and.w	r2, r3, #15
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	601a      	str	r2, [r3, #0]
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40021000 	.word	0x40021000
 80083d4:	40022000 	.word	0x40022000

080083d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80083e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80083f0:	f7ff f8e4 	bl	80075bc <HAL_PWREx_GetVoltageRange>
 80083f4:	6178      	str	r0, [r7, #20]
 80083f6:	e014      	b.n	8008422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80083f8:	4b22      	ldr	r3, [pc, #136]	; (8008484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80083fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fc:	4a21      	ldr	r2, [pc, #132]	; (8008484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80083fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008402:	6593      	str	r3, [r2, #88]	; 0x58
 8008404:	4b1f      	ldr	r3, [pc, #124]	; (8008484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008410:	f7ff f8d4 	bl	80075bc <HAL_PWREx_GetVoltageRange>
 8008414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008416:	4b1b      	ldr	r3, [pc, #108]	; (8008484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	4a1a      	ldr	r2, [pc, #104]	; (8008484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800841c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008420:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008428:	d10b      	bne.n	8008442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b80      	cmp	r3, #128	; 0x80
 800842e:	d913      	bls.n	8008458 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2ba0      	cmp	r3, #160	; 0xa0
 8008434:	d902      	bls.n	800843c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008436:	2302      	movs	r3, #2
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	e00d      	b.n	8008458 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800843c:	2301      	movs	r3, #1
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	e00a      	b.n	8008458 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b7f      	cmp	r3, #127	; 0x7f
 8008446:	d902      	bls.n	800844e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008448:	2302      	movs	r3, #2
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	e004      	b.n	8008458 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b70      	cmp	r3, #112	; 0x70
 8008452:	d101      	bne.n	8008458 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008454:	2301      	movs	r3, #1
 8008456:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008458:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f023 020f 	bic.w	r2, r3, #15
 8008460:	4909      	ldr	r1, [pc, #36]	; (8008488 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008468:	4b07      	ldr	r3, [pc, #28]	; (8008488 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	429a      	cmp	r2, r3
 8008474:	d001      	beq.n	800847a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	40021000 	.word	0x40021000
 8008488:	40022000 	.word	0x40022000

0800848c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008492:	4b2d      	ldr	r3, [pc, #180]	; (8008548 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d00b      	beq.n	80084ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d825      	bhi.n	80084f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d008      	beq.n	80084c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d11f      	bne.n	80084f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80084b6:	613b      	str	r3, [r7, #16]
    break;
 80084b8:	e01f      	b.n	80084fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80084ba:	4b25      	ldr	r3, [pc, #148]	; (8008550 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80084bc:	613b      	str	r3, [r7, #16]
    break;
 80084be:	e01c      	b.n	80084fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80084c0:	4b21      	ldr	r3, [pc, #132]	; (8008548 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d107      	bne.n	80084dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80084cc:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80084ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	e005      	b.n	80084e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80084dc:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	091b      	lsrs	r3, r3, #4
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80084e8:	4a1a      	ldr	r2, [pc, #104]	; (8008554 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f0:	613b      	str	r3, [r7, #16]
    break;
 80084f2:	e002      	b.n	80084fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	613b      	str	r3, [r7, #16]
    break;
 80084f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	091b      	lsrs	r3, r3, #4
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	3301      	adds	r3, #1
 8008506:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008508:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	0a1b      	lsrs	r3, r3, #8
 800850e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	fb03 f202 	mul.w	r2, r3, r2
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	fbb2 f3f3 	udiv	r3, r2, r3
 800851e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	0e5b      	lsrs	r3, r3, #25
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	3301      	adds	r3, #1
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	fbb2 f3f3 	udiv	r3, r2, r3
 8008538:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800853a:	683b      	ldr	r3, [r7, #0]
}
 800853c:	4618      	mov	r0, r3
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	40021000 	.word	0x40021000
 800854c:	00f42400 	.word	0x00f42400
 8008550:	007a1200 	.word	0x007a1200
 8008554:	080136d0 	.word	0x080136d0

08008558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008560:	2300      	movs	r3, #0
 8008562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008564:	2300      	movs	r3, #0
 8008566:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008570:	2b00      	cmp	r3, #0
 8008572:	d040      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008578:	2b80      	cmp	r3, #128	; 0x80
 800857a:	d02a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800857c:	2b80      	cmp	r3, #128	; 0x80
 800857e:	d825      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008580:	2b60      	cmp	r3, #96	; 0x60
 8008582:	d026      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008584:	2b60      	cmp	r3, #96	; 0x60
 8008586:	d821      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d006      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	d81d      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008594:	2b20      	cmp	r3, #32
 8008596:	d010      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008598:	e018      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800859a:	4b89      	ldr	r3, [pc, #548]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	4a88      	ldr	r2, [pc, #544]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80085a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085a6:	e015      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3304      	adds	r3, #4
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fb02 	bl	8008bb8 <RCCEx_PLLSAI1_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085b8:	e00c      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3320      	adds	r3, #32
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fbed 	bl	8008da0 <RCCEx_PLLSAI2_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085ca:	e003      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	74fb      	strb	r3, [r7, #19]
      break;
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80085d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d4:	7cfb      	ldrb	r3, [r7, #19]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085da:	4b79      	ldr	r3, [pc, #484]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80085dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e8:	4975      	ldr	r1, [pc, #468]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80085f0:	e001      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f2:	7cfb      	ldrb	r3, [r7, #19]
 80085f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d047      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800860a:	d030      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800860c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008610:	d82a      	bhi.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008616:	d02a      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800861c:	d824      	bhi.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800861e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008622:	d008      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008628:	d81e      	bhi.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800862e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008632:	d010      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008634:	e018      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008636:	4b62      	ldr	r3, [pc, #392]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	4a61      	ldr	r2, [pc, #388]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800863c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008640:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008642:	e015      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	2100      	movs	r1, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fab4 	bl	8008bb8 <RCCEx_PLLSAI1_Config>
 8008650:	4603      	mov	r3, r0
 8008652:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008654:	e00c      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3320      	adds	r3, #32
 800865a:	2100      	movs	r1, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fb9f 	bl	8008da0 <RCCEx_PLLSAI2_Config>
 8008662:	4603      	mov	r3, r0
 8008664:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008666:	e003      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	74fb      	strb	r3, [r7, #19]
      break;
 800866c:	e000      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800866e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008670:	7cfb      	ldrb	r3, [r7, #19]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008676:	4b52      	ldr	r3, [pc, #328]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800867c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008684:	494e      	ldr	r1, [pc, #312]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008686:	4313      	orrs	r3, r2
 8008688:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800868c:	e001      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	7cfb      	ldrb	r3, [r7, #19]
 8008690:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 809f 	beq.w	80087de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086a0:	2300      	movs	r3, #0
 80086a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80086a4:	4b46      	ldr	r3, [pc, #280]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80086a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80086b4:	2300      	movs	r3, #0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00d      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ba:	4b41      	ldr	r3, [pc, #260]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80086bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086be:	4a40      	ldr	r2, [pc, #256]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80086c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c4:	6593      	str	r3, [r2, #88]	; 0x58
 80086c6:	4b3e      	ldr	r3, [pc, #248]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80086c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ce:	60bb      	str	r3, [r7, #8]
 80086d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086d2:	2301      	movs	r3, #1
 80086d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086d6:	4b3b      	ldr	r3, [pc, #236]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a3a      	ldr	r2, [pc, #232]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80086dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086e2:	f7fd fcad 	bl	8006040 <HAL_GetTick>
 80086e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086e8:	e009      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086ea:	f7fd fca9 	bl	8006040 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d902      	bls.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	74fb      	strb	r3, [r7, #19]
        break;
 80086fc:	e005      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086fe:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0ef      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800870a:	7cfb      	ldrb	r3, [r7, #19]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d15b      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008710:	4b2b      	ldr	r3, [pc, #172]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800871a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d01f      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	429a      	cmp	r2, r3
 800872c:	d019      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008738:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800873a:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800873c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008740:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800874a:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008750:	4a1b      	ldr	r2, [pc, #108]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800875a:	4a19      	ldr	r2, [pc, #100]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d016      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fd fc68 	bl	8006040 <HAL_GetTick>
 8008770:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008772:	e00b      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008774:	f7fd fc64 	bl	8006040 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008782:	4293      	cmp	r3, r2
 8008784:	d902      	bls.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	74fb      	strb	r3, [r7, #19]
            break;
 800878a:	e006      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800878c:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0ec      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800879a:	7cfb      	ldrb	r3, [r7, #19]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10c      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80087a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b0:	4903      	ldr	r1, [pc, #12]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80087b8:	e008      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087ba:	7cfb      	ldrb	r3, [r7, #19]
 80087bc:	74bb      	strb	r3, [r7, #18]
 80087be:	e005      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c8:	7cfb      	ldrb	r3, [r7, #19]
 80087ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087cc:	7c7b      	ldrb	r3, [r7, #17]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d105      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087d2:	4ba0      	ldr	r3, [pc, #640]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d6:	4a9f      	ldr	r2, [pc, #636]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087ea:	4b9a      	ldr	r3, [pc, #616]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f0:	f023 0203 	bic.w	r2, r3, #3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f8:	4996      	ldr	r1, [pc, #600]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800880c:	4b91      	ldr	r3, [pc, #580]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008812:	f023 020c 	bic.w	r2, r3, #12
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	498e      	ldr	r1, [pc, #568]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800881c:	4313      	orrs	r3, r2
 800881e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800882e:	4b89      	ldr	r3, [pc, #548]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883c:	4985      	ldr	r1, [pc, #532]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0308 	and.w	r3, r3, #8
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008850:	4b80      	ldr	r3, [pc, #512]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885e:	497d      	ldr	r1, [pc, #500]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008860:	4313      	orrs	r3, r2
 8008862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0310 	and.w	r3, r3, #16
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008872:	4b78      	ldr	r3, [pc, #480]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008880:	4974      	ldr	r1, [pc, #464]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008882:	4313      	orrs	r3, r2
 8008884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008894:	4b6f      	ldr	r3, [pc, #444]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a2:	496c      	ldr	r1, [pc, #432]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088b6:	4b67      	ldr	r3, [pc, #412]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c4:	4963      	ldr	r1, [pc, #396]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00a      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088d8:	4b5e      	ldr	r3, [pc, #376]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088e6:	495b      	ldr	r1, [pc, #364]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088fa:	4b56      	ldr	r3, [pc, #344]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008900:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008908:	4952      	ldr	r1, [pc, #328]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800890a:	4313      	orrs	r3, r2
 800890c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800891c:	4b4d      	ldr	r3, [pc, #308]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008922:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892a:	494a      	ldr	r1, [pc, #296]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800892c:	4313      	orrs	r3, r2
 800892e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800893e:	4b45      	ldr	r3, [pc, #276]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800894c:	4941      	ldr	r1, [pc, #260]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800894e:	4313      	orrs	r3, r2
 8008950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008960:	4b3c      	ldr	r3, [pc, #240]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008966:	f023 0203 	bic.w	r2, r3, #3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800896e:	4939      	ldr	r1, [pc, #228]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008970:	4313      	orrs	r3, r2
 8008972:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d028      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008982:	4b34      	ldr	r3, [pc, #208]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008988:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008990:	4930      	ldr	r1, [pc, #192]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800899c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089a0:	d106      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089a2:	4b2c      	ldr	r3, [pc, #176]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	4a2b      	ldr	r2, [pc, #172]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80089a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ac:	60d3      	str	r3, [r2, #12]
 80089ae:	e011      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089b8:	d10c      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3304      	adds	r3, #4
 80089be:	2101      	movs	r1, #1
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 f8f9 	bl	8008bb8 <RCCEx_PLLSAI1_Config>
 80089c6:	4603      	mov	r3, r0
 80089c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80089ca:	7cfb      	ldrb	r3, [r7, #19]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80089d0:	7cfb      	ldrb	r3, [r7, #19]
 80089d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d04d      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e8:	d108      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80089ea:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80089ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089f0:	4a18      	ldr	r2, [pc, #96]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80089f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80089fa:	e012      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80089fc:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80089fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a02:	4a14      	ldr	r2, [pc, #80]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008a0c:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a1a:	490e      	ldr	r1, [pc, #56]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a2a:	d106      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a2c:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a36:	60d3      	str	r3, [r2, #12]
 8008a38:	e020      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a42:	d109      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008a44:	4b03      	ldr	r3, [pc, #12]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	4a02      	ldr	r2, [pc, #8]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a4e:	60d3      	str	r3, [r2, #12]
 8008a50:	e014      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008a52:	bf00      	nop
 8008a54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a60:	d10c      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3304      	adds	r3, #4
 8008a66:	2101      	movs	r1, #1
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f8a5 	bl	8008bb8 <RCCEx_PLLSAI1_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a72:	7cfb      	ldrb	r3, [r7, #19]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008a78:	7cfb      	ldrb	r3, [r7, #19]
 8008a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d028      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a88:	4b4a      	ldr	r3, [pc, #296]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a96:	4947      	ldr	r1, [pc, #284]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aa6:	d106      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008aa8:	4b42      	ldr	r3, [pc, #264]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	4a41      	ldr	r2, [pc, #260]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ab2:	60d3      	str	r3, [r2, #12]
 8008ab4:	e011      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008abe:	d10c      	bne.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f876 	bl	8008bb8 <RCCEx_PLLSAI1_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ad0:	7cfb      	ldrb	r3, [r7, #19]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008ad6:	7cfb      	ldrb	r3, [r7, #19]
 8008ad8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01e      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ae6:	4b33      	ldr	r3, [pc, #204]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af6:	492f      	ldr	r1, [pc, #188]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b08:	d10c      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f851 	bl	8008bb8 <RCCEx_PLLSAI1_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008b1a:	7cfb      	ldrb	r3, [r7, #19]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008b20:	7cfb      	ldrb	r3, [r7, #19]
 8008b22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b30:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b36:	f023 0204 	bic.w	r2, r3, #4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b40:	491c      	ldr	r1, [pc, #112]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00b      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008b54:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b5a:	f023 0218 	bic.w	r2, r3, #24
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b64:	4913      	ldr	r1, [pc, #76]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d017      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008b78:	4b0e      	ldr	r3, [pc, #56]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b88:	490a      	ldr	r1, [pc, #40]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b9a:	d105      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	4a04      	ldr	r2, [pc, #16]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ba6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008ba8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40021000 	.word	0x40021000

08008bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008bc6:	4b72      	ldr	r3, [pc, #456]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00e      	beq.n	8008bf0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008bd2:	4b6f      	ldr	r3, [pc, #444]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f003 0203 	and.w	r2, r3, #3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d103      	bne.n	8008bea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
       ||
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d142      	bne.n	8008c70 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
 8008bee:	e03f      	b.n	8008c70 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d018      	beq.n	8008c2a <RCCEx_PLLSAI1_Config+0x72>
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d825      	bhi.n	8008c48 <RCCEx_PLLSAI1_Config+0x90>
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d002      	beq.n	8008c06 <RCCEx_PLLSAI1_Config+0x4e>
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d009      	beq.n	8008c18 <RCCEx_PLLSAI1_Config+0x60>
 8008c04:	e020      	b.n	8008c48 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008c06:	4b62      	ldr	r3, [pc, #392]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d11d      	bne.n	8008c4e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c16:	e01a      	b.n	8008c4e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c18:	4b5d      	ldr	r3, [pc, #372]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d116      	bne.n	8008c52 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c28:	e013      	b.n	8008c52 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c2a:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10f      	bne.n	8008c56 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c36:	4b56      	ldr	r3, [pc, #344]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c46:	e006      	b.n	8008c56 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c4c:	e004      	b.n	8008c58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008c4e:	bf00      	nop
 8008c50:	e002      	b.n	8008c58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008c52:	bf00      	nop
 8008c54:	e000      	b.n	8008c58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008c56:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d108      	bne.n	8008c70 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008c5e:	4b4c      	ldr	r3, [pc, #304]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f023 0203 	bic.w	r2, r3, #3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4949      	ldr	r1, [pc, #292]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f040 8086 	bne.w	8008d84 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008c78:	4b45      	ldr	r3, [pc, #276]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a44      	ldr	r2, [pc, #272]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c84:	f7fd f9dc 	bl	8006040 <HAL_GetTick>
 8008c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c8a:	e009      	b.n	8008ca0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c8c:	f7fd f9d8 	bl	8006040 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d902      	bls.n	8008ca0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8008c9e:	e005      	b.n	8008cac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008ca0:	4b3b      	ldr	r3, [pc, #236]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1ef      	bne.n	8008c8c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d168      	bne.n	8008d84 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d113      	bne.n	8008ce0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cb8:	4b35      	ldr	r3, [pc, #212]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cba:	691a      	ldr	r2, [r3, #16]
 8008cbc:	4b35      	ldr	r3, [pc, #212]	; (8008d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6892      	ldr	r2, [r2, #8]
 8008cc4:	0211      	lsls	r1, r2, #8
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	68d2      	ldr	r2, [r2, #12]
 8008cca:	06d2      	lsls	r2, r2, #27
 8008ccc:	4311      	orrs	r1, r2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6852      	ldr	r2, [r2, #4]
 8008cd2:	3a01      	subs	r2, #1
 8008cd4:	0112      	lsls	r2, r2, #4
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	492d      	ldr	r1, [pc, #180]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	610b      	str	r3, [r1, #16]
 8008cde:	e02d      	b.n	8008d3c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d115      	bne.n	8008d12 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ce6:	4b2a      	ldr	r3, [pc, #168]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	4b2b      	ldr	r3, [pc, #172]	; (8008d98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6892      	ldr	r2, [r2, #8]
 8008cf2:	0211      	lsls	r1, r2, #8
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6912      	ldr	r2, [r2, #16]
 8008cf8:	0852      	lsrs	r2, r2, #1
 8008cfa:	3a01      	subs	r2, #1
 8008cfc:	0552      	lsls	r2, r2, #21
 8008cfe:	4311      	orrs	r1, r2
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6852      	ldr	r2, [r2, #4]
 8008d04:	3a01      	subs	r2, #1
 8008d06:	0112      	lsls	r2, r2, #4
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	4921      	ldr	r1, [pc, #132]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	610b      	str	r3, [r1, #16]
 8008d10:	e014      	b.n	8008d3c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d12:	4b1f      	ldr	r3, [pc, #124]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6892      	ldr	r2, [r2, #8]
 8008d1e:	0211      	lsls	r1, r2, #8
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6952      	ldr	r2, [r2, #20]
 8008d24:	0852      	lsrs	r2, r2, #1
 8008d26:	3a01      	subs	r2, #1
 8008d28:	0652      	lsls	r2, r2, #25
 8008d2a:	4311      	orrs	r1, r2
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6852      	ldr	r2, [r2, #4]
 8008d30:	3a01      	subs	r2, #1
 8008d32:	0112      	lsls	r2, r2, #4
 8008d34:	430a      	orrs	r2, r1
 8008d36:	4916      	ldr	r1, [pc, #88]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008d3c:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a13      	ldr	r2, [pc, #76]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d48:	f7fd f97a 	bl	8006040 <HAL_GetTick>
 8008d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d4e:	e009      	b.n	8008d64 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d50:	f7fd f976 	bl	8006040 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d902      	bls.n	8008d64 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	73fb      	strb	r3, [r7, #15]
          break;
 8008d62:	e005      	b.n	8008d70 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d64:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0ef      	beq.n	8008d50 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	4904      	ldr	r1, [pc, #16]	; (8008d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	40021000 	.word	0x40021000
 8008d94:	07ff800f 	.word	0x07ff800f
 8008d98:	ff9f800f 	.word	0xff9f800f
 8008d9c:	f9ff800f 	.word	0xf9ff800f

08008da0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008dae:	4b72      	ldr	r3, [pc, #456]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f003 0303 	and.w	r3, r3, #3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00e      	beq.n	8008dd8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008dba:	4b6f      	ldr	r3, [pc, #444]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f003 0203 	and.w	r2, r3, #3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d103      	bne.n	8008dd2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d142      	bne.n	8008e58 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	73fb      	strb	r3, [r7, #15]
 8008dd6:	e03f      	b.n	8008e58 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d018      	beq.n	8008e12 <RCCEx_PLLSAI2_Config+0x72>
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d825      	bhi.n	8008e30 <RCCEx_PLLSAI2_Config+0x90>
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d002      	beq.n	8008dee <RCCEx_PLLSAI2_Config+0x4e>
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d009      	beq.n	8008e00 <RCCEx_PLLSAI2_Config+0x60>
 8008dec:	e020      	b.n	8008e30 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008dee:	4b62      	ldr	r3, [pc, #392]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11d      	bne.n	8008e36 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008dfe:	e01a      	b.n	8008e36 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008e00:	4b5d      	ldr	r3, [pc, #372]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d116      	bne.n	8008e3a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e10:	e013      	b.n	8008e3a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e12:	4b59      	ldr	r3, [pc, #356]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10f      	bne.n	8008e3e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e1e:	4b56      	ldr	r3, [pc, #344]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e2e:	e006      	b.n	8008e3e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
      break;
 8008e34:	e004      	b.n	8008e40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008e36:	bf00      	nop
 8008e38:	e002      	b.n	8008e40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e000      	b.n	8008e40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008e3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d108      	bne.n	8008e58 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008e46:	4b4c      	ldr	r3, [pc, #304]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f023 0203 	bic.w	r2, r3, #3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4949      	ldr	r1, [pc, #292]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f040 8086 	bne.w	8008f6c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008e60:	4b45      	ldr	r3, [pc, #276]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a44      	ldr	r2, [pc, #272]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e6c:	f7fd f8e8 	bl	8006040 <HAL_GetTick>
 8008e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e72:	e009      	b.n	8008e88 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008e74:	f7fd f8e4 	bl	8006040 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d902      	bls.n	8008e88 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	73fb      	strb	r3, [r7, #15]
        break;
 8008e86:	e005      	b.n	8008e94 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e88:	4b3b      	ldr	r3, [pc, #236]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1ef      	bne.n	8008e74 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d168      	bne.n	8008f6c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d113      	bne.n	8008ec8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ea0:	4b35      	ldr	r3, [pc, #212]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ea2:	695a      	ldr	r2, [r3, #20]
 8008ea4:	4b35      	ldr	r3, [pc, #212]	; (8008f7c <RCCEx_PLLSAI2_Config+0x1dc>)
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6892      	ldr	r2, [r2, #8]
 8008eac:	0211      	lsls	r1, r2, #8
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68d2      	ldr	r2, [r2, #12]
 8008eb2:	06d2      	lsls	r2, r2, #27
 8008eb4:	4311      	orrs	r1, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6852      	ldr	r2, [r2, #4]
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	0112      	lsls	r2, r2, #4
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	492d      	ldr	r1, [pc, #180]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	614b      	str	r3, [r1, #20]
 8008ec6:	e02d      	b.n	8008f24 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d115      	bne.n	8008efa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ece:	4b2a      	ldr	r3, [pc, #168]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ed0:	695a      	ldr	r2, [r3, #20]
 8008ed2:	4b2b      	ldr	r3, [pc, #172]	; (8008f80 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6892      	ldr	r2, [r2, #8]
 8008eda:	0211      	lsls	r1, r2, #8
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6912      	ldr	r2, [r2, #16]
 8008ee0:	0852      	lsrs	r2, r2, #1
 8008ee2:	3a01      	subs	r2, #1
 8008ee4:	0552      	lsls	r2, r2, #21
 8008ee6:	4311      	orrs	r1, r2
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6852      	ldr	r2, [r2, #4]
 8008eec:	3a01      	subs	r2, #1
 8008eee:	0112      	lsls	r2, r2, #4
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	4921      	ldr	r1, [pc, #132]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	614b      	str	r3, [r1, #20]
 8008ef8:	e014      	b.n	8008f24 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008efa:	4b1f      	ldr	r3, [pc, #124]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008efc:	695a      	ldr	r2, [r3, #20]
 8008efe:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6892      	ldr	r2, [r2, #8]
 8008f06:	0211      	lsls	r1, r2, #8
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6952      	ldr	r2, [r2, #20]
 8008f0c:	0852      	lsrs	r2, r2, #1
 8008f0e:	3a01      	subs	r2, #1
 8008f10:	0652      	lsls	r2, r2, #25
 8008f12:	4311      	orrs	r1, r2
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	6852      	ldr	r2, [r2, #4]
 8008f18:	3a01      	subs	r2, #1
 8008f1a:	0112      	lsls	r2, r2, #4
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	4916      	ldr	r1, [pc, #88]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008f24:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a13      	ldr	r2, [pc, #76]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f30:	f7fd f886 	bl	8006040 <HAL_GetTick>
 8008f34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f36:	e009      	b.n	8008f4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f38:	f7fd f882 	bl	8006040 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d902      	bls.n	8008f4c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	73fb      	strb	r3, [r7, #15]
          break;
 8008f4a:	e005      	b.n	8008f58 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0ef      	beq.n	8008f38 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d106      	bne.n	8008f6c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008f5e:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	4904      	ldr	r1, [pc, #16]	; (8008f78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	07ff800f 	.word	0x07ff800f
 8008f80:	ff9f800f 	.word	0xff9f800f
 8008f84:	f9ff800f 	.word	0xf9ff800f

08008f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e049      	b.n	800902e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f841 	bl	8009036 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	f000 f9f8 	bl	80093bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b01      	cmp	r3, #1
 800905e:	d001      	beq.n	8009064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e04f      	b.n	8009104 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0201 	orr.w	r2, r2, #1
 800907a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a23      	ldr	r2, [pc, #140]	; (8009110 <HAL_TIM_Base_Start_IT+0xc4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d01d      	beq.n	80090c2 <HAL_TIM_Base_Start_IT+0x76>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800908e:	d018      	beq.n	80090c2 <HAL_TIM_Base_Start_IT+0x76>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a1f      	ldr	r2, [pc, #124]	; (8009114 <HAL_TIM_Base_Start_IT+0xc8>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d013      	beq.n	80090c2 <HAL_TIM_Base_Start_IT+0x76>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a1e      	ldr	r2, [pc, #120]	; (8009118 <HAL_TIM_Base_Start_IT+0xcc>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00e      	beq.n	80090c2 <HAL_TIM_Base_Start_IT+0x76>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a1c      	ldr	r2, [pc, #112]	; (800911c <HAL_TIM_Base_Start_IT+0xd0>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d009      	beq.n	80090c2 <HAL_TIM_Base_Start_IT+0x76>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1b      	ldr	r2, [pc, #108]	; (8009120 <HAL_TIM_Base_Start_IT+0xd4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d004      	beq.n	80090c2 <HAL_TIM_Base_Start_IT+0x76>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a19      	ldr	r2, [pc, #100]	; (8009124 <HAL_TIM_Base_Start_IT+0xd8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d115      	bne.n	80090ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	4b17      	ldr	r3, [pc, #92]	; (8009128 <HAL_TIM_Base_Start_IT+0xdc>)
 80090ca:	4013      	ands	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b06      	cmp	r3, #6
 80090d2:	d015      	beq.n	8009100 <HAL_TIM_Base_Start_IT+0xb4>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090da:	d011      	beq.n	8009100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0201 	orr.w	r2, r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ec:	e008      	b.n	8009100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0201 	orr.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	e000      	b.n	8009102 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009100:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	40012c00 	.word	0x40012c00
 8009114:	40000400 	.word	0x40000400
 8009118:	40000800 	.word	0x40000800
 800911c:	40000c00 	.word	0x40000c00
 8009120:	40013400 	.word	0x40013400
 8009124:	40014000 	.word	0x40014000
 8009128:	00010007 	.word	0x00010007

0800912c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	f003 0302 	and.w	r3, r3, #2
 800913e:	2b02      	cmp	r3, #2
 8009140:	d122      	bne.n	8009188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b02      	cmp	r3, #2
 800914e:	d11b      	bne.n	8009188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0202 	mvn.w	r2, #2
 8009158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f905 	bl	800937e <HAL_TIM_IC_CaptureCallback>
 8009174:	e005      	b.n	8009182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8f7 	bl	800936a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f908 	bl	8009392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f003 0304 	and.w	r3, r3, #4
 8009192:	2b04      	cmp	r3, #4
 8009194:	d122      	bne.n	80091dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d11b      	bne.n	80091dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f06f 0204 	mvn.w	r2, #4
 80091ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8db 	bl	800937e <HAL_TIM_IC_CaptureCallback>
 80091c8:	e005      	b.n	80091d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f8cd 	bl	800936a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f8de 	bl	8009392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d122      	bne.n	8009230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d11b      	bne.n	8009230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f06f 0208 	mvn.w	r2, #8
 8009200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2204      	movs	r2, #4
 8009206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	f003 0303 	and.w	r3, r3, #3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f8b1 	bl	800937e <HAL_TIM_IC_CaptureCallback>
 800921c:	e005      	b.n	800922a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f8a3 	bl	800936a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f8b4 	bl	8009392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f003 0310 	and.w	r3, r3, #16
 800923a:	2b10      	cmp	r3, #16
 800923c:	d122      	bne.n	8009284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b10      	cmp	r3, #16
 800924a:	d11b      	bne.n	8009284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f06f 0210 	mvn.w	r2, #16
 8009254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2208      	movs	r2, #8
 800925a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f887 	bl	800937e <HAL_TIM_IC_CaptureCallback>
 8009270:	e005      	b.n	800927e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f879 	bl	800936a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f88a 	bl	8009392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b01      	cmp	r3, #1
 8009290:	d10e      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b01      	cmp	r3, #1
 800929e:	d107      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f06f 0201 	mvn.w	r2, #1
 80092a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fc f816 	bl	80052dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ba:	2b80      	cmp	r3, #128	; 0x80
 80092bc:	d10e      	bne.n	80092dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c8:	2b80      	cmp	r3, #128	; 0x80
 80092ca:	d107      	bne.n	80092dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f914 	bl	8009504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ea:	d10e      	bne.n	800930a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b80      	cmp	r3, #128	; 0x80
 80092f8:	d107      	bne.n	800930a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f907 	bl	8009518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	d10e      	bne.n	8009336 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d107      	bne.n	8009336 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800932e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f838 	bl	80093a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b20      	cmp	r3, #32
 8009342:	d10e      	bne.n	8009362 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0320 	and.w	r3, r3, #32
 800934e:	2b20      	cmp	r3, #32
 8009350:	d107      	bne.n	8009362 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f06f 0220 	mvn.w	r2, #32
 800935a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8c7 	bl	80094f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a40      	ldr	r2, [pc, #256]	; (80094d0 <TIM_Base_SetConfig+0x114>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d013      	beq.n	80093fc <TIM_Base_SetConfig+0x40>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093da:	d00f      	beq.n	80093fc <TIM_Base_SetConfig+0x40>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a3d      	ldr	r2, [pc, #244]	; (80094d4 <TIM_Base_SetConfig+0x118>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00b      	beq.n	80093fc <TIM_Base_SetConfig+0x40>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a3c      	ldr	r2, [pc, #240]	; (80094d8 <TIM_Base_SetConfig+0x11c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d007      	beq.n	80093fc <TIM_Base_SetConfig+0x40>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a3b      	ldr	r2, [pc, #236]	; (80094dc <TIM_Base_SetConfig+0x120>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d003      	beq.n	80093fc <TIM_Base_SetConfig+0x40>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a3a      	ldr	r2, [pc, #232]	; (80094e0 <TIM_Base_SetConfig+0x124>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d108      	bne.n	800940e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a2f      	ldr	r2, [pc, #188]	; (80094d0 <TIM_Base_SetConfig+0x114>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d01f      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800941c:	d01b      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a2c      	ldr	r2, [pc, #176]	; (80094d4 <TIM_Base_SetConfig+0x118>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d017      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a2b      	ldr	r2, [pc, #172]	; (80094d8 <TIM_Base_SetConfig+0x11c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d013      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a2a      	ldr	r2, [pc, #168]	; (80094dc <TIM_Base_SetConfig+0x120>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00f      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a29      	ldr	r2, [pc, #164]	; (80094e0 <TIM_Base_SetConfig+0x124>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00b      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a28      	ldr	r2, [pc, #160]	; (80094e4 <TIM_Base_SetConfig+0x128>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d007      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a27      	ldr	r2, [pc, #156]	; (80094e8 <TIM_Base_SetConfig+0x12c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_Base_SetConfig+0x9a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a26      	ldr	r2, [pc, #152]	; (80094ec <TIM_Base_SetConfig+0x130>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d108      	bne.n	8009468 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800945c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4313      	orrs	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	4313      	orrs	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a10      	ldr	r2, [pc, #64]	; (80094d0 <TIM_Base_SetConfig+0x114>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00f      	beq.n	80094b4 <TIM_Base_SetConfig+0xf8>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a12      	ldr	r2, [pc, #72]	; (80094e0 <TIM_Base_SetConfig+0x124>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00b      	beq.n	80094b4 <TIM_Base_SetConfig+0xf8>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a11      	ldr	r2, [pc, #68]	; (80094e4 <TIM_Base_SetConfig+0x128>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d007      	beq.n	80094b4 <TIM_Base_SetConfig+0xf8>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a10      	ldr	r2, [pc, #64]	; (80094e8 <TIM_Base_SetConfig+0x12c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d003      	beq.n	80094b4 <TIM_Base_SetConfig+0xf8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a0f      	ldr	r2, [pc, #60]	; (80094ec <TIM_Base_SetConfig+0x130>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d103      	bne.n	80094bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	615a      	str	r2, [r3, #20]
}
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	40012c00 	.word	0x40012c00
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	40000c00 	.word	0x40000c00
 80094e0:	40013400 	.word	0x40013400
 80094e4:	40014000 	.word	0x40014000
 80094e8:	40014400 	.word	0x40014400
 80094ec:	40014800 	.word	0x40014800

080094f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e042      	b.n	80095c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009544:	2b00      	cmp	r3, #0
 8009546:	d106      	bne.n	8009556 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7fc f847 	bl	80055e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2224      	movs	r2, #36	; 0x24
 800955a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 0201 	bic.w	r2, r2, #1
 800956c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fc52 	bl	8009e18 <UART_SetConfig>
 8009574:	4603      	mov	r3, r0
 8009576:	2b01      	cmp	r3, #1
 8009578:	d101      	bne.n	800957e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e022      	b.n	80095c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 ff42 	bl	800a410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800959a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0201 	orr.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 ffc9 	bl	800a554 <UART_CheckIdleState>
 80095c2:	4603      	mov	r3, r0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	4613      	mov	r3, r2
 80095da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	f040 8084 	bne.w	80096f0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_UART_Transmit+0x28>
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e07c      	b.n	80096f2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_UART_Transmit+0x3a>
 8009602:	2302      	movs	r3, #2
 8009604:	e075      	b.n	80096f2 <HAL_UART_Transmit+0x126>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2221      	movs	r2, #33	; 0x21
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800961e:	f7fc fd0f 	bl	8006040 <HAL_GetTick>
 8009622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	88fa      	ldrh	r2, [r7, #6]
 8009628:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	88fa      	ldrh	r2, [r7, #6]
 8009630:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963c:	d108      	bne.n	8009650 <HAL_UART_Transmit+0x84>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	61bb      	str	r3, [r7, #24]
 800964e:	e003      	b.n	8009658 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009660:	e02d      	b.n	80096be <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2200      	movs	r2, #0
 800966a:	2180      	movs	r1, #128	; 0x80
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 ffbc 	bl	800a5ea <UART_WaitOnFlagUntilTimeout>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009678:	2303      	movs	r3, #3
 800967a:	e03a      	b.n	80096f2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	881a      	ldrh	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800968e:	b292      	uxth	r2, r2
 8009690:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	3302      	adds	r3, #2
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	e008      	b.n	80096ac <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	781a      	ldrb	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	b292      	uxth	r2, r2
 80096a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	3301      	adds	r3, #1
 80096aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1cb      	bne.n	8009662 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	2140      	movs	r1, #64	; 0x40
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 ff88 	bl	800a5ea <UART_WaitOnFlagUntilTimeout>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e006      	b.n	80096f2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	e000      	b.n	80096f2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80096f0:	2302      	movs	r3, #2
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3720      	adds	r7, #32
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	; 0x28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4613      	mov	r3, r2
 8009708:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009710:	2b20      	cmp	r3, #32
 8009712:	d142      	bne.n	800979a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <HAL_UART_Receive_IT+0x24>
 800971a:	88fb      	ldrh	r3, [r7, #6]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e03b      	b.n	800979c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <HAL_UART_Receive_IT+0x36>
 800972e:	2302      	movs	r3, #2
 8009730:	e034      	b.n	800979c <HAL_UART_Receive_IT+0xa0>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a17      	ldr	r2, [pc, #92]	; (80097a4 <HAL_UART_Receive_IT+0xa8>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d01f      	beq.n	800978a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d018      	beq.n	800978a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	613b      	str	r3, [r7, #16]
   return(result);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	623b      	str	r3, [r7, #32]
 8009778:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	69f9      	ldr	r1, [r7, #28]
 800977c:	6a3a      	ldr	r2, [r7, #32]
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	61bb      	str	r3, [r7, #24]
   return(result);
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e6      	bne.n	8009758 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	461a      	mov	r2, r3
 800978e:	68b9      	ldr	r1, [r7, #8]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 fff3 	bl	800a77c <UART_Start_Receive_IT>
 8009796:	4603      	mov	r3, r0
 8009798:	e000      	b.n	800979c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800979a:	2302      	movs	r3, #2
  }
}
 800979c:	4618      	mov	r0, r3
 800979e:	3728      	adds	r7, #40	; 0x28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	40008000 	.word	0x40008000

080097a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b0ba      	sub	sp, #232	; 0xe8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80097ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80097d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80097d6:	4013      	ands	r3, r2
 80097d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80097dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d11b      	bne.n	800981c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097e8:	f003 0320 	and.w	r3, r3, #32
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d015      	beq.n	800981c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f4:	f003 0320 	and.w	r3, r3, #32
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d105      	bne.n	8009808 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d009      	beq.n	800981c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 82d6 	beq.w	8009dbe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
      }
      return;
 800981a:	e2d0      	b.n	8009dbe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800981c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 811f 	beq.w	8009a64 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800982a:	4b8b      	ldr	r3, [pc, #556]	; (8009a58 <HAL_UART_IRQHandler+0x2b0>)
 800982c:	4013      	ands	r3, r2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d106      	bne.n	8009840 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009836:	4b89      	ldr	r3, [pc, #548]	; (8009a5c <HAL_UART_IRQHandler+0x2b4>)
 8009838:	4013      	ands	r3, r2
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 8112 	beq.w	8009a64 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	d011      	beq.n	8009870 <HAL_UART_IRQHandler+0xc8>
 800984c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2201      	movs	r2, #1
 800985e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009866:	f043 0201 	orr.w	r2, r3, #1
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d011      	beq.n	80098a0 <HAL_UART_IRQHandler+0xf8>
 800987c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2202      	movs	r2, #2
 800988e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009896:	f043 0204 	orr.w	r2, r3, #4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d011      	beq.n	80098d0 <HAL_UART_IRQHandler+0x128>
 80098ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00b      	beq.n	80098d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2204      	movs	r2, #4
 80098be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098c6:	f043 0202 	orr.w	r2, r3, #2
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80098d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d4:	f003 0308 	and.w	r3, r3, #8
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d017      	beq.n	800990c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e0:	f003 0320 	and.w	r3, r3, #32
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d105      	bne.n	80098f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80098ec:	4b5a      	ldr	r3, [pc, #360]	; (8009a58 <HAL_UART_IRQHandler+0x2b0>)
 80098ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2208      	movs	r2, #8
 80098fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009902:	f043 0208 	orr.w	r2, r3, #8
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009914:	2b00      	cmp	r3, #0
 8009916:	d012      	beq.n	800993e <HAL_UART_IRQHandler+0x196>
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00c      	beq.n	800993e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800992c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009934:	f043 0220 	orr.w	r2, r3, #32
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 823c 	beq.w	8009dc2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800994a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	d013      	beq.n	800997e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800995a:	f003 0320 	and.w	r3, r3, #32
 800995e:	2b00      	cmp	r3, #0
 8009960:	d105      	bne.n	800996e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d007      	beq.n	800997e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	2b40      	cmp	r3, #64	; 0x40
 8009994:	d005      	beq.n	80099a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800999a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d04f      	beq.n	8009a42 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 f814 	bl	800a9d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b2:	2b40      	cmp	r3, #64	; 0x40
 80099b4:	d141      	bne.n	8009a3a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80099cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1d9      	bne.n	80099b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d013      	beq.n	8009a32 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a0e:	4a14      	ldr	r2, [pc, #80]	; (8009a60 <HAL_UART_IRQHandler+0x2b8>)
 8009a10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fc fc80 	bl	800631c <HAL_DMA_Abort_IT>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d017      	beq.n	8009a52 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a30:	e00f      	b.n	8009a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f9da 	bl	8009dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a38:	e00b      	b.n	8009a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9d6 	bl	8009dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a40:	e007      	b.n	8009a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9d2 	bl	8009dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009a50:	e1b7      	b.n	8009dc2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a52:	bf00      	nop
    return;
 8009a54:	e1b5      	b.n	8009dc2 <HAL_UART_IRQHandler+0x61a>
 8009a56:	bf00      	nop
 8009a58:	10000001 	.word	0x10000001
 8009a5c:	04000120 	.word	0x04000120
 8009a60:	0800aa9d 	.word	0x0800aa9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	f040 814a 	bne.w	8009d02 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a72:	f003 0310 	and.w	r3, r3, #16
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 8143 	beq.w	8009d02 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 813c 	beq.w	8009d02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2210      	movs	r2, #16
 8009a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9c:	2b40      	cmp	r3, #64	; 0x40
 8009a9e:	f040 80b5 	bne.w	8009c0c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009aae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 8187 	beq.w	8009dc6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	f080 817f 	bcs.w	8009dc6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f040 8086 	bne.w	8009bf0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1da      	bne.n	8009ae4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3308      	adds	r3, #8
 8009b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e1      	bne.n	8009b2e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3308      	adds	r3, #8
 8009b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3308      	adds	r3, #8
 8009b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b96:	e841 2300 	strex	r3, r2, [r1]
 8009b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1e3      	bne.n	8009b6a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bc0:	f023 0310 	bic.w	r3, r3, #16
 8009bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e4      	bne.n	8009bb0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fc fb3a 	bl	8006264 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f8fb 	bl	8009e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c0a:	e0dc      	b.n	8009dc6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 80ce 	beq.w	8009dca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 80c9 	beq.w	8009dca <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e4      	bne.n	8009c38 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3308      	adds	r3, #8
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c84:	f023 0301 	bic.w	r3, r3, #1
 8009c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3308      	adds	r3, #8
 8009c92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c96:	633a      	str	r2, [r7, #48]	; 0x30
 8009c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9e:	e841 2300 	strex	r3, r2, [r1]
 8009ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1e1      	bne.n	8009c6e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f023 0310 	bic.w	r3, r3, #16
 8009cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ce0:	61fb      	str	r3, [r7, #28]
 8009ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	69b9      	ldr	r1, [r7, #24]
 8009ce6:	69fa      	ldr	r2, [r7, #28]
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	617b      	str	r3, [r7, #20]
   return(result);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e4      	bne.n	8009cbe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f880 	bl	8009e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d00:	e063      	b.n	8009dca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00e      	beq.n	8009d2c <HAL_UART_IRQHandler+0x584>
 8009d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d008      	beq.n	8009d2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 fb5f 	bl	800b3e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d2a:	e051      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d014      	beq.n	8009d62 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d008      	beq.n	8009d62 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d03a      	beq.n	8009dce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	4798      	blx	r3
    }
    return;
 8009d60:	e035      	b.n	8009dce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d009      	beq.n	8009d82 <HAL_UART_IRQHandler+0x5da>
 8009d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fea4 	bl	800aac8 <UART_EndTransmit_IT>
    return;
 8009d80:	e026      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d009      	beq.n	8009da2 <HAL_UART_IRQHandler+0x5fa>
 8009d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 fb38 	bl	800b410 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009da0:	e016      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d010      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x628>
 8009dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	da0c      	bge.n	8009dd0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 fb20 	bl	800b3fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dbc:	e008      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8009dbe:	bf00      	nop
 8009dc0:	e006      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
    return;
 8009dc2:	bf00      	nop
 8009dc4:	e004      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8009dc6:	bf00      	nop
 8009dc8:	e002      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8009dca:	bf00      	nop
 8009dcc:	e000      	b.n	8009dd0 <HAL_UART_IRQHandler+0x628>
    return;
 8009dce:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8009dd0:	37e8      	adds	r7, #232	; 0xe8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop

08009dd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e1c:	b08c      	sub	sp, #48	; 0x30
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	431a      	orrs	r2, r3
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	431a      	orrs	r2, r3
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4baa      	ldr	r3, [pc, #680]	; (800a0f0 <UART_SetConfig+0x2d8>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	6812      	ldr	r2, [r2, #0]
 8009e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e50:	430b      	orrs	r3, r1
 8009e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a9f      	ldr	r2, [pc, #636]	; (800a0f4 <UART_SetConfig+0x2dc>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d004      	beq.n	8009e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e80:	4313      	orrs	r3, r2
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009e8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	f023 010f 	bic.w	r1, r3, #15
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a90      	ldr	r2, [pc, #576]	; (800a0f8 <UART_SetConfig+0x2e0>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d125      	bne.n	8009f08 <UART_SetConfig+0xf0>
 8009ebc:	4b8f      	ldr	r3, [pc, #572]	; (800a0fc <UART_SetConfig+0x2e4>)
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec2:	f003 0303 	and.w	r3, r3, #3
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d81a      	bhi.n	8009f00 <UART_SetConfig+0xe8>
 8009eca:	a201      	add	r2, pc, #4	; (adr r2, 8009ed0 <UART_SetConfig+0xb8>)
 8009ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed0:	08009ee1 	.word	0x08009ee1
 8009ed4:	08009ef1 	.word	0x08009ef1
 8009ed8:	08009ee9 	.word	0x08009ee9
 8009edc:	08009ef9 	.word	0x08009ef9
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ee6:	e116      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eee:	e112      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ef6:	e10e      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009ef8:	2308      	movs	r3, #8
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009efe:	e10a      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009f00:	2310      	movs	r3, #16
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f06:	e106      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a7c      	ldr	r2, [pc, #496]	; (800a100 <UART_SetConfig+0x2e8>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d138      	bne.n	8009f84 <UART_SetConfig+0x16c>
 8009f12:	4b7a      	ldr	r3, [pc, #488]	; (800a0fc <UART_SetConfig+0x2e4>)
 8009f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f18:	f003 030c 	and.w	r3, r3, #12
 8009f1c:	2b0c      	cmp	r3, #12
 8009f1e:	d82d      	bhi.n	8009f7c <UART_SetConfig+0x164>
 8009f20:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <UART_SetConfig+0x110>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009f5d 	.word	0x08009f5d
 8009f2c:	08009f7d 	.word	0x08009f7d
 8009f30:	08009f7d 	.word	0x08009f7d
 8009f34:	08009f7d 	.word	0x08009f7d
 8009f38:	08009f6d 	.word	0x08009f6d
 8009f3c:	08009f7d 	.word	0x08009f7d
 8009f40:	08009f7d 	.word	0x08009f7d
 8009f44:	08009f7d 	.word	0x08009f7d
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f7d 	.word	0x08009f7d
 8009f50:	08009f7d 	.word	0x08009f7d
 8009f54:	08009f7d 	.word	0x08009f7d
 8009f58:	08009f75 	.word	0x08009f75
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f62:	e0d8      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009f64:	2302      	movs	r3, #2
 8009f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f6a:	e0d4      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009f6c:	2304      	movs	r3, #4
 8009f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f72:	e0d0      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009f74:	2308      	movs	r3, #8
 8009f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f7a:	e0cc      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f82:	e0c8      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a5e      	ldr	r2, [pc, #376]	; (800a104 <UART_SetConfig+0x2ec>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d125      	bne.n	8009fda <UART_SetConfig+0x1c2>
 8009f8e:	4b5b      	ldr	r3, [pc, #364]	; (800a0fc <UART_SetConfig+0x2e4>)
 8009f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f98:	2b30      	cmp	r3, #48	; 0x30
 8009f9a:	d016      	beq.n	8009fca <UART_SetConfig+0x1b2>
 8009f9c:	2b30      	cmp	r3, #48	; 0x30
 8009f9e:	d818      	bhi.n	8009fd2 <UART_SetConfig+0x1ba>
 8009fa0:	2b20      	cmp	r3, #32
 8009fa2:	d00a      	beq.n	8009fba <UART_SetConfig+0x1a2>
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	d814      	bhi.n	8009fd2 <UART_SetConfig+0x1ba>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <UART_SetConfig+0x19a>
 8009fac:	2b10      	cmp	r3, #16
 8009fae:	d008      	beq.n	8009fc2 <UART_SetConfig+0x1aa>
 8009fb0:	e00f      	b.n	8009fd2 <UART_SetConfig+0x1ba>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fb8:	e0ad      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fc0:	e0a9      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009fc2:	2304      	movs	r3, #4
 8009fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fc8:	e0a5      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009fca:	2308      	movs	r3, #8
 8009fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fd0:	e0a1      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009fd2:	2310      	movs	r3, #16
 8009fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fd8:	e09d      	b.n	800a116 <UART_SetConfig+0x2fe>
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a4a      	ldr	r2, [pc, #296]	; (800a108 <UART_SetConfig+0x2f0>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d125      	bne.n	800a030 <UART_SetConfig+0x218>
 8009fe4:	4b45      	ldr	r3, [pc, #276]	; (800a0fc <UART_SetConfig+0x2e4>)
 8009fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fee:	2bc0      	cmp	r3, #192	; 0xc0
 8009ff0:	d016      	beq.n	800a020 <UART_SetConfig+0x208>
 8009ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8009ff4:	d818      	bhi.n	800a028 <UART_SetConfig+0x210>
 8009ff6:	2b80      	cmp	r3, #128	; 0x80
 8009ff8:	d00a      	beq.n	800a010 <UART_SetConfig+0x1f8>
 8009ffa:	2b80      	cmp	r3, #128	; 0x80
 8009ffc:	d814      	bhi.n	800a028 <UART_SetConfig+0x210>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <UART_SetConfig+0x1f0>
 800a002:	2b40      	cmp	r3, #64	; 0x40
 800a004:	d008      	beq.n	800a018 <UART_SetConfig+0x200>
 800a006:	e00f      	b.n	800a028 <UART_SetConfig+0x210>
 800a008:	2300      	movs	r3, #0
 800a00a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a00e:	e082      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a010:	2302      	movs	r3, #2
 800a012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a016:	e07e      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a018:	2304      	movs	r3, #4
 800a01a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a01e:	e07a      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a020:	2308      	movs	r3, #8
 800a022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a026:	e076      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a028:	2310      	movs	r3, #16
 800a02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a02e:	e072      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a35      	ldr	r2, [pc, #212]	; (800a10c <UART_SetConfig+0x2f4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d12a      	bne.n	800a090 <UART_SetConfig+0x278>
 800a03a:	4b30      	ldr	r3, [pc, #192]	; (800a0fc <UART_SetConfig+0x2e4>)
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a048:	d01a      	beq.n	800a080 <UART_SetConfig+0x268>
 800a04a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a04e:	d81b      	bhi.n	800a088 <UART_SetConfig+0x270>
 800a050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a054:	d00c      	beq.n	800a070 <UART_SetConfig+0x258>
 800a056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a05a:	d815      	bhi.n	800a088 <UART_SetConfig+0x270>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <UART_SetConfig+0x250>
 800a060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a064:	d008      	beq.n	800a078 <UART_SetConfig+0x260>
 800a066:	e00f      	b.n	800a088 <UART_SetConfig+0x270>
 800a068:	2300      	movs	r3, #0
 800a06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a06e:	e052      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a070:	2302      	movs	r3, #2
 800a072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a076:	e04e      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a078:	2304      	movs	r3, #4
 800a07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a07e:	e04a      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a080:	2308      	movs	r3, #8
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a086:	e046      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a088:	2310      	movs	r3, #16
 800a08a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a08e:	e042      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a17      	ldr	r2, [pc, #92]	; (800a0f4 <UART_SetConfig+0x2dc>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d13a      	bne.n	800a110 <UART_SetConfig+0x2f8>
 800a09a:	4b18      	ldr	r3, [pc, #96]	; (800a0fc <UART_SetConfig+0x2e4>)
 800a09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0a8:	d01a      	beq.n	800a0e0 <UART_SetConfig+0x2c8>
 800a0aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0ae:	d81b      	bhi.n	800a0e8 <UART_SetConfig+0x2d0>
 800a0b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b4:	d00c      	beq.n	800a0d0 <UART_SetConfig+0x2b8>
 800a0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ba:	d815      	bhi.n	800a0e8 <UART_SetConfig+0x2d0>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <UART_SetConfig+0x2b0>
 800a0c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0c4:	d008      	beq.n	800a0d8 <UART_SetConfig+0x2c0>
 800a0c6:	e00f      	b.n	800a0e8 <UART_SetConfig+0x2d0>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0ce:	e022      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0d6:	e01e      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a0d8:	2304      	movs	r3, #4
 800a0da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0de:	e01a      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0e6:	e016      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a0e8:	2310      	movs	r3, #16
 800a0ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0ee:	e012      	b.n	800a116 <UART_SetConfig+0x2fe>
 800a0f0:	cfff69f3 	.word	0xcfff69f3
 800a0f4:	40008000 	.word	0x40008000
 800a0f8:	40013800 	.word	0x40013800
 800a0fc:	40021000 	.word	0x40021000
 800a100:	40004400 	.word	0x40004400
 800a104:	40004800 	.word	0x40004800
 800a108:	40004c00 	.word	0x40004c00
 800a10c:	40005000 	.word	0x40005000
 800a110:	2310      	movs	r3, #16
 800a112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4aae      	ldr	r2, [pc, #696]	; (800a3d4 <UART_SetConfig+0x5bc>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	f040 8097 	bne.w	800a250 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a126:	2b08      	cmp	r3, #8
 800a128:	d823      	bhi.n	800a172 <UART_SetConfig+0x35a>
 800a12a:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <UART_SetConfig+0x318>)
 800a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a173 	.word	0x0800a173
 800a138:	0800a15d 	.word	0x0800a15d
 800a13c:	0800a173 	.word	0x0800a173
 800a140:	0800a163 	.word	0x0800a163
 800a144:	0800a173 	.word	0x0800a173
 800a148:	0800a173 	.word	0x0800a173
 800a14c:	0800a173 	.word	0x0800a173
 800a150:	0800a16b 	.word	0x0800a16b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a154:	f7fe f8e2 	bl	800831c <HAL_RCC_GetPCLK1Freq>
 800a158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a15a:	e010      	b.n	800a17e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a15c:	4b9e      	ldr	r3, [pc, #632]	; (800a3d8 <UART_SetConfig+0x5c0>)
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a160:	e00d      	b.n	800a17e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a162:	f7fe f843 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 800a166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a168:	e009      	b.n	800a17e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a170:	e005      	b.n	800a17e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a17c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 8130 	beq.w	800a3e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	4a94      	ldr	r2, [pc, #592]	; (800a3dc <UART_SetConfig+0x5c4>)
 800a18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a190:	461a      	mov	r2, r3
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	fbb3 f3f2 	udiv	r3, r3, r2
 800a198:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	4413      	add	r3, r2
 800a1a4:	69ba      	ldr	r2, [r7, #24]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d305      	bcc.n	800a1b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d903      	bls.n	800a1be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a1bc:	e113      	b.n	800a3e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	60bb      	str	r3, [r7, #8]
 800a1c4:	60fa      	str	r2, [r7, #12]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ca:	4a84      	ldr	r2, [pc, #528]	; (800a3dc <UART_SetConfig+0x5c4>)
 800a1cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	603b      	str	r3, [r7, #0]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1e0:	f7f6 fcfa 	bl	8000bd8 <__aeabi_uldivmod>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	020b      	lsls	r3, r1, #8
 800a1f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1fa:	0202      	lsls	r2, r0, #8
 800a1fc:	6979      	ldr	r1, [r7, #20]
 800a1fe:	6849      	ldr	r1, [r1, #4]
 800a200:	0849      	lsrs	r1, r1, #1
 800a202:	2000      	movs	r0, #0
 800a204:	460c      	mov	r4, r1
 800a206:	4605      	mov	r5, r0
 800a208:	eb12 0804 	adds.w	r8, r2, r4
 800a20c:	eb43 0905 	adc.w	r9, r3, r5
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	469a      	mov	sl, r3
 800a218:	4693      	mov	fp, r2
 800a21a:	4652      	mov	r2, sl
 800a21c:	465b      	mov	r3, fp
 800a21e:	4640      	mov	r0, r8
 800a220:	4649      	mov	r1, r9
 800a222:	f7f6 fcd9 	bl	8000bd8 <__aeabi_uldivmod>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4613      	mov	r3, r2
 800a22c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a234:	d308      	bcc.n	800a248 <UART_SetConfig+0x430>
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a23c:	d204      	bcs.n	800a248 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6a3a      	ldr	r2, [r7, #32]
 800a244:	60da      	str	r2, [r3, #12]
 800a246:	e0ce      	b.n	800a3e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a24e:	e0ca      	b.n	800a3e6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a258:	d166      	bne.n	800a328 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a25a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a25e:	2b08      	cmp	r3, #8
 800a260:	d827      	bhi.n	800a2b2 <UART_SetConfig+0x49a>
 800a262:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <UART_SetConfig+0x450>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a295 	.word	0x0800a295
 800a270:	0800a29d 	.word	0x0800a29d
 800a274:	0800a2b3 	.word	0x0800a2b3
 800a278:	0800a2a3 	.word	0x0800a2a3
 800a27c:	0800a2b3 	.word	0x0800a2b3
 800a280:	0800a2b3 	.word	0x0800a2b3
 800a284:	0800a2b3 	.word	0x0800a2b3
 800a288:	0800a2ab 	.word	0x0800a2ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a28c:	f7fe f846 	bl	800831c <HAL_RCC_GetPCLK1Freq>
 800a290:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a292:	e014      	b.n	800a2be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a294:	f7fe f858 	bl	8008348 <HAL_RCC_GetPCLK2Freq>
 800a298:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a29a:	e010      	b.n	800a2be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a29c:	4b4e      	ldr	r3, [pc, #312]	; (800a3d8 <UART_SetConfig+0x5c0>)
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2a0:	e00d      	b.n	800a2be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2a2:	f7fd ffa3 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 800a2a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2a8:	e009      	b.n	800a2be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2b0:	e005      	b.n	800a2be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a2bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 8090 	beq.w	800a3e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	4a44      	ldr	r2, [pc, #272]	; (800a3dc <UART_SetConfig+0x5c4>)
 800a2cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2d8:	005a      	lsls	r2, r3, #1
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	441a      	add	r2, r3
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	2b0f      	cmp	r3, #15
 800a2f0:	d916      	bls.n	800a320 <UART_SetConfig+0x508>
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f8:	d212      	bcs.n	800a320 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	f023 030f 	bic.w	r3, r3, #15
 800a302:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	b29a      	uxth	r2, r3
 800a310:	8bfb      	ldrh	r3, [r7, #30]
 800a312:	4313      	orrs	r3, r2
 800a314:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	8bfa      	ldrh	r2, [r7, #30]
 800a31c:	60da      	str	r2, [r3, #12]
 800a31e:	e062      	b.n	800a3e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a326:	e05e      	b.n	800a3e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	d828      	bhi.n	800a382 <UART_SetConfig+0x56a>
 800a330:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <UART_SetConfig+0x520>)
 800a332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a336:	bf00      	nop
 800a338:	0800a35d 	.word	0x0800a35d
 800a33c:	0800a365 	.word	0x0800a365
 800a340:	0800a36d 	.word	0x0800a36d
 800a344:	0800a383 	.word	0x0800a383
 800a348:	0800a373 	.word	0x0800a373
 800a34c:	0800a383 	.word	0x0800a383
 800a350:	0800a383 	.word	0x0800a383
 800a354:	0800a383 	.word	0x0800a383
 800a358:	0800a37b 	.word	0x0800a37b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a35c:	f7fd ffde 	bl	800831c <HAL_RCC_GetPCLK1Freq>
 800a360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a362:	e014      	b.n	800a38e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a364:	f7fd fff0 	bl	8008348 <HAL_RCC_GetPCLK2Freq>
 800a368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a36a:	e010      	b.n	800a38e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a36c:	4b1a      	ldr	r3, [pc, #104]	; (800a3d8 <UART_SetConfig+0x5c0>)
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a370:	e00d      	b.n	800a38e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a372:	f7fd ff3b 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 800a376:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a378:	e009      	b.n	800a38e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a380:	e005      	b.n	800a38e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a38c:	bf00      	nop
    }

    if (pclk != 0U)
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	2b00      	cmp	r3, #0
 800a392:	d028      	beq.n	800a3e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	4a10      	ldr	r2, [pc, #64]	; (800a3dc <UART_SetConfig+0x5c4>)
 800a39a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	085b      	lsrs	r3, r3, #1
 800a3ac:	441a      	add	r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	2b0f      	cmp	r3, #15
 800a3bc:	d910      	bls.n	800a3e0 <UART_SetConfig+0x5c8>
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3c4:	d20c      	bcs.n	800a3e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60da      	str	r2, [r3, #12]
 800a3d0:	e009      	b.n	800a3e6 <UART_SetConfig+0x5ce>
 800a3d2:	bf00      	nop
 800a3d4:	40008000 	.word	0x40008000
 800a3d8:	00f42400 	.word	0x00f42400
 800a3dc:	08013700 	.word	0x08013700
      }
      else
      {
        ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2200      	movs	r2, #0
 800a400:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a402:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a406:	4618      	mov	r0, r3
 800a408:	3730      	adds	r7, #48	; 0x30
 800a40a:	46bd      	mov	sp, r7
 800a40c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00a      	beq.n	800a43a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00a      	beq.n	800a45c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00a      	beq.n	800a47e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	f003 0320 	and.w	r3, r3, #32
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01a      	beq.n	800a526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a50a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a50e:	d10a      	bne.n	800a526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	605a      	str	r2, [r3, #4]
  }
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af02      	add	r7, sp, #8
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a564:	f7fb fd6c 	bl	8006040 <HAL_GetTick>
 800a568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0308 	and.w	r3, r3, #8
 800a574:	2b08      	cmp	r3, #8
 800a576:	d10e      	bne.n	800a596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f82f 	bl	800a5ea <UART_WaitOnFlagUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e025      	b.n	800a5e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b04      	cmp	r3, #4
 800a5a2:	d10e      	bne.n	800a5c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f819 	bl	800a5ea <UART_WaitOnFlagUntilTimeout>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e00f      	b.n	800a5e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b09c      	sub	sp, #112	; 0x70
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5fa:	e0a9      	b.n	800a750 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a602:	f000 80a5 	beq.w	800a750 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a606:	f7fb fd1b 	bl	8006040 <HAL_GetTick>
 800a60a:	4602      	mov	r2, r0
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a612:	429a      	cmp	r2, r3
 800a614:	d302      	bcc.n	800a61c <UART_WaitOnFlagUntilTimeout+0x32>
 800a616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d140      	bne.n	800a69e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a624:	e853 3f00 	ldrex	r3, [r3]
 800a628:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a62c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a630:	667b      	str	r3, [r7, #100]	; 0x64
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a63c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a642:	e841 2300 	strex	r3, r2, [r1]
 800a646:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e6      	bne.n	800a61c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3308      	adds	r3, #8
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	f023 0301 	bic.w	r3, r3, #1
 800a664:	663b      	str	r3, [r7, #96]	; 0x60
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3308      	adds	r3, #8
 800a66c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a66e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a670:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a676:	e841 2300 	strex	r3, r2, [r1]
 800a67a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e5      	bne.n	800a64e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2220      	movs	r2, #32
 800a686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e069      	b.n	800a772 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d051      	beq.n	800a750 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6ba:	d149      	bne.n	800a750 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	e853 3f00 	ldrex	r3, [r3]
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e6      	bne.n	800a6c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	613b      	str	r3, [r7, #16]
   return(result);
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	f023 0301 	bic.w	r3, r3, #1
 800a70e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3308      	adds	r3, #8
 800a716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a718:	623a      	str	r2, [r7, #32]
 800a71a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	69f9      	ldr	r1, [r7, #28]
 800a71e:	6a3a      	ldr	r2, [r7, #32]
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	61bb      	str	r3, [r7, #24]
   return(result);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e5      	bne.n	800a6f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2220      	movs	r2, #32
 800a730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e010      	b.n	800a772 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	69da      	ldr	r2, [r3, #28]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	4013      	ands	r3, r2
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	bf0c      	ite	eq
 800a760:	2301      	moveq	r3, #1
 800a762:	2300      	movne	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	461a      	mov	r2, r3
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	f43f af46 	beq.w	800a5fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3770      	adds	r7, #112	; 0x70
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b0a3      	sub	sp, #140	; 0x8c
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	4613      	mov	r3, r2
 800a788:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	88fa      	ldrh	r2, [r7, #6]
 800a794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	88fa      	ldrh	r2, [r7, #6]
 800a79c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ae:	d10e      	bne.n	800a7ce <UART_Start_Receive_IT+0x52>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d105      	bne.n	800a7c4 <UART_Start_Receive_IT+0x48>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a7be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7c2:	e02d      	b.n	800a820 <UART_Start_Receive_IT+0xa4>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	22ff      	movs	r2, #255	; 0xff
 800a7c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7cc:	e028      	b.n	800a820 <UART_Start_Receive_IT+0xa4>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10d      	bne.n	800a7f2 <UART_Start_Receive_IT+0x76>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d104      	bne.n	800a7e8 <UART_Start_Receive_IT+0x6c>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	22ff      	movs	r2, #255	; 0xff
 800a7e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7e6:	e01b      	b.n	800a820 <UART_Start_Receive_IT+0xa4>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	227f      	movs	r2, #127	; 0x7f
 800a7ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7f0:	e016      	b.n	800a820 <UART_Start_Receive_IT+0xa4>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7fa:	d10d      	bne.n	800a818 <UART_Start_Receive_IT+0x9c>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d104      	bne.n	800a80e <UART_Start_Receive_IT+0x92>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	227f      	movs	r2, #127	; 0x7f
 800a808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a80c:	e008      	b.n	800a820 <UART_Start_Receive_IT+0xa4>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	223f      	movs	r2, #63	; 0x3f
 800a812:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a816:	e003      	b.n	800a820 <UART_Start_Receive_IT+0xa4>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2222      	movs	r2, #34	; 0x22
 800a82c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3308      	adds	r3, #8
 800a836:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a83a:	e853 3f00 	ldrex	r3, [r3]
 800a83e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a842:	f043 0301 	orr.w	r3, r3, #1
 800a846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a854:	673a      	str	r2, [r7, #112]	; 0x70
 800a856:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a85a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a85c:	e841 2300 	strex	r3, r2, [r1]
 800a860:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e3      	bne.n	800a830 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a86c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a870:	d153      	bne.n	800a91a <UART_Start_Receive_IT+0x19e>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a878:	88fa      	ldrh	r2, [r7, #6]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d34d      	bcc.n	800a91a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a886:	d107      	bne.n	800a898 <UART_Start_Receive_IT+0x11c>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4a4b      	ldr	r2, [pc, #300]	; (800a9c0 <UART_Start_Receive_IT+0x244>)
 800a894:	671a      	str	r2, [r3, #112]	; 0x70
 800a896:	e002      	b.n	800a89e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4a4a      	ldr	r2, [pc, #296]	; (800a9c4 <UART_Start_Receive_IT+0x248>)
 800a89c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d01a      	beq.n	800a8e4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b6:	e853 3f00 	ldrex	r3, [r3]
 800a8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8d8:	e841 2300 	strex	r3, r2, [r1]
 800a8dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a8de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e4      	bne.n	800a8ae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3308      	adds	r3, #8
 800a902:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a904:	64ba      	str	r2, [r7, #72]	; 0x48
 800a906:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a90a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e5      	bne.n	800a8e4 <UART_Start_Receive_IT+0x168>
 800a918:	e04a      	b.n	800a9b0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a922:	d107      	bne.n	800a934 <UART_Start_Receive_IT+0x1b8>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4a26      	ldr	r2, [pc, #152]	; (800a9c8 <UART_Start_Receive_IT+0x24c>)
 800a930:	671a      	str	r2, [r3, #112]	; 0x70
 800a932:	e002      	b.n	800a93a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4a25      	ldr	r2, [pc, #148]	; (800a9cc <UART_Start_Receive_IT+0x250>)
 800a938:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d019      	beq.n	800a97e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	e853 3f00 	ldrex	r3, [r3]
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a95e:	677b      	str	r3, [r7, #116]	; 0x74
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	461a      	mov	r2, r3
 800a966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a968:	637b      	str	r3, [r7, #52]	; 0x34
 800a96a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a96e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a970:	e841 2300 	strex	r3, r2, [r1]
 800a974:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1e6      	bne.n	800a94a <UART_Start_Receive_IT+0x1ce>
 800a97c:	e018      	b.n	800a9b0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	e853 3f00 	ldrex	r3, [r3]
 800a98a:	613b      	str	r3, [r7, #16]
   return(result);
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	f043 0320 	orr.w	r3, r3, #32
 800a992:	67bb      	str	r3, [r7, #120]	; 0x78
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a99c:	623b      	str	r3, [r7, #32]
 800a99e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	69f9      	ldr	r1, [r7, #28]
 800a9a2:	6a3a      	ldr	r2, [r7, #32]
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e6      	bne.n	800a97e <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	378c      	adds	r7, #140	; 0x8c
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	0800b0e5 	.word	0x0800b0e5
 800a9c4:	0800ade9 	.word	0x0800ade9
 800a9c8:	0800ac83 	.word	0x0800ac83
 800a9cc:	0800ab1f 	.word	0x0800ab1f

0800a9d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b095      	sub	sp, #84	; 0x54
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a9f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e6      	bne.n	800a9d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa20:	f023 0301 	bic.w	r3, r3, #1
 800aa24:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e3      	bne.n	800aa0a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d118      	bne.n	800aa7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f023 0310 	bic.w	r3, r3, #16
 800aa5e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	461a      	mov	r2, r3
 800aa66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa68:	61bb      	str	r3, [r7, #24]
 800aa6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	6979      	ldr	r1, [r7, #20]
 800aa6e:	69ba      	ldr	r2, [r7, #24]
 800aa70:	e841 2300 	strex	r3, r2, [r1]
 800aa74:	613b      	str	r3, [r7, #16]
   return(result);
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e6      	bne.n	800aa4a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aa90:	bf00      	nop
 800aa92:	3754      	adds	r7, #84	; 0x54
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f7ff f996 	bl	8009dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aac0:	bf00      	nop
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b088      	sub	sp, #32
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae4:	61fb      	str	r3, [r7, #28]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	61bb      	str	r3, [r7, #24]
 800aaf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6979      	ldr	r1, [r7, #20]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	613b      	str	r3, [r7, #16]
   return(result);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e6      	bne.n	800aad0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff f961 	bl	8009dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab16:	bf00      	nop
 800ab18:	3720      	adds	r7, #32
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b096      	sub	sp, #88	; 0x58
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab36:	2b22      	cmp	r3, #34	; 0x22
 800ab38:	f040 8095 	bne.w	800ac66 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab46:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ab4a:	b2d9      	uxtb	r1, r3
 800ab4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab56:	400a      	ands	r2, r1
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d17a      	bne.n	800ac7a <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8c:	e853 3f00 	ldrex	r3, [r3]
 800ab90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab98:	653b      	str	r3, [r7, #80]	; 0x50
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba2:	647b      	str	r3, [r7, #68]	; 0x44
 800aba4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e6      	bne.n	800ab84 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3308      	adds	r3, #8
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	623b      	str	r3, [r7, #32]
   return(result);
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3308      	adds	r3, #8
 800abd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abd6:	633a      	str	r2, [r7, #48]	; 0x30
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e5      	bne.n	800abb6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d12e      	bne.n	800ac5e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f023 0310 	bic.w	r3, r3, #16
 800ac1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	461a      	mov	r2, r3
 800ac22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac24:	61fb      	str	r3, [r7, #28]
 800ac26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	69b9      	ldr	r1, [r7, #24]
 800ac2a:	69fa      	ldr	r2, [r7, #28]
 800ac2c:	e841 2300 	strex	r3, r2, [r1]
 800ac30:	617b      	str	r3, [r7, #20]
   return(result);
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e6      	bne.n	800ac06 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	f003 0310 	and.w	r3, r3, #16
 800ac42:	2b10      	cmp	r3, #16
 800ac44:	d103      	bne.n	800ac4e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2210      	movs	r2, #16
 800ac4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff f8d2 	bl	8009e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac5c:	e00d      	b.n	800ac7a <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7fb f8d6 	bl	8005e10 <HAL_UART_RxCpltCallback>
}
 800ac64:	e009      	b.n	800ac7a <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	8b1b      	ldrh	r3, [r3, #24]
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0208 	orr.w	r2, r2, #8
 800ac76:	b292      	uxth	r2, r2
 800ac78:	831a      	strh	r2, [r3, #24]
}
 800ac7a:	bf00      	nop
 800ac7c:	3758      	adds	r7, #88	; 0x58
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b096      	sub	sp, #88	; 0x58
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9a:	2b22      	cmp	r3, #34	; 0x22
 800ac9c:	f040 8095 	bne.w	800adca <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aca6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acae:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800acb0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800acb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800acb8:	4013      	ands	r3, r2
 800acba:	b29a      	uxth	r2, r3
 800acbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acbe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc4:	1c9a      	adds	r2, r3, #2
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	3b01      	subs	r3, #1
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d17a      	bne.n	800adde <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad06:	643b      	str	r3, [r7, #64]	; 0x40
 800ad08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e6      	bne.n	800ace8 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3308      	adds	r3, #8
 800ad20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	f023 0301 	bic.w	r3, r3, #1
 800ad30:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3308      	adds	r3, #8
 800ad38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad42:	e841 2300 	strex	r3, r2, [r1]
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e5      	bne.n	800ad1a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2220      	movs	r2, #32
 800ad52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d12e      	bne.n	800adc2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f023 0310 	bic.w	r3, r3, #16
 800ad7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad88:	61bb      	str	r3, [r7, #24]
 800ad8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6979      	ldr	r1, [r7, #20]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	613b      	str	r3, [r7, #16]
   return(result);
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e6      	bne.n	800ad6a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f003 0310 	and.w	r3, r3, #16
 800ada6:	2b10      	cmp	r3, #16
 800ada8:	d103      	bne.n	800adb2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2210      	movs	r2, #16
 800adb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff f820 	bl	8009e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adc0:	e00d      	b.n	800adde <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fb f824 	bl	8005e10 <HAL_UART_RxCpltCallback>
}
 800adc8:	e009      	b.n	800adde <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	8b1b      	ldrh	r3, [r3, #24]
 800add0:	b29a      	uxth	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f042 0208 	orr.w	r2, r2, #8
 800adda:	b292      	uxth	r2, r2
 800addc:	831a      	strh	r2, [r3, #24]
}
 800adde:	bf00      	nop
 800ade0:	3758      	adds	r7, #88	; 0x58
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b0a6      	sub	sp, #152	; 0x98
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adf6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1e:	2b22      	cmp	r3, #34	; 0x22
 800ae20:	f040 814f 	bne.w	800b0c2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ae2a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae2e:	e0f6      	b.n	800b01e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae36:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae3a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ae3e:	b2d9      	uxtb	r1, r3
 800ae40:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4a:	400a      	ands	r2, r1
 800ae4c:	b2d2      	uxtb	r2, r2
 800ae4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d053      	beq.n	800af2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d011      	beq.n	800aeb2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ae8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00b      	beq.n	800aeb2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea8:	f043 0201 	orr.w	r2, r3, #1
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aeb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aeb6:	f003 0302 	and.w	r3, r3, #2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d011      	beq.n	800aee2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800aebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00b      	beq.n	800aee2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2202      	movs	r2, #2
 800aed0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aed8:	f043 0204 	orr.w	r2, r3, #4
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aee6:	f003 0304 	and.w	r3, r3, #4
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d011      	beq.n	800af12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aeee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00b      	beq.n	800af12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2204      	movs	r2, #4
 800af00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af08:	f043 0202 	orr.w	r2, r3, #2
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d006      	beq.n	800af2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7fe ff65 	bl	8009dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af30:	b29b      	uxth	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d173      	bne.n	800b01e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af3e:	e853 3f00 	ldrex	r3, [r3]
 800af42:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800af44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af58:	66bb      	str	r3, [r7, #104]	; 0x68
 800af5a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800af5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af60:	e841 2300 	strex	r3, r2, [r1]
 800af64:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800af66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1e4      	bne.n	800af36 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3308      	adds	r3, #8
 800af72:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af76:	e853 3f00 	ldrex	r3, [r3]
 800af7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800af7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af82:	f023 0301 	bic.w	r3, r3, #1
 800af86:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3308      	adds	r3, #8
 800af8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800af90:	657a      	str	r2, [r7, #84]	; 0x54
 800af92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af98:	e841 2300 	strex	r3, r2, [r1]
 800af9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e3      	bne.n	800af6c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d12e      	bne.n	800b018 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	f023 0310 	bic.w	r3, r3, #16
 800afd4:	67bb      	str	r3, [r7, #120]	; 0x78
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afde:	643b      	str	r3, [r7, #64]	; 0x40
 800afe0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e6      	bne.n	800afc0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	f003 0310 	and.w	r3, r3, #16
 800affc:	2b10      	cmp	r3, #16
 800affe:	d103      	bne.n	800b008 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2210      	movs	r2, #16
 800b006:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7fe fef5 	bl	8009e00 <HAL_UARTEx_RxEventCallback>
 800b016:	e002      	b.n	800b01e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7fa fef9 	bl	8005e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b01e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b022:	2b00      	cmp	r3, #0
 800b024:	d006      	beq.n	800b034 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b02a:	f003 0320 	and.w	r3, r3, #32
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f47f aefe 	bne.w	800ae30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b03a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b03e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b042:	2b00      	cmp	r3, #0
 800b044:	d047      	beq.n	800b0d6 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b04c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b050:	429a      	cmp	r2, r3
 800b052:	d240      	bcs.n	800b0d6 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3308      	adds	r3, #8
 800b05a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	e853 3f00 	ldrex	r3, [r3]
 800b062:	61fb      	str	r3, [r7, #28]
   return(result);
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b06a:	673b      	str	r3, [r7, #112]	; 0x70
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3308      	adds	r3, #8
 800b072:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b074:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b07c:	e841 2300 	strex	r3, r2, [r1]
 800b080:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1e5      	bne.n	800b054 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a15      	ldr	r2, [pc, #84]	; (800b0e0 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800b08c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	e853 3f00 	ldrex	r3, [r3]
 800b09a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	f043 0320 	orr.w	r3, r3, #32
 800b0a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ac:	61bb      	str	r3, [r7, #24]
 800b0ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6979      	ldr	r1, [r7, #20]
 800b0b2:	69ba      	ldr	r2, [r7, #24]
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e6      	bne.n	800b08e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0c0:	e009      	b.n	800b0d6 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	8b1b      	ldrh	r3, [r3, #24]
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f042 0208 	orr.w	r2, r2, #8
 800b0d2:	b292      	uxth	r2, r2
 800b0d4:	831a      	strh	r2, [r3, #24]
}
 800b0d6:	bf00      	nop
 800b0d8:	3798      	adds	r7, #152	; 0x98
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	0800ab1f 	.word	0x0800ab1f

0800b0e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b0a8      	sub	sp, #160	; 0xa0
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0f2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	69db      	ldr	r3, [r3, #28]
 800b0fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b11a:	2b22      	cmp	r3, #34	; 0x22
 800b11c:	f040 8153 	bne.w	800b3c6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b126:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b12a:	e0fa      	b.n	800b322 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b132:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b13e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b142:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b146:	4013      	ands	r3, r2
 800b148:	b29a      	uxth	r2, r3
 800b14a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b14e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b154:	1c9a      	adds	r2, r3, #2
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b160:	b29b      	uxth	r3, r3
 800b162:	3b01      	subs	r3, #1
 800b164:	b29a      	uxth	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b17a:	f003 0307 	and.w	r3, r3, #7
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d053      	beq.n	800b22a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b182:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d011      	beq.n	800b1b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b18e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00b      	beq.n	800b1b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1a8:	f043 0201 	orr.w	r2, r3, #1
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1b6:	f003 0302 	and.w	r3, r3, #2
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d011      	beq.n	800b1e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b1be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1d8:	f043 0204 	orr.w	r2, r3, #4
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d011      	beq.n	800b212 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b1ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00b      	beq.n	800b212 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2204      	movs	r2, #4
 800b200:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b208:	f043 0202 	orr.w	r2, r3, #2
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7fe fde5 	bl	8009dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b230:	b29b      	uxth	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d175      	bne.n	800b322 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b24a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b25a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b25e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b260:	e841 2300 	strex	r3, r2, [r1]
 800b264:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1e4      	bne.n	800b236 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b276:	e853 3f00 	ldrex	r3, [r3]
 800b27a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b27e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b282:	f023 0301 	bic.w	r3, r3, #1
 800b286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3308      	adds	r3, #8
 800b290:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b294:	65ba      	str	r2, [r7, #88]	; 0x58
 800b296:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b29a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b29c:	e841 2300 	strex	r3, r2, [r1]
 800b2a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e1      	bne.n	800b26c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2220      	movs	r2, #32
 800b2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d12e      	bne.n	800b31c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	f023 0310 	bic.w	r3, r3, #16
 800b2d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b2e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e6      	bne.n	800b2c4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2b10      	cmp	r3, #16
 800b302:	d103      	bne.n	800b30c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2210      	movs	r2, #16
 800b30a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7fe fd73 	bl	8009e00 <HAL_UARTEx_RxEventCallback>
 800b31a:	e002      	b.n	800b322 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7fa fd77 	bl	8005e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b322:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b326:	2b00      	cmp	r3, #0
 800b328:	d006      	beq.n	800b338 <UART_RxISR_16BIT_FIFOEN+0x254>
 800b32a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b32e:	f003 0320 	and.w	r3, r3, #32
 800b332:	2b00      	cmp	r3, #0
 800b334:	f47f aefa 	bne.w	800b12c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b33e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b342:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b346:	2b00      	cmp	r3, #0
 800b348:	d047      	beq.n	800b3da <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b350:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b354:	429a      	cmp	r2, r3
 800b356:	d240      	bcs.n	800b3da <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3308      	adds	r3, #8
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	e853 3f00 	ldrex	r3, [r3]
 800b366:	623b      	str	r3, [r7, #32]
   return(result);
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b36e:	677b      	str	r3, [r7, #116]	; 0x74
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3308      	adds	r3, #8
 800b376:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b378:	633a      	str	r2, [r7, #48]	; 0x30
 800b37a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b37e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e5      	bne.n	800b358 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a15      	ldr	r2, [pc, #84]	; (800b3e4 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800b390:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	e853 3f00 	ldrex	r3, [r3]
 800b39e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f043 0320 	orr.w	r3, r3, #32
 800b3a6:	673b      	str	r3, [r7, #112]	; 0x70
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3b0:	61fb      	str	r3, [r7, #28]
 800b3b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	69b9      	ldr	r1, [r7, #24]
 800b3b6:	69fa      	ldr	r2, [r7, #28]
 800b3b8:	e841 2300 	strex	r3, r2, [r1]
 800b3bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1e6      	bne.n	800b392 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3c4:	e009      	b.n	800b3da <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	8b1b      	ldrh	r3, [r3, #24]
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f042 0208 	orr.w	r2, r2, #8
 800b3d6:	b292      	uxth	r2, r2
 800b3d8:	831a      	strh	r2, [r3, #24]
}
 800b3da:	bf00      	nop
 800b3dc:	37a0      	adds	r7, #160	; 0xa0
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800ac83 	.word	0x0800ac83

0800b3e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b432:	2b01      	cmp	r3, #1
 800b434:	d101      	bne.n	800b43a <HAL_UARTEx_DisableFifoMode+0x16>
 800b436:	2302      	movs	r3, #2
 800b438:	e027      	b.n	800b48a <HAL_UARTEx_DisableFifoMode+0x66>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2224      	movs	r2, #36	; 0x24
 800b446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f022 0201 	bic.w	r2, r2, #1
 800b460:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b468:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2220      	movs	r2, #32
 800b47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d101      	bne.n	800b4ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	e02d      	b.n	800b50a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2224      	movs	r2, #36	; 0x24
 800b4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0201 	bic.w	r2, r2, #1
 800b4d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f850 	bl	800b590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b522:	2b01      	cmp	r3, #1
 800b524:	d101      	bne.n	800b52a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b526:	2302      	movs	r3, #2
 800b528:	e02d      	b.n	800b586 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2224      	movs	r2, #36	; 0x24
 800b536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f022 0201 	bic.w	r2, r2, #1
 800b550:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	430a      	orrs	r2, r1
 800b564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f812 	bl	800b590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2220      	movs	r2, #32
 800b578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d108      	bne.n	800b5b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5b0:	e031      	b.n	800b616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5b2:	2308      	movs	r3, #8
 800b5b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5b6:	2308      	movs	r3, #8
 800b5b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	0e5b      	lsrs	r3, r3, #25
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	0f5b      	lsrs	r3, r3, #29
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0307 	and.w	r3, r3, #7
 800b5d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5da:	7bbb      	ldrb	r3, [r7, #14]
 800b5dc:	7b3a      	ldrb	r2, [r7, #12]
 800b5de:	4911      	ldr	r1, [pc, #68]	; (800b624 <UARTEx_SetNbDataToProcess+0x94>)
 800b5e0:	5c8a      	ldrb	r2, [r1, r2]
 800b5e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5e6:	7b3a      	ldrb	r2, [r7, #12]
 800b5e8:	490f      	ldr	r1, [pc, #60]	; (800b628 <UARTEx_SetNbDataToProcess+0x98>)
 800b5ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	7b7a      	ldrb	r2, [r7, #13]
 800b5fc:	4909      	ldr	r1, [pc, #36]	; (800b624 <UARTEx_SetNbDataToProcess+0x94>)
 800b5fe:	5c8a      	ldrb	r2, [r1, r2]
 800b600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b604:	7b7a      	ldrb	r2, [r7, #13]
 800b606:	4908      	ldr	r1, [pc, #32]	; (800b628 <UARTEx_SetNbDataToProcess+0x98>)
 800b608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b60a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b60e:	b29a      	uxth	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b616:	bf00      	nop
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	08013718 	.word	0x08013718
 800b628:	08013720 	.word	0x08013720

0800b62c <__NVIC_SetPriority>:
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	6039      	str	r1, [r7, #0]
 800b636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	db0a      	blt.n	800b656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	b2da      	uxtb	r2, r3
 800b644:	490c      	ldr	r1, [pc, #48]	; (800b678 <__NVIC_SetPriority+0x4c>)
 800b646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b64a:	0112      	lsls	r2, r2, #4
 800b64c:	b2d2      	uxtb	r2, r2
 800b64e:	440b      	add	r3, r1
 800b650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b654:	e00a      	b.n	800b66c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	4908      	ldr	r1, [pc, #32]	; (800b67c <__NVIC_SetPriority+0x50>)
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	f003 030f 	and.w	r3, r3, #15
 800b662:	3b04      	subs	r3, #4
 800b664:	0112      	lsls	r2, r2, #4
 800b666:	b2d2      	uxtb	r2, r2
 800b668:	440b      	add	r3, r1
 800b66a:	761a      	strb	r2, [r3, #24]
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	e000e100 	.word	0xe000e100
 800b67c:	e000ed00 	.word	0xe000ed00

0800b680 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b684:	4b05      	ldr	r3, [pc, #20]	; (800b69c <SysTick_Handler+0x1c>)
 800b686:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b688:	f002 f9e0 	bl	800da4c <xTaskGetSchedulerState>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d001      	beq.n	800b696 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b692:	f003 f8c9 	bl	800e828 <xPortSysTickHandler>
  }
}
 800b696:	bf00      	nop
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	e000e010 	.word	0xe000e010

0800b6a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	f06f 0004 	mvn.w	r0, #4
 800b6aa:	f7ff ffbf 	bl	800b62c <__NVIC_SetPriority>
#endif
}
 800b6ae:	bf00      	nop
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ba:	f3ef 8305 	mrs	r3, IPSR
 800b6be:	603b      	str	r3, [r7, #0]
  return(result);
 800b6c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b6c6:	f06f 0305 	mvn.w	r3, #5
 800b6ca:	607b      	str	r3, [r7, #4]
 800b6cc:	e00c      	b.n	800b6e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <osKernelInitialize+0x44>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d105      	bne.n	800b6e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b6d6:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <osKernelInitialize+0x44>)
 800b6d8:	2201      	movs	r2, #1
 800b6da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	607b      	str	r3, [r7, #4]
 800b6e0:	e002      	b.n	800b6e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b6e8:	687b      	ldr	r3, [r7, #4]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	200005c8 	.word	0x200005c8

0800b6fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b702:	f3ef 8305 	mrs	r3, IPSR
 800b706:	603b      	str	r3, [r7, #0]
  return(result);
 800b708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b70e:	f06f 0305 	mvn.w	r3, #5
 800b712:	607b      	str	r3, [r7, #4]
 800b714:	e010      	b.n	800b738 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <osKernelStart+0x48>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d109      	bne.n	800b732 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b71e:	f7ff ffbf 	bl	800b6a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b722:	4b08      	ldr	r3, [pc, #32]	; (800b744 <osKernelStart+0x48>)
 800b724:	2202      	movs	r2, #2
 800b726:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b728:	f001 fd38 	bl	800d19c <vTaskStartScheduler>
      stat = osOK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	607b      	str	r3, [r7, #4]
 800b730:	e002      	b.n	800b738 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b732:	f04f 33ff 	mov.w	r3, #4294967295
 800b736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b738:	687b      	ldr	r3, [r7, #4]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	200005c8 	.word	0x200005c8

0800b748 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08e      	sub	sp, #56	; 0x38
 800b74c:	af04      	add	r7, sp, #16
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b754:	2300      	movs	r3, #0
 800b756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b758:	f3ef 8305 	mrs	r3, IPSR
 800b75c:	617b      	str	r3, [r7, #20]
  return(result);
 800b75e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b760:	2b00      	cmp	r3, #0
 800b762:	d17e      	bne.n	800b862 <osThreadNew+0x11a>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d07b      	beq.n	800b862 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b76a:	2380      	movs	r3, #128	; 0x80
 800b76c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b76e:	2318      	movs	r3, #24
 800b770:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b772:	2300      	movs	r3, #0
 800b774:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295
 800b77a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d045      	beq.n	800b80e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <osThreadNew+0x48>
        name = attr->name;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d008      	beq.n	800b7b6 <osThreadNew+0x6e>
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b38      	cmp	r3, #56	; 0x38
 800b7a8:	d805      	bhi.n	800b7b6 <osThreadNew+0x6e>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <osThreadNew+0x72>
        return (NULL);
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e054      	b.n	800b864 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	089b      	lsrs	r3, r3, #2
 800b7c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00e      	beq.n	800b7f0 <osThreadNew+0xa8>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	2b5b      	cmp	r3, #91	; 0x5b
 800b7d8:	d90a      	bls.n	800b7f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d006      	beq.n	800b7f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <osThreadNew+0xa8>
        mem = 1;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	61bb      	str	r3, [r7, #24]
 800b7ee:	e010      	b.n	800b812 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10c      	bne.n	800b812 <osThreadNew+0xca>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d108      	bne.n	800b812 <osThreadNew+0xca>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d104      	bne.n	800b812 <osThreadNew+0xca>
          mem = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	61bb      	str	r3, [r7, #24]
 800b80c:	e001      	b.n	800b812 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d110      	bne.n	800b83a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b820:	9202      	str	r2, [sp, #8]
 800b822:	9301      	str	r3, [sp, #4]
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6a3a      	ldr	r2, [r7, #32]
 800b82c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f001 fade 	bl	800cdf0 <xTaskCreateStatic>
 800b834:	4603      	mov	r3, r0
 800b836:	613b      	str	r3, [r7, #16]
 800b838:	e013      	b.n	800b862 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d110      	bne.n	800b862 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	b29a      	uxth	r2, r3
 800b844:	f107 0310 	add.w	r3, r7, #16
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f001 fb29 	bl	800ceaa <xTaskCreate>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d001      	beq.n	800b862 <osThreadNew+0x11a>
            hTask = NULL;
 800b85e:	2300      	movs	r3, #0
 800b860:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b862:	693b      	ldr	r3, [r7, #16]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3728      	adds	r7, #40	; 0x28
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b874:	f3ef 8305 	mrs	r3, IPSR
 800b878:	60bb      	str	r3, [r7, #8]
  return(result);
 800b87a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d003      	beq.n	800b888 <osDelay+0x1c>
    stat = osErrorISR;
 800b880:	f06f 0305 	mvn.w	r3, #5
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	e007      	b.n	800b898 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f001 fc4e 	bl	800d134 <vTaskDelay>
    }
  }

  return (stat);
 800b898:	68fb      	ldr	r3, [r7, #12]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b088      	sub	sp, #32
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8b4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d174      	bne.n	800b9a4 <osMutexNew+0x102>
    if (attr != NULL) {
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	61bb      	str	r3, [r7, #24]
 800b8c6:	e001      	b.n	800b8cc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <osMutexNew+0x3a>
      rmtx = 1U;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e001      	b.n	800b8e0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	f003 0308 	and.w	r3, r3, #8
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d15c      	bne.n	800b9a4 <osMutexNew+0x102>
      mem = -1;
 800b8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ee:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d015      	beq.n	800b922 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d006      	beq.n	800b90c <osMutexNew+0x6a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	2b4f      	cmp	r3, #79	; 0x4f
 800b904:	d902      	bls.n	800b90c <osMutexNew+0x6a>
          mem = 1;
 800b906:	2301      	movs	r3, #1
 800b908:	613b      	str	r3, [r7, #16]
 800b90a:	e00c      	b.n	800b926 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d108      	bne.n	800b926 <osMutexNew+0x84>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d104      	bne.n	800b926 <osMutexNew+0x84>
            mem = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	613b      	str	r3, [r7, #16]
 800b920:	e001      	b.n	800b926 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d112      	bne.n	800b952 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	4619      	mov	r1, r3
 800b938:	2004      	movs	r0, #4
 800b93a:	f000 fc48 	bl	800c1ce <xQueueCreateMutexStatic>
 800b93e:	61f8      	str	r0, [r7, #28]
 800b940:	e016      	b.n	800b970 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	4619      	mov	r1, r3
 800b948:	2001      	movs	r0, #1
 800b94a:	f000 fc40 	bl	800c1ce <xQueueCreateMutexStatic>
 800b94e:	61f8      	str	r0, [r7, #28]
 800b950:	e00e      	b.n	800b970 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10b      	bne.n	800b970 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d004      	beq.n	800b968 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b95e:	2004      	movs	r0, #4
 800b960:	f000 fc1d 	bl	800c19e <xQueueCreateMutex>
 800b964:	61f8      	str	r0, [r7, #28]
 800b966:	e003      	b.n	800b970 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b968:	2001      	movs	r0, #1
 800b96a:	f000 fc18 	bl	800c19e <xQueueCreateMutex>
 800b96e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00c      	beq.n	800b990 <osMutexNew+0xee>
        if (attr != NULL) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <osMutexNew+0xe2>
          name = attr->name;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	60fb      	str	r3, [r7, #12]
 800b982:	e001      	b.n	800b988 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b988:	68f9      	ldr	r1, [r7, #12]
 800b98a:	69f8      	ldr	r0, [r7, #28]
 800b98c:	f001 f9d2 	bl	800cd34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d006      	beq.n	800b9a4 <osMutexNew+0x102>
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	f043 0301 	orr.w	r3, r3, #1
 800b9a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b9a4:	69fb      	ldr	r3, [r7, #28]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3720      	adds	r7, #32
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b086      	sub	sp, #24
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f023 0301 	bic.w	r3, r3, #1
 800b9be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f003 0301 	and.w	r3, r3, #1
 800b9c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9cc:	f3ef 8305 	mrs	r3, IPSR
 800b9d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d003      	beq.n	800b9e0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b9d8:	f06f 0305 	mvn.w	r3, #5
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	e02c      	b.n	800ba3a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d103      	bne.n	800b9ee <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b9e6:	f06f 0303 	mvn.w	r3, #3
 800b9ea:	617b      	str	r3, [r7, #20]
 800b9ec:	e025      	b.n	800ba3a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d011      	beq.n	800ba18 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6938      	ldr	r0, [r7, #16]
 800b9f8:	f000 fc38 	bl	800c26c <xQueueTakeMutexRecursive>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d01b      	beq.n	800ba3a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ba08:	f06f 0301 	mvn.w	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	e014      	b.n	800ba3a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ba10:	f06f 0302 	mvn.w	r3, #2
 800ba14:	617b      	str	r3, [r7, #20]
 800ba16:	e010      	b.n	800ba3a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6938      	ldr	r0, [r7, #16]
 800ba1c:	f000 fed6 	bl	800c7cc <xQueueSemaphoreTake>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d009      	beq.n	800ba3a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ba2c:	f06f 0301 	mvn.w	r3, #1
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	e002      	b.n	800ba3a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ba34:	f06f 0302 	mvn.w	r3, #2
 800ba38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ba3a:	697b      	ldr	r3, [r7, #20]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f023 0301 	bic.w	r3, r3, #1
 800ba52:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba60:	f3ef 8305 	mrs	r3, IPSR
 800ba64:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba66:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ba6c:	f06f 0305 	mvn.w	r3, #5
 800ba70:	617b      	str	r3, [r7, #20]
 800ba72:	e01f      	b.n	800bab4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d103      	bne.n	800ba82 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ba7a:	f06f 0303 	mvn.w	r3, #3
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	e018      	b.n	800bab4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d009      	beq.n	800ba9c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ba88:	6938      	ldr	r0, [r7, #16]
 800ba8a:	f000 fbbb 	bl	800c204 <xQueueGiveMutexRecursive>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d00f      	beq.n	800bab4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ba94:	f06f 0302 	mvn.w	r3, #2
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	e00b      	b.n	800bab4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2100      	movs	r1, #0
 800baa2:	6938      	ldr	r0, [r7, #16]
 800baa4:	f000 fc18 	bl	800c2d8 <xQueueGenericSend>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d002      	beq.n	800bab4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800baae:	f06f 0302 	mvn.w	r3, #2
 800bab2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bab4:	697b      	ldr	r3, [r7, #20]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800babe:	b580      	push	{r7, lr}
 800bac0:	b08a      	sub	sp, #40	; 0x28
 800bac2:	af02      	add	r7, sp, #8
 800bac4:	60f8      	str	r0, [r7, #12]
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800baca:	2300      	movs	r3, #0
 800bacc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bace:	f3ef 8305 	mrs	r3, IPSR
 800bad2:	613b      	str	r3, [r7, #16]
  return(result);
 800bad4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d15f      	bne.n	800bb9a <osMessageQueueNew+0xdc>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d05c      	beq.n	800bb9a <osMessageQueueNew+0xdc>
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d059      	beq.n	800bb9a <osMessageQueueNew+0xdc>
    mem = -1;
 800bae6:	f04f 33ff 	mov.w	r3, #4294967295
 800baea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d029      	beq.n	800bb46 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d012      	beq.n	800bb20 <osMessageQueueNew+0x62>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	2b4f      	cmp	r3, #79	; 0x4f
 800bb00:	d90e      	bls.n	800bb20 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00a      	beq.n	800bb20 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	695a      	ldr	r2, [r3, #20]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	68b9      	ldr	r1, [r7, #8]
 800bb12:	fb01 f303 	mul.w	r3, r1, r3
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d302      	bcc.n	800bb20 <osMessageQueueNew+0x62>
        mem = 1;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	61bb      	str	r3, [r7, #24]
 800bb1e:	e014      	b.n	800bb4a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d110      	bne.n	800bb4a <osMessageQueueNew+0x8c>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10c      	bne.n	800bb4a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d108      	bne.n	800bb4a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d104      	bne.n	800bb4a <osMessageQueueNew+0x8c>
          mem = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	61bb      	str	r3, [r7, #24]
 800bb44:	e001      	b.n	800bb4a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d10b      	bne.n	800bb68 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	691a      	ldr	r2, [r3, #16]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	2100      	movs	r1, #0
 800bb5a:	9100      	str	r1, [sp, #0]
 800bb5c:	68b9      	ldr	r1, [r7, #8]
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 fa2e 	bl	800bfc0 <xQueueGenericCreateStatic>
 800bb64:	61f8      	str	r0, [r7, #28]
 800bb66:	e008      	b.n	800bb7a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d105      	bne.n	800bb7a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bb6e:	2200      	movs	r2, #0
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 fa9c 	bl	800c0b0 <xQueueGenericCreate>
 800bb78:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00c      	beq.n	800bb9a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <osMessageQueueNew+0xd0>
        name = attr->name;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	e001      	b.n	800bb92 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bb92:	6979      	ldr	r1, [r7, #20]
 800bb94:	69f8      	ldr	r0, [r7, #28]
 800bb96:	f001 f8cd 	bl	800cd34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bb9a:	69fb      	ldr	r3, [r7, #28]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3720      	adds	r7, #32
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b088      	sub	sp, #32
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	603b      	str	r3, [r7, #0]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbbc:	f3ef 8305 	mrs	r3, IPSR
 800bbc0:	617b      	str	r3, [r7, #20]
  return(result);
 800bbc2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d028      	beq.n	800bc1a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d005      	beq.n	800bbda <osMessageQueuePut+0x36>
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <osMessageQueuePut+0x36>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bbda:	f06f 0303 	mvn.w	r3, #3
 800bbde:	61fb      	str	r3, [r7, #28]
 800bbe0:	e038      	b.n	800bc54 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bbe6:	f107 0210 	add.w	r2, r7, #16
 800bbea:	2300      	movs	r3, #0
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	69b8      	ldr	r0, [r7, #24]
 800bbf0:	f000 fc70 	bl	800c4d4 <xQueueGenericSendFromISR>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d003      	beq.n	800bc02 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bbfa:	f06f 0302 	mvn.w	r3, #2
 800bbfe:	61fb      	str	r3, [r7, #28]
 800bc00:	e028      	b.n	800bc54 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d025      	beq.n	800bc54 <osMessageQueuePut+0xb0>
 800bc08:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <osMessageQueuePut+0xbc>)
 800bc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	e01c      	b.n	800bc54 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <osMessageQueuePut+0x82>
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d103      	bne.n	800bc2e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bc26:	f06f 0303 	mvn.w	r3, #3
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	e012      	b.n	800bc54 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc2e:	2300      	movs	r3, #0
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	68b9      	ldr	r1, [r7, #8]
 800bc34:	69b8      	ldr	r0, [r7, #24]
 800bc36:	f000 fb4f 	bl	800c2d8 <xQueueGenericSend>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d009      	beq.n	800bc54 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bc46:	f06f 0301 	mvn.w	r3, #1
 800bc4a:	61fb      	str	r3, [r7, #28]
 800bc4c:	e002      	b.n	800bc54 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bc4e:	f06f 0302 	mvn.w	r3, #2
 800bc52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bc54:	69fb      	ldr	r3, [r7, #28]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3720      	adds	r7, #32
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	e000ed04 	.word	0xe000ed04

0800bc64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc7a:	f3ef 8305 	mrs	r3, IPSR
 800bc7e:	617b      	str	r3, [r7, #20]
  return(result);
 800bc80:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d028      	beq.n	800bcd8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d005      	beq.n	800bc98 <osMessageQueueGet+0x34>
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <osMessageQueueGet+0x34>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d003      	beq.n	800bca0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bc98:	f06f 0303 	mvn.w	r3, #3
 800bc9c:	61fb      	str	r3, [r7, #28]
 800bc9e:	e037      	b.n	800bd10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bca4:	f107 0310 	add.w	r3, r7, #16
 800bca8:	461a      	mov	r2, r3
 800bcaa:	68b9      	ldr	r1, [r7, #8]
 800bcac:	69b8      	ldr	r0, [r7, #24]
 800bcae:	f000 fe99 	bl	800c9e4 <xQueueReceiveFromISR>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d003      	beq.n	800bcc0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bcb8:	f06f 0302 	mvn.w	r3, #2
 800bcbc:	61fb      	str	r3, [r7, #28]
 800bcbe:	e027      	b.n	800bd10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d024      	beq.n	800bd10 <osMessageQueueGet+0xac>
 800bcc6:	4b15      	ldr	r3, [pc, #84]	; (800bd1c <osMessageQueueGet+0xb8>)
 800bcc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	e01b      	b.n	800bd10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <osMessageQueueGet+0x80>
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d103      	bne.n	800bcec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bce4:	f06f 0303 	mvn.w	r3, #3
 800bce8:	61fb      	str	r3, [r7, #28]
 800bcea:	e011      	b.n	800bd10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	68b9      	ldr	r1, [r7, #8]
 800bcf0:	69b8      	ldr	r0, [r7, #24]
 800bcf2:	f000 fc8b 	bl	800c60c <xQueueReceive>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d009      	beq.n	800bd10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bd02:	f06f 0301 	mvn.w	r3, #1
 800bd06:	61fb      	str	r3, [r7, #28]
 800bd08:	e002      	b.n	800bd10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bd0a:	f06f 0302 	mvn.w	r3, #2
 800bd0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bd10:	69fb      	ldr	r3, [r7, #28]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3720      	adds	r7, #32
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	e000ed04 	.word	0xe000ed04

0800bd20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4a07      	ldr	r2, [pc, #28]	; (800bd4c <vApplicationGetIdleTaskMemory+0x2c>)
 800bd30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	4a06      	ldr	r2, [pc, #24]	; (800bd50 <vApplicationGetIdleTaskMemory+0x30>)
 800bd36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2280      	movs	r2, #128	; 0x80
 800bd3c:	601a      	str	r2, [r3, #0]
}
 800bd3e:	bf00      	nop
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	200005cc 	.word	0x200005cc
 800bd50:	20000628 	.word	0x20000628

0800bd54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4a07      	ldr	r2, [pc, #28]	; (800bd80 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	4a06      	ldr	r2, [pc, #24]	; (800bd84 <vApplicationGetTimerTaskMemory+0x30>)
 800bd6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd72:	601a      	str	r2, [r3, #0]
}
 800bd74:	bf00      	nop
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	20000828 	.word	0x20000828
 800bd84:	20000884 	.word	0x20000884

0800bd88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f103 0208 	add.w	r2, r3, #8
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bda0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f103 0208 	add.w	r2, r3, #8
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f103 0208 	add.w	r2, r3, #8
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bdd6:	bf00      	nop
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bde2:	b480      	push	{r7}
 800bde4:	b085      	sub	sp, #20
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
 800bdea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	689a      	ldr	r2, [r3, #8]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	601a      	str	r2, [r3, #0]
}
 800be1e:	bf00      	nop
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be2a:	b480      	push	{r7}
 800be2c:	b085      	sub	sp, #20
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be40:	d103      	bne.n	800be4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	e00c      	b.n	800be64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3308      	adds	r3, #8
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	e002      	b.n	800be58 <vListInsert+0x2e>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	60fb      	str	r3, [r7, #12]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	429a      	cmp	r2, r3
 800be62:	d2f6      	bcs.n	800be52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	685a      	ldr	r2, [r3, #4]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	601a      	str	r2, [r3, #0]
}
 800be90:	bf00      	nop
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	6892      	ldr	r2, [r2, #8]
 800beb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	6852      	ldr	r2, [r2, #4]
 800bebc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d103      	bne.n	800bed0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	1e5a      	subs	r2, r3, #1
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10a      	bne.n	800bf1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf16:	bf00      	nop
 800bf18:	e7fe      	b.n	800bf18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf1a:	f002 fbf3 	bl	800e704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf2a:	fb01 f303 	mul.w	r3, r1, r3
 800bf2e:	441a      	add	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	68f9      	ldr	r1, [r7, #12]
 800bf4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf50:	fb01 f303 	mul.w	r3, r1, r3
 800bf54:	441a      	add	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	22ff      	movs	r2, #255	; 0xff
 800bf5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	22ff      	movs	r2, #255	; 0xff
 800bf66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d114      	bne.n	800bf9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d01a      	beq.n	800bfae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3310      	adds	r3, #16
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 fb97 	bl	800d6b0 <xTaskRemoveFromEventList>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d012      	beq.n	800bfae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf88:	4b0c      	ldr	r3, [pc, #48]	; (800bfbc <xQueueGenericReset+0xcc>)
 800bf8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	e009      	b.n	800bfae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3310      	adds	r3, #16
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff fef2 	bl	800bd88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3324      	adds	r3, #36	; 0x24
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff feed 	bl	800bd88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bfae:	f002 fbd9 	bl	800e764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bfb2:	2301      	movs	r3, #1
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	e000ed04 	.word	0xe000ed04

0800bfc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08e      	sub	sp, #56	; 0x38
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10a      	bne.n	800c006 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <xQueueGenericCreateStatic+0x52>
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <xQueueGenericCreateStatic+0x56>
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <xQueueGenericCreateStatic+0x58>
 800c016:	2300      	movs	r3, #0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10a      	bne.n	800c032 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	623b      	str	r3, [r7, #32]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <xQueueGenericCreateStatic+0x7e>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <xQueueGenericCreateStatic+0x82>
 800c03e:	2301      	movs	r3, #1
 800c040:	e000      	b.n	800c044 <xQueueGenericCreateStatic+0x84>
 800c042:	2300      	movs	r3, #0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10a      	bne.n	800c05e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	61fb      	str	r3, [r7, #28]
}
 800c05a:	bf00      	nop
 800c05c:	e7fe      	b.n	800c05c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c05e:	2350      	movs	r3, #80	; 0x50
 800c060:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b50      	cmp	r3, #80	; 0x50
 800c066:	d00a      	beq.n	800c07e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06c:	f383 8811 	msr	BASEPRI, r3
 800c070:	f3bf 8f6f 	isb	sy
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	61bb      	str	r3, [r7, #24]
}
 800c07a:	bf00      	nop
 800c07c:	e7fe      	b.n	800c07c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c07e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00d      	beq.n	800c0a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c092:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	4613      	mov	r3, r2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	68b9      	ldr	r1, [r7, #8]
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 f83f 	bl	800c124 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3730      	adds	r7, #48	; 0x30
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b08a      	sub	sp, #40	; 0x28
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10a      	bne.n	800c0da <xQueueGenericCreate+0x2a>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	613b      	str	r3, [r7, #16]
}
 800c0d6:	bf00      	nop
 800c0d8:	e7fe      	b.n	800c0d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	fb02 f303 	mul.w	r3, r2, r3
 800c0e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	3350      	adds	r3, #80	; 0x50
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f002 fc2d 	bl	800e948 <pvPortMalloc>
 800c0ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d011      	beq.n	800c11a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	3350      	adds	r3, #80	; 0x50
 800c0fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c108:	79fa      	ldrb	r2, [r7, #7]
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	4613      	mov	r3, r2
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	68b9      	ldr	r1, [r7, #8]
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f000 f805 	bl	800c124 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c11a:	69bb      	ldr	r3, [r7, #24]
	}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d103      	bne.n	800c140 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	69ba      	ldr	r2, [r7, #24]
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e002      	b.n	800c146 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c152:	2101      	movs	r1, #1
 800c154:	69b8      	ldr	r0, [r7, #24]
 800c156:	f7ff fecb 	bl	800bef0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	78fa      	ldrb	r2, [r7, #3]
 800c15e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b082      	sub	sp, #8
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00e      	beq.n	800c196 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c18a:	2300      	movs	r3, #0
 800c18c:	2200      	movs	r2, #0
 800c18e:	2100      	movs	r1, #0
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f8a1 	bl	800c2d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c196:	bf00      	nop
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b086      	sub	sp, #24
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	617b      	str	r3, [r7, #20]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	6939      	ldr	r1, [r7, #16]
 800c1b6:	6978      	ldr	r0, [r7, #20]
 800c1b8:	f7ff ff7a 	bl	800c0b0 <xQueueGenericCreate>
 800c1bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f7ff ffd3 	bl	800c16a <prvInitialiseMutex>

		return xNewQueue;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
	}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b088      	sub	sp, #32
 800c1d2:	af02      	add	r7, sp, #8
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	6039      	str	r1, [r7, #0]
 800c1d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	617b      	str	r3, [r7, #20]
 800c1de:	2300      	movs	r3, #0
 800c1e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c1e2:	79fb      	ldrb	r3, [r7, #7]
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	6939      	ldr	r1, [r7, #16]
 800c1ec:	6978      	ldr	r0, [r7, #20]
 800c1ee:	f7ff fee7 	bl	800bfc0 <xQueueGenericCreateStatic>
 800c1f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f7ff ffb8 	bl	800c16a <prvInitialiseMutex>

		return xNewQueue;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
	}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c204:	b590      	push	{r4, r7, lr}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	60fb      	str	r3, [r7, #12]
}
 800c228:	bf00      	nop
 800c22a:	e7fe      	b.n	800c22a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	689c      	ldr	r4, [r3, #8]
 800c230:	f001 fbfc 	bl	800da2c <xTaskGetCurrentTaskHandle>
 800c234:	4603      	mov	r3, r0
 800c236:	429c      	cmp	r4, r3
 800c238:	d111      	bne.n	800c25e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	1e5a      	subs	r2, r3, #1
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d105      	bne.n	800c258 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c24c:	2300      	movs	r3, #0
 800c24e:	2200      	movs	r2, #0
 800c250:	2100      	movs	r1, #0
 800c252:	6938      	ldr	r0, [r7, #16]
 800c254:	f000 f840 	bl	800c2d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c258:	2301      	movs	r3, #1
 800c25a:	617b      	str	r3, [r7, #20]
 800c25c:	e001      	b.n	800c262 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c262:	697b      	ldr	r3, [r7, #20]
	}
 800c264:	4618      	mov	r0, r3
 800c266:	371c      	adds	r7, #28
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd90      	pop	{r4, r7, pc}

0800c26c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c26c:	b590      	push	{r4, r7, lr}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10a      	bne.n	800c296 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	60fb      	str	r3, [r7, #12]
}
 800c292:	bf00      	nop
 800c294:	e7fe      	b.n	800c294 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	689c      	ldr	r4, [r3, #8]
 800c29a:	f001 fbc7 	bl	800da2c <xTaskGetCurrentTaskHandle>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	429c      	cmp	r4, r3
 800c2a2:	d107      	bne.n	800c2b4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	617b      	str	r3, [r7, #20]
 800c2b2:	e00c      	b.n	800c2ce <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6938      	ldr	r0, [r7, #16]
 800c2b8:	f000 fa88 	bl	800c7cc <xQueueSemaphoreTake>
 800c2bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d004      	beq.n	800c2ce <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c2ce:	697b      	ldr	r3, [r7, #20]
	}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	371c      	adds	r7, #28
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd90      	pop	{r4, r7, pc}

0800c2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08e      	sub	sp, #56	; 0x38
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <xQueueGenericSend+0x32>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <xQueueGenericSend+0x40>
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <xQueueGenericSend+0x44>
 800c318:	2301      	movs	r3, #1
 800c31a:	e000      	b.n	800c31e <xQueueGenericSend+0x46>
 800c31c:	2300      	movs	r3, #0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <xQueueGenericSend+0x60>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d103      	bne.n	800c346 <xQueueGenericSend+0x6e>
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	2b01      	cmp	r3, #1
 800c344:	d101      	bne.n	800c34a <xQueueGenericSend+0x72>
 800c346:	2301      	movs	r3, #1
 800c348:	e000      	b.n	800c34c <xQueueGenericSend+0x74>
 800c34a:	2300      	movs	r3, #0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <xQueueGenericSend+0x8e>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	623b      	str	r3, [r7, #32]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c366:	f001 fb71 	bl	800da4c <xTaskGetSchedulerState>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d102      	bne.n	800c376 <xQueueGenericSend+0x9e>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <xQueueGenericSend+0xa2>
 800c376:	2301      	movs	r3, #1
 800c378:	e000      	b.n	800c37c <xQueueGenericSend+0xa4>
 800c37a:	2300      	movs	r3, #0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <xQueueGenericSend+0xbe>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	61fb      	str	r3, [r7, #28]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c396:	f002 f9b5 	bl	800e704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d302      	bcc.n	800c3ac <xQueueGenericSend+0xd4>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d129      	bne.n	800c400 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3b2:	f000 fbaf 	bl	800cb14 <prvCopyDataToQueue>
 800c3b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d010      	beq.n	800c3e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	3324      	adds	r3, #36	; 0x24
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f001 f973 	bl	800d6b0 <xTaskRemoveFromEventList>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d013      	beq.n	800c3f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3d0:	4b3f      	ldr	r3, [pc, #252]	; (800c4d0 <xQueueGenericSend+0x1f8>)
 800c3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	e00a      	b.n	800c3f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d007      	beq.n	800c3f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3e8:	4b39      	ldr	r3, [pc, #228]	; (800c4d0 <xQueueGenericSend+0x1f8>)
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3f8:	f002 f9b4 	bl	800e764 <vPortExitCritical>
				return pdPASS;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e063      	b.n	800c4c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d103      	bne.n	800c40e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c406:	f002 f9ad 	bl	800e764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c40a:	2300      	movs	r3, #0
 800c40c:	e05c      	b.n	800c4c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c410:	2b00      	cmp	r3, #0
 800c412:	d106      	bne.n	800c422 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c414:	f107 0314 	add.w	r3, r7, #20
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 f9ad 	bl	800d778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c41e:	2301      	movs	r3, #1
 800c420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c422:	f002 f99f 	bl	800e764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c426:	f000 ff1f 	bl	800d268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c42a:	f002 f96b 	bl	800e704 <vPortEnterCritical>
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c434:	b25b      	sxtb	r3, r3
 800c436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43a:	d103      	bne.n	800c444 <xQueueGenericSend+0x16c>
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c44a:	b25b      	sxtb	r3, r3
 800c44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c450:	d103      	bne.n	800c45a <xQueueGenericSend+0x182>
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c45a:	f002 f983 	bl	800e764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c45e:	1d3a      	adds	r2, r7, #4
 800c460:	f107 0314 	add.w	r3, r7, #20
 800c464:	4611      	mov	r1, r2
 800c466:	4618      	mov	r0, r3
 800c468:	f001 f99c 	bl	800d7a4 <xTaskCheckForTimeOut>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d124      	bne.n	800c4bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c474:	f000 fc46 	bl	800cd04 <prvIsQueueFull>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d018      	beq.n	800c4b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	3310      	adds	r3, #16
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f001 f8c2 	bl	800d610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c48e:	f000 fbd1 	bl	800cc34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c492:	f000 fef7 	bl	800d284 <xTaskResumeAll>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f47f af7c 	bne.w	800c396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c49e:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <xQueueGenericSend+0x1f8>)
 800c4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	e772      	b.n	800c396 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4b2:	f000 fbbf 	bl	800cc34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4b6:	f000 fee5 	bl	800d284 <xTaskResumeAll>
 800c4ba:	e76c      	b.n	800c396 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4be:	f000 fbb9 	bl	800cc34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4c2:	f000 fedf 	bl	800d284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3738      	adds	r7, #56	; 0x38
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b090      	sub	sp, #64	; 0x40
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <xQueueGenericSendFromISR+0x3c>
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <xQueueGenericSendFromISR+0x40>
 800c510:	2301      	movs	r3, #1
 800c512:	e000      	b.n	800c516 <xQueueGenericSendFromISR+0x42>
 800c514:	2300      	movs	r3, #0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10a      	bne.n	800c530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c52c:	bf00      	nop
 800c52e:	e7fe      	b.n	800c52e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d103      	bne.n	800c53e <xQueueGenericSendFromISR+0x6a>
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <xQueueGenericSendFromISR+0x6e>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <xQueueGenericSendFromISR+0x70>
 800c542:	2300      	movs	r3, #0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	623b      	str	r3, [r7, #32]
}
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c55e:	f002 f9b3 	bl	800e8c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c562:	f3ef 8211 	mrs	r2, BASEPRI
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	61fa      	str	r2, [r7, #28]
 800c578:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c57a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c586:	429a      	cmp	r2, r3
 800c588:	d302      	bcc.n	800c590 <xQueueGenericSendFromISR+0xbc>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d12f      	bne.n	800c5f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5a6:	f000 fab5 	bl	800cb14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d112      	bne.n	800c5da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	3324      	adds	r3, #36	; 0x24
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f001 f875 	bl	800d6b0 <xTaskRemoveFromEventList>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00e      	beq.n	800c5ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	e007      	b.n	800c5ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5de:	3301      	adds	r3, #1
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	b25a      	sxtb	r2, r3
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c5ee:	e001      	b.n	800c5f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c602:	4618      	mov	r0, r3
 800c604:	3740      	adds	r7, #64	; 0x40
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08c      	sub	sp, #48	; 0x30
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c618:	2300      	movs	r3, #0
 800c61a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <xQueueReceive+0x30>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	623b      	str	r3, [r7, #32]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <xQueueReceive+0x3e>
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <xQueueReceive+0x42>
 800c64a:	2301      	movs	r3, #1
 800c64c:	e000      	b.n	800c650 <xQueueReceive+0x44>
 800c64e:	2300      	movs	r3, #0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <xQueueReceive+0x5e>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	61fb      	str	r3, [r7, #28]
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c66a:	f001 f9ef 	bl	800da4c <xTaskGetSchedulerState>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <xQueueReceive+0x6e>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <xQueueReceive+0x72>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <xQueueReceive+0x74>
 800c67e:	2300      	movs	r3, #0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <xQueueReceive+0x8e>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	61bb      	str	r3, [r7, #24]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c69a:	f002 f833 	bl	800e704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d01f      	beq.n	800c6ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ae:	f000 fa9b 	bl	800cbe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	1e5a      	subs	r2, r3, #1
 800c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00f      	beq.n	800c6e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c4:	3310      	adds	r3, #16
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 fff2 	bl	800d6b0 <xTaskRemoveFromEventList>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d007      	beq.n	800c6e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6d2:	4b3d      	ldr	r3, [pc, #244]	; (800c7c8 <xQueueReceive+0x1bc>)
 800c6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6e2:	f002 f83f 	bl	800e764 <vPortExitCritical>
				return pdPASS;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e069      	b.n	800c7be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d103      	bne.n	800c6f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6f0:	f002 f838 	bl	800e764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e062      	b.n	800c7be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6fe:	f107 0310 	add.w	r3, r7, #16
 800c702:	4618      	mov	r0, r3
 800c704:	f001 f838 	bl	800d778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c708:	2301      	movs	r3, #1
 800c70a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c70c:	f002 f82a 	bl	800e764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c710:	f000 fdaa 	bl	800d268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c714:	f001 fff6 	bl	800e704 <vPortEnterCritical>
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c71e:	b25b      	sxtb	r3, r3
 800c720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c724:	d103      	bne.n	800c72e <xQueueReceive+0x122>
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c734:	b25b      	sxtb	r3, r3
 800c736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73a:	d103      	bne.n	800c744 <xQueueReceive+0x138>
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c744:	f002 f80e 	bl	800e764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c748:	1d3a      	adds	r2, r7, #4
 800c74a:	f107 0310 	add.w	r3, r7, #16
 800c74e:	4611      	mov	r1, r2
 800c750:	4618      	mov	r0, r3
 800c752:	f001 f827 	bl	800d7a4 <xTaskCheckForTimeOut>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d123      	bne.n	800c7a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c75e:	f000 fabb 	bl	800ccd8 <prvIsQueueEmpty>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d017      	beq.n	800c798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	3324      	adds	r3, #36	; 0x24
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f000 ff4d 	bl	800d610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c778:	f000 fa5c 	bl	800cc34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c77c:	f000 fd82 	bl	800d284 <xTaskResumeAll>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d189      	bne.n	800c69a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c786:	4b10      	ldr	r3, [pc, #64]	; (800c7c8 <xQueueReceive+0x1bc>)
 800c788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	e780      	b.n	800c69a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79a:	f000 fa4b 	bl	800cc34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c79e:	f000 fd71 	bl	800d284 <xTaskResumeAll>
 800c7a2:	e77a      	b.n	800c69a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a6:	f000 fa45 	bl	800cc34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7aa:	f000 fd6b 	bl	800d284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7b0:	f000 fa92 	bl	800ccd8 <prvIsQueueEmpty>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f43f af6f 	beq.w	800c69a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3730      	adds	r7, #48	; 0x30
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	e000ed04 	.word	0xe000ed04

0800c7cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08e      	sub	sp, #56	; 0x38
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10a      	bne.n	800c7fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	623b      	str	r3, [r7, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	e7fe      	b.n	800c7fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	61fb      	str	r3, [r7, #28]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c81c:	f001 f916 	bl	800da4c <xTaskGetSchedulerState>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d102      	bne.n	800c82c <xQueueSemaphoreTake+0x60>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d101      	bne.n	800c830 <xQueueSemaphoreTake+0x64>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e000      	b.n	800c832 <xQueueSemaphoreTake+0x66>
 800c830:	2300      	movs	r3, #0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10a      	bne.n	800c84c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	61bb      	str	r3, [r7, #24]
}
 800c848:	bf00      	nop
 800c84a:	e7fe      	b.n	800c84a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c84c:	f001 ff5a 	bl	800e704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c854:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d024      	beq.n	800c8a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	1e5a      	subs	r2, r3, #1
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d104      	bne.n	800c876 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c86c:	f001 fa64 	bl	800dd38 <pvTaskIncrementMutexHeldCount>
 800c870:	4602      	mov	r2, r0
 800c872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c874:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00f      	beq.n	800c89e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c880:	3310      	adds	r3, #16
 800c882:	4618      	mov	r0, r3
 800c884:	f000 ff14 	bl	800d6b0 <xTaskRemoveFromEventList>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d007      	beq.n	800c89e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c88e:	4b54      	ldr	r3, [pc, #336]	; (800c9e0 <xQueueSemaphoreTake+0x214>)
 800c890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c89e:	f001 ff61 	bl	800e764 <vPortExitCritical>
				return pdPASS;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e097      	b.n	800c9d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d111      	bne.n	800c8d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	617b      	str	r3, [r7, #20]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c8c8:	f001 ff4c 	bl	800e764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	e082      	b.n	800c9d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8d6:	f107 030c 	add.w	r3, r7, #12
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 ff4c 	bl	800d778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8e4:	f001 ff3e 	bl	800e764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8e8:	f000 fcbe 	bl	800d268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8ec:	f001 ff0a 	bl	800e704 <vPortEnterCritical>
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8f6:	b25b      	sxtb	r3, r3
 800c8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fc:	d103      	bne.n	800c906 <xQueueSemaphoreTake+0x13a>
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	2200      	movs	r2, #0
 800c902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c90c:	b25b      	sxtb	r3, r3
 800c90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c912:	d103      	bne.n	800c91c <xQueueSemaphoreTake+0x150>
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	2200      	movs	r2, #0
 800c918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c91c:	f001 ff22 	bl	800e764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c920:	463a      	mov	r2, r7
 800c922:	f107 030c 	add.w	r3, r7, #12
 800c926:	4611      	mov	r1, r2
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 ff3b 	bl	800d7a4 <xTaskCheckForTimeOut>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d132      	bne.n	800c99a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c936:	f000 f9cf 	bl	800ccd8 <prvIsQueueEmpty>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d026      	beq.n	800c98e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d109      	bne.n	800c95c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c948:	f001 fedc 	bl	800e704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	4618      	mov	r0, r3
 800c952:	f001 f899 	bl	800da88 <xTaskPriorityInherit>
 800c956:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c958:	f001 ff04 	bl	800e764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	3324      	adds	r3, #36	; 0x24
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fe53 	bl	800d610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c96a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c96c:	f000 f962 	bl	800cc34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c970:	f000 fc88 	bl	800d284 <xTaskResumeAll>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	f47f af68 	bne.w	800c84c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c97c:	4b18      	ldr	r3, [pc, #96]	; (800c9e0 <xQueueSemaphoreTake+0x214>)
 800c97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	e75e      	b.n	800c84c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c98e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c990:	f000 f950 	bl	800cc34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c994:	f000 fc76 	bl	800d284 <xTaskResumeAll>
 800c998:	e758      	b.n	800c84c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c99a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c99c:	f000 f94a 	bl	800cc34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9a0:	f000 fc70 	bl	800d284 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9a6:	f000 f997 	bl	800ccd8 <prvIsQueueEmpty>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f43f af4d 	beq.w	800c84c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00d      	beq.n	800c9d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c9b8:	f001 fea4 	bl	800e704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9be:	f000 f891 	bl	800cae4 <prvGetDisinheritPriorityAfterTimeout>
 800c9c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f001 f932 	bl	800dc34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c9d0:	f001 fec8 	bl	800e764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3738      	adds	r7, #56	; 0x38
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08e      	sub	sp, #56	; 0x38
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	623b      	str	r3, [r7, #32]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d103      	bne.n	800ca1e <xQueueReceiveFromISR+0x3a>
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <xQueueReceiveFromISR+0x3e>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <xQueueReceiveFromISR+0x40>
 800ca22:	2300      	movs	r3, #0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	61fb      	str	r3, [r7, #28]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca3e:	f001 ff43 	bl	800e8c8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca42:	f3ef 8211 	mrs	r2, BASEPRI
 800ca46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	61ba      	str	r2, [r7, #24]
 800ca58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d02f      	beq.n	800caca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca78:	f000 f8b6 	bl	800cbe8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	1e5a      	subs	r2, r3, #1
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d112      	bne.n	800cab4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d016      	beq.n	800cac4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	3310      	adds	r3, #16
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 fe08 	bl	800d6b0 <xTaskRemoveFromEventList>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00e      	beq.n	800cac4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00b      	beq.n	800cac4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	e007      	b.n	800cac4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cab8:	3301      	adds	r3, #1
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	b25a      	sxtb	r2, r3
 800cabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cac4:	2301      	movs	r3, #1
 800cac6:	637b      	str	r3, [r7, #52]	; 0x34
 800cac8:	e001      	b.n	800cace <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800caca:	2300      	movs	r3, #0
 800cacc:	637b      	str	r3, [r7, #52]	; 0x34
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	f383 8811 	msr	BASEPRI, r3
}
 800cad8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3738      	adds	r7, #56	; 0x38
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d006      	beq.n	800cb02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e001      	b.n	800cb06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb02:	2300      	movs	r3, #0
 800cb04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb06:	68fb      	ldr	r3, [r7, #12]
	}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb20:	2300      	movs	r3, #0
 800cb22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10d      	bne.n	800cb4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d14d      	bne.n	800cbd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f001 f80a 	bl	800db58 <xTaskPriorityDisinherit>
 800cb44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	609a      	str	r2, [r3, #8]
 800cb4c:	e043      	b.n	800cbd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d119      	bne.n	800cb88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6858      	ldr	r0, [r3, #4]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	f002 f906 	bl	800ed70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6c:	441a      	add	r2, r3
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d32b      	bcc.n	800cbd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	605a      	str	r2, [r3, #4]
 800cb86:	e026      	b.n	800cbd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	68d8      	ldr	r0, [r3, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb90:	461a      	mov	r2, r3
 800cb92:	68b9      	ldr	r1, [r7, #8]
 800cb94:	f002 f8ec 	bl	800ed70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	68da      	ldr	r2, [r3, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba0:	425b      	negs	r3, r3
 800cba2:	441a      	add	r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	68da      	ldr	r2, [r3, #12]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d207      	bcs.n	800cbc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	689a      	ldr	r2, [r3, #8]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbc:	425b      	negs	r3, r3
 800cbbe:	441a      	add	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d105      	bne.n	800cbd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cbde:	697b      	ldr	r3, [r7, #20]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d018      	beq.n	800cc2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc02:	441a      	add	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68da      	ldr	r2, [r3, #12]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d303      	bcc.n	800cc1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	68d9      	ldr	r1, [r3, #12]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc24:	461a      	mov	r2, r3
 800cc26:	6838      	ldr	r0, [r7, #0]
 800cc28:	f002 f8a2 	bl	800ed70 <memcpy>
	}
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc3c:	f001 fd62 	bl	800e704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc48:	e011      	b.n	800cc6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d012      	beq.n	800cc78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3324      	adds	r3, #36	; 0x24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 fd2a 	bl	800d6b0 <xTaskRemoveFromEventList>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc62:	f000 fe01 	bl	800d868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	dce9      	bgt.n	800cc4a <prvUnlockQueue+0x16>
 800cc76:	e000      	b.n	800cc7a <prvUnlockQueue+0x46>
					break;
 800cc78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	22ff      	movs	r2, #255	; 0xff
 800cc7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc82:	f001 fd6f 	bl	800e764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc86:	f001 fd3d 	bl	800e704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc92:	e011      	b.n	800ccb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d012      	beq.n	800ccc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3310      	adds	r3, #16
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 fd05 	bl	800d6b0 <xTaskRemoveFromEventList>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ccac:	f000 fddc 	bl	800d868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	dce9      	bgt.n	800cc94 <prvUnlockQueue+0x60>
 800ccc0:	e000      	b.n	800ccc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ccc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	22ff      	movs	r2, #255	; 0xff
 800ccc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cccc:	f001 fd4a 	bl	800e764 <vPortExitCritical>
}
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cce0:	f001 fd10 	bl	800e704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ccec:	2301      	movs	r3, #1
 800ccee:	60fb      	str	r3, [r7, #12]
 800ccf0:	e001      	b.n	800ccf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ccf6:	f001 fd35 	bl	800e764 <vPortExitCritical>

	return xReturn;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd0c:	f001 fcfa 	bl	800e704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d102      	bne.n	800cd22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	e001      	b.n	800cd26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd22:	2300      	movs	r3, #0
 800cd24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd26:	f001 fd1d 	bl	800e764 <vPortExitCritical>

	return xReturn;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	e014      	b.n	800cd6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd44:	4a0f      	ldr	r2, [pc, #60]	; (800cd84 <vQueueAddToRegistry+0x50>)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10b      	bne.n	800cd68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd50:	490c      	ldr	r1, [pc, #48]	; (800cd84 <vQueueAddToRegistry+0x50>)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd5a:	4a0a      	ldr	r2, [pc, #40]	; (800cd84 <vQueueAddToRegistry+0x50>)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	4413      	add	r3, r2
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd66:	e006      	b.n	800cd76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2b07      	cmp	r3, #7
 800cd72:	d9e7      	bls.n	800cd44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	20000c84 	.word	0x20000c84

0800cd88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cd98:	f001 fcb4 	bl	800e704 <vPortEnterCritical>
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cda2:	b25b      	sxtb	r3, r3
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda8:	d103      	bne.n	800cdb2 <vQueueWaitForMessageRestricted+0x2a>
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdb8:	b25b      	sxtb	r3, r3
 800cdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdbe:	d103      	bne.n	800cdc8 <vQueueWaitForMessageRestricted+0x40>
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdc8:	f001 fccc 	bl	800e764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d106      	bne.n	800cde2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	3324      	adds	r3, #36	; 0x24
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 fc3b 	bl	800d658 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cde2:	6978      	ldr	r0, [r7, #20]
 800cde4:	f7ff ff26 	bl	800cc34 <prvUnlockQueue>
	}
 800cde8:	bf00      	nop
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b08e      	sub	sp, #56	; 0x38
 800cdf4:	af04      	add	r7, sp, #16
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10a      	bne.n	800ce1a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	623b      	str	r3, [r7, #32]
}
 800ce16:	bf00      	nop
 800ce18:	e7fe      	b.n	800ce18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d10a      	bne.n	800ce36 <xTaskCreateStatic+0x46>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	61fb      	str	r3, [r7, #28]
}
 800ce32:	bf00      	nop
 800ce34:	e7fe      	b.n	800ce34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce36:	235c      	movs	r3, #92	; 0x5c
 800ce38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2b5c      	cmp	r3, #92	; 0x5c
 800ce3e:	d00a      	beq.n	800ce56 <xTaskCreateStatic+0x66>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	61bb      	str	r3, [r7, #24]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ce56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ce58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d01e      	beq.n	800ce9c <xTaskCreateStatic+0xac>
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d01b      	beq.n	800ce9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	2202      	movs	r2, #2
 800ce72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ce76:	2300      	movs	r3, #0
 800ce78:	9303      	str	r3, [sp, #12]
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	9302      	str	r3, [sp, #8]
 800ce7e:	f107 0314 	add.w	r3, r7, #20
 800ce82:	9301      	str	r3, [sp, #4]
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	68b9      	ldr	r1, [r7, #8]
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 f850 	bl	800cf34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce96:	f000 f8dd 	bl	800d054 <prvAddNewTaskToReadyList>
 800ce9a:	e001      	b.n	800cea0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cea0:	697b      	ldr	r3, [r7, #20]
	}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3728      	adds	r7, #40	; 0x28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b08c      	sub	sp, #48	; 0x30
 800ceae:	af04      	add	r7, sp, #16
 800ceb0:	60f8      	str	r0, [r7, #12]
 800ceb2:	60b9      	str	r1, [r7, #8]
 800ceb4:	603b      	str	r3, [r7, #0]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ceba:	88fb      	ldrh	r3, [r7, #6]
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f001 fd42 	bl	800e948 <pvPortMalloc>
 800cec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00e      	beq.n	800ceea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cecc:	205c      	movs	r0, #92	; 0x5c
 800cece:	f001 fd3b 	bl	800e948 <pvPortMalloc>
 800ced2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d003      	beq.n	800cee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	697a      	ldr	r2, [r7, #20]
 800cede:	631a      	str	r2, [r3, #48]	; 0x30
 800cee0:	e005      	b.n	800ceee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cee2:	6978      	ldr	r0, [r7, #20]
 800cee4:	f001 fdfc 	bl	800eae0 <vPortFree>
 800cee8:	e001      	b.n	800ceee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d017      	beq.n	800cf24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cefc:	88fa      	ldrh	r2, [r7, #6]
 800cefe:	2300      	movs	r3, #0
 800cf00:	9303      	str	r3, [sp, #12]
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	9302      	str	r3, [sp, #8]
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	68b9      	ldr	r1, [r7, #8]
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 f80e 	bl	800cf34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf18:	69f8      	ldr	r0, [r7, #28]
 800cf1a:	f000 f89b 	bl	800d054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	61bb      	str	r3, [r7, #24]
 800cf22:	e002      	b.n	800cf2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf24:	f04f 33ff 	mov.w	r3, #4294967295
 800cf28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf2a:	69bb      	ldr	r3, [r7, #24]
	}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3720      	adds	r7, #32
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	21a5      	movs	r1, #165	; 0xa5
 800cf4e:	f001 ff1d 	bl	800ed8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	f023 0307 	bic.w	r3, r3, #7
 800cf6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	f003 0307 	and.w	r3, r3, #7
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <prvInitialiseNewTask+0x58>
	__asm volatile
 800cf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	617b      	str	r3, [r7, #20]
}
 800cf88:	bf00      	nop
 800cf8a:	e7fe      	b.n	800cf8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d01f      	beq.n	800cfd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf92:	2300      	movs	r3, #0
 800cf94:	61fb      	str	r3, [r7, #28]
 800cf96:	e012      	b.n	800cfbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	7819      	ldrb	r1, [r3, #0]
 800cfa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	3334      	adds	r3, #52	; 0x34
 800cfa8:	460a      	mov	r2, r1
 800cfaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d006      	beq.n	800cfc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	61fb      	str	r3, [r7, #28]
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	2b0f      	cmp	r3, #15
 800cfc2:	d9e9      	bls.n	800cf98 <prvInitialiseNewTask+0x64>
 800cfc4:	e000      	b.n	800cfc8 <prvInitialiseNewTask+0x94>
			{
				break;
 800cfc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cfd0:	e003      	b.n	800cfda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfdc:	2b37      	cmp	r3, #55	; 0x37
 800cfde:	d901      	bls.n	800cfe4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cfe0:	2337      	movs	r3, #55	; 0x37
 800cfe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	2200      	movs	r2, #0
 800cff4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	3304      	adds	r3, #4
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fee4 	bl	800bdc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	3318      	adds	r3, #24
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fedf 	bl	800bdc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d00e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d01e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d022:	2200      	movs	r2, #0
 800d024:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	68f9      	ldr	r1, [r7, #12]
 800d032:	69b8      	ldr	r0, [r7, #24]
 800d034:	f001 fa36 	bl	800e4a4 <pxPortInitialiseStack>
 800d038:	4602      	mov	r2, r0
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d04a:	bf00      	nop
 800d04c:	3720      	adds	r7, #32
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
	...

0800d054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d05c:	f001 fb52 	bl	800e704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d060:	4b2d      	ldr	r3, [pc, #180]	; (800d118 <prvAddNewTaskToReadyList+0xc4>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3301      	adds	r3, #1
 800d066:	4a2c      	ldr	r2, [pc, #176]	; (800d118 <prvAddNewTaskToReadyList+0xc4>)
 800d068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d06a:	4b2c      	ldr	r3, [pc, #176]	; (800d11c <prvAddNewTaskToReadyList+0xc8>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d109      	bne.n	800d086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d072:	4a2a      	ldr	r2, [pc, #168]	; (800d11c <prvAddNewTaskToReadyList+0xc8>)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d078:	4b27      	ldr	r3, [pc, #156]	; (800d118 <prvAddNewTaskToReadyList+0xc4>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d110      	bne.n	800d0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d080:	f000 fc16 	bl	800d8b0 <prvInitialiseTaskLists>
 800d084:	e00d      	b.n	800d0a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d086:	4b26      	ldr	r3, [pc, #152]	; (800d120 <prvAddNewTaskToReadyList+0xcc>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d109      	bne.n	800d0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d08e:	4b23      	ldr	r3, [pc, #140]	; (800d11c <prvAddNewTaskToReadyList+0xc8>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d098:	429a      	cmp	r2, r3
 800d09a:	d802      	bhi.n	800d0a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d09c:	4a1f      	ldr	r2, [pc, #124]	; (800d11c <prvAddNewTaskToReadyList+0xc8>)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d0a2:	4b20      	ldr	r3, [pc, #128]	; (800d124 <prvAddNewTaskToReadyList+0xd0>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	4a1e      	ldr	r2, [pc, #120]	; (800d124 <prvAddNewTaskToReadyList+0xd0>)
 800d0aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d0ac:	4b1d      	ldr	r3, [pc, #116]	; (800d124 <prvAddNewTaskToReadyList+0xd0>)
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b8:	4b1b      	ldr	r3, [pc, #108]	; (800d128 <prvAddNewTaskToReadyList+0xd4>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d903      	bls.n	800d0c8 <prvAddNewTaskToReadyList+0x74>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	4a18      	ldr	r2, [pc, #96]	; (800d128 <prvAddNewTaskToReadyList+0xd4>)
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4a15      	ldr	r2, [pc, #84]	; (800d12c <prvAddNewTaskToReadyList+0xd8>)
 800d0d6:	441a      	add	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f7fe fe7f 	bl	800bde2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d0e4:	f001 fb3e 	bl	800e764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d0e8:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <prvAddNewTaskToReadyList+0xcc>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00e      	beq.n	800d10e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <prvAddNewTaskToReadyList+0xc8>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d207      	bcs.n	800d10e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d0fe:	4b0c      	ldr	r3, [pc, #48]	; (800d130 <prvAddNewTaskToReadyList+0xdc>)
 800d100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d104:	601a      	str	r2, [r3, #0]
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d10e:	bf00      	nop
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20001198 	.word	0x20001198
 800d11c:	20000cc4 	.word	0x20000cc4
 800d120:	200011a4 	.word	0x200011a4
 800d124:	200011b4 	.word	0x200011b4
 800d128:	200011a0 	.word	0x200011a0
 800d12c:	20000cc8 	.word	0x20000cc8
 800d130:	e000ed04 	.word	0xe000ed04

0800d134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d13c:	2300      	movs	r3, #0
 800d13e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d017      	beq.n	800d176 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d146:	4b13      	ldr	r3, [pc, #76]	; (800d194 <vTaskDelay+0x60>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00a      	beq.n	800d164 <vTaskDelay+0x30>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60bb      	str	r3, [r7, #8]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d164:	f000 f880 	bl	800d268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d168:	2100      	movs	r1, #0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 fdf8 	bl	800dd60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d170:	f000 f888 	bl	800d284 <xTaskResumeAll>
 800d174:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d107      	bne.n	800d18c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d17c:	4b06      	ldr	r3, [pc, #24]	; (800d198 <vTaskDelay+0x64>)
 800d17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d18c:	bf00      	nop
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	200011c0 	.word	0x200011c0
 800d198:	e000ed04 	.word	0xe000ed04

0800d19c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b08a      	sub	sp, #40	; 0x28
 800d1a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1aa:	463a      	mov	r2, r7
 800d1ac:	1d39      	adds	r1, r7, #4
 800d1ae:	f107 0308 	add.w	r3, r7, #8
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe fdb4 	bl	800bd20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d1b8:	6839      	ldr	r1, [r7, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	9202      	str	r2, [sp, #8]
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	460a      	mov	r2, r1
 800d1ca:	4921      	ldr	r1, [pc, #132]	; (800d250 <vTaskStartScheduler+0xb4>)
 800d1cc:	4821      	ldr	r0, [pc, #132]	; (800d254 <vTaskStartScheduler+0xb8>)
 800d1ce:	f7ff fe0f 	bl	800cdf0 <xTaskCreateStatic>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4a20      	ldr	r2, [pc, #128]	; (800d258 <vTaskStartScheduler+0xbc>)
 800d1d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d1d8:	4b1f      	ldr	r3, [pc, #124]	; (800d258 <vTaskStartScheduler+0xbc>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	e001      	b.n	800d1ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d102      	bne.n	800d1f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d1f0:	f000 fe0a 	bl	800de08 <xTimerCreateTimerTask>
 800d1f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d116      	bne.n	800d22a <vTaskStartScheduler+0x8e>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	613b      	str	r3, [r7, #16]
}
 800d20e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d210:	4b12      	ldr	r3, [pc, #72]	; (800d25c <vTaskStartScheduler+0xc0>)
 800d212:	f04f 32ff 	mov.w	r2, #4294967295
 800d216:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d218:	4b11      	ldr	r3, [pc, #68]	; (800d260 <vTaskStartScheduler+0xc4>)
 800d21a:	2201      	movs	r2, #1
 800d21c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d21e:	4b11      	ldr	r3, [pc, #68]	; (800d264 <vTaskStartScheduler+0xc8>)
 800d220:	2200      	movs	r2, #0
 800d222:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d224:	f001 f9cc 	bl	800e5c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d228:	e00e      	b.n	800d248 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d230:	d10a      	bne.n	800d248 <vTaskStartScheduler+0xac>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	60fb      	str	r3, [r7, #12]
}
 800d244:	bf00      	nop
 800d246:	e7fe      	b.n	800d246 <vTaskStartScheduler+0xaa>
}
 800d248:	bf00      	nop
 800d24a:	3718      	adds	r7, #24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	08013494 	.word	0x08013494
 800d254:	0800d881 	.word	0x0800d881
 800d258:	200011bc 	.word	0x200011bc
 800d25c:	200011b8 	.word	0x200011b8
 800d260:	200011a4 	.word	0x200011a4
 800d264:	2000119c 	.word	0x2000119c

0800d268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d26c:	4b04      	ldr	r3, [pc, #16]	; (800d280 <vTaskSuspendAll+0x18>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3301      	adds	r3, #1
 800d272:	4a03      	ldr	r2, [pc, #12]	; (800d280 <vTaskSuspendAll+0x18>)
 800d274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d276:	bf00      	nop
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	200011c0 	.word	0x200011c0

0800d284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d28e:	2300      	movs	r3, #0
 800d290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d292:	4b42      	ldr	r3, [pc, #264]	; (800d39c <xTaskResumeAll+0x118>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10a      	bne.n	800d2b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	603b      	str	r3, [r7, #0]
}
 800d2ac:	bf00      	nop
 800d2ae:	e7fe      	b.n	800d2ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d2b0:	f001 fa28 	bl	800e704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d2b4:	4b39      	ldr	r3, [pc, #228]	; (800d39c <xTaskResumeAll+0x118>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	4a38      	ldr	r2, [pc, #224]	; (800d39c <xTaskResumeAll+0x118>)
 800d2bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2be:	4b37      	ldr	r3, [pc, #220]	; (800d39c <xTaskResumeAll+0x118>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d162      	bne.n	800d38c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d2c6:	4b36      	ldr	r3, [pc, #216]	; (800d3a0 <xTaskResumeAll+0x11c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d05e      	beq.n	800d38c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2ce:	e02f      	b.n	800d330 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2d0:	4b34      	ldr	r3, [pc, #208]	; (800d3a4 <xTaskResumeAll+0x120>)
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3318      	adds	r3, #24
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe fddd 	bl	800be9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fdd8 	bl	800be9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f0:	4b2d      	ldr	r3, [pc, #180]	; (800d3a8 <xTaskResumeAll+0x124>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d903      	bls.n	800d300 <xTaskResumeAll+0x7c>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	4a2a      	ldr	r2, [pc, #168]	; (800d3a8 <xTaskResumeAll+0x124>)
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4a27      	ldr	r2, [pc, #156]	; (800d3ac <xTaskResumeAll+0x128>)
 800d30e:	441a      	add	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3304      	adds	r3, #4
 800d314:	4619      	mov	r1, r3
 800d316:	4610      	mov	r0, r2
 800d318:	f7fe fd63 	bl	800bde2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d320:	4b23      	ldr	r3, [pc, #140]	; (800d3b0 <xTaskResumeAll+0x12c>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d326:	429a      	cmp	r2, r3
 800d328:	d302      	bcc.n	800d330 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d32a:	4b22      	ldr	r3, [pc, #136]	; (800d3b4 <xTaskResumeAll+0x130>)
 800d32c:	2201      	movs	r2, #1
 800d32e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d330:	4b1c      	ldr	r3, [pc, #112]	; (800d3a4 <xTaskResumeAll+0x120>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1cb      	bne.n	800d2d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d33e:	f000 fb55 	bl	800d9ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d342:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <xTaskResumeAll+0x134>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d010      	beq.n	800d370 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d34e:	f000 f847 	bl	800d3e0 <xTaskIncrementTick>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d358:	4b16      	ldr	r3, [pc, #88]	; (800d3b4 <xTaskResumeAll+0x130>)
 800d35a:	2201      	movs	r2, #1
 800d35c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3b01      	subs	r3, #1
 800d362:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1f1      	bne.n	800d34e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d36a:	4b13      	ldr	r3, [pc, #76]	; (800d3b8 <xTaskResumeAll+0x134>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d370:	4b10      	ldr	r3, [pc, #64]	; (800d3b4 <xTaskResumeAll+0x130>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d009      	beq.n	800d38c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d378:	2301      	movs	r3, #1
 800d37a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d37c:	4b0f      	ldr	r3, [pc, #60]	; (800d3bc <xTaskResumeAll+0x138>)
 800d37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d38c:	f001 f9ea 	bl	800e764 <vPortExitCritical>

	return xAlreadyYielded;
 800d390:	68bb      	ldr	r3, [r7, #8]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	200011c0 	.word	0x200011c0
 800d3a0:	20001198 	.word	0x20001198
 800d3a4:	20001158 	.word	0x20001158
 800d3a8:	200011a0 	.word	0x200011a0
 800d3ac:	20000cc8 	.word	0x20000cc8
 800d3b0:	20000cc4 	.word	0x20000cc4
 800d3b4:	200011ac 	.word	0x200011ac
 800d3b8:	200011a8 	.word	0x200011a8
 800d3bc:	e000ed04 	.word	0xe000ed04

0800d3c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d3c6:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <xTaskGetTickCount+0x1c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d3cc:	687b      	ldr	r3, [r7, #4]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	2000119c 	.word	0x2000119c

0800d3e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3ea:	4b4f      	ldr	r3, [pc, #316]	; (800d528 <xTaskIncrementTick+0x148>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f040 808f 	bne.w	800d512 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d3f4:	4b4d      	ldr	r3, [pc, #308]	; (800d52c <xTaskIncrementTick+0x14c>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d3fc:	4a4b      	ldr	r2, [pc, #300]	; (800d52c <xTaskIncrementTick+0x14c>)
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d120      	bne.n	800d44a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d408:	4b49      	ldr	r3, [pc, #292]	; (800d530 <xTaskIncrementTick+0x150>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00a      	beq.n	800d428 <xTaskIncrementTick+0x48>
	__asm volatile
 800d412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d416:	f383 8811 	msr	BASEPRI, r3
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	603b      	str	r3, [r7, #0]
}
 800d424:	bf00      	nop
 800d426:	e7fe      	b.n	800d426 <xTaskIncrementTick+0x46>
 800d428:	4b41      	ldr	r3, [pc, #260]	; (800d530 <xTaskIncrementTick+0x150>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	4b41      	ldr	r3, [pc, #260]	; (800d534 <xTaskIncrementTick+0x154>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a3f      	ldr	r2, [pc, #252]	; (800d530 <xTaskIncrementTick+0x150>)
 800d434:	6013      	str	r3, [r2, #0]
 800d436:	4a3f      	ldr	r2, [pc, #252]	; (800d534 <xTaskIncrementTick+0x154>)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6013      	str	r3, [r2, #0]
 800d43c:	4b3e      	ldr	r3, [pc, #248]	; (800d538 <xTaskIncrementTick+0x158>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	3301      	adds	r3, #1
 800d442:	4a3d      	ldr	r2, [pc, #244]	; (800d538 <xTaskIncrementTick+0x158>)
 800d444:	6013      	str	r3, [r2, #0]
 800d446:	f000 fad1 	bl	800d9ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d44a:	4b3c      	ldr	r3, [pc, #240]	; (800d53c <xTaskIncrementTick+0x15c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	693a      	ldr	r2, [r7, #16]
 800d450:	429a      	cmp	r2, r3
 800d452:	d349      	bcc.n	800d4e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d454:	4b36      	ldr	r3, [pc, #216]	; (800d530 <xTaskIncrementTick+0x150>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d104      	bne.n	800d468 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d45e:	4b37      	ldr	r3, [pc, #220]	; (800d53c <xTaskIncrementTick+0x15c>)
 800d460:	f04f 32ff 	mov.w	r2, #4294967295
 800d464:	601a      	str	r2, [r3, #0]
					break;
 800d466:	e03f      	b.n	800d4e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d468:	4b31      	ldr	r3, [pc, #196]	; (800d530 <xTaskIncrementTick+0x150>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d203      	bcs.n	800d488 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d480:	4a2e      	ldr	r2, [pc, #184]	; (800d53c <xTaskIncrementTick+0x15c>)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d486:	e02f      	b.n	800d4e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	3304      	adds	r3, #4
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe fd05 	bl	800be9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d496:	2b00      	cmp	r3, #0
 800d498:	d004      	beq.n	800d4a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	3318      	adds	r3, #24
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fe fcfc 	bl	800be9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a8:	4b25      	ldr	r3, [pc, #148]	; (800d540 <xTaskIncrementTick+0x160>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d903      	bls.n	800d4b8 <xTaskIncrementTick+0xd8>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b4:	4a22      	ldr	r2, [pc, #136]	; (800d540 <xTaskIncrementTick+0x160>)
 800d4b6:	6013      	str	r3, [r2, #0]
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4bc:	4613      	mov	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4413      	add	r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	4a1f      	ldr	r2, [pc, #124]	; (800d544 <xTaskIncrementTick+0x164>)
 800d4c6:	441a      	add	r2, r3
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	3304      	adds	r3, #4
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	4610      	mov	r0, r2
 800d4d0:	f7fe fc87 	bl	800bde2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d8:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <xTaskIncrementTick+0x168>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d3b8      	bcc.n	800d454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4e6:	e7b5      	b.n	800d454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d4e8:	4b17      	ldr	r3, [pc, #92]	; (800d548 <xTaskIncrementTick+0x168>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ee:	4915      	ldr	r1, [pc, #84]	; (800d544 <xTaskIncrementTick+0x164>)
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4413      	add	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	440b      	add	r3, r1
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d901      	bls.n	800d504 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d500:	2301      	movs	r3, #1
 800d502:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d504:	4b11      	ldr	r3, [pc, #68]	; (800d54c <xTaskIncrementTick+0x16c>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d007      	beq.n	800d51c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d50c:	2301      	movs	r3, #1
 800d50e:	617b      	str	r3, [r7, #20]
 800d510:	e004      	b.n	800d51c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d512:	4b0f      	ldr	r3, [pc, #60]	; (800d550 <xTaskIncrementTick+0x170>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3301      	adds	r3, #1
 800d518:	4a0d      	ldr	r2, [pc, #52]	; (800d550 <xTaskIncrementTick+0x170>)
 800d51a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d51c:	697b      	ldr	r3, [r7, #20]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	200011c0 	.word	0x200011c0
 800d52c:	2000119c 	.word	0x2000119c
 800d530:	20001150 	.word	0x20001150
 800d534:	20001154 	.word	0x20001154
 800d538:	200011b0 	.word	0x200011b0
 800d53c:	200011b8 	.word	0x200011b8
 800d540:	200011a0 	.word	0x200011a0
 800d544:	20000cc8 	.word	0x20000cc8
 800d548:	20000cc4 	.word	0x20000cc4
 800d54c:	200011ac 	.word	0x200011ac
 800d550:	200011a8 	.word	0x200011a8

0800d554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d55a:	4b28      	ldr	r3, [pc, #160]	; (800d5fc <vTaskSwitchContext+0xa8>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d562:	4b27      	ldr	r3, [pc, #156]	; (800d600 <vTaskSwitchContext+0xac>)
 800d564:	2201      	movs	r2, #1
 800d566:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d568:	e041      	b.n	800d5ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d56a:	4b25      	ldr	r3, [pc, #148]	; (800d600 <vTaskSwitchContext+0xac>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d570:	4b24      	ldr	r3, [pc, #144]	; (800d604 <vTaskSwitchContext+0xb0>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	e010      	b.n	800d59a <vTaskSwitchContext+0x46>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10a      	bne.n	800d594 <vTaskSwitchContext+0x40>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	607b      	str	r3, [r7, #4]
}
 800d590:	bf00      	nop
 800d592:	e7fe      	b.n	800d592 <vTaskSwitchContext+0x3e>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3b01      	subs	r3, #1
 800d598:	60fb      	str	r3, [r7, #12]
 800d59a:	491b      	ldr	r1, [pc, #108]	; (800d608 <vTaskSwitchContext+0xb4>)
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	440b      	add	r3, r1
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d0e4      	beq.n	800d578 <vTaskSwitchContext+0x24>
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4a13      	ldr	r2, [pc, #76]	; (800d608 <vTaskSwitchContext+0xb4>)
 800d5ba:	4413      	add	r3, r2
 800d5bc:	60bb      	str	r3, [r7, #8]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	605a      	str	r2, [r3, #4]
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d104      	bne.n	800d5de <vTaskSwitchContext+0x8a>
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	605a      	str	r2, [r3, #4]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	4a09      	ldr	r2, [pc, #36]	; (800d60c <vTaskSwitchContext+0xb8>)
 800d5e6:	6013      	str	r3, [r2, #0]
 800d5e8:	4a06      	ldr	r2, [pc, #24]	; (800d604 <vTaskSwitchContext+0xb0>)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6013      	str	r3, [r2, #0]
}
 800d5ee:	bf00      	nop
 800d5f0:	3714      	adds	r7, #20
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop
 800d5fc:	200011c0 	.word	0x200011c0
 800d600:	200011ac 	.word	0x200011ac
 800d604:	200011a0 	.word	0x200011a0
 800d608:	20000cc8 	.word	0x20000cc8
 800d60c:	20000cc4 	.word	0x20000cc4

0800d610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d10a      	bne.n	800d636 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	60fb      	str	r3, [r7, #12]
}
 800d632:	bf00      	nop
 800d634:	e7fe      	b.n	800d634 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d636:	4b07      	ldr	r3, [pc, #28]	; (800d654 <vTaskPlaceOnEventList+0x44>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3318      	adds	r3, #24
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7fe fbf3 	bl	800be2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d644:	2101      	movs	r1, #1
 800d646:	6838      	ldr	r0, [r7, #0]
 800d648:	f000 fb8a 	bl	800dd60 <prvAddCurrentTaskToDelayedList>
}
 800d64c:	bf00      	nop
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20000cc4 	.word	0x20000cc4

0800d658 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10a      	bne.n	800d680 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	617b      	str	r3, [r7, #20]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <vTaskPlaceOnEventListRestricted+0x54>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3318      	adds	r3, #24
 800d686:	4619      	mov	r1, r3
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f7fe fbaa 	bl	800bde2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d002      	beq.n	800d69a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d694:	f04f 33ff 	mov.w	r3, #4294967295
 800d698:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d69a:	6879      	ldr	r1, [r7, #4]
 800d69c:	68b8      	ldr	r0, [r7, #8]
 800d69e:	f000 fb5f 	bl	800dd60 <prvAddCurrentTaskToDelayedList>
	}
 800d6a2:	bf00      	nop
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20000cc4 	.word	0x20000cc4

0800d6b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10a      	bne.n	800d6dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	60fb      	str	r3, [r7, #12]
}
 800d6d8:	bf00      	nop
 800d6da:	e7fe      	b.n	800d6da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	3318      	adds	r3, #24
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fe fbdb 	bl	800be9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6e6:	4b1e      	ldr	r3, [pc, #120]	; (800d760 <xTaskRemoveFromEventList+0xb0>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d11d      	bne.n	800d72a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe fbd2 	bl	800be9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fc:	4b19      	ldr	r3, [pc, #100]	; (800d764 <xTaskRemoveFromEventList+0xb4>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	429a      	cmp	r2, r3
 800d702:	d903      	bls.n	800d70c <xTaskRemoveFromEventList+0x5c>
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d708:	4a16      	ldr	r2, [pc, #88]	; (800d764 <xTaskRemoveFromEventList+0xb4>)
 800d70a:	6013      	str	r3, [r2, #0]
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d710:	4613      	mov	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4a13      	ldr	r2, [pc, #76]	; (800d768 <xTaskRemoveFromEventList+0xb8>)
 800d71a:	441a      	add	r2, r3
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	3304      	adds	r3, #4
 800d720:	4619      	mov	r1, r3
 800d722:	4610      	mov	r0, r2
 800d724:	f7fe fb5d 	bl	800bde2 <vListInsertEnd>
 800d728:	e005      	b.n	800d736 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	3318      	adds	r3, #24
 800d72e:	4619      	mov	r1, r3
 800d730:	480e      	ldr	r0, [pc, #56]	; (800d76c <xTaskRemoveFromEventList+0xbc>)
 800d732:	f7fe fb56 	bl	800bde2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	4b0d      	ldr	r3, [pc, #52]	; (800d770 <xTaskRemoveFromEventList+0xc0>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	429a      	cmp	r2, r3
 800d742:	d905      	bls.n	800d750 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d744:	2301      	movs	r3, #1
 800d746:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d748:	4b0a      	ldr	r3, [pc, #40]	; (800d774 <xTaskRemoveFromEventList+0xc4>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	e001      	b.n	800d754 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d750:	2300      	movs	r3, #0
 800d752:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d754:	697b      	ldr	r3, [r7, #20]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	200011c0 	.word	0x200011c0
 800d764:	200011a0 	.word	0x200011a0
 800d768:	20000cc8 	.word	0x20000cc8
 800d76c:	20001158 	.word	0x20001158
 800d770:	20000cc4 	.word	0x20000cc4
 800d774:	200011ac 	.word	0x200011ac

0800d778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d780:	4b06      	ldr	r3, [pc, #24]	; (800d79c <vTaskInternalSetTimeOutState+0x24>)
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d788:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <vTaskInternalSetTimeOutState+0x28>)
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	605a      	str	r2, [r3, #4]
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	200011b0 	.word	0x200011b0
 800d7a0:	2000119c 	.word	0x2000119c

0800d7a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b088      	sub	sp, #32
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10a      	bne.n	800d7ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	613b      	str	r3, [r7, #16]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10a      	bne.n	800d7e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	60fb      	str	r3, [r7, #12]
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d7e6:	f000 ff8d 	bl	800e704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d7ea:	4b1d      	ldr	r3, [pc, #116]	; (800d860 <xTaskCheckForTimeOut+0xbc>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	69ba      	ldr	r2, [r7, #24]
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d802:	d102      	bne.n	800d80a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d804:	2300      	movs	r3, #0
 800d806:	61fb      	str	r3, [r7, #28]
 800d808:	e023      	b.n	800d852 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	4b15      	ldr	r3, [pc, #84]	; (800d864 <xTaskCheckForTimeOut+0xc0>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	429a      	cmp	r2, r3
 800d814:	d007      	beq.n	800d826 <xTaskCheckForTimeOut+0x82>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	69ba      	ldr	r2, [r7, #24]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d302      	bcc.n	800d826 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d820:	2301      	movs	r3, #1
 800d822:	61fb      	str	r3, [r7, #28]
 800d824:	e015      	b.n	800d852 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	697a      	ldr	r2, [r7, #20]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d20b      	bcs.n	800d848 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	1ad2      	subs	r2, r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff ff9b 	bl	800d778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d842:	2300      	movs	r3, #0
 800d844:	61fb      	str	r3, [r7, #28]
 800d846:	e004      	b.n	800d852 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d84e:	2301      	movs	r3, #1
 800d850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d852:	f000 ff87 	bl	800e764 <vPortExitCritical>

	return xReturn;
 800d856:	69fb      	ldr	r3, [r7, #28]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3720      	adds	r7, #32
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	2000119c 	.word	0x2000119c
 800d864:	200011b0 	.word	0x200011b0

0800d868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d868:	b480      	push	{r7}
 800d86a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d86c:	4b03      	ldr	r3, [pc, #12]	; (800d87c <vTaskMissedYield+0x14>)
 800d86e:	2201      	movs	r2, #1
 800d870:	601a      	str	r2, [r3, #0]
}
 800d872:	bf00      	nop
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	200011ac 	.word	0x200011ac

0800d880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d888:	f000 f852 	bl	800d930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d88c:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <prvIdleTask+0x28>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d9f9      	bls.n	800d888 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d894:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <prvIdleTask+0x2c>)
 800d896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8a4:	e7f0      	b.n	800d888 <prvIdleTask+0x8>
 800d8a6:	bf00      	nop
 800d8a8:	20000cc8 	.word	0x20000cc8
 800d8ac:	e000ed04 	.word	0xe000ed04

0800d8b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	607b      	str	r3, [r7, #4]
 800d8ba:	e00c      	b.n	800d8d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4a12      	ldr	r2, [pc, #72]	; (800d910 <prvInitialiseTaskLists+0x60>)
 800d8c8:	4413      	add	r3, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fa5c 	bl	800bd88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	607b      	str	r3, [r7, #4]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b37      	cmp	r3, #55	; 0x37
 800d8da:	d9ef      	bls.n	800d8bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d8dc:	480d      	ldr	r0, [pc, #52]	; (800d914 <prvInitialiseTaskLists+0x64>)
 800d8de:	f7fe fa53 	bl	800bd88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d8e2:	480d      	ldr	r0, [pc, #52]	; (800d918 <prvInitialiseTaskLists+0x68>)
 800d8e4:	f7fe fa50 	bl	800bd88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d8e8:	480c      	ldr	r0, [pc, #48]	; (800d91c <prvInitialiseTaskLists+0x6c>)
 800d8ea:	f7fe fa4d 	bl	800bd88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d8ee:	480c      	ldr	r0, [pc, #48]	; (800d920 <prvInitialiseTaskLists+0x70>)
 800d8f0:	f7fe fa4a 	bl	800bd88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d8f4:	480b      	ldr	r0, [pc, #44]	; (800d924 <prvInitialiseTaskLists+0x74>)
 800d8f6:	f7fe fa47 	bl	800bd88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d8fa:	4b0b      	ldr	r3, [pc, #44]	; (800d928 <prvInitialiseTaskLists+0x78>)
 800d8fc:	4a05      	ldr	r2, [pc, #20]	; (800d914 <prvInitialiseTaskLists+0x64>)
 800d8fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d900:	4b0a      	ldr	r3, [pc, #40]	; (800d92c <prvInitialiseTaskLists+0x7c>)
 800d902:	4a05      	ldr	r2, [pc, #20]	; (800d918 <prvInitialiseTaskLists+0x68>)
 800d904:	601a      	str	r2, [r3, #0]
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	20000cc8 	.word	0x20000cc8
 800d914:	20001128 	.word	0x20001128
 800d918:	2000113c 	.word	0x2000113c
 800d91c:	20001158 	.word	0x20001158
 800d920:	2000116c 	.word	0x2000116c
 800d924:	20001184 	.word	0x20001184
 800d928:	20001150 	.word	0x20001150
 800d92c:	20001154 	.word	0x20001154

0800d930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d936:	e019      	b.n	800d96c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d938:	f000 fee4 	bl	800e704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d93c:	4b10      	ldr	r3, [pc, #64]	; (800d980 <prvCheckTasksWaitingTermination+0x50>)
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3304      	adds	r3, #4
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fe faa7 	bl	800be9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d94e:	4b0d      	ldr	r3, [pc, #52]	; (800d984 <prvCheckTasksWaitingTermination+0x54>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	3b01      	subs	r3, #1
 800d954:	4a0b      	ldr	r2, [pc, #44]	; (800d984 <prvCheckTasksWaitingTermination+0x54>)
 800d956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d958:	4b0b      	ldr	r3, [pc, #44]	; (800d988 <prvCheckTasksWaitingTermination+0x58>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	4a0a      	ldr	r2, [pc, #40]	; (800d988 <prvCheckTasksWaitingTermination+0x58>)
 800d960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d962:	f000 feff 	bl	800e764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f810 	bl	800d98c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d96c:	4b06      	ldr	r3, [pc, #24]	; (800d988 <prvCheckTasksWaitingTermination+0x58>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1e1      	bne.n	800d938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d974:	bf00      	nop
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	2000116c 	.word	0x2000116c
 800d984:	20001198 	.word	0x20001198
 800d988:	20001180 	.word	0x20001180

0800d98c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d108      	bne.n	800d9b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f001 f89c 	bl	800eae0 <vPortFree>
				vPortFree( pxTCB );
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f001 f899 	bl	800eae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9ae:	e018      	b.n	800d9e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d103      	bne.n	800d9c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 f890 	bl	800eae0 <vPortFree>
	}
 800d9c0:	e00f      	b.n	800d9e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d00a      	beq.n	800d9e2 <prvDeleteTCB+0x56>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	60fb      	str	r3, [r7, #12]
}
 800d9de:	bf00      	nop
 800d9e0:	e7fe      	b.n	800d9e0 <prvDeleteTCB+0x54>
	}
 800d9e2:	bf00      	nop
 800d9e4:	3710      	adds	r7, #16
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
	...

0800d9ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	; (800da24 <prvResetNextTaskUnblockTime+0x38>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d104      	bne.n	800da06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d9fc:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <prvResetNextTaskUnblockTime+0x3c>)
 800d9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800da02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da04:	e008      	b.n	800da18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da06:	4b07      	ldr	r3, [pc, #28]	; (800da24 <prvResetNextTaskUnblockTime+0x38>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	4a04      	ldr	r2, [pc, #16]	; (800da28 <prvResetNextTaskUnblockTime+0x3c>)
 800da16:	6013      	str	r3, [r2, #0]
}
 800da18:	bf00      	nop
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr
 800da24:	20001150 	.word	0x20001150
 800da28:	200011b8 	.word	0x200011b8

0800da2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800da32:	4b05      	ldr	r3, [pc, #20]	; (800da48 <xTaskGetCurrentTaskHandle+0x1c>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	607b      	str	r3, [r7, #4]

		return xReturn;
 800da38:	687b      	ldr	r3, [r7, #4]
	}
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	20000cc4 	.word	0x20000cc4

0800da4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da52:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <xTaskGetSchedulerState+0x34>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d102      	bne.n	800da60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da5a:	2301      	movs	r3, #1
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	e008      	b.n	800da72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da60:	4b08      	ldr	r3, [pc, #32]	; (800da84 <xTaskGetSchedulerState+0x38>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d102      	bne.n	800da6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da68:	2302      	movs	r3, #2
 800da6a:	607b      	str	r3, [r7, #4]
 800da6c:	e001      	b.n	800da72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da6e:	2300      	movs	r3, #0
 800da70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da72:	687b      	ldr	r3, [r7, #4]
	}
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	200011a4 	.word	0x200011a4
 800da84:	200011c0 	.word	0x200011c0

0800da88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d051      	beq.n	800db42 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa2:	4b2a      	ldr	r3, [pc, #168]	; (800db4c <xTaskPriorityInherit+0xc4>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d241      	bcs.n	800db30 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	db06      	blt.n	800dac2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab4:	4b25      	ldr	r3, [pc, #148]	; (800db4c <xTaskPriorityInherit+0xc4>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	6959      	ldr	r1, [r3, #20]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daca:	4613      	mov	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4413      	add	r3, r2
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	4a1f      	ldr	r2, [pc, #124]	; (800db50 <xTaskPriorityInherit+0xc8>)
 800dad4:	4413      	add	r3, r2
 800dad6:	4299      	cmp	r1, r3
 800dad8:	d122      	bne.n	800db20 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	3304      	adds	r3, #4
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe f9dc 	bl	800be9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dae4:	4b19      	ldr	r3, [pc, #100]	; (800db4c <xTaskPriorityInherit+0xc4>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf2:	4b18      	ldr	r3, [pc, #96]	; (800db54 <xTaskPriorityInherit+0xcc>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d903      	bls.n	800db02 <xTaskPriorityInherit+0x7a>
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafe:	4a15      	ldr	r2, [pc, #84]	; (800db54 <xTaskPriorityInherit+0xcc>)
 800db00:	6013      	str	r3, [r2, #0]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db06:	4613      	mov	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4a10      	ldr	r2, [pc, #64]	; (800db50 <xTaskPriorityInherit+0xc8>)
 800db10:	441a      	add	r2, r3
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	3304      	adds	r3, #4
 800db16:	4619      	mov	r1, r3
 800db18:	4610      	mov	r0, r2
 800db1a:	f7fe f962 	bl	800bde2 <vListInsertEnd>
 800db1e:	e004      	b.n	800db2a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db20:	4b0a      	ldr	r3, [pc, #40]	; (800db4c <xTaskPriorityInherit+0xc4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db2a:	2301      	movs	r3, #1
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	e008      	b.n	800db42 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db34:	4b05      	ldr	r3, [pc, #20]	; (800db4c <xTaskPriorityInherit+0xc4>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d201      	bcs.n	800db42 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db3e:	2301      	movs	r3, #1
 800db40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db42:	68fb      	ldr	r3, [r7, #12]
	}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	20000cc4 	.word	0x20000cc4
 800db50:	20000cc8 	.word	0x20000cc8
 800db54:	200011a0 	.word	0x200011a0

0800db58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db64:	2300      	movs	r3, #0
 800db66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d056      	beq.n	800dc1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db6e:	4b2e      	ldr	r3, [pc, #184]	; (800dc28 <xTaskPriorityDisinherit+0xd0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	693a      	ldr	r2, [r7, #16]
 800db74:	429a      	cmp	r2, r3
 800db76:	d00a      	beq.n	800db8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	60fb      	str	r3, [r7, #12]
}
 800db8a:	bf00      	nop
 800db8c:	e7fe      	b.n	800db8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10a      	bne.n	800dbac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	60bb      	str	r3, [r7, #8]
}
 800dba8:	bf00      	nop
 800dbaa:	e7fe      	b.n	800dbaa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb0:	1e5a      	subs	r2, r3, #1
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d02c      	beq.n	800dc1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d128      	bne.n	800dc1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe f964 	bl	800be9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbec:	4b0f      	ldr	r3, [pc, #60]	; (800dc2c <xTaskPriorityDisinherit+0xd4>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d903      	bls.n	800dbfc <xTaskPriorityDisinherit+0xa4>
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf8:	4a0c      	ldr	r2, [pc, #48]	; (800dc2c <xTaskPriorityDisinherit+0xd4>)
 800dbfa:	6013      	str	r3, [r2, #0]
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc00:	4613      	mov	r3, r2
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	4413      	add	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4a09      	ldr	r2, [pc, #36]	; (800dc30 <xTaskPriorityDisinherit+0xd8>)
 800dc0a:	441a      	add	r2, r3
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	3304      	adds	r3, #4
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f7fe f8e5 	bl	800bde2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc1c:	697b      	ldr	r3, [r7, #20]
	}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20000cc4 	.word	0x20000cc4
 800dc2c:	200011a0 	.word	0x200011a0
 800dc30:	20000cc8 	.word	0x20000cc8

0800dc34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b088      	sub	sp, #32
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc42:	2301      	movs	r3, #1
 800dc44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d06a      	beq.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10a      	bne.n	800dc6a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	60fb      	str	r3, [r7, #12]
}
 800dc66:	bf00      	nop
 800dc68:	e7fe      	b.n	800dc68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d902      	bls.n	800dc7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	61fb      	str	r3, [r7, #28]
 800dc78:	e002      	b.n	800dc80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d04b      	beq.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d146      	bne.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dc94:	4b25      	ldr	r3, [pc, #148]	; (800dd2c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d10a      	bne.n	800dcb4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	60bb      	str	r3, [r7, #8]
}
 800dcb0:	bf00      	nop
 800dcb2:	e7fe      	b.n	800dcb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	69fa      	ldr	r2, [r7, #28]
 800dcbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	699b      	ldr	r3, [r3, #24]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	db04      	blt.n	800dcd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	6959      	ldr	r1, [r3, #20]
 800dcd6:	693a      	ldr	r2, [r7, #16]
 800dcd8:	4613      	mov	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	4a13      	ldr	r2, [pc, #76]	; (800dd30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dce2:	4413      	add	r3, r2
 800dce4:	4299      	cmp	r1, r3
 800dce6:	d11c      	bne.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	3304      	adds	r3, #4
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fe f8d5 	bl	800be9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf6:	4b0f      	ldr	r3, [pc, #60]	; (800dd34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d903      	bls.n	800dd06 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd02:	4a0c      	ldr	r2, [pc, #48]	; (800dd34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	4413      	add	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4a07      	ldr	r2, [pc, #28]	; (800dd30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd14:	441a      	add	r2, r3
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	3304      	adds	r3, #4
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f7fe f860 	bl	800bde2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd22:	bf00      	nop
 800dd24:	3720      	adds	r7, #32
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20000cc4 	.word	0x20000cc4
 800dd30:	20000cc8 	.word	0x20000cc8
 800dd34:	200011a0 	.word	0x200011a0

0800dd38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd38:	b480      	push	{r7}
 800dd3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd3c:	4b07      	ldr	r3, [pc, #28]	; (800dd5c <pvTaskIncrementMutexHeldCount+0x24>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d004      	beq.n	800dd4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd44:	4b05      	ldr	r3, [pc, #20]	; (800dd5c <pvTaskIncrementMutexHeldCount+0x24>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd4a:	3201      	adds	r2, #1
 800dd4c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dd4e:	4b03      	ldr	r3, [pc, #12]	; (800dd5c <pvTaskIncrementMutexHeldCount+0x24>)
 800dd50:	681b      	ldr	r3, [r3, #0]
	}
 800dd52:	4618      	mov	r0, r3
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	20000cc4 	.word	0x20000cc4

0800dd60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd6a:	4b21      	ldr	r3, [pc, #132]	; (800ddf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd70:	4b20      	ldr	r3, [pc, #128]	; (800ddf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3304      	adds	r3, #4
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fe f890 	bl	800be9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd82:	d10a      	bne.n	800dd9a <prvAddCurrentTaskToDelayedList+0x3a>
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d007      	beq.n	800dd9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd8a:	4b1a      	ldr	r3, [pc, #104]	; (800ddf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	4619      	mov	r1, r3
 800dd92:	4819      	ldr	r0, [pc, #100]	; (800ddf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800dd94:	f7fe f825 	bl	800bde2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd98:	e026      	b.n	800dde8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4413      	add	r3, r2
 800dda0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dda2:	4b14      	ldr	r3, [pc, #80]	; (800ddf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68ba      	ldr	r2, [r7, #8]
 800dda8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d209      	bcs.n	800ddc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddb2:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	4b0f      	ldr	r3, [pc, #60]	; (800ddf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	3304      	adds	r3, #4
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	f7fe f833 	bl	800be2a <vListInsert>
}
 800ddc4:	e010      	b.n	800dde8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddc6:	4b0e      	ldr	r3, [pc, #56]	; (800de00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	4b0a      	ldr	r3, [pc, #40]	; (800ddf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3304      	adds	r3, #4
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	f7fe f829 	bl	800be2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddd8:	4b0a      	ldr	r3, [pc, #40]	; (800de04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d202      	bcs.n	800dde8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dde2:	4a08      	ldr	r2, [pc, #32]	; (800de04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	6013      	str	r3, [r2, #0]
}
 800dde8:	bf00      	nop
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	2000119c 	.word	0x2000119c
 800ddf4:	20000cc4 	.word	0x20000cc4
 800ddf8:	20001184 	.word	0x20001184
 800ddfc:	20001154 	.word	0x20001154
 800de00:	20001150 	.word	0x20001150
 800de04:	200011b8 	.word	0x200011b8

0800de08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08a      	sub	sp, #40	; 0x28
 800de0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de0e:	2300      	movs	r3, #0
 800de10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de12:	f000 fb07 	bl	800e424 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de16:	4b1c      	ldr	r3, [pc, #112]	; (800de88 <xTimerCreateTimerTask+0x80>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d021      	beq.n	800de62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de22:	2300      	movs	r3, #0
 800de24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de26:	1d3a      	adds	r2, r7, #4
 800de28:	f107 0108 	add.w	r1, r7, #8
 800de2c:	f107 030c 	add.w	r3, r7, #12
 800de30:	4618      	mov	r0, r3
 800de32:	f7fd ff8f 	bl	800bd54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	9202      	str	r2, [sp, #8]
 800de3e:	9301      	str	r3, [sp, #4]
 800de40:	2302      	movs	r3, #2
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	2300      	movs	r3, #0
 800de46:	460a      	mov	r2, r1
 800de48:	4910      	ldr	r1, [pc, #64]	; (800de8c <xTimerCreateTimerTask+0x84>)
 800de4a:	4811      	ldr	r0, [pc, #68]	; (800de90 <xTimerCreateTimerTask+0x88>)
 800de4c:	f7fe ffd0 	bl	800cdf0 <xTaskCreateStatic>
 800de50:	4603      	mov	r3, r0
 800de52:	4a10      	ldr	r2, [pc, #64]	; (800de94 <xTimerCreateTimerTask+0x8c>)
 800de54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de56:	4b0f      	ldr	r3, [pc, #60]	; (800de94 <xTimerCreateTimerTask+0x8c>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de5e:	2301      	movs	r3, #1
 800de60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10a      	bne.n	800de7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	613b      	str	r3, [r7, #16]
}
 800de7a:	bf00      	nop
 800de7c:	e7fe      	b.n	800de7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800de7e:	697b      	ldr	r3, [r7, #20]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3718      	adds	r7, #24
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	200011f4 	.word	0x200011f4
 800de8c:	0801349c 	.word	0x0801349c
 800de90:	0800dfcd 	.word	0x0800dfcd
 800de94:	200011f8 	.word	0x200011f8

0800de98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b08a      	sub	sp, #40	; 0x28
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
 800dea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10a      	bne.n	800dec6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	623b      	str	r3, [r7, #32]
}
 800dec2:	bf00      	nop
 800dec4:	e7fe      	b.n	800dec4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dec6:	4b1a      	ldr	r3, [pc, #104]	; (800df30 <xTimerGenericCommand+0x98>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d02a      	beq.n	800df24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2b05      	cmp	r3, #5
 800dede:	dc18      	bgt.n	800df12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dee0:	f7ff fdb4 	bl	800da4c <xTaskGetSchedulerState>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d109      	bne.n	800defe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800deea:	4b11      	ldr	r3, [pc, #68]	; (800df30 <xTimerGenericCommand+0x98>)
 800deec:	6818      	ldr	r0, [r3, #0]
 800deee:	f107 0110 	add.w	r1, r7, #16
 800def2:	2300      	movs	r3, #0
 800def4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def6:	f7fe f9ef 	bl	800c2d8 <xQueueGenericSend>
 800defa:	6278      	str	r0, [r7, #36]	; 0x24
 800defc:	e012      	b.n	800df24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800defe:	4b0c      	ldr	r3, [pc, #48]	; (800df30 <xTimerGenericCommand+0x98>)
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	f107 0110 	add.w	r1, r7, #16
 800df06:	2300      	movs	r3, #0
 800df08:	2200      	movs	r2, #0
 800df0a:	f7fe f9e5 	bl	800c2d8 <xQueueGenericSend>
 800df0e:	6278      	str	r0, [r7, #36]	; 0x24
 800df10:	e008      	b.n	800df24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df12:	4b07      	ldr	r3, [pc, #28]	; (800df30 <xTimerGenericCommand+0x98>)
 800df14:	6818      	ldr	r0, [r3, #0]
 800df16:	f107 0110 	add.w	r1, r7, #16
 800df1a:	2300      	movs	r3, #0
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	f7fe fad9 	bl	800c4d4 <xQueueGenericSendFromISR>
 800df22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df26:	4618      	mov	r0, r3
 800df28:	3728      	adds	r7, #40	; 0x28
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	200011f4 	.word	0x200011f4

0800df34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af02      	add	r7, sp, #8
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df3e:	4b22      	ldr	r3, [pc, #136]	; (800dfc8 <prvProcessExpiredTimer+0x94>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	3304      	adds	r3, #4
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fd ffa5 	bl	800be9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df58:	f003 0304 	and.w	r3, r3, #4
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d022      	beq.n	800dfa6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	699a      	ldr	r2, [r3, #24]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	18d1      	adds	r1, r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	6978      	ldr	r0, [r7, #20]
 800df6e:	f000 f8d1 	bl	800e114 <prvInsertTimerInActiveList>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01f      	beq.n	800dfb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df78:	2300      	movs	r3, #0
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	2300      	movs	r3, #0
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	2100      	movs	r1, #0
 800df82:	6978      	ldr	r0, [r7, #20]
 800df84:	f7ff ff88 	bl	800de98 <xTimerGenericCommand>
 800df88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d113      	bne.n	800dfb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	60fb      	str	r3, [r7, #12]
}
 800dfa2:	bf00      	nop
 800dfa4:	e7fe      	b.n	800dfa4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfac:	f023 0301 	bic.w	r3, r3, #1
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	6a1b      	ldr	r3, [r3, #32]
 800dfbc:	6978      	ldr	r0, [r7, #20]
 800dfbe:	4798      	blx	r3
}
 800dfc0:	bf00      	nop
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	200011ec 	.word	0x200011ec

0800dfcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfd4:	f107 0308 	add.w	r3, r7, #8
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f000 f857 	bl	800e08c <prvGetNextExpireTime>
 800dfde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 f803 	bl	800dff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dfea:	f000 f8d5 	bl	800e198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfee:	e7f1      	b.n	800dfd4 <prvTimerTask+0x8>

0800dff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dffa:	f7ff f935 	bl	800d268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dffe:	f107 0308 	add.w	r3, r7, #8
 800e002:	4618      	mov	r0, r3
 800e004:	f000 f866 	bl	800e0d4 <prvSampleTimeNow>
 800e008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d130      	bne.n	800e072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d10a      	bne.n	800e02c <prvProcessTimerOrBlockTask+0x3c>
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d806      	bhi.n	800e02c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e01e:	f7ff f931 	bl	800d284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e022:	68f9      	ldr	r1, [r7, #12]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff ff85 	bl	800df34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e02a:	e024      	b.n	800e076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d008      	beq.n	800e044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e032:	4b13      	ldr	r3, [pc, #76]	; (800e080 <prvProcessTimerOrBlockTask+0x90>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <prvProcessTimerOrBlockTask+0x50>
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <prvProcessTimerOrBlockTask+0x52>
 800e040:	2300      	movs	r3, #0
 800e042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e044:	4b0f      	ldr	r3, [pc, #60]	; (800e084 <prvProcessTimerOrBlockTask+0x94>)
 800e046:	6818      	ldr	r0, [r3, #0]
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	683a      	ldr	r2, [r7, #0]
 800e050:	4619      	mov	r1, r3
 800e052:	f7fe fe99 	bl	800cd88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e056:	f7ff f915 	bl	800d284 <xTaskResumeAll>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10a      	bne.n	800e076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e060:	4b09      	ldr	r3, [pc, #36]	; (800e088 <prvProcessTimerOrBlockTask+0x98>)
 800e062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	f3bf 8f6f 	isb	sy
}
 800e070:	e001      	b.n	800e076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e072:	f7ff f907 	bl	800d284 <xTaskResumeAll>
}
 800e076:	bf00      	nop
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	200011f0 	.word	0x200011f0
 800e084:	200011f4 	.word	0x200011f4
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e094:	4b0e      	ldr	r3, [pc, #56]	; (800e0d0 <prvGetNextExpireTime+0x44>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <prvGetNextExpireTime+0x16>
 800e09e:	2201      	movs	r2, #1
 800e0a0:	e000      	b.n	800e0a4 <prvGetNextExpireTime+0x18>
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d105      	bne.n	800e0bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0b0:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <prvGetNextExpireTime+0x44>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	60fb      	str	r3, [r7, #12]
 800e0ba:	e001      	b.n	800e0c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	200011ec 	.word	0x200011ec

0800e0d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e0dc:	f7ff f970 	bl	800d3c0 <xTaskGetTickCount>
 800e0e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e0e2:	4b0b      	ldr	r3, [pc, #44]	; (800e110 <prvSampleTimeNow+0x3c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d205      	bcs.n	800e0f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e0ec:	f000 f936 	bl	800e35c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	e002      	b.n	800e0fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e0fe:	4a04      	ldr	r2, [pc, #16]	; (800e110 <prvSampleTimeNow+0x3c>)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e104:	68fb      	ldr	r3, [r7, #12]
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	200011fc 	.word	0x200011fc

0800e114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
 800e120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e122:	2300      	movs	r3, #0
 800e124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	d812      	bhi.n	800e160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	1ad2      	subs	r2, r2, r3
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	429a      	cmp	r2, r3
 800e146:	d302      	bcc.n	800e14e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e148:	2301      	movs	r3, #1
 800e14a:	617b      	str	r3, [r7, #20]
 800e14c:	e01b      	b.n	800e186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e14e:	4b10      	ldr	r3, [pc, #64]	; (800e190 <prvInsertTimerInActiveList+0x7c>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3304      	adds	r3, #4
 800e156:	4619      	mov	r1, r3
 800e158:	4610      	mov	r0, r2
 800e15a:	f7fd fe66 	bl	800be2a <vListInsert>
 800e15e:	e012      	b.n	800e186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	429a      	cmp	r2, r3
 800e166:	d206      	bcs.n	800e176 <prvInsertTimerInActiveList+0x62>
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d302      	bcc.n	800e176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e170:	2301      	movs	r3, #1
 800e172:	617b      	str	r3, [r7, #20]
 800e174:	e007      	b.n	800e186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e176:	4b07      	ldr	r3, [pc, #28]	; (800e194 <prvInsertTimerInActiveList+0x80>)
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3304      	adds	r3, #4
 800e17e:	4619      	mov	r1, r3
 800e180:	4610      	mov	r0, r2
 800e182:	f7fd fe52 	bl	800be2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e186:	697b      	ldr	r3, [r7, #20]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3718      	adds	r7, #24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	200011f0 	.word	0x200011f0
 800e194:	200011ec 	.word	0x200011ec

0800e198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08e      	sub	sp, #56	; 0x38
 800e19c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e19e:	e0ca      	b.n	800e336 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	da18      	bge.n	800e1d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e1a6:	1d3b      	adds	r3, r7, #4
 800e1a8:	3304      	adds	r3, #4
 800e1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10a      	bne.n	800e1c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	61fb      	str	r3, [r7, #28]
}
 800e1c4:	bf00      	nop
 800e1c6:	e7fe      	b.n	800e1c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1ce:	6850      	ldr	r0, [r2, #4]
 800e1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1d2:	6892      	ldr	r2, [r2, #8]
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f2c0 80aa 	blt.w	800e334 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e6:	695b      	ldr	r3, [r3, #20]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d004      	beq.n	800e1f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fd fe53 	bl	800be9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1f6:	463b      	mov	r3, r7
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7ff ff6b 	bl	800e0d4 <prvSampleTimeNow>
 800e1fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2b09      	cmp	r3, #9
 800e204:	f200 8097 	bhi.w	800e336 <prvProcessReceivedCommands+0x19e>
 800e208:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <prvProcessReceivedCommands+0x78>)
 800e20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20e:	bf00      	nop
 800e210:	0800e239 	.word	0x0800e239
 800e214:	0800e239 	.word	0x0800e239
 800e218:	0800e239 	.word	0x0800e239
 800e21c:	0800e2ad 	.word	0x0800e2ad
 800e220:	0800e2c1 	.word	0x0800e2c1
 800e224:	0800e30b 	.word	0x0800e30b
 800e228:	0800e239 	.word	0x0800e239
 800e22c:	0800e239 	.word	0x0800e239
 800e230:	0800e2ad 	.word	0x0800e2ad
 800e234:	0800e2c1 	.word	0x0800e2c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e23e:	f043 0301 	orr.w	r3, r3, #1
 800e242:	b2da      	uxtb	r2, r3
 800e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	18d1      	adds	r1, r2, r3
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e258:	f7ff ff5c 	bl	800e114 <prvInsertTimerInActiveList>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d069      	beq.n	800e336 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e268:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e270:	f003 0304 	and.w	r3, r3, #4
 800e274:	2b00      	cmp	r3, #0
 800e276:	d05e      	beq.n	800e336 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27c:	699b      	ldr	r3, [r3, #24]
 800e27e:	441a      	add	r2, r3
 800e280:	2300      	movs	r3, #0
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	2300      	movs	r3, #0
 800e286:	2100      	movs	r1, #0
 800e288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e28a:	f7ff fe05 	bl	800de98 <xTimerGenericCommand>
 800e28e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e290:	6a3b      	ldr	r3, [r7, #32]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d14f      	bne.n	800e336 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	61bb      	str	r3, [r7, #24]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2b2:	f023 0301 	bic.w	r3, r3, #1
 800e2b6:	b2da      	uxtb	r2, r3
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e2be:	e03a      	b.n	800e336 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2c6:	f043 0301 	orr.w	r3, r3, #1
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10a      	bne.n	800e2f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	617b      	str	r3, [r7, #20]
}
 800e2f2:	bf00      	nop
 800e2f4:	e7fe      	b.n	800e2f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	699a      	ldr	r2, [r3, #24]
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	18d1      	adds	r1, r2, r3
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e304:	f7ff ff06 	bl	800e114 <prvInsertTimerInActiveList>
					break;
 800e308:	e015      	b.n	800e336 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e310:	f003 0302 	and.w	r3, r3, #2
 800e314:	2b00      	cmp	r3, #0
 800e316:	d103      	bne.n	800e320 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e31a:	f000 fbe1 	bl	800eae0 <vPortFree>
 800e31e:	e00a      	b.n	800e336 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e326:	f023 0301 	bic.w	r3, r3, #1
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e332:	e000      	b.n	800e336 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e336:	4b08      	ldr	r3, [pc, #32]	; (800e358 <prvProcessReceivedCommands+0x1c0>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	1d39      	adds	r1, r7, #4
 800e33c:	2200      	movs	r2, #0
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fe f964 	bl	800c60c <xQueueReceive>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	f47f af2a 	bne.w	800e1a0 <prvProcessReceivedCommands+0x8>
	}
}
 800e34c:	bf00      	nop
 800e34e:	bf00      	nop
 800e350:	3730      	adds	r7, #48	; 0x30
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	200011f4 	.word	0x200011f4

0800e35c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e362:	e048      	b.n	800e3f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e364:	4b2d      	ldr	r3, [pc, #180]	; (800e41c <prvSwitchTimerLists+0xc0>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e36e:	4b2b      	ldr	r3, [pc, #172]	; (800e41c <prvSwitchTimerLists+0xc0>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fd fd8d 	bl	800be9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6a1b      	ldr	r3, [r3, #32]
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e390:	f003 0304 	and.w	r3, r3, #4
 800e394:	2b00      	cmp	r3, #0
 800e396:	d02e      	beq.n	800e3f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	693a      	ldr	r2, [r7, #16]
 800e39e:	4413      	add	r3, r2
 800e3a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d90e      	bls.n	800e3c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3b6:	4b19      	ldr	r3, [pc, #100]	; (800e41c <prvSwitchTimerLists+0xc0>)
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	3304      	adds	r3, #4
 800e3be:	4619      	mov	r1, r3
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	f7fd fd32 	bl	800be2a <vListInsert>
 800e3c6:	e016      	b.n	800e3f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9300      	str	r3, [sp, #0]
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f7ff fd60 	bl	800de98 <xTimerGenericCommand>
 800e3d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10a      	bne.n	800e3f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	603b      	str	r3, [r7, #0]
}
 800e3f2:	bf00      	nop
 800e3f4:	e7fe      	b.n	800e3f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3f6:	4b09      	ldr	r3, [pc, #36]	; (800e41c <prvSwitchTimerLists+0xc0>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1b1      	bne.n	800e364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e400:	4b06      	ldr	r3, [pc, #24]	; (800e41c <prvSwitchTimerLists+0xc0>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e406:	4b06      	ldr	r3, [pc, #24]	; (800e420 <prvSwitchTimerLists+0xc4>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a04      	ldr	r2, [pc, #16]	; (800e41c <prvSwitchTimerLists+0xc0>)
 800e40c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e40e:	4a04      	ldr	r2, [pc, #16]	; (800e420 <prvSwitchTimerLists+0xc4>)
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	6013      	str	r3, [r2, #0]
}
 800e414:	bf00      	nop
 800e416:	3718      	adds	r7, #24
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	200011ec 	.word	0x200011ec
 800e420:	200011f0 	.word	0x200011f0

0800e424 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e42a:	f000 f96b 	bl	800e704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e42e:	4b15      	ldr	r3, [pc, #84]	; (800e484 <prvCheckForValidListAndQueue+0x60>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d120      	bne.n	800e478 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e436:	4814      	ldr	r0, [pc, #80]	; (800e488 <prvCheckForValidListAndQueue+0x64>)
 800e438:	f7fd fca6 	bl	800bd88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e43c:	4813      	ldr	r0, [pc, #76]	; (800e48c <prvCheckForValidListAndQueue+0x68>)
 800e43e:	f7fd fca3 	bl	800bd88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e442:	4b13      	ldr	r3, [pc, #76]	; (800e490 <prvCheckForValidListAndQueue+0x6c>)
 800e444:	4a10      	ldr	r2, [pc, #64]	; (800e488 <prvCheckForValidListAndQueue+0x64>)
 800e446:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e448:	4b12      	ldr	r3, [pc, #72]	; (800e494 <prvCheckForValidListAndQueue+0x70>)
 800e44a:	4a10      	ldr	r2, [pc, #64]	; (800e48c <prvCheckForValidListAndQueue+0x68>)
 800e44c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e44e:	2300      	movs	r3, #0
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	4b11      	ldr	r3, [pc, #68]	; (800e498 <prvCheckForValidListAndQueue+0x74>)
 800e454:	4a11      	ldr	r2, [pc, #68]	; (800e49c <prvCheckForValidListAndQueue+0x78>)
 800e456:	2110      	movs	r1, #16
 800e458:	200a      	movs	r0, #10
 800e45a:	f7fd fdb1 	bl	800bfc0 <xQueueGenericCreateStatic>
 800e45e:	4603      	mov	r3, r0
 800e460:	4a08      	ldr	r2, [pc, #32]	; (800e484 <prvCheckForValidListAndQueue+0x60>)
 800e462:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e464:	4b07      	ldr	r3, [pc, #28]	; (800e484 <prvCheckForValidListAndQueue+0x60>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d005      	beq.n	800e478 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e46c:	4b05      	ldr	r3, [pc, #20]	; (800e484 <prvCheckForValidListAndQueue+0x60>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	490b      	ldr	r1, [pc, #44]	; (800e4a0 <prvCheckForValidListAndQueue+0x7c>)
 800e472:	4618      	mov	r0, r3
 800e474:	f7fe fc5e 	bl	800cd34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e478:	f000 f974 	bl	800e764 <vPortExitCritical>
}
 800e47c:	bf00      	nop
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	200011f4 	.word	0x200011f4
 800e488:	200011c4 	.word	0x200011c4
 800e48c:	200011d8 	.word	0x200011d8
 800e490:	200011ec 	.word	0x200011ec
 800e494:	200011f0 	.word	0x200011f0
 800e498:	200012a0 	.word	0x200012a0
 800e49c:	20001200 	.word	0x20001200
 800e4a0:	080134a4 	.word	0x080134a4

0800e4a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	3b04      	subs	r3, #4
 800e4b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3b04      	subs	r3, #4
 800e4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	f023 0201 	bic.w	r2, r3, #1
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3b04      	subs	r3, #4
 800e4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4d4:	4a0c      	ldr	r2, [pc, #48]	; (800e508 <pxPortInitialiseStack+0x64>)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b14      	subs	r3, #20
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3b04      	subs	r3, #4
 800e4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f06f 0202 	mvn.w	r2, #2
 800e4f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	3b20      	subs	r3, #32
 800e4f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	0800e50d 	.word	0x0800e50d

0800e50c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e516:	4b12      	ldr	r3, [pc, #72]	; (800e560 <prvTaskExitError+0x54>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51e:	d00a      	beq.n	800e536 <prvTaskExitError+0x2a>
	__asm volatile
 800e520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	60fb      	str	r3, [r7, #12]
}
 800e532:	bf00      	nop
 800e534:	e7fe      	b.n	800e534 <prvTaskExitError+0x28>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	60bb      	str	r3, [r7, #8]
}
 800e548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e54a:	bf00      	nop
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d0fc      	beq.n	800e54c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e552:	bf00      	nop
 800e554:	bf00      	nop
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	2000001c 	.word	0x2000001c
	...

0800e570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e570:	4b07      	ldr	r3, [pc, #28]	; (800e590 <pxCurrentTCBConst2>)
 800e572:	6819      	ldr	r1, [r3, #0]
 800e574:	6808      	ldr	r0, [r1, #0]
 800e576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57a:	f380 8809 	msr	PSP, r0
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f04f 0000 	mov.w	r0, #0
 800e586:	f380 8811 	msr	BASEPRI, r0
 800e58a:	4770      	bx	lr
 800e58c:	f3af 8000 	nop.w

0800e590 <pxCurrentTCBConst2>:
 800e590:	20000cc4 	.word	0x20000cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e594:	bf00      	nop
 800e596:	bf00      	nop

0800e598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e598:	4808      	ldr	r0, [pc, #32]	; (800e5bc <prvPortStartFirstTask+0x24>)
 800e59a:	6800      	ldr	r0, [r0, #0]
 800e59c:	6800      	ldr	r0, [r0, #0]
 800e59e:	f380 8808 	msr	MSP, r0
 800e5a2:	f04f 0000 	mov.w	r0, #0
 800e5a6:	f380 8814 	msr	CONTROL, r0
 800e5aa:	b662      	cpsie	i
 800e5ac:	b661      	cpsie	f
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	df00      	svc	0
 800e5b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5ba:	bf00      	nop
 800e5bc:	e000ed08 	.word	0xe000ed08

0800e5c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b086      	sub	sp, #24
 800e5c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5c6:	4b46      	ldr	r3, [pc, #280]	; (800e6e0 <xPortStartScheduler+0x120>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a46      	ldr	r2, [pc, #280]	; (800e6e4 <xPortStartScheduler+0x124>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d10a      	bne.n	800e5e6 <xPortStartScheduler+0x26>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	613b      	str	r3, [r7, #16]
}
 800e5e2:	bf00      	nop
 800e5e4:	e7fe      	b.n	800e5e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e5e6:	4b3e      	ldr	r3, [pc, #248]	; (800e6e0 <xPortStartScheduler+0x120>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a3f      	ldr	r2, [pc, #252]	; (800e6e8 <xPortStartScheduler+0x128>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d10a      	bne.n	800e606 <xPortStartScheduler+0x46>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	60fb      	str	r3, [r7, #12]
}
 800e602:	bf00      	nop
 800e604:	e7fe      	b.n	800e604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e606:	4b39      	ldr	r3, [pc, #228]	; (800e6ec <xPortStartScheduler+0x12c>)
 800e608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	22ff      	movs	r2, #255	; 0xff
 800e616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e620:	78fb      	ldrb	r3, [r7, #3]
 800e622:	b2db      	uxtb	r3, r3
 800e624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e628:	b2da      	uxtb	r2, r3
 800e62a:	4b31      	ldr	r3, [pc, #196]	; (800e6f0 <xPortStartScheduler+0x130>)
 800e62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e62e:	4b31      	ldr	r3, [pc, #196]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e630:	2207      	movs	r2, #7
 800e632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e634:	e009      	b.n	800e64a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e636:	4b2f      	ldr	r3, [pc, #188]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	3b01      	subs	r3, #1
 800e63c:	4a2d      	ldr	r2, [pc, #180]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e640:	78fb      	ldrb	r3, [r7, #3]
 800e642:	b2db      	uxtb	r3, r3
 800e644:	005b      	lsls	r3, r3, #1
 800e646:	b2db      	uxtb	r3, r3
 800e648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e64a:	78fb      	ldrb	r3, [r7, #3]
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e652:	2b80      	cmp	r3, #128	; 0x80
 800e654:	d0ef      	beq.n	800e636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e656:	4b27      	ldr	r3, [pc, #156]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f1c3 0307 	rsb	r3, r3, #7
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d00a      	beq.n	800e678 <xPortStartScheduler+0xb8>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	60bb      	str	r3, [r7, #8]
}
 800e674:	bf00      	nop
 800e676:	e7fe      	b.n	800e676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e678:	4b1e      	ldr	r3, [pc, #120]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	021b      	lsls	r3, r3, #8
 800e67e:	4a1d      	ldr	r2, [pc, #116]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e682:	4b1c      	ldr	r3, [pc, #112]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e68a:	4a1a      	ldr	r2, [pc, #104]	; (800e6f4 <xPortStartScheduler+0x134>)
 800e68c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	b2da      	uxtb	r2, r3
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e696:	4b18      	ldr	r3, [pc, #96]	; (800e6f8 <xPortStartScheduler+0x138>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a17      	ldr	r2, [pc, #92]	; (800e6f8 <xPortStartScheduler+0x138>)
 800e69c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6a2:	4b15      	ldr	r3, [pc, #84]	; (800e6f8 <xPortStartScheduler+0x138>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a14      	ldr	r2, [pc, #80]	; (800e6f8 <xPortStartScheduler+0x138>)
 800e6a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6ae:	f000 f8dd 	bl	800e86c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6b2:	4b12      	ldr	r3, [pc, #72]	; (800e6fc <xPortStartScheduler+0x13c>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6b8:	f000 f8fc 	bl	800e8b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6bc:	4b10      	ldr	r3, [pc, #64]	; (800e700 <xPortStartScheduler+0x140>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a0f      	ldr	r2, [pc, #60]	; (800e700 <xPortStartScheduler+0x140>)
 800e6c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6c8:	f7ff ff66 	bl	800e598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6cc:	f7fe ff42 	bl	800d554 <vTaskSwitchContext>
	prvTaskExitError();
 800e6d0:	f7ff ff1c 	bl	800e50c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3718      	adds	r7, #24
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	e000ed00 	.word	0xe000ed00
 800e6e4:	410fc271 	.word	0x410fc271
 800e6e8:	410fc270 	.word	0x410fc270
 800e6ec:	e000e400 	.word	0xe000e400
 800e6f0:	200012f0 	.word	0x200012f0
 800e6f4:	200012f4 	.word	0x200012f4
 800e6f8:	e000ed20 	.word	0xe000ed20
 800e6fc:	2000001c 	.word	0x2000001c
 800e700:	e000ef34 	.word	0xe000ef34

0800e704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
	__asm volatile
 800e70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e70e:	f383 8811 	msr	BASEPRI, r3
 800e712:	f3bf 8f6f 	isb	sy
 800e716:	f3bf 8f4f 	dsb	sy
 800e71a:	607b      	str	r3, [r7, #4]
}
 800e71c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e71e:	4b0f      	ldr	r3, [pc, #60]	; (800e75c <vPortEnterCritical+0x58>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	3301      	adds	r3, #1
 800e724:	4a0d      	ldr	r2, [pc, #52]	; (800e75c <vPortEnterCritical+0x58>)
 800e726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e728:	4b0c      	ldr	r3, [pc, #48]	; (800e75c <vPortEnterCritical+0x58>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d10f      	bne.n	800e750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e730:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <vPortEnterCritical+0x5c>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00a      	beq.n	800e750 <vPortEnterCritical+0x4c>
	__asm volatile
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	603b      	str	r3, [r7, #0]
}
 800e74c:	bf00      	nop
 800e74e:	e7fe      	b.n	800e74e <vPortEnterCritical+0x4a>
	}
}
 800e750:	bf00      	nop
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	2000001c 	.word	0x2000001c
 800e760:	e000ed04 	.word	0xe000ed04

0800e764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e76a:	4b12      	ldr	r3, [pc, #72]	; (800e7b4 <vPortExitCritical+0x50>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10a      	bne.n	800e788 <vPortExitCritical+0x24>
	__asm volatile
 800e772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e776:	f383 8811 	msr	BASEPRI, r3
 800e77a:	f3bf 8f6f 	isb	sy
 800e77e:	f3bf 8f4f 	dsb	sy
 800e782:	607b      	str	r3, [r7, #4]
}
 800e784:	bf00      	nop
 800e786:	e7fe      	b.n	800e786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e788:	4b0a      	ldr	r3, [pc, #40]	; (800e7b4 <vPortExitCritical+0x50>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3b01      	subs	r3, #1
 800e78e:	4a09      	ldr	r2, [pc, #36]	; (800e7b4 <vPortExitCritical+0x50>)
 800e790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e792:	4b08      	ldr	r3, [pc, #32]	; (800e7b4 <vPortExitCritical+0x50>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d105      	bne.n	800e7a6 <vPortExitCritical+0x42>
 800e79a:	2300      	movs	r3, #0
 800e79c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	f383 8811 	msr	BASEPRI, r3
}
 800e7a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7a6:	bf00      	nop
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	2000001c 	.word	0x2000001c
	...

0800e7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7c0:	f3ef 8009 	mrs	r0, PSP
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	4b15      	ldr	r3, [pc, #84]	; (800e820 <pxCurrentTCBConst>)
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	f01e 0f10 	tst.w	lr, #16
 800e7d0:	bf08      	it	eq
 800e7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7da:	6010      	str	r0, [r2, #0]
 800e7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7e4:	f380 8811 	msr	BASEPRI, r0
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f7fe feb0 	bl	800d554 <vTaskSwitchContext>
 800e7f4:	f04f 0000 	mov.w	r0, #0
 800e7f8:	f380 8811 	msr	BASEPRI, r0
 800e7fc:	bc09      	pop	{r0, r3}
 800e7fe:	6819      	ldr	r1, [r3, #0]
 800e800:	6808      	ldr	r0, [r1, #0]
 800e802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e806:	f01e 0f10 	tst.w	lr, #16
 800e80a:	bf08      	it	eq
 800e80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e810:	f380 8809 	msr	PSP, r0
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	f3af 8000 	nop.w

0800e820 <pxCurrentTCBConst>:
 800e820:	20000cc4 	.word	0x20000cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop

0800e828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	607b      	str	r3, [r7, #4]
}
 800e840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e842:	f7fe fdcd 	bl	800d3e0 <xTaskIncrementTick>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e84c:	4b06      	ldr	r3, [pc, #24]	; (800e868 <xPortSysTickHandler+0x40>)
 800e84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	2300      	movs	r3, #0
 800e856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	f383 8811 	msr	BASEPRI, r3
}
 800e85e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e860:	bf00      	nop
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	e000ed04 	.word	0xe000ed04

0800e86c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e870:	4b0b      	ldr	r3, [pc, #44]	; (800e8a0 <vPortSetupTimerInterrupt+0x34>)
 800e872:	2200      	movs	r2, #0
 800e874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e876:	4b0b      	ldr	r3, [pc, #44]	; (800e8a4 <vPortSetupTimerInterrupt+0x38>)
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e87c:	4b0a      	ldr	r3, [pc, #40]	; (800e8a8 <vPortSetupTimerInterrupt+0x3c>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a0a      	ldr	r2, [pc, #40]	; (800e8ac <vPortSetupTimerInterrupt+0x40>)
 800e882:	fba2 2303 	umull	r2, r3, r2, r3
 800e886:	099b      	lsrs	r3, r3, #6
 800e888:	4a09      	ldr	r2, [pc, #36]	; (800e8b0 <vPortSetupTimerInterrupt+0x44>)
 800e88a:	3b01      	subs	r3, #1
 800e88c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e88e:	4b04      	ldr	r3, [pc, #16]	; (800e8a0 <vPortSetupTimerInterrupt+0x34>)
 800e890:	2207      	movs	r2, #7
 800e892:	601a      	str	r2, [r3, #0]
}
 800e894:	bf00      	nop
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	e000e010 	.word	0xe000e010
 800e8a4:	e000e018 	.word	0xe000e018
 800e8a8:	20000010 	.word	0x20000010
 800e8ac:	10624dd3 	.word	0x10624dd3
 800e8b0:	e000e014 	.word	0xe000e014

0800e8b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8c4 <vPortEnableVFP+0x10>
 800e8b8:	6801      	ldr	r1, [r0, #0]
 800e8ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8be:	6001      	str	r1, [r0, #0]
 800e8c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8c2:	bf00      	nop
 800e8c4:	e000ed88 	.word	0xe000ed88

0800e8c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b085      	sub	sp, #20
 800e8cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8ce:	f3ef 8305 	mrs	r3, IPSR
 800e8d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2b0f      	cmp	r3, #15
 800e8d8:	d914      	bls.n	800e904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8da:	4a17      	ldr	r2, [pc, #92]	; (800e938 <vPortValidateInterruptPriority+0x70>)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4413      	add	r3, r2
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8e4:	4b15      	ldr	r3, [pc, #84]	; (800e93c <vPortValidateInterruptPriority+0x74>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	7afa      	ldrb	r2, [r7, #11]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d20a      	bcs.n	800e904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	607b      	str	r3, [r7, #4]
}
 800e900:	bf00      	nop
 800e902:	e7fe      	b.n	800e902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e904:	4b0e      	ldr	r3, [pc, #56]	; (800e940 <vPortValidateInterruptPriority+0x78>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e90c:	4b0d      	ldr	r3, [pc, #52]	; (800e944 <vPortValidateInterruptPriority+0x7c>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	429a      	cmp	r2, r3
 800e912:	d90a      	bls.n	800e92a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	603b      	str	r3, [r7, #0]
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <vPortValidateInterruptPriority+0x60>
	}
 800e92a:	bf00      	nop
 800e92c:	3714      	adds	r7, #20
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	e000e3f0 	.word	0xe000e3f0
 800e93c:	200012f0 	.word	0x200012f0
 800e940:	e000ed0c 	.word	0xe000ed0c
 800e944:	200012f4 	.word	0x200012f4

0800e948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08a      	sub	sp, #40	; 0x28
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e950:	2300      	movs	r3, #0
 800e952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e954:	f7fe fc88 	bl	800d268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e958:	4b5b      	ldr	r3, [pc, #364]	; (800eac8 <pvPortMalloc+0x180>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e960:	f000 f920 	bl	800eba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e964:	4b59      	ldr	r3, [pc, #356]	; (800eacc <pvPortMalloc+0x184>)
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4013      	ands	r3, r2
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f040 8093 	bne.w	800ea98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d01d      	beq.n	800e9b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e978:	2208      	movs	r2, #8
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4413      	add	r3, r2
 800e97e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f003 0307 	and.w	r3, r3, #7
 800e986:	2b00      	cmp	r3, #0
 800e988:	d014      	beq.n	800e9b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f023 0307 	bic.w	r3, r3, #7
 800e990:	3308      	adds	r3, #8
 800e992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f003 0307 	and.w	r3, r3, #7
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00a      	beq.n	800e9b4 <pvPortMalloc+0x6c>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	617b      	str	r3, [r7, #20]
}
 800e9b0:	bf00      	nop
 800e9b2:	e7fe      	b.n	800e9b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d06e      	beq.n	800ea98 <pvPortMalloc+0x150>
 800e9ba:	4b45      	ldr	r3, [pc, #276]	; (800ead0 <pvPortMalloc+0x188>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d869      	bhi.n	800ea98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9c4:	4b43      	ldr	r3, [pc, #268]	; (800ead4 <pvPortMalloc+0x18c>)
 800e9c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9c8:	4b42      	ldr	r3, [pc, #264]	; (800ead4 <pvPortMalloc+0x18c>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9ce:	e004      	b.n	800e9da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d903      	bls.n	800e9ec <pvPortMalloc+0xa4>
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1f1      	bne.n	800e9d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9ec:	4b36      	ldr	r3, [pc, #216]	; (800eac8 <pvPortMalloc+0x180>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d050      	beq.n	800ea98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2208      	movs	r2, #8
 800e9fc:	4413      	add	r3, r2
 800e9fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	1ad2      	subs	r2, r2, r3
 800ea10:	2308      	movs	r3, #8
 800ea12:	005b      	lsls	r3, r3, #1
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d91f      	bls.n	800ea58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	f003 0307 	and.w	r3, r3, #7
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00a      	beq.n	800ea40 <pvPortMalloc+0xf8>
	__asm volatile
 800ea2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	613b      	str	r3, [r7, #16]
}
 800ea3c:	bf00      	nop
 800ea3e:	e7fe      	b.n	800ea3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea42:	685a      	ldr	r2, [r3, #4]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	1ad2      	subs	r2, r2, r3
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea52:	69b8      	ldr	r0, [r7, #24]
 800ea54:	f000 f908 	bl	800ec68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea58:	4b1d      	ldr	r3, [pc, #116]	; (800ead0 <pvPortMalloc+0x188>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	4a1b      	ldr	r2, [pc, #108]	; (800ead0 <pvPortMalloc+0x188>)
 800ea64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea66:	4b1a      	ldr	r3, [pc, #104]	; (800ead0 <pvPortMalloc+0x188>)
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	4b1b      	ldr	r3, [pc, #108]	; (800ead8 <pvPortMalloc+0x190>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d203      	bcs.n	800ea7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea72:	4b17      	ldr	r3, [pc, #92]	; (800ead0 <pvPortMalloc+0x188>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a18      	ldr	r2, [pc, #96]	; (800ead8 <pvPortMalloc+0x190>)
 800ea78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	685a      	ldr	r2, [r3, #4]
 800ea7e:	4b13      	ldr	r3, [pc, #76]	; (800eacc <pvPortMalloc+0x184>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	431a      	orrs	r2, r3
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea8e:	4b13      	ldr	r3, [pc, #76]	; (800eadc <pvPortMalloc+0x194>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3301      	adds	r3, #1
 800ea94:	4a11      	ldr	r2, [pc, #68]	; (800eadc <pvPortMalloc+0x194>)
 800ea96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea98:	f7fe fbf4 	bl	800d284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	f003 0307 	and.w	r3, r3, #7
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d00a      	beq.n	800eabc <pvPortMalloc+0x174>
	__asm volatile
 800eaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
 800eab6:	60fb      	str	r3, [r7, #12]
}
 800eab8:	bf00      	nop
 800eaba:	e7fe      	b.n	800eaba <pvPortMalloc+0x172>
	return pvReturn;
 800eabc:	69fb      	ldr	r3, [r7, #28]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3728      	adds	r7, #40	; 0x28
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	20006300 	.word	0x20006300
 800eacc:	20006314 	.word	0x20006314
 800ead0:	20006304 	.word	0x20006304
 800ead4:	200062f8 	.word	0x200062f8
 800ead8:	20006308 	.word	0x20006308
 800eadc:	2000630c 	.word	0x2000630c

0800eae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d04d      	beq.n	800eb8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eaf2:	2308      	movs	r3, #8
 800eaf4:	425b      	negs	r3, r3
 800eaf6:	697a      	ldr	r2, [r7, #20]
 800eaf8:	4413      	add	r3, r2
 800eafa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	685a      	ldr	r2, [r3, #4]
 800eb04:	4b24      	ldr	r3, [pc, #144]	; (800eb98 <vPortFree+0xb8>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4013      	ands	r3, r2
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d10a      	bne.n	800eb24 <vPortFree+0x44>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	60fb      	str	r3, [r7, #12]
}
 800eb20:	bf00      	nop
 800eb22:	e7fe      	b.n	800eb22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00a      	beq.n	800eb42 <vPortFree+0x62>
	__asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	60bb      	str	r3, [r7, #8]
}
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	685a      	ldr	r2, [r3, #4]
 800eb46:	4b14      	ldr	r3, [pc, #80]	; (800eb98 <vPortFree+0xb8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4013      	ands	r3, r2
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d01e      	beq.n	800eb8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d11a      	bne.n	800eb8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	4b0e      	ldr	r3, [pc, #56]	; (800eb98 <vPortFree+0xb8>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	43db      	mvns	r3, r3
 800eb62:	401a      	ands	r2, r3
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb68:	f7fe fb7e 	bl	800d268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	685a      	ldr	r2, [r3, #4]
 800eb70:	4b0a      	ldr	r3, [pc, #40]	; (800eb9c <vPortFree+0xbc>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4413      	add	r3, r2
 800eb76:	4a09      	ldr	r2, [pc, #36]	; (800eb9c <vPortFree+0xbc>)
 800eb78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb7a:	6938      	ldr	r0, [r7, #16]
 800eb7c:	f000 f874 	bl	800ec68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb80:	4b07      	ldr	r3, [pc, #28]	; (800eba0 <vPortFree+0xc0>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	3301      	adds	r3, #1
 800eb86:	4a06      	ldr	r2, [pc, #24]	; (800eba0 <vPortFree+0xc0>)
 800eb88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb8a:	f7fe fb7b 	bl	800d284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb8e:	bf00      	nop
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	20006314 	.word	0x20006314
 800eb9c:	20006304 	.word	0x20006304
 800eba0:	20006310 	.word	0x20006310

0800eba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebaa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800ebae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebb0:	4b27      	ldr	r3, [pc, #156]	; (800ec50 <prvHeapInit+0xac>)
 800ebb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f003 0307 	and.w	r3, r3, #7
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00c      	beq.n	800ebd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3307      	adds	r3, #7
 800ebc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f023 0307 	bic.w	r3, r3, #7
 800ebca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebcc:	68ba      	ldr	r2, [r7, #8]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	4a1f      	ldr	r2, [pc, #124]	; (800ec50 <prvHeapInit+0xac>)
 800ebd4:	4413      	add	r3, r2
 800ebd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebdc:	4a1d      	ldr	r2, [pc, #116]	; (800ec54 <prvHeapInit+0xb0>)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebe2:	4b1c      	ldr	r3, [pc, #112]	; (800ec54 <prvHeapInit+0xb0>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	4413      	add	r3, r2
 800ebee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebf0:	2208      	movs	r2, #8
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	1a9b      	subs	r3, r3, r2
 800ebf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f023 0307 	bic.w	r3, r3, #7
 800ebfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	4a15      	ldr	r2, [pc, #84]	; (800ec58 <prvHeapInit+0xb4>)
 800ec04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec06:	4b14      	ldr	r3, [pc, #80]	; (800ec58 <prvHeapInit+0xb4>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec0e:	4b12      	ldr	r3, [pc, #72]	; (800ec58 <prvHeapInit+0xb4>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2200      	movs	r2, #0
 800ec14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	1ad2      	subs	r2, r2, r3
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec24:	4b0c      	ldr	r3, [pc, #48]	; (800ec58 <prvHeapInit+0xb4>)
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	4a0a      	ldr	r2, [pc, #40]	; (800ec5c <prvHeapInit+0xb8>)
 800ec32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	4a09      	ldr	r2, [pc, #36]	; (800ec60 <prvHeapInit+0xbc>)
 800ec3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec3c:	4b09      	ldr	r3, [pc, #36]	; (800ec64 <prvHeapInit+0xc0>)
 800ec3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec42:	601a      	str	r2, [r3, #0]
}
 800ec44:	bf00      	nop
 800ec46:	3714      	adds	r7, #20
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	200012f8 	.word	0x200012f8
 800ec54:	200062f8 	.word	0x200062f8
 800ec58:	20006300 	.word	0x20006300
 800ec5c:	20006308 	.word	0x20006308
 800ec60:	20006304 	.word	0x20006304
 800ec64:	20006314 	.word	0x20006314

0800ec68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec70:	4b28      	ldr	r3, [pc, #160]	; (800ed14 <prvInsertBlockIntoFreeList+0xac>)
 800ec72:	60fb      	str	r3, [r7, #12]
 800ec74:	e002      	b.n	800ec7c <prvInsertBlockIntoFreeList+0x14>
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d8f7      	bhi.n	800ec76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	4413      	add	r3, r2
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d108      	bne.n	800ecaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	685a      	ldr	r2, [r3, #4]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	441a      	add	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	68ba      	ldr	r2, [r7, #8]
 800ecb4:	441a      	add	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d118      	bne.n	800ecf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	4b15      	ldr	r3, [pc, #84]	; (800ed18 <prvInsertBlockIntoFreeList+0xb0>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d00d      	beq.n	800ece6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	685a      	ldr	r2, [r3, #4]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	441a      	add	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	601a      	str	r2, [r3, #0]
 800ece4:	e008      	b.n	800ecf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ece6:	4b0c      	ldr	r3, [pc, #48]	; (800ed18 <prvInsertBlockIntoFreeList+0xb0>)
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	601a      	str	r2, [r3, #0]
 800ecee:	e003      	b.n	800ecf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d002      	beq.n	800ed06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed06:	bf00      	nop
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	200062f8 	.word	0x200062f8
 800ed18:	20006300 	.word	0x20006300

0800ed1c <__errno>:
 800ed1c:	4b01      	ldr	r3, [pc, #4]	; (800ed24 <__errno+0x8>)
 800ed1e:	6818      	ldr	r0, [r3, #0]
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	20000020 	.word	0x20000020

0800ed28 <__libc_init_array>:
 800ed28:	b570      	push	{r4, r5, r6, lr}
 800ed2a:	4d0d      	ldr	r5, [pc, #52]	; (800ed60 <__libc_init_array+0x38>)
 800ed2c:	4c0d      	ldr	r4, [pc, #52]	; (800ed64 <__libc_init_array+0x3c>)
 800ed2e:	1b64      	subs	r4, r4, r5
 800ed30:	10a4      	asrs	r4, r4, #2
 800ed32:	2600      	movs	r6, #0
 800ed34:	42a6      	cmp	r6, r4
 800ed36:	d109      	bne.n	800ed4c <__libc_init_array+0x24>
 800ed38:	4d0b      	ldr	r5, [pc, #44]	; (800ed68 <__libc_init_array+0x40>)
 800ed3a:	4c0c      	ldr	r4, [pc, #48]	; (800ed6c <__libc_init_array+0x44>)
 800ed3c:	f004 faac 	bl	8013298 <_init>
 800ed40:	1b64      	subs	r4, r4, r5
 800ed42:	10a4      	asrs	r4, r4, #2
 800ed44:	2600      	movs	r6, #0
 800ed46:	42a6      	cmp	r6, r4
 800ed48:	d105      	bne.n	800ed56 <__libc_init_array+0x2e>
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}
 800ed4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed50:	4798      	blx	r3
 800ed52:	3601      	adds	r6, #1
 800ed54:	e7ee      	b.n	800ed34 <__libc_init_array+0xc>
 800ed56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed5a:	4798      	blx	r3
 800ed5c:	3601      	adds	r6, #1
 800ed5e:	e7f2      	b.n	800ed46 <__libc_init_array+0x1e>
 800ed60:	08013f2c 	.word	0x08013f2c
 800ed64:	08013f2c 	.word	0x08013f2c
 800ed68:	08013f2c 	.word	0x08013f2c
 800ed6c:	08013f30 	.word	0x08013f30

0800ed70 <memcpy>:
 800ed70:	440a      	add	r2, r1
 800ed72:	4291      	cmp	r1, r2
 800ed74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed78:	d100      	bne.n	800ed7c <memcpy+0xc>
 800ed7a:	4770      	bx	lr
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed86:	4291      	cmp	r1, r2
 800ed88:	d1f9      	bne.n	800ed7e <memcpy+0xe>
 800ed8a:	bd10      	pop	{r4, pc}

0800ed8c <memset>:
 800ed8c:	4402      	add	r2, r0
 800ed8e:	4603      	mov	r3, r0
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d100      	bne.n	800ed96 <memset+0xa>
 800ed94:	4770      	bx	lr
 800ed96:	f803 1b01 	strb.w	r1, [r3], #1
 800ed9a:	e7f9      	b.n	800ed90 <memset+0x4>

0800ed9c <__cvt>:
 800ed9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eda0:	ec55 4b10 	vmov	r4, r5, d0
 800eda4:	2d00      	cmp	r5, #0
 800eda6:	460e      	mov	r6, r1
 800eda8:	4619      	mov	r1, r3
 800edaa:	462b      	mov	r3, r5
 800edac:	bfbb      	ittet	lt
 800edae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800edb2:	461d      	movlt	r5, r3
 800edb4:	2300      	movge	r3, #0
 800edb6:	232d      	movlt	r3, #45	; 0x2d
 800edb8:	700b      	strb	r3, [r1, #0]
 800edba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edc0:	4691      	mov	r9, r2
 800edc2:	f023 0820 	bic.w	r8, r3, #32
 800edc6:	bfbc      	itt	lt
 800edc8:	4622      	movlt	r2, r4
 800edca:	4614      	movlt	r4, r2
 800edcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edd0:	d005      	beq.n	800edde <__cvt+0x42>
 800edd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800edd6:	d100      	bne.n	800edda <__cvt+0x3e>
 800edd8:	3601      	adds	r6, #1
 800edda:	2102      	movs	r1, #2
 800eddc:	e000      	b.n	800ede0 <__cvt+0x44>
 800edde:	2103      	movs	r1, #3
 800ede0:	ab03      	add	r3, sp, #12
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	ab02      	add	r3, sp, #8
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	ec45 4b10 	vmov	d0, r4, r5
 800edec:	4653      	mov	r3, sl
 800edee:	4632      	mov	r2, r6
 800edf0:	f000 fd0e 	bl	800f810 <_dtoa_r>
 800edf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800edf8:	4607      	mov	r7, r0
 800edfa:	d102      	bne.n	800ee02 <__cvt+0x66>
 800edfc:	f019 0f01 	tst.w	r9, #1
 800ee00:	d022      	beq.n	800ee48 <__cvt+0xac>
 800ee02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee06:	eb07 0906 	add.w	r9, r7, r6
 800ee0a:	d110      	bne.n	800ee2e <__cvt+0x92>
 800ee0c:	783b      	ldrb	r3, [r7, #0]
 800ee0e:	2b30      	cmp	r3, #48	; 0x30
 800ee10:	d10a      	bne.n	800ee28 <__cvt+0x8c>
 800ee12:	2200      	movs	r2, #0
 800ee14:	2300      	movs	r3, #0
 800ee16:	4620      	mov	r0, r4
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7f1 fe6d 	bl	8000af8 <__aeabi_dcmpeq>
 800ee1e:	b918      	cbnz	r0, 800ee28 <__cvt+0x8c>
 800ee20:	f1c6 0601 	rsb	r6, r6, #1
 800ee24:	f8ca 6000 	str.w	r6, [sl]
 800ee28:	f8da 3000 	ldr.w	r3, [sl]
 800ee2c:	4499      	add	r9, r3
 800ee2e:	2200      	movs	r2, #0
 800ee30:	2300      	movs	r3, #0
 800ee32:	4620      	mov	r0, r4
 800ee34:	4629      	mov	r1, r5
 800ee36:	f7f1 fe5f 	bl	8000af8 <__aeabi_dcmpeq>
 800ee3a:	b108      	cbz	r0, 800ee40 <__cvt+0xa4>
 800ee3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee40:	2230      	movs	r2, #48	; 0x30
 800ee42:	9b03      	ldr	r3, [sp, #12]
 800ee44:	454b      	cmp	r3, r9
 800ee46:	d307      	bcc.n	800ee58 <__cvt+0xbc>
 800ee48:	9b03      	ldr	r3, [sp, #12]
 800ee4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee4c:	1bdb      	subs	r3, r3, r7
 800ee4e:	4638      	mov	r0, r7
 800ee50:	6013      	str	r3, [r2, #0]
 800ee52:	b004      	add	sp, #16
 800ee54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee58:	1c59      	adds	r1, r3, #1
 800ee5a:	9103      	str	r1, [sp, #12]
 800ee5c:	701a      	strb	r2, [r3, #0]
 800ee5e:	e7f0      	b.n	800ee42 <__cvt+0xa6>

0800ee60 <__exponent>:
 800ee60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee62:	4603      	mov	r3, r0
 800ee64:	2900      	cmp	r1, #0
 800ee66:	bfb8      	it	lt
 800ee68:	4249      	neglt	r1, r1
 800ee6a:	f803 2b02 	strb.w	r2, [r3], #2
 800ee6e:	bfb4      	ite	lt
 800ee70:	222d      	movlt	r2, #45	; 0x2d
 800ee72:	222b      	movge	r2, #43	; 0x2b
 800ee74:	2909      	cmp	r1, #9
 800ee76:	7042      	strb	r2, [r0, #1]
 800ee78:	dd2a      	ble.n	800eed0 <__exponent+0x70>
 800ee7a:	f10d 0407 	add.w	r4, sp, #7
 800ee7e:	46a4      	mov	ip, r4
 800ee80:	270a      	movs	r7, #10
 800ee82:	46a6      	mov	lr, r4
 800ee84:	460a      	mov	r2, r1
 800ee86:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee8a:	fb07 1516 	mls	r5, r7, r6, r1
 800ee8e:	3530      	adds	r5, #48	; 0x30
 800ee90:	2a63      	cmp	r2, #99	; 0x63
 800ee92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee9a:	4631      	mov	r1, r6
 800ee9c:	dcf1      	bgt.n	800ee82 <__exponent+0x22>
 800ee9e:	3130      	adds	r1, #48	; 0x30
 800eea0:	f1ae 0502 	sub.w	r5, lr, #2
 800eea4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eea8:	1c44      	adds	r4, r0, #1
 800eeaa:	4629      	mov	r1, r5
 800eeac:	4561      	cmp	r1, ip
 800eeae:	d30a      	bcc.n	800eec6 <__exponent+0x66>
 800eeb0:	f10d 0209 	add.w	r2, sp, #9
 800eeb4:	eba2 020e 	sub.w	r2, r2, lr
 800eeb8:	4565      	cmp	r5, ip
 800eeba:	bf88      	it	hi
 800eebc:	2200      	movhi	r2, #0
 800eebe:	4413      	add	r3, r2
 800eec0:	1a18      	subs	r0, r3, r0
 800eec2:	b003      	add	sp, #12
 800eec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eeca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eece:	e7ed      	b.n	800eeac <__exponent+0x4c>
 800eed0:	2330      	movs	r3, #48	; 0x30
 800eed2:	3130      	adds	r1, #48	; 0x30
 800eed4:	7083      	strb	r3, [r0, #2]
 800eed6:	70c1      	strb	r1, [r0, #3]
 800eed8:	1d03      	adds	r3, r0, #4
 800eeda:	e7f1      	b.n	800eec0 <__exponent+0x60>

0800eedc <_printf_float>:
 800eedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee0:	ed2d 8b02 	vpush	{d8}
 800eee4:	b08d      	sub	sp, #52	; 0x34
 800eee6:	460c      	mov	r4, r1
 800eee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eeec:	4616      	mov	r6, r2
 800eeee:	461f      	mov	r7, r3
 800eef0:	4605      	mov	r5, r0
 800eef2:	f001 fa7b 	bl	80103ec <_localeconv_r>
 800eef6:	f8d0 a000 	ldr.w	sl, [r0]
 800eefa:	4650      	mov	r0, sl
 800eefc:	f7f1 f980 	bl	8000200 <strlen>
 800ef00:	2300      	movs	r3, #0
 800ef02:	930a      	str	r3, [sp, #40]	; 0x28
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	9305      	str	r3, [sp, #20]
 800ef08:	f8d8 3000 	ldr.w	r3, [r8]
 800ef0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef10:	3307      	adds	r3, #7
 800ef12:	f023 0307 	bic.w	r3, r3, #7
 800ef16:	f103 0208 	add.w	r2, r3, #8
 800ef1a:	f8c8 2000 	str.w	r2, [r8]
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef2e:	9307      	str	r3, [sp, #28]
 800ef30:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef34:	ee08 0a10 	vmov	s16, r0
 800ef38:	4b9f      	ldr	r3, [pc, #636]	; (800f1b8 <_printf_float+0x2dc>)
 800ef3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef42:	f7f1 fe0b 	bl	8000b5c <__aeabi_dcmpun>
 800ef46:	bb88      	cbnz	r0, 800efac <_printf_float+0xd0>
 800ef48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef4c:	4b9a      	ldr	r3, [pc, #616]	; (800f1b8 <_printf_float+0x2dc>)
 800ef4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef52:	f7f1 fde5 	bl	8000b20 <__aeabi_dcmple>
 800ef56:	bb48      	cbnz	r0, 800efac <_printf_float+0xd0>
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	4640      	mov	r0, r8
 800ef5e:	4649      	mov	r1, r9
 800ef60:	f7f1 fdd4 	bl	8000b0c <__aeabi_dcmplt>
 800ef64:	b110      	cbz	r0, 800ef6c <_printf_float+0x90>
 800ef66:	232d      	movs	r3, #45	; 0x2d
 800ef68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef6c:	4b93      	ldr	r3, [pc, #588]	; (800f1bc <_printf_float+0x2e0>)
 800ef6e:	4894      	ldr	r0, [pc, #592]	; (800f1c0 <_printf_float+0x2e4>)
 800ef70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef74:	bf94      	ite	ls
 800ef76:	4698      	movls	r8, r3
 800ef78:	4680      	movhi	r8, r0
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	6123      	str	r3, [r4, #16]
 800ef7e:	9b05      	ldr	r3, [sp, #20]
 800ef80:	f023 0204 	bic.w	r2, r3, #4
 800ef84:	6022      	str	r2, [r4, #0]
 800ef86:	f04f 0900 	mov.w	r9, #0
 800ef8a:	9700      	str	r7, [sp, #0]
 800ef8c:	4633      	mov	r3, r6
 800ef8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef90:	4621      	mov	r1, r4
 800ef92:	4628      	mov	r0, r5
 800ef94:	f000 f9d8 	bl	800f348 <_printf_common>
 800ef98:	3001      	adds	r0, #1
 800ef9a:	f040 8090 	bne.w	800f0be <_printf_float+0x1e2>
 800ef9e:	f04f 30ff 	mov.w	r0, #4294967295
 800efa2:	b00d      	add	sp, #52	; 0x34
 800efa4:	ecbd 8b02 	vpop	{d8}
 800efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efac:	4642      	mov	r2, r8
 800efae:	464b      	mov	r3, r9
 800efb0:	4640      	mov	r0, r8
 800efb2:	4649      	mov	r1, r9
 800efb4:	f7f1 fdd2 	bl	8000b5c <__aeabi_dcmpun>
 800efb8:	b140      	cbz	r0, 800efcc <_printf_float+0xf0>
 800efba:	464b      	mov	r3, r9
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	bfbc      	itt	lt
 800efc0:	232d      	movlt	r3, #45	; 0x2d
 800efc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800efc6:	487f      	ldr	r0, [pc, #508]	; (800f1c4 <_printf_float+0x2e8>)
 800efc8:	4b7f      	ldr	r3, [pc, #508]	; (800f1c8 <_printf_float+0x2ec>)
 800efca:	e7d1      	b.n	800ef70 <_printf_float+0x94>
 800efcc:	6863      	ldr	r3, [r4, #4]
 800efce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800efd2:	9206      	str	r2, [sp, #24]
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	d13f      	bne.n	800f058 <_printf_float+0x17c>
 800efd8:	2306      	movs	r3, #6
 800efda:	6063      	str	r3, [r4, #4]
 800efdc:	9b05      	ldr	r3, [sp, #20]
 800efde:	6861      	ldr	r1, [r4, #4]
 800efe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800efe4:	2300      	movs	r3, #0
 800efe6:	9303      	str	r3, [sp, #12]
 800efe8:	ab0a      	add	r3, sp, #40	; 0x28
 800efea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efee:	ab09      	add	r3, sp, #36	; 0x24
 800eff0:	ec49 8b10 	vmov	d0, r8, r9
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	6022      	str	r2, [r4, #0]
 800eff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800effc:	4628      	mov	r0, r5
 800effe:	f7ff fecd 	bl	800ed9c <__cvt>
 800f002:	9b06      	ldr	r3, [sp, #24]
 800f004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f006:	2b47      	cmp	r3, #71	; 0x47
 800f008:	4680      	mov	r8, r0
 800f00a:	d108      	bne.n	800f01e <_printf_float+0x142>
 800f00c:	1cc8      	adds	r0, r1, #3
 800f00e:	db02      	blt.n	800f016 <_printf_float+0x13a>
 800f010:	6863      	ldr	r3, [r4, #4]
 800f012:	4299      	cmp	r1, r3
 800f014:	dd41      	ble.n	800f09a <_printf_float+0x1be>
 800f016:	f1ab 0b02 	sub.w	fp, fp, #2
 800f01a:	fa5f fb8b 	uxtb.w	fp, fp
 800f01e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f022:	d820      	bhi.n	800f066 <_printf_float+0x18a>
 800f024:	3901      	subs	r1, #1
 800f026:	465a      	mov	r2, fp
 800f028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f02c:	9109      	str	r1, [sp, #36]	; 0x24
 800f02e:	f7ff ff17 	bl	800ee60 <__exponent>
 800f032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f034:	1813      	adds	r3, r2, r0
 800f036:	2a01      	cmp	r2, #1
 800f038:	4681      	mov	r9, r0
 800f03a:	6123      	str	r3, [r4, #16]
 800f03c:	dc02      	bgt.n	800f044 <_printf_float+0x168>
 800f03e:	6822      	ldr	r2, [r4, #0]
 800f040:	07d2      	lsls	r2, r2, #31
 800f042:	d501      	bpl.n	800f048 <_printf_float+0x16c>
 800f044:	3301      	adds	r3, #1
 800f046:	6123      	str	r3, [r4, #16]
 800f048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d09c      	beq.n	800ef8a <_printf_float+0xae>
 800f050:	232d      	movs	r3, #45	; 0x2d
 800f052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f056:	e798      	b.n	800ef8a <_printf_float+0xae>
 800f058:	9a06      	ldr	r2, [sp, #24]
 800f05a:	2a47      	cmp	r2, #71	; 0x47
 800f05c:	d1be      	bne.n	800efdc <_printf_float+0x100>
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1bc      	bne.n	800efdc <_printf_float+0x100>
 800f062:	2301      	movs	r3, #1
 800f064:	e7b9      	b.n	800efda <_printf_float+0xfe>
 800f066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f06a:	d118      	bne.n	800f09e <_printf_float+0x1c2>
 800f06c:	2900      	cmp	r1, #0
 800f06e:	6863      	ldr	r3, [r4, #4]
 800f070:	dd0b      	ble.n	800f08a <_printf_float+0x1ae>
 800f072:	6121      	str	r1, [r4, #16]
 800f074:	b913      	cbnz	r3, 800f07c <_printf_float+0x1a0>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	07d0      	lsls	r0, r2, #31
 800f07a:	d502      	bpl.n	800f082 <_printf_float+0x1a6>
 800f07c:	3301      	adds	r3, #1
 800f07e:	440b      	add	r3, r1
 800f080:	6123      	str	r3, [r4, #16]
 800f082:	65a1      	str	r1, [r4, #88]	; 0x58
 800f084:	f04f 0900 	mov.w	r9, #0
 800f088:	e7de      	b.n	800f048 <_printf_float+0x16c>
 800f08a:	b913      	cbnz	r3, 800f092 <_printf_float+0x1b6>
 800f08c:	6822      	ldr	r2, [r4, #0]
 800f08e:	07d2      	lsls	r2, r2, #31
 800f090:	d501      	bpl.n	800f096 <_printf_float+0x1ba>
 800f092:	3302      	adds	r3, #2
 800f094:	e7f4      	b.n	800f080 <_printf_float+0x1a4>
 800f096:	2301      	movs	r3, #1
 800f098:	e7f2      	b.n	800f080 <_printf_float+0x1a4>
 800f09a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0a0:	4299      	cmp	r1, r3
 800f0a2:	db05      	blt.n	800f0b0 <_printf_float+0x1d4>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	6121      	str	r1, [r4, #16]
 800f0a8:	07d8      	lsls	r0, r3, #31
 800f0aa:	d5ea      	bpl.n	800f082 <_printf_float+0x1a6>
 800f0ac:	1c4b      	adds	r3, r1, #1
 800f0ae:	e7e7      	b.n	800f080 <_printf_float+0x1a4>
 800f0b0:	2900      	cmp	r1, #0
 800f0b2:	bfd4      	ite	le
 800f0b4:	f1c1 0202 	rsble	r2, r1, #2
 800f0b8:	2201      	movgt	r2, #1
 800f0ba:	4413      	add	r3, r2
 800f0bc:	e7e0      	b.n	800f080 <_printf_float+0x1a4>
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	055a      	lsls	r2, r3, #21
 800f0c2:	d407      	bmi.n	800f0d4 <_printf_float+0x1f8>
 800f0c4:	6923      	ldr	r3, [r4, #16]
 800f0c6:	4642      	mov	r2, r8
 800f0c8:	4631      	mov	r1, r6
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	47b8      	blx	r7
 800f0ce:	3001      	adds	r0, #1
 800f0d0:	d12c      	bne.n	800f12c <_printf_float+0x250>
 800f0d2:	e764      	b.n	800ef9e <_printf_float+0xc2>
 800f0d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0d8:	f240 80e0 	bls.w	800f29c <_printf_float+0x3c0>
 800f0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f7f1 fd08 	bl	8000af8 <__aeabi_dcmpeq>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d034      	beq.n	800f156 <_printf_float+0x27a>
 800f0ec:	4a37      	ldr	r2, [pc, #220]	; (800f1cc <_printf_float+0x2f0>)
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	4631      	mov	r1, r6
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	47b8      	blx	r7
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	f43f af51 	beq.w	800ef9e <_printf_float+0xc2>
 800f0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f100:	429a      	cmp	r2, r3
 800f102:	db02      	blt.n	800f10a <_printf_float+0x22e>
 800f104:	6823      	ldr	r3, [r4, #0]
 800f106:	07d8      	lsls	r0, r3, #31
 800f108:	d510      	bpl.n	800f12c <_printf_float+0x250>
 800f10a:	ee18 3a10 	vmov	r3, s16
 800f10e:	4652      	mov	r2, sl
 800f110:	4631      	mov	r1, r6
 800f112:	4628      	mov	r0, r5
 800f114:	47b8      	blx	r7
 800f116:	3001      	adds	r0, #1
 800f118:	f43f af41 	beq.w	800ef9e <_printf_float+0xc2>
 800f11c:	f04f 0800 	mov.w	r8, #0
 800f120:	f104 091a 	add.w	r9, r4, #26
 800f124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f126:	3b01      	subs	r3, #1
 800f128:	4543      	cmp	r3, r8
 800f12a:	dc09      	bgt.n	800f140 <_printf_float+0x264>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	079b      	lsls	r3, r3, #30
 800f130:	f100 8105 	bmi.w	800f33e <_printf_float+0x462>
 800f134:	68e0      	ldr	r0, [r4, #12]
 800f136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f138:	4298      	cmp	r0, r3
 800f13a:	bfb8      	it	lt
 800f13c:	4618      	movlt	r0, r3
 800f13e:	e730      	b.n	800efa2 <_printf_float+0xc6>
 800f140:	2301      	movs	r3, #1
 800f142:	464a      	mov	r2, r9
 800f144:	4631      	mov	r1, r6
 800f146:	4628      	mov	r0, r5
 800f148:	47b8      	blx	r7
 800f14a:	3001      	adds	r0, #1
 800f14c:	f43f af27 	beq.w	800ef9e <_printf_float+0xc2>
 800f150:	f108 0801 	add.w	r8, r8, #1
 800f154:	e7e6      	b.n	800f124 <_printf_float+0x248>
 800f156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f158:	2b00      	cmp	r3, #0
 800f15a:	dc39      	bgt.n	800f1d0 <_printf_float+0x2f4>
 800f15c:	4a1b      	ldr	r2, [pc, #108]	; (800f1cc <_printf_float+0x2f0>)
 800f15e:	2301      	movs	r3, #1
 800f160:	4631      	mov	r1, r6
 800f162:	4628      	mov	r0, r5
 800f164:	47b8      	blx	r7
 800f166:	3001      	adds	r0, #1
 800f168:	f43f af19 	beq.w	800ef9e <_printf_float+0xc2>
 800f16c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f170:	4313      	orrs	r3, r2
 800f172:	d102      	bne.n	800f17a <_printf_float+0x29e>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	07d9      	lsls	r1, r3, #31
 800f178:	d5d8      	bpl.n	800f12c <_printf_float+0x250>
 800f17a:	ee18 3a10 	vmov	r3, s16
 800f17e:	4652      	mov	r2, sl
 800f180:	4631      	mov	r1, r6
 800f182:	4628      	mov	r0, r5
 800f184:	47b8      	blx	r7
 800f186:	3001      	adds	r0, #1
 800f188:	f43f af09 	beq.w	800ef9e <_printf_float+0xc2>
 800f18c:	f04f 0900 	mov.w	r9, #0
 800f190:	f104 0a1a 	add.w	sl, r4, #26
 800f194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f196:	425b      	negs	r3, r3
 800f198:	454b      	cmp	r3, r9
 800f19a:	dc01      	bgt.n	800f1a0 <_printf_float+0x2c4>
 800f19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f19e:	e792      	b.n	800f0c6 <_printf_float+0x1ea>
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	4652      	mov	r2, sl
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	47b8      	blx	r7
 800f1aa:	3001      	adds	r0, #1
 800f1ac:	f43f aef7 	beq.w	800ef9e <_printf_float+0xc2>
 800f1b0:	f109 0901 	add.w	r9, r9, #1
 800f1b4:	e7ee      	b.n	800f194 <_printf_float+0x2b8>
 800f1b6:	bf00      	nop
 800f1b8:	7fefffff 	.word	0x7fefffff
 800f1bc:	0801372c 	.word	0x0801372c
 800f1c0:	08013730 	.word	0x08013730
 800f1c4:	08013738 	.word	0x08013738
 800f1c8:	08013734 	.word	0x08013734
 800f1cc:	0801373c 	.word	0x0801373c
 800f1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	bfa8      	it	ge
 800f1d8:	461a      	movge	r2, r3
 800f1da:	2a00      	cmp	r2, #0
 800f1dc:	4691      	mov	r9, r2
 800f1de:	dc37      	bgt.n	800f250 <_printf_float+0x374>
 800f1e0:	f04f 0b00 	mov.w	fp, #0
 800f1e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1e8:	f104 021a 	add.w	r2, r4, #26
 800f1ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1ee:	9305      	str	r3, [sp, #20]
 800f1f0:	eba3 0309 	sub.w	r3, r3, r9
 800f1f4:	455b      	cmp	r3, fp
 800f1f6:	dc33      	bgt.n	800f260 <_printf_float+0x384>
 800f1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	db3b      	blt.n	800f278 <_printf_float+0x39c>
 800f200:	6823      	ldr	r3, [r4, #0]
 800f202:	07da      	lsls	r2, r3, #31
 800f204:	d438      	bmi.n	800f278 <_printf_float+0x39c>
 800f206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f208:	9a05      	ldr	r2, [sp, #20]
 800f20a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f20c:	1a9a      	subs	r2, r3, r2
 800f20e:	eba3 0901 	sub.w	r9, r3, r1
 800f212:	4591      	cmp	r9, r2
 800f214:	bfa8      	it	ge
 800f216:	4691      	movge	r9, r2
 800f218:	f1b9 0f00 	cmp.w	r9, #0
 800f21c:	dc35      	bgt.n	800f28a <_printf_float+0x3ae>
 800f21e:	f04f 0800 	mov.w	r8, #0
 800f222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f226:	f104 0a1a 	add.w	sl, r4, #26
 800f22a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	eba3 0309 	sub.w	r3, r3, r9
 800f234:	4543      	cmp	r3, r8
 800f236:	f77f af79 	ble.w	800f12c <_printf_float+0x250>
 800f23a:	2301      	movs	r3, #1
 800f23c:	4652      	mov	r2, sl
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	f43f aeaa 	beq.w	800ef9e <_printf_float+0xc2>
 800f24a:	f108 0801 	add.w	r8, r8, #1
 800f24e:	e7ec      	b.n	800f22a <_printf_float+0x34e>
 800f250:	4613      	mov	r3, r2
 800f252:	4631      	mov	r1, r6
 800f254:	4642      	mov	r2, r8
 800f256:	4628      	mov	r0, r5
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	d1c0      	bne.n	800f1e0 <_printf_float+0x304>
 800f25e:	e69e      	b.n	800ef9e <_printf_float+0xc2>
 800f260:	2301      	movs	r3, #1
 800f262:	4631      	mov	r1, r6
 800f264:	4628      	mov	r0, r5
 800f266:	9205      	str	r2, [sp, #20]
 800f268:	47b8      	blx	r7
 800f26a:	3001      	adds	r0, #1
 800f26c:	f43f ae97 	beq.w	800ef9e <_printf_float+0xc2>
 800f270:	9a05      	ldr	r2, [sp, #20]
 800f272:	f10b 0b01 	add.w	fp, fp, #1
 800f276:	e7b9      	b.n	800f1ec <_printf_float+0x310>
 800f278:	ee18 3a10 	vmov	r3, s16
 800f27c:	4652      	mov	r2, sl
 800f27e:	4631      	mov	r1, r6
 800f280:	4628      	mov	r0, r5
 800f282:	47b8      	blx	r7
 800f284:	3001      	adds	r0, #1
 800f286:	d1be      	bne.n	800f206 <_printf_float+0x32a>
 800f288:	e689      	b.n	800ef9e <_printf_float+0xc2>
 800f28a:	9a05      	ldr	r2, [sp, #20]
 800f28c:	464b      	mov	r3, r9
 800f28e:	4442      	add	r2, r8
 800f290:	4631      	mov	r1, r6
 800f292:	4628      	mov	r0, r5
 800f294:	47b8      	blx	r7
 800f296:	3001      	adds	r0, #1
 800f298:	d1c1      	bne.n	800f21e <_printf_float+0x342>
 800f29a:	e680      	b.n	800ef9e <_printf_float+0xc2>
 800f29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f29e:	2a01      	cmp	r2, #1
 800f2a0:	dc01      	bgt.n	800f2a6 <_printf_float+0x3ca>
 800f2a2:	07db      	lsls	r3, r3, #31
 800f2a4:	d538      	bpl.n	800f318 <_printf_float+0x43c>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	4642      	mov	r2, r8
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	47b8      	blx	r7
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	f43f ae74 	beq.w	800ef9e <_printf_float+0xc2>
 800f2b6:	ee18 3a10 	vmov	r3, s16
 800f2ba:	4652      	mov	r2, sl
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4628      	mov	r0, r5
 800f2c0:	47b8      	blx	r7
 800f2c2:	3001      	adds	r0, #1
 800f2c4:	f43f ae6b 	beq.w	800ef9e <_printf_float+0xc2>
 800f2c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	f7f1 fc12 	bl	8000af8 <__aeabi_dcmpeq>
 800f2d4:	b9d8      	cbnz	r0, 800f30e <_printf_float+0x432>
 800f2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d8:	f108 0201 	add.w	r2, r8, #1
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	47b8      	blx	r7
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	d10e      	bne.n	800f306 <_printf_float+0x42a>
 800f2e8:	e659      	b.n	800ef9e <_printf_float+0xc2>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	4652      	mov	r2, sl
 800f2ee:	4631      	mov	r1, r6
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	47b8      	blx	r7
 800f2f4:	3001      	adds	r0, #1
 800f2f6:	f43f ae52 	beq.w	800ef9e <_printf_float+0xc2>
 800f2fa:	f108 0801 	add.w	r8, r8, #1
 800f2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f300:	3b01      	subs	r3, #1
 800f302:	4543      	cmp	r3, r8
 800f304:	dcf1      	bgt.n	800f2ea <_printf_float+0x40e>
 800f306:	464b      	mov	r3, r9
 800f308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f30c:	e6dc      	b.n	800f0c8 <_printf_float+0x1ec>
 800f30e:	f04f 0800 	mov.w	r8, #0
 800f312:	f104 0a1a 	add.w	sl, r4, #26
 800f316:	e7f2      	b.n	800f2fe <_printf_float+0x422>
 800f318:	2301      	movs	r3, #1
 800f31a:	4642      	mov	r2, r8
 800f31c:	e7df      	b.n	800f2de <_printf_float+0x402>
 800f31e:	2301      	movs	r3, #1
 800f320:	464a      	mov	r2, r9
 800f322:	4631      	mov	r1, r6
 800f324:	4628      	mov	r0, r5
 800f326:	47b8      	blx	r7
 800f328:	3001      	adds	r0, #1
 800f32a:	f43f ae38 	beq.w	800ef9e <_printf_float+0xc2>
 800f32e:	f108 0801 	add.w	r8, r8, #1
 800f332:	68e3      	ldr	r3, [r4, #12]
 800f334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f336:	1a5b      	subs	r3, r3, r1
 800f338:	4543      	cmp	r3, r8
 800f33a:	dcf0      	bgt.n	800f31e <_printf_float+0x442>
 800f33c:	e6fa      	b.n	800f134 <_printf_float+0x258>
 800f33e:	f04f 0800 	mov.w	r8, #0
 800f342:	f104 0919 	add.w	r9, r4, #25
 800f346:	e7f4      	b.n	800f332 <_printf_float+0x456>

0800f348 <_printf_common>:
 800f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	4616      	mov	r6, r2
 800f34e:	4699      	mov	r9, r3
 800f350:	688a      	ldr	r2, [r1, #8]
 800f352:	690b      	ldr	r3, [r1, #16]
 800f354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f358:	4293      	cmp	r3, r2
 800f35a:	bfb8      	it	lt
 800f35c:	4613      	movlt	r3, r2
 800f35e:	6033      	str	r3, [r6, #0]
 800f360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f364:	4607      	mov	r7, r0
 800f366:	460c      	mov	r4, r1
 800f368:	b10a      	cbz	r2, 800f36e <_printf_common+0x26>
 800f36a:	3301      	adds	r3, #1
 800f36c:	6033      	str	r3, [r6, #0]
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	0699      	lsls	r1, r3, #26
 800f372:	bf42      	ittt	mi
 800f374:	6833      	ldrmi	r3, [r6, #0]
 800f376:	3302      	addmi	r3, #2
 800f378:	6033      	strmi	r3, [r6, #0]
 800f37a:	6825      	ldr	r5, [r4, #0]
 800f37c:	f015 0506 	ands.w	r5, r5, #6
 800f380:	d106      	bne.n	800f390 <_printf_common+0x48>
 800f382:	f104 0a19 	add.w	sl, r4, #25
 800f386:	68e3      	ldr	r3, [r4, #12]
 800f388:	6832      	ldr	r2, [r6, #0]
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	42ab      	cmp	r3, r5
 800f38e:	dc26      	bgt.n	800f3de <_printf_common+0x96>
 800f390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f394:	1e13      	subs	r3, r2, #0
 800f396:	6822      	ldr	r2, [r4, #0]
 800f398:	bf18      	it	ne
 800f39a:	2301      	movne	r3, #1
 800f39c:	0692      	lsls	r2, r2, #26
 800f39e:	d42b      	bmi.n	800f3f8 <_printf_common+0xb0>
 800f3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	47c0      	blx	r8
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d01e      	beq.n	800f3ec <_printf_common+0xa4>
 800f3ae:	6823      	ldr	r3, [r4, #0]
 800f3b0:	68e5      	ldr	r5, [r4, #12]
 800f3b2:	6832      	ldr	r2, [r6, #0]
 800f3b4:	f003 0306 	and.w	r3, r3, #6
 800f3b8:	2b04      	cmp	r3, #4
 800f3ba:	bf08      	it	eq
 800f3bc:	1aad      	subeq	r5, r5, r2
 800f3be:	68a3      	ldr	r3, [r4, #8]
 800f3c0:	6922      	ldr	r2, [r4, #16]
 800f3c2:	bf0c      	ite	eq
 800f3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3c8:	2500      	movne	r5, #0
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	bfc4      	itt	gt
 800f3ce:	1a9b      	subgt	r3, r3, r2
 800f3d0:	18ed      	addgt	r5, r5, r3
 800f3d2:	2600      	movs	r6, #0
 800f3d4:	341a      	adds	r4, #26
 800f3d6:	42b5      	cmp	r5, r6
 800f3d8:	d11a      	bne.n	800f410 <_printf_common+0xc8>
 800f3da:	2000      	movs	r0, #0
 800f3dc:	e008      	b.n	800f3f0 <_printf_common+0xa8>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4652      	mov	r2, sl
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	47c0      	blx	r8
 800f3e8:	3001      	adds	r0, #1
 800f3ea:	d103      	bne.n	800f3f4 <_printf_common+0xac>
 800f3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f4:	3501      	adds	r5, #1
 800f3f6:	e7c6      	b.n	800f386 <_printf_common+0x3e>
 800f3f8:	18e1      	adds	r1, r4, r3
 800f3fa:	1c5a      	adds	r2, r3, #1
 800f3fc:	2030      	movs	r0, #48	; 0x30
 800f3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f402:	4422      	add	r2, r4
 800f404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f40c:	3302      	adds	r3, #2
 800f40e:	e7c7      	b.n	800f3a0 <_printf_common+0x58>
 800f410:	2301      	movs	r3, #1
 800f412:	4622      	mov	r2, r4
 800f414:	4649      	mov	r1, r9
 800f416:	4638      	mov	r0, r7
 800f418:	47c0      	blx	r8
 800f41a:	3001      	adds	r0, #1
 800f41c:	d0e6      	beq.n	800f3ec <_printf_common+0xa4>
 800f41e:	3601      	adds	r6, #1
 800f420:	e7d9      	b.n	800f3d6 <_printf_common+0x8e>
	...

0800f424 <_printf_i>:
 800f424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f428:	7e0f      	ldrb	r7, [r1, #24]
 800f42a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f42c:	2f78      	cmp	r7, #120	; 0x78
 800f42e:	4691      	mov	r9, r2
 800f430:	4680      	mov	r8, r0
 800f432:	460c      	mov	r4, r1
 800f434:	469a      	mov	sl, r3
 800f436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f43a:	d807      	bhi.n	800f44c <_printf_i+0x28>
 800f43c:	2f62      	cmp	r7, #98	; 0x62
 800f43e:	d80a      	bhi.n	800f456 <_printf_i+0x32>
 800f440:	2f00      	cmp	r7, #0
 800f442:	f000 80d8 	beq.w	800f5f6 <_printf_i+0x1d2>
 800f446:	2f58      	cmp	r7, #88	; 0x58
 800f448:	f000 80a3 	beq.w	800f592 <_printf_i+0x16e>
 800f44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f454:	e03a      	b.n	800f4cc <_printf_i+0xa8>
 800f456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f45a:	2b15      	cmp	r3, #21
 800f45c:	d8f6      	bhi.n	800f44c <_printf_i+0x28>
 800f45e:	a101      	add	r1, pc, #4	; (adr r1, 800f464 <_printf_i+0x40>)
 800f460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f464:	0800f4bd 	.word	0x0800f4bd
 800f468:	0800f4d1 	.word	0x0800f4d1
 800f46c:	0800f44d 	.word	0x0800f44d
 800f470:	0800f44d 	.word	0x0800f44d
 800f474:	0800f44d 	.word	0x0800f44d
 800f478:	0800f44d 	.word	0x0800f44d
 800f47c:	0800f4d1 	.word	0x0800f4d1
 800f480:	0800f44d 	.word	0x0800f44d
 800f484:	0800f44d 	.word	0x0800f44d
 800f488:	0800f44d 	.word	0x0800f44d
 800f48c:	0800f44d 	.word	0x0800f44d
 800f490:	0800f5dd 	.word	0x0800f5dd
 800f494:	0800f501 	.word	0x0800f501
 800f498:	0800f5bf 	.word	0x0800f5bf
 800f49c:	0800f44d 	.word	0x0800f44d
 800f4a0:	0800f44d 	.word	0x0800f44d
 800f4a4:	0800f5ff 	.word	0x0800f5ff
 800f4a8:	0800f44d 	.word	0x0800f44d
 800f4ac:	0800f501 	.word	0x0800f501
 800f4b0:	0800f44d 	.word	0x0800f44d
 800f4b4:	0800f44d 	.word	0x0800f44d
 800f4b8:	0800f5c7 	.word	0x0800f5c7
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	1d1a      	adds	r2, r3, #4
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	602a      	str	r2, [r5, #0]
 800f4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e0a3      	b.n	800f618 <_printf_i+0x1f4>
 800f4d0:	6820      	ldr	r0, [r4, #0]
 800f4d2:	6829      	ldr	r1, [r5, #0]
 800f4d4:	0606      	lsls	r6, r0, #24
 800f4d6:	f101 0304 	add.w	r3, r1, #4
 800f4da:	d50a      	bpl.n	800f4f2 <_printf_i+0xce>
 800f4dc:	680e      	ldr	r6, [r1, #0]
 800f4de:	602b      	str	r3, [r5, #0]
 800f4e0:	2e00      	cmp	r6, #0
 800f4e2:	da03      	bge.n	800f4ec <_printf_i+0xc8>
 800f4e4:	232d      	movs	r3, #45	; 0x2d
 800f4e6:	4276      	negs	r6, r6
 800f4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4ec:	485e      	ldr	r0, [pc, #376]	; (800f668 <_printf_i+0x244>)
 800f4ee:	230a      	movs	r3, #10
 800f4f0:	e019      	b.n	800f526 <_printf_i+0x102>
 800f4f2:	680e      	ldr	r6, [r1, #0]
 800f4f4:	602b      	str	r3, [r5, #0]
 800f4f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4fa:	bf18      	it	ne
 800f4fc:	b236      	sxthne	r6, r6
 800f4fe:	e7ef      	b.n	800f4e0 <_printf_i+0xbc>
 800f500:	682b      	ldr	r3, [r5, #0]
 800f502:	6820      	ldr	r0, [r4, #0]
 800f504:	1d19      	adds	r1, r3, #4
 800f506:	6029      	str	r1, [r5, #0]
 800f508:	0601      	lsls	r1, r0, #24
 800f50a:	d501      	bpl.n	800f510 <_printf_i+0xec>
 800f50c:	681e      	ldr	r6, [r3, #0]
 800f50e:	e002      	b.n	800f516 <_printf_i+0xf2>
 800f510:	0646      	lsls	r6, r0, #25
 800f512:	d5fb      	bpl.n	800f50c <_printf_i+0xe8>
 800f514:	881e      	ldrh	r6, [r3, #0]
 800f516:	4854      	ldr	r0, [pc, #336]	; (800f668 <_printf_i+0x244>)
 800f518:	2f6f      	cmp	r7, #111	; 0x6f
 800f51a:	bf0c      	ite	eq
 800f51c:	2308      	moveq	r3, #8
 800f51e:	230a      	movne	r3, #10
 800f520:	2100      	movs	r1, #0
 800f522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f526:	6865      	ldr	r5, [r4, #4]
 800f528:	60a5      	str	r5, [r4, #8]
 800f52a:	2d00      	cmp	r5, #0
 800f52c:	bfa2      	ittt	ge
 800f52e:	6821      	ldrge	r1, [r4, #0]
 800f530:	f021 0104 	bicge.w	r1, r1, #4
 800f534:	6021      	strge	r1, [r4, #0]
 800f536:	b90e      	cbnz	r6, 800f53c <_printf_i+0x118>
 800f538:	2d00      	cmp	r5, #0
 800f53a:	d04d      	beq.n	800f5d8 <_printf_i+0x1b4>
 800f53c:	4615      	mov	r5, r2
 800f53e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f542:	fb03 6711 	mls	r7, r3, r1, r6
 800f546:	5dc7      	ldrb	r7, [r0, r7]
 800f548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f54c:	4637      	mov	r7, r6
 800f54e:	42bb      	cmp	r3, r7
 800f550:	460e      	mov	r6, r1
 800f552:	d9f4      	bls.n	800f53e <_printf_i+0x11a>
 800f554:	2b08      	cmp	r3, #8
 800f556:	d10b      	bne.n	800f570 <_printf_i+0x14c>
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	07de      	lsls	r6, r3, #31
 800f55c:	d508      	bpl.n	800f570 <_printf_i+0x14c>
 800f55e:	6923      	ldr	r3, [r4, #16]
 800f560:	6861      	ldr	r1, [r4, #4]
 800f562:	4299      	cmp	r1, r3
 800f564:	bfde      	ittt	le
 800f566:	2330      	movle	r3, #48	; 0x30
 800f568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f56c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f570:	1b52      	subs	r2, r2, r5
 800f572:	6122      	str	r2, [r4, #16]
 800f574:	f8cd a000 	str.w	sl, [sp]
 800f578:	464b      	mov	r3, r9
 800f57a:	aa03      	add	r2, sp, #12
 800f57c:	4621      	mov	r1, r4
 800f57e:	4640      	mov	r0, r8
 800f580:	f7ff fee2 	bl	800f348 <_printf_common>
 800f584:	3001      	adds	r0, #1
 800f586:	d14c      	bne.n	800f622 <_printf_i+0x1fe>
 800f588:	f04f 30ff 	mov.w	r0, #4294967295
 800f58c:	b004      	add	sp, #16
 800f58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f592:	4835      	ldr	r0, [pc, #212]	; (800f668 <_printf_i+0x244>)
 800f594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f598:	6829      	ldr	r1, [r5, #0]
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5a0:	6029      	str	r1, [r5, #0]
 800f5a2:	061d      	lsls	r5, r3, #24
 800f5a4:	d514      	bpl.n	800f5d0 <_printf_i+0x1ac>
 800f5a6:	07df      	lsls	r7, r3, #31
 800f5a8:	bf44      	itt	mi
 800f5aa:	f043 0320 	orrmi.w	r3, r3, #32
 800f5ae:	6023      	strmi	r3, [r4, #0]
 800f5b0:	b91e      	cbnz	r6, 800f5ba <_printf_i+0x196>
 800f5b2:	6823      	ldr	r3, [r4, #0]
 800f5b4:	f023 0320 	bic.w	r3, r3, #32
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	2310      	movs	r3, #16
 800f5bc:	e7b0      	b.n	800f520 <_printf_i+0xfc>
 800f5be:	6823      	ldr	r3, [r4, #0]
 800f5c0:	f043 0320 	orr.w	r3, r3, #32
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	2378      	movs	r3, #120	; 0x78
 800f5c8:	4828      	ldr	r0, [pc, #160]	; (800f66c <_printf_i+0x248>)
 800f5ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5ce:	e7e3      	b.n	800f598 <_printf_i+0x174>
 800f5d0:	0659      	lsls	r1, r3, #25
 800f5d2:	bf48      	it	mi
 800f5d4:	b2b6      	uxthmi	r6, r6
 800f5d6:	e7e6      	b.n	800f5a6 <_printf_i+0x182>
 800f5d8:	4615      	mov	r5, r2
 800f5da:	e7bb      	b.n	800f554 <_printf_i+0x130>
 800f5dc:	682b      	ldr	r3, [r5, #0]
 800f5de:	6826      	ldr	r6, [r4, #0]
 800f5e0:	6961      	ldr	r1, [r4, #20]
 800f5e2:	1d18      	adds	r0, r3, #4
 800f5e4:	6028      	str	r0, [r5, #0]
 800f5e6:	0635      	lsls	r5, r6, #24
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	d501      	bpl.n	800f5f0 <_printf_i+0x1cc>
 800f5ec:	6019      	str	r1, [r3, #0]
 800f5ee:	e002      	b.n	800f5f6 <_printf_i+0x1d2>
 800f5f0:	0670      	lsls	r0, r6, #25
 800f5f2:	d5fb      	bpl.n	800f5ec <_printf_i+0x1c8>
 800f5f4:	8019      	strh	r1, [r3, #0]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	6123      	str	r3, [r4, #16]
 800f5fa:	4615      	mov	r5, r2
 800f5fc:	e7ba      	b.n	800f574 <_printf_i+0x150>
 800f5fe:	682b      	ldr	r3, [r5, #0]
 800f600:	1d1a      	adds	r2, r3, #4
 800f602:	602a      	str	r2, [r5, #0]
 800f604:	681d      	ldr	r5, [r3, #0]
 800f606:	6862      	ldr	r2, [r4, #4]
 800f608:	2100      	movs	r1, #0
 800f60a:	4628      	mov	r0, r5
 800f60c:	f7f0 fe00 	bl	8000210 <memchr>
 800f610:	b108      	cbz	r0, 800f616 <_printf_i+0x1f2>
 800f612:	1b40      	subs	r0, r0, r5
 800f614:	6060      	str	r0, [r4, #4]
 800f616:	6863      	ldr	r3, [r4, #4]
 800f618:	6123      	str	r3, [r4, #16]
 800f61a:	2300      	movs	r3, #0
 800f61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f620:	e7a8      	b.n	800f574 <_printf_i+0x150>
 800f622:	6923      	ldr	r3, [r4, #16]
 800f624:	462a      	mov	r2, r5
 800f626:	4649      	mov	r1, r9
 800f628:	4640      	mov	r0, r8
 800f62a:	47d0      	blx	sl
 800f62c:	3001      	adds	r0, #1
 800f62e:	d0ab      	beq.n	800f588 <_printf_i+0x164>
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	079b      	lsls	r3, r3, #30
 800f634:	d413      	bmi.n	800f65e <_printf_i+0x23a>
 800f636:	68e0      	ldr	r0, [r4, #12]
 800f638:	9b03      	ldr	r3, [sp, #12]
 800f63a:	4298      	cmp	r0, r3
 800f63c:	bfb8      	it	lt
 800f63e:	4618      	movlt	r0, r3
 800f640:	e7a4      	b.n	800f58c <_printf_i+0x168>
 800f642:	2301      	movs	r3, #1
 800f644:	4632      	mov	r2, r6
 800f646:	4649      	mov	r1, r9
 800f648:	4640      	mov	r0, r8
 800f64a:	47d0      	blx	sl
 800f64c:	3001      	adds	r0, #1
 800f64e:	d09b      	beq.n	800f588 <_printf_i+0x164>
 800f650:	3501      	adds	r5, #1
 800f652:	68e3      	ldr	r3, [r4, #12]
 800f654:	9903      	ldr	r1, [sp, #12]
 800f656:	1a5b      	subs	r3, r3, r1
 800f658:	42ab      	cmp	r3, r5
 800f65a:	dcf2      	bgt.n	800f642 <_printf_i+0x21e>
 800f65c:	e7eb      	b.n	800f636 <_printf_i+0x212>
 800f65e:	2500      	movs	r5, #0
 800f660:	f104 0619 	add.w	r6, r4, #25
 800f664:	e7f5      	b.n	800f652 <_printf_i+0x22e>
 800f666:	bf00      	nop
 800f668:	0801373e 	.word	0x0801373e
 800f66c:	0801374f 	.word	0x0801374f

0800f670 <siprintf>:
 800f670:	b40e      	push	{r1, r2, r3}
 800f672:	b500      	push	{lr}
 800f674:	b09c      	sub	sp, #112	; 0x70
 800f676:	ab1d      	add	r3, sp, #116	; 0x74
 800f678:	9002      	str	r0, [sp, #8]
 800f67a:	9006      	str	r0, [sp, #24]
 800f67c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f680:	4809      	ldr	r0, [pc, #36]	; (800f6a8 <siprintf+0x38>)
 800f682:	9107      	str	r1, [sp, #28]
 800f684:	9104      	str	r1, [sp, #16]
 800f686:	4909      	ldr	r1, [pc, #36]	; (800f6ac <siprintf+0x3c>)
 800f688:	f853 2b04 	ldr.w	r2, [r3], #4
 800f68c:	9105      	str	r1, [sp, #20]
 800f68e:	6800      	ldr	r0, [r0, #0]
 800f690:	9301      	str	r3, [sp, #4]
 800f692:	a902      	add	r1, sp, #8
 800f694:	f001 fb8c 	bl	8010db0 <_svfiprintf_r>
 800f698:	9b02      	ldr	r3, [sp, #8]
 800f69a:	2200      	movs	r2, #0
 800f69c:	701a      	strb	r2, [r3, #0]
 800f69e:	b01c      	add	sp, #112	; 0x70
 800f6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6a4:	b003      	add	sp, #12
 800f6a6:	4770      	bx	lr
 800f6a8:	20000020 	.word	0x20000020
 800f6ac:	ffff0208 	.word	0xffff0208

0800f6b0 <strcpy>:
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6b6:	f803 2b01 	strb.w	r2, [r3], #1
 800f6ba:	2a00      	cmp	r2, #0
 800f6bc:	d1f9      	bne.n	800f6b2 <strcpy+0x2>
 800f6be:	4770      	bx	lr

0800f6c0 <strpbrk>:
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	7803      	ldrb	r3, [r0, #0]
 800f6c4:	b1a3      	cbz	r3, 800f6f0 <strpbrk+0x30>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	460c      	mov	r4, r1
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f6d0:	b14d      	cbz	r5, 800f6e6 <strpbrk+0x26>
 800f6d2:	460a      	mov	r2, r1
 800f6d4:	e001      	b.n	800f6da <strpbrk+0x1a>
 800f6d6:	42ae      	cmp	r6, r5
 800f6d8:	d009      	beq.n	800f6ee <strpbrk+0x2e>
 800f6da:	4614      	mov	r4, r2
 800f6dc:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f6e0:	2e00      	cmp	r6, #0
 800f6e2:	d1f8      	bne.n	800f6d6 <strpbrk+0x16>
 800f6e4:	e7f1      	b.n	800f6ca <strpbrk+0xa>
 800f6e6:	7823      	ldrb	r3, [r4, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	bf08      	it	eq
 800f6ec:	2000      	moveq	r0, #0
 800f6ee:	bd70      	pop	{r4, r5, r6, pc}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	e7fc      	b.n	800f6ee <strpbrk+0x2e>

0800f6f4 <quorem>:
 800f6f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f8:	6903      	ldr	r3, [r0, #16]
 800f6fa:	690c      	ldr	r4, [r1, #16]
 800f6fc:	42a3      	cmp	r3, r4
 800f6fe:	4607      	mov	r7, r0
 800f700:	f2c0 8081 	blt.w	800f806 <quorem+0x112>
 800f704:	3c01      	subs	r4, #1
 800f706:	f101 0814 	add.w	r8, r1, #20
 800f70a:	f100 0514 	add.w	r5, r0, #20
 800f70e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f712:	9301      	str	r3, [sp, #4]
 800f714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f71c:	3301      	adds	r3, #1
 800f71e:	429a      	cmp	r2, r3
 800f720:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f724:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f728:	fbb2 f6f3 	udiv	r6, r2, r3
 800f72c:	d331      	bcc.n	800f792 <quorem+0x9e>
 800f72e:	f04f 0e00 	mov.w	lr, #0
 800f732:	4640      	mov	r0, r8
 800f734:	46ac      	mov	ip, r5
 800f736:	46f2      	mov	sl, lr
 800f738:	f850 2b04 	ldr.w	r2, [r0], #4
 800f73c:	b293      	uxth	r3, r2
 800f73e:	fb06 e303 	mla	r3, r6, r3, lr
 800f742:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f746:	b29b      	uxth	r3, r3
 800f748:	ebaa 0303 	sub.w	r3, sl, r3
 800f74c:	f8dc a000 	ldr.w	sl, [ip]
 800f750:	0c12      	lsrs	r2, r2, #16
 800f752:	fa13 f38a 	uxtah	r3, r3, sl
 800f756:	fb06 e202 	mla	r2, r6, r2, lr
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	9b00      	ldr	r3, [sp, #0]
 800f75e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f762:	b292      	uxth	r2, r2
 800f764:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f76c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f770:	4581      	cmp	r9, r0
 800f772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f776:	f84c 3b04 	str.w	r3, [ip], #4
 800f77a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f77e:	d2db      	bcs.n	800f738 <quorem+0x44>
 800f780:	f855 300b 	ldr.w	r3, [r5, fp]
 800f784:	b92b      	cbnz	r3, 800f792 <quorem+0x9e>
 800f786:	9b01      	ldr	r3, [sp, #4]
 800f788:	3b04      	subs	r3, #4
 800f78a:	429d      	cmp	r5, r3
 800f78c:	461a      	mov	r2, r3
 800f78e:	d32e      	bcc.n	800f7ee <quorem+0xfa>
 800f790:	613c      	str	r4, [r7, #16]
 800f792:	4638      	mov	r0, r7
 800f794:	f001 f8b8 	bl	8010908 <__mcmp>
 800f798:	2800      	cmp	r0, #0
 800f79a:	db24      	blt.n	800f7e6 <quorem+0xf2>
 800f79c:	3601      	adds	r6, #1
 800f79e:	4628      	mov	r0, r5
 800f7a0:	f04f 0c00 	mov.w	ip, #0
 800f7a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f7a8:	f8d0 e000 	ldr.w	lr, [r0]
 800f7ac:	b293      	uxth	r3, r2
 800f7ae:	ebac 0303 	sub.w	r3, ip, r3
 800f7b2:	0c12      	lsrs	r2, r2, #16
 800f7b4:	fa13 f38e 	uxtah	r3, r3, lr
 800f7b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f7bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7c6:	45c1      	cmp	r9, r8
 800f7c8:	f840 3b04 	str.w	r3, [r0], #4
 800f7cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f7d0:	d2e8      	bcs.n	800f7a4 <quorem+0xb0>
 800f7d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7da:	b922      	cbnz	r2, 800f7e6 <quorem+0xf2>
 800f7dc:	3b04      	subs	r3, #4
 800f7de:	429d      	cmp	r5, r3
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	d30a      	bcc.n	800f7fa <quorem+0x106>
 800f7e4:	613c      	str	r4, [r7, #16]
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	b003      	add	sp, #12
 800f7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ee:	6812      	ldr	r2, [r2, #0]
 800f7f0:	3b04      	subs	r3, #4
 800f7f2:	2a00      	cmp	r2, #0
 800f7f4:	d1cc      	bne.n	800f790 <quorem+0x9c>
 800f7f6:	3c01      	subs	r4, #1
 800f7f8:	e7c7      	b.n	800f78a <quorem+0x96>
 800f7fa:	6812      	ldr	r2, [r2, #0]
 800f7fc:	3b04      	subs	r3, #4
 800f7fe:	2a00      	cmp	r2, #0
 800f800:	d1f0      	bne.n	800f7e4 <quorem+0xf0>
 800f802:	3c01      	subs	r4, #1
 800f804:	e7eb      	b.n	800f7de <quorem+0xea>
 800f806:	2000      	movs	r0, #0
 800f808:	e7ee      	b.n	800f7e8 <quorem+0xf4>
 800f80a:	0000      	movs	r0, r0
 800f80c:	0000      	movs	r0, r0
	...

0800f810 <_dtoa_r>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	ed2d 8b04 	vpush	{d8-d9}
 800f818:	ec57 6b10 	vmov	r6, r7, d0
 800f81c:	b093      	sub	sp, #76	; 0x4c
 800f81e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f820:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f824:	9106      	str	r1, [sp, #24]
 800f826:	ee10 aa10 	vmov	sl, s0
 800f82a:	4604      	mov	r4, r0
 800f82c:	9209      	str	r2, [sp, #36]	; 0x24
 800f82e:	930c      	str	r3, [sp, #48]	; 0x30
 800f830:	46bb      	mov	fp, r7
 800f832:	b975      	cbnz	r5, 800f852 <_dtoa_r+0x42>
 800f834:	2010      	movs	r0, #16
 800f836:	f000 fddd 	bl	80103f4 <malloc>
 800f83a:	4602      	mov	r2, r0
 800f83c:	6260      	str	r0, [r4, #36]	; 0x24
 800f83e:	b920      	cbnz	r0, 800f84a <_dtoa_r+0x3a>
 800f840:	4ba7      	ldr	r3, [pc, #668]	; (800fae0 <_dtoa_r+0x2d0>)
 800f842:	21ea      	movs	r1, #234	; 0xea
 800f844:	48a7      	ldr	r0, [pc, #668]	; (800fae4 <_dtoa_r+0x2d4>)
 800f846:	f001 fbc3 	bl	8010fd0 <__assert_func>
 800f84a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f84e:	6005      	str	r5, [r0, #0]
 800f850:	60c5      	str	r5, [r0, #12]
 800f852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f854:	6819      	ldr	r1, [r3, #0]
 800f856:	b151      	cbz	r1, 800f86e <_dtoa_r+0x5e>
 800f858:	685a      	ldr	r2, [r3, #4]
 800f85a:	604a      	str	r2, [r1, #4]
 800f85c:	2301      	movs	r3, #1
 800f85e:	4093      	lsls	r3, r2
 800f860:	608b      	str	r3, [r1, #8]
 800f862:	4620      	mov	r0, r4
 800f864:	f000 fe0e 	bl	8010484 <_Bfree>
 800f868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f86a:	2200      	movs	r2, #0
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	1e3b      	subs	r3, r7, #0
 800f870:	bfaa      	itet	ge
 800f872:	2300      	movge	r3, #0
 800f874:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f878:	f8c8 3000 	strge.w	r3, [r8]
 800f87c:	4b9a      	ldr	r3, [pc, #616]	; (800fae8 <_dtoa_r+0x2d8>)
 800f87e:	bfbc      	itt	lt
 800f880:	2201      	movlt	r2, #1
 800f882:	f8c8 2000 	strlt.w	r2, [r8]
 800f886:	ea33 030b 	bics.w	r3, r3, fp
 800f88a:	d11b      	bne.n	800f8c4 <_dtoa_r+0xb4>
 800f88c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f88e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f892:	6013      	str	r3, [r2, #0]
 800f894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f898:	4333      	orrs	r3, r6
 800f89a:	f000 8592 	beq.w	80103c2 <_dtoa_r+0xbb2>
 800f89e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8a0:	b963      	cbnz	r3, 800f8bc <_dtoa_r+0xac>
 800f8a2:	4b92      	ldr	r3, [pc, #584]	; (800faec <_dtoa_r+0x2dc>)
 800f8a4:	e022      	b.n	800f8ec <_dtoa_r+0xdc>
 800f8a6:	4b92      	ldr	r3, [pc, #584]	; (800faf0 <_dtoa_r+0x2e0>)
 800f8a8:	9301      	str	r3, [sp, #4]
 800f8aa:	3308      	adds	r3, #8
 800f8ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f8ae:	6013      	str	r3, [r2, #0]
 800f8b0:	9801      	ldr	r0, [sp, #4]
 800f8b2:	b013      	add	sp, #76	; 0x4c
 800f8b4:	ecbd 8b04 	vpop	{d8-d9}
 800f8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8bc:	4b8b      	ldr	r3, [pc, #556]	; (800faec <_dtoa_r+0x2dc>)
 800f8be:	9301      	str	r3, [sp, #4]
 800f8c0:	3303      	adds	r3, #3
 800f8c2:	e7f3      	b.n	800f8ac <_dtoa_r+0x9c>
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	4650      	mov	r0, sl
 800f8ca:	4659      	mov	r1, fp
 800f8cc:	f7f1 f914 	bl	8000af8 <__aeabi_dcmpeq>
 800f8d0:	ec4b ab19 	vmov	d9, sl, fp
 800f8d4:	4680      	mov	r8, r0
 800f8d6:	b158      	cbz	r0, 800f8f0 <_dtoa_r+0xe0>
 800f8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8da:	2301      	movs	r3, #1
 800f8dc:	6013      	str	r3, [r2, #0]
 800f8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 856b 	beq.w	80103bc <_dtoa_r+0xbac>
 800f8e6:	4883      	ldr	r0, [pc, #524]	; (800faf4 <_dtoa_r+0x2e4>)
 800f8e8:	6018      	str	r0, [r3, #0]
 800f8ea:	1e43      	subs	r3, r0, #1
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	e7df      	b.n	800f8b0 <_dtoa_r+0xa0>
 800f8f0:	ec4b ab10 	vmov	d0, sl, fp
 800f8f4:	aa10      	add	r2, sp, #64	; 0x40
 800f8f6:	a911      	add	r1, sp, #68	; 0x44
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f001 f8ab 	bl	8010a54 <__d2b>
 800f8fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f902:	ee08 0a10 	vmov	s16, r0
 800f906:	2d00      	cmp	r5, #0
 800f908:	f000 8084 	beq.w	800fa14 <_dtoa_r+0x204>
 800f90c:	ee19 3a90 	vmov	r3, s19
 800f910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f914:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f918:	4656      	mov	r6, sl
 800f91a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f91e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f922:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f926:	4b74      	ldr	r3, [pc, #464]	; (800faf8 <_dtoa_r+0x2e8>)
 800f928:	2200      	movs	r2, #0
 800f92a:	4630      	mov	r0, r6
 800f92c:	4639      	mov	r1, r7
 800f92e:	f7f0 fcc3 	bl	80002b8 <__aeabi_dsub>
 800f932:	a365      	add	r3, pc, #404	; (adr r3, 800fac8 <_dtoa_r+0x2b8>)
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	f7f0 fe76 	bl	8000628 <__aeabi_dmul>
 800f93c:	a364      	add	r3, pc, #400	; (adr r3, 800fad0 <_dtoa_r+0x2c0>)
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	f7f0 fcbb 	bl	80002bc <__adddf3>
 800f946:	4606      	mov	r6, r0
 800f948:	4628      	mov	r0, r5
 800f94a:	460f      	mov	r7, r1
 800f94c:	f7f0 fe02 	bl	8000554 <__aeabi_i2d>
 800f950:	a361      	add	r3, pc, #388	; (adr r3, 800fad8 <_dtoa_r+0x2c8>)
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	f7f0 fe67 	bl	8000628 <__aeabi_dmul>
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	4630      	mov	r0, r6
 800f960:	4639      	mov	r1, r7
 800f962:	f7f0 fcab 	bl	80002bc <__adddf3>
 800f966:	4606      	mov	r6, r0
 800f968:	460f      	mov	r7, r1
 800f96a:	f7f1 f90d 	bl	8000b88 <__aeabi_d2iz>
 800f96e:	2200      	movs	r2, #0
 800f970:	9000      	str	r0, [sp, #0]
 800f972:	2300      	movs	r3, #0
 800f974:	4630      	mov	r0, r6
 800f976:	4639      	mov	r1, r7
 800f978:	f7f1 f8c8 	bl	8000b0c <__aeabi_dcmplt>
 800f97c:	b150      	cbz	r0, 800f994 <_dtoa_r+0x184>
 800f97e:	9800      	ldr	r0, [sp, #0]
 800f980:	f7f0 fde8 	bl	8000554 <__aeabi_i2d>
 800f984:	4632      	mov	r2, r6
 800f986:	463b      	mov	r3, r7
 800f988:	f7f1 f8b6 	bl	8000af8 <__aeabi_dcmpeq>
 800f98c:	b910      	cbnz	r0, 800f994 <_dtoa_r+0x184>
 800f98e:	9b00      	ldr	r3, [sp, #0]
 800f990:	3b01      	subs	r3, #1
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	9b00      	ldr	r3, [sp, #0]
 800f996:	2b16      	cmp	r3, #22
 800f998:	d85a      	bhi.n	800fa50 <_dtoa_r+0x240>
 800f99a:	9a00      	ldr	r2, [sp, #0]
 800f99c:	4b57      	ldr	r3, [pc, #348]	; (800fafc <_dtoa_r+0x2ec>)
 800f99e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a6:	ec51 0b19 	vmov	r0, r1, d9
 800f9aa:	f7f1 f8af 	bl	8000b0c <__aeabi_dcmplt>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d050      	beq.n	800fa54 <_dtoa_r+0x244>
 800f9b2:	9b00      	ldr	r3, [sp, #0]
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9be:	1b5d      	subs	r5, r3, r5
 800f9c0:	1e6b      	subs	r3, r5, #1
 800f9c2:	9305      	str	r3, [sp, #20]
 800f9c4:	bf45      	ittet	mi
 800f9c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f9ca:	9304      	strmi	r3, [sp, #16]
 800f9cc:	2300      	movpl	r3, #0
 800f9ce:	2300      	movmi	r3, #0
 800f9d0:	bf4c      	ite	mi
 800f9d2:	9305      	strmi	r3, [sp, #20]
 800f9d4:	9304      	strpl	r3, [sp, #16]
 800f9d6:	9b00      	ldr	r3, [sp, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	db3d      	blt.n	800fa58 <_dtoa_r+0x248>
 800f9dc:	9b05      	ldr	r3, [sp, #20]
 800f9de:	9a00      	ldr	r2, [sp, #0]
 800f9e0:	920a      	str	r2, [sp, #40]	; 0x28
 800f9e2:	4413      	add	r3, r2
 800f9e4:	9305      	str	r3, [sp, #20]
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	9307      	str	r3, [sp, #28]
 800f9ea:	9b06      	ldr	r3, [sp, #24]
 800f9ec:	2b09      	cmp	r3, #9
 800f9ee:	f200 8089 	bhi.w	800fb04 <_dtoa_r+0x2f4>
 800f9f2:	2b05      	cmp	r3, #5
 800f9f4:	bfc4      	itt	gt
 800f9f6:	3b04      	subgt	r3, #4
 800f9f8:	9306      	strgt	r3, [sp, #24]
 800f9fa:	9b06      	ldr	r3, [sp, #24]
 800f9fc:	f1a3 0302 	sub.w	r3, r3, #2
 800fa00:	bfcc      	ite	gt
 800fa02:	2500      	movgt	r5, #0
 800fa04:	2501      	movle	r5, #1
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	f200 8087 	bhi.w	800fb1a <_dtoa_r+0x30a>
 800fa0c:	e8df f003 	tbb	[pc, r3]
 800fa10:	59383a2d 	.word	0x59383a2d
 800fa14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fa18:	441d      	add	r5, r3
 800fa1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fa1e:	2b20      	cmp	r3, #32
 800fa20:	bfc1      	itttt	gt
 800fa22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fa26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fa2a:	fa0b f303 	lslgt.w	r3, fp, r3
 800fa2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fa32:	bfda      	itte	le
 800fa34:	f1c3 0320 	rsble	r3, r3, #32
 800fa38:	fa06 f003 	lslle.w	r0, r6, r3
 800fa3c:	4318      	orrgt	r0, r3
 800fa3e:	f7f0 fd79 	bl	8000534 <__aeabi_ui2d>
 800fa42:	2301      	movs	r3, #1
 800fa44:	4606      	mov	r6, r0
 800fa46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fa4a:	3d01      	subs	r5, #1
 800fa4c:	930e      	str	r3, [sp, #56]	; 0x38
 800fa4e:	e76a      	b.n	800f926 <_dtoa_r+0x116>
 800fa50:	2301      	movs	r3, #1
 800fa52:	e7b2      	b.n	800f9ba <_dtoa_r+0x1aa>
 800fa54:	900b      	str	r0, [sp, #44]	; 0x2c
 800fa56:	e7b1      	b.n	800f9bc <_dtoa_r+0x1ac>
 800fa58:	9b04      	ldr	r3, [sp, #16]
 800fa5a:	9a00      	ldr	r2, [sp, #0]
 800fa5c:	1a9b      	subs	r3, r3, r2
 800fa5e:	9304      	str	r3, [sp, #16]
 800fa60:	4253      	negs	r3, r2
 800fa62:	9307      	str	r3, [sp, #28]
 800fa64:	2300      	movs	r3, #0
 800fa66:	930a      	str	r3, [sp, #40]	; 0x28
 800fa68:	e7bf      	b.n	800f9ea <_dtoa_r+0x1da>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	9308      	str	r3, [sp, #32]
 800fa6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	dc55      	bgt.n	800fb20 <_dtoa_r+0x310>
 800fa74:	2301      	movs	r3, #1
 800fa76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	9209      	str	r2, [sp, #36]	; 0x24
 800fa7e:	e00c      	b.n	800fa9a <_dtoa_r+0x28a>
 800fa80:	2301      	movs	r3, #1
 800fa82:	e7f3      	b.n	800fa6c <_dtoa_r+0x25c>
 800fa84:	2300      	movs	r3, #0
 800fa86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa88:	9308      	str	r3, [sp, #32]
 800fa8a:	9b00      	ldr	r3, [sp, #0]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	9302      	str	r3, [sp, #8]
 800fa90:	3301      	adds	r3, #1
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	9303      	str	r3, [sp, #12]
 800fa96:	bfb8      	it	lt
 800fa98:	2301      	movlt	r3, #1
 800fa9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	6042      	str	r2, [r0, #4]
 800faa0:	2204      	movs	r2, #4
 800faa2:	f102 0614 	add.w	r6, r2, #20
 800faa6:	429e      	cmp	r6, r3
 800faa8:	6841      	ldr	r1, [r0, #4]
 800faaa:	d93d      	bls.n	800fb28 <_dtoa_r+0x318>
 800faac:	4620      	mov	r0, r4
 800faae:	f000 fca9 	bl	8010404 <_Balloc>
 800fab2:	9001      	str	r0, [sp, #4]
 800fab4:	2800      	cmp	r0, #0
 800fab6:	d13b      	bne.n	800fb30 <_dtoa_r+0x320>
 800fab8:	4b11      	ldr	r3, [pc, #68]	; (800fb00 <_dtoa_r+0x2f0>)
 800faba:	4602      	mov	r2, r0
 800fabc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fac0:	e6c0      	b.n	800f844 <_dtoa_r+0x34>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e7df      	b.n	800fa86 <_dtoa_r+0x276>
 800fac6:	bf00      	nop
 800fac8:	636f4361 	.word	0x636f4361
 800facc:	3fd287a7 	.word	0x3fd287a7
 800fad0:	8b60c8b3 	.word	0x8b60c8b3
 800fad4:	3fc68a28 	.word	0x3fc68a28
 800fad8:	509f79fb 	.word	0x509f79fb
 800fadc:	3fd34413 	.word	0x3fd34413
 800fae0:	0801376d 	.word	0x0801376d
 800fae4:	08013784 	.word	0x08013784
 800fae8:	7ff00000 	.word	0x7ff00000
 800faec:	08013769 	.word	0x08013769
 800faf0:	08013760 	.word	0x08013760
 800faf4:	0801373d 	.word	0x0801373d
 800faf8:	3ff80000 	.word	0x3ff80000
 800fafc:	08013878 	.word	0x08013878
 800fb00:	080137df 	.word	0x080137df
 800fb04:	2501      	movs	r5, #1
 800fb06:	2300      	movs	r3, #0
 800fb08:	9306      	str	r3, [sp, #24]
 800fb0a:	9508      	str	r5, [sp, #32]
 800fb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb14:	2200      	movs	r2, #0
 800fb16:	2312      	movs	r3, #18
 800fb18:	e7b0      	b.n	800fa7c <_dtoa_r+0x26c>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	9308      	str	r3, [sp, #32]
 800fb1e:	e7f5      	b.n	800fb0c <_dtoa_r+0x2fc>
 800fb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb26:	e7b8      	b.n	800fa9a <_dtoa_r+0x28a>
 800fb28:	3101      	adds	r1, #1
 800fb2a:	6041      	str	r1, [r0, #4]
 800fb2c:	0052      	lsls	r2, r2, #1
 800fb2e:	e7b8      	b.n	800faa2 <_dtoa_r+0x292>
 800fb30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb32:	9a01      	ldr	r2, [sp, #4]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	9b03      	ldr	r3, [sp, #12]
 800fb38:	2b0e      	cmp	r3, #14
 800fb3a:	f200 809d 	bhi.w	800fc78 <_dtoa_r+0x468>
 800fb3e:	2d00      	cmp	r5, #0
 800fb40:	f000 809a 	beq.w	800fc78 <_dtoa_r+0x468>
 800fb44:	9b00      	ldr	r3, [sp, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	dd32      	ble.n	800fbb0 <_dtoa_r+0x3a0>
 800fb4a:	4ab7      	ldr	r2, [pc, #732]	; (800fe28 <_dtoa_r+0x618>)
 800fb4c:	f003 030f 	and.w	r3, r3, #15
 800fb50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fb54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb58:	9b00      	ldr	r3, [sp, #0]
 800fb5a:	05d8      	lsls	r0, r3, #23
 800fb5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fb60:	d516      	bpl.n	800fb90 <_dtoa_r+0x380>
 800fb62:	4bb2      	ldr	r3, [pc, #712]	; (800fe2c <_dtoa_r+0x61c>)
 800fb64:	ec51 0b19 	vmov	r0, r1, d9
 800fb68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fb6c:	f7f0 fe86 	bl	800087c <__aeabi_ddiv>
 800fb70:	f007 070f 	and.w	r7, r7, #15
 800fb74:	4682      	mov	sl, r0
 800fb76:	468b      	mov	fp, r1
 800fb78:	2503      	movs	r5, #3
 800fb7a:	4eac      	ldr	r6, [pc, #688]	; (800fe2c <_dtoa_r+0x61c>)
 800fb7c:	b957      	cbnz	r7, 800fb94 <_dtoa_r+0x384>
 800fb7e:	4642      	mov	r2, r8
 800fb80:	464b      	mov	r3, r9
 800fb82:	4650      	mov	r0, sl
 800fb84:	4659      	mov	r1, fp
 800fb86:	f7f0 fe79 	bl	800087c <__aeabi_ddiv>
 800fb8a:	4682      	mov	sl, r0
 800fb8c:	468b      	mov	fp, r1
 800fb8e:	e028      	b.n	800fbe2 <_dtoa_r+0x3d2>
 800fb90:	2502      	movs	r5, #2
 800fb92:	e7f2      	b.n	800fb7a <_dtoa_r+0x36a>
 800fb94:	07f9      	lsls	r1, r7, #31
 800fb96:	d508      	bpl.n	800fbaa <_dtoa_r+0x39a>
 800fb98:	4640      	mov	r0, r8
 800fb9a:	4649      	mov	r1, r9
 800fb9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fba0:	f7f0 fd42 	bl	8000628 <__aeabi_dmul>
 800fba4:	3501      	adds	r5, #1
 800fba6:	4680      	mov	r8, r0
 800fba8:	4689      	mov	r9, r1
 800fbaa:	107f      	asrs	r7, r7, #1
 800fbac:	3608      	adds	r6, #8
 800fbae:	e7e5      	b.n	800fb7c <_dtoa_r+0x36c>
 800fbb0:	f000 809b 	beq.w	800fcea <_dtoa_r+0x4da>
 800fbb4:	9b00      	ldr	r3, [sp, #0]
 800fbb6:	4f9d      	ldr	r7, [pc, #628]	; (800fe2c <_dtoa_r+0x61c>)
 800fbb8:	425e      	negs	r6, r3
 800fbba:	4b9b      	ldr	r3, [pc, #620]	; (800fe28 <_dtoa_r+0x618>)
 800fbbc:	f006 020f 	and.w	r2, r6, #15
 800fbc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc8:	ec51 0b19 	vmov	r0, r1, d9
 800fbcc:	f7f0 fd2c 	bl	8000628 <__aeabi_dmul>
 800fbd0:	1136      	asrs	r6, r6, #4
 800fbd2:	4682      	mov	sl, r0
 800fbd4:	468b      	mov	fp, r1
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	2502      	movs	r5, #2
 800fbda:	2e00      	cmp	r6, #0
 800fbdc:	d17a      	bne.n	800fcd4 <_dtoa_r+0x4c4>
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1d3      	bne.n	800fb8a <_dtoa_r+0x37a>
 800fbe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f000 8082 	beq.w	800fcee <_dtoa_r+0x4de>
 800fbea:	4b91      	ldr	r3, [pc, #580]	; (800fe30 <_dtoa_r+0x620>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	4650      	mov	r0, sl
 800fbf0:	4659      	mov	r1, fp
 800fbf2:	f7f0 ff8b 	bl	8000b0c <__aeabi_dcmplt>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d079      	beq.n	800fcee <_dtoa_r+0x4de>
 800fbfa:	9b03      	ldr	r3, [sp, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d076      	beq.n	800fcee <_dtoa_r+0x4de>
 800fc00:	9b02      	ldr	r3, [sp, #8]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	dd36      	ble.n	800fc74 <_dtoa_r+0x464>
 800fc06:	9b00      	ldr	r3, [sp, #0]
 800fc08:	4650      	mov	r0, sl
 800fc0a:	4659      	mov	r1, fp
 800fc0c:	1e5f      	subs	r7, r3, #1
 800fc0e:	2200      	movs	r2, #0
 800fc10:	4b88      	ldr	r3, [pc, #544]	; (800fe34 <_dtoa_r+0x624>)
 800fc12:	f7f0 fd09 	bl	8000628 <__aeabi_dmul>
 800fc16:	9e02      	ldr	r6, [sp, #8]
 800fc18:	4682      	mov	sl, r0
 800fc1a:	468b      	mov	fp, r1
 800fc1c:	3501      	adds	r5, #1
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f7f0 fc98 	bl	8000554 <__aeabi_i2d>
 800fc24:	4652      	mov	r2, sl
 800fc26:	465b      	mov	r3, fp
 800fc28:	f7f0 fcfe 	bl	8000628 <__aeabi_dmul>
 800fc2c:	4b82      	ldr	r3, [pc, #520]	; (800fe38 <_dtoa_r+0x628>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f7f0 fb44 	bl	80002bc <__adddf3>
 800fc34:	46d0      	mov	r8, sl
 800fc36:	46d9      	mov	r9, fp
 800fc38:	4682      	mov	sl, r0
 800fc3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fc3e:	2e00      	cmp	r6, #0
 800fc40:	d158      	bne.n	800fcf4 <_dtoa_r+0x4e4>
 800fc42:	4b7e      	ldr	r3, [pc, #504]	; (800fe3c <_dtoa_r+0x62c>)
 800fc44:	2200      	movs	r2, #0
 800fc46:	4640      	mov	r0, r8
 800fc48:	4649      	mov	r1, r9
 800fc4a:	f7f0 fb35 	bl	80002b8 <__aeabi_dsub>
 800fc4e:	4652      	mov	r2, sl
 800fc50:	465b      	mov	r3, fp
 800fc52:	4680      	mov	r8, r0
 800fc54:	4689      	mov	r9, r1
 800fc56:	f7f0 ff77 	bl	8000b48 <__aeabi_dcmpgt>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	f040 8295 	bne.w	801018a <_dtoa_r+0x97a>
 800fc60:	4652      	mov	r2, sl
 800fc62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 ff4f 	bl	8000b0c <__aeabi_dcmplt>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f040 8289 	bne.w	8010186 <_dtoa_r+0x976>
 800fc74:	ec5b ab19 	vmov	sl, fp, d9
 800fc78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f2c0 8148 	blt.w	800ff10 <_dtoa_r+0x700>
 800fc80:	9a00      	ldr	r2, [sp, #0]
 800fc82:	2a0e      	cmp	r2, #14
 800fc84:	f300 8144 	bgt.w	800ff10 <_dtoa_r+0x700>
 800fc88:	4b67      	ldr	r3, [pc, #412]	; (800fe28 <_dtoa_r+0x618>)
 800fc8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f280 80d5 	bge.w	800fe44 <_dtoa_r+0x634>
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f300 80d1 	bgt.w	800fe44 <_dtoa_r+0x634>
 800fca2:	f040 826f 	bne.w	8010184 <_dtoa_r+0x974>
 800fca6:	4b65      	ldr	r3, [pc, #404]	; (800fe3c <_dtoa_r+0x62c>)
 800fca8:	2200      	movs	r2, #0
 800fcaa:	4640      	mov	r0, r8
 800fcac:	4649      	mov	r1, r9
 800fcae:	f7f0 fcbb 	bl	8000628 <__aeabi_dmul>
 800fcb2:	4652      	mov	r2, sl
 800fcb4:	465b      	mov	r3, fp
 800fcb6:	f7f0 ff3d 	bl	8000b34 <__aeabi_dcmpge>
 800fcba:	9e03      	ldr	r6, [sp, #12]
 800fcbc:	4637      	mov	r7, r6
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	f040 8245 	bne.w	801014e <_dtoa_r+0x93e>
 800fcc4:	9d01      	ldr	r5, [sp, #4]
 800fcc6:	2331      	movs	r3, #49	; 0x31
 800fcc8:	f805 3b01 	strb.w	r3, [r5], #1
 800fccc:	9b00      	ldr	r3, [sp, #0]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	9300      	str	r3, [sp, #0]
 800fcd2:	e240      	b.n	8010156 <_dtoa_r+0x946>
 800fcd4:	07f2      	lsls	r2, r6, #31
 800fcd6:	d505      	bpl.n	800fce4 <_dtoa_r+0x4d4>
 800fcd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcdc:	f7f0 fca4 	bl	8000628 <__aeabi_dmul>
 800fce0:	3501      	adds	r5, #1
 800fce2:	2301      	movs	r3, #1
 800fce4:	1076      	asrs	r6, r6, #1
 800fce6:	3708      	adds	r7, #8
 800fce8:	e777      	b.n	800fbda <_dtoa_r+0x3ca>
 800fcea:	2502      	movs	r5, #2
 800fcec:	e779      	b.n	800fbe2 <_dtoa_r+0x3d2>
 800fcee:	9f00      	ldr	r7, [sp, #0]
 800fcf0:	9e03      	ldr	r6, [sp, #12]
 800fcf2:	e794      	b.n	800fc1e <_dtoa_r+0x40e>
 800fcf4:	9901      	ldr	r1, [sp, #4]
 800fcf6:	4b4c      	ldr	r3, [pc, #304]	; (800fe28 <_dtoa_r+0x618>)
 800fcf8:	4431      	add	r1, r6
 800fcfa:	910d      	str	r1, [sp, #52]	; 0x34
 800fcfc:	9908      	ldr	r1, [sp, #32]
 800fcfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fd02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd06:	2900      	cmp	r1, #0
 800fd08:	d043      	beq.n	800fd92 <_dtoa_r+0x582>
 800fd0a:	494d      	ldr	r1, [pc, #308]	; (800fe40 <_dtoa_r+0x630>)
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	f7f0 fdb5 	bl	800087c <__aeabi_ddiv>
 800fd12:	4652      	mov	r2, sl
 800fd14:	465b      	mov	r3, fp
 800fd16:	f7f0 facf 	bl	80002b8 <__aeabi_dsub>
 800fd1a:	9d01      	ldr	r5, [sp, #4]
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	468b      	mov	fp, r1
 800fd20:	4649      	mov	r1, r9
 800fd22:	4640      	mov	r0, r8
 800fd24:	f7f0 ff30 	bl	8000b88 <__aeabi_d2iz>
 800fd28:	4606      	mov	r6, r0
 800fd2a:	f7f0 fc13 	bl	8000554 <__aeabi_i2d>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	460b      	mov	r3, r1
 800fd32:	4640      	mov	r0, r8
 800fd34:	4649      	mov	r1, r9
 800fd36:	f7f0 fabf 	bl	80002b8 <__aeabi_dsub>
 800fd3a:	3630      	adds	r6, #48	; 0x30
 800fd3c:	f805 6b01 	strb.w	r6, [r5], #1
 800fd40:	4652      	mov	r2, sl
 800fd42:	465b      	mov	r3, fp
 800fd44:	4680      	mov	r8, r0
 800fd46:	4689      	mov	r9, r1
 800fd48:	f7f0 fee0 	bl	8000b0c <__aeabi_dcmplt>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d163      	bne.n	800fe18 <_dtoa_r+0x608>
 800fd50:	4642      	mov	r2, r8
 800fd52:	464b      	mov	r3, r9
 800fd54:	4936      	ldr	r1, [pc, #216]	; (800fe30 <_dtoa_r+0x620>)
 800fd56:	2000      	movs	r0, #0
 800fd58:	f7f0 faae 	bl	80002b8 <__aeabi_dsub>
 800fd5c:	4652      	mov	r2, sl
 800fd5e:	465b      	mov	r3, fp
 800fd60:	f7f0 fed4 	bl	8000b0c <__aeabi_dcmplt>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	f040 80b5 	bne.w	800fed4 <_dtoa_r+0x6c4>
 800fd6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd6c:	429d      	cmp	r5, r3
 800fd6e:	d081      	beq.n	800fc74 <_dtoa_r+0x464>
 800fd70:	4b30      	ldr	r3, [pc, #192]	; (800fe34 <_dtoa_r+0x624>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	4650      	mov	r0, sl
 800fd76:	4659      	mov	r1, fp
 800fd78:	f7f0 fc56 	bl	8000628 <__aeabi_dmul>
 800fd7c:	4b2d      	ldr	r3, [pc, #180]	; (800fe34 <_dtoa_r+0x624>)
 800fd7e:	4682      	mov	sl, r0
 800fd80:	468b      	mov	fp, r1
 800fd82:	4640      	mov	r0, r8
 800fd84:	4649      	mov	r1, r9
 800fd86:	2200      	movs	r2, #0
 800fd88:	f7f0 fc4e 	bl	8000628 <__aeabi_dmul>
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	4689      	mov	r9, r1
 800fd90:	e7c6      	b.n	800fd20 <_dtoa_r+0x510>
 800fd92:	4650      	mov	r0, sl
 800fd94:	4659      	mov	r1, fp
 800fd96:	f7f0 fc47 	bl	8000628 <__aeabi_dmul>
 800fd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd9c:	9d01      	ldr	r5, [sp, #4]
 800fd9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fda0:	4682      	mov	sl, r0
 800fda2:	468b      	mov	fp, r1
 800fda4:	4649      	mov	r1, r9
 800fda6:	4640      	mov	r0, r8
 800fda8:	f7f0 feee 	bl	8000b88 <__aeabi_d2iz>
 800fdac:	4606      	mov	r6, r0
 800fdae:	f7f0 fbd1 	bl	8000554 <__aeabi_i2d>
 800fdb2:	3630      	adds	r6, #48	; 0x30
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	4640      	mov	r0, r8
 800fdba:	4649      	mov	r1, r9
 800fdbc:	f7f0 fa7c 	bl	80002b8 <__aeabi_dsub>
 800fdc0:	f805 6b01 	strb.w	r6, [r5], #1
 800fdc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdc6:	429d      	cmp	r5, r3
 800fdc8:	4680      	mov	r8, r0
 800fdca:	4689      	mov	r9, r1
 800fdcc:	f04f 0200 	mov.w	r2, #0
 800fdd0:	d124      	bne.n	800fe1c <_dtoa_r+0x60c>
 800fdd2:	4b1b      	ldr	r3, [pc, #108]	; (800fe40 <_dtoa_r+0x630>)
 800fdd4:	4650      	mov	r0, sl
 800fdd6:	4659      	mov	r1, fp
 800fdd8:	f7f0 fa70 	bl	80002bc <__adddf3>
 800fddc:	4602      	mov	r2, r0
 800fdde:	460b      	mov	r3, r1
 800fde0:	4640      	mov	r0, r8
 800fde2:	4649      	mov	r1, r9
 800fde4:	f7f0 feb0 	bl	8000b48 <__aeabi_dcmpgt>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d173      	bne.n	800fed4 <_dtoa_r+0x6c4>
 800fdec:	4652      	mov	r2, sl
 800fdee:	465b      	mov	r3, fp
 800fdf0:	4913      	ldr	r1, [pc, #76]	; (800fe40 <_dtoa_r+0x630>)
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f7f0 fa60 	bl	80002b8 <__aeabi_dsub>
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	4649      	mov	r1, r9
 800fe00:	f7f0 fe84 	bl	8000b0c <__aeabi_dcmplt>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	f43f af35 	beq.w	800fc74 <_dtoa_r+0x464>
 800fe0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fe0c:	1e6b      	subs	r3, r5, #1
 800fe0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fe14:	2b30      	cmp	r3, #48	; 0x30
 800fe16:	d0f8      	beq.n	800fe0a <_dtoa_r+0x5fa>
 800fe18:	9700      	str	r7, [sp, #0]
 800fe1a:	e049      	b.n	800feb0 <_dtoa_r+0x6a0>
 800fe1c:	4b05      	ldr	r3, [pc, #20]	; (800fe34 <_dtoa_r+0x624>)
 800fe1e:	f7f0 fc03 	bl	8000628 <__aeabi_dmul>
 800fe22:	4680      	mov	r8, r0
 800fe24:	4689      	mov	r9, r1
 800fe26:	e7bd      	b.n	800fda4 <_dtoa_r+0x594>
 800fe28:	08013878 	.word	0x08013878
 800fe2c:	08013850 	.word	0x08013850
 800fe30:	3ff00000 	.word	0x3ff00000
 800fe34:	40240000 	.word	0x40240000
 800fe38:	401c0000 	.word	0x401c0000
 800fe3c:	40140000 	.word	0x40140000
 800fe40:	3fe00000 	.word	0x3fe00000
 800fe44:	9d01      	ldr	r5, [sp, #4]
 800fe46:	4656      	mov	r6, sl
 800fe48:	465f      	mov	r7, fp
 800fe4a:	4642      	mov	r2, r8
 800fe4c:	464b      	mov	r3, r9
 800fe4e:	4630      	mov	r0, r6
 800fe50:	4639      	mov	r1, r7
 800fe52:	f7f0 fd13 	bl	800087c <__aeabi_ddiv>
 800fe56:	f7f0 fe97 	bl	8000b88 <__aeabi_d2iz>
 800fe5a:	4682      	mov	sl, r0
 800fe5c:	f7f0 fb7a 	bl	8000554 <__aeabi_i2d>
 800fe60:	4642      	mov	r2, r8
 800fe62:	464b      	mov	r3, r9
 800fe64:	f7f0 fbe0 	bl	8000628 <__aeabi_dmul>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	4639      	mov	r1, r7
 800fe70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fe74:	f7f0 fa20 	bl	80002b8 <__aeabi_dsub>
 800fe78:	f805 6b01 	strb.w	r6, [r5], #1
 800fe7c:	9e01      	ldr	r6, [sp, #4]
 800fe7e:	9f03      	ldr	r7, [sp, #12]
 800fe80:	1bae      	subs	r6, r5, r6
 800fe82:	42b7      	cmp	r7, r6
 800fe84:	4602      	mov	r2, r0
 800fe86:	460b      	mov	r3, r1
 800fe88:	d135      	bne.n	800fef6 <_dtoa_r+0x6e6>
 800fe8a:	f7f0 fa17 	bl	80002bc <__adddf3>
 800fe8e:	4642      	mov	r2, r8
 800fe90:	464b      	mov	r3, r9
 800fe92:	4606      	mov	r6, r0
 800fe94:	460f      	mov	r7, r1
 800fe96:	f7f0 fe57 	bl	8000b48 <__aeabi_dcmpgt>
 800fe9a:	b9d0      	cbnz	r0, 800fed2 <_dtoa_r+0x6c2>
 800fe9c:	4642      	mov	r2, r8
 800fe9e:	464b      	mov	r3, r9
 800fea0:	4630      	mov	r0, r6
 800fea2:	4639      	mov	r1, r7
 800fea4:	f7f0 fe28 	bl	8000af8 <__aeabi_dcmpeq>
 800fea8:	b110      	cbz	r0, 800feb0 <_dtoa_r+0x6a0>
 800feaa:	f01a 0f01 	tst.w	sl, #1
 800feae:	d110      	bne.n	800fed2 <_dtoa_r+0x6c2>
 800feb0:	4620      	mov	r0, r4
 800feb2:	ee18 1a10 	vmov	r1, s16
 800feb6:	f000 fae5 	bl	8010484 <_Bfree>
 800feba:	2300      	movs	r3, #0
 800febc:	9800      	ldr	r0, [sp, #0]
 800febe:	702b      	strb	r3, [r5, #0]
 800fec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fec2:	3001      	adds	r0, #1
 800fec4:	6018      	str	r0, [r3, #0]
 800fec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f43f acf1 	beq.w	800f8b0 <_dtoa_r+0xa0>
 800fece:	601d      	str	r5, [r3, #0]
 800fed0:	e4ee      	b.n	800f8b0 <_dtoa_r+0xa0>
 800fed2:	9f00      	ldr	r7, [sp, #0]
 800fed4:	462b      	mov	r3, r5
 800fed6:	461d      	mov	r5, r3
 800fed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fedc:	2a39      	cmp	r2, #57	; 0x39
 800fede:	d106      	bne.n	800feee <_dtoa_r+0x6de>
 800fee0:	9a01      	ldr	r2, [sp, #4]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d1f7      	bne.n	800fed6 <_dtoa_r+0x6c6>
 800fee6:	9901      	ldr	r1, [sp, #4]
 800fee8:	2230      	movs	r2, #48	; 0x30
 800feea:	3701      	adds	r7, #1
 800feec:	700a      	strb	r2, [r1, #0]
 800feee:	781a      	ldrb	r2, [r3, #0]
 800fef0:	3201      	adds	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e790      	b.n	800fe18 <_dtoa_r+0x608>
 800fef6:	4ba6      	ldr	r3, [pc, #664]	; (8010190 <_dtoa_r+0x980>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	f7f0 fb95 	bl	8000628 <__aeabi_dmul>
 800fefe:	2200      	movs	r2, #0
 800ff00:	2300      	movs	r3, #0
 800ff02:	4606      	mov	r6, r0
 800ff04:	460f      	mov	r7, r1
 800ff06:	f7f0 fdf7 	bl	8000af8 <__aeabi_dcmpeq>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d09d      	beq.n	800fe4a <_dtoa_r+0x63a>
 800ff0e:	e7cf      	b.n	800feb0 <_dtoa_r+0x6a0>
 800ff10:	9a08      	ldr	r2, [sp, #32]
 800ff12:	2a00      	cmp	r2, #0
 800ff14:	f000 80d7 	beq.w	80100c6 <_dtoa_r+0x8b6>
 800ff18:	9a06      	ldr	r2, [sp, #24]
 800ff1a:	2a01      	cmp	r2, #1
 800ff1c:	f300 80ba 	bgt.w	8010094 <_dtoa_r+0x884>
 800ff20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff22:	2a00      	cmp	r2, #0
 800ff24:	f000 80b2 	beq.w	801008c <_dtoa_r+0x87c>
 800ff28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ff2c:	9e07      	ldr	r6, [sp, #28]
 800ff2e:	9d04      	ldr	r5, [sp, #16]
 800ff30:	9a04      	ldr	r2, [sp, #16]
 800ff32:	441a      	add	r2, r3
 800ff34:	9204      	str	r2, [sp, #16]
 800ff36:	9a05      	ldr	r2, [sp, #20]
 800ff38:	2101      	movs	r1, #1
 800ff3a:	441a      	add	r2, r3
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	9205      	str	r2, [sp, #20]
 800ff40:	f000 fb58 	bl	80105f4 <__i2b>
 800ff44:	4607      	mov	r7, r0
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	dd0c      	ble.n	800ff64 <_dtoa_r+0x754>
 800ff4a:	9b05      	ldr	r3, [sp, #20]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	dd09      	ble.n	800ff64 <_dtoa_r+0x754>
 800ff50:	42ab      	cmp	r3, r5
 800ff52:	9a04      	ldr	r2, [sp, #16]
 800ff54:	bfa8      	it	ge
 800ff56:	462b      	movge	r3, r5
 800ff58:	1ad2      	subs	r2, r2, r3
 800ff5a:	9204      	str	r2, [sp, #16]
 800ff5c:	9a05      	ldr	r2, [sp, #20]
 800ff5e:	1aed      	subs	r5, r5, r3
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	9305      	str	r3, [sp, #20]
 800ff64:	9b07      	ldr	r3, [sp, #28]
 800ff66:	b31b      	cbz	r3, 800ffb0 <_dtoa_r+0x7a0>
 800ff68:	9b08      	ldr	r3, [sp, #32]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	f000 80af 	beq.w	80100ce <_dtoa_r+0x8be>
 800ff70:	2e00      	cmp	r6, #0
 800ff72:	dd13      	ble.n	800ff9c <_dtoa_r+0x78c>
 800ff74:	4639      	mov	r1, r7
 800ff76:	4632      	mov	r2, r6
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 fbfb 	bl	8010774 <__pow5mult>
 800ff7e:	ee18 2a10 	vmov	r2, s16
 800ff82:	4601      	mov	r1, r0
 800ff84:	4607      	mov	r7, r0
 800ff86:	4620      	mov	r0, r4
 800ff88:	f000 fb4a 	bl	8010620 <__multiply>
 800ff8c:	ee18 1a10 	vmov	r1, s16
 800ff90:	4680      	mov	r8, r0
 800ff92:	4620      	mov	r0, r4
 800ff94:	f000 fa76 	bl	8010484 <_Bfree>
 800ff98:	ee08 8a10 	vmov	s16, r8
 800ff9c:	9b07      	ldr	r3, [sp, #28]
 800ff9e:	1b9a      	subs	r2, r3, r6
 800ffa0:	d006      	beq.n	800ffb0 <_dtoa_r+0x7a0>
 800ffa2:	ee18 1a10 	vmov	r1, s16
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f000 fbe4 	bl	8010774 <__pow5mult>
 800ffac:	ee08 0a10 	vmov	s16, r0
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f000 fb1e 	bl	80105f4 <__i2b>
 800ffb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	4606      	mov	r6, r0
 800ffbe:	f340 8088 	ble.w	80100d2 <_dtoa_r+0x8c2>
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	4601      	mov	r1, r0
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f000 fbd4 	bl	8010774 <__pow5mult>
 800ffcc:	9b06      	ldr	r3, [sp, #24]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	4606      	mov	r6, r0
 800ffd2:	f340 8081 	ble.w	80100d8 <_dtoa_r+0x8c8>
 800ffd6:	f04f 0800 	mov.w	r8, #0
 800ffda:	6933      	ldr	r3, [r6, #16]
 800ffdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ffe0:	6918      	ldr	r0, [r3, #16]
 800ffe2:	f000 fab7 	bl	8010554 <__hi0bits>
 800ffe6:	f1c0 0020 	rsb	r0, r0, #32
 800ffea:	9b05      	ldr	r3, [sp, #20]
 800ffec:	4418      	add	r0, r3
 800ffee:	f010 001f 	ands.w	r0, r0, #31
 800fff2:	f000 8092 	beq.w	801011a <_dtoa_r+0x90a>
 800fff6:	f1c0 0320 	rsb	r3, r0, #32
 800fffa:	2b04      	cmp	r3, #4
 800fffc:	f340 808a 	ble.w	8010114 <_dtoa_r+0x904>
 8010000:	f1c0 001c 	rsb	r0, r0, #28
 8010004:	9b04      	ldr	r3, [sp, #16]
 8010006:	4403      	add	r3, r0
 8010008:	9304      	str	r3, [sp, #16]
 801000a:	9b05      	ldr	r3, [sp, #20]
 801000c:	4403      	add	r3, r0
 801000e:	4405      	add	r5, r0
 8010010:	9305      	str	r3, [sp, #20]
 8010012:	9b04      	ldr	r3, [sp, #16]
 8010014:	2b00      	cmp	r3, #0
 8010016:	dd07      	ble.n	8010028 <_dtoa_r+0x818>
 8010018:	ee18 1a10 	vmov	r1, s16
 801001c:	461a      	mov	r2, r3
 801001e:	4620      	mov	r0, r4
 8010020:	f000 fc02 	bl	8010828 <__lshift>
 8010024:	ee08 0a10 	vmov	s16, r0
 8010028:	9b05      	ldr	r3, [sp, #20]
 801002a:	2b00      	cmp	r3, #0
 801002c:	dd05      	ble.n	801003a <_dtoa_r+0x82a>
 801002e:	4631      	mov	r1, r6
 8010030:	461a      	mov	r2, r3
 8010032:	4620      	mov	r0, r4
 8010034:	f000 fbf8 	bl	8010828 <__lshift>
 8010038:	4606      	mov	r6, r0
 801003a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801003c:	2b00      	cmp	r3, #0
 801003e:	d06e      	beq.n	801011e <_dtoa_r+0x90e>
 8010040:	ee18 0a10 	vmov	r0, s16
 8010044:	4631      	mov	r1, r6
 8010046:	f000 fc5f 	bl	8010908 <__mcmp>
 801004a:	2800      	cmp	r0, #0
 801004c:	da67      	bge.n	801011e <_dtoa_r+0x90e>
 801004e:	9b00      	ldr	r3, [sp, #0]
 8010050:	3b01      	subs	r3, #1
 8010052:	ee18 1a10 	vmov	r1, s16
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	220a      	movs	r2, #10
 801005a:	2300      	movs	r3, #0
 801005c:	4620      	mov	r0, r4
 801005e:	f000 fa33 	bl	80104c8 <__multadd>
 8010062:	9b08      	ldr	r3, [sp, #32]
 8010064:	ee08 0a10 	vmov	s16, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 81b1 	beq.w	80103d0 <_dtoa_r+0xbc0>
 801006e:	2300      	movs	r3, #0
 8010070:	4639      	mov	r1, r7
 8010072:	220a      	movs	r2, #10
 8010074:	4620      	mov	r0, r4
 8010076:	f000 fa27 	bl	80104c8 <__multadd>
 801007a:	9b02      	ldr	r3, [sp, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	4607      	mov	r7, r0
 8010080:	f300 808e 	bgt.w	80101a0 <_dtoa_r+0x990>
 8010084:	9b06      	ldr	r3, [sp, #24]
 8010086:	2b02      	cmp	r3, #2
 8010088:	dc51      	bgt.n	801012e <_dtoa_r+0x91e>
 801008a:	e089      	b.n	80101a0 <_dtoa_r+0x990>
 801008c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801008e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010092:	e74b      	b.n	800ff2c <_dtoa_r+0x71c>
 8010094:	9b03      	ldr	r3, [sp, #12]
 8010096:	1e5e      	subs	r6, r3, #1
 8010098:	9b07      	ldr	r3, [sp, #28]
 801009a:	42b3      	cmp	r3, r6
 801009c:	bfbf      	itttt	lt
 801009e:	9b07      	ldrlt	r3, [sp, #28]
 80100a0:	9607      	strlt	r6, [sp, #28]
 80100a2:	1af2      	sublt	r2, r6, r3
 80100a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80100a6:	bfb6      	itet	lt
 80100a8:	189b      	addlt	r3, r3, r2
 80100aa:	1b9e      	subge	r6, r3, r6
 80100ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	bfb8      	it	lt
 80100b2:	2600      	movlt	r6, #0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	bfb7      	itett	lt
 80100b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80100bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80100c0:	1a9d      	sublt	r5, r3, r2
 80100c2:	2300      	movlt	r3, #0
 80100c4:	e734      	b.n	800ff30 <_dtoa_r+0x720>
 80100c6:	9e07      	ldr	r6, [sp, #28]
 80100c8:	9d04      	ldr	r5, [sp, #16]
 80100ca:	9f08      	ldr	r7, [sp, #32]
 80100cc:	e73b      	b.n	800ff46 <_dtoa_r+0x736>
 80100ce:	9a07      	ldr	r2, [sp, #28]
 80100d0:	e767      	b.n	800ffa2 <_dtoa_r+0x792>
 80100d2:	9b06      	ldr	r3, [sp, #24]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	dc18      	bgt.n	801010a <_dtoa_r+0x8fa>
 80100d8:	f1ba 0f00 	cmp.w	sl, #0
 80100dc:	d115      	bne.n	801010a <_dtoa_r+0x8fa>
 80100de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100e2:	b993      	cbnz	r3, 801010a <_dtoa_r+0x8fa>
 80100e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100e8:	0d1b      	lsrs	r3, r3, #20
 80100ea:	051b      	lsls	r3, r3, #20
 80100ec:	b183      	cbz	r3, 8010110 <_dtoa_r+0x900>
 80100ee:	9b04      	ldr	r3, [sp, #16]
 80100f0:	3301      	adds	r3, #1
 80100f2:	9304      	str	r3, [sp, #16]
 80100f4:	9b05      	ldr	r3, [sp, #20]
 80100f6:	3301      	adds	r3, #1
 80100f8:	9305      	str	r3, [sp, #20]
 80100fa:	f04f 0801 	mov.w	r8, #1
 80100fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010100:	2b00      	cmp	r3, #0
 8010102:	f47f af6a 	bne.w	800ffda <_dtoa_r+0x7ca>
 8010106:	2001      	movs	r0, #1
 8010108:	e76f      	b.n	800ffea <_dtoa_r+0x7da>
 801010a:	f04f 0800 	mov.w	r8, #0
 801010e:	e7f6      	b.n	80100fe <_dtoa_r+0x8ee>
 8010110:	4698      	mov	r8, r3
 8010112:	e7f4      	b.n	80100fe <_dtoa_r+0x8ee>
 8010114:	f43f af7d 	beq.w	8010012 <_dtoa_r+0x802>
 8010118:	4618      	mov	r0, r3
 801011a:	301c      	adds	r0, #28
 801011c:	e772      	b.n	8010004 <_dtoa_r+0x7f4>
 801011e:	9b03      	ldr	r3, [sp, #12]
 8010120:	2b00      	cmp	r3, #0
 8010122:	dc37      	bgt.n	8010194 <_dtoa_r+0x984>
 8010124:	9b06      	ldr	r3, [sp, #24]
 8010126:	2b02      	cmp	r3, #2
 8010128:	dd34      	ble.n	8010194 <_dtoa_r+0x984>
 801012a:	9b03      	ldr	r3, [sp, #12]
 801012c:	9302      	str	r3, [sp, #8]
 801012e:	9b02      	ldr	r3, [sp, #8]
 8010130:	b96b      	cbnz	r3, 801014e <_dtoa_r+0x93e>
 8010132:	4631      	mov	r1, r6
 8010134:	2205      	movs	r2, #5
 8010136:	4620      	mov	r0, r4
 8010138:	f000 f9c6 	bl	80104c8 <__multadd>
 801013c:	4601      	mov	r1, r0
 801013e:	4606      	mov	r6, r0
 8010140:	ee18 0a10 	vmov	r0, s16
 8010144:	f000 fbe0 	bl	8010908 <__mcmp>
 8010148:	2800      	cmp	r0, #0
 801014a:	f73f adbb 	bgt.w	800fcc4 <_dtoa_r+0x4b4>
 801014e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010150:	9d01      	ldr	r5, [sp, #4]
 8010152:	43db      	mvns	r3, r3
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	f04f 0800 	mov.w	r8, #0
 801015a:	4631      	mov	r1, r6
 801015c:	4620      	mov	r0, r4
 801015e:	f000 f991 	bl	8010484 <_Bfree>
 8010162:	2f00      	cmp	r7, #0
 8010164:	f43f aea4 	beq.w	800feb0 <_dtoa_r+0x6a0>
 8010168:	f1b8 0f00 	cmp.w	r8, #0
 801016c:	d005      	beq.n	801017a <_dtoa_r+0x96a>
 801016e:	45b8      	cmp	r8, r7
 8010170:	d003      	beq.n	801017a <_dtoa_r+0x96a>
 8010172:	4641      	mov	r1, r8
 8010174:	4620      	mov	r0, r4
 8010176:	f000 f985 	bl	8010484 <_Bfree>
 801017a:	4639      	mov	r1, r7
 801017c:	4620      	mov	r0, r4
 801017e:	f000 f981 	bl	8010484 <_Bfree>
 8010182:	e695      	b.n	800feb0 <_dtoa_r+0x6a0>
 8010184:	2600      	movs	r6, #0
 8010186:	4637      	mov	r7, r6
 8010188:	e7e1      	b.n	801014e <_dtoa_r+0x93e>
 801018a:	9700      	str	r7, [sp, #0]
 801018c:	4637      	mov	r7, r6
 801018e:	e599      	b.n	800fcc4 <_dtoa_r+0x4b4>
 8010190:	40240000 	.word	0x40240000
 8010194:	9b08      	ldr	r3, [sp, #32]
 8010196:	2b00      	cmp	r3, #0
 8010198:	f000 80ca 	beq.w	8010330 <_dtoa_r+0xb20>
 801019c:	9b03      	ldr	r3, [sp, #12]
 801019e:	9302      	str	r3, [sp, #8]
 80101a0:	2d00      	cmp	r5, #0
 80101a2:	dd05      	ble.n	80101b0 <_dtoa_r+0x9a0>
 80101a4:	4639      	mov	r1, r7
 80101a6:	462a      	mov	r2, r5
 80101a8:	4620      	mov	r0, r4
 80101aa:	f000 fb3d 	bl	8010828 <__lshift>
 80101ae:	4607      	mov	r7, r0
 80101b0:	f1b8 0f00 	cmp.w	r8, #0
 80101b4:	d05b      	beq.n	801026e <_dtoa_r+0xa5e>
 80101b6:	6879      	ldr	r1, [r7, #4]
 80101b8:	4620      	mov	r0, r4
 80101ba:	f000 f923 	bl	8010404 <_Balloc>
 80101be:	4605      	mov	r5, r0
 80101c0:	b928      	cbnz	r0, 80101ce <_dtoa_r+0x9be>
 80101c2:	4b87      	ldr	r3, [pc, #540]	; (80103e0 <_dtoa_r+0xbd0>)
 80101c4:	4602      	mov	r2, r0
 80101c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80101ca:	f7ff bb3b 	b.w	800f844 <_dtoa_r+0x34>
 80101ce:	693a      	ldr	r2, [r7, #16]
 80101d0:	3202      	adds	r2, #2
 80101d2:	0092      	lsls	r2, r2, #2
 80101d4:	f107 010c 	add.w	r1, r7, #12
 80101d8:	300c      	adds	r0, #12
 80101da:	f7fe fdc9 	bl	800ed70 <memcpy>
 80101de:	2201      	movs	r2, #1
 80101e0:	4629      	mov	r1, r5
 80101e2:	4620      	mov	r0, r4
 80101e4:	f000 fb20 	bl	8010828 <__lshift>
 80101e8:	9b01      	ldr	r3, [sp, #4]
 80101ea:	f103 0901 	add.w	r9, r3, #1
 80101ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80101f2:	4413      	add	r3, r2
 80101f4:	9305      	str	r3, [sp, #20]
 80101f6:	f00a 0301 	and.w	r3, sl, #1
 80101fa:	46b8      	mov	r8, r7
 80101fc:	9304      	str	r3, [sp, #16]
 80101fe:	4607      	mov	r7, r0
 8010200:	4631      	mov	r1, r6
 8010202:	ee18 0a10 	vmov	r0, s16
 8010206:	f7ff fa75 	bl	800f6f4 <quorem>
 801020a:	4641      	mov	r1, r8
 801020c:	9002      	str	r0, [sp, #8]
 801020e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010212:	ee18 0a10 	vmov	r0, s16
 8010216:	f000 fb77 	bl	8010908 <__mcmp>
 801021a:	463a      	mov	r2, r7
 801021c:	9003      	str	r0, [sp, #12]
 801021e:	4631      	mov	r1, r6
 8010220:	4620      	mov	r0, r4
 8010222:	f000 fb8d 	bl	8010940 <__mdiff>
 8010226:	68c2      	ldr	r2, [r0, #12]
 8010228:	f109 3bff 	add.w	fp, r9, #4294967295
 801022c:	4605      	mov	r5, r0
 801022e:	bb02      	cbnz	r2, 8010272 <_dtoa_r+0xa62>
 8010230:	4601      	mov	r1, r0
 8010232:	ee18 0a10 	vmov	r0, s16
 8010236:	f000 fb67 	bl	8010908 <__mcmp>
 801023a:	4602      	mov	r2, r0
 801023c:	4629      	mov	r1, r5
 801023e:	4620      	mov	r0, r4
 8010240:	9207      	str	r2, [sp, #28]
 8010242:	f000 f91f 	bl	8010484 <_Bfree>
 8010246:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801024a:	ea43 0102 	orr.w	r1, r3, r2
 801024e:	9b04      	ldr	r3, [sp, #16]
 8010250:	430b      	orrs	r3, r1
 8010252:	464d      	mov	r5, r9
 8010254:	d10f      	bne.n	8010276 <_dtoa_r+0xa66>
 8010256:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801025a:	d02a      	beq.n	80102b2 <_dtoa_r+0xaa2>
 801025c:	9b03      	ldr	r3, [sp, #12]
 801025e:	2b00      	cmp	r3, #0
 8010260:	dd02      	ble.n	8010268 <_dtoa_r+0xa58>
 8010262:	9b02      	ldr	r3, [sp, #8]
 8010264:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010268:	f88b a000 	strb.w	sl, [fp]
 801026c:	e775      	b.n	801015a <_dtoa_r+0x94a>
 801026e:	4638      	mov	r0, r7
 8010270:	e7ba      	b.n	80101e8 <_dtoa_r+0x9d8>
 8010272:	2201      	movs	r2, #1
 8010274:	e7e2      	b.n	801023c <_dtoa_r+0xa2c>
 8010276:	9b03      	ldr	r3, [sp, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	db04      	blt.n	8010286 <_dtoa_r+0xa76>
 801027c:	9906      	ldr	r1, [sp, #24]
 801027e:	430b      	orrs	r3, r1
 8010280:	9904      	ldr	r1, [sp, #16]
 8010282:	430b      	orrs	r3, r1
 8010284:	d122      	bne.n	80102cc <_dtoa_r+0xabc>
 8010286:	2a00      	cmp	r2, #0
 8010288:	ddee      	ble.n	8010268 <_dtoa_r+0xa58>
 801028a:	ee18 1a10 	vmov	r1, s16
 801028e:	2201      	movs	r2, #1
 8010290:	4620      	mov	r0, r4
 8010292:	f000 fac9 	bl	8010828 <__lshift>
 8010296:	4631      	mov	r1, r6
 8010298:	ee08 0a10 	vmov	s16, r0
 801029c:	f000 fb34 	bl	8010908 <__mcmp>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	dc03      	bgt.n	80102ac <_dtoa_r+0xa9c>
 80102a4:	d1e0      	bne.n	8010268 <_dtoa_r+0xa58>
 80102a6:	f01a 0f01 	tst.w	sl, #1
 80102aa:	d0dd      	beq.n	8010268 <_dtoa_r+0xa58>
 80102ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80102b0:	d1d7      	bne.n	8010262 <_dtoa_r+0xa52>
 80102b2:	2339      	movs	r3, #57	; 0x39
 80102b4:	f88b 3000 	strb.w	r3, [fp]
 80102b8:	462b      	mov	r3, r5
 80102ba:	461d      	mov	r5, r3
 80102bc:	3b01      	subs	r3, #1
 80102be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80102c2:	2a39      	cmp	r2, #57	; 0x39
 80102c4:	d071      	beq.n	80103aa <_dtoa_r+0xb9a>
 80102c6:	3201      	adds	r2, #1
 80102c8:	701a      	strb	r2, [r3, #0]
 80102ca:	e746      	b.n	801015a <_dtoa_r+0x94a>
 80102cc:	2a00      	cmp	r2, #0
 80102ce:	dd07      	ble.n	80102e0 <_dtoa_r+0xad0>
 80102d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80102d4:	d0ed      	beq.n	80102b2 <_dtoa_r+0xaa2>
 80102d6:	f10a 0301 	add.w	r3, sl, #1
 80102da:	f88b 3000 	strb.w	r3, [fp]
 80102de:	e73c      	b.n	801015a <_dtoa_r+0x94a>
 80102e0:	9b05      	ldr	r3, [sp, #20]
 80102e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80102e6:	4599      	cmp	r9, r3
 80102e8:	d047      	beq.n	801037a <_dtoa_r+0xb6a>
 80102ea:	ee18 1a10 	vmov	r1, s16
 80102ee:	2300      	movs	r3, #0
 80102f0:	220a      	movs	r2, #10
 80102f2:	4620      	mov	r0, r4
 80102f4:	f000 f8e8 	bl	80104c8 <__multadd>
 80102f8:	45b8      	cmp	r8, r7
 80102fa:	ee08 0a10 	vmov	s16, r0
 80102fe:	f04f 0300 	mov.w	r3, #0
 8010302:	f04f 020a 	mov.w	r2, #10
 8010306:	4641      	mov	r1, r8
 8010308:	4620      	mov	r0, r4
 801030a:	d106      	bne.n	801031a <_dtoa_r+0xb0a>
 801030c:	f000 f8dc 	bl	80104c8 <__multadd>
 8010310:	4680      	mov	r8, r0
 8010312:	4607      	mov	r7, r0
 8010314:	f109 0901 	add.w	r9, r9, #1
 8010318:	e772      	b.n	8010200 <_dtoa_r+0x9f0>
 801031a:	f000 f8d5 	bl	80104c8 <__multadd>
 801031e:	4639      	mov	r1, r7
 8010320:	4680      	mov	r8, r0
 8010322:	2300      	movs	r3, #0
 8010324:	220a      	movs	r2, #10
 8010326:	4620      	mov	r0, r4
 8010328:	f000 f8ce 	bl	80104c8 <__multadd>
 801032c:	4607      	mov	r7, r0
 801032e:	e7f1      	b.n	8010314 <_dtoa_r+0xb04>
 8010330:	9b03      	ldr	r3, [sp, #12]
 8010332:	9302      	str	r3, [sp, #8]
 8010334:	9d01      	ldr	r5, [sp, #4]
 8010336:	ee18 0a10 	vmov	r0, s16
 801033a:	4631      	mov	r1, r6
 801033c:	f7ff f9da 	bl	800f6f4 <quorem>
 8010340:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010344:	9b01      	ldr	r3, [sp, #4]
 8010346:	f805 ab01 	strb.w	sl, [r5], #1
 801034a:	1aea      	subs	r2, r5, r3
 801034c:	9b02      	ldr	r3, [sp, #8]
 801034e:	4293      	cmp	r3, r2
 8010350:	dd09      	ble.n	8010366 <_dtoa_r+0xb56>
 8010352:	ee18 1a10 	vmov	r1, s16
 8010356:	2300      	movs	r3, #0
 8010358:	220a      	movs	r2, #10
 801035a:	4620      	mov	r0, r4
 801035c:	f000 f8b4 	bl	80104c8 <__multadd>
 8010360:	ee08 0a10 	vmov	s16, r0
 8010364:	e7e7      	b.n	8010336 <_dtoa_r+0xb26>
 8010366:	9b02      	ldr	r3, [sp, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	bfc8      	it	gt
 801036c:	461d      	movgt	r5, r3
 801036e:	9b01      	ldr	r3, [sp, #4]
 8010370:	bfd8      	it	le
 8010372:	2501      	movle	r5, #1
 8010374:	441d      	add	r5, r3
 8010376:	f04f 0800 	mov.w	r8, #0
 801037a:	ee18 1a10 	vmov	r1, s16
 801037e:	2201      	movs	r2, #1
 8010380:	4620      	mov	r0, r4
 8010382:	f000 fa51 	bl	8010828 <__lshift>
 8010386:	4631      	mov	r1, r6
 8010388:	ee08 0a10 	vmov	s16, r0
 801038c:	f000 fabc 	bl	8010908 <__mcmp>
 8010390:	2800      	cmp	r0, #0
 8010392:	dc91      	bgt.n	80102b8 <_dtoa_r+0xaa8>
 8010394:	d102      	bne.n	801039c <_dtoa_r+0xb8c>
 8010396:	f01a 0f01 	tst.w	sl, #1
 801039a:	d18d      	bne.n	80102b8 <_dtoa_r+0xaa8>
 801039c:	462b      	mov	r3, r5
 801039e:	461d      	mov	r5, r3
 80103a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103a4:	2a30      	cmp	r2, #48	; 0x30
 80103a6:	d0fa      	beq.n	801039e <_dtoa_r+0xb8e>
 80103a8:	e6d7      	b.n	801015a <_dtoa_r+0x94a>
 80103aa:	9a01      	ldr	r2, [sp, #4]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d184      	bne.n	80102ba <_dtoa_r+0xaaa>
 80103b0:	9b00      	ldr	r3, [sp, #0]
 80103b2:	3301      	adds	r3, #1
 80103b4:	9300      	str	r3, [sp, #0]
 80103b6:	2331      	movs	r3, #49	; 0x31
 80103b8:	7013      	strb	r3, [r2, #0]
 80103ba:	e6ce      	b.n	801015a <_dtoa_r+0x94a>
 80103bc:	4b09      	ldr	r3, [pc, #36]	; (80103e4 <_dtoa_r+0xbd4>)
 80103be:	f7ff ba95 	b.w	800f8ec <_dtoa_r+0xdc>
 80103c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	f47f aa6e 	bne.w	800f8a6 <_dtoa_r+0x96>
 80103ca:	4b07      	ldr	r3, [pc, #28]	; (80103e8 <_dtoa_r+0xbd8>)
 80103cc:	f7ff ba8e 	b.w	800f8ec <_dtoa_r+0xdc>
 80103d0:	9b02      	ldr	r3, [sp, #8]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	dcae      	bgt.n	8010334 <_dtoa_r+0xb24>
 80103d6:	9b06      	ldr	r3, [sp, #24]
 80103d8:	2b02      	cmp	r3, #2
 80103da:	f73f aea8 	bgt.w	801012e <_dtoa_r+0x91e>
 80103de:	e7a9      	b.n	8010334 <_dtoa_r+0xb24>
 80103e0:	080137df 	.word	0x080137df
 80103e4:	0801373c 	.word	0x0801373c
 80103e8:	08013760 	.word	0x08013760

080103ec <_localeconv_r>:
 80103ec:	4800      	ldr	r0, [pc, #0]	; (80103f0 <_localeconv_r+0x4>)
 80103ee:	4770      	bx	lr
 80103f0:	20000174 	.word	0x20000174

080103f4 <malloc>:
 80103f4:	4b02      	ldr	r3, [pc, #8]	; (8010400 <malloc+0xc>)
 80103f6:	4601      	mov	r1, r0
 80103f8:	6818      	ldr	r0, [r3, #0]
 80103fa:	f000 bc09 	b.w	8010c10 <_malloc_r>
 80103fe:	bf00      	nop
 8010400:	20000020 	.word	0x20000020

08010404 <_Balloc>:
 8010404:	b570      	push	{r4, r5, r6, lr}
 8010406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010408:	4604      	mov	r4, r0
 801040a:	460d      	mov	r5, r1
 801040c:	b976      	cbnz	r6, 801042c <_Balloc+0x28>
 801040e:	2010      	movs	r0, #16
 8010410:	f7ff fff0 	bl	80103f4 <malloc>
 8010414:	4602      	mov	r2, r0
 8010416:	6260      	str	r0, [r4, #36]	; 0x24
 8010418:	b920      	cbnz	r0, 8010424 <_Balloc+0x20>
 801041a:	4b18      	ldr	r3, [pc, #96]	; (801047c <_Balloc+0x78>)
 801041c:	4818      	ldr	r0, [pc, #96]	; (8010480 <_Balloc+0x7c>)
 801041e:	2166      	movs	r1, #102	; 0x66
 8010420:	f000 fdd6 	bl	8010fd0 <__assert_func>
 8010424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010428:	6006      	str	r6, [r0, #0]
 801042a:	60c6      	str	r6, [r0, #12]
 801042c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801042e:	68f3      	ldr	r3, [r6, #12]
 8010430:	b183      	cbz	r3, 8010454 <_Balloc+0x50>
 8010432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801043a:	b9b8      	cbnz	r0, 801046c <_Balloc+0x68>
 801043c:	2101      	movs	r1, #1
 801043e:	fa01 f605 	lsl.w	r6, r1, r5
 8010442:	1d72      	adds	r2, r6, #5
 8010444:	0092      	lsls	r2, r2, #2
 8010446:	4620      	mov	r0, r4
 8010448:	f000 fb60 	bl	8010b0c <_calloc_r>
 801044c:	b160      	cbz	r0, 8010468 <_Balloc+0x64>
 801044e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010452:	e00e      	b.n	8010472 <_Balloc+0x6e>
 8010454:	2221      	movs	r2, #33	; 0x21
 8010456:	2104      	movs	r1, #4
 8010458:	4620      	mov	r0, r4
 801045a:	f000 fb57 	bl	8010b0c <_calloc_r>
 801045e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010460:	60f0      	str	r0, [r6, #12]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d1e4      	bne.n	8010432 <_Balloc+0x2e>
 8010468:	2000      	movs	r0, #0
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	6802      	ldr	r2, [r0, #0]
 801046e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010472:	2300      	movs	r3, #0
 8010474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010478:	e7f7      	b.n	801046a <_Balloc+0x66>
 801047a:	bf00      	nop
 801047c:	0801376d 	.word	0x0801376d
 8010480:	080137f0 	.word	0x080137f0

08010484 <_Bfree>:
 8010484:	b570      	push	{r4, r5, r6, lr}
 8010486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010488:	4605      	mov	r5, r0
 801048a:	460c      	mov	r4, r1
 801048c:	b976      	cbnz	r6, 80104ac <_Bfree+0x28>
 801048e:	2010      	movs	r0, #16
 8010490:	f7ff ffb0 	bl	80103f4 <malloc>
 8010494:	4602      	mov	r2, r0
 8010496:	6268      	str	r0, [r5, #36]	; 0x24
 8010498:	b920      	cbnz	r0, 80104a4 <_Bfree+0x20>
 801049a:	4b09      	ldr	r3, [pc, #36]	; (80104c0 <_Bfree+0x3c>)
 801049c:	4809      	ldr	r0, [pc, #36]	; (80104c4 <_Bfree+0x40>)
 801049e:	218a      	movs	r1, #138	; 0x8a
 80104a0:	f000 fd96 	bl	8010fd0 <__assert_func>
 80104a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104a8:	6006      	str	r6, [r0, #0]
 80104aa:	60c6      	str	r6, [r0, #12]
 80104ac:	b13c      	cbz	r4, 80104be <_Bfree+0x3a>
 80104ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104b0:	6862      	ldr	r2, [r4, #4]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104b8:	6021      	str	r1, [r4, #0]
 80104ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104be:	bd70      	pop	{r4, r5, r6, pc}
 80104c0:	0801376d 	.word	0x0801376d
 80104c4:	080137f0 	.word	0x080137f0

080104c8 <__multadd>:
 80104c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104cc:	690d      	ldr	r5, [r1, #16]
 80104ce:	4607      	mov	r7, r0
 80104d0:	460c      	mov	r4, r1
 80104d2:	461e      	mov	r6, r3
 80104d4:	f101 0c14 	add.w	ip, r1, #20
 80104d8:	2000      	movs	r0, #0
 80104da:	f8dc 3000 	ldr.w	r3, [ip]
 80104de:	b299      	uxth	r1, r3
 80104e0:	fb02 6101 	mla	r1, r2, r1, r6
 80104e4:	0c1e      	lsrs	r6, r3, #16
 80104e6:	0c0b      	lsrs	r3, r1, #16
 80104e8:	fb02 3306 	mla	r3, r2, r6, r3
 80104ec:	b289      	uxth	r1, r1
 80104ee:	3001      	adds	r0, #1
 80104f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104f4:	4285      	cmp	r5, r0
 80104f6:	f84c 1b04 	str.w	r1, [ip], #4
 80104fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104fe:	dcec      	bgt.n	80104da <__multadd+0x12>
 8010500:	b30e      	cbz	r6, 8010546 <__multadd+0x7e>
 8010502:	68a3      	ldr	r3, [r4, #8]
 8010504:	42ab      	cmp	r3, r5
 8010506:	dc19      	bgt.n	801053c <__multadd+0x74>
 8010508:	6861      	ldr	r1, [r4, #4]
 801050a:	4638      	mov	r0, r7
 801050c:	3101      	adds	r1, #1
 801050e:	f7ff ff79 	bl	8010404 <_Balloc>
 8010512:	4680      	mov	r8, r0
 8010514:	b928      	cbnz	r0, 8010522 <__multadd+0x5a>
 8010516:	4602      	mov	r2, r0
 8010518:	4b0c      	ldr	r3, [pc, #48]	; (801054c <__multadd+0x84>)
 801051a:	480d      	ldr	r0, [pc, #52]	; (8010550 <__multadd+0x88>)
 801051c:	21b5      	movs	r1, #181	; 0xb5
 801051e:	f000 fd57 	bl	8010fd0 <__assert_func>
 8010522:	6922      	ldr	r2, [r4, #16]
 8010524:	3202      	adds	r2, #2
 8010526:	f104 010c 	add.w	r1, r4, #12
 801052a:	0092      	lsls	r2, r2, #2
 801052c:	300c      	adds	r0, #12
 801052e:	f7fe fc1f 	bl	800ed70 <memcpy>
 8010532:	4621      	mov	r1, r4
 8010534:	4638      	mov	r0, r7
 8010536:	f7ff ffa5 	bl	8010484 <_Bfree>
 801053a:	4644      	mov	r4, r8
 801053c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010540:	3501      	adds	r5, #1
 8010542:	615e      	str	r6, [r3, #20]
 8010544:	6125      	str	r5, [r4, #16]
 8010546:	4620      	mov	r0, r4
 8010548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801054c:	080137df 	.word	0x080137df
 8010550:	080137f0 	.word	0x080137f0

08010554 <__hi0bits>:
 8010554:	0c03      	lsrs	r3, r0, #16
 8010556:	041b      	lsls	r3, r3, #16
 8010558:	b9d3      	cbnz	r3, 8010590 <__hi0bits+0x3c>
 801055a:	0400      	lsls	r0, r0, #16
 801055c:	2310      	movs	r3, #16
 801055e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010562:	bf04      	itt	eq
 8010564:	0200      	lsleq	r0, r0, #8
 8010566:	3308      	addeq	r3, #8
 8010568:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801056c:	bf04      	itt	eq
 801056e:	0100      	lsleq	r0, r0, #4
 8010570:	3304      	addeq	r3, #4
 8010572:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010576:	bf04      	itt	eq
 8010578:	0080      	lsleq	r0, r0, #2
 801057a:	3302      	addeq	r3, #2
 801057c:	2800      	cmp	r0, #0
 801057e:	db05      	blt.n	801058c <__hi0bits+0x38>
 8010580:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010584:	f103 0301 	add.w	r3, r3, #1
 8010588:	bf08      	it	eq
 801058a:	2320      	moveq	r3, #32
 801058c:	4618      	mov	r0, r3
 801058e:	4770      	bx	lr
 8010590:	2300      	movs	r3, #0
 8010592:	e7e4      	b.n	801055e <__hi0bits+0xa>

08010594 <__lo0bits>:
 8010594:	6803      	ldr	r3, [r0, #0]
 8010596:	f013 0207 	ands.w	r2, r3, #7
 801059a:	4601      	mov	r1, r0
 801059c:	d00b      	beq.n	80105b6 <__lo0bits+0x22>
 801059e:	07da      	lsls	r2, r3, #31
 80105a0:	d423      	bmi.n	80105ea <__lo0bits+0x56>
 80105a2:	0798      	lsls	r0, r3, #30
 80105a4:	bf49      	itett	mi
 80105a6:	085b      	lsrmi	r3, r3, #1
 80105a8:	089b      	lsrpl	r3, r3, #2
 80105aa:	2001      	movmi	r0, #1
 80105ac:	600b      	strmi	r3, [r1, #0]
 80105ae:	bf5c      	itt	pl
 80105b0:	600b      	strpl	r3, [r1, #0]
 80105b2:	2002      	movpl	r0, #2
 80105b4:	4770      	bx	lr
 80105b6:	b298      	uxth	r0, r3
 80105b8:	b9a8      	cbnz	r0, 80105e6 <__lo0bits+0x52>
 80105ba:	0c1b      	lsrs	r3, r3, #16
 80105bc:	2010      	movs	r0, #16
 80105be:	b2da      	uxtb	r2, r3
 80105c0:	b90a      	cbnz	r2, 80105c6 <__lo0bits+0x32>
 80105c2:	3008      	adds	r0, #8
 80105c4:	0a1b      	lsrs	r3, r3, #8
 80105c6:	071a      	lsls	r2, r3, #28
 80105c8:	bf04      	itt	eq
 80105ca:	091b      	lsreq	r3, r3, #4
 80105cc:	3004      	addeq	r0, #4
 80105ce:	079a      	lsls	r2, r3, #30
 80105d0:	bf04      	itt	eq
 80105d2:	089b      	lsreq	r3, r3, #2
 80105d4:	3002      	addeq	r0, #2
 80105d6:	07da      	lsls	r2, r3, #31
 80105d8:	d403      	bmi.n	80105e2 <__lo0bits+0x4e>
 80105da:	085b      	lsrs	r3, r3, #1
 80105dc:	f100 0001 	add.w	r0, r0, #1
 80105e0:	d005      	beq.n	80105ee <__lo0bits+0x5a>
 80105e2:	600b      	str	r3, [r1, #0]
 80105e4:	4770      	bx	lr
 80105e6:	4610      	mov	r0, r2
 80105e8:	e7e9      	b.n	80105be <__lo0bits+0x2a>
 80105ea:	2000      	movs	r0, #0
 80105ec:	4770      	bx	lr
 80105ee:	2020      	movs	r0, #32
 80105f0:	4770      	bx	lr
	...

080105f4 <__i2b>:
 80105f4:	b510      	push	{r4, lr}
 80105f6:	460c      	mov	r4, r1
 80105f8:	2101      	movs	r1, #1
 80105fa:	f7ff ff03 	bl	8010404 <_Balloc>
 80105fe:	4602      	mov	r2, r0
 8010600:	b928      	cbnz	r0, 801060e <__i2b+0x1a>
 8010602:	4b05      	ldr	r3, [pc, #20]	; (8010618 <__i2b+0x24>)
 8010604:	4805      	ldr	r0, [pc, #20]	; (801061c <__i2b+0x28>)
 8010606:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801060a:	f000 fce1 	bl	8010fd0 <__assert_func>
 801060e:	2301      	movs	r3, #1
 8010610:	6144      	str	r4, [r0, #20]
 8010612:	6103      	str	r3, [r0, #16]
 8010614:	bd10      	pop	{r4, pc}
 8010616:	bf00      	nop
 8010618:	080137df 	.word	0x080137df
 801061c:	080137f0 	.word	0x080137f0

08010620 <__multiply>:
 8010620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	4691      	mov	r9, r2
 8010626:	690a      	ldr	r2, [r1, #16]
 8010628:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801062c:	429a      	cmp	r2, r3
 801062e:	bfb8      	it	lt
 8010630:	460b      	movlt	r3, r1
 8010632:	460c      	mov	r4, r1
 8010634:	bfbc      	itt	lt
 8010636:	464c      	movlt	r4, r9
 8010638:	4699      	movlt	r9, r3
 801063a:	6927      	ldr	r7, [r4, #16]
 801063c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010640:	68a3      	ldr	r3, [r4, #8]
 8010642:	6861      	ldr	r1, [r4, #4]
 8010644:	eb07 060a 	add.w	r6, r7, sl
 8010648:	42b3      	cmp	r3, r6
 801064a:	b085      	sub	sp, #20
 801064c:	bfb8      	it	lt
 801064e:	3101      	addlt	r1, #1
 8010650:	f7ff fed8 	bl	8010404 <_Balloc>
 8010654:	b930      	cbnz	r0, 8010664 <__multiply+0x44>
 8010656:	4602      	mov	r2, r0
 8010658:	4b44      	ldr	r3, [pc, #272]	; (801076c <__multiply+0x14c>)
 801065a:	4845      	ldr	r0, [pc, #276]	; (8010770 <__multiply+0x150>)
 801065c:	f240 115d 	movw	r1, #349	; 0x15d
 8010660:	f000 fcb6 	bl	8010fd0 <__assert_func>
 8010664:	f100 0514 	add.w	r5, r0, #20
 8010668:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801066c:	462b      	mov	r3, r5
 801066e:	2200      	movs	r2, #0
 8010670:	4543      	cmp	r3, r8
 8010672:	d321      	bcc.n	80106b8 <__multiply+0x98>
 8010674:	f104 0314 	add.w	r3, r4, #20
 8010678:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801067c:	f109 0314 	add.w	r3, r9, #20
 8010680:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010684:	9202      	str	r2, [sp, #8]
 8010686:	1b3a      	subs	r2, r7, r4
 8010688:	3a15      	subs	r2, #21
 801068a:	f022 0203 	bic.w	r2, r2, #3
 801068e:	3204      	adds	r2, #4
 8010690:	f104 0115 	add.w	r1, r4, #21
 8010694:	428f      	cmp	r7, r1
 8010696:	bf38      	it	cc
 8010698:	2204      	movcc	r2, #4
 801069a:	9201      	str	r2, [sp, #4]
 801069c:	9a02      	ldr	r2, [sp, #8]
 801069e:	9303      	str	r3, [sp, #12]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d80c      	bhi.n	80106be <__multiply+0x9e>
 80106a4:	2e00      	cmp	r6, #0
 80106a6:	dd03      	ble.n	80106b0 <__multiply+0x90>
 80106a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d05a      	beq.n	8010766 <__multiply+0x146>
 80106b0:	6106      	str	r6, [r0, #16]
 80106b2:	b005      	add	sp, #20
 80106b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b8:	f843 2b04 	str.w	r2, [r3], #4
 80106bc:	e7d8      	b.n	8010670 <__multiply+0x50>
 80106be:	f8b3 a000 	ldrh.w	sl, [r3]
 80106c2:	f1ba 0f00 	cmp.w	sl, #0
 80106c6:	d024      	beq.n	8010712 <__multiply+0xf2>
 80106c8:	f104 0e14 	add.w	lr, r4, #20
 80106cc:	46a9      	mov	r9, r5
 80106ce:	f04f 0c00 	mov.w	ip, #0
 80106d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80106d6:	f8d9 1000 	ldr.w	r1, [r9]
 80106da:	fa1f fb82 	uxth.w	fp, r2
 80106de:	b289      	uxth	r1, r1
 80106e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80106e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80106e8:	f8d9 2000 	ldr.w	r2, [r9]
 80106ec:	4461      	add	r1, ip
 80106ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80106f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80106f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80106fa:	b289      	uxth	r1, r1
 80106fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010700:	4577      	cmp	r7, lr
 8010702:	f849 1b04 	str.w	r1, [r9], #4
 8010706:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801070a:	d8e2      	bhi.n	80106d2 <__multiply+0xb2>
 801070c:	9a01      	ldr	r2, [sp, #4]
 801070e:	f845 c002 	str.w	ip, [r5, r2]
 8010712:	9a03      	ldr	r2, [sp, #12]
 8010714:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010718:	3304      	adds	r3, #4
 801071a:	f1b9 0f00 	cmp.w	r9, #0
 801071e:	d020      	beq.n	8010762 <__multiply+0x142>
 8010720:	6829      	ldr	r1, [r5, #0]
 8010722:	f104 0c14 	add.w	ip, r4, #20
 8010726:	46ae      	mov	lr, r5
 8010728:	f04f 0a00 	mov.w	sl, #0
 801072c:	f8bc b000 	ldrh.w	fp, [ip]
 8010730:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010734:	fb09 220b 	mla	r2, r9, fp, r2
 8010738:	4492      	add	sl, r2
 801073a:	b289      	uxth	r1, r1
 801073c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010740:	f84e 1b04 	str.w	r1, [lr], #4
 8010744:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010748:	f8be 1000 	ldrh.w	r1, [lr]
 801074c:	0c12      	lsrs	r2, r2, #16
 801074e:	fb09 1102 	mla	r1, r9, r2, r1
 8010752:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010756:	4567      	cmp	r7, ip
 8010758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801075c:	d8e6      	bhi.n	801072c <__multiply+0x10c>
 801075e:	9a01      	ldr	r2, [sp, #4]
 8010760:	50a9      	str	r1, [r5, r2]
 8010762:	3504      	adds	r5, #4
 8010764:	e79a      	b.n	801069c <__multiply+0x7c>
 8010766:	3e01      	subs	r6, #1
 8010768:	e79c      	b.n	80106a4 <__multiply+0x84>
 801076a:	bf00      	nop
 801076c:	080137df 	.word	0x080137df
 8010770:	080137f0 	.word	0x080137f0

08010774 <__pow5mult>:
 8010774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010778:	4615      	mov	r5, r2
 801077a:	f012 0203 	ands.w	r2, r2, #3
 801077e:	4606      	mov	r6, r0
 8010780:	460f      	mov	r7, r1
 8010782:	d007      	beq.n	8010794 <__pow5mult+0x20>
 8010784:	4c25      	ldr	r4, [pc, #148]	; (801081c <__pow5mult+0xa8>)
 8010786:	3a01      	subs	r2, #1
 8010788:	2300      	movs	r3, #0
 801078a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801078e:	f7ff fe9b 	bl	80104c8 <__multadd>
 8010792:	4607      	mov	r7, r0
 8010794:	10ad      	asrs	r5, r5, #2
 8010796:	d03d      	beq.n	8010814 <__pow5mult+0xa0>
 8010798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801079a:	b97c      	cbnz	r4, 80107bc <__pow5mult+0x48>
 801079c:	2010      	movs	r0, #16
 801079e:	f7ff fe29 	bl	80103f4 <malloc>
 80107a2:	4602      	mov	r2, r0
 80107a4:	6270      	str	r0, [r6, #36]	; 0x24
 80107a6:	b928      	cbnz	r0, 80107b4 <__pow5mult+0x40>
 80107a8:	4b1d      	ldr	r3, [pc, #116]	; (8010820 <__pow5mult+0xac>)
 80107aa:	481e      	ldr	r0, [pc, #120]	; (8010824 <__pow5mult+0xb0>)
 80107ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80107b0:	f000 fc0e 	bl	8010fd0 <__assert_func>
 80107b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107b8:	6004      	str	r4, [r0, #0]
 80107ba:	60c4      	str	r4, [r0, #12]
 80107bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80107c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107c4:	b94c      	cbnz	r4, 80107da <__pow5mult+0x66>
 80107c6:	f240 2171 	movw	r1, #625	; 0x271
 80107ca:	4630      	mov	r0, r6
 80107cc:	f7ff ff12 	bl	80105f4 <__i2b>
 80107d0:	2300      	movs	r3, #0
 80107d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80107d6:	4604      	mov	r4, r0
 80107d8:	6003      	str	r3, [r0, #0]
 80107da:	f04f 0900 	mov.w	r9, #0
 80107de:	07eb      	lsls	r3, r5, #31
 80107e0:	d50a      	bpl.n	80107f8 <__pow5mult+0x84>
 80107e2:	4639      	mov	r1, r7
 80107e4:	4622      	mov	r2, r4
 80107e6:	4630      	mov	r0, r6
 80107e8:	f7ff ff1a 	bl	8010620 <__multiply>
 80107ec:	4639      	mov	r1, r7
 80107ee:	4680      	mov	r8, r0
 80107f0:	4630      	mov	r0, r6
 80107f2:	f7ff fe47 	bl	8010484 <_Bfree>
 80107f6:	4647      	mov	r7, r8
 80107f8:	106d      	asrs	r5, r5, #1
 80107fa:	d00b      	beq.n	8010814 <__pow5mult+0xa0>
 80107fc:	6820      	ldr	r0, [r4, #0]
 80107fe:	b938      	cbnz	r0, 8010810 <__pow5mult+0x9c>
 8010800:	4622      	mov	r2, r4
 8010802:	4621      	mov	r1, r4
 8010804:	4630      	mov	r0, r6
 8010806:	f7ff ff0b 	bl	8010620 <__multiply>
 801080a:	6020      	str	r0, [r4, #0]
 801080c:	f8c0 9000 	str.w	r9, [r0]
 8010810:	4604      	mov	r4, r0
 8010812:	e7e4      	b.n	80107de <__pow5mult+0x6a>
 8010814:	4638      	mov	r0, r7
 8010816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801081a:	bf00      	nop
 801081c:	08013940 	.word	0x08013940
 8010820:	0801376d 	.word	0x0801376d
 8010824:	080137f0 	.word	0x080137f0

08010828 <__lshift>:
 8010828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801082c:	460c      	mov	r4, r1
 801082e:	6849      	ldr	r1, [r1, #4]
 8010830:	6923      	ldr	r3, [r4, #16]
 8010832:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010836:	68a3      	ldr	r3, [r4, #8]
 8010838:	4607      	mov	r7, r0
 801083a:	4691      	mov	r9, r2
 801083c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010840:	f108 0601 	add.w	r6, r8, #1
 8010844:	42b3      	cmp	r3, r6
 8010846:	db0b      	blt.n	8010860 <__lshift+0x38>
 8010848:	4638      	mov	r0, r7
 801084a:	f7ff fddb 	bl	8010404 <_Balloc>
 801084e:	4605      	mov	r5, r0
 8010850:	b948      	cbnz	r0, 8010866 <__lshift+0x3e>
 8010852:	4602      	mov	r2, r0
 8010854:	4b2a      	ldr	r3, [pc, #168]	; (8010900 <__lshift+0xd8>)
 8010856:	482b      	ldr	r0, [pc, #172]	; (8010904 <__lshift+0xdc>)
 8010858:	f240 11d9 	movw	r1, #473	; 0x1d9
 801085c:	f000 fbb8 	bl	8010fd0 <__assert_func>
 8010860:	3101      	adds	r1, #1
 8010862:	005b      	lsls	r3, r3, #1
 8010864:	e7ee      	b.n	8010844 <__lshift+0x1c>
 8010866:	2300      	movs	r3, #0
 8010868:	f100 0114 	add.w	r1, r0, #20
 801086c:	f100 0210 	add.w	r2, r0, #16
 8010870:	4618      	mov	r0, r3
 8010872:	4553      	cmp	r3, sl
 8010874:	db37      	blt.n	80108e6 <__lshift+0xbe>
 8010876:	6920      	ldr	r0, [r4, #16]
 8010878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801087c:	f104 0314 	add.w	r3, r4, #20
 8010880:	f019 091f 	ands.w	r9, r9, #31
 8010884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010888:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801088c:	d02f      	beq.n	80108ee <__lshift+0xc6>
 801088e:	f1c9 0e20 	rsb	lr, r9, #32
 8010892:	468a      	mov	sl, r1
 8010894:	f04f 0c00 	mov.w	ip, #0
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	fa02 f209 	lsl.w	r2, r2, r9
 801089e:	ea42 020c 	orr.w	r2, r2, ip
 80108a2:	f84a 2b04 	str.w	r2, [sl], #4
 80108a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80108aa:	4298      	cmp	r0, r3
 80108ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80108b0:	d8f2      	bhi.n	8010898 <__lshift+0x70>
 80108b2:	1b03      	subs	r3, r0, r4
 80108b4:	3b15      	subs	r3, #21
 80108b6:	f023 0303 	bic.w	r3, r3, #3
 80108ba:	3304      	adds	r3, #4
 80108bc:	f104 0215 	add.w	r2, r4, #21
 80108c0:	4290      	cmp	r0, r2
 80108c2:	bf38      	it	cc
 80108c4:	2304      	movcc	r3, #4
 80108c6:	f841 c003 	str.w	ip, [r1, r3]
 80108ca:	f1bc 0f00 	cmp.w	ip, #0
 80108ce:	d001      	beq.n	80108d4 <__lshift+0xac>
 80108d0:	f108 0602 	add.w	r6, r8, #2
 80108d4:	3e01      	subs	r6, #1
 80108d6:	4638      	mov	r0, r7
 80108d8:	612e      	str	r6, [r5, #16]
 80108da:	4621      	mov	r1, r4
 80108dc:	f7ff fdd2 	bl	8010484 <_Bfree>
 80108e0:	4628      	mov	r0, r5
 80108e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80108ea:	3301      	adds	r3, #1
 80108ec:	e7c1      	b.n	8010872 <__lshift+0x4a>
 80108ee:	3904      	subs	r1, #4
 80108f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80108f8:	4298      	cmp	r0, r3
 80108fa:	d8f9      	bhi.n	80108f0 <__lshift+0xc8>
 80108fc:	e7ea      	b.n	80108d4 <__lshift+0xac>
 80108fe:	bf00      	nop
 8010900:	080137df 	.word	0x080137df
 8010904:	080137f0 	.word	0x080137f0

08010908 <__mcmp>:
 8010908:	b530      	push	{r4, r5, lr}
 801090a:	6902      	ldr	r2, [r0, #16]
 801090c:	690c      	ldr	r4, [r1, #16]
 801090e:	1b12      	subs	r2, r2, r4
 8010910:	d10e      	bne.n	8010930 <__mcmp+0x28>
 8010912:	f100 0314 	add.w	r3, r0, #20
 8010916:	3114      	adds	r1, #20
 8010918:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801091c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010920:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010924:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010928:	42a5      	cmp	r5, r4
 801092a:	d003      	beq.n	8010934 <__mcmp+0x2c>
 801092c:	d305      	bcc.n	801093a <__mcmp+0x32>
 801092e:	2201      	movs	r2, #1
 8010930:	4610      	mov	r0, r2
 8010932:	bd30      	pop	{r4, r5, pc}
 8010934:	4283      	cmp	r3, r0
 8010936:	d3f3      	bcc.n	8010920 <__mcmp+0x18>
 8010938:	e7fa      	b.n	8010930 <__mcmp+0x28>
 801093a:	f04f 32ff 	mov.w	r2, #4294967295
 801093e:	e7f7      	b.n	8010930 <__mcmp+0x28>

08010940 <__mdiff>:
 8010940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010944:	460c      	mov	r4, r1
 8010946:	4606      	mov	r6, r0
 8010948:	4611      	mov	r1, r2
 801094a:	4620      	mov	r0, r4
 801094c:	4690      	mov	r8, r2
 801094e:	f7ff ffdb 	bl	8010908 <__mcmp>
 8010952:	1e05      	subs	r5, r0, #0
 8010954:	d110      	bne.n	8010978 <__mdiff+0x38>
 8010956:	4629      	mov	r1, r5
 8010958:	4630      	mov	r0, r6
 801095a:	f7ff fd53 	bl	8010404 <_Balloc>
 801095e:	b930      	cbnz	r0, 801096e <__mdiff+0x2e>
 8010960:	4b3a      	ldr	r3, [pc, #232]	; (8010a4c <__mdiff+0x10c>)
 8010962:	4602      	mov	r2, r0
 8010964:	f240 2132 	movw	r1, #562	; 0x232
 8010968:	4839      	ldr	r0, [pc, #228]	; (8010a50 <__mdiff+0x110>)
 801096a:	f000 fb31 	bl	8010fd0 <__assert_func>
 801096e:	2301      	movs	r3, #1
 8010970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010978:	bfa4      	itt	ge
 801097a:	4643      	movge	r3, r8
 801097c:	46a0      	movge	r8, r4
 801097e:	4630      	mov	r0, r6
 8010980:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010984:	bfa6      	itte	ge
 8010986:	461c      	movge	r4, r3
 8010988:	2500      	movge	r5, #0
 801098a:	2501      	movlt	r5, #1
 801098c:	f7ff fd3a 	bl	8010404 <_Balloc>
 8010990:	b920      	cbnz	r0, 801099c <__mdiff+0x5c>
 8010992:	4b2e      	ldr	r3, [pc, #184]	; (8010a4c <__mdiff+0x10c>)
 8010994:	4602      	mov	r2, r0
 8010996:	f44f 7110 	mov.w	r1, #576	; 0x240
 801099a:	e7e5      	b.n	8010968 <__mdiff+0x28>
 801099c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80109a0:	6926      	ldr	r6, [r4, #16]
 80109a2:	60c5      	str	r5, [r0, #12]
 80109a4:	f104 0914 	add.w	r9, r4, #20
 80109a8:	f108 0514 	add.w	r5, r8, #20
 80109ac:	f100 0e14 	add.w	lr, r0, #20
 80109b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80109b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80109b8:	f108 0210 	add.w	r2, r8, #16
 80109bc:	46f2      	mov	sl, lr
 80109be:	2100      	movs	r1, #0
 80109c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80109c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80109c8:	fa1f f883 	uxth.w	r8, r3
 80109cc:	fa11 f18b 	uxtah	r1, r1, fp
 80109d0:	0c1b      	lsrs	r3, r3, #16
 80109d2:	eba1 0808 	sub.w	r8, r1, r8
 80109d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80109da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80109de:	fa1f f888 	uxth.w	r8, r8
 80109e2:	1419      	asrs	r1, r3, #16
 80109e4:	454e      	cmp	r6, r9
 80109e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80109ea:	f84a 3b04 	str.w	r3, [sl], #4
 80109ee:	d8e7      	bhi.n	80109c0 <__mdiff+0x80>
 80109f0:	1b33      	subs	r3, r6, r4
 80109f2:	3b15      	subs	r3, #21
 80109f4:	f023 0303 	bic.w	r3, r3, #3
 80109f8:	3304      	adds	r3, #4
 80109fa:	3415      	adds	r4, #21
 80109fc:	42a6      	cmp	r6, r4
 80109fe:	bf38      	it	cc
 8010a00:	2304      	movcc	r3, #4
 8010a02:	441d      	add	r5, r3
 8010a04:	4473      	add	r3, lr
 8010a06:	469e      	mov	lr, r3
 8010a08:	462e      	mov	r6, r5
 8010a0a:	4566      	cmp	r6, ip
 8010a0c:	d30e      	bcc.n	8010a2c <__mdiff+0xec>
 8010a0e:	f10c 0203 	add.w	r2, ip, #3
 8010a12:	1b52      	subs	r2, r2, r5
 8010a14:	f022 0203 	bic.w	r2, r2, #3
 8010a18:	3d03      	subs	r5, #3
 8010a1a:	45ac      	cmp	ip, r5
 8010a1c:	bf38      	it	cc
 8010a1e:	2200      	movcc	r2, #0
 8010a20:	441a      	add	r2, r3
 8010a22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010a26:	b17b      	cbz	r3, 8010a48 <__mdiff+0x108>
 8010a28:	6107      	str	r7, [r0, #16]
 8010a2a:	e7a3      	b.n	8010974 <__mdiff+0x34>
 8010a2c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010a30:	fa11 f288 	uxtah	r2, r1, r8
 8010a34:	1414      	asrs	r4, r2, #16
 8010a36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010a3a:	b292      	uxth	r2, r2
 8010a3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010a40:	f84e 2b04 	str.w	r2, [lr], #4
 8010a44:	1421      	asrs	r1, r4, #16
 8010a46:	e7e0      	b.n	8010a0a <__mdiff+0xca>
 8010a48:	3f01      	subs	r7, #1
 8010a4a:	e7ea      	b.n	8010a22 <__mdiff+0xe2>
 8010a4c:	080137df 	.word	0x080137df
 8010a50:	080137f0 	.word	0x080137f0

08010a54 <__d2b>:
 8010a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a58:	4689      	mov	r9, r1
 8010a5a:	2101      	movs	r1, #1
 8010a5c:	ec57 6b10 	vmov	r6, r7, d0
 8010a60:	4690      	mov	r8, r2
 8010a62:	f7ff fccf 	bl	8010404 <_Balloc>
 8010a66:	4604      	mov	r4, r0
 8010a68:	b930      	cbnz	r0, 8010a78 <__d2b+0x24>
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	4b25      	ldr	r3, [pc, #148]	; (8010b04 <__d2b+0xb0>)
 8010a6e:	4826      	ldr	r0, [pc, #152]	; (8010b08 <__d2b+0xb4>)
 8010a70:	f240 310a 	movw	r1, #778	; 0x30a
 8010a74:	f000 faac 	bl	8010fd0 <__assert_func>
 8010a78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010a7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a80:	bb35      	cbnz	r5, 8010ad0 <__d2b+0x7c>
 8010a82:	2e00      	cmp	r6, #0
 8010a84:	9301      	str	r3, [sp, #4]
 8010a86:	d028      	beq.n	8010ada <__d2b+0x86>
 8010a88:	4668      	mov	r0, sp
 8010a8a:	9600      	str	r6, [sp, #0]
 8010a8c:	f7ff fd82 	bl	8010594 <__lo0bits>
 8010a90:	9900      	ldr	r1, [sp, #0]
 8010a92:	b300      	cbz	r0, 8010ad6 <__d2b+0x82>
 8010a94:	9a01      	ldr	r2, [sp, #4]
 8010a96:	f1c0 0320 	rsb	r3, r0, #32
 8010a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a9e:	430b      	orrs	r3, r1
 8010aa0:	40c2      	lsrs	r2, r0
 8010aa2:	6163      	str	r3, [r4, #20]
 8010aa4:	9201      	str	r2, [sp, #4]
 8010aa6:	9b01      	ldr	r3, [sp, #4]
 8010aa8:	61a3      	str	r3, [r4, #24]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	bf14      	ite	ne
 8010aae:	2202      	movne	r2, #2
 8010ab0:	2201      	moveq	r2, #1
 8010ab2:	6122      	str	r2, [r4, #16]
 8010ab4:	b1d5      	cbz	r5, 8010aec <__d2b+0x98>
 8010ab6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010aba:	4405      	add	r5, r0
 8010abc:	f8c9 5000 	str.w	r5, [r9]
 8010ac0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ac4:	f8c8 0000 	str.w	r0, [r8]
 8010ac8:	4620      	mov	r0, r4
 8010aca:	b003      	add	sp, #12
 8010acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ad4:	e7d5      	b.n	8010a82 <__d2b+0x2e>
 8010ad6:	6161      	str	r1, [r4, #20]
 8010ad8:	e7e5      	b.n	8010aa6 <__d2b+0x52>
 8010ada:	a801      	add	r0, sp, #4
 8010adc:	f7ff fd5a 	bl	8010594 <__lo0bits>
 8010ae0:	9b01      	ldr	r3, [sp, #4]
 8010ae2:	6163      	str	r3, [r4, #20]
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	6122      	str	r2, [r4, #16]
 8010ae8:	3020      	adds	r0, #32
 8010aea:	e7e3      	b.n	8010ab4 <__d2b+0x60>
 8010aec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010af4:	f8c9 0000 	str.w	r0, [r9]
 8010af8:	6918      	ldr	r0, [r3, #16]
 8010afa:	f7ff fd2b 	bl	8010554 <__hi0bits>
 8010afe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b02:	e7df      	b.n	8010ac4 <__d2b+0x70>
 8010b04:	080137df 	.word	0x080137df
 8010b08:	080137f0 	.word	0x080137f0

08010b0c <_calloc_r>:
 8010b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b0e:	fba1 2402 	umull	r2, r4, r1, r2
 8010b12:	b94c      	cbnz	r4, 8010b28 <_calloc_r+0x1c>
 8010b14:	4611      	mov	r1, r2
 8010b16:	9201      	str	r2, [sp, #4]
 8010b18:	f000 f87a 	bl	8010c10 <_malloc_r>
 8010b1c:	9a01      	ldr	r2, [sp, #4]
 8010b1e:	4605      	mov	r5, r0
 8010b20:	b930      	cbnz	r0, 8010b30 <_calloc_r+0x24>
 8010b22:	4628      	mov	r0, r5
 8010b24:	b003      	add	sp, #12
 8010b26:	bd30      	pop	{r4, r5, pc}
 8010b28:	220c      	movs	r2, #12
 8010b2a:	6002      	str	r2, [r0, #0]
 8010b2c:	2500      	movs	r5, #0
 8010b2e:	e7f8      	b.n	8010b22 <_calloc_r+0x16>
 8010b30:	4621      	mov	r1, r4
 8010b32:	f7fe f92b 	bl	800ed8c <memset>
 8010b36:	e7f4      	b.n	8010b22 <_calloc_r+0x16>

08010b38 <_free_r>:
 8010b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b3a:	2900      	cmp	r1, #0
 8010b3c:	d044      	beq.n	8010bc8 <_free_r+0x90>
 8010b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b42:	9001      	str	r0, [sp, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	f1a1 0404 	sub.w	r4, r1, #4
 8010b4a:	bfb8      	it	lt
 8010b4c:	18e4      	addlt	r4, r4, r3
 8010b4e:	f000 fa9b 	bl	8011088 <__malloc_lock>
 8010b52:	4a1e      	ldr	r2, [pc, #120]	; (8010bcc <_free_r+0x94>)
 8010b54:	9801      	ldr	r0, [sp, #4]
 8010b56:	6813      	ldr	r3, [r2, #0]
 8010b58:	b933      	cbnz	r3, 8010b68 <_free_r+0x30>
 8010b5a:	6063      	str	r3, [r4, #4]
 8010b5c:	6014      	str	r4, [r2, #0]
 8010b5e:	b003      	add	sp, #12
 8010b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b64:	f000 ba96 	b.w	8011094 <__malloc_unlock>
 8010b68:	42a3      	cmp	r3, r4
 8010b6a:	d908      	bls.n	8010b7e <_free_r+0x46>
 8010b6c:	6825      	ldr	r5, [r4, #0]
 8010b6e:	1961      	adds	r1, r4, r5
 8010b70:	428b      	cmp	r3, r1
 8010b72:	bf01      	itttt	eq
 8010b74:	6819      	ldreq	r1, [r3, #0]
 8010b76:	685b      	ldreq	r3, [r3, #4]
 8010b78:	1949      	addeq	r1, r1, r5
 8010b7a:	6021      	streq	r1, [r4, #0]
 8010b7c:	e7ed      	b.n	8010b5a <_free_r+0x22>
 8010b7e:	461a      	mov	r2, r3
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	b10b      	cbz	r3, 8010b88 <_free_r+0x50>
 8010b84:	42a3      	cmp	r3, r4
 8010b86:	d9fa      	bls.n	8010b7e <_free_r+0x46>
 8010b88:	6811      	ldr	r1, [r2, #0]
 8010b8a:	1855      	adds	r5, r2, r1
 8010b8c:	42a5      	cmp	r5, r4
 8010b8e:	d10b      	bne.n	8010ba8 <_free_r+0x70>
 8010b90:	6824      	ldr	r4, [r4, #0]
 8010b92:	4421      	add	r1, r4
 8010b94:	1854      	adds	r4, r2, r1
 8010b96:	42a3      	cmp	r3, r4
 8010b98:	6011      	str	r1, [r2, #0]
 8010b9a:	d1e0      	bne.n	8010b5e <_free_r+0x26>
 8010b9c:	681c      	ldr	r4, [r3, #0]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	6053      	str	r3, [r2, #4]
 8010ba2:	4421      	add	r1, r4
 8010ba4:	6011      	str	r1, [r2, #0]
 8010ba6:	e7da      	b.n	8010b5e <_free_r+0x26>
 8010ba8:	d902      	bls.n	8010bb0 <_free_r+0x78>
 8010baa:	230c      	movs	r3, #12
 8010bac:	6003      	str	r3, [r0, #0]
 8010bae:	e7d6      	b.n	8010b5e <_free_r+0x26>
 8010bb0:	6825      	ldr	r5, [r4, #0]
 8010bb2:	1961      	adds	r1, r4, r5
 8010bb4:	428b      	cmp	r3, r1
 8010bb6:	bf04      	itt	eq
 8010bb8:	6819      	ldreq	r1, [r3, #0]
 8010bba:	685b      	ldreq	r3, [r3, #4]
 8010bbc:	6063      	str	r3, [r4, #4]
 8010bbe:	bf04      	itt	eq
 8010bc0:	1949      	addeq	r1, r1, r5
 8010bc2:	6021      	streq	r1, [r4, #0]
 8010bc4:	6054      	str	r4, [r2, #4]
 8010bc6:	e7ca      	b.n	8010b5e <_free_r+0x26>
 8010bc8:	b003      	add	sp, #12
 8010bca:	bd30      	pop	{r4, r5, pc}
 8010bcc:	20006318 	.word	0x20006318

08010bd0 <sbrk_aligned>:
 8010bd0:	b570      	push	{r4, r5, r6, lr}
 8010bd2:	4e0e      	ldr	r6, [pc, #56]	; (8010c0c <sbrk_aligned+0x3c>)
 8010bd4:	460c      	mov	r4, r1
 8010bd6:	6831      	ldr	r1, [r6, #0]
 8010bd8:	4605      	mov	r5, r0
 8010bda:	b911      	cbnz	r1, 8010be2 <sbrk_aligned+0x12>
 8010bdc:	f000 f9e8 	bl	8010fb0 <_sbrk_r>
 8010be0:	6030      	str	r0, [r6, #0]
 8010be2:	4621      	mov	r1, r4
 8010be4:	4628      	mov	r0, r5
 8010be6:	f000 f9e3 	bl	8010fb0 <_sbrk_r>
 8010bea:	1c43      	adds	r3, r0, #1
 8010bec:	d00a      	beq.n	8010c04 <sbrk_aligned+0x34>
 8010bee:	1cc4      	adds	r4, r0, #3
 8010bf0:	f024 0403 	bic.w	r4, r4, #3
 8010bf4:	42a0      	cmp	r0, r4
 8010bf6:	d007      	beq.n	8010c08 <sbrk_aligned+0x38>
 8010bf8:	1a21      	subs	r1, r4, r0
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	f000 f9d8 	bl	8010fb0 <_sbrk_r>
 8010c00:	3001      	adds	r0, #1
 8010c02:	d101      	bne.n	8010c08 <sbrk_aligned+0x38>
 8010c04:	f04f 34ff 	mov.w	r4, #4294967295
 8010c08:	4620      	mov	r0, r4
 8010c0a:	bd70      	pop	{r4, r5, r6, pc}
 8010c0c:	2000631c 	.word	0x2000631c

08010c10 <_malloc_r>:
 8010c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c14:	1ccd      	adds	r5, r1, #3
 8010c16:	f025 0503 	bic.w	r5, r5, #3
 8010c1a:	3508      	adds	r5, #8
 8010c1c:	2d0c      	cmp	r5, #12
 8010c1e:	bf38      	it	cc
 8010c20:	250c      	movcc	r5, #12
 8010c22:	2d00      	cmp	r5, #0
 8010c24:	4607      	mov	r7, r0
 8010c26:	db01      	blt.n	8010c2c <_malloc_r+0x1c>
 8010c28:	42a9      	cmp	r1, r5
 8010c2a:	d905      	bls.n	8010c38 <_malloc_r+0x28>
 8010c2c:	230c      	movs	r3, #12
 8010c2e:	603b      	str	r3, [r7, #0]
 8010c30:	2600      	movs	r6, #0
 8010c32:	4630      	mov	r0, r6
 8010c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c38:	4e2e      	ldr	r6, [pc, #184]	; (8010cf4 <_malloc_r+0xe4>)
 8010c3a:	f000 fa25 	bl	8011088 <__malloc_lock>
 8010c3e:	6833      	ldr	r3, [r6, #0]
 8010c40:	461c      	mov	r4, r3
 8010c42:	bb34      	cbnz	r4, 8010c92 <_malloc_r+0x82>
 8010c44:	4629      	mov	r1, r5
 8010c46:	4638      	mov	r0, r7
 8010c48:	f7ff ffc2 	bl	8010bd0 <sbrk_aligned>
 8010c4c:	1c43      	adds	r3, r0, #1
 8010c4e:	4604      	mov	r4, r0
 8010c50:	d14d      	bne.n	8010cee <_malloc_r+0xde>
 8010c52:	6834      	ldr	r4, [r6, #0]
 8010c54:	4626      	mov	r6, r4
 8010c56:	2e00      	cmp	r6, #0
 8010c58:	d140      	bne.n	8010cdc <_malloc_r+0xcc>
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	4631      	mov	r1, r6
 8010c5e:	4638      	mov	r0, r7
 8010c60:	eb04 0803 	add.w	r8, r4, r3
 8010c64:	f000 f9a4 	bl	8010fb0 <_sbrk_r>
 8010c68:	4580      	cmp	r8, r0
 8010c6a:	d13a      	bne.n	8010ce2 <_malloc_r+0xd2>
 8010c6c:	6821      	ldr	r1, [r4, #0]
 8010c6e:	3503      	adds	r5, #3
 8010c70:	1a6d      	subs	r5, r5, r1
 8010c72:	f025 0503 	bic.w	r5, r5, #3
 8010c76:	3508      	adds	r5, #8
 8010c78:	2d0c      	cmp	r5, #12
 8010c7a:	bf38      	it	cc
 8010c7c:	250c      	movcc	r5, #12
 8010c7e:	4629      	mov	r1, r5
 8010c80:	4638      	mov	r0, r7
 8010c82:	f7ff ffa5 	bl	8010bd0 <sbrk_aligned>
 8010c86:	3001      	adds	r0, #1
 8010c88:	d02b      	beq.n	8010ce2 <_malloc_r+0xd2>
 8010c8a:	6823      	ldr	r3, [r4, #0]
 8010c8c:	442b      	add	r3, r5
 8010c8e:	6023      	str	r3, [r4, #0]
 8010c90:	e00e      	b.n	8010cb0 <_malloc_r+0xa0>
 8010c92:	6822      	ldr	r2, [r4, #0]
 8010c94:	1b52      	subs	r2, r2, r5
 8010c96:	d41e      	bmi.n	8010cd6 <_malloc_r+0xc6>
 8010c98:	2a0b      	cmp	r2, #11
 8010c9a:	d916      	bls.n	8010cca <_malloc_r+0xba>
 8010c9c:	1961      	adds	r1, r4, r5
 8010c9e:	42a3      	cmp	r3, r4
 8010ca0:	6025      	str	r5, [r4, #0]
 8010ca2:	bf18      	it	ne
 8010ca4:	6059      	strne	r1, [r3, #4]
 8010ca6:	6863      	ldr	r3, [r4, #4]
 8010ca8:	bf08      	it	eq
 8010caa:	6031      	streq	r1, [r6, #0]
 8010cac:	5162      	str	r2, [r4, r5]
 8010cae:	604b      	str	r3, [r1, #4]
 8010cb0:	4638      	mov	r0, r7
 8010cb2:	f104 060b 	add.w	r6, r4, #11
 8010cb6:	f000 f9ed 	bl	8011094 <__malloc_unlock>
 8010cba:	f026 0607 	bic.w	r6, r6, #7
 8010cbe:	1d23      	adds	r3, r4, #4
 8010cc0:	1af2      	subs	r2, r6, r3
 8010cc2:	d0b6      	beq.n	8010c32 <_malloc_r+0x22>
 8010cc4:	1b9b      	subs	r3, r3, r6
 8010cc6:	50a3      	str	r3, [r4, r2]
 8010cc8:	e7b3      	b.n	8010c32 <_malloc_r+0x22>
 8010cca:	6862      	ldr	r2, [r4, #4]
 8010ccc:	42a3      	cmp	r3, r4
 8010cce:	bf0c      	ite	eq
 8010cd0:	6032      	streq	r2, [r6, #0]
 8010cd2:	605a      	strne	r2, [r3, #4]
 8010cd4:	e7ec      	b.n	8010cb0 <_malloc_r+0xa0>
 8010cd6:	4623      	mov	r3, r4
 8010cd8:	6864      	ldr	r4, [r4, #4]
 8010cda:	e7b2      	b.n	8010c42 <_malloc_r+0x32>
 8010cdc:	4634      	mov	r4, r6
 8010cde:	6876      	ldr	r6, [r6, #4]
 8010ce0:	e7b9      	b.n	8010c56 <_malloc_r+0x46>
 8010ce2:	230c      	movs	r3, #12
 8010ce4:	603b      	str	r3, [r7, #0]
 8010ce6:	4638      	mov	r0, r7
 8010ce8:	f000 f9d4 	bl	8011094 <__malloc_unlock>
 8010cec:	e7a1      	b.n	8010c32 <_malloc_r+0x22>
 8010cee:	6025      	str	r5, [r4, #0]
 8010cf0:	e7de      	b.n	8010cb0 <_malloc_r+0xa0>
 8010cf2:	bf00      	nop
 8010cf4:	20006318 	.word	0x20006318

08010cf8 <__ssputs_r>:
 8010cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cfc:	688e      	ldr	r6, [r1, #8]
 8010cfe:	429e      	cmp	r6, r3
 8010d00:	4682      	mov	sl, r0
 8010d02:	460c      	mov	r4, r1
 8010d04:	4690      	mov	r8, r2
 8010d06:	461f      	mov	r7, r3
 8010d08:	d838      	bhi.n	8010d7c <__ssputs_r+0x84>
 8010d0a:	898a      	ldrh	r2, [r1, #12]
 8010d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d10:	d032      	beq.n	8010d78 <__ssputs_r+0x80>
 8010d12:	6825      	ldr	r5, [r4, #0]
 8010d14:	6909      	ldr	r1, [r1, #16]
 8010d16:	eba5 0901 	sub.w	r9, r5, r1
 8010d1a:	6965      	ldr	r5, [r4, #20]
 8010d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d24:	3301      	adds	r3, #1
 8010d26:	444b      	add	r3, r9
 8010d28:	106d      	asrs	r5, r5, #1
 8010d2a:	429d      	cmp	r5, r3
 8010d2c:	bf38      	it	cc
 8010d2e:	461d      	movcc	r5, r3
 8010d30:	0553      	lsls	r3, r2, #21
 8010d32:	d531      	bpl.n	8010d98 <__ssputs_r+0xa0>
 8010d34:	4629      	mov	r1, r5
 8010d36:	f7ff ff6b 	bl	8010c10 <_malloc_r>
 8010d3a:	4606      	mov	r6, r0
 8010d3c:	b950      	cbnz	r0, 8010d54 <__ssputs_r+0x5c>
 8010d3e:	230c      	movs	r3, #12
 8010d40:	f8ca 3000 	str.w	r3, [sl]
 8010d44:	89a3      	ldrh	r3, [r4, #12]
 8010d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d4a:	81a3      	strh	r3, [r4, #12]
 8010d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d54:	6921      	ldr	r1, [r4, #16]
 8010d56:	464a      	mov	r2, r9
 8010d58:	f7fe f80a 	bl	800ed70 <memcpy>
 8010d5c:	89a3      	ldrh	r3, [r4, #12]
 8010d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d66:	81a3      	strh	r3, [r4, #12]
 8010d68:	6126      	str	r6, [r4, #16]
 8010d6a:	6165      	str	r5, [r4, #20]
 8010d6c:	444e      	add	r6, r9
 8010d6e:	eba5 0509 	sub.w	r5, r5, r9
 8010d72:	6026      	str	r6, [r4, #0]
 8010d74:	60a5      	str	r5, [r4, #8]
 8010d76:	463e      	mov	r6, r7
 8010d78:	42be      	cmp	r6, r7
 8010d7a:	d900      	bls.n	8010d7e <__ssputs_r+0x86>
 8010d7c:	463e      	mov	r6, r7
 8010d7e:	6820      	ldr	r0, [r4, #0]
 8010d80:	4632      	mov	r2, r6
 8010d82:	4641      	mov	r1, r8
 8010d84:	f000 f966 	bl	8011054 <memmove>
 8010d88:	68a3      	ldr	r3, [r4, #8]
 8010d8a:	1b9b      	subs	r3, r3, r6
 8010d8c:	60a3      	str	r3, [r4, #8]
 8010d8e:	6823      	ldr	r3, [r4, #0]
 8010d90:	4433      	add	r3, r6
 8010d92:	6023      	str	r3, [r4, #0]
 8010d94:	2000      	movs	r0, #0
 8010d96:	e7db      	b.n	8010d50 <__ssputs_r+0x58>
 8010d98:	462a      	mov	r2, r5
 8010d9a:	f000 f981 	bl	80110a0 <_realloc_r>
 8010d9e:	4606      	mov	r6, r0
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d1e1      	bne.n	8010d68 <__ssputs_r+0x70>
 8010da4:	6921      	ldr	r1, [r4, #16]
 8010da6:	4650      	mov	r0, sl
 8010da8:	f7ff fec6 	bl	8010b38 <_free_r>
 8010dac:	e7c7      	b.n	8010d3e <__ssputs_r+0x46>
	...

08010db0 <_svfiprintf_r>:
 8010db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db4:	4698      	mov	r8, r3
 8010db6:	898b      	ldrh	r3, [r1, #12]
 8010db8:	061b      	lsls	r3, r3, #24
 8010dba:	b09d      	sub	sp, #116	; 0x74
 8010dbc:	4607      	mov	r7, r0
 8010dbe:	460d      	mov	r5, r1
 8010dc0:	4614      	mov	r4, r2
 8010dc2:	d50e      	bpl.n	8010de2 <_svfiprintf_r+0x32>
 8010dc4:	690b      	ldr	r3, [r1, #16]
 8010dc6:	b963      	cbnz	r3, 8010de2 <_svfiprintf_r+0x32>
 8010dc8:	2140      	movs	r1, #64	; 0x40
 8010dca:	f7ff ff21 	bl	8010c10 <_malloc_r>
 8010dce:	6028      	str	r0, [r5, #0]
 8010dd0:	6128      	str	r0, [r5, #16]
 8010dd2:	b920      	cbnz	r0, 8010dde <_svfiprintf_r+0x2e>
 8010dd4:	230c      	movs	r3, #12
 8010dd6:	603b      	str	r3, [r7, #0]
 8010dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ddc:	e0d1      	b.n	8010f82 <_svfiprintf_r+0x1d2>
 8010dde:	2340      	movs	r3, #64	; 0x40
 8010de0:	616b      	str	r3, [r5, #20]
 8010de2:	2300      	movs	r3, #0
 8010de4:	9309      	str	r3, [sp, #36]	; 0x24
 8010de6:	2320      	movs	r3, #32
 8010de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8010df0:	2330      	movs	r3, #48	; 0x30
 8010df2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010f9c <_svfiprintf_r+0x1ec>
 8010df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010dfa:	f04f 0901 	mov.w	r9, #1
 8010dfe:	4623      	mov	r3, r4
 8010e00:	469a      	mov	sl, r3
 8010e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e06:	b10a      	cbz	r2, 8010e0c <_svfiprintf_r+0x5c>
 8010e08:	2a25      	cmp	r2, #37	; 0x25
 8010e0a:	d1f9      	bne.n	8010e00 <_svfiprintf_r+0x50>
 8010e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8010e10:	d00b      	beq.n	8010e2a <_svfiprintf_r+0x7a>
 8010e12:	465b      	mov	r3, fp
 8010e14:	4622      	mov	r2, r4
 8010e16:	4629      	mov	r1, r5
 8010e18:	4638      	mov	r0, r7
 8010e1a:	f7ff ff6d 	bl	8010cf8 <__ssputs_r>
 8010e1e:	3001      	adds	r0, #1
 8010e20:	f000 80aa 	beq.w	8010f78 <_svfiprintf_r+0x1c8>
 8010e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e26:	445a      	add	r2, fp
 8010e28:	9209      	str	r2, [sp, #36]	; 0x24
 8010e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f000 80a2 	beq.w	8010f78 <_svfiprintf_r+0x1c8>
 8010e34:	2300      	movs	r3, #0
 8010e36:	f04f 32ff 	mov.w	r2, #4294967295
 8010e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e3e:	f10a 0a01 	add.w	sl, sl, #1
 8010e42:	9304      	str	r3, [sp, #16]
 8010e44:	9307      	str	r3, [sp, #28]
 8010e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8010e4c:	4654      	mov	r4, sl
 8010e4e:	2205      	movs	r2, #5
 8010e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e54:	4851      	ldr	r0, [pc, #324]	; (8010f9c <_svfiprintf_r+0x1ec>)
 8010e56:	f7ef f9db 	bl	8000210 <memchr>
 8010e5a:	9a04      	ldr	r2, [sp, #16]
 8010e5c:	b9d8      	cbnz	r0, 8010e96 <_svfiprintf_r+0xe6>
 8010e5e:	06d0      	lsls	r0, r2, #27
 8010e60:	bf44      	itt	mi
 8010e62:	2320      	movmi	r3, #32
 8010e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e68:	0711      	lsls	r1, r2, #28
 8010e6a:	bf44      	itt	mi
 8010e6c:	232b      	movmi	r3, #43	; 0x2b
 8010e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e72:	f89a 3000 	ldrb.w	r3, [sl]
 8010e76:	2b2a      	cmp	r3, #42	; 0x2a
 8010e78:	d015      	beq.n	8010ea6 <_svfiprintf_r+0xf6>
 8010e7a:	9a07      	ldr	r2, [sp, #28]
 8010e7c:	4654      	mov	r4, sl
 8010e7e:	2000      	movs	r0, #0
 8010e80:	f04f 0c0a 	mov.w	ip, #10
 8010e84:	4621      	mov	r1, r4
 8010e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e8a:	3b30      	subs	r3, #48	; 0x30
 8010e8c:	2b09      	cmp	r3, #9
 8010e8e:	d94e      	bls.n	8010f2e <_svfiprintf_r+0x17e>
 8010e90:	b1b0      	cbz	r0, 8010ec0 <_svfiprintf_r+0x110>
 8010e92:	9207      	str	r2, [sp, #28]
 8010e94:	e014      	b.n	8010ec0 <_svfiprintf_r+0x110>
 8010e96:	eba0 0308 	sub.w	r3, r0, r8
 8010e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8010e9e:	4313      	orrs	r3, r2
 8010ea0:	9304      	str	r3, [sp, #16]
 8010ea2:	46a2      	mov	sl, r4
 8010ea4:	e7d2      	b.n	8010e4c <_svfiprintf_r+0x9c>
 8010ea6:	9b03      	ldr	r3, [sp, #12]
 8010ea8:	1d19      	adds	r1, r3, #4
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	9103      	str	r1, [sp, #12]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	bfbb      	ittet	lt
 8010eb2:	425b      	neglt	r3, r3
 8010eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8010eb8:	9307      	strge	r3, [sp, #28]
 8010eba:	9307      	strlt	r3, [sp, #28]
 8010ebc:	bfb8      	it	lt
 8010ebe:	9204      	strlt	r2, [sp, #16]
 8010ec0:	7823      	ldrb	r3, [r4, #0]
 8010ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8010ec4:	d10c      	bne.n	8010ee0 <_svfiprintf_r+0x130>
 8010ec6:	7863      	ldrb	r3, [r4, #1]
 8010ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8010eca:	d135      	bne.n	8010f38 <_svfiprintf_r+0x188>
 8010ecc:	9b03      	ldr	r3, [sp, #12]
 8010ece:	1d1a      	adds	r2, r3, #4
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	9203      	str	r2, [sp, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	bfb8      	it	lt
 8010ed8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010edc:	3402      	adds	r4, #2
 8010ede:	9305      	str	r3, [sp, #20]
 8010ee0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010fac <_svfiprintf_r+0x1fc>
 8010ee4:	7821      	ldrb	r1, [r4, #0]
 8010ee6:	2203      	movs	r2, #3
 8010ee8:	4650      	mov	r0, sl
 8010eea:	f7ef f991 	bl	8000210 <memchr>
 8010eee:	b140      	cbz	r0, 8010f02 <_svfiprintf_r+0x152>
 8010ef0:	2340      	movs	r3, #64	; 0x40
 8010ef2:	eba0 000a 	sub.w	r0, r0, sl
 8010ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8010efa:	9b04      	ldr	r3, [sp, #16]
 8010efc:	4303      	orrs	r3, r0
 8010efe:	3401      	adds	r4, #1
 8010f00:	9304      	str	r3, [sp, #16]
 8010f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f06:	4826      	ldr	r0, [pc, #152]	; (8010fa0 <_svfiprintf_r+0x1f0>)
 8010f08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f0c:	2206      	movs	r2, #6
 8010f0e:	f7ef f97f 	bl	8000210 <memchr>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d038      	beq.n	8010f88 <_svfiprintf_r+0x1d8>
 8010f16:	4b23      	ldr	r3, [pc, #140]	; (8010fa4 <_svfiprintf_r+0x1f4>)
 8010f18:	bb1b      	cbnz	r3, 8010f62 <_svfiprintf_r+0x1b2>
 8010f1a:	9b03      	ldr	r3, [sp, #12]
 8010f1c:	3307      	adds	r3, #7
 8010f1e:	f023 0307 	bic.w	r3, r3, #7
 8010f22:	3308      	adds	r3, #8
 8010f24:	9303      	str	r3, [sp, #12]
 8010f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f28:	4433      	add	r3, r6
 8010f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f2c:	e767      	b.n	8010dfe <_svfiprintf_r+0x4e>
 8010f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f32:	460c      	mov	r4, r1
 8010f34:	2001      	movs	r0, #1
 8010f36:	e7a5      	b.n	8010e84 <_svfiprintf_r+0xd4>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	3401      	adds	r4, #1
 8010f3c:	9305      	str	r3, [sp, #20]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	f04f 0c0a 	mov.w	ip, #10
 8010f44:	4620      	mov	r0, r4
 8010f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f4a:	3a30      	subs	r2, #48	; 0x30
 8010f4c:	2a09      	cmp	r2, #9
 8010f4e:	d903      	bls.n	8010f58 <_svfiprintf_r+0x1a8>
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d0c5      	beq.n	8010ee0 <_svfiprintf_r+0x130>
 8010f54:	9105      	str	r1, [sp, #20]
 8010f56:	e7c3      	b.n	8010ee0 <_svfiprintf_r+0x130>
 8010f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	2301      	movs	r3, #1
 8010f60:	e7f0      	b.n	8010f44 <_svfiprintf_r+0x194>
 8010f62:	ab03      	add	r3, sp, #12
 8010f64:	9300      	str	r3, [sp, #0]
 8010f66:	462a      	mov	r2, r5
 8010f68:	4b0f      	ldr	r3, [pc, #60]	; (8010fa8 <_svfiprintf_r+0x1f8>)
 8010f6a:	a904      	add	r1, sp, #16
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	f7fd ffb5 	bl	800eedc <_printf_float>
 8010f72:	1c42      	adds	r2, r0, #1
 8010f74:	4606      	mov	r6, r0
 8010f76:	d1d6      	bne.n	8010f26 <_svfiprintf_r+0x176>
 8010f78:	89ab      	ldrh	r3, [r5, #12]
 8010f7a:	065b      	lsls	r3, r3, #25
 8010f7c:	f53f af2c 	bmi.w	8010dd8 <_svfiprintf_r+0x28>
 8010f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f82:	b01d      	add	sp, #116	; 0x74
 8010f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f88:	ab03      	add	r3, sp, #12
 8010f8a:	9300      	str	r3, [sp, #0]
 8010f8c:	462a      	mov	r2, r5
 8010f8e:	4b06      	ldr	r3, [pc, #24]	; (8010fa8 <_svfiprintf_r+0x1f8>)
 8010f90:	a904      	add	r1, sp, #16
 8010f92:	4638      	mov	r0, r7
 8010f94:	f7fe fa46 	bl	800f424 <_printf_i>
 8010f98:	e7eb      	b.n	8010f72 <_svfiprintf_r+0x1c2>
 8010f9a:	bf00      	nop
 8010f9c:	0801394c 	.word	0x0801394c
 8010fa0:	08013956 	.word	0x08013956
 8010fa4:	0800eedd 	.word	0x0800eedd
 8010fa8:	08010cf9 	.word	0x08010cf9
 8010fac:	08013952 	.word	0x08013952

08010fb0 <_sbrk_r>:
 8010fb0:	b538      	push	{r3, r4, r5, lr}
 8010fb2:	4d06      	ldr	r5, [pc, #24]	; (8010fcc <_sbrk_r+0x1c>)
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	4608      	mov	r0, r1
 8010fba:	602b      	str	r3, [r5, #0]
 8010fbc:	f7f4 fdc0 	bl	8005b40 <_sbrk>
 8010fc0:	1c43      	adds	r3, r0, #1
 8010fc2:	d102      	bne.n	8010fca <_sbrk_r+0x1a>
 8010fc4:	682b      	ldr	r3, [r5, #0]
 8010fc6:	b103      	cbz	r3, 8010fca <_sbrk_r+0x1a>
 8010fc8:	6023      	str	r3, [r4, #0]
 8010fca:	bd38      	pop	{r3, r4, r5, pc}
 8010fcc:	20006320 	.word	0x20006320

08010fd0 <__assert_func>:
 8010fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fd2:	4614      	mov	r4, r2
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	4b09      	ldr	r3, [pc, #36]	; (8010ffc <__assert_func+0x2c>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4605      	mov	r5, r0
 8010fdc:	68d8      	ldr	r0, [r3, #12]
 8010fde:	b14c      	cbz	r4, 8010ff4 <__assert_func+0x24>
 8010fe0:	4b07      	ldr	r3, [pc, #28]	; (8011000 <__assert_func+0x30>)
 8010fe2:	9100      	str	r1, [sp, #0]
 8010fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fe8:	4906      	ldr	r1, [pc, #24]	; (8011004 <__assert_func+0x34>)
 8010fea:	462b      	mov	r3, r5
 8010fec:	f000 f80e 	bl	801100c <fiprintf>
 8010ff0:	f000 faac 	bl	801154c <abort>
 8010ff4:	4b04      	ldr	r3, [pc, #16]	; (8011008 <__assert_func+0x38>)
 8010ff6:	461c      	mov	r4, r3
 8010ff8:	e7f3      	b.n	8010fe2 <__assert_func+0x12>
 8010ffa:	bf00      	nop
 8010ffc:	20000020 	.word	0x20000020
 8011000:	0801395d 	.word	0x0801395d
 8011004:	0801396a 	.word	0x0801396a
 8011008:	08013998 	.word	0x08013998

0801100c <fiprintf>:
 801100c:	b40e      	push	{r1, r2, r3}
 801100e:	b503      	push	{r0, r1, lr}
 8011010:	4601      	mov	r1, r0
 8011012:	ab03      	add	r3, sp, #12
 8011014:	4805      	ldr	r0, [pc, #20]	; (801102c <fiprintf+0x20>)
 8011016:	f853 2b04 	ldr.w	r2, [r3], #4
 801101a:	6800      	ldr	r0, [r0, #0]
 801101c:	9301      	str	r3, [sp, #4]
 801101e:	f000 f897 	bl	8011150 <_vfiprintf_r>
 8011022:	b002      	add	sp, #8
 8011024:	f85d eb04 	ldr.w	lr, [sp], #4
 8011028:	b003      	add	sp, #12
 801102a:	4770      	bx	lr
 801102c:	20000020 	.word	0x20000020

08011030 <__ascii_mbtowc>:
 8011030:	b082      	sub	sp, #8
 8011032:	b901      	cbnz	r1, 8011036 <__ascii_mbtowc+0x6>
 8011034:	a901      	add	r1, sp, #4
 8011036:	b142      	cbz	r2, 801104a <__ascii_mbtowc+0x1a>
 8011038:	b14b      	cbz	r3, 801104e <__ascii_mbtowc+0x1e>
 801103a:	7813      	ldrb	r3, [r2, #0]
 801103c:	600b      	str	r3, [r1, #0]
 801103e:	7812      	ldrb	r2, [r2, #0]
 8011040:	1e10      	subs	r0, r2, #0
 8011042:	bf18      	it	ne
 8011044:	2001      	movne	r0, #1
 8011046:	b002      	add	sp, #8
 8011048:	4770      	bx	lr
 801104a:	4610      	mov	r0, r2
 801104c:	e7fb      	b.n	8011046 <__ascii_mbtowc+0x16>
 801104e:	f06f 0001 	mvn.w	r0, #1
 8011052:	e7f8      	b.n	8011046 <__ascii_mbtowc+0x16>

08011054 <memmove>:
 8011054:	4288      	cmp	r0, r1
 8011056:	b510      	push	{r4, lr}
 8011058:	eb01 0402 	add.w	r4, r1, r2
 801105c:	d902      	bls.n	8011064 <memmove+0x10>
 801105e:	4284      	cmp	r4, r0
 8011060:	4623      	mov	r3, r4
 8011062:	d807      	bhi.n	8011074 <memmove+0x20>
 8011064:	1e43      	subs	r3, r0, #1
 8011066:	42a1      	cmp	r1, r4
 8011068:	d008      	beq.n	801107c <memmove+0x28>
 801106a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801106e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011072:	e7f8      	b.n	8011066 <memmove+0x12>
 8011074:	4402      	add	r2, r0
 8011076:	4601      	mov	r1, r0
 8011078:	428a      	cmp	r2, r1
 801107a:	d100      	bne.n	801107e <memmove+0x2a>
 801107c:	bd10      	pop	{r4, pc}
 801107e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011086:	e7f7      	b.n	8011078 <memmove+0x24>

08011088 <__malloc_lock>:
 8011088:	4801      	ldr	r0, [pc, #4]	; (8011090 <__malloc_lock+0x8>)
 801108a:	f000 bc1f 	b.w	80118cc <__retarget_lock_acquire_recursive>
 801108e:	bf00      	nop
 8011090:	20006324 	.word	0x20006324

08011094 <__malloc_unlock>:
 8011094:	4801      	ldr	r0, [pc, #4]	; (801109c <__malloc_unlock+0x8>)
 8011096:	f000 bc1a 	b.w	80118ce <__retarget_lock_release_recursive>
 801109a:	bf00      	nop
 801109c:	20006324 	.word	0x20006324

080110a0 <_realloc_r>:
 80110a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a4:	4680      	mov	r8, r0
 80110a6:	4614      	mov	r4, r2
 80110a8:	460e      	mov	r6, r1
 80110aa:	b921      	cbnz	r1, 80110b6 <_realloc_r+0x16>
 80110ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110b0:	4611      	mov	r1, r2
 80110b2:	f7ff bdad 	b.w	8010c10 <_malloc_r>
 80110b6:	b92a      	cbnz	r2, 80110c4 <_realloc_r+0x24>
 80110b8:	f7ff fd3e 	bl	8010b38 <_free_r>
 80110bc:	4625      	mov	r5, r4
 80110be:	4628      	mov	r0, r5
 80110c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c4:	f000 fc6a 	bl	801199c <_malloc_usable_size_r>
 80110c8:	4284      	cmp	r4, r0
 80110ca:	4607      	mov	r7, r0
 80110cc:	d802      	bhi.n	80110d4 <_realloc_r+0x34>
 80110ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110d2:	d812      	bhi.n	80110fa <_realloc_r+0x5a>
 80110d4:	4621      	mov	r1, r4
 80110d6:	4640      	mov	r0, r8
 80110d8:	f7ff fd9a 	bl	8010c10 <_malloc_r>
 80110dc:	4605      	mov	r5, r0
 80110de:	2800      	cmp	r0, #0
 80110e0:	d0ed      	beq.n	80110be <_realloc_r+0x1e>
 80110e2:	42bc      	cmp	r4, r7
 80110e4:	4622      	mov	r2, r4
 80110e6:	4631      	mov	r1, r6
 80110e8:	bf28      	it	cs
 80110ea:	463a      	movcs	r2, r7
 80110ec:	f7fd fe40 	bl	800ed70 <memcpy>
 80110f0:	4631      	mov	r1, r6
 80110f2:	4640      	mov	r0, r8
 80110f4:	f7ff fd20 	bl	8010b38 <_free_r>
 80110f8:	e7e1      	b.n	80110be <_realloc_r+0x1e>
 80110fa:	4635      	mov	r5, r6
 80110fc:	e7df      	b.n	80110be <_realloc_r+0x1e>

080110fe <__sfputc_r>:
 80110fe:	6893      	ldr	r3, [r2, #8]
 8011100:	3b01      	subs	r3, #1
 8011102:	2b00      	cmp	r3, #0
 8011104:	b410      	push	{r4}
 8011106:	6093      	str	r3, [r2, #8]
 8011108:	da08      	bge.n	801111c <__sfputc_r+0x1e>
 801110a:	6994      	ldr	r4, [r2, #24]
 801110c:	42a3      	cmp	r3, r4
 801110e:	db01      	blt.n	8011114 <__sfputc_r+0x16>
 8011110:	290a      	cmp	r1, #10
 8011112:	d103      	bne.n	801111c <__sfputc_r+0x1e>
 8011114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011118:	f000 b94a 	b.w	80113b0 <__swbuf_r>
 801111c:	6813      	ldr	r3, [r2, #0]
 801111e:	1c58      	adds	r0, r3, #1
 8011120:	6010      	str	r0, [r2, #0]
 8011122:	7019      	strb	r1, [r3, #0]
 8011124:	4608      	mov	r0, r1
 8011126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801112a:	4770      	bx	lr

0801112c <__sfputs_r>:
 801112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801112e:	4606      	mov	r6, r0
 8011130:	460f      	mov	r7, r1
 8011132:	4614      	mov	r4, r2
 8011134:	18d5      	adds	r5, r2, r3
 8011136:	42ac      	cmp	r4, r5
 8011138:	d101      	bne.n	801113e <__sfputs_r+0x12>
 801113a:	2000      	movs	r0, #0
 801113c:	e007      	b.n	801114e <__sfputs_r+0x22>
 801113e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011142:	463a      	mov	r2, r7
 8011144:	4630      	mov	r0, r6
 8011146:	f7ff ffda 	bl	80110fe <__sfputc_r>
 801114a:	1c43      	adds	r3, r0, #1
 801114c:	d1f3      	bne.n	8011136 <__sfputs_r+0xa>
 801114e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011150 <_vfiprintf_r>:
 8011150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	460d      	mov	r5, r1
 8011156:	b09d      	sub	sp, #116	; 0x74
 8011158:	4614      	mov	r4, r2
 801115a:	4698      	mov	r8, r3
 801115c:	4606      	mov	r6, r0
 801115e:	b118      	cbz	r0, 8011168 <_vfiprintf_r+0x18>
 8011160:	6983      	ldr	r3, [r0, #24]
 8011162:	b90b      	cbnz	r3, 8011168 <_vfiprintf_r+0x18>
 8011164:	f000 fb14 	bl	8011790 <__sinit>
 8011168:	4b89      	ldr	r3, [pc, #548]	; (8011390 <_vfiprintf_r+0x240>)
 801116a:	429d      	cmp	r5, r3
 801116c:	d11b      	bne.n	80111a6 <_vfiprintf_r+0x56>
 801116e:	6875      	ldr	r5, [r6, #4]
 8011170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011172:	07d9      	lsls	r1, r3, #31
 8011174:	d405      	bmi.n	8011182 <_vfiprintf_r+0x32>
 8011176:	89ab      	ldrh	r3, [r5, #12]
 8011178:	059a      	lsls	r2, r3, #22
 801117a:	d402      	bmi.n	8011182 <_vfiprintf_r+0x32>
 801117c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801117e:	f000 fba5 	bl	80118cc <__retarget_lock_acquire_recursive>
 8011182:	89ab      	ldrh	r3, [r5, #12]
 8011184:	071b      	lsls	r3, r3, #28
 8011186:	d501      	bpl.n	801118c <_vfiprintf_r+0x3c>
 8011188:	692b      	ldr	r3, [r5, #16]
 801118a:	b9eb      	cbnz	r3, 80111c8 <_vfiprintf_r+0x78>
 801118c:	4629      	mov	r1, r5
 801118e:	4630      	mov	r0, r6
 8011190:	f000 f96e 	bl	8011470 <__swsetup_r>
 8011194:	b1c0      	cbz	r0, 80111c8 <_vfiprintf_r+0x78>
 8011196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011198:	07dc      	lsls	r4, r3, #31
 801119a:	d50e      	bpl.n	80111ba <_vfiprintf_r+0x6a>
 801119c:	f04f 30ff 	mov.w	r0, #4294967295
 80111a0:	b01d      	add	sp, #116	; 0x74
 80111a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a6:	4b7b      	ldr	r3, [pc, #492]	; (8011394 <_vfiprintf_r+0x244>)
 80111a8:	429d      	cmp	r5, r3
 80111aa:	d101      	bne.n	80111b0 <_vfiprintf_r+0x60>
 80111ac:	68b5      	ldr	r5, [r6, #8]
 80111ae:	e7df      	b.n	8011170 <_vfiprintf_r+0x20>
 80111b0:	4b79      	ldr	r3, [pc, #484]	; (8011398 <_vfiprintf_r+0x248>)
 80111b2:	429d      	cmp	r5, r3
 80111b4:	bf08      	it	eq
 80111b6:	68f5      	ldreq	r5, [r6, #12]
 80111b8:	e7da      	b.n	8011170 <_vfiprintf_r+0x20>
 80111ba:	89ab      	ldrh	r3, [r5, #12]
 80111bc:	0598      	lsls	r0, r3, #22
 80111be:	d4ed      	bmi.n	801119c <_vfiprintf_r+0x4c>
 80111c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111c2:	f000 fb84 	bl	80118ce <__retarget_lock_release_recursive>
 80111c6:	e7e9      	b.n	801119c <_vfiprintf_r+0x4c>
 80111c8:	2300      	movs	r3, #0
 80111ca:	9309      	str	r3, [sp, #36]	; 0x24
 80111cc:	2320      	movs	r3, #32
 80111ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80111d6:	2330      	movs	r3, #48	; 0x30
 80111d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801139c <_vfiprintf_r+0x24c>
 80111dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111e0:	f04f 0901 	mov.w	r9, #1
 80111e4:	4623      	mov	r3, r4
 80111e6:	469a      	mov	sl, r3
 80111e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ec:	b10a      	cbz	r2, 80111f2 <_vfiprintf_r+0xa2>
 80111ee:	2a25      	cmp	r2, #37	; 0x25
 80111f0:	d1f9      	bne.n	80111e6 <_vfiprintf_r+0x96>
 80111f2:	ebba 0b04 	subs.w	fp, sl, r4
 80111f6:	d00b      	beq.n	8011210 <_vfiprintf_r+0xc0>
 80111f8:	465b      	mov	r3, fp
 80111fa:	4622      	mov	r2, r4
 80111fc:	4629      	mov	r1, r5
 80111fe:	4630      	mov	r0, r6
 8011200:	f7ff ff94 	bl	801112c <__sfputs_r>
 8011204:	3001      	adds	r0, #1
 8011206:	f000 80aa 	beq.w	801135e <_vfiprintf_r+0x20e>
 801120a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801120c:	445a      	add	r2, fp
 801120e:	9209      	str	r2, [sp, #36]	; 0x24
 8011210:	f89a 3000 	ldrb.w	r3, [sl]
 8011214:	2b00      	cmp	r3, #0
 8011216:	f000 80a2 	beq.w	801135e <_vfiprintf_r+0x20e>
 801121a:	2300      	movs	r3, #0
 801121c:	f04f 32ff 	mov.w	r2, #4294967295
 8011220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011224:	f10a 0a01 	add.w	sl, sl, #1
 8011228:	9304      	str	r3, [sp, #16]
 801122a:	9307      	str	r3, [sp, #28]
 801122c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011230:	931a      	str	r3, [sp, #104]	; 0x68
 8011232:	4654      	mov	r4, sl
 8011234:	2205      	movs	r2, #5
 8011236:	f814 1b01 	ldrb.w	r1, [r4], #1
 801123a:	4858      	ldr	r0, [pc, #352]	; (801139c <_vfiprintf_r+0x24c>)
 801123c:	f7ee ffe8 	bl	8000210 <memchr>
 8011240:	9a04      	ldr	r2, [sp, #16]
 8011242:	b9d8      	cbnz	r0, 801127c <_vfiprintf_r+0x12c>
 8011244:	06d1      	lsls	r1, r2, #27
 8011246:	bf44      	itt	mi
 8011248:	2320      	movmi	r3, #32
 801124a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801124e:	0713      	lsls	r3, r2, #28
 8011250:	bf44      	itt	mi
 8011252:	232b      	movmi	r3, #43	; 0x2b
 8011254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011258:	f89a 3000 	ldrb.w	r3, [sl]
 801125c:	2b2a      	cmp	r3, #42	; 0x2a
 801125e:	d015      	beq.n	801128c <_vfiprintf_r+0x13c>
 8011260:	9a07      	ldr	r2, [sp, #28]
 8011262:	4654      	mov	r4, sl
 8011264:	2000      	movs	r0, #0
 8011266:	f04f 0c0a 	mov.w	ip, #10
 801126a:	4621      	mov	r1, r4
 801126c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011270:	3b30      	subs	r3, #48	; 0x30
 8011272:	2b09      	cmp	r3, #9
 8011274:	d94e      	bls.n	8011314 <_vfiprintf_r+0x1c4>
 8011276:	b1b0      	cbz	r0, 80112a6 <_vfiprintf_r+0x156>
 8011278:	9207      	str	r2, [sp, #28]
 801127a:	e014      	b.n	80112a6 <_vfiprintf_r+0x156>
 801127c:	eba0 0308 	sub.w	r3, r0, r8
 8011280:	fa09 f303 	lsl.w	r3, r9, r3
 8011284:	4313      	orrs	r3, r2
 8011286:	9304      	str	r3, [sp, #16]
 8011288:	46a2      	mov	sl, r4
 801128a:	e7d2      	b.n	8011232 <_vfiprintf_r+0xe2>
 801128c:	9b03      	ldr	r3, [sp, #12]
 801128e:	1d19      	adds	r1, r3, #4
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	9103      	str	r1, [sp, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	bfbb      	ittet	lt
 8011298:	425b      	neglt	r3, r3
 801129a:	f042 0202 	orrlt.w	r2, r2, #2
 801129e:	9307      	strge	r3, [sp, #28]
 80112a0:	9307      	strlt	r3, [sp, #28]
 80112a2:	bfb8      	it	lt
 80112a4:	9204      	strlt	r2, [sp, #16]
 80112a6:	7823      	ldrb	r3, [r4, #0]
 80112a8:	2b2e      	cmp	r3, #46	; 0x2e
 80112aa:	d10c      	bne.n	80112c6 <_vfiprintf_r+0x176>
 80112ac:	7863      	ldrb	r3, [r4, #1]
 80112ae:	2b2a      	cmp	r3, #42	; 0x2a
 80112b0:	d135      	bne.n	801131e <_vfiprintf_r+0x1ce>
 80112b2:	9b03      	ldr	r3, [sp, #12]
 80112b4:	1d1a      	adds	r2, r3, #4
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	9203      	str	r2, [sp, #12]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	bfb8      	it	lt
 80112be:	f04f 33ff 	movlt.w	r3, #4294967295
 80112c2:	3402      	adds	r4, #2
 80112c4:	9305      	str	r3, [sp, #20]
 80112c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113ac <_vfiprintf_r+0x25c>
 80112ca:	7821      	ldrb	r1, [r4, #0]
 80112cc:	2203      	movs	r2, #3
 80112ce:	4650      	mov	r0, sl
 80112d0:	f7ee ff9e 	bl	8000210 <memchr>
 80112d4:	b140      	cbz	r0, 80112e8 <_vfiprintf_r+0x198>
 80112d6:	2340      	movs	r3, #64	; 0x40
 80112d8:	eba0 000a 	sub.w	r0, r0, sl
 80112dc:	fa03 f000 	lsl.w	r0, r3, r0
 80112e0:	9b04      	ldr	r3, [sp, #16]
 80112e2:	4303      	orrs	r3, r0
 80112e4:	3401      	adds	r4, #1
 80112e6:	9304      	str	r3, [sp, #16]
 80112e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ec:	482c      	ldr	r0, [pc, #176]	; (80113a0 <_vfiprintf_r+0x250>)
 80112ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112f2:	2206      	movs	r2, #6
 80112f4:	f7ee ff8c 	bl	8000210 <memchr>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d03f      	beq.n	801137c <_vfiprintf_r+0x22c>
 80112fc:	4b29      	ldr	r3, [pc, #164]	; (80113a4 <_vfiprintf_r+0x254>)
 80112fe:	bb1b      	cbnz	r3, 8011348 <_vfiprintf_r+0x1f8>
 8011300:	9b03      	ldr	r3, [sp, #12]
 8011302:	3307      	adds	r3, #7
 8011304:	f023 0307 	bic.w	r3, r3, #7
 8011308:	3308      	adds	r3, #8
 801130a:	9303      	str	r3, [sp, #12]
 801130c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801130e:	443b      	add	r3, r7
 8011310:	9309      	str	r3, [sp, #36]	; 0x24
 8011312:	e767      	b.n	80111e4 <_vfiprintf_r+0x94>
 8011314:	fb0c 3202 	mla	r2, ip, r2, r3
 8011318:	460c      	mov	r4, r1
 801131a:	2001      	movs	r0, #1
 801131c:	e7a5      	b.n	801126a <_vfiprintf_r+0x11a>
 801131e:	2300      	movs	r3, #0
 8011320:	3401      	adds	r4, #1
 8011322:	9305      	str	r3, [sp, #20]
 8011324:	4619      	mov	r1, r3
 8011326:	f04f 0c0a 	mov.w	ip, #10
 801132a:	4620      	mov	r0, r4
 801132c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011330:	3a30      	subs	r2, #48	; 0x30
 8011332:	2a09      	cmp	r2, #9
 8011334:	d903      	bls.n	801133e <_vfiprintf_r+0x1ee>
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0c5      	beq.n	80112c6 <_vfiprintf_r+0x176>
 801133a:	9105      	str	r1, [sp, #20]
 801133c:	e7c3      	b.n	80112c6 <_vfiprintf_r+0x176>
 801133e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011342:	4604      	mov	r4, r0
 8011344:	2301      	movs	r3, #1
 8011346:	e7f0      	b.n	801132a <_vfiprintf_r+0x1da>
 8011348:	ab03      	add	r3, sp, #12
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	462a      	mov	r2, r5
 801134e:	4b16      	ldr	r3, [pc, #88]	; (80113a8 <_vfiprintf_r+0x258>)
 8011350:	a904      	add	r1, sp, #16
 8011352:	4630      	mov	r0, r6
 8011354:	f7fd fdc2 	bl	800eedc <_printf_float>
 8011358:	4607      	mov	r7, r0
 801135a:	1c78      	adds	r0, r7, #1
 801135c:	d1d6      	bne.n	801130c <_vfiprintf_r+0x1bc>
 801135e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011360:	07d9      	lsls	r1, r3, #31
 8011362:	d405      	bmi.n	8011370 <_vfiprintf_r+0x220>
 8011364:	89ab      	ldrh	r3, [r5, #12]
 8011366:	059a      	lsls	r2, r3, #22
 8011368:	d402      	bmi.n	8011370 <_vfiprintf_r+0x220>
 801136a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801136c:	f000 faaf 	bl	80118ce <__retarget_lock_release_recursive>
 8011370:	89ab      	ldrh	r3, [r5, #12]
 8011372:	065b      	lsls	r3, r3, #25
 8011374:	f53f af12 	bmi.w	801119c <_vfiprintf_r+0x4c>
 8011378:	9809      	ldr	r0, [sp, #36]	; 0x24
 801137a:	e711      	b.n	80111a0 <_vfiprintf_r+0x50>
 801137c:	ab03      	add	r3, sp, #12
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	462a      	mov	r2, r5
 8011382:	4b09      	ldr	r3, [pc, #36]	; (80113a8 <_vfiprintf_r+0x258>)
 8011384:	a904      	add	r1, sp, #16
 8011386:	4630      	mov	r0, r6
 8011388:	f7fe f84c 	bl	800f424 <_printf_i>
 801138c:	e7e4      	b.n	8011358 <_vfiprintf_r+0x208>
 801138e:	bf00      	nop
 8011390:	08013ac4 	.word	0x08013ac4
 8011394:	08013ae4 	.word	0x08013ae4
 8011398:	08013aa4 	.word	0x08013aa4
 801139c:	0801394c 	.word	0x0801394c
 80113a0:	08013956 	.word	0x08013956
 80113a4:	0800eedd 	.word	0x0800eedd
 80113a8:	0801112d 	.word	0x0801112d
 80113ac:	08013952 	.word	0x08013952

080113b0 <__swbuf_r>:
 80113b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113b2:	460e      	mov	r6, r1
 80113b4:	4614      	mov	r4, r2
 80113b6:	4605      	mov	r5, r0
 80113b8:	b118      	cbz	r0, 80113c2 <__swbuf_r+0x12>
 80113ba:	6983      	ldr	r3, [r0, #24]
 80113bc:	b90b      	cbnz	r3, 80113c2 <__swbuf_r+0x12>
 80113be:	f000 f9e7 	bl	8011790 <__sinit>
 80113c2:	4b21      	ldr	r3, [pc, #132]	; (8011448 <__swbuf_r+0x98>)
 80113c4:	429c      	cmp	r4, r3
 80113c6:	d12b      	bne.n	8011420 <__swbuf_r+0x70>
 80113c8:	686c      	ldr	r4, [r5, #4]
 80113ca:	69a3      	ldr	r3, [r4, #24]
 80113cc:	60a3      	str	r3, [r4, #8]
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	071a      	lsls	r2, r3, #28
 80113d2:	d52f      	bpl.n	8011434 <__swbuf_r+0x84>
 80113d4:	6923      	ldr	r3, [r4, #16]
 80113d6:	b36b      	cbz	r3, 8011434 <__swbuf_r+0x84>
 80113d8:	6923      	ldr	r3, [r4, #16]
 80113da:	6820      	ldr	r0, [r4, #0]
 80113dc:	1ac0      	subs	r0, r0, r3
 80113de:	6963      	ldr	r3, [r4, #20]
 80113e0:	b2f6      	uxtb	r6, r6
 80113e2:	4283      	cmp	r3, r0
 80113e4:	4637      	mov	r7, r6
 80113e6:	dc04      	bgt.n	80113f2 <__swbuf_r+0x42>
 80113e8:	4621      	mov	r1, r4
 80113ea:	4628      	mov	r0, r5
 80113ec:	f000 f93c 	bl	8011668 <_fflush_r>
 80113f0:	bb30      	cbnz	r0, 8011440 <__swbuf_r+0x90>
 80113f2:	68a3      	ldr	r3, [r4, #8]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	60a3      	str	r3, [r4, #8]
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	1c5a      	adds	r2, r3, #1
 80113fc:	6022      	str	r2, [r4, #0]
 80113fe:	701e      	strb	r6, [r3, #0]
 8011400:	6963      	ldr	r3, [r4, #20]
 8011402:	3001      	adds	r0, #1
 8011404:	4283      	cmp	r3, r0
 8011406:	d004      	beq.n	8011412 <__swbuf_r+0x62>
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	07db      	lsls	r3, r3, #31
 801140c:	d506      	bpl.n	801141c <__swbuf_r+0x6c>
 801140e:	2e0a      	cmp	r6, #10
 8011410:	d104      	bne.n	801141c <__swbuf_r+0x6c>
 8011412:	4621      	mov	r1, r4
 8011414:	4628      	mov	r0, r5
 8011416:	f000 f927 	bl	8011668 <_fflush_r>
 801141a:	b988      	cbnz	r0, 8011440 <__swbuf_r+0x90>
 801141c:	4638      	mov	r0, r7
 801141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011420:	4b0a      	ldr	r3, [pc, #40]	; (801144c <__swbuf_r+0x9c>)
 8011422:	429c      	cmp	r4, r3
 8011424:	d101      	bne.n	801142a <__swbuf_r+0x7a>
 8011426:	68ac      	ldr	r4, [r5, #8]
 8011428:	e7cf      	b.n	80113ca <__swbuf_r+0x1a>
 801142a:	4b09      	ldr	r3, [pc, #36]	; (8011450 <__swbuf_r+0xa0>)
 801142c:	429c      	cmp	r4, r3
 801142e:	bf08      	it	eq
 8011430:	68ec      	ldreq	r4, [r5, #12]
 8011432:	e7ca      	b.n	80113ca <__swbuf_r+0x1a>
 8011434:	4621      	mov	r1, r4
 8011436:	4628      	mov	r0, r5
 8011438:	f000 f81a 	bl	8011470 <__swsetup_r>
 801143c:	2800      	cmp	r0, #0
 801143e:	d0cb      	beq.n	80113d8 <__swbuf_r+0x28>
 8011440:	f04f 37ff 	mov.w	r7, #4294967295
 8011444:	e7ea      	b.n	801141c <__swbuf_r+0x6c>
 8011446:	bf00      	nop
 8011448:	08013ac4 	.word	0x08013ac4
 801144c:	08013ae4 	.word	0x08013ae4
 8011450:	08013aa4 	.word	0x08013aa4

08011454 <__ascii_wctomb>:
 8011454:	b149      	cbz	r1, 801146a <__ascii_wctomb+0x16>
 8011456:	2aff      	cmp	r2, #255	; 0xff
 8011458:	bf85      	ittet	hi
 801145a:	238a      	movhi	r3, #138	; 0x8a
 801145c:	6003      	strhi	r3, [r0, #0]
 801145e:	700a      	strbls	r2, [r1, #0]
 8011460:	f04f 30ff 	movhi.w	r0, #4294967295
 8011464:	bf98      	it	ls
 8011466:	2001      	movls	r0, #1
 8011468:	4770      	bx	lr
 801146a:	4608      	mov	r0, r1
 801146c:	4770      	bx	lr
	...

08011470 <__swsetup_r>:
 8011470:	4b32      	ldr	r3, [pc, #200]	; (801153c <__swsetup_r+0xcc>)
 8011472:	b570      	push	{r4, r5, r6, lr}
 8011474:	681d      	ldr	r5, [r3, #0]
 8011476:	4606      	mov	r6, r0
 8011478:	460c      	mov	r4, r1
 801147a:	b125      	cbz	r5, 8011486 <__swsetup_r+0x16>
 801147c:	69ab      	ldr	r3, [r5, #24]
 801147e:	b913      	cbnz	r3, 8011486 <__swsetup_r+0x16>
 8011480:	4628      	mov	r0, r5
 8011482:	f000 f985 	bl	8011790 <__sinit>
 8011486:	4b2e      	ldr	r3, [pc, #184]	; (8011540 <__swsetup_r+0xd0>)
 8011488:	429c      	cmp	r4, r3
 801148a:	d10f      	bne.n	80114ac <__swsetup_r+0x3c>
 801148c:	686c      	ldr	r4, [r5, #4]
 801148e:	89a3      	ldrh	r3, [r4, #12]
 8011490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011494:	0719      	lsls	r1, r3, #28
 8011496:	d42c      	bmi.n	80114f2 <__swsetup_r+0x82>
 8011498:	06dd      	lsls	r5, r3, #27
 801149a:	d411      	bmi.n	80114c0 <__swsetup_r+0x50>
 801149c:	2309      	movs	r3, #9
 801149e:	6033      	str	r3, [r6, #0]
 80114a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80114a4:	81a3      	strh	r3, [r4, #12]
 80114a6:	f04f 30ff 	mov.w	r0, #4294967295
 80114aa:	e03e      	b.n	801152a <__swsetup_r+0xba>
 80114ac:	4b25      	ldr	r3, [pc, #148]	; (8011544 <__swsetup_r+0xd4>)
 80114ae:	429c      	cmp	r4, r3
 80114b0:	d101      	bne.n	80114b6 <__swsetup_r+0x46>
 80114b2:	68ac      	ldr	r4, [r5, #8]
 80114b4:	e7eb      	b.n	801148e <__swsetup_r+0x1e>
 80114b6:	4b24      	ldr	r3, [pc, #144]	; (8011548 <__swsetup_r+0xd8>)
 80114b8:	429c      	cmp	r4, r3
 80114ba:	bf08      	it	eq
 80114bc:	68ec      	ldreq	r4, [r5, #12]
 80114be:	e7e6      	b.n	801148e <__swsetup_r+0x1e>
 80114c0:	0758      	lsls	r0, r3, #29
 80114c2:	d512      	bpl.n	80114ea <__swsetup_r+0x7a>
 80114c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114c6:	b141      	cbz	r1, 80114da <__swsetup_r+0x6a>
 80114c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114cc:	4299      	cmp	r1, r3
 80114ce:	d002      	beq.n	80114d6 <__swsetup_r+0x66>
 80114d0:	4630      	mov	r0, r6
 80114d2:	f7ff fb31 	bl	8010b38 <_free_r>
 80114d6:	2300      	movs	r3, #0
 80114d8:	6363      	str	r3, [r4, #52]	; 0x34
 80114da:	89a3      	ldrh	r3, [r4, #12]
 80114dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114e0:	81a3      	strh	r3, [r4, #12]
 80114e2:	2300      	movs	r3, #0
 80114e4:	6063      	str	r3, [r4, #4]
 80114e6:	6923      	ldr	r3, [r4, #16]
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	89a3      	ldrh	r3, [r4, #12]
 80114ec:	f043 0308 	orr.w	r3, r3, #8
 80114f0:	81a3      	strh	r3, [r4, #12]
 80114f2:	6923      	ldr	r3, [r4, #16]
 80114f4:	b94b      	cbnz	r3, 801150a <__swsetup_r+0x9a>
 80114f6:	89a3      	ldrh	r3, [r4, #12]
 80114f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80114fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011500:	d003      	beq.n	801150a <__swsetup_r+0x9a>
 8011502:	4621      	mov	r1, r4
 8011504:	4630      	mov	r0, r6
 8011506:	f000 fa09 	bl	801191c <__smakebuf_r>
 801150a:	89a0      	ldrh	r0, [r4, #12]
 801150c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011510:	f010 0301 	ands.w	r3, r0, #1
 8011514:	d00a      	beq.n	801152c <__swsetup_r+0xbc>
 8011516:	2300      	movs	r3, #0
 8011518:	60a3      	str	r3, [r4, #8]
 801151a:	6963      	ldr	r3, [r4, #20]
 801151c:	425b      	negs	r3, r3
 801151e:	61a3      	str	r3, [r4, #24]
 8011520:	6923      	ldr	r3, [r4, #16]
 8011522:	b943      	cbnz	r3, 8011536 <__swsetup_r+0xc6>
 8011524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011528:	d1ba      	bne.n	80114a0 <__swsetup_r+0x30>
 801152a:	bd70      	pop	{r4, r5, r6, pc}
 801152c:	0781      	lsls	r1, r0, #30
 801152e:	bf58      	it	pl
 8011530:	6963      	ldrpl	r3, [r4, #20]
 8011532:	60a3      	str	r3, [r4, #8]
 8011534:	e7f4      	b.n	8011520 <__swsetup_r+0xb0>
 8011536:	2000      	movs	r0, #0
 8011538:	e7f7      	b.n	801152a <__swsetup_r+0xba>
 801153a:	bf00      	nop
 801153c:	20000020 	.word	0x20000020
 8011540:	08013ac4 	.word	0x08013ac4
 8011544:	08013ae4 	.word	0x08013ae4
 8011548:	08013aa4 	.word	0x08013aa4

0801154c <abort>:
 801154c:	b508      	push	{r3, lr}
 801154e:	2006      	movs	r0, #6
 8011550:	f000 fa54 	bl	80119fc <raise>
 8011554:	2001      	movs	r0, #1
 8011556:	f7f4 fa7b 	bl	8005a50 <_exit>
	...

0801155c <__sflush_r>:
 801155c:	898a      	ldrh	r2, [r1, #12]
 801155e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011562:	4605      	mov	r5, r0
 8011564:	0710      	lsls	r0, r2, #28
 8011566:	460c      	mov	r4, r1
 8011568:	d458      	bmi.n	801161c <__sflush_r+0xc0>
 801156a:	684b      	ldr	r3, [r1, #4]
 801156c:	2b00      	cmp	r3, #0
 801156e:	dc05      	bgt.n	801157c <__sflush_r+0x20>
 8011570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011572:	2b00      	cmp	r3, #0
 8011574:	dc02      	bgt.n	801157c <__sflush_r+0x20>
 8011576:	2000      	movs	r0, #0
 8011578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801157c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801157e:	2e00      	cmp	r6, #0
 8011580:	d0f9      	beq.n	8011576 <__sflush_r+0x1a>
 8011582:	2300      	movs	r3, #0
 8011584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011588:	682f      	ldr	r7, [r5, #0]
 801158a:	602b      	str	r3, [r5, #0]
 801158c:	d032      	beq.n	80115f4 <__sflush_r+0x98>
 801158e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011590:	89a3      	ldrh	r3, [r4, #12]
 8011592:	075a      	lsls	r2, r3, #29
 8011594:	d505      	bpl.n	80115a2 <__sflush_r+0x46>
 8011596:	6863      	ldr	r3, [r4, #4]
 8011598:	1ac0      	subs	r0, r0, r3
 801159a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801159c:	b10b      	cbz	r3, 80115a2 <__sflush_r+0x46>
 801159e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115a0:	1ac0      	subs	r0, r0, r3
 80115a2:	2300      	movs	r3, #0
 80115a4:	4602      	mov	r2, r0
 80115a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115a8:	6a21      	ldr	r1, [r4, #32]
 80115aa:	4628      	mov	r0, r5
 80115ac:	47b0      	blx	r6
 80115ae:	1c43      	adds	r3, r0, #1
 80115b0:	89a3      	ldrh	r3, [r4, #12]
 80115b2:	d106      	bne.n	80115c2 <__sflush_r+0x66>
 80115b4:	6829      	ldr	r1, [r5, #0]
 80115b6:	291d      	cmp	r1, #29
 80115b8:	d82c      	bhi.n	8011614 <__sflush_r+0xb8>
 80115ba:	4a2a      	ldr	r2, [pc, #168]	; (8011664 <__sflush_r+0x108>)
 80115bc:	40ca      	lsrs	r2, r1
 80115be:	07d6      	lsls	r6, r2, #31
 80115c0:	d528      	bpl.n	8011614 <__sflush_r+0xb8>
 80115c2:	2200      	movs	r2, #0
 80115c4:	6062      	str	r2, [r4, #4]
 80115c6:	04d9      	lsls	r1, r3, #19
 80115c8:	6922      	ldr	r2, [r4, #16]
 80115ca:	6022      	str	r2, [r4, #0]
 80115cc:	d504      	bpl.n	80115d8 <__sflush_r+0x7c>
 80115ce:	1c42      	adds	r2, r0, #1
 80115d0:	d101      	bne.n	80115d6 <__sflush_r+0x7a>
 80115d2:	682b      	ldr	r3, [r5, #0]
 80115d4:	b903      	cbnz	r3, 80115d8 <__sflush_r+0x7c>
 80115d6:	6560      	str	r0, [r4, #84]	; 0x54
 80115d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115da:	602f      	str	r7, [r5, #0]
 80115dc:	2900      	cmp	r1, #0
 80115de:	d0ca      	beq.n	8011576 <__sflush_r+0x1a>
 80115e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115e4:	4299      	cmp	r1, r3
 80115e6:	d002      	beq.n	80115ee <__sflush_r+0x92>
 80115e8:	4628      	mov	r0, r5
 80115ea:	f7ff faa5 	bl	8010b38 <_free_r>
 80115ee:	2000      	movs	r0, #0
 80115f0:	6360      	str	r0, [r4, #52]	; 0x34
 80115f2:	e7c1      	b.n	8011578 <__sflush_r+0x1c>
 80115f4:	6a21      	ldr	r1, [r4, #32]
 80115f6:	2301      	movs	r3, #1
 80115f8:	4628      	mov	r0, r5
 80115fa:	47b0      	blx	r6
 80115fc:	1c41      	adds	r1, r0, #1
 80115fe:	d1c7      	bne.n	8011590 <__sflush_r+0x34>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d0c4      	beq.n	8011590 <__sflush_r+0x34>
 8011606:	2b1d      	cmp	r3, #29
 8011608:	d001      	beq.n	801160e <__sflush_r+0xb2>
 801160a:	2b16      	cmp	r3, #22
 801160c:	d101      	bne.n	8011612 <__sflush_r+0xb6>
 801160e:	602f      	str	r7, [r5, #0]
 8011610:	e7b1      	b.n	8011576 <__sflush_r+0x1a>
 8011612:	89a3      	ldrh	r3, [r4, #12]
 8011614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011618:	81a3      	strh	r3, [r4, #12]
 801161a:	e7ad      	b.n	8011578 <__sflush_r+0x1c>
 801161c:	690f      	ldr	r7, [r1, #16]
 801161e:	2f00      	cmp	r7, #0
 8011620:	d0a9      	beq.n	8011576 <__sflush_r+0x1a>
 8011622:	0793      	lsls	r3, r2, #30
 8011624:	680e      	ldr	r6, [r1, #0]
 8011626:	bf08      	it	eq
 8011628:	694b      	ldreq	r3, [r1, #20]
 801162a:	600f      	str	r7, [r1, #0]
 801162c:	bf18      	it	ne
 801162e:	2300      	movne	r3, #0
 8011630:	eba6 0807 	sub.w	r8, r6, r7
 8011634:	608b      	str	r3, [r1, #8]
 8011636:	f1b8 0f00 	cmp.w	r8, #0
 801163a:	dd9c      	ble.n	8011576 <__sflush_r+0x1a>
 801163c:	6a21      	ldr	r1, [r4, #32]
 801163e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011640:	4643      	mov	r3, r8
 8011642:	463a      	mov	r2, r7
 8011644:	4628      	mov	r0, r5
 8011646:	47b0      	blx	r6
 8011648:	2800      	cmp	r0, #0
 801164a:	dc06      	bgt.n	801165a <__sflush_r+0xfe>
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011652:	81a3      	strh	r3, [r4, #12]
 8011654:	f04f 30ff 	mov.w	r0, #4294967295
 8011658:	e78e      	b.n	8011578 <__sflush_r+0x1c>
 801165a:	4407      	add	r7, r0
 801165c:	eba8 0800 	sub.w	r8, r8, r0
 8011660:	e7e9      	b.n	8011636 <__sflush_r+0xda>
 8011662:	bf00      	nop
 8011664:	20400001 	.word	0x20400001

08011668 <_fflush_r>:
 8011668:	b538      	push	{r3, r4, r5, lr}
 801166a:	690b      	ldr	r3, [r1, #16]
 801166c:	4605      	mov	r5, r0
 801166e:	460c      	mov	r4, r1
 8011670:	b913      	cbnz	r3, 8011678 <_fflush_r+0x10>
 8011672:	2500      	movs	r5, #0
 8011674:	4628      	mov	r0, r5
 8011676:	bd38      	pop	{r3, r4, r5, pc}
 8011678:	b118      	cbz	r0, 8011682 <_fflush_r+0x1a>
 801167a:	6983      	ldr	r3, [r0, #24]
 801167c:	b90b      	cbnz	r3, 8011682 <_fflush_r+0x1a>
 801167e:	f000 f887 	bl	8011790 <__sinit>
 8011682:	4b14      	ldr	r3, [pc, #80]	; (80116d4 <_fflush_r+0x6c>)
 8011684:	429c      	cmp	r4, r3
 8011686:	d11b      	bne.n	80116c0 <_fflush_r+0x58>
 8011688:	686c      	ldr	r4, [r5, #4]
 801168a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d0ef      	beq.n	8011672 <_fflush_r+0xa>
 8011692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011694:	07d0      	lsls	r0, r2, #31
 8011696:	d404      	bmi.n	80116a2 <_fflush_r+0x3a>
 8011698:	0599      	lsls	r1, r3, #22
 801169a:	d402      	bmi.n	80116a2 <_fflush_r+0x3a>
 801169c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801169e:	f000 f915 	bl	80118cc <__retarget_lock_acquire_recursive>
 80116a2:	4628      	mov	r0, r5
 80116a4:	4621      	mov	r1, r4
 80116a6:	f7ff ff59 	bl	801155c <__sflush_r>
 80116aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116ac:	07da      	lsls	r2, r3, #31
 80116ae:	4605      	mov	r5, r0
 80116b0:	d4e0      	bmi.n	8011674 <_fflush_r+0xc>
 80116b2:	89a3      	ldrh	r3, [r4, #12]
 80116b4:	059b      	lsls	r3, r3, #22
 80116b6:	d4dd      	bmi.n	8011674 <_fflush_r+0xc>
 80116b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ba:	f000 f908 	bl	80118ce <__retarget_lock_release_recursive>
 80116be:	e7d9      	b.n	8011674 <_fflush_r+0xc>
 80116c0:	4b05      	ldr	r3, [pc, #20]	; (80116d8 <_fflush_r+0x70>)
 80116c2:	429c      	cmp	r4, r3
 80116c4:	d101      	bne.n	80116ca <_fflush_r+0x62>
 80116c6:	68ac      	ldr	r4, [r5, #8]
 80116c8:	e7df      	b.n	801168a <_fflush_r+0x22>
 80116ca:	4b04      	ldr	r3, [pc, #16]	; (80116dc <_fflush_r+0x74>)
 80116cc:	429c      	cmp	r4, r3
 80116ce:	bf08      	it	eq
 80116d0:	68ec      	ldreq	r4, [r5, #12]
 80116d2:	e7da      	b.n	801168a <_fflush_r+0x22>
 80116d4:	08013ac4 	.word	0x08013ac4
 80116d8:	08013ae4 	.word	0x08013ae4
 80116dc:	08013aa4 	.word	0x08013aa4

080116e0 <std>:
 80116e0:	2300      	movs	r3, #0
 80116e2:	b510      	push	{r4, lr}
 80116e4:	4604      	mov	r4, r0
 80116e6:	e9c0 3300 	strd	r3, r3, [r0]
 80116ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116ee:	6083      	str	r3, [r0, #8]
 80116f0:	8181      	strh	r1, [r0, #12]
 80116f2:	6643      	str	r3, [r0, #100]	; 0x64
 80116f4:	81c2      	strh	r2, [r0, #14]
 80116f6:	6183      	str	r3, [r0, #24]
 80116f8:	4619      	mov	r1, r3
 80116fa:	2208      	movs	r2, #8
 80116fc:	305c      	adds	r0, #92	; 0x5c
 80116fe:	f7fd fb45 	bl	800ed8c <memset>
 8011702:	4b05      	ldr	r3, [pc, #20]	; (8011718 <std+0x38>)
 8011704:	6263      	str	r3, [r4, #36]	; 0x24
 8011706:	4b05      	ldr	r3, [pc, #20]	; (801171c <std+0x3c>)
 8011708:	62a3      	str	r3, [r4, #40]	; 0x28
 801170a:	4b05      	ldr	r3, [pc, #20]	; (8011720 <std+0x40>)
 801170c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801170e:	4b05      	ldr	r3, [pc, #20]	; (8011724 <std+0x44>)
 8011710:	6224      	str	r4, [r4, #32]
 8011712:	6323      	str	r3, [r4, #48]	; 0x30
 8011714:	bd10      	pop	{r4, pc}
 8011716:	bf00      	nop
 8011718:	08011a35 	.word	0x08011a35
 801171c:	08011a57 	.word	0x08011a57
 8011720:	08011a8f 	.word	0x08011a8f
 8011724:	08011ab3 	.word	0x08011ab3

08011728 <_cleanup_r>:
 8011728:	4901      	ldr	r1, [pc, #4]	; (8011730 <_cleanup_r+0x8>)
 801172a:	f000 b8af 	b.w	801188c <_fwalk_reent>
 801172e:	bf00      	nop
 8011730:	08011669 	.word	0x08011669

08011734 <__sfmoreglue>:
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	2268      	movs	r2, #104	; 0x68
 8011738:	1e4d      	subs	r5, r1, #1
 801173a:	4355      	muls	r5, r2
 801173c:	460e      	mov	r6, r1
 801173e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011742:	f7ff fa65 	bl	8010c10 <_malloc_r>
 8011746:	4604      	mov	r4, r0
 8011748:	b140      	cbz	r0, 801175c <__sfmoreglue+0x28>
 801174a:	2100      	movs	r1, #0
 801174c:	e9c0 1600 	strd	r1, r6, [r0]
 8011750:	300c      	adds	r0, #12
 8011752:	60a0      	str	r0, [r4, #8]
 8011754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011758:	f7fd fb18 	bl	800ed8c <memset>
 801175c:	4620      	mov	r0, r4
 801175e:	bd70      	pop	{r4, r5, r6, pc}

08011760 <__sfp_lock_acquire>:
 8011760:	4801      	ldr	r0, [pc, #4]	; (8011768 <__sfp_lock_acquire+0x8>)
 8011762:	f000 b8b3 	b.w	80118cc <__retarget_lock_acquire_recursive>
 8011766:	bf00      	nop
 8011768:	20006325 	.word	0x20006325

0801176c <__sfp_lock_release>:
 801176c:	4801      	ldr	r0, [pc, #4]	; (8011774 <__sfp_lock_release+0x8>)
 801176e:	f000 b8ae 	b.w	80118ce <__retarget_lock_release_recursive>
 8011772:	bf00      	nop
 8011774:	20006325 	.word	0x20006325

08011778 <__sinit_lock_acquire>:
 8011778:	4801      	ldr	r0, [pc, #4]	; (8011780 <__sinit_lock_acquire+0x8>)
 801177a:	f000 b8a7 	b.w	80118cc <__retarget_lock_acquire_recursive>
 801177e:	bf00      	nop
 8011780:	20006326 	.word	0x20006326

08011784 <__sinit_lock_release>:
 8011784:	4801      	ldr	r0, [pc, #4]	; (801178c <__sinit_lock_release+0x8>)
 8011786:	f000 b8a2 	b.w	80118ce <__retarget_lock_release_recursive>
 801178a:	bf00      	nop
 801178c:	20006326 	.word	0x20006326

08011790 <__sinit>:
 8011790:	b510      	push	{r4, lr}
 8011792:	4604      	mov	r4, r0
 8011794:	f7ff fff0 	bl	8011778 <__sinit_lock_acquire>
 8011798:	69a3      	ldr	r3, [r4, #24]
 801179a:	b11b      	cbz	r3, 80117a4 <__sinit+0x14>
 801179c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117a0:	f7ff bff0 	b.w	8011784 <__sinit_lock_release>
 80117a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117a8:	6523      	str	r3, [r4, #80]	; 0x50
 80117aa:	4b13      	ldr	r3, [pc, #76]	; (80117f8 <__sinit+0x68>)
 80117ac:	4a13      	ldr	r2, [pc, #76]	; (80117fc <__sinit+0x6c>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80117b2:	42a3      	cmp	r3, r4
 80117b4:	bf04      	itt	eq
 80117b6:	2301      	moveq	r3, #1
 80117b8:	61a3      	streq	r3, [r4, #24]
 80117ba:	4620      	mov	r0, r4
 80117bc:	f000 f820 	bl	8011800 <__sfp>
 80117c0:	6060      	str	r0, [r4, #4]
 80117c2:	4620      	mov	r0, r4
 80117c4:	f000 f81c 	bl	8011800 <__sfp>
 80117c8:	60a0      	str	r0, [r4, #8]
 80117ca:	4620      	mov	r0, r4
 80117cc:	f000 f818 	bl	8011800 <__sfp>
 80117d0:	2200      	movs	r2, #0
 80117d2:	60e0      	str	r0, [r4, #12]
 80117d4:	2104      	movs	r1, #4
 80117d6:	6860      	ldr	r0, [r4, #4]
 80117d8:	f7ff ff82 	bl	80116e0 <std>
 80117dc:	68a0      	ldr	r0, [r4, #8]
 80117de:	2201      	movs	r2, #1
 80117e0:	2109      	movs	r1, #9
 80117e2:	f7ff ff7d 	bl	80116e0 <std>
 80117e6:	68e0      	ldr	r0, [r4, #12]
 80117e8:	2202      	movs	r2, #2
 80117ea:	2112      	movs	r1, #18
 80117ec:	f7ff ff78 	bl	80116e0 <std>
 80117f0:	2301      	movs	r3, #1
 80117f2:	61a3      	str	r3, [r4, #24]
 80117f4:	e7d2      	b.n	801179c <__sinit+0xc>
 80117f6:	bf00      	nop
 80117f8:	08013728 	.word	0x08013728
 80117fc:	08011729 	.word	0x08011729

08011800 <__sfp>:
 8011800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011802:	4607      	mov	r7, r0
 8011804:	f7ff ffac 	bl	8011760 <__sfp_lock_acquire>
 8011808:	4b1e      	ldr	r3, [pc, #120]	; (8011884 <__sfp+0x84>)
 801180a:	681e      	ldr	r6, [r3, #0]
 801180c:	69b3      	ldr	r3, [r6, #24]
 801180e:	b913      	cbnz	r3, 8011816 <__sfp+0x16>
 8011810:	4630      	mov	r0, r6
 8011812:	f7ff ffbd 	bl	8011790 <__sinit>
 8011816:	3648      	adds	r6, #72	; 0x48
 8011818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801181c:	3b01      	subs	r3, #1
 801181e:	d503      	bpl.n	8011828 <__sfp+0x28>
 8011820:	6833      	ldr	r3, [r6, #0]
 8011822:	b30b      	cbz	r3, 8011868 <__sfp+0x68>
 8011824:	6836      	ldr	r6, [r6, #0]
 8011826:	e7f7      	b.n	8011818 <__sfp+0x18>
 8011828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801182c:	b9d5      	cbnz	r5, 8011864 <__sfp+0x64>
 801182e:	4b16      	ldr	r3, [pc, #88]	; (8011888 <__sfp+0x88>)
 8011830:	60e3      	str	r3, [r4, #12]
 8011832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011836:	6665      	str	r5, [r4, #100]	; 0x64
 8011838:	f000 f847 	bl	80118ca <__retarget_lock_init_recursive>
 801183c:	f7ff ff96 	bl	801176c <__sfp_lock_release>
 8011840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011848:	6025      	str	r5, [r4, #0]
 801184a:	61a5      	str	r5, [r4, #24]
 801184c:	2208      	movs	r2, #8
 801184e:	4629      	mov	r1, r5
 8011850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011854:	f7fd fa9a 	bl	800ed8c <memset>
 8011858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801185c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011860:	4620      	mov	r0, r4
 8011862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011864:	3468      	adds	r4, #104	; 0x68
 8011866:	e7d9      	b.n	801181c <__sfp+0x1c>
 8011868:	2104      	movs	r1, #4
 801186a:	4638      	mov	r0, r7
 801186c:	f7ff ff62 	bl	8011734 <__sfmoreglue>
 8011870:	4604      	mov	r4, r0
 8011872:	6030      	str	r0, [r6, #0]
 8011874:	2800      	cmp	r0, #0
 8011876:	d1d5      	bne.n	8011824 <__sfp+0x24>
 8011878:	f7ff ff78 	bl	801176c <__sfp_lock_release>
 801187c:	230c      	movs	r3, #12
 801187e:	603b      	str	r3, [r7, #0]
 8011880:	e7ee      	b.n	8011860 <__sfp+0x60>
 8011882:	bf00      	nop
 8011884:	08013728 	.word	0x08013728
 8011888:	ffff0001 	.word	0xffff0001

0801188c <_fwalk_reent>:
 801188c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011890:	4606      	mov	r6, r0
 8011892:	4688      	mov	r8, r1
 8011894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011898:	2700      	movs	r7, #0
 801189a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801189e:	f1b9 0901 	subs.w	r9, r9, #1
 80118a2:	d505      	bpl.n	80118b0 <_fwalk_reent+0x24>
 80118a4:	6824      	ldr	r4, [r4, #0]
 80118a6:	2c00      	cmp	r4, #0
 80118a8:	d1f7      	bne.n	801189a <_fwalk_reent+0xe>
 80118aa:	4638      	mov	r0, r7
 80118ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b0:	89ab      	ldrh	r3, [r5, #12]
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	d907      	bls.n	80118c6 <_fwalk_reent+0x3a>
 80118b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118ba:	3301      	adds	r3, #1
 80118bc:	d003      	beq.n	80118c6 <_fwalk_reent+0x3a>
 80118be:	4629      	mov	r1, r5
 80118c0:	4630      	mov	r0, r6
 80118c2:	47c0      	blx	r8
 80118c4:	4307      	orrs	r7, r0
 80118c6:	3568      	adds	r5, #104	; 0x68
 80118c8:	e7e9      	b.n	801189e <_fwalk_reent+0x12>

080118ca <__retarget_lock_init_recursive>:
 80118ca:	4770      	bx	lr

080118cc <__retarget_lock_acquire_recursive>:
 80118cc:	4770      	bx	lr

080118ce <__retarget_lock_release_recursive>:
 80118ce:	4770      	bx	lr

080118d0 <__swhatbuf_r>:
 80118d0:	b570      	push	{r4, r5, r6, lr}
 80118d2:	460e      	mov	r6, r1
 80118d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d8:	2900      	cmp	r1, #0
 80118da:	b096      	sub	sp, #88	; 0x58
 80118dc:	4614      	mov	r4, r2
 80118de:	461d      	mov	r5, r3
 80118e0:	da08      	bge.n	80118f4 <__swhatbuf_r+0x24>
 80118e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80118e6:	2200      	movs	r2, #0
 80118e8:	602a      	str	r2, [r5, #0]
 80118ea:	061a      	lsls	r2, r3, #24
 80118ec:	d410      	bmi.n	8011910 <__swhatbuf_r+0x40>
 80118ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118f2:	e00e      	b.n	8011912 <__swhatbuf_r+0x42>
 80118f4:	466a      	mov	r2, sp
 80118f6:	f000 f903 	bl	8011b00 <_fstat_r>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	dbf1      	blt.n	80118e2 <__swhatbuf_r+0x12>
 80118fe:	9a01      	ldr	r2, [sp, #4]
 8011900:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011904:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011908:	425a      	negs	r2, r3
 801190a:	415a      	adcs	r2, r3
 801190c:	602a      	str	r2, [r5, #0]
 801190e:	e7ee      	b.n	80118ee <__swhatbuf_r+0x1e>
 8011910:	2340      	movs	r3, #64	; 0x40
 8011912:	2000      	movs	r0, #0
 8011914:	6023      	str	r3, [r4, #0]
 8011916:	b016      	add	sp, #88	; 0x58
 8011918:	bd70      	pop	{r4, r5, r6, pc}
	...

0801191c <__smakebuf_r>:
 801191c:	898b      	ldrh	r3, [r1, #12]
 801191e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011920:	079d      	lsls	r5, r3, #30
 8011922:	4606      	mov	r6, r0
 8011924:	460c      	mov	r4, r1
 8011926:	d507      	bpl.n	8011938 <__smakebuf_r+0x1c>
 8011928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801192c:	6023      	str	r3, [r4, #0]
 801192e:	6123      	str	r3, [r4, #16]
 8011930:	2301      	movs	r3, #1
 8011932:	6163      	str	r3, [r4, #20]
 8011934:	b002      	add	sp, #8
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	ab01      	add	r3, sp, #4
 801193a:	466a      	mov	r2, sp
 801193c:	f7ff ffc8 	bl	80118d0 <__swhatbuf_r>
 8011940:	9900      	ldr	r1, [sp, #0]
 8011942:	4605      	mov	r5, r0
 8011944:	4630      	mov	r0, r6
 8011946:	f7ff f963 	bl	8010c10 <_malloc_r>
 801194a:	b948      	cbnz	r0, 8011960 <__smakebuf_r+0x44>
 801194c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011950:	059a      	lsls	r2, r3, #22
 8011952:	d4ef      	bmi.n	8011934 <__smakebuf_r+0x18>
 8011954:	f023 0303 	bic.w	r3, r3, #3
 8011958:	f043 0302 	orr.w	r3, r3, #2
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	e7e3      	b.n	8011928 <__smakebuf_r+0xc>
 8011960:	4b0d      	ldr	r3, [pc, #52]	; (8011998 <__smakebuf_r+0x7c>)
 8011962:	62b3      	str	r3, [r6, #40]	; 0x28
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	6020      	str	r0, [r4, #0]
 8011968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801196c:	81a3      	strh	r3, [r4, #12]
 801196e:	9b00      	ldr	r3, [sp, #0]
 8011970:	6163      	str	r3, [r4, #20]
 8011972:	9b01      	ldr	r3, [sp, #4]
 8011974:	6120      	str	r0, [r4, #16]
 8011976:	b15b      	cbz	r3, 8011990 <__smakebuf_r+0x74>
 8011978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801197c:	4630      	mov	r0, r6
 801197e:	f000 f8d1 	bl	8011b24 <_isatty_r>
 8011982:	b128      	cbz	r0, 8011990 <__smakebuf_r+0x74>
 8011984:	89a3      	ldrh	r3, [r4, #12]
 8011986:	f023 0303 	bic.w	r3, r3, #3
 801198a:	f043 0301 	orr.w	r3, r3, #1
 801198e:	81a3      	strh	r3, [r4, #12]
 8011990:	89a0      	ldrh	r0, [r4, #12]
 8011992:	4305      	orrs	r5, r0
 8011994:	81a5      	strh	r5, [r4, #12]
 8011996:	e7cd      	b.n	8011934 <__smakebuf_r+0x18>
 8011998:	08011729 	.word	0x08011729

0801199c <_malloc_usable_size_r>:
 801199c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119a0:	1f18      	subs	r0, r3, #4
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	bfbc      	itt	lt
 80119a6:	580b      	ldrlt	r3, [r1, r0]
 80119a8:	18c0      	addlt	r0, r0, r3
 80119aa:	4770      	bx	lr

080119ac <_raise_r>:
 80119ac:	291f      	cmp	r1, #31
 80119ae:	b538      	push	{r3, r4, r5, lr}
 80119b0:	4604      	mov	r4, r0
 80119b2:	460d      	mov	r5, r1
 80119b4:	d904      	bls.n	80119c0 <_raise_r+0x14>
 80119b6:	2316      	movs	r3, #22
 80119b8:	6003      	str	r3, [r0, #0]
 80119ba:	f04f 30ff 	mov.w	r0, #4294967295
 80119be:	bd38      	pop	{r3, r4, r5, pc}
 80119c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80119c2:	b112      	cbz	r2, 80119ca <_raise_r+0x1e>
 80119c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119c8:	b94b      	cbnz	r3, 80119de <_raise_r+0x32>
 80119ca:	4620      	mov	r0, r4
 80119cc:	f000 f830 	bl	8011a30 <_getpid_r>
 80119d0:	462a      	mov	r2, r5
 80119d2:	4601      	mov	r1, r0
 80119d4:	4620      	mov	r0, r4
 80119d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119da:	f000 b817 	b.w	8011a0c <_kill_r>
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d00a      	beq.n	80119f8 <_raise_r+0x4c>
 80119e2:	1c59      	adds	r1, r3, #1
 80119e4:	d103      	bne.n	80119ee <_raise_r+0x42>
 80119e6:	2316      	movs	r3, #22
 80119e8:	6003      	str	r3, [r0, #0]
 80119ea:	2001      	movs	r0, #1
 80119ec:	e7e7      	b.n	80119be <_raise_r+0x12>
 80119ee:	2400      	movs	r4, #0
 80119f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119f4:	4628      	mov	r0, r5
 80119f6:	4798      	blx	r3
 80119f8:	2000      	movs	r0, #0
 80119fa:	e7e0      	b.n	80119be <_raise_r+0x12>

080119fc <raise>:
 80119fc:	4b02      	ldr	r3, [pc, #8]	; (8011a08 <raise+0xc>)
 80119fe:	4601      	mov	r1, r0
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	f7ff bfd3 	b.w	80119ac <_raise_r>
 8011a06:	bf00      	nop
 8011a08:	20000020 	.word	0x20000020

08011a0c <_kill_r>:
 8011a0c:	b538      	push	{r3, r4, r5, lr}
 8011a0e:	4d07      	ldr	r5, [pc, #28]	; (8011a2c <_kill_r+0x20>)
 8011a10:	2300      	movs	r3, #0
 8011a12:	4604      	mov	r4, r0
 8011a14:	4608      	mov	r0, r1
 8011a16:	4611      	mov	r1, r2
 8011a18:	602b      	str	r3, [r5, #0]
 8011a1a:	f7f4 f809 	bl	8005a30 <_kill>
 8011a1e:	1c43      	adds	r3, r0, #1
 8011a20:	d102      	bne.n	8011a28 <_kill_r+0x1c>
 8011a22:	682b      	ldr	r3, [r5, #0]
 8011a24:	b103      	cbz	r3, 8011a28 <_kill_r+0x1c>
 8011a26:	6023      	str	r3, [r4, #0]
 8011a28:	bd38      	pop	{r3, r4, r5, pc}
 8011a2a:	bf00      	nop
 8011a2c:	20006320 	.word	0x20006320

08011a30 <_getpid_r>:
 8011a30:	f7f3 bff6 	b.w	8005a20 <_getpid>

08011a34 <__sread>:
 8011a34:	b510      	push	{r4, lr}
 8011a36:	460c      	mov	r4, r1
 8011a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3c:	f000 f894 	bl	8011b68 <_read_r>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	bfab      	itete	ge
 8011a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a46:	89a3      	ldrhlt	r3, [r4, #12]
 8011a48:	181b      	addge	r3, r3, r0
 8011a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a4e:	bfac      	ite	ge
 8011a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a52:	81a3      	strhlt	r3, [r4, #12]
 8011a54:	bd10      	pop	{r4, pc}

08011a56 <__swrite>:
 8011a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5a:	461f      	mov	r7, r3
 8011a5c:	898b      	ldrh	r3, [r1, #12]
 8011a5e:	05db      	lsls	r3, r3, #23
 8011a60:	4605      	mov	r5, r0
 8011a62:	460c      	mov	r4, r1
 8011a64:	4616      	mov	r6, r2
 8011a66:	d505      	bpl.n	8011a74 <__swrite+0x1e>
 8011a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a6c:	2302      	movs	r3, #2
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f000 f868 	bl	8011b44 <_lseek_r>
 8011a74:	89a3      	ldrh	r3, [r4, #12]
 8011a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a7e:	81a3      	strh	r3, [r4, #12]
 8011a80:	4632      	mov	r2, r6
 8011a82:	463b      	mov	r3, r7
 8011a84:	4628      	mov	r0, r5
 8011a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8a:	f000 b817 	b.w	8011abc <_write_r>

08011a8e <__sseek>:
 8011a8e:	b510      	push	{r4, lr}
 8011a90:	460c      	mov	r4, r1
 8011a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a96:	f000 f855 	bl	8011b44 <_lseek_r>
 8011a9a:	1c43      	adds	r3, r0, #1
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	bf15      	itete	ne
 8011aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aaa:	81a3      	strheq	r3, [r4, #12]
 8011aac:	bf18      	it	ne
 8011aae:	81a3      	strhne	r3, [r4, #12]
 8011ab0:	bd10      	pop	{r4, pc}

08011ab2 <__sclose>:
 8011ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab6:	f000 b813 	b.w	8011ae0 <_close_r>
	...

08011abc <_write_r>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	4d07      	ldr	r5, [pc, #28]	; (8011adc <_write_r+0x20>)
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	4608      	mov	r0, r1
 8011ac4:	4611      	mov	r1, r2
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	602a      	str	r2, [r5, #0]
 8011aca:	461a      	mov	r2, r3
 8011acc:	f7f3 ffe7 	bl	8005a9e <_write>
 8011ad0:	1c43      	adds	r3, r0, #1
 8011ad2:	d102      	bne.n	8011ada <_write_r+0x1e>
 8011ad4:	682b      	ldr	r3, [r5, #0]
 8011ad6:	b103      	cbz	r3, 8011ada <_write_r+0x1e>
 8011ad8:	6023      	str	r3, [r4, #0]
 8011ada:	bd38      	pop	{r3, r4, r5, pc}
 8011adc:	20006320 	.word	0x20006320

08011ae0 <_close_r>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	4d06      	ldr	r5, [pc, #24]	; (8011afc <_close_r+0x1c>)
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	4608      	mov	r0, r1
 8011aea:	602b      	str	r3, [r5, #0]
 8011aec:	f7f3 fff3 	bl	8005ad6 <_close>
 8011af0:	1c43      	adds	r3, r0, #1
 8011af2:	d102      	bne.n	8011afa <_close_r+0x1a>
 8011af4:	682b      	ldr	r3, [r5, #0]
 8011af6:	b103      	cbz	r3, 8011afa <_close_r+0x1a>
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	bd38      	pop	{r3, r4, r5, pc}
 8011afc:	20006320 	.word	0x20006320

08011b00 <_fstat_r>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	4d07      	ldr	r5, [pc, #28]	; (8011b20 <_fstat_r+0x20>)
 8011b04:	2300      	movs	r3, #0
 8011b06:	4604      	mov	r4, r0
 8011b08:	4608      	mov	r0, r1
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	602b      	str	r3, [r5, #0]
 8011b0e:	f7f3 ffee 	bl	8005aee <_fstat>
 8011b12:	1c43      	adds	r3, r0, #1
 8011b14:	d102      	bne.n	8011b1c <_fstat_r+0x1c>
 8011b16:	682b      	ldr	r3, [r5, #0]
 8011b18:	b103      	cbz	r3, 8011b1c <_fstat_r+0x1c>
 8011b1a:	6023      	str	r3, [r4, #0]
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	bf00      	nop
 8011b20:	20006320 	.word	0x20006320

08011b24 <_isatty_r>:
 8011b24:	b538      	push	{r3, r4, r5, lr}
 8011b26:	4d06      	ldr	r5, [pc, #24]	; (8011b40 <_isatty_r+0x1c>)
 8011b28:	2300      	movs	r3, #0
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	4608      	mov	r0, r1
 8011b2e:	602b      	str	r3, [r5, #0]
 8011b30:	f7f3 ffed 	bl	8005b0e <_isatty>
 8011b34:	1c43      	adds	r3, r0, #1
 8011b36:	d102      	bne.n	8011b3e <_isatty_r+0x1a>
 8011b38:	682b      	ldr	r3, [r5, #0]
 8011b3a:	b103      	cbz	r3, 8011b3e <_isatty_r+0x1a>
 8011b3c:	6023      	str	r3, [r4, #0]
 8011b3e:	bd38      	pop	{r3, r4, r5, pc}
 8011b40:	20006320 	.word	0x20006320

08011b44 <_lseek_r>:
 8011b44:	b538      	push	{r3, r4, r5, lr}
 8011b46:	4d07      	ldr	r5, [pc, #28]	; (8011b64 <_lseek_r+0x20>)
 8011b48:	4604      	mov	r4, r0
 8011b4a:	4608      	mov	r0, r1
 8011b4c:	4611      	mov	r1, r2
 8011b4e:	2200      	movs	r2, #0
 8011b50:	602a      	str	r2, [r5, #0]
 8011b52:	461a      	mov	r2, r3
 8011b54:	f7f3 ffe6 	bl	8005b24 <_lseek>
 8011b58:	1c43      	adds	r3, r0, #1
 8011b5a:	d102      	bne.n	8011b62 <_lseek_r+0x1e>
 8011b5c:	682b      	ldr	r3, [r5, #0]
 8011b5e:	b103      	cbz	r3, 8011b62 <_lseek_r+0x1e>
 8011b60:	6023      	str	r3, [r4, #0]
 8011b62:	bd38      	pop	{r3, r4, r5, pc}
 8011b64:	20006320 	.word	0x20006320

08011b68 <_read_r>:
 8011b68:	b538      	push	{r3, r4, r5, lr}
 8011b6a:	4d07      	ldr	r5, [pc, #28]	; (8011b88 <_read_r+0x20>)
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	4608      	mov	r0, r1
 8011b70:	4611      	mov	r1, r2
 8011b72:	2200      	movs	r2, #0
 8011b74:	602a      	str	r2, [r5, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	f7f3 ff74 	bl	8005a64 <_read>
 8011b7c:	1c43      	adds	r3, r0, #1
 8011b7e:	d102      	bne.n	8011b86 <_read_r+0x1e>
 8011b80:	682b      	ldr	r3, [r5, #0]
 8011b82:	b103      	cbz	r3, 8011b86 <_read_r+0x1e>
 8011b84:	6023      	str	r3, [r4, #0]
 8011b86:	bd38      	pop	{r3, r4, r5, pc}
 8011b88:	20006320 	.word	0x20006320

08011b8c <cosf>:
 8011b8c:	ee10 3a10 	vmov	r3, s0
 8011b90:	b507      	push	{r0, r1, r2, lr}
 8011b92:	4a1e      	ldr	r2, [pc, #120]	; (8011c0c <cosf+0x80>)
 8011b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	dc06      	bgt.n	8011baa <cosf+0x1e>
 8011b9c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8011c10 <cosf+0x84>
 8011ba0:	b003      	add	sp, #12
 8011ba2:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ba6:	f000 be95 	b.w	80128d4 <__kernel_cosf>
 8011baa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011bae:	db04      	blt.n	8011bba <cosf+0x2e>
 8011bb0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011bb4:	b003      	add	sp, #12
 8011bb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bba:	4668      	mov	r0, sp
 8011bbc:	f000 fd4a 	bl	8012654 <__ieee754_rem_pio2f>
 8011bc0:	f000 0003 	and.w	r0, r0, #3
 8011bc4:	2801      	cmp	r0, #1
 8011bc6:	d009      	beq.n	8011bdc <cosf+0x50>
 8011bc8:	2802      	cmp	r0, #2
 8011bca:	d010      	beq.n	8011bee <cosf+0x62>
 8011bcc:	b9b0      	cbnz	r0, 8011bfc <cosf+0x70>
 8011bce:	eddd 0a01 	vldr	s1, [sp, #4]
 8011bd2:	ed9d 0a00 	vldr	s0, [sp]
 8011bd6:	f000 fe7d 	bl	80128d4 <__kernel_cosf>
 8011bda:	e7eb      	b.n	8011bb4 <cosf+0x28>
 8011bdc:	eddd 0a01 	vldr	s1, [sp, #4]
 8011be0:	ed9d 0a00 	vldr	s0, [sp]
 8011be4:	f001 f94c 	bl	8012e80 <__kernel_sinf>
 8011be8:	eeb1 0a40 	vneg.f32	s0, s0
 8011bec:	e7e2      	b.n	8011bb4 <cosf+0x28>
 8011bee:	eddd 0a01 	vldr	s1, [sp, #4]
 8011bf2:	ed9d 0a00 	vldr	s0, [sp]
 8011bf6:	f000 fe6d 	bl	80128d4 <__kernel_cosf>
 8011bfa:	e7f5      	b.n	8011be8 <cosf+0x5c>
 8011bfc:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c00:	ed9d 0a00 	vldr	s0, [sp]
 8011c04:	2001      	movs	r0, #1
 8011c06:	f001 f93b 	bl	8012e80 <__kernel_sinf>
 8011c0a:	e7d3      	b.n	8011bb4 <cosf+0x28>
 8011c0c:	3f490fd8 	.word	0x3f490fd8
 8011c10:	00000000 	.word	0x00000000

08011c14 <sinf>:
 8011c14:	ee10 3a10 	vmov	r3, s0
 8011c18:	b507      	push	{r0, r1, r2, lr}
 8011c1a:	4a1f      	ldr	r2, [pc, #124]	; (8011c98 <sinf+0x84>)
 8011c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c20:	4293      	cmp	r3, r2
 8011c22:	dc07      	bgt.n	8011c34 <sinf+0x20>
 8011c24:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8011c9c <sinf+0x88>
 8011c28:	2000      	movs	r0, #0
 8011c2a:	b003      	add	sp, #12
 8011c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c30:	f001 b926 	b.w	8012e80 <__kernel_sinf>
 8011c34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011c38:	db04      	blt.n	8011c44 <sinf+0x30>
 8011c3a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011c3e:	b003      	add	sp, #12
 8011c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c44:	4668      	mov	r0, sp
 8011c46:	f000 fd05 	bl	8012654 <__ieee754_rem_pio2f>
 8011c4a:	f000 0003 	and.w	r0, r0, #3
 8011c4e:	2801      	cmp	r0, #1
 8011c50:	d00a      	beq.n	8011c68 <sinf+0x54>
 8011c52:	2802      	cmp	r0, #2
 8011c54:	d00f      	beq.n	8011c76 <sinf+0x62>
 8011c56:	b9c0      	cbnz	r0, 8011c8a <sinf+0x76>
 8011c58:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c5c:	ed9d 0a00 	vldr	s0, [sp]
 8011c60:	2001      	movs	r0, #1
 8011c62:	f001 f90d 	bl	8012e80 <__kernel_sinf>
 8011c66:	e7ea      	b.n	8011c3e <sinf+0x2a>
 8011c68:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c6c:	ed9d 0a00 	vldr	s0, [sp]
 8011c70:	f000 fe30 	bl	80128d4 <__kernel_cosf>
 8011c74:	e7e3      	b.n	8011c3e <sinf+0x2a>
 8011c76:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c7a:	ed9d 0a00 	vldr	s0, [sp]
 8011c7e:	2001      	movs	r0, #1
 8011c80:	f001 f8fe 	bl	8012e80 <__kernel_sinf>
 8011c84:	eeb1 0a40 	vneg.f32	s0, s0
 8011c88:	e7d9      	b.n	8011c3e <sinf+0x2a>
 8011c8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c8e:	ed9d 0a00 	vldr	s0, [sp]
 8011c92:	f000 fe1f 	bl	80128d4 <__kernel_cosf>
 8011c96:	e7f5      	b.n	8011c84 <sinf+0x70>
 8011c98:	3f490fd8 	.word	0x3f490fd8
 8011c9c:	00000000 	.word	0x00000000

08011ca0 <asinf>:
 8011ca0:	b508      	push	{r3, lr}
 8011ca2:	ed2d 8b02 	vpush	{d8}
 8011ca6:	eeb0 8a40 	vmov.f32	s16, s0
 8011caa:	f000 f87f 	bl	8011dac <__ieee754_asinf>
 8011cae:	eeb4 8a48 	vcmp.f32	s16, s16
 8011cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb6:	eef0 8a40 	vmov.f32	s17, s0
 8011cba:	d615      	bvs.n	8011ce8 <asinf+0x48>
 8011cbc:	eeb0 0a48 	vmov.f32	s0, s16
 8011cc0:	f001 fa1c 	bl	80130fc <fabsf>
 8011cc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011cc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd0:	dd0a      	ble.n	8011ce8 <asinf+0x48>
 8011cd2:	f7fd f823 	bl	800ed1c <__errno>
 8011cd6:	ecbd 8b02 	vpop	{d8}
 8011cda:	2321      	movs	r3, #33	; 0x21
 8011cdc:	6003      	str	r3, [r0, #0]
 8011cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011ce2:	4804      	ldr	r0, [pc, #16]	; (8011cf4 <asinf+0x54>)
 8011ce4:	f001 ba60 	b.w	80131a8 <nanf>
 8011ce8:	eeb0 0a68 	vmov.f32	s0, s17
 8011cec:	ecbd 8b02 	vpop	{d8}
 8011cf0:	bd08      	pop	{r3, pc}
 8011cf2:	bf00      	nop
 8011cf4:	08013998 	.word	0x08013998

08011cf8 <atan2f>:
 8011cf8:	f000 b93e 	b.w	8011f78 <__ieee754_atan2f>

08011cfc <powf>:
 8011cfc:	b508      	push	{r3, lr}
 8011cfe:	ed2d 8b04 	vpush	{d8-d9}
 8011d02:	eeb0 8a60 	vmov.f32	s16, s1
 8011d06:	eeb0 9a40 	vmov.f32	s18, s0
 8011d0a:	f000 f9d5 	bl	80120b8 <__ieee754_powf>
 8011d0e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d16:	eef0 8a40 	vmov.f32	s17, s0
 8011d1a:	d63e      	bvs.n	8011d9a <powf+0x9e>
 8011d1c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d24:	d112      	bne.n	8011d4c <powf+0x50>
 8011d26:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2e:	d039      	beq.n	8011da4 <powf+0xa8>
 8011d30:	eeb0 0a48 	vmov.f32	s0, s16
 8011d34:	f001 f9e9 	bl	801310a <finitef>
 8011d38:	b378      	cbz	r0, 8011d9a <powf+0x9e>
 8011d3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d42:	d52a      	bpl.n	8011d9a <powf+0x9e>
 8011d44:	f7fc ffea 	bl	800ed1c <__errno>
 8011d48:	2322      	movs	r3, #34	; 0x22
 8011d4a:	e014      	b.n	8011d76 <powf+0x7a>
 8011d4c:	f001 f9dd 	bl	801310a <finitef>
 8011d50:	b998      	cbnz	r0, 8011d7a <powf+0x7e>
 8011d52:	eeb0 0a49 	vmov.f32	s0, s18
 8011d56:	f001 f9d8 	bl	801310a <finitef>
 8011d5a:	b170      	cbz	r0, 8011d7a <powf+0x7e>
 8011d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8011d60:	f001 f9d3 	bl	801310a <finitef>
 8011d64:	b148      	cbz	r0, 8011d7a <powf+0x7e>
 8011d66:	eef4 8a68 	vcmp.f32	s17, s17
 8011d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6e:	d7e9      	bvc.n	8011d44 <powf+0x48>
 8011d70:	f7fc ffd4 	bl	800ed1c <__errno>
 8011d74:	2321      	movs	r3, #33	; 0x21
 8011d76:	6003      	str	r3, [r0, #0]
 8011d78:	e00f      	b.n	8011d9a <powf+0x9e>
 8011d7a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d82:	d10a      	bne.n	8011d9a <powf+0x9e>
 8011d84:	eeb0 0a49 	vmov.f32	s0, s18
 8011d88:	f001 f9bf 	bl	801310a <finitef>
 8011d8c:	b128      	cbz	r0, 8011d9a <powf+0x9e>
 8011d8e:	eeb0 0a48 	vmov.f32	s0, s16
 8011d92:	f001 f9ba 	bl	801310a <finitef>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d1d4      	bne.n	8011d44 <powf+0x48>
 8011d9a:	eeb0 0a68 	vmov.f32	s0, s17
 8011d9e:	ecbd 8b04 	vpop	{d8-d9}
 8011da2:	bd08      	pop	{r3, pc}
 8011da4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011da8:	e7f7      	b.n	8011d9a <powf+0x9e>
	...

08011dac <__ieee754_asinf>:
 8011dac:	b538      	push	{r3, r4, r5, lr}
 8011dae:	ee10 5a10 	vmov	r5, s0
 8011db2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011db6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011dba:	ed2d 8b04 	vpush	{d8-d9}
 8011dbe:	d10c      	bne.n	8011dda <__ieee754_asinf+0x2e>
 8011dc0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8011f38 <__ieee754_asinf+0x18c>
 8011dc4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8011f3c <__ieee754_asinf+0x190>
 8011dc8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011dcc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8011dd4:	ecbd 8b04 	vpop	{d8-d9}
 8011dd8:	bd38      	pop	{r3, r4, r5, pc}
 8011dda:	dd04      	ble.n	8011de6 <__ieee754_asinf+0x3a>
 8011ddc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011de0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011de4:	e7f6      	b.n	8011dd4 <__ieee754_asinf+0x28>
 8011de6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8011dea:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011dee:	da0b      	bge.n	8011e08 <__ieee754_asinf+0x5c>
 8011df0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8011df4:	da52      	bge.n	8011e9c <__ieee754_asinf+0xf0>
 8011df6:	eddf 7a52 	vldr	s15, [pc, #328]	; 8011f40 <__ieee754_asinf+0x194>
 8011dfa:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011dfe:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e06:	dce5      	bgt.n	8011dd4 <__ieee754_asinf+0x28>
 8011e08:	f001 f978 	bl	80130fc <fabsf>
 8011e0c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8011e10:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8011e14:	ee20 8a08 	vmul.f32	s16, s0, s16
 8011e18:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8011f44 <__ieee754_asinf+0x198>
 8011e1c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8011f48 <__ieee754_asinf+0x19c>
 8011e20:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8011f4c <__ieee754_asinf+0x1a0>
 8011e24:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011e28:	eddf 7a49 	vldr	s15, [pc, #292]	; 8011f50 <__ieee754_asinf+0x1a4>
 8011e2c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011e30:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8011f54 <__ieee754_asinf+0x1a8>
 8011e34:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011e38:	eddf 7a47 	vldr	s15, [pc, #284]	; 8011f58 <__ieee754_asinf+0x1ac>
 8011e3c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011e40:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8011f5c <__ieee754_asinf+0x1b0>
 8011e44:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011e48:	eddf 7a45 	vldr	s15, [pc, #276]	; 8011f60 <__ieee754_asinf+0x1b4>
 8011e4c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8011e50:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8011f64 <__ieee754_asinf+0x1b8>
 8011e54:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011e58:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011f68 <__ieee754_asinf+0x1bc>
 8011e5c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011e60:	eeb0 0a48 	vmov.f32	s0, s16
 8011e64:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011e68:	f000 fd30 	bl	80128cc <__ieee754_sqrtf>
 8011e6c:	4b3f      	ldr	r3, [pc, #252]	; (8011f6c <__ieee754_asinf+0x1c0>)
 8011e6e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8011e72:	429c      	cmp	r4, r3
 8011e74:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8011e78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011e7c:	dd3d      	ble.n	8011efa <__ieee754_asinf+0x14e>
 8011e7e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8011e82:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8011f70 <__ieee754_asinf+0x1c4>
 8011e86:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011e8a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8011f3c <__ieee754_asinf+0x190>
 8011e8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e92:	2d00      	cmp	r5, #0
 8011e94:	bfd8      	it	le
 8011e96:	eeb1 0a40 	vnegle.f32	s0, s0
 8011e9a:	e79b      	b.n	8011dd4 <__ieee754_asinf+0x28>
 8011e9c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011ea0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8011f44 <__ieee754_asinf+0x198>
 8011ea4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8011f48 <__ieee754_asinf+0x19c>
 8011ea8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8011f5c <__ieee754_asinf+0x1b0>
 8011eac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011eb0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8011f50 <__ieee754_asinf+0x1a4>
 8011eb4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011eb8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8011f54 <__ieee754_asinf+0x1a8>
 8011ebc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011ec0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8011f58 <__ieee754_asinf+0x1ac>
 8011ec4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ec8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8011f4c <__ieee754_asinf+0x1a0>
 8011ecc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011ed0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8011f60 <__ieee754_asinf+0x1b4>
 8011ed4:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011ed8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8011f64 <__ieee754_asinf+0x1b8>
 8011edc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011ee0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8011f68 <__ieee754_asinf+0x1bc>
 8011ee4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011eec:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011ef0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011ef4:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011ef8:	e76c      	b.n	8011dd4 <__ieee754_asinf+0x28>
 8011efa:	ee10 3a10 	vmov	r3, s0
 8011efe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011f02:	f023 030f 	bic.w	r3, r3, #15
 8011f06:	ee07 3a10 	vmov	s14, r3
 8011f0a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011f0e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011f12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011f16:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8011f1a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011f38 <__ieee754_asinf+0x18c>
 8011f1e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8011f22:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8011f26:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8011f74 <__ieee754_asinf+0x1c8>
 8011f2a:	eeb0 6a40 	vmov.f32	s12, s0
 8011f2e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011f32:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011f36:	e7aa      	b.n	8011e8e <__ieee754_asinf+0xe2>
 8011f38:	b33bbd2e 	.word	0xb33bbd2e
 8011f3c:	3fc90fdb 	.word	0x3fc90fdb
 8011f40:	7149f2ca 	.word	0x7149f2ca
 8011f44:	3811ef08 	.word	0x3811ef08
 8011f48:	3a4f7f04 	.word	0x3a4f7f04
 8011f4c:	3e2aaaab 	.word	0x3e2aaaab
 8011f50:	bd241146 	.word	0xbd241146
 8011f54:	3e4e0aa8 	.word	0x3e4e0aa8
 8011f58:	bea6b090 	.word	0xbea6b090
 8011f5c:	3d9dc62e 	.word	0x3d9dc62e
 8011f60:	bf303361 	.word	0xbf303361
 8011f64:	4001572d 	.word	0x4001572d
 8011f68:	c019d139 	.word	0xc019d139
 8011f6c:	3f799999 	.word	0x3f799999
 8011f70:	333bbd2e 	.word	0x333bbd2e
 8011f74:	3f490fdb 	.word	0x3f490fdb

08011f78 <__ieee754_atan2f>:
 8011f78:	ee10 2a90 	vmov	r2, s1
 8011f7c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011f80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011f84:	b510      	push	{r4, lr}
 8011f86:	eef0 7a40 	vmov.f32	s15, s0
 8011f8a:	dc06      	bgt.n	8011f9a <__ieee754_atan2f+0x22>
 8011f8c:	ee10 0a10 	vmov	r0, s0
 8011f90:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011f94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011f98:	dd04      	ble.n	8011fa4 <__ieee754_atan2f+0x2c>
 8011f9a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8011fa2:	bd10      	pop	{r4, pc}
 8011fa4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011fa8:	d103      	bne.n	8011fb2 <__ieee754_atan2f+0x3a>
 8011faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fae:	f000 bfd1 	b.w	8012f54 <atanf>
 8011fb2:	1794      	asrs	r4, r2, #30
 8011fb4:	f004 0402 	and.w	r4, r4, #2
 8011fb8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011fbc:	b943      	cbnz	r3, 8011fd0 <__ieee754_atan2f+0x58>
 8011fbe:	2c02      	cmp	r4, #2
 8011fc0:	d05e      	beq.n	8012080 <__ieee754_atan2f+0x108>
 8011fc2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012094 <__ieee754_atan2f+0x11c>
 8011fc6:	2c03      	cmp	r4, #3
 8011fc8:	bf08      	it	eq
 8011fca:	eef0 7a47 	vmoveq.f32	s15, s14
 8011fce:	e7e6      	b.n	8011f9e <__ieee754_atan2f+0x26>
 8011fd0:	b941      	cbnz	r1, 8011fe4 <__ieee754_atan2f+0x6c>
 8011fd2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012098 <__ieee754_atan2f+0x120>
 8011fd6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801209c <__ieee754_atan2f+0x124>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	bfb8      	it	lt
 8011fde:	eef0 7a40 	vmovlt.f32	s15, s0
 8011fe2:	e7dc      	b.n	8011f9e <__ieee754_atan2f+0x26>
 8011fe4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011fe8:	d110      	bne.n	801200c <__ieee754_atan2f+0x94>
 8011fea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011fee:	f104 34ff 	add.w	r4, r4, #4294967295
 8011ff2:	d107      	bne.n	8012004 <__ieee754_atan2f+0x8c>
 8011ff4:	2c02      	cmp	r4, #2
 8011ff6:	d846      	bhi.n	8012086 <__ieee754_atan2f+0x10e>
 8011ff8:	4b29      	ldr	r3, [pc, #164]	; (80120a0 <__ieee754_atan2f+0x128>)
 8011ffa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011ffe:	edd4 7a00 	vldr	s15, [r4]
 8012002:	e7cc      	b.n	8011f9e <__ieee754_atan2f+0x26>
 8012004:	2c02      	cmp	r4, #2
 8012006:	d841      	bhi.n	801208c <__ieee754_atan2f+0x114>
 8012008:	4b26      	ldr	r3, [pc, #152]	; (80120a4 <__ieee754_atan2f+0x12c>)
 801200a:	e7f6      	b.n	8011ffa <__ieee754_atan2f+0x82>
 801200c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012010:	d0df      	beq.n	8011fd2 <__ieee754_atan2f+0x5a>
 8012012:	1a5b      	subs	r3, r3, r1
 8012014:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012018:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801201c:	da1a      	bge.n	8012054 <__ieee754_atan2f+0xdc>
 801201e:	2a00      	cmp	r2, #0
 8012020:	da01      	bge.n	8012026 <__ieee754_atan2f+0xae>
 8012022:	313c      	adds	r1, #60	; 0x3c
 8012024:	db19      	blt.n	801205a <__ieee754_atan2f+0xe2>
 8012026:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801202a:	f001 f867 	bl	80130fc <fabsf>
 801202e:	f000 ff91 	bl	8012f54 <atanf>
 8012032:	eef0 7a40 	vmov.f32	s15, s0
 8012036:	2c01      	cmp	r4, #1
 8012038:	d012      	beq.n	8012060 <__ieee754_atan2f+0xe8>
 801203a:	2c02      	cmp	r4, #2
 801203c:	d017      	beq.n	801206e <__ieee754_atan2f+0xf6>
 801203e:	2c00      	cmp	r4, #0
 8012040:	d0ad      	beq.n	8011f9e <__ieee754_atan2f+0x26>
 8012042:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80120a8 <__ieee754_atan2f+0x130>
 8012046:	ee77 7a80 	vadd.f32	s15, s15, s0
 801204a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80120ac <__ieee754_atan2f+0x134>
 801204e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012052:	e7a4      	b.n	8011f9e <__ieee754_atan2f+0x26>
 8012054:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012098 <__ieee754_atan2f+0x120>
 8012058:	e7ed      	b.n	8012036 <__ieee754_atan2f+0xbe>
 801205a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80120b0 <__ieee754_atan2f+0x138>
 801205e:	e7ea      	b.n	8012036 <__ieee754_atan2f+0xbe>
 8012060:	ee17 3a90 	vmov	r3, s15
 8012064:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012068:	ee07 3a90 	vmov	s15, r3
 801206c:	e797      	b.n	8011f9e <__ieee754_atan2f+0x26>
 801206e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80120a8 <__ieee754_atan2f+0x130>
 8012072:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012076:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80120ac <__ieee754_atan2f+0x134>
 801207a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801207e:	e78e      	b.n	8011f9e <__ieee754_atan2f+0x26>
 8012080:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80120ac <__ieee754_atan2f+0x134>
 8012084:	e78b      	b.n	8011f9e <__ieee754_atan2f+0x26>
 8012086:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80120b4 <__ieee754_atan2f+0x13c>
 801208a:	e788      	b.n	8011f9e <__ieee754_atan2f+0x26>
 801208c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80120b0 <__ieee754_atan2f+0x138>
 8012090:	e785      	b.n	8011f9e <__ieee754_atan2f+0x26>
 8012092:	bf00      	nop
 8012094:	c0490fdb 	.word	0xc0490fdb
 8012098:	3fc90fdb 	.word	0x3fc90fdb
 801209c:	bfc90fdb 	.word	0xbfc90fdb
 80120a0:	08013b04 	.word	0x08013b04
 80120a4:	08013b10 	.word	0x08013b10
 80120a8:	33bbbd2e 	.word	0x33bbbd2e
 80120ac:	40490fdb 	.word	0x40490fdb
 80120b0:	00000000 	.word	0x00000000
 80120b4:	3f490fdb 	.word	0x3f490fdb

080120b8 <__ieee754_powf>:
 80120b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120bc:	ee10 4a90 	vmov	r4, s1
 80120c0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80120c4:	ed2d 8b02 	vpush	{d8}
 80120c8:	ee10 6a10 	vmov	r6, s0
 80120cc:	eeb0 8a40 	vmov.f32	s16, s0
 80120d0:	eef0 8a60 	vmov.f32	s17, s1
 80120d4:	d10c      	bne.n	80120f0 <__ieee754_powf+0x38>
 80120d6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80120da:	0076      	lsls	r6, r6, #1
 80120dc:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80120e0:	f240 8296 	bls.w	8012610 <__ieee754_powf+0x558>
 80120e4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80120e8:	ecbd 8b02 	vpop	{d8}
 80120ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80120f4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80120f8:	dcf4      	bgt.n	80120e4 <__ieee754_powf+0x2c>
 80120fa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80120fe:	dd08      	ble.n	8012112 <__ieee754_powf+0x5a>
 8012100:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012104:	d1ee      	bne.n	80120e4 <__ieee754_powf+0x2c>
 8012106:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801210a:	0064      	lsls	r4, r4, #1
 801210c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012110:	e7e6      	b.n	80120e0 <__ieee754_powf+0x28>
 8012112:	2e00      	cmp	r6, #0
 8012114:	da20      	bge.n	8012158 <__ieee754_powf+0xa0>
 8012116:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801211a:	da2d      	bge.n	8012178 <__ieee754_powf+0xc0>
 801211c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012120:	f2c0 827f 	blt.w	8012622 <__ieee754_powf+0x56a>
 8012124:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012128:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801212c:	fa48 f703 	asr.w	r7, r8, r3
 8012130:	fa07 f303 	lsl.w	r3, r7, r3
 8012134:	4543      	cmp	r3, r8
 8012136:	f040 8274 	bne.w	8012622 <__ieee754_powf+0x56a>
 801213a:	f007 0701 	and.w	r7, r7, #1
 801213e:	f1c7 0702 	rsb	r7, r7, #2
 8012142:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012146:	d11f      	bne.n	8012188 <__ieee754_powf+0xd0>
 8012148:	2c00      	cmp	r4, #0
 801214a:	f280 8267 	bge.w	801261c <__ieee754_powf+0x564>
 801214e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012152:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012156:	e7c7      	b.n	80120e8 <__ieee754_powf+0x30>
 8012158:	2700      	movs	r7, #0
 801215a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801215e:	d1f0      	bne.n	8012142 <__ieee754_powf+0x8a>
 8012160:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012164:	f000 8254 	beq.w	8012610 <__ieee754_powf+0x558>
 8012168:	dd08      	ble.n	801217c <__ieee754_powf+0xc4>
 801216a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8012474 <__ieee754_powf+0x3bc>
 801216e:	2c00      	cmp	r4, #0
 8012170:	bfa8      	it	ge
 8012172:	eeb0 0a68 	vmovge.f32	s0, s17
 8012176:	e7b7      	b.n	80120e8 <__ieee754_powf+0x30>
 8012178:	2702      	movs	r7, #2
 801217a:	e7ee      	b.n	801215a <__ieee754_powf+0xa2>
 801217c:	2c00      	cmp	r4, #0
 801217e:	f280 824a 	bge.w	8012616 <__ieee754_powf+0x55e>
 8012182:	eeb1 0a68 	vneg.f32	s0, s17
 8012186:	e7af      	b.n	80120e8 <__ieee754_powf+0x30>
 8012188:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801218c:	d102      	bne.n	8012194 <__ieee754_powf+0xdc>
 801218e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012192:	e7a9      	b.n	80120e8 <__ieee754_powf+0x30>
 8012194:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012198:	eeb0 0a48 	vmov.f32	s0, s16
 801219c:	d107      	bne.n	80121ae <__ieee754_powf+0xf6>
 801219e:	2e00      	cmp	r6, #0
 80121a0:	db05      	blt.n	80121ae <__ieee754_powf+0xf6>
 80121a2:	ecbd 8b02 	vpop	{d8}
 80121a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121aa:	f000 bb8f 	b.w	80128cc <__ieee754_sqrtf>
 80121ae:	f000 ffa5 	bl	80130fc <fabsf>
 80121b2:	b125      	cbz	r5, 80121be <__ieee754_powf+0x106>
 80121b4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80121b8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80121bc:	d116      	bne.n	80121ec <__ieee754_powf+0x134>
 80121be:	2c00      	cmp	r4, #0
 80121c0:	bfbc      	itt	lt
 80121c2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80121c6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80121ca:	2e00      	cmp	r6, #0
 80121cc:	da8c      	bge.n	80120e8 <__ieee754_powf+0x30>
 80121ce:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80121d2:	ea55 0307 	orrs.w	r3, r5, r7
 80121d6:	d104      	bne.n	80121e2 <__ieee754_powf+0x12a>
 80121d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80121dc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80121e0:	e782      	b.n	80120e8 <__ieee754_powf+0x30>
 80121e2:	2f01      	cmp	r7, #1
 80121e4:	d180      	bne.n	80120e8 <__ieee754_powf+0x30>
 80121e6:	eeb1 0a40 	vneg.f32	s0, s0
 80121ea:	e77d      	b.n	80120e8 <__ieee754_powf+0x30>
 80121ec:	0ff0      	lsrs	r0, r6, #31
 80121ee:	3801      	subs	r0, #1
 80121f0:	ea57 0300 	orrs.w	r3, r7, r0
 80121f4:	d104      	bne.n	8012200 <__ieee754_powf+0x148>
 80121f6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80121fa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80121fe:	e773      	b.n	80120e8 <__ieee754_powf+0x30>
 8012200:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012204:	dd74      	ble.n	80122f0 <__ieee754_powf+0x238>
 8012206:	4b9c      	ldr	r3, [pc, #624]	; (8012478 <__ieee754_powf+0x3c0>)
 8012208:	429d      	cmp	r5, r3
 801220a:	dc08      	bgt.n	801221e <__ieee754_powf+0x166>
 801220c:	2c00      	cmp	r4, #0
 801220e:	da0b      	bge.n	8012228 <__ieee754_powf+0x170>
 8012210:	2000      	movs	r0, #0
 8012212:	ecbd 8b02 	vpop	{d8}
 8012216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801221a:	f000 be95 	b.w	8012f48 <__math_oflowf>
 801221e:	4b97      	ldr	r3, [pc, #604]	; (801247c <__ieee754_powf+0x3c4>)
 8012220:	429d      	cmp	r5, r3
 8012222:	dd08      	ble.n	8012236 <__ieee754_powf+0x17e>
 8012224:	2c00      	cmp	r4, #0
 8012226:	dcf3      	bgt.n	8012210 <__ieee754_powf+0x158>
 8012228:	2000      	movs	r0, #0
 801222a:	ecbd 8b02 	vpop	{d8}
 801222e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012232:	f000 be83 	b.w	8012f3c <__math_uflowf>
 8012236:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801223a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801223e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8012480 <__ieee754_powf+0x3c8>
 8012242:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012246:	eee0 6a67 	vfms.f32	s13, s0, s15
 801224a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801224e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012252:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012256:	ee67 7a27 	vmul.f32	s15, s14, s15
 801225a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012484 <__ieee754_powf+0x3cc>
 801225e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8012262:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8012488 <__ieee754_powf+0x3d0>
 8012266:	eee0 7a07 	vfma.f32	s15, s0, s14
 801226a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801248c <__ieee754_powf+0x3d4>
 801226e:	eef0 6a67 	vmov.f32	s13, s15
 8012272:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012276:	ee16 3a90 	vmov	r3, s13
 801227a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801227e:	f023 030f 	bic.w	r3, r3, #15
 8012282:	ee00 3a90 	vmov	s1, r3
 8012286:	eee0 0a47 	vfms.f32	s1, s0, s14
 801228a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801228e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8012292:	f024 040f 	bic.w	r4, r4, #15
 8012296:	ee07 4a10 	vmov	s14, r4
 801229a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801229e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80122a2:	ee07 3a90 	vmov	s15, r3
 80122a6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80122aa:	3f01      	subs	r7, #1
 80122ac:	ea57 0200 	orrs.w	r2, r7, r0
 80122b0:	ee07 4a10 	vmov	s14, r4
 80122b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80122bc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80122c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80122c4:	ee17 4a10 	vmov	r4, s14
 80122c8:	bf08      	it	eq
 80122ca:	eeb0 8a40 	vmoveq.f32	s16, s0
 80122ce:	2c00      	cmp	r4, #0
 80122d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80122d4:	f340 817e 	ble.w	80125d4 <__ieee754_powf+0x51c>
 80122d8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80122dc:	f340 80f8 	ble.w	80124d0 <__ieee754_powf+0x418>
 80122e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80122e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e8:	bf4c      	ite	mi
 80122ea:	2001      	movmi	r0, #1
 80122ec:	2000      	movpl	r0, #0
 80122ee:	e790      	b.n	8012212 <__ieee754_powf+0x15a>
 80122f0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80122f4:	bf01      	itttt	eq
 80122f6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8012490 <__ieee754_powf+0x3d8>
 80122fa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80122fe:	f06f 0217 	mvneq.w	r2, #23
 8012302:	ee17 5a90 	vmoveq	r5, s15
 8012306:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801230a:	bf18      	it	ne
 801230c:	2200      	movne	r2, #0
 801230e:	3b7f      	subs	r3, #127	; 0x7f
 8012310:	4413      	add	r3, r2
 8012312:	4a60      	ldr	r2, [pc, #384]	; (8012494 <__ieee754_powf+0x3dc>)
 8012314:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8012318:	4295      	cmp	r5, r2
 801231a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801231e:	dd06      	ble.n	801232e <__ieee754_powf+0x276>
 8012320:	4a5d      	ldr	r2, [pc, #372]	; (8012498 <__ieee754_powf+0x3e0>)
 8012322:	4295      	cmp	r5, r2
 8012324:	f340 80a4 	ble.w	8012470 <__ieee754_powf+0x3b8>
 8012328:	3301      	adds	r3, #1
 801232a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801232e:	2500      	movs	r5, #0
 8012330:	4a5a      	ldr	r2, [pc, #360]	; (801249c <__ieee754_powf+0x3e4>)
 8012332:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012336:	ee07 1a90 	vmov	s15, r1
 801233a:	ed92 7a00 	vldr	s14, [r2]
 801233e:	4a58      	ldr	r2, [pc, #352]	; (80124a0 <__ieee754_powf+0x3e8>)
 8012340:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012344:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012348:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801234c:	1049      	asrs	r1, r1, #1
 801234e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8012352:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8012356:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801235a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801235e:	ee06 1a10 	vmov	s12, r1
 8012362:	ee65 4a26 	vmul.f32	s9, s10, s13
 8012366:	ee36 7a47 	vsub.f32	s14, s12, s14
 801236a:	ee14 6a90 	vmov	r6, s9
 801236e:	4016      	ands	r6, r2
 8012370:	ee05 6a90 	vmov	s11, r6
 8012374:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8012378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801237c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80124a4 <__ieee754_powf+0x3ec>
 8012380:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8012384:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8012388:	ee25 6a26 	vmul.f32	s12, s10, s13
 801238c:	eddf 6a46 	vldr	s13, [pc, #280]	; 80124a8 <__ieee754_powf+0x3f0>
 8012390:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012394:	eddf 6a45 	vldr	s13, [pc, #276]	; 80124ac <__ieee754_powf+0x3f4>
 8012398:	eee7 6a27 	vfma.f32	s13, s14, s15
 801239c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012480 <__ieee754_powf+0x3c8>
 80123a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123a4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80124b0 <__ieee754_powf+0x3f8>
 80123a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80123ac:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80124b4 <__ieee754_powf+0x3fc>
 80123b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123b4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80123b8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80123bc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80123c0:	eee5 6a07 	vfma.f32	s13, s10, s14
 80123c4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80123c8:	eef0 7a45 	vmov.f32	s15, s10
 80123cc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80123d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123d4:	ee17 1a90 	vmov	r1, s15
 80123d8:	4011      	ands	r1, r2
 80123da:	ee07 1a90 	vmov	s15, r1
 80123de:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80123e2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80123e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80123ea:	ee27 7a24 	vmul.f32	s14, s14, s9
 80123ee:	eea6 7a27 	vfma.f32	s14, s12, s15
 80123f2:	eeb0 6a47 	vmov.f32	s12, s14
 80123f6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80123fa:	ee16 1a10 	vmov	r1, s12
 80123fe:	4011      	ands	r1, r2
 8012400:	ee06 1a90 	vmov	s13, r1
 8012404:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8012408:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80124b8 <__ieee754_powf+0x400>
 801240c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80124bc <__ieee754_powf+0x404>
 8012410:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012414:	ee06 1a10 	vmov	s12, r1
 8012418:	ee27 7a27 	vmul.f32	s14, s14, s15
 801241c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80124c0 <__ieee754_powf+0x408>
 8012420:	4928      	ldr	r1, [pc, #160]	; (80124c4 <__ieee754_powf+0x40c>)
 8012422:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012426:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801242a:	edd1 7a00 	vldr	s15, [r1]
 801242e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012432:	ee07 3a90 	vmov	s15, r3
 8012436:	4b24      	ldr	r3, [pc, #144]	; (80124c8 <__ieee754_powf+0x410>)
 8012438:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801243c:	eef0 7a47 	vmov.f32	s15, s14
 8012440:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012444:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012448:	edd5 0a00 	vldr	s1, [r5]
 801244c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012454:	ee17 3a90 	vmov	r3, s15
 8012458:	4013      	ands	r3, r2
 801245a:	ee07 3a90 	vmov	s15, r3
 801245e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8012462:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8012466:	eee6 6a65 	vfms.f32	s13, s12, s11
 801246a:	ee77 7a66 	vsub.f32	s15, s14, s13
 801246e:	e70e      	b.n	801228e <__ieee754_powf+0x1d6>
 8012470:	2501      	movs	r5, #1
 8012472:	e75d      	b.n	8012330 <__ieee754_powf+0x278>
 8012474:	00000000 	.word	0x00000000
 8012478:	3f7ffff3 	.word	0x3f7ffff3
 801247c:	3f800007 	.word	0x3f800007
 8012480:	3eaaaaab 	.word	0x3eaaaaab
 8012484:	3fb8aa3b 	.word	0x3fb8aa3b
 8012488:	36eca570 	.word	0x36eca570
 801248c:	3fb8aa00 	.word	0x3fb8aa00
 8012490:	4b800000 	.word	0x4b800000
 8012494:	001cc471 	.word	0x001cc471
 8012498:	005db3d6 	.word	0x005db3d6
 801249c:	08013b1c 	.word	0x08013b1c
 80124a0:	fffff000 	.word	0xfffff000
 80124a4:	3e6c3255 	.word	0x3e6c3255
 80124a8:	3e53f142 	.word	0x3e53f142
 80124ac:	3e8ba305 	.word	0x3e8ba305
 80124b0:	3edb6db7 	.word	0x3edb6db7
 80124b4:	3f19999a 	.word	0x3f19999a
 80124b8:	3f76384f 	.word	0x3f76384f
 80124bc:	3f763800 	.word	0x3f763800
 80124c0:	369dc3a0 	.word	0x369dc3a0
 80124c4:	08013b2c 	.word	0x08013b2c
 80124c8:	08013b24 	.word	0x08013b24
 80124cc:	3338aa3c 	.word	0x3338aa3c
 80124d0:	f040 8095 	bne.w	80125fe <__ieee754_powf+0x546>
 80124d4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80124cc <__ieee754_powf+0x414>
 80124d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80124dc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80124e0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80124e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e8:	f73f aefa 	bgt.w	80122e0 <__ieee754_powf+0x228>
 80124ec:	15db      	asrs	r3, r3, #23
 80124ee:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80124f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80124f6:	4103      	asrs	r3, r0
 80124f8:	4423      	add	r3, r4
 80124fa:	494b      	ldr	r1, [pc, #300]	; (8012628 <__ieee754_powf+0x570>)
 80124fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012500:	3a7f      	subs	r2, #127	; 0x7f
 8012502:	4111      	asrs	r1, r2
 8012504:	ea23 0101 	bic.w	r1, r3, r1
 8012508:	ee07 1a10 	vmov	s14, r1
 801250c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012514:	f1c2 0217 	rsb	r2, r2, #23
 8012518:	4110      	asrs	r0, r2
 801251a:	2c00      	cmp	r4, #0
 801251c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012520:	bfb8      	it	lt
 8012522:	4240      	neglt	r0, r0
 8012524:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012528:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801262c <__ieee754_powf+0x574>
 801252c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8012630 <__ieee754_powf+0x578>
 8012530:	ee17 3a10 	vmov	r3, s14
 8012534:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012538:	f023 030f 	bic.w	r3, r3, #15
 801253c:	ee07 3a10 	vmov	s14, r3
 8012540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012544:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012548:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801254c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012634 <__ieee754_powf+0x57c>
 8012550:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8012554:	eef0 7a40 	vmov.f32	s15, s0
 8012558:	eee7 7a26 	vfma.f32	s15, s14, s13
 801255c:	eeb0 6a67 	vmov.f32	s12, s15
 8012560:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012564:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012568:	ee30 0a46 	vsub.f32	s0, s0, s12
 801256c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8012638 <__ieee754_powf+0x580>
 8012570:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801263c <__ieee754_powf+0x584>
 8012574:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012578:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8012640 <__ieee754_powf+0x588>
 801257c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012580:	eddf 6a30 	vldr	s13, [pc, #192]	; 8012644 <__ieee754_powf+0x58c>
 8012584:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012588:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8012648 <__ieee754_powf+0x590>
 801258c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012590:	eef0 6a67 	vmov.f32	s13, s15
 8012594:	eee6 6a47 	vfms.f32	s13, s12, s14
 8012598:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801259c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80125a0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80125a4:	eea7 0a80 	vfma.f32	s0, s15, s0
 80125a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80125ac:	ee37 0a40 	vsub.f32	s0, s14, s0
 80125b0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80125b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80125b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80125bc:	ee10 3a10 	vmov	r3, s0
 80125c0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80125c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80125c8:	da1f      	bge.n	801260a <__ieee754_powf+0x552>
 80125ca:	f000 fdf3 	bl	80131b4 <scalbnf>
 80125ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80125d2:	e589      	b.n	80120e8 <__ieee754_powf+0x30>
 80125d4:	4a1d      	ldr	r2, [pc, #116]	; (801264c <__ieee754_powf+0x594>)
 80125d6:	4293      	cmp	r3, r2
 80125d8:	dd07      	ble.n	80125ea <__ieee754_powf+0x532>
 80125da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80125de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e2:	bf4c      	ite	mi
 80125e4:	2001      	movmi	r0, #1
 80125e6:	2000      	movpl	r0, #0
 80125e8:	e61f      	b.n	801222a <__ieee754_powf+0x172>
 80125ea:	d108      	bne.n	80125fe <__ieee754_powf+0x546>
 80125ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80125f0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80125f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f8:	f6ff af78 	blt.w	80124ec <__ieee754_powf+0x434>
 80125fc:	e7ed      	b.n	80125da <__ieee754_powf+0x522>
 80125fe:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012602:	f73f af73 	bgt.w	80124ec <__ieee754_powf+0x434>
 8012606:	2000      	movs	r0, #0
 8012608:	e78c      	b.n	8012524 <__ieee754_powf+0x46c>
 801260a:	ee00 3a10 	vmov	s0, r3
 801260e:	e7de      	b.n	80125ce <__ieee754_powf+0x516>
 8012610:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012614:	e568      	b.n	80120e8 <__ieee754_powf+0x30>
 8012616:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012650 <__ieee754_powf+0x598>
 801261a:	e565      	b.n	80120e8 <__ieee754_powf+0x30>
 801261c:	eeb0 0a48 	vmov.f32	s0, s16
 8012620:	e562      	b.n	80120e8 <__ieee754_powf+0x30>
 8012622:	2700      	movs	r7, #0
 8012624:	e58d      	b.n	8012142 <__ieee754_powf+0x8a>
 8012626:	bf00      	nop
 8012628:	007fffff 	.word	0x007fffff
 801262c:	35bfbe8c 	.word	0x35bfbe8c
 8012630:	3f317200 	.word	0x3f317200
 8012634:	3f317218 	.word	0x3f317218
 8012638:	b5ddea0e 	.word	0xb5ddea0e
 801263c:	3331bb4c 	.word	0x3331bb4c
 8012640:	388ab355 	.word	0x388ab355
 8012644:	bb360b61 	.word	0xbb360b61
 8012648:	3e2aaaab 	.word	0x3e2aaaab
 801264c:	43160000 	.word	0x43160000
 8012650:	00000000 	.word	0x00000000

08012654 <__ieee754_rem_pio2f>:
 8012654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012656:	ee10 6a10 	vmov	r6, s0
 801265a:	4b8e      	ldr	r3, [pc, #568]	; (8012894 <__ieee754_rem_pio2f+0x240>)
 801265c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012660:	429d      	cmp	r5, r3
 8012662:	b087      	sub	sp, #28
 8012664:	eef0 7a40 	vmov.f32	s15, s0
 8012668:	4604      	mov	r4, r0
 801266a:	dc05      	bgt.n	8012678 <__ieee754_rem_pio2f+0x24>
 801266c:	2300      	movs	r3, #0
 801266e:	ed80 0a00 	vstr	s0, [r0]
 8012672:	6043      	str	r3, [r0, #4]
 8012674:	2000      	movs	r0, #0
 8012676:	e01a      	b.n	80126ae <__ieee754_rem_pio2f+0x5a>
 8012678:	4b87      	ldr	r3, [pc, #540]	; (8012898 <__ieee754_rem_pio2f+0x244>)
 801267a:	429d      	cmp	r5, r3
 801267c:	dc46      	bgt.n	801270c <__ieee754_rem_pio2f+0xb8>
 801267e:	2e00      	cmp	r6, #0
 8012680:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801289c <__ieee754_rem_pio2f+0x248>
 8012684:	4b86      	ldr	r3, [pc, #536]	; (80128a0 <__ieee754_rem_pio2f+0x24c>)
 8012686:	f025 050f 	bic.w	r5, r5, #15
 801268a:	dd1f      	ble.n	80126cc <__ieee754_rem_pio2f+0x78>
 801268c:	429d      	cmp	r5, r3
 801268e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012692:	d00e      	beq.n	80126b2 <__ieee754_rem_pio2f+0x5e>
 8012694:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80128a4 <__ieee754_rem_pio2f+0x250>
 8012698:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801269c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80126a0:	ed80 0a00 	vstr	s0, [r0]
 80126a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126a8:	2001      	movs	r0, #1
 80126aa:	edc4 7a01 	vstr	s15, [r4, #4]
 80126ae:	b007      	add	sp, #28
 80126b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126b2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80128a8 <__ieee754_rem_pio2f+0x254>
 80126b6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80128ac <__ieee754_rem_pio2f+0x258>
 80126ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80126be:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80126c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80126c6:	edc0 6a00 	vstr	s13, [r0]
 80126ca:	e7eb      	b.n	80126a4 <__ieee754_rem_pio2f+0x50>
 80126cc:	429d      	cmp	r5, r3
 80126ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80126d2:	d00e      	beq.n	80126f2 <__ieee754_rem_pio2f+0x9e>
 80126d4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80128a4 <__ieee754_rem_pio2f+0x250>
 80126d8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80126dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80126e0:	ed80 0a00 	vstr	s0, [r0]
 80126e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126e8:	f04f 30ff 	mov.w	r0, #4294967295
 80126ec:	edc4 7a01 	vstr	s15, [r4, #4]
 80126f0:	e7dd      	b.n	80126ae <__ieee754_rem_pio2f+0x5a>
 80126f2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80128a8 <__ieee754_rem_pio2f+0x254>
 80126f6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80128ac <__ieee754_rem_pio2f+0x258>
 80126fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80126fe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012702:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012706:	edc0 6a00 	vstr	s13, [r0]
 801270a:	e7eb      	b.n	80126e4 <__ieee754_rem_pio2f+0x90>
 801270c:	4b68      	ldr	r3, [pc, #416]	; (80128b0 <__ieee754_rem_pio2f+0x25c>)
 801270e:	429d      	cmp	r5, r3
 8012710:	dc72      	bgt.n	80127f8 <__ieee754_rem_pio2f+0x1a4>
 8012712:	f000 fcf3 	bl	80130fc <fabsf>
 8012716:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80128b4 <__ieee754_rem_pio2f+0x260>
 801271a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801271e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801272a:	ee17 0a90 	vmov	r0, s15
 801272e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801289c <__ieee754_rem_pio2f+0x248>
 8012732:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012736:	281f      	cmp	r0, #31
 8012738:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80128a4 <__ieee754_rem_pio2f+0x250>
 801273c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012740:	eeb1 6a47 	vneg.f32	s12, s14
 8012744:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012748:	ee16 2a90 	vmov	r2, s13
 801274c:	dc1c      	bgt.n	8012788 <__ieee754_rem_pio2f+0x134>
 801274e:	495a      	ldr	r1, [pc, #360]	; (80128b8 <__ieee754_rem_pio2f+0x264>)
 8012750:	1e47      	subs	r7, r0, #1
 8012752:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8012756:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801275a:	428b      	cmp	r3, r1
 801275c:	d014      	beq.n	8012788 <__ieee754_rem_pio2f+0x134>
 801275e:	6022      	str	r2, [r4, #0]
 8012760:	ed94 7a00 	vldr	s14, [r4]
 8012764:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012768:	2e00      	cmp	r6, #0
 801276a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801276e:	ed84 0a01 	vstr	s0, [r4, #4]
 8012772:	da9c      	bge.n	80126ae <__ieee754_rem_pio2f+0x5a>
 8012774:	eeb1 7a47 	vneg.f32	s14, s14
 8012778:	eeb1 0a40 	vneg.f32	s0, s0
 801277c:	ed84 7a00 	vstr	s14, [r4]
 8012780:	ed84 0a01 	vstr	s0, [r4, #4]
 8012784:	4240      	negs	r0, r0
 8012786:	e792      	b.n	80126ae <__ieee754_rem_pio2f+0x5a>
 8012788:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801278c:	15eb      	asrs	r3, r5, #23
 801278e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8012792:	2d08      	cmp	r5, #8
 8012794:	dde3      	ble.n	801275e <__ieee754_rem_pio2f+0x10a>
 8012796:	eddf 7a44 	vldr	s15, [pc, #272]	; 80128a8 <__ieee754_rem_pio2f+0x254>
 801279a:	eddf 5a44 	vldr	s11, [pc, #272]	; 80128ac <__ieee754_rem_pio2f+0x258>
 801279e:	eef0 6a40 	vmov.f32	s13, s0
 80127a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80127a6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80127aa:	eea6 0a27 	vfma.f32	s0, s12, s15
 80127ae:	eef0 7a40 	vmov.f32	s15, s0
 80127b2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80127b6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80127ba:	ee15 2a90 	vmov	r2, s11
 80127be:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80127c2:	1a5b      	subs	r3, r3, r1
 80127c4:	2b19      	cmp	r3, #25
 80127c6:	dc04      	bgt.n	80127d2 <__ieee754_rem_pio2f+0x17e>
 80127c8:	edc4 5a00 	vstr	s11, [r4]
 80127cc:	eeb0 0a66 	vmov.f32	s0, s13
 80127d0:	e7c6      	b.n	8012760 <__ieee754_rem_pio2f+0x10c>
 80127d2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80128bc <__ieee754_rem_pio2f+0x268>
 80127d6:	eeb0 0a66 	vmov.f32	s0, s13
 80127da:	eea6 0a25 	vfma.f32	s0, s12, s11
 80127de:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80127e2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80128c0 <__ieee754_rem_pio2f+0x26c>
 80127e6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80127ea:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80127ee:	ee30 7a67 	vsub.f32	s14, s0, s15
 80127f2:	ed84 7a00 	vstr	s14, [r4]
 80127f6:	e7b3      	b.n	8012760 <__ieee754_rem_pio2f+0x10c>
 80127f8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80127fc:	db06      	blt.n	801280c <__ieee754_rem_pio2f+0x1b8>
 80127fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012802:	edc0 7a01 	vstr	s15, [r0, #4]
 8012806:	edc0 7a00 	vstr	s15, [r0]
 801280a:	e733      	b.n	8012674 <__ieee754_rem_pio2f+0x20>
 801280c:	15ea      	asrs	r2, r5, #23
 801280e:	3a86      	subs	r2, #134	; 0x86
 8012810:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012814:	ee07 3a90 	vmov	s15, r3
 8012818:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801281c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80128c4 <__ieee754_rem_pio2f+0x270>
 8012820:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012828:	ed8d 7a03 	vstr	s14, [sp, #12]
 801282c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012830:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012834:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801283c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012840:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012844:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801284c:	edcd 7a05 	vstr	s15, [sp, #20]
 8012850:	d11e      	bne.n	8012890 <__ieee754_rem_pio2f+0x23c>
 8012852:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801285a:	bf14      	ite	ne
 801285c:	2302      	movne	r3, #2
 801285e:	2301      	moveq	r3, #1
 8012860:	4919      	ldr	r1, [pc, #100]	; (80128c8 <__ieee754_rem_pio2f+0x274>)
 8012862:	9101      	str	r1, [sp, #4]
 8012864:	2102      	movs	r1, #2
 8012866:	9100      	str	r1, [sp, #0]
 8012868:	a803      	add	r0, sp, #12
 801286a:	4621      	mov	r1, r4
 801286c:	f000 f892 	bl	8012994 <__kernel_rem_pio2f>
 8012870:	2e00      	cmp	r6, #0
 8012872:	f6bf af1c 	bge.w	80126ae <__ieee754_rem_pio2f+0x5a>
 8012876:	edd4 7a00 	vldr	s15, [r4]
 801287a:	eef1 7a67 	vneg.f32	s15, s15
 801287e:	edc4 7a00 	vstr	s15, [r4]
 8012882:	edd4 7a01 	vldr	s15, [r4, #4]
 8012886:	eef1 7a67 	vneg.f32	s15, s15
 801288a:	edc4 7a01 	vstr	s15, [r4, #4]
 801288e:	e779      	b.n	8012784 <__ieee754_rem_pio2f+0x130>
 8012890:	2303      	movs	r3, #3
 8012892:	e7e5      	b.n	8012860 <__ieee754_rem_pio2f+0x20c>
 8012894:	3f490fd8 	.word	0x3f490fd8
 8012898:	4016cbe3 	.word	0x4016cbe3
 801289c:	3fc90f80 	.word	0x3fc90f80
 80128a0:	3fc90fd0 	.word	0x3fc90fd0
 80128a4:	37354443 	.word	0x37354443
 80128a8:	37354400 	.word	0x37354400
 80128ac:	2e85a308 	.word	0x2e85a308
 80128b0:	43490f80 	.word	0x43490f80
 80128b4:	3f22f984 	.word	0x3f22f984
 80128b8:	08013b34 	.word	0x08013b34
 80128bc:	2e85a300 	.word	0x2e85a300
 80128c0:	248d3132 	.word	0x248d3132
 80128c4:	43800000 	.word	0x43800000
 80128c8:	08013bb4 	.word	0x08013bb4

080128cc <__ieee754_sqrtf>:
 80128cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80128d0:	4770      	bx	lr
	...

080128d4 <__kernel_cosf>:
 80128d4:	ee10 3a10 	vmov	r3, s0
 80128d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80128e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80128e4:	da05      	bge.n	80128f2 <__kernel_cosf+0x1e>
 80128e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80128ea:	ee17 2a90 	vmov	r2, s15
 80128ee:	2a00      	cmp	r2, #0
 80128f0:	d03d      	beq.n	801296e <__kernel_cosf+0x9a>
 80128f2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80128f6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012974 <__kernel_cosf+0xa0>
 80128fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8012978 <__kernel_cosf+0xa4>
 80128fe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801297c <__kernel_cosf+0xa8>
 8012902:	4a1f      	ldr	r2, [pc, #124]	; (8012980 <__kernel_cosf+0xac>)
 8012904:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012908:	4293      	cmp	r3, r2
 801290a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012984 <__kernel_cosf+0xb0>
 801290e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012912:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012988 <__kernel_cosf+0xb4>
 8012916:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801291a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801298c <__kernel_cosf+0xb8>
 801291e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012922:	eeb0 7a66 	vmov.f32	s14, s13
 8012926:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801292a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801292e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8012932:	ee67 6a25 	vmul.f32	s13, s14, s11
 8012936:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801293a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801293e:	dc04      	bgt.n	801294a <__kernel_cosf+0x76>
 8012940:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012944:	ee36 0a47 	vsub.f32	s0, s12, s14
 8012948:	4770      	bx	lr
 801294a:	4a11      	ldr	r2, [pc, #68]	; (8012990 <__kernel_cosf+0xbc>)
 801294c:	4293      	cmp	r3, r2
 801294e:	bfda      	itte	le
 8012950:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8012954:	ee06 3a90 	vmovle	s13, r3
 8012958:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801295c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012960:	ee36 0a66 	vsub.f32	s0, s12, s13
 8012964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012968:	ee30 0a67 	vsub.f32	s0, s0, s15
 801296c:	4770      	bx	lr
 801296e:	eeb0 0a46 	vmov.f32	s0, s12
 8012972:	4770      	bx	lr
 8012974:	ad47d74e 	.word	0xad47d74e
 8012978:	310f74f6 	.word	0x310f74f6
 801297c:	3d2aaaab 	.word	0x3d2aaaab
 8012980:	3e999999 	.word	0x3e999999
 8012984:	b493f27c 	.word	0xb493f27c
 8012988:	37d00d01 	.word	0x37d00d01
 801298c:	bab60b61 	.word	0xbab60b61
 8012990:	3f480000 	.word	0x3f480000

08012994 <__kernel_rem_pio2f>:
 8012994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012998:	ed2d 8b04 	vpush	{d8-d9}
 801299c:	b0d9      	sub	sp, #356	; 0x164
 801299e:	4688      	mov	r8, r1
 80129a0:	9002      	str	r0, [sp, #8]
 80129a2:	49bb      	ldr	r1, [pc, #748]	; (8012c90 <__kernel_rem_pio2f+0x2fc>)
 80129a4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80129a6:	9301      	str	r3, [sp, #4]
 80129a8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80129ac:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80129b0:	1e59      	subs	r1, r3, #1
 80129b2:	1d13      	adds	r3, r2, #4
 80129b4:	db27      	blt.n	8012a06 <__kernel_rem_pio2f+0x72>
 80129b6:	f1b2 0b03 	subs.w	fp, r2, #3
 80129ba:	bf48      	it	mi
 80129bc:	f102 0b04 	addmi.w	fp, r2, #4
 80129c0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80129c4:	1c45      	adds	r5, r0, #1
 80129c6:	00ec      	lsls	r4, r5, #3
 80129c8:	1a47      	subs	r7, r0, r1
 80129ca:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8012ca0 <__kernel_rem_pio2f+0x30c>
 80129ce:	9403      	str	r4, [sp, #12]
 80129d0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80129d4:	eb0a 0c01 	add.w	ip, sl, r1
 80129d8:	ae1c      	add	r6, sp, #112	; 0x70
 80129da:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80129de:	2400      	movs	r4, #0
 80129e0:	4564      	cmp	r4, ip
 80129e2:	dd12      	ble.n	8012a0a <__kernel_rem_pio2f+0x76>
 80129e4:	9b01      	ldr	r3, [sp, #4]
 80129e6:	ac1c      	add	r4, sp, #112	; 0x70
 80129e8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80129ec:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80129f0:	f04f 0c00 	mov.w	ip, #0
 80129f4:	45d4      	cmp	ip, sl
 80129f6:	dc27      	bgt.n	8012a48 <__kernel_rem_pio2f+0xb4>
 80129f8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80129fc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8012ca0 <__kernel_rem_pio2f+0x30c>
 8012a00:	4627      	mov	r7, r4
 8012a02:	2600      	movs	r6, #0
 8012a04:	e016      	b.n	8012a34 <__kernel_rem_pio2f+0xa0>
 8012a06:	2000      	movs	r0, #0
 8012a08:	e7dc      	b.n	80129c4 <__kernel_rem_pio2f+0x30>
 8012a0a:	42e7      	cmn	r7, r4
 8012a0c:	bf5d      	ittte	pl
 8012a0e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8012a12:	ee07 3a90 	vmovpl	s15, r3
 8012a16:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012a1a:	eef0 7a47 	vmovmi.f32	s15, s14
 8012a1e:	ece6 7a01 	vstmia	r6!, {s15}
 8012a22:	3401      	adds	r4, #1
 8012a24:	e7dc      	b.n	80129e0 <__kernel_rem_pio2f+0x4c>
 8012a26:	ecf9 6a01 	vldmia	r9!, {s13}
 8012a2a:	ed97 7a00 	vldr	s14, [r7]
 8012a2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012a32:	3601      	adds	r6, #1
 8012a34:	428e      	cmp	r6, r1
 8012a36:	f1a7 0704 	sub.w	r7, r7, #4
 8012a3a:	ddf4      	ble.n	8012a26 <__kernel_rem_pio2f+0x92>
 8012a3c:	eceb 7a01 	vstmia	fp!, {s15}
 8012a40:	f10c 0c01 	add.w	ip, ip, #1
 8012a44:	3404      	adds	r4, #4
 8012a46:	e7d5      	b.n	80129f4 <__kernel_rem_pio2f+0x60>
 8012a48:	ab08      	add	r3, sp, #32
 8012a4a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8012a4e:	eddf 8a93 	vldr	s17, [pc, #588]	; 8012c9c <__kernel_rem_pio2f+0x308>
 8012a52:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8012c98 <__kernel_rem_pio2f+0x304>
 8012a56:	9304      	str	r3, [sp, #16]
 8012a58:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8012a5c:	4656      	mov	r6, sl
 8012a5e:	00b3      	lsls	r3, r6, #2
 8012a60:	9305      	str	r3, [sp, #20]
 8012a62:	ab58      	add	r3, sp, #352	; 0x160
 8012a64:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8012a68:	ac08      	add	r4, sp, #32
 8012a6a:	ab44      	add	r3, sp, #272	; 0x110
 8012a6c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8012a70:	46a4      	mov	ip, r4
 8012a72:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8012a76:	4637      	mov	r7, r6
 8012a78:	2f00      	cmp	r7, #0
 8012a7a:	f1a0 0004 	sub.w	r0, r0, #4
 8012a7e:	dc4f      	bgt.n	8012b20 <__kernel_rem_pio2f+0x18c>
 8012a80:	4628      	mov	r0, r5
 8012a82:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012a86:	f000 fb95 	bl	80131b4 <scalbnf>
 8012a8a:	eeb0 8a40 	vmov.f32	s16, s0
 8012a8e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012a92:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012a96:	f000 fb45 	bl	8013124 <floorf>
 8012a9a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012a9e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012aa2:	2d00      	cmp	r5, #0
 8012aa4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012aa8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012aac:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8012ab0:	ee17 9a90 	vmov	r9, s15
 8012ab4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012ab8:	dd44      	ble.n	8012b44 <__kernel_rem_pio2f+0x1b0>
 8012aba:	f106 3cff 	add.w	ip, r6, #4294967295
 8012abe:	ab08      	add	r3, sp, #32
 8012ac0:	f1c5 0e08 	rsb	lr, r5, #8
 8012ac4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8012ac8:	fa47 f00e 	asr.w	r0, r7, lr
 8012acc:	4481      	add	r9, r0
 8012ace:	fa00 f00e 	lsl.w	r0, r0, lr
 8012ad2:	1a3f      	subs	r7, r7, r0
 8012ad4:	f1c5 0007 	rsb	r0, r5, #7
 8012ad8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8012adc:	4107      	asrs	r7, r0
 8012ade:	2f00      	cmp	r7, #0
 8012ae0:	dd3f      	ble.n	8012b62 <__kernel_rem_pio2f+0x1ce>
 8012ae2:	f04f 0e00 	mov.w	lr, #0
 8012ae6:	f109 0901 	add.w	r9, r9, #1
 8012aea:	4673      	mov	r3, lr
 8012aec:	4576      	cmp	r6, lr
 8012aee:	dc6b      	bgt.n	8012bc8 <__kernel_rem_pio2f+0x234>
 8012af0:	2d00      	cmp	r5, #0
 8012af2:	dd04      	ble.n	8012afe <__kernel_rem_pio2f+0x16a>
 8012af4:	2d01      	cmp	r5, #1
 8012af6:	d078      	beq.n	8012bea <__kernel_rem_pio2f+0x256>
 8012af8:	2d02      	cmp	r5, #2
 8012afa:	f000 8081 	beq.w	8012c00 <__kernel_rem_pio2f+0x26c>
 8012afe:	2f02      	cmp	r7, #2
 8012b00:	d12f      	bne.n	8012b62 <__kernel_rem_pio2f+0x1ce>
 8012b02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012b06:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012b0a:	b353      	cbz	r3, 8012b62 <__kernel_rem_pio2f+0x1ce>
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012b12:	f000 fb4f 	bl	80131b4 <scalbnf>
 8012b16:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012b1a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012b1e:	e020      	b.n	8012b62 <__kernel_rem_pio2f+0x1ce>
 8012b20:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012b24:	3f01      	subs	r7, #1
 8012b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b2e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012b32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012b36:	ecac 0a01 	vstmia	ip!, {s0}
 8012b3a:	ed90 0a00 	vldr	s0, [r0]
 8012b3e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012b42:	e799      	b.n	8012a78 <__kernel_rem_pio2f+0xe4>
 8012b44:	d105      	bne.n	8012b52 <__kernel_rem_pio2f+0x1be>
 8012b46:	1e70      	subs	r0, r6, #1
 8012b48:	ab08      	add	r3, sp, #32
 8012b4a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8012b4e:	11ff      	asrs	r7, r7, #7
 8012b50:	e7c5      	b.n	8012ade <__kernel_rem_pio2f+0x14a>
 8012b52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012b56:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5e:	da31      	bge.n	8012bc4 <__kernel_rem_pio2f+0x230>
 8012b60:	2700      	movs	r7, #0
 8012b62:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6a:	f040 809b 	bne.w	8012ca4 <__kernel_rem_pio2f+0x310>
 8012b6e:	1e74      	subs	r4, r6, #1
 8012b70:	46a4      	mov	ip, r4
 8012b72:	2000      	movs	r0, #0
 8012b74:	45d4      	cmp	ip, sl
 8012b76:	da4a      	bge.n	8012c0e <__kernel_rem_pio2f+0x27a>
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d07a      	beq.n	8012c72 <__kernel_rem_pio2f+0x2de>
 8012b7c:	ab08      	add	r3, sp, #32
 8012b7e:	3d08      	subs	r5, #8
 8012b80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	f000 8081 	beq.w	8012c8c <__kernel_rem_pio2f+0x2f8>
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012b90:	00a5      	lsls	r5, r4, #2
 8012b92:	f000 fb0f 	bl	80131b4 <scalbnf>
 8012b96:	aa44      	add	r2, sp, #272	; 0x110
 8012b98:	1d2b      	adds	r3, r5, #4
 8012b9a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8012c9c <__kernel_rem_pio2f+0x308>
 8012b9e:	18d1      	adds	r1, r2, r3
 8012ba0:	4622      	mov	r2, r4
 8012ba2:	2a00      	cmp	r2, #0
 8012ba4:	f280 80ae 	bge.w	8012d04 <__kernel_rem_pio2f+0x370>
 8012ba8:	4622      	mov	r2, r4
 8012baa:	2a00      	cmp	r2, #0
 8012bac:	f2c0 80cc 	blt.w	8012d48 <__kernel_rem_pio2f+0x3b4>
 8012bb0:	a944      	add	r1, sp, #272	; 0x110
 8012bb2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8012bb6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8012c94 <__kernel_rem_pio2f+0x300>
 8012bba:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012ca0 <__kernel_rem_pio2f+0x30c>
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	1aa1      	subs	r1, r4, r2
 8012bc2:	e0b6      	b.n	8012d32 <__kernel_rem_pio2f+0x39e>
 8012bc4:	2702      	movs	r7, #2
 8012bc6:	e78c      	b.n	8012ae2 <__kernel_rem_pio2f+0x14e>
 8012bc8:	6820      	ldr	r0, [r4, #0]
 8012bca:	b94b      	cbnz	r3, 8012be0 <__kernel_rem_pio2f+0x24c>
 8012bcc:	b118      	cbz	r0, 8012bd6 <__kernel_rem_pio2f+0x242>
 8012bce:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8012bd2:	6020      	str	r0, [r4, #0]
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	f10e 0e01 	add.w	lr, lr, #1
 8012bda:	3404      	adds	r4, #4
 8012bdc:	4603      	mov	r3, r0
 8012bde:	e785      	b.n	8012aec <__kernel_rem_pio2f+0x158>
 8012be0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8012be4:	6020      	str	r0, [r4, #0]
 8012be6:	4618      	mov	r0, r3
 8012be8:	e7f5      	b.n	8012bd6 <__kernel_rem_pio2f+0x242>
 8012bea:	1e74      	subs	r4, r6, #1
 8012bec:	a808      	add	r0, sp, #32
 8012bee:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012bf2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012bf6:	f10d 0c20 	add.w	ip, sp, #32
 8012bfa:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8012bfe:	e77e      	b.n	8012afe <__kernel_rem_pio2f+0x16a>
 8012c00:	1e74      	subs	r4, r6, #1
 8012c02:	a808      	add	r0, sp, #32
 8012c04:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012c08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8012c0c:	e7f3      	b.n	8012bf6 <__kernel_rem_pio2f+0x262>
 8012c0e:	ab08      	add	r3, sp, #32
 8012c10:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8012c14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012c18:	4318      	orrs	r0, r3
 8012c1a:	e7ab      	b.n	8012b74 <__kernel_rem_pio2f+0x1e0>
 8012c1c:	f10c 0c01 	add.w	ip, ip, #1
 8012c20:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8012c24:	2c00      	cmp	r4, #0
 8012c26:	d0f9      	beq.n	8012c1c <__kernel_rem_pio2f+0x288>
 8012c28:	9b05      	ldr	r3, [sp, #20]
 8012c2a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012c2e:	eb0d 0003 	add.w	r0, sp, r3
 8012c32:	9b01      	ldr	r3, [sp, #4]
 8012c34:	18f4      	adds	r4, r6, r3
 8012c36:	ab1c      	add	r3, sp, #112	; 0x70
 8012c38:	1c77      	adds	r7, r6, #1
 8012c3a:	384c      	subs	r0, #76	; 0x4c
 8012c3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012c40:	4466      	add	r6, ip
 8012c42:	42be      	cmp	r6, r7
 8012c44:	f6ff af0b 	blt.w	8012a5e <__kernel_rem_pio2f+0xca>
 8012c48:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8012c4c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012c50:	ee07 3a90 	vmov	s15, r3
 8012c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c58:	f04f 0c00 	mov.w	ip, #0
 8012c5c:	ece4 7a01 	vstmia	r4!, {s15}
 8012c60:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012ca0 <__kernel_rem_pio2f+0x30c>
 8012c64:	46a1      	mov	r9, r4
 8012c66:	458c      	cmp	ip, r1
 8012c68:	dd07      	ble.n	8012c7a <__kernel_rem_pio2f+0x2e6>
 8012c6a:	ece0 7a01 	vstmia	r0!, {s15}
 8012c6e:	3701      	adds	r7, #1
 8012c70:	e7e7      	b.n	8012c42 <__kernel_rem_pio2f+0x2ae>
 8012c72:	9804      	ldr	r0, [sp, #16]
 8012c74:	f04f 0c01 	mov.w	ip, #1
 8012c78:	e7d2      	b.n	8012c20 <__kernel_rem_pio2f+0x28c>
 8012c7a:	ecfe 6a01 	vldmia	lr!, {s13}
 8012c7e:	ed39 7a01 	vldmdb	r9!, {s14}
 8012c82:	f10c 0c01 	add.w	ip, ip, #1
 8012c86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012c8a:	e7ec      	b.n	8012c66 <__kernel_rem_pio2f+0x2d2>
 8012c8c:	3c01      	subs	r4, #1
 8012c8e:	e775      	b.n	8012b7c <__kernel_rem_pio2f+0x1e8>
 8012c90:	08013ef8 	.word	0x08013ef8
 8012c94:	08013ecc 	.word	0x08013ecc
 8012c98:	43800000 	.word	0x43800000
 8012c9c:	3b800000 	.word	0x3b800000
 8012ca0:	00000000 	.word	0x00000000
 8012ca4:	9b03      	ldr	r3, [sp, #12]
 8012ca6:	eeb0 0a48 	vmov.f32	s0, s16
 8012caa:	1a98      	subs	r0, r3, r2
 8012cac:	f000 fa82 	bl	80131b4 <scalbnf>
 8012cb0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8012c98 <__kernel_rem_pio2f+0x304>
 8012cb4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbc:	db19      	blt.n	8012cf2 <__kernel_rem_pio2f+0x35e>
 8012cbe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8012c9c <__kernel_rem_pio2f+0x308>
 8012cc2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012cc6:	aa08      	add	r2, sp, #32
 8012cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ccc:	1c74      	adds	r4, r6, #1
 8012cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cd2:	3508      	adds	r5, #8
 8012cd4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012cdc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012ce0:	ee10 3a10 	vmov	r3, s0
 8012ce4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012ce8:	ee17 3a90 	vmov	r3, s15
 8012cec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012cf0:	e74b      	b.n	8012b8a <__kernel_rem_pio2f+0x1f6>
 8012cf2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012cf6:	aa08      	add	r2, sp, #32
 8012cf8:	ee10 3a10 	vmov	r3, s0
 8012cfc:	4634      	mov	r4, r6
 8012cfe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012d02:	e742      	b.n	8012b8a <__kernel_rem_pio2f+0x1f6>
 8012d04:	a808      	add	r0, sp, #32
 8012d06:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012d0a:	9001      	str	r0, [sp, #4]
 8012d0c:	ee07 0a90 	vmov	s15, r0
 8012d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d14:	3a01      	subs	r2, #1
 8012d16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012d1a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012d1e:	ed61 7a01 	vstmdb	r1!, {s15}
 8012d22:	e73e      	b.n	8012ba2 <__kernel_rem_pio2f+0x20e>
 8012d24:	ecfc 6a01 	vldmia	ip!, {s13}
 8012d28:	ecb6 7a01 	vldmia	r6!, {s14}
 8012d2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012d30:	3001      	adds	r0, #1
 8012d32:	4550      	cmp	r0, sl
 8012d34:	dc01      	bgt.n	8012d3a <__kernel_rem_pio2f+0x3a6>
 8012d36:	4288      	cmp	r0, r1
 8012d38:	ddf4      	ble.n	8012d24 <__kernel_rem_pio2f+0x390>
 8012d3a:	a858      	add	r0, sp, #352	; 0x160
 8012d3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012d40:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8012d44:	3a01      	subs	r2, #1
 8012d46:	e730      	b.n	8012baa <__kernel_rem_pio2f+0x216>
 8012d48:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8012d4a:	2a02      	cmp	r2, #2
 8012d4c:	dc09      	bgt.n	8012d62 <__kernel_rem_pio2f+0x3ce>
 8012d4e:	2a00      	cmp	r2, #0
 8012d50:	dc2a      	bgt.n	8012da8 <__kernel_rem_pio2f+0x414>
 8012d52:	d043      	beq.n	8012ddc <__kernel_rem_pio2f+0x448>
 8012d54:	f009 0007 	and.w	r0, r9, #7
 8012d58:	b059      	add	sp, #356	; 0x164
 8012d5a:	ecbd 8b04 	vpop	{d8-d9}
 8012d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d62:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8012d64:	2b03      	cmp	r3, #3
 8012d66:	d1f5      	bne.n	8012d54 <__kernel_rem_pio2f+0x3c0>
 8012d68:	ab30      	add	r3, sp, #192	; 0xc0
 8012d6a:	442b      	add	r3, r5
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	4619      	mov	r1, r3
 8012d70:	4620      	mov	r0, r4
 8012d72:	2800      	cmp	r0, #0
 8012d74:	f1a1 0104 	sub.w	r1, r1, #4
 8012d78:	dc51      	bgt.n	8012e1e <__kernel_rem_pio2f+0x48a>
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	2901      	cmp	r1, #1
 8012d7e:	f1a2 0204 	sub.w	r2, r2, #4
 8012d82:	dc5c      	bgt.n	8012e3e <__kernel_rem_pio2f+0x4aa>
 8012d84:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8012ca0 <__kernel_rem_pio2f+0x30c>
 8012d88:	3304      	adds	r3, #4
 8012d8a:	2c01      	cmp	r4, #1
 8012d8c:	dc67      	bgt.n	8012e5e <__kernel_rem_pio2f+0x4ca>
 8012d8e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012d92:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012d96:	2f00      	cmp	r7, #0
 8012d98:	d167      	bne.n	8012e6a <__kernel_rem_pio2f+0x4d6>
 8012d9a:	edc8 6a00 	vstr	s13, [r8]
 8012d9e:	ed88 7a01 	vstr	s14, [r8, #4]
 8012da2:	edc8 7a02 	vstr	s15, [r8, #8]
 8012da6:	e7d5      	b.n	8012d54 <__kernel_rem_pio2f+0x3c0>
 8012da8:	aa30      	add	r2, sp, #192	; 0xc0
 8012daa:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8012ca0 <__kernel_rem_pio2f+0x30c>
 8012dae:	4413      	add	r3, r2
 8012db0:	4622      	mov	r2, r4
 8012db2:	2a00      	cmp	r2, #0
 8012db4:	da24      	bge.n	8012e00 <__kernel_rem_pio2f+0x46c>
 8012db6:	b34f      	cbz	r7, 8012e0c <__kernel_rem_pio2f+0x478>
 8012db8:	eef1 7a47 	vneg.f32	s15, s14
 8012dbc:	edc8 7a00 	vstr	s15, [r8]
 8012dc0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8012dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012dc8:	aa31      	add	r2, sp, #196	; 0xc4
 8012dca:	2301      	movs	r3, #1
 8012dcc:	429c      	cmp	r4, r3
 8012dce:	da20      	bge.n	8012e12 <__kernel_rem_pio2f+0x47e>
 8012dd0:	b10f      	cbz	r7, 8012dd6 <__kernel_rem_pio2f+0x442>
 8012dd2:	eef1 7a67 	vneg.f32	s15, s15
 8012dd6:	edc8 7a01 	vstr	s15, [r8, #4]
 8012dda:	e7bb      	b.n	8012d54 <__kernel_rem_pio2f+0x3c0>
 8012ddc:	aa30      	add	r2, sp, #192	; 0xc0
 8012dde:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8012ca0 <__kernel_rem_pio2f+0x30c>
 8012de2:	4413      	add	r3, r2
 8012de4:	2c00      	cmp	r4, #0
 8012de6:	da05      	bge.n	8012df4 <__kernel_rem_pio2f+0x460>
 8012de8:	b10f      	cbz	r7, 8012dee <__kernel_rem_pio2f+0x45a>
 8012dea:	eef1 7a67 	vneg.f32	s15, s15
 8012dee:	edc8 7a00 	vstr	s15, [r8]
 8012df2:	e7af      	b.n	8012d54 <__kernel_rem_pio2f+0x3c0>
 8012df4:	ed33 7a01 	vldmdb	r3!, {s14}
 8012df8:	3c01      	subs	r4, #1
 8012dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012dfe:	e7f1      	b.n	8012de4 <__kernel_rem_pio2f+0x450>
 8012e00:	ed73 7a01 	vldmdb	r3!, {s15}
 8012e04:	3a01      	subs	r2, #1
 8012e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e0a:	e7d2      	b.n	8012db2 <__kernel_rem_pio2f+0x41e>
 8012e0c:	eef0 7a47 	vmov.f32	s15, s14
 8012e10:	e7d4      	b.n	8012dbc <__kernel_rem_pio2f+0x428>
 8012e12:	ecb2 7a01 	vldmia	r2!, {s14}
 8012e16:	3301      	adds	r3, #1
 8012e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e1c:	e7d6      	b.n	8012dcc <__kernel_rem_pio2f+0x438>
 8012e1e:	edd1 7a00 	vldr	s15, [r1]
 8012e22:	edd1 6a01 	vldr	s13, [r1, #4]
 8012e26:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012e2a:	3801      	subs	r0, #1
 8012e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e30:	ed81 7a00 	vstr	s14, [r1]
 8012e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e38:	edc1 7a01 	vstr	s15, [r1, #4]
 8012e3c:	e799      	b.n	8012d72 <__kernel_rem_pio2f+0x3de>
 8012e3e:	edd2 7a00 	vldr	s15, [r2]
 8012e42:	edd2 6a01 	vldr	s13, [r2, #4]
 8012e46:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012e4a:	3901      	subs	r1, #1
 8012e4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e50:	ed82 7a00 	vstr	s14, [r2]
 8012e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e58:	edc2 7a01 	vstr	s15, [r2, #4]
 8012e5c:	e78e      	b.n	8012d7c <__kernel_rem_pio2f+0x3e8>
 8012e5e:	ed33 7a01 	vldmdb	r3!, {s14}
 8012e62:	3c01      	subs	r4, #1
 8012e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e68:	e78f      	b.n	8012d8a <__kernel_rem_pio2f+0x3f6>
 8012e6a:	eef1 6a66 	vneg.f32	s13, s13
 8012e6e:	eeb1 7a47 	vneg.f32	s14, s14
 8012e72:	edc8 6a00 	vstr	s13, [r8]
 8012e76:	ed88 7a01 	vstr	s14, [r8, #4]
 8012e7a:	eef1 7a67 	vneg.f32	s15, s15
 8012e7e:	e790      	b.n	8012da2 <__kernel_rem_pio2f+0x40e>

08012e80 <__kernel_sinf>:
 8012e80:	ee10 3a10 	vmov	r3, s0
 8012e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e88:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012e8c:	da04      	bge.n	8012e98 <__kernel_sinf+0x18>
 8012e8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012e92:	ee17 3a90 	vmov	r3, s15
 8012e96:	b35b      	cbz	r3, 8012ef0 <__kernel_sinf+0x70>
 8012e98:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012e9c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012ef4 <__kernel_sinf+0x74>
 8012ea0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012ef8 <__kernel_sinf+0x78>
 8012ea4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012ea8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012efc <__kernel_sinf+0x7c>
 8012eac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012eb0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012f00 <__kernel_sinf+0x80>
 8012eb4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012eb8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012f04 <__kernel_sinf+0x84>
 8012ebc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012ec0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ec4:	b930      	cbnz	r0, 8012ed4 <__kernel_sinf+0x54>
 8012ec6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8012f08 <__kernel_sinf+0x88>
 8012eca:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012ece:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012ed2:	4770      	bx	lr
 8012ed4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012ed8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012edc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012ee0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012ee4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012f0c <__kernel_sinf+0x8c>
 8012ee8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012eec:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	2f2ec9d3 	.word	0x2f2ec9d3
 8012ef8:	b2d72f34 	.word	0xb2d72f34
 8012efc:	3638ef1b 	.word	0x3638ef1b
 8012f00:	b9500d01 	.word	0xb9500d01
 8012f04:	3c088889 	.word	0x3c088889
 8012f08:	be2aaaab 	.word	0xbe2aaaab
 8012f0c:	3e2aaaab 	.word	0x3e2aaaab

08012f10 <with_errnof>:
 8012f10:	b513      	push	{r0, r1, r4, lr}
 8012f12:	4604      	mov	r4, r0
 8012f14:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012f18:	f7fb ff00 	bl	800ed1c <__errno>
 8012f1c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8012f20:	6004      	str	r4, [r0, #0]
 8012f22:	b002      	add	sp, #8
 8012f24:	bd10      	pop	{r4, pc}

08012f26 <xflowf>:
 8012f26:	b130      	cbz	r0, 8012f36 <xflowf+0x10>
 8012f28:	eef1 7a40 	vneg.f32	s15, s0
 8012f2c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012f30:	2022      	movs	r0, #34	; 0x22
 8012f32:	f7ff bfed 	b.w	8012f10 <with_errnof>
 8012f36:	eef0 7a40 	vmov.f32	s15, s0
 8012f3a:	e7f7      	b.n	8012f2c <xflowf+0x6>

08012f3c <__math_uflowf>:
 8012f3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012f44 <__math_uflowf+0x8>
 8012f40:	f7ff bff1 	b.w	8012f26 <xflowf>
 8012f44:	10000000 	.word	0x10000000

08012f48 <__math_oflowf>:
 8012f48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012f50 <__math_oflowf+0x8>
 8012f4c:	f7ff bfeb 	b.w	8012f26 <xflowf>
 8012f50:	70000000 	.word	0x70000000

08012f54 <atanf>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	ee10 5a10 	vmov	r5, s0
 8012f5a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012f5e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012f62:	eef0 7a40 	vmov.f32	s15, s0
 8012f66:	db10      	blt.n	8012f8a <atanf+0x36>
 8012f68:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012f6c:	dd04      	ble.n	8012f78 <atanf+0x24>
 8012f6e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012f72:	eeb0 0a67 	vmov.f32	s0, s15
 8012f76:	bd38      	pop	{r3, r4, r5, pc}
 8012f78:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80130b0 <atanf+0x15c>
 8012f7c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80130b4 <atanf+0x160>
 8012f80:	2d00      	cmp	r5, #0
 8012f82:	bfd8      	it	le
 8012f84:	eef0 7a40 	vmovle.f32	s15, s0
 8012f88:	e7f3      	b.n	8012f72 <atanf+0x1e>
 8012f8a:	4b4b      	ldr	r3, [pc, #300]	; (80130b8 <atanf+0x164>)
 8012f8c:	429c      	cmp	r4, r3
 8012f8e:	dc10      	bgt.n	8012fb2 <atanf+0x5e>
 8012f90:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012f94:	da0a      	bge.n	8012fac <atanf+0x58>
 8012f96:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80130bc <atanf+0x168>
 8012f9a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012fa2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012faa:	dce2      	bgt.n	8012f72 <atanf+0x1e>
 8012fac:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb0:	e013      	b.n	8012fda <atanf+0x86>
 8012fb2:	f000 f8a3 	bl	80130fc <fabsf>
 8012fb6:	4b42      	ldr	r3, [pc, #264]	; (80130c0 <atanf+0x16c>)
 8012fb8:	429c      	cmp	r4, r3
 8012fba:	dc4f      	bgt.n	801305c <atanf+0x108>
 8012fbc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012fc0:	429c      	cmp	r4, r3
 8012fc2:	dc41      	bgt.n	8013048 <atanf+0xf4>
 8012fc4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012fc8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012fcc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012fd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012fda:	1c5a      	adds	r2, r3, #1
 8012fdc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012fe0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80130c4 <atanf+0x170>
 8012fe4:	eddf 5a38 	vldr	s11, [pc, #224]	; 80130c8 <atanf+0x174>
 8012fe8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80130cc <atanf+0x178>
 8012fec:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012ff0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012ff4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80130d0 <atanf+0x17c>
 8012ff8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012ffc:	eddf 5a35 	vldr	s11, [pc, #212]	; 80130d4 <atanf+0x180>
 8013000:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013004:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80130d8 <atanf+0x184>
 8013008:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801300c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80130dc <atanf+0x188>
 8013010:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013014:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80130e0 <atanf+0x18c>
 8013018:	eea6 5a87 	vfma.f32	s10, s13, s14
 801301c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80130e4 <atanf+0x190>
 8013020:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013024:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80130e8 <atanf+0x194>
 8013028:	eea7 5a26 	vfma.f32	s10, s14, s13
 801302c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80130ec <atanf+0x198>
 8013030:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013034:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013038:	eea5 7a86 	vfma.f32	s14, s11, s12
 801303c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013040:	d121      	bne.n	8013086 <atanf+0x132>
 8013042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013046:	e794      	b.n	8012f72 <atanf+0x1e>
 8013048:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801304c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013050:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013054:	2301      	movs	r3, #1
 8013056:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801305a:	e7be      	b.n	8012fda <atanf+0x86>
 801305c:	4b24      	ldr	r3, [pc, #144]	; (80130f0 <atanf+0x19c>)
 801305e:	429c      	cmp	r4, r3
 8013060:	dc0b      	bgt.n	801307a <atanf+0x126>
 8013062:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801306a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801306e:	2302      	movs	r3, #2
 8013070:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013078:	e7af      	b.n	8012fda <atanf+0x86>
 801307a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801307e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013082:	2303      	movs	r3, #3
 8013084:	e7a9      	b.n	8012fda <atanf+0x86>
 8013086:	4a1b      	ldr	r2, [pc, #108]	; (80130f4 <atanf+0x1a0>)
 8013088:	491b      	ldr	r1, [pc, #108]	; (80130f8 <atanf+0x1a4>)
 801308a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801308e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013092:	ed93 0a00 	vldr	s0, [r3]
 8013096:	ee37 7a40 	vsub.f32	s14, s14, s0
 801309a:	ed92 0a00 	vldr	s0, [r2]
 801309e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130a2:	2d00      	cmp	r5, #0
 80130a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80130a8:	bfb8      	it	lt
 80130aa:	eef1 7a67 	vneglt.f32	s15, s15
 80130ae:	e760      	b.n	8012f72 <atanf+0x1e>
 80130b0:	3fc90fdb 	.word	0x3fc90fdb
 80130b4:	bfc90fdb 	.word	0xbfc90fdb
 80130b8:	3edfffff 	.word	0x3edfffff
 80130bc:	7149f2ca 	.word	0x7149f2ca
 80130c0:	3f97ffff 	.word	0x3f97ffff
 80130c4:	3c8569d7 	.word	0x3c8569d7
 80130c8:	3d4bda59 	.word	0x3d4bda59
 80130cc:	bd6ef16b 	.word	0xbd6ef16b
 80130d0:	3d886b35 	.word	0x3d886b35
 80130d4:	3dba2e6e 	.word	0x3dba2e6e
 80130d8:	3e124925 	.word	0x3e124925
 80130dc:	3eaaaaab 	.word	0x3eaaaaab
 80130e0:	bd15a221 	.word	0xbd15a221
 80130e4:	bd9d8795 	.word	0xbd9d8795
 80130e8:	bde38e38 	.word	0xbde38e38
 80130ec:	be4ccccd 	.word	0xbe4ccccd
 80130f0:	401bffff 	.word	0x401bffff
 80130f4:	08013f04 	.word	0x08013f04
 80130f8:	08013f14 	.word	0x08013f14

080130fc <fabsf>:
 80130fc:	ee10 3a10 	vmov	r3, s0
 8013100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013104:	ee00 3a10 	vmov	s0, r3
 8013108:	4770      	bx	lr

0801310a <finitef>:
 801310a:	b082      	sub	sp, #8
 801310c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013110:	9801      	ldr	r0, [sp, #4]
 8013112:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013116:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801311a:	bfac      	ite	ge
 801311c:	2000      	movge	r0, #0
 801311e:	2001      	movlt	r0, #1
 8013120:	b002      	add	sp, #8
 8013122:	4770      	bx	lr

08013124 <floorf>:
 8013124:	ee10 3a10 	vmov	r3, s0
 8013128:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801312c:	3a7f      	subs	r2, #127	; 0x7f
 801312e:	2a16      	cmp	r2, #22
 8013130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013134:	dc2a      	bgt.n	801318c <floorf+0x68>
 8013136:	2a00      	cmp	r2, #0
 8013138:	da11      	bge.n	801315e <floorf+0x3a>
 801313a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801319c <floorf+0x78>
 801313e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314a:	dd05      	ble.n	8013158 <floorf+0x34>
 801314c:	2b00      	cmp	r3, #0
 801314e:	da23      	bge.n	8013198 <floorf+0x74>
 8013150:	4a13      	ldr	r2, [pc, #76]	; (80131a0 <floorf+0x7c>)
 8013152:	2900      	cmp	r1, #0
 8013154:	bf18      	it	ne
 8013156:	4613      	movne	r3, r2
 8013158:	ee00 3a10 	vmov	s0, r3
 801315c:	4770      	bx	lr
 801315e:	4911      	ldr	r1, [pc, #68]	; (80131a4 <floorf+0x80>)
 8013160:	4111      	asrs	r1, r2
 8013162:	420b      	tst	r3, r1
 8013164:	d0fa      	beq.n	801315c <floorf+0x38>
 8013166:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801319c <floorf+0x78>
 801316a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801316e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013176:	ddef      	ble.n	8013158 <floorf+0x34>
 8013178:	2b00      	cmp	r3, #0
 801317a:	bfbe      	ittt	lt
 801317c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8013180:	fa40 f202 	asrlt.w	r2, r0, r2
 8013184:	189b      	addlt	r3, r3, r2
 8013186:	ea23 0301 	bic.w	r3, r3, r1
 801318a:	e7e5      	b.n	8013158 <floorf+0x34>
 801318c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013190:	d3e4      	bcc.n	801315c <floorf+0x38>
 8013192:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013196:	4770      	bx	lr
 8013198:	2300      	movs	r3, #0
 801319a:	e7dd      	b.n	8013158 <floorf+0x34>
 801319c:	7149f2ca 	.word	0x7149f2ca
 80131a0:	bf800000 	.word	0xbf800000
 80131a4:	007fffff 	.word	0x007fffff

080131a8 <nanf>:
 80131a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80131b0 <nanf+0x8>
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop
 80131b0:	7fc00000 	.word	0x7fc00000

080131b4 <scalbnf>:
 80131b4:	ee10 3a10 	vmov	r3, s0
 80131b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80131bc:	d025      	beq.n	801320a <scalbnf+0x56>
 80131be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80131c2:	d302      	bcc.n	80131ca <scalbnf+0x16>
 80131c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80131c8:	4770      	bx	lr
 80131ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80131ce:	d122      	bne.n	8013216 <scalbnf+0x62>
 80131d0:	4b2a      	ldr	r3, [pc, #168]	; (801327c <scalbnf+0xc8>)
 80131d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013280 <scalbnf+0xcc>
 80131d6:	4298      	cmp	r0, r3
 80131d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80131dc:	db16      	blt.n	801320c <scalbnf+0x58>
 80131de:	ee10 3a10 	vmov	r3, s0
 80131e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80131e6:	3a19      	subs	r2, #25
 80131e8:	4402      	add	r2, r0
 80131ea:	2afe      	cmp	r2, #254	; 0xfe
 80131ec:	dd15      	ble.n	801321a <scalbnf+0x66>
 80131ee:	ee10 3a10 	vmov	r3, s0
 80131f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8013284 <scalbnf+0xd0>
 80131f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013288 <scalbnf+0xd4>
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	eeb0 7a67 	vmov.f32	s14, s15
 8013200:	bfb8      	it	lt
 8013202:	eef0 7a66 	vmovlt.f32	s15, s13
 8013206:	ee27 0a27 	vmul.f32	s0, s14, s15
 801320a:	4770      	bx	lr
 801320c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801328c <scalbnf+0xd8>
 8013210:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013214:	4770      	bx	lr
 8013216:	0dd2      	lsrs	r2, r2, #23
 8013218:	e7e6      	b.n	80131e8 <scalbnf+0x34>
 801321a:	2a00      	cmp	r2, #0
 801321c:	dd06      	ble.n	801322c <scalbnf+0x78>
 801321e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013222:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013226:	ee00 3a10 	vmov	s0, r3
 801322a:	4770      	bx	lr
 801322c:	f112 0f16 	cmn.w	r2, #22
 8013230:	da1a      	bge.n	8013268 <scalbnf+0xb4>
 8013232:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013236:	4298      	cmp	r0, r3
 8013238:	ee10 3a10 	vmov	r3, s0
 801323c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013240:	dd0a      	ble.n	8013258 <scalbnf+0xa4>
 8013242:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8013284 <scalbnf+0xd0>
 8013246:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013288 <scalbnf+0xd4>
 801324a:	eef0 7a40 	vmov.f32	s15, s0
 801324e:	2b00      	cmp	r3, #0
 8013250:	bf18      	it	ne
 8013252:	eeb0 0a47 	vmovne.f32	s0, s14
 8013256:	e7db      	b.n	8013210 <scalbnf+0x5c>
 8013258:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801328c <scalbnf+0xd8>
 801325c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013290 <scalbnf+0xdc>
 8013260:	eef0 7a40 	vmov.f32	s15, s0
 8013264:	2b00      	cmp	r3, #0
 8013266:	e7f3      	b.n	8013250 <scalbnf+0x9c>
 8013268:	3219      	adds	r2, #25
 801326a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801326e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013272:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013294 <scalbnf+0xe0>
 8013276:	ee07 3a10 	vmov	s14, r3
 801327a:	e7c4      	b.n	8013206 <scalbnf+0x52>
 801327c:	ffff3cb0 	.word	0xffff3cb0
 8013280:	4c000000 	.word	0x4c000000
 8013284:	7149f2ca 	.word	0x7149f2ca
 8013288:	f149f2ca 	.word	0xf149f2ca
 801328c:	0da24260 	.word	0x0da24260
 8013290:	8da24260 	.word	0x8da24260
 8013294:	33000000 	.word	0x33000000

08013298 <_init>:
 8013298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801329a:	bf00      	nop
 801329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801329e:	bc08      	pop	{r3}
 80132a0:	469e      	mov	lr, r3
 80132a2:	4770      	bx	lr

080132a4 <_fini>:
 80132a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132a6:	bf00      	nop
 80132a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132aa:	bc08      	pop	{r3}
 80132ac:	469e      	mov	lr, r3
 80132ae:	4770      	bx	lr
